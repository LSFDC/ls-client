; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\BingoRightWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetNumber@NumberButton@@QAEHXZ			; NumberButton::GetNumber
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingownd.h
;	COMDAT ?GetNumber@NumberButton@@QAEHXZ
_TEXT	SEGMENT
?GetNumber@NumberButton@@QAEHXZ PROC			; NumberButton::GetNumber, COMDAT
; _this$ = ecx

; 239  : 	int GetNumber() { return m_iNumber; }

  00000	8b 81 28 02 00
	00		 mov	 eax, DWORD PTR [ecx+552]
  00006	c3		 ret	 0
?GetNumber@NumberButton@@QAEHXZ ENDP			; NumberButton::GetNumber
_TEXT	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return8@@YAIXZ					; return8
; Function compile flags: /Ogsp
;	COMDAT ?return8@@YAIXZ
_TEXT	SEGMENT
?return8@@YAIXZ PROC					; return8, COMDAT

; 19   : 	__forceinline unsigned int return8() { __asm mov eax, 8 };

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?return8@@YAIXZ ENDP					; return8
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?return1000@@YAIXZ				; return1000
; Function compile flags: /Ogsp
;	COMDAT ?return1000@@YAIXZ
_TEXT	SEGMENT
?return1000@@YAIXZ PROC					; return1000, COMDAT

; 29   : 	__forceinline unsigned int return1000() { __asm mov eax, 1000 };

  00000	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00005	c3		 ret	 0
?return1000@@YAIXZ ENDP					; return1000
_TEXT	ENDS
PUBLIC	?GetBingoType@ioBingo@@QAEHXZ			; ioBingo::GetBingoType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobingo.h
;	COMDAT ?GetBingoType@ioBingo@@QAEHXZ
_TEXT	SEGMENT
?GetBingoType@ioBingo@@QAEHXZ PROC			; ioBingo::GetBingoType, COMDAT
; _this$ = ecx

; 246  : 	int GetBingoType(){ return m_iBingoType; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetBingoType@ioBingo@@QAEHXZ ENDP			; ioBingo::GetBingoType
_TEXT	ENDS
PUBLIC	??_C@_0BK@BLCGCHFF@XML?1bingo?1bingomsgbox?4xml?$AA@ ; `string'
PUBLIC	?iwm_create@BingoRightWnd@@UAEXXZ		; BingoRightWnd::iwm_create
EXTRN	__imp_?AddWnd@ioGUIManager@@QAEPAVioWnd@@PBDPAV2@@Z:PROC
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
;	COMDAT ??_C@_0BK@BLCGCHFF@XML?1bingo?1bingomsgbox?4xml?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
CONST	SEGMENT
??_C@_0BK@BLCGCHFF@XML?1bingo?1bingomsgbox?4xml?$AA@ DB 'XML/bingo/bingom'
	DB	'sgbox.xml', 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?iwm_create@BingoRightWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_create@BingoRightWnd@@UAEXXZ PROC			; BingoRightWnd::iwm_create, COMDAT
; _this$ = ecx

; 180  : 	g_GUIMgr.AddWnd( "XML/bingo/bingomsgbox.xml", this );

  00000	51		 push	 ecx
  00001	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BLCGCHFF@XML?1bingo?1bingomsgbox?4xml?$AA@
  00006	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0000b	8b c8		 mov	 ecx, eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddWnd@ioGUIManager@@QAEPAVioWnd@@PBDPAV2@@Z

; 181  : }

  00013	c3		 ret	 0
?iwm_create@BingoRightWnd@@UAEXXZ ENDP			; BingoRightWnd::iwm_create
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	?RenderRandPlay@BingoRightWnd@@IAEXHH@Z		; BingoRightWnd::RenderRandPlay
EXTRN	__imp_?RenderNum@ioUIRenderImage@@QAEXMMHMMW4UIRenderType@@W4TextureFilterOption@@0W4RenerNumerFormatting@1@@Z:PROC
EXTRN	__imp_?GetWidth@ioUIRenderElement@@QBEHXZ:PROC
EXTRN	?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z:PROC		; ioMyInfo::GetEtcCoinMoney
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	__imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?RenderRandPlay@BingoRightWnd@@IAEXHH@Z
_TEXT	SEGMENT
tv384 = -16						; size = 4
tv316 = -12						; size = 4
tv304 = -8						; size = 4
tv251 = -4						; size = 4
_iNumWidth$ = -4					; size = 4
tv382 = 8						; size = 4
_iCount$ = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RenderRandPlay@BingoRightWnd@@IAEXHH@Z PROC		; BingoRightWnd::RenderRandPlay, COMDAT
; _this$ = ecx

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 512  : 	enum { GAP_X = 6 };
; 513  : 
; 514  : 	m_pUnderLine->SetHorzFormatting( ioUIRenderImage::HF_STRETCH );

  0000b	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00011	6a 03		 push	 3
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z

; 515  : 	m_pUnderLine->SetSize( 3, 2 );

  00019	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	6a 02		 push	 2
  00023	6a 03		 push	 3
  00025	ff 50 10	 call	 DWORD PTR [eax+16]
  00028	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _x$[ebp]
  0002e	8d 88 07 01 00
	00		 lea	 ecx, DWORD PTR [eax+263]

; 523  : 	iCount = min( iCount, 99 );

  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0003b	05 74 01 00 00	 add	 eax, 372		; 00000174H
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR tv304[ebp], xmm0
  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0004c	8d 43 13	 lea	 eax, DWORD PTR [ebx+19]
  0004f	f3 0f 11 45 f4	 movss	 DWORD PTR tv316[ebp], xmm0
  00054	89 45 08	 mov	 DWORD PTR tv382[ebp], eax
  00057	c7 45 fc 25 00
	00 00		 mov	 DWORD PTR tv251[ebp], 37 ; 00000025H
  0005e	33 ff		 xor	 edi, edi
$LL13@RenderRand:

; 516  : 	for( int i=0; i<37; ++i )
; 517  : 	{
; 518  : 		m_pUnderLine->Render( x + 19 + i * 5, y + 263, UI_RENDER_MULTIPLY );

  00060	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00066	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR tv382[ebp]
  0006b	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR tv304[ebp]
  00070	8b 01		 mov	 eax, DWORD PTR [ecx]
  00072	57		 push	 edi
  00073	57		 push	 edi
  00074	57		 push	 edi
  00075	6a 08		 push	 8
  00077	51		 push	 ecx
  00078	51		 push	 ecx
  00079	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007c	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00082	f3 0f 11 45 f0	 movss	 DWORD PTR tv384[ebp], xmm0
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	ff 10		 call	 DWORD PTR [eax]

; 519  : 		m_pUnderLine->Render( x + 19 + i * 5, y + 372, UI_RENDER_MULTIPLY );

  0008e	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00094	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv316[ebp]
  00099	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009b	57		 push	 edi
  0009c	57		 push	 edi
  0009d	57		 push	 edi
  0009e	6a 08		 push	 8
  000a0	51		 push	 ecx
  000a1	51		 push	 ecx
  000a2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000a8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv384[ebp]
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	ff 10		 call	 DWORD PTR [eax]
  000b4	83 45 08 05	 add	 DWORD PTR tv382[ebp], 5
  000b8	ff 4d fc	 dec	 DWORD PTR tv251[ebp]
  000bb	75 a3		 jne	 SHORT $LL13@RenderRand

; 520  : 	}
; 521  : 
; 522  : 	int iCount = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_NUMBER_GASHAPON );

  000bd	68 98 4a 0f 00	 push	 1002136			; 000f4a98H
  000c2	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000c7	8b c8		 mov	 ecx, eax
  000c9	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 523  : 	iCount = min( iCount, 99 );

  000ce	6a 63		 push	 99			; 00000063H
  000d0	59		 pop	 ecx
  000d1	89 45 08	 mov	 DWORD PTR _iCount$[ebp], eax
  000d4	3b c1		 cmp	 eax, ecx
  000d6	7c 03		 jl	 SHORT $LN10@RenderRand
  000d8	89 4d 08	 mov	 DWORD PTR _iCount$[ebp], ecx
$LN10@RenderRand:

; 524  : 
; 525  : 	int iNumWidth = m_pTextNumber->GetWidth()/10;

  000db	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  000e7	6a 0a		 push	 10			; 0000000aH
  000e9	99		 cdq
  000ea	59		 pop	 ecx
  000eb	f7 f9		 idiv	 ecx

; 526  : 	int iTextWidth = m_pTextCount->GetWidth();

  000ed	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  000f3	89 45 fc	 mov	 DWORD PTR _iNumWidth$[ebp], eax
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ

; 527  : 	int iTotalWidth;
; 528  : 
; 529  : 	if( iCount >= 10 )

  000fc	83 7d 08 0a	 cmp	 DWORD PTR _iCount$[ebp], 10 ; 0000000aH

; 530  : 		iTotalWidth = iTextWidth + iNumWidth * 2 - GAP_X * 2;

  00100	8b 4d fc	 mov	 ecx, DWORD PTR _iNumWidth$[ebp]
  00103	7c 06		 jl	 SHORT $LN3@RenderRand
  00105	8d 44 48 f4	 lea	 eax, DWORD PTR [eax+ecx*2-12]

; 531  : 	else

  00109	eb 04		 jmp	 SHORT $LN2@RenderRand
$LN3@RenderRand:

; 532  : 		iTotalWidth = iTextWidth + iNumWidth - GAP_X;

  0010b	8d 44 08 fa	 lea	 eax, DWORD PTR [eax+ecx-6]
$LN2@RenderRand:

; 533  : 
; 534  : 	int iXOffset = iTotalWidth / 2;

  0010f	99		 cdq
  00110	2b c2		 sub	 eax, edx
  00112	d1 f8		 sar	 eax, 1

; 535  : 	int iCurXPos = x + 110 - iXOffset;

  00114	2b d8		 sub	 ebx, eax

; 536  : 	if( iCount >= 10 )

  00116	8b 45 08	 mov	 eax, DWORD PTR _iCount$[ebp]
  00119	83 c3 6e	 add	 ebx, 110		; 0000006eH
  0011c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0011f	7c 59		 jl	 SHORT $LN1@RenderRand

; 537  : 	{
; 538  : 		m_pTextNumber->RenderNum( iCurXPos, y + 162, iCount / 10 );

  00121	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00129	57		 push	 edi
  0012a	57		 push	 edi
  0012b	57		 push	 edi
  0012c	57		 push	 edi
  0012d	51		 push	 ecx
  0012e	51		 push	 ecx
  0012f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00135	0f 57 c0	 xorps	 xmm0, xmm0
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	6a 0a		 push	 10			; 0000000aH
  0013f	59		 pop	 ecx
  00140	99		 cdq
  00141	f7 f9		 idiv	 ecx
  00143	0f 57 c0	 xorps	 xmm0, xmm0
  00146	50		 push	 eax
  00147	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0014a	51		 push	 ecx
  0014b	51		 push	 ecx
  0014c	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00152	05 a2 00 00 00	 add	 eax, 162		; 000000a2H
  00157	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0015b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00161	0f 57 c0	 xorps	 xmm0, xmm0
  00164	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderNum@ioUIRenderImage@@QAEXMMHMMW4UIRenderType@@W4TextureFilterOption@@0W4RenerNumerFormatting@1@@Z

; 539  : 		iCurXPos += ( iNumWidth - GAP_X );

  00173	8b 45 fc	 mov	 eax, DWORD PTR _iNumWidth$[ebp]
  00176	8d 5c 03 fa	 lea	 ebx, DWORD PTR [ebx+eax-6]
$LN1@RenderRand:

; 540  : 	}
; 541  : 
; 542  : 	m_pTextNumber->RenderNum( iCurXPos, y + 162, iCount % 10 );

  0017a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00182	8b 45 08	 mov	 eax, DWORD PTR _iCount$[ebp]
  00185	57		 push	 edi
  00186	57		 push	 edi
  00187	57		 push	 edi
  00188	57		 push	 edi
  00189	51		 push	 ecx
  0018a	51		 push	 ecx
  0018b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00191	0f 57 c0	 xorps	 xmm0, xmm0
  00194	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00199	6a 0a		 push	 10			; 0000000aH
  0019b	59		 pop	 ecx
  0019c	99		 cdq
  0019d	f7 f9		 idiv	 ecx
  0019f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  001a2	0f 57 c0	 xorps	 xmm0, xmm0
  001a5	05 a2 00 00 00	 add	 eax, 162		; 000000a2H
  001aa	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001ae	52		 push	 edx
  001af	51		 push	 ecx
  001b0	51		 push	 ecx
  001b1	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  001b7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001bd	0f 57 c0	 xorps	 xmm0, xmm0
  001c0	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderNum@ioUIRenderImage@@QAEXMMHMMW4UIRenderType@@W4TextureFilterOption@@0W4RenerNumerFormatting@1@@Z

; 543  : 	iCurXPos += ( iNumWidth - GAP_X );
; 544  : 
; 545  : 	m_pTextCount->Render( iCurXPos, y + 161 );

  001cf	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  001d2	8b b6 74 01 00
	00		 mov	 esi, DWORD PTR [esi+372]
  001d8	8b 06		 mov	 eax, DWORD PTR [esi]
  001da	57		 push	 edi
  001db	57		 push	 edi
  001dc	81 c1 a1 00 00
	00		 add	 ecx, 161		; 000000a1H
  001e2	57		 push	 edi
  001e3	57		 push	 edi
  001e4	51		 push	 ecx
  001e5	51		 push	 ecx
  001e6	0f 57 c0	 xorps	 xmm0, xmm0
  001e9	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _iNumWidth$[ebp]
  001f0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001f6	8d 4c 0b fa	 lea	 ecx, DWORD PTR [ebx+ecx-6]
  001fa	0f 57 c0	 xorps	 xmm0, xmm0
  001fd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00201	8b ce		 mov	 ecx, esi
  00203	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00208	ff 10		 call	 DWORD PTR [eax]
  0020a	5f		 pop	 edi
  0020b	5e		 pop	 esi
  0020c	5b		 pop	 ebx

; 546  : }

  0020d	c9		 leave
  0020e	c2 08 00	 ret	 8
?RenderRandPlay@BingoRightWnd@@IAEXHH@Z ENDP		; BingoRightWnd::RenderRandPlay
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?SetWindowType@BingoRightWnd@@QAEXW4RightWndType@1@@Z ; BingoRightWnd::SetWindowType
EXTRN	__imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
;	COMDAT ?SetWindowType@BingoRightWnd@@QAEXW4RightWndType@1@@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
?SetWindowType@BingoRightWnd@@QAEXW4RightWndType@1@@Z PROC ; BingoRightWnd::SetWindowType, COMDAT
; _this$ = ecx

; 886  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 887  : 	if( m_WindowType == eType )

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _eType$[ebp]
  00009	39 8e b4 01 00
	00		 cmp	 DWORD PTR [esi+436], ecx
  0000f	0f 84 a2 01 00
	00		 je	 $LN5@SetWindowT

; 888  : 		return;
; 889  : 
; 890  : 	m_WindowType = eType;

  00015	53		 push	 ebx
  00016	89 8e b4 01 00
	00		 mov	 DWORD PTR [esi+436], ecx

; 891  : 	switch( m_WindowType )

  0001c	49		 dec	 ecx
  0001d	57		 push	 edi
  0001e	0f 84 31 01 00
	00		 je	 $LN4@SetWindowT
  00024	49		 dec	 ecx
  00025	0f 84 c0 00 00
	00		 je	 $LN3@SetWindowT
  0002b	49		 dec	 ecx
  0002c	74 50		 je	 SHORT $LN2@SetWindowT
  0002e	49		 dec	 ecx
  0002f	0f 85 80 01 00
	00		 jne	 $LN10@SetWindowT

; 950  : 	case RWT_ALL_BINGO:
; 951  : 		{
; 952  : 			HideChildWnd( ID_BINGO_START_BTN );

  00035	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  0003b	33 ff		 xor	 edi, edi
  0003d	57		 push	 edi
  0003e	6a 01		 push	 1
  00040	8b ce		 mov	 ecx, esi
  00042	ff d3		 call	 ebx

; 953  : 
; 954  : 			HideChildWnd( ID_GET_NUMBER_BTN );

  00044	57		 push	 edi
  00045	6a 02		 push	 2
  00047	8b ce		 mov	 ecx, esi
  00049	ff d3		 call	 ebx

; 955  : 			HideChildWnd( ID_SHUFFLE_NUMBER_BTN );

  0004b	57		 push	 edi
  0004c	6a 03		 push	 3
  0004e	8b ce		 mov	 ecx, esi
  00050	ff d3		 call	 ebx

; 956  : 			HideChildWnd( ID_SHUFFLE_REWARD_BTN );

  00052	57		 push	 edi
  00053	6a 04		 push	 4
  00055	8b ce		 mov	 ecx, esi
  00057	ff d3		 call	 ebx

; 957  : 			HideChildWnd( ID_GET_SPECIAL_NUMBER_BTN );

  00059	57		 push	 edi
  0005a	6a 05		 push	 5
  0005c	8b ce		 mov	 ecx, esi
  0005e	ff d3		 call	 ebx

; 958  : 			HideChildWnd( ID_INIT_BTN );

  00060	57		 push	 edi
  00061	6a 06		 push	 6
  00063	8b ce		 mov	 ecx, esi
  00065	ff d3		 call	 ebx

; 959  : 			HideChildWnd( ID_REWARD_LIST_BTN );

  00067	57		 push	 edi
  00068	6a 07		 push	 7
  0006a	8b ce		 mov	 ecx, esi
  0006c	ff d3		 call	 ebx

; 960  : 
; 961  : 			ShowChildWnd( ID_NEW_BINGO_BTN );

  0006e	57		 push	 edi
  0006f	6a 08		 push	 8
  00071	8b ce		 mov	 ecx, esi
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 962  : 
; 963  : 			HideChildWnd( ID_HELP_BTN_1 );
; 964  : 			HideChildWnd( ID_HELP_BTN_2 );
; 965  : 			HideChildWnd( ID_HELP_BTN_3 );
; 966  : 			HideChildWnd( ID_CLOSE_BTN );
; 967  : 		}
; 968  : 		break;

  00079	e9 1b 01 00 00	 jmp	 $LN12@SetWindowT
$LN2@SetWindowT:

; 931  : 	case RWT_FIXED_PLAY:
; 932  : 		{
; 933  : 			HideChildWnd( ID_BINGO_START_BTN );

  0007e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  00084	33 ff		 xor	 edi, edi
  00086	57		 push	 edi
  00087	6a 01		 push	 1
  00089	8b ce		 mov	 ecx, esi
  0008b	ff d3		 call	 ebx

; 934  : 
; 935  : 			HideChildWnd( ID_GET_NUMBER_BTN );

  0008d	57		 push	 edi
  0008e	6a 02		 push	 2
  00090	8b ce		 mov	 ecx, esi
  00092	ff d3		 call	 ebx

; 936  : 			HideChildWnd( ID_SHUFFLE_NUMBER_BTN );

  00094	57		 push	 edi
  00095	6a 03		 push	 3
  00097	8b ce		 mov	 ecx, esi
  00099	ff d3		 call	 ebx

; 937  : 			HideChildWnd( ID_SHUFFLE_REWARD_BTN );

  0009b	57		 push	 edi
  0009c	6a 04		 push	 4
  0009e	8b ce		 mov	 ecx, esi
  000a0	ff d3		 call	 ebx

; 938  : 			HideChildWnd( ID_GET_SPECIAL_NUMBER_BTN );

  000a2	57		 push	 edi
  000a3	6a 05		 push	 5
  000a5	8b ce		 mov	 ecx, esi
  000a7	ff d3		 call	 ebx

; 939  : 			ShowChildWnd( ID_INIT_BTN );

  000a9	57		 push	 edi
  000aa	6a 06		 push	 6
  000ac	8b ce		 mov	 ecx, esi
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 940  : 			ShowChildWnd( ID_REWARD_LIST_BTN );

  000b4	57		 push	 edi
  000b5	6a 07		 push	 7
  000b7	8b ce		 mov	 ecx, esi
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 941  : 
; 942  : 			HideChildWnd( ID_NEW_BINGO_BTN );

  000bf	57		 push	 edi
  000c0	6a 08		 push	 8
  000c2	8b ce		 mov	 ecx, esi
  000c4	ff d3		 call	 ebx

; 943  : 
; 944  : 			HideChildWnd( ID_HELP_BTN_1 );

  000c6	57		 push	 edi
  000c7	6a 14		 push	 20			; 00000014H
  000c9	8b ce		 mov	 ecx, esi
  000cb	ff d3		 call	 ebx

; 945  : 			HideChildWnd( ID_HELP_BTN_2 );

  000cd	57		 push	 edi
  000ce	6a 15		 push	 21			; 00000015H
  000d0	8b ce		 mov	 ecx, esi
  000d2	ff d3		 call	 ebx

; 946  : 			HideChildWnd( ID_HELP_BTN_3 );

  000d4	57		 push	 edi
  000d5	6a 16		 push	 22			; 00000016H
  000d7	8b ce		 mov	 ecx, esi
  000d9	ff d3		 call	 ebx

; 947  : 			ShowChildWnd( ID_CLOSE_BTN );

  000db	57		 push	 edi
  000dc	6a 09		 push	 9
  000de	8b ce		 mov	 ecx, esi
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 948  : 		}
; 949  : 		break;

  000e6	e9 ca 00 00 00	 jmp	 $LN10@SetWindowT
$LN3@SetWindowT:

; 910  : 		}
; 911  : 		break;
; 912  : 	case RWT_RAND_PLAY:
; 913  : 		{
; 914  : 			HideChildWnd( ID_BINGO_START_BTN );

  000eb	33 ff		 xor	 edi, edi
  000ed	57		 push	 edi
  000ee	6a 01		 push	 1
  000f0	8b ce		 mov	 ecx, esi
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 915  : 
; 916  : 			ShowChildWnd( ID_GET_NUMBER_BTN );

  000f8	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z
  000fe	57		 push	 edi
  000ff	6a 02		 push	 2
  00101	8b ce		 mov	 ecx, esi
  00103	ff d3		 call	 ebx

; 917  : 			ShowChildWnd( ID_SHUFFLE_NUMBER_BTN );

  00105	57		 push	 edi
  00106	6a 03		 push	 3
  00108	8b ce		 mov	 ecx, esi
  0010a	ff d3		 call	 ebx

; 918  : 			ShowChildWnd( ID_SHUFFLE_REWARD_BTN );

  0010c	57		 push	 edi
  0010d	6a 04		 push	 4
  0010f	8b ce		 mov	 ecx, esi
  00111	ff d3		 call	 ebx

; 919  : 			ShowChildWnd( ID_GET_SPECIAL_NUMBER_BTN );

  00113	57		 push	 edi
  00114	6a 05		 push	 5
  00116	8b ce		 mov	 ecx, esi
  00118	ff d3		 call	 ebx

; 920  : 			ShowChildWnd( ID_INIT_BTN );

  0011a	57		 push	 edi
  0011b	6a 06		 push	 6
  0011d	8b ce		 mov	 ecx, esi
  0011f	ff d3		 call	 ebx

; 921  : 			ShowChildWnd( ID_REWARD_LIST_BTN );

  00121	57		 push	 edi
  00122	6a 07		 push	 7
  00124	8b ce		 mov	 ecx, esi
  00126	ff d3		 call	 ebx

; 922  : 
; 923  : 			HideChildWnd( ID_NEW_BINGO_BTN );

  00128	57		 push	 edi
  00129	6a 08		 push	 8
  0012b	8b ce		 mov	 ecx, esi
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 924  : 
; 925  : 			ShowChildWnd( ID_HELP_BTN_1 );

  00133	57		 push	 edi
  00134	6a 14		 push	 20			; 00000014H
  00136	8b ce		 mov	 ecx, esi
  00138	ff d3		 call	 ebx

; 926  : 			ShowChildWnd( ID_HELP_BTN_2 );

  0013a	57		 push	 edi
  0013b	6a 15		 push	 21			; 00000015H
  0013d	8b ce		 mov	 ecx, esi
  0013f	ff d3		 call	 ebx

; 927  : 			ShowChildWnd( ID_HELP_BTN_3 );

  00141	57		 push	 edi
  00142	6a 16		 push	 22			; 00000016H
  00144	8b ce		 mov	 ecx, esi
  00146	ff d3		 call	 ebx

; 928  : 			HideChildWnd( ID_CLOSE_BTN );

  00148	57		 push	 edi
  00149	6a 09		 push	 9
  0014b	8b ce		 mov	 ecx, esi
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 929  : 		}
; 930  : 		break;

  00153	eb 60		 jmp	 SHORT $LN10@SetWindowT
$LN4@SetWindowT:

; 892  : 	{
; 893  : 	case RWT_START:
; 894  : 		{
; 895  : 			ShowChildWnd( ID_BINGO_START_BTN );

  00155	33 ff		 xor	 edi, edi
  00157	57		 push	 edi
  00158	6a 01		 push	 1
  0015a	8b ce		 mov	 ecx, esi
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 896  : 
; 897  : 			HideChildWnd( ID_GET_NUMBER_BTN );

  00162	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  00168	57		 push	 edi
  00169	6a 02		 push	 2
  0016b	8b ce		 mov	 ecx, esi
  0016d	ff d3		 call	 ebx

; 898  : 			HideChildWnd( ID_SHUFFLE_NUMBER_BTN );

  0016f	57		 push	 edi
  00170	6a 03		 push	 3
  00172	8b ce		 mov	 ecx, esi
  00174	ff d3		 call	 ebx

; 899  : 			HideChildWnd( ID_SHUFFLE_REWARD_BTN );

  00176	57		 push	 edi
  00177	6a 04		 push	 4
  00179	8b ce		 mov	 ecx, esi
  0017b	ff d3		 call	 ebx

; 900  : 			HideChildWnd( ID_GET_SPECIAL_NUMBER_BTN );

  0017d	57		 push	 edi
  0017e	6a 05		 push	 5
  00180	8b ce		 mov	 ecx, esi
  00182	ff d3		 call	 ebx

; 901  : 			HideChildWnd( ID_INIT_BTN );

  00184	57		 push	 edi
  00185	6a 06		 push	 6
  00187	8b ce		 mov	 ecx, esi
  00189	ff d3		 call	 ebx

; 902  : 			HideChildWnd( ID_REWARD_LIST_BTN );

  0018b	57		 push	 edi
  0018c	6a 07		 push	 7
  0018e	8b ce		 mov	 ecx, esi
  00190	ff d3		 call	 ebx

; 903  : 
; 904  : 			HideChildWnd( ID_NEW_BINGO_BTN );

  00192	57		 push	 edi
  00193	6a 08		 push	 8
  00195	8b ce		 mov	 ecx, esi
  00197	ff d3		 call	 ebx
$LN12@SetWindowT:

; 905  : 
; 906  : 			HideChildWnd( ID_HELP_BTN_1 );

  00199	57		 push	 edi
  0019a	6a 14		 push	 20			; 00000014H
  0019c	8b ce		 mov	 ecx, esi
  0019e	ff d3		 call	 ebx

; 907  : 			HideChildWnd( ID_HELP_BTN_2 );

  001a0	57		 push	 edi
  001a1	6a 15		 push	 21			; 00000015H
  001a3	8b ce		 mov	 ecx, esi
  001a5	ff d3		 call	 ebx

; 908  : 			HideChildWnd( ID_HELP_BTN_3 );

  001a7	57		 push	 edi
  001a8	6a 16		 push	 22			; 00000016H
  001aa	8b ce		 mov	 ecx, esi
  001ac	ff d3		 call	 ebx

; 909  : 			HideChildWnd( ID_CLOSE_BTN );

  001ae	57		 push	 edi
  001af	6a 09		 push	 9
  001b1	8b ce		 mov	 ecx, esi
  001b3	ff d3		 call	 ebx
$LN10@SetWindowT:
  001b5	5f		 pop	 edi
  001b6	5b		 pop	 ebx
$LN5@SetWindowT:
  001b7	5e		 pop	 esi

; 969  : 	}
; 970  : }

  001b8	5d		 pop	 ebp
  001b9	c2 04 00	 ret	 4
?SetWindowType@BingoRightWnd@@QAEXW4RightWndType@1@@Z ENDP ; BingoRightWnd::SetWindowType
_TEXT	ENDS
PUBLIC	?SetActvieChildBtn@BingoRightWnd@@QAEXXZ	; BingoRightWnd::SetActvieChildBtn
EXTRN	__imp_?SetChildActive@ioWnd@@QAEXK@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetActvieChildBtn@BingoRightWnd@@QAEXXZ
_TEXT	SEGMENT
?SetActvieChildBtn@BingoRightWnd@@QAEXXZ PROC		; BingoRightWnd::SetActvieChildBtn, COMDAT
; _this$ = ecx

; 1023 : {

  00000	56		 push	 esi

; 1024 : 	SetChildActive( ID_GET_NUMBER_BTN );

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetChildActive@ioWnd@@QAEXK@Z
  00007	57		 push	 edi
  00008	6a 02		 push	 2
  0000a	8b f9		 mov	 edi, ecx
  0000c	ff d6		 call	 esi

; 1025 : 	SetChildActive( ID_SHUFFLE_NUMBER_BTN );

  0000e	6a 03		 push	 3
  00010	8b cf		 mov	 ecx, edi
  00012	ff d6		 call	 esi

; 1026 : 	SetChildActive( ID_SHUFFLE_REWARD_BTN );

  00014	6a 04		 push	 4
  00016	8b cf		 mov	 ecx, edi
  00018	ff d6		 call	 esi

; 1027 : 	SetChildActive( ID_GET_SPECIAL_NUMBER_BTN );

  0001a	6a 05		 push	 5
  0001c	8b cf		 mov	 ecx, edi
  0001e	ff d6		 call	 esi

; 1028 : 	SetChildActive( ID_INIT_BTN );

  00020	6a 06		 push	 6
  00022	8b cf		 mov	 ecx, edi
  00024	ff d6		 call	 esi
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1029 : }

  00028	c3		 ret	 0
?SetActvieChildBtn@BingoRightWnd@@QAEXXZ ENDP		; BingoRightWnd::SetActvieChildBtn
_TEXT	ENDS
PUBLIC	?SetInActvieChildBtn@BingoRightWnd@@QAEXXZ	; BingoRightWnd::SetInActvieChildBtn
EXTRN	__imp_?SetChildInActive@ioWnd@@QAEXK@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetInActvieChildBtn@BingoRightWnd@@QAEXXZ
_TEXT	SEGMENT
?SetInActvieChildBtn@BingoRightWnd@@QAEXXZ PROC		; BingoRightWnd::SetInActvieChildBtn, COMDAT
; _this$ = ecx

; 1032 : {

  00000	56		 push	 esi

; 1033 : 	SetChildInActive( ID_GET_NUMBER_BTN );

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetChildInActive@ioWnd@@QAEXK@Z
  00007	57		 push	 edi
  00008	6a 02		 push	 2
  0000a	8b f9		 mov	 edi, ecx
  0000c	ff d6		 call	 esi

; 1034 : 	SetChildInActive( ID_SHUFFLE_NUMBER_BTN );

  0000e	6a 03		 push	 3
  00010	8b cf		 mov	 ecx, edi
  00012	ff d6		 call	 esi

; 1035 : 	SetChildInActive( ID_SHUFFLE_REWARD_BTN );

  00014	6a 04		 push	 4
  00016	8b cf		 mov	 ecx, edi
  00018	ff d6		 call	 esi

; 1036 : 	SetChildInActive( ID_GET_SPECIAL_NUMBER_BTN );

  0001a	6a 05		 push	 5
  0001c	8b cf		 mov	 ecx, edi
  0001e	ff d6		 call	 esi

; 1037 : 	SetChildInActive( ID_INIT_BTN );

  00020	6a 06		 push	 6
  00022	8b cf		 mov	 ecx, edi
  00024	ff d6		 call	 esi
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1038 : }

  00028	c3		 ret	 0
?SetInActvieChildBtn@BingoRightWnd@@QAEXXZ ENDP		; BingoRightWnd::SetInActvieChildBtn
_TEXT	ENDS
PUBLIC	??_7BingoHelpButton@@6B@			; BingoHelpButton::`vftable'
PUBLIC	??0BingoHelpButton@@QAE@XZ			; BingoHelpButton::BingoHelpButton
PUBLIC	??_R4BingoHelpButton@@6B@			; BingoHelpButton::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBingoHelpButton@@@8			; BingoHelpButton `RTTI Type Descriptor'
PUBLIC	??_R3BingoHelpButton@@8				; BingoHelpButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BingoHelpButton@@8				; BingoHelpButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BingoHelpButton@@8		; BingoHelpButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioButton@@8			; ioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioButton@@@8				; ioButton `RTTI Type Descriptor'
PUBLIC	??_R3ioButton@@8				; ioButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioButton@@8				; ioButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?OnRender@BingoHelpButton@@MAEXXZ		; BingoHelpButton::OnRender
PUBLIC	?iwm_mouseover@BingoHelpButton@@UAEXABVioMouse@@@Z ; BingoHelpButton::iwm_mouseover
PUBLIC	?iwm_mouseleave@BingoHelpButton@@UAEXABVioMouse@@@Z ; BingoHelpButton::iwm_mouseleave
PUBLIC	?iwm_hide@BingoHelpButton@@UAEXXZ		; BingoHelpButton::iwm_hide
EXTRN	__imp_??0ioButton@@QAE@XZ:PROC
EXTRN	?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioButton::AddRenderFrame
EXTRN	?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioButton::AddRenderImage
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioButton@@UAEXAAVioXMLElement@@@Z:PROC ; ioButton::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioButton@@UAEXH@Z:PROC		; ioButton::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioButton@@MAEXHHHH@Z:PROC	; ioButton::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_rbuttonup
EXTRN	?iwm_command@ioWnd@@UAEXPAV1@HK@Z:PROC		; ioWnd::iwm_command
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_show@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_show
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioButton@@UBEKXZ:PROC		; ioButton::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioButton@@UAEPBDXZ:PROC	; ioButton::GetHeaderFileName
EXTRN	?GetTemplateName@ioButton@@UAEPBDXZ:PROC	; ioButton::GetTemplateName
EXTRN	?GetDefClassName@ioButton@@UBEPBDXZ:PROC	; ioButton::GetDefClassName
EXTRN	?_Clone@ioButton@@UAEPAVioWnd@@XZ:PROC		; ioButton::_Clone
EXTRN	?Copy@ioButton@@UAEXPAVioWnd@@@Z:PROC		; ioButton::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioButton@@UAEXAAVioXMLElement@@@Z:PROC ; ioButton::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioButton@@UBEHXZ:PROC	; ioButton::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioButton@@UAEPBDH@Z:PROC ; ioButton::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioButton::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioButton@@UBEHXZ:PROC	; ioButton::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioButton@@UAEPBDH@Z:PROC ; ioButton::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioButton::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EBingoHelpButton@@UAEPAXI@Z:PROC		; BingoHelpButton::`vector deleting destructor'
EXTRN	?OnDrawNormal@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawNormal
EXTRN	?OnDrawOvered@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawOvered
EXTRN	?OnDrawOveredAdd@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawOveredAdd
EXTRN	?OnDrawPushed@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawPushed
EXTRN	?OnDrawDisabled@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawDisabled
EXTRN	?OnDrawExDisabledNormal@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledNormal
EXTRN	?OnDrawExDisabledOvered@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledOvered
EXTRN	?OnDrawExDisabledPushed@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledPushed
EXTRN	?OnDrawBack@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawBack
EXTRN	?OnDrawNormalList@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawNormalList
EXTRN	?OnDrawDisableList@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawDisableList
;	COMDAT ??_R2ioWnd@@8
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioButton@@8
rdata$r	SEGMENT
??_R2ioButton@@8 DD FLAT:??_R1A@?0A@EA@ioButton@@8	; ioButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioButton@@8
rdata$r	SEGMENT
??_R3ioButton@@8 DD 00H					; ioButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioButton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioButton@@@8
_DATA	SEGMENT
??_R0?AVioButton@@@8 DD FLAT:??_7type_info@@6B@		; ioButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioButton@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioButton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioButton@@8 DD FLAT:??_R0?AVioButton@@@8	; ioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioButton@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BingoHelpButton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BingoHelpButton@@8 DD FLAT:??_R0?AVBingoHelpButton@@@8 ; BingoHelpButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BingoHelpButton@@8
rdata$r	ENDS
;	COMDAT ??_R2BingoHelpButton@@8
rdata$r	SEGMENT
??_R2BingoHelpButton@@8 DD FLAT:??_R1A@?0A@EA@BingoHelpButton@@8 ; BingoHelpButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioButton@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3BingoHelpButton@@8
rdata$r	SEGMENT
??_R3BingoHelpButton@@8 DD 00H				; BingoHelpButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BingoHelpButton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBingoHelpButton@@@8
_DATA	SEGMENT
??_R0?AVBingoHelpButton@@@8 DD FLAT:??_7type_info@@6B@	; BingoHelpButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBingoHelpButton@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BingoHelpButton@@6B@
rdata$r	SEGMENT
??_R4BingoHelpButton@@6B@ DD 00H			; BingoHelpButton::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBingoHelpButton@@@8
	DD	FLAT:??_R3BingoHelpButton@@8
rdata$r	ENDS
;	COMDAT ??_7BingoHelpButton@@6B@
CONST	SEGMENT
??_7BingoHelpButton@@6B@ DD FLAT:??_R4BingoHelpButton@@6B@ ; BingoHelpButton::`vftable'
	DD	FLAT:?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioButton@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioButton@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@BingoHelpButton@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioButton@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@BingoHelpButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@BingoHelpButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@BingoHelpButton@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioButton@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioButton@@UBEPBDXZ
	DD	FLAT:?_Clone@ioButton@@UAEPAVioWnd@@XZ
	DD	FLAT:?Copy@ioButton@@UAEXPAVioWnd@@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioButton@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EBingoHelpButton@@UAEPAXI@Z
	DD	FLAT:?OnDrawNormal@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOvered@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOveredAdd@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawPushed@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisabled@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledNormal@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledOvered@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledPushed@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawBack@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawNormalList@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisableList@ioButton@@MAEXHH@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0BingoHelpButton@@QAE@XZ
_TEXT	SEGMENT
??0BingoHelpButton@@QAE@XZ PROC				; BingoHelpButton::BingoHelpButton, COMDAT
; _this$ = ecx

; 1078 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioButton@@QAE@XZ
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BingoHelpButton@@6B@

; 1079 : 
; 1080 : }

  0000f	8b c6		 mov	 eax, esi
  00011	5e		 pop	 esi
  00012	c3		 ret	 0
??0BingoHelpButton@@QAE@XZ ENDP				; BingoHelpButton::BingoHelpButton
_TEXT	ENDS
PUBLIC	??1BingoHelpButton@@UAE@XZ			; BingoHelpButton::~BingoHelpButton
EXTRN	__imp_??1ioButton@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1BingoHelpButton@@UAE@XZ
_TEXT	SEGMENT
??1BingoHelpButton@@UAE@XZ PROC				; BingoHelpButton::~BingoHelpButton, COMDAT
; _this$ = ecx

; 1083 : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7BingoHelpButton@@6B@

; 1084 : 
; 1085 : }

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioButton@@UAE@XZ
??1BingoHelpButton@@UAE@XZ ENDP				; BingoHelpButton::~BingoHelpButton
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@BingoHelpButton@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@BingoHelpButton@@UAEXXZ PROC			; BingoHelpButton::iwm_hide, COMDAT
; _this$ = ecx

; 1089 : 	HideChildWnd( ID_HELP_TOOL_TIP );

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 1090 : }

  0000a	c3		 ret	 0
?iwm_hide@BingoHelpButton@@UAEXXZ ENDP			; BingoHelpButton::iwm_hide
_TEXT	ENDS
PUBLIC	??_R0?AVBingoHelpToolTip@@@8			; BingoHelpToolTip `RTTI Type Descriptor'
EXTRN	?SetInfo@BingoHelpToolTip@@QAEXK@Z:PROC		; BingoHelpToolTip::SetInfo
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVBingoHelpToolTip@@@8
_DATA	SEGMENT
??_R0?AVBingoHelpToolTip@@@8 DD FLAT:??_7type_info@@6B@	; BingoHelpToolTip `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBingoHelpToolTip@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?iwm_mouseover@BingoHelpButton@@UAEXABVioMouse@@@Z
_TEXT	SEGMENT
_mouse$ = 8						; size = 4
?iwm_mouseover@BingoHelpButton@@UAEXABVioMouse@@@Z PROC	; BingoHelpButton::iwm_mouseover, COMDAT
; _this$ = ecx

; 1093 : {

  00000	56		 push	 esi

; 1094 : 	BingoHelpToolTip *pWnd = dynamic_cast<BingoHelpToolTip*>( FindChildWnd( ID_HELP_TOOL_TIP ) );

  00001	6a 00		 push	 0
  00003	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoHelpToolTip@@@8
  00008	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0000d	6a 00		 push	 0
  0000f	6a 01		 push	 1
  00011	8b f1		 mov	 esi, ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0001f	83 c4 14	 add	 esp, 20			; 00000014H

; 1095 : 	if( pWnd )

  00022	85 c0		 test	 eax, eax
  00024	74 0a		 je	 SHORT $LN1@iwm_mouseo

; 1096 : 		pWnd->SetInfo( m_dwID );

  00026	ff 76 14	 push	 DWORD PTR [esi+20]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?SetInfo@BingoHelpToolTip@@QAEXK@Z ; BingoHelpToolTip::SetInfo
$LN1@iwm_mouseo:
  00030	5e		 pop	 esi

; 1097 : }

  00031	c2 04 00	 ret	 4
?iwm_mouseover@BingoHelpButton@@UAEXABVioMouse@@@Z ENDP	; BingoHelpButton::iwm_mouseover
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_mouseleave@BingoHelpButton@@UAEXABVioMouse@@@Z
_TEXT	SEGMENT
_mouse$ = 8						; size = 4
?iwm_mouseleave@BingoHelpButton@@UAEXABVioMouse@@@Z PROC ; BingoHelpButton::iwm_mouseleave, COMDAT
; _this$ = ecx

; 1101 : 	HideChildWnd( ID_HELP_TOOL_TIP );

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 1102 : }

  0000a	c2 04 00	 ret	 4
?iwm_mouseleave@BingoHelpButton@@UAEXABVioMouse@@@Z ENDP ; BingoHelpButton::iwm_mouseleave
_TEXT	ENDS
EXTRN	__imp_?OnRender@ioButton@@MAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnRender@BingoHelpButton@@MAEXXZ
_TEXT	SEGMENT
?OnRender@BingoHelpButton@@MAEXXZ PROC			; BingoHelpButton::OnRender, COMDAT
; _this$ = ecx

; 1106 : 	ioButton::OnRender();

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?OnRender@ioButton@@MAEXXZ
?OnRender@BingoHelpButton@@MAEXXZ ENDP			; BingoHelpButton::OnRender
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ; Singleton<ioEtcItemManager>::GetSingleton
EXTRN	?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A:DWORD ; Singleton<ioEtcItemManager>::ms_Singleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ PROC ; Singleton<ioEtcItemManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ENDP ; Singleton<ioEtcItemManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 14		 push	 20			; 00000014H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEAAUBallAfterImage@BingoRightWnd@@I@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEAAUBallAfterImage@BingoRightWnd@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEAAUBallAfterImage@BingoRightWnd@@I@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 14	 imul	 eax, 20			; 00000014H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEAAUBallAfterImage@BingoRightWnd@@I@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ	; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ PROC	; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ ENDP	; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z ; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBE_NPBUBallAfterImage@BingoRightWnd@@@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBE_NPBUBallAfterImage@BingoRightWnd@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBE_NPBUBallAfterImage@BingoRightWnd@@@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBE_NPBUBallAfterImage@BingoRightWnd@@@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXPAUBallAfterImage@BingoRightWnd@@0@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXPAUBallAfterImage@BingoRightWnd@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXPAUBallAfterImage@BingoRightWnd@@0@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXPAUBallAfterImage@BingoRightWnd@@0@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ ; std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::~_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::~_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::~_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@XZ ; std::allocator<BingoRightWnd::BallAfterImage>::allocator<BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@XZ PROC ; std::allocator<BingoRightWnd::BallAfterImage>::allocator<BingoRightWnd::BallAfterImage>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@XZ ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::allocator<BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEABUBallAfterImage@BingoRightWnd@@XZ ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEABUBallAfterImage@BingoRightWnd@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEABUBallAfterImage@BingoRightWnd@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEABUBallAfterImage@BingoRightWnd@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator*
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z ; std::allocator<ioUIRenderImage *>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z PROC ; std::allocator<ioUIRenderImage *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z ENDP ; std::allocator<ioUIRenderImage *>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 14		 push	 20			; 00000014H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXXZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEXXZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@ABV01@@Z ; std::allocator<BingoRightWnd::BallAfterImage>::allocator<BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@ABV01@@Z PROC ; std::allocator<BingoRightWnd::BallAfterImage>::allocator<BingoRightWnd::BallAfterImage>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::allocator<BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@I@Z ; std::allocator<BingoRightWnd::BallAfterImage>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@I@Z PROC ; std::allocator<BingoRightWnd::BallAfterImage>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@I@Z ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 14	 add	 DWORD PTR [eax], 20	; 00000014H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ ; std::allocator<ioUIRenderImage *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ PROC ; std::allocator<ioUIRenderImage *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ ENDP ; std::allocator<ioUIRenderImage *>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QBEIXZ ; std::allocator<BingoRightWnd::BallAfterImage>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QBEIXZ PROC ; std::allocator<BingoRightWnd::BallAfterImage>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QBEIXZ ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z ; std::addressof<ioUIRenderImage * const>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z PROC ; std::addressof<ioUIRenderImage * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z ENDP ; std::addressof<ioUIRenderImage * const>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUBallAfterImage@BingoRightWnd@@@std@@YAPBUBallAfterImage@BingoRightWnd@@ABU12@@Z ; std::addressof<BingoRightWnd::BallAfterImage const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUBallAfterImage@BingoRightWnd@@@std@@YAPBUBallAfterImage@BingoRightWnd@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUBallAfterImage@BingoRightWnd@@@std@@YAPBUBallAfterImage@BingoRightWnd@@ABU12@@Z PROC ; std::addressof<BingoRightWnd::BallAfterImage const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUBallAfterImage@BingoRightWnd@@@std@@YAPBUBallAfterImage@BingoRightWnd@@ABU12@@Z ENDP ; std::addressof<BingoRightWnd::BallAfterImage const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ; std::_Allocate<ioUIRenderImage *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z
_TEXT	SEGMENT
$T512704 = -12						; size = 12
$T512709 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z PROC ; std::_Allocate<ioUIRenderImage *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T512709[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T512709[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T512704[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T512704[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T512704[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ENDP ; std::_Allocate<ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??$_Allocate@UBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@IPAU12@@Z ; std::_Allocate<BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@IPAU12@@Z
_TEXT	SEGMENT
$T512714 = -12						; size = 12
$T512718 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@IPAU12@@Z PROC ; std::_Allocate<BingoRightWnd::BallAfterImage>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 cc cc cc
	0c		 cmp	 ecx, 214748364		; 0cccccccH
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 14	 imul	 ecx, 20			; 00000014H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T512718[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T512718[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T512714[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T512714[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T512714[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@IPAU12@@Z ENDP ; std::_Allocate<BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z ; std::forward<ioUIRenderImage * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z PROC ; std::forward<ioUIRenderImage * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z ENDP ; std::forward<ioUIRenderImage * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z ; std::allocator<ioUIRenderImage *>::construct<ioUIRenderImage * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z PROC ; std::allocator<ioUIRenderImage *>::construct<ioUIRenderImage * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z ENDP ; std::allocator<ioUIRenderImage *>::construct<ioUIRenderImage * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z ; std::forward<ioUIRenderImage * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z PROC ; std::forward<ioUIRenderImage * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z ENDP ; std::forward<ioUIRenderImage * const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUBallAfterImage@BingoRightWnd@@@std@@YAAAUBallAfterImage@BingoRightWnd@@AAU12@@Z ; std::forward<BingoRightWnd::BallAfterImage &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUBallAfterImage@BingoRightWnd@@@std@@YAAAUBallAfterImage@BingoRightWnd@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUBallAfterImage@BingoRightWnd@@@std@@YAAAUBallAfterImage@BingoRightWnd@@AAU12@@Z PROC ; std::forward<BingoRightWnd::BallAfterImage &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUBallAfterImage@BingoRightWnd@@@std@@YAAAUBallAfterImage@BingoRightWnd@@AAU12@@Z ENDP ; std::forward<BingoRightWnd::BallAfterImage &>
_TEXT	ENDS
PUBLIC	??$construct@AAUBallAfterImage@BingoRightWnd@@@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@AAU23@@Z ; std::allocator<BingoRightWnd::BallAfterImage>::construct<BingoRightWnd::BallAfterImage &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUBallAfterImage@BingoRightWnd@@@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@AAU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUBallAfterImage@BingoRightWnd@@@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@AAU23@@Z PROC ; std::allocator<BingoRightWnd::BallAfterImage>::construct<BingoRightWnd::BallAfterImage &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 05		 push	 5
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct@2:
  00015	5f		 pop	 edi

; 209  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
??$construct@AAUBallAfterImage@BingoRightWnd@@@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@AAU23@@Z ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::construct<BingoRightWnd::BallAfterImage &>
_TEXT	ENDS
PUBLIC	??$forward@ABUBallAfterImage@BingoRightWnd@@@std@@YAABUBallAfterImage@BingoRightWnd@@ABU12@@Z ; std::forward<BingoRightWnd::BallAfterImage const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUBallAfterImage@BingoRightWnd@@@std@@YAABUBallAfterImage@BingoRightWnd@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUBallAfterImage@BingoRightWnd@@@std@@YAABUBallAfterImage@BingoRightWnd@@ABU12@@Z PROC ; std::forward<BingoRightWnd::BallAfterImage const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUBallAfterImage@BingoRightWnd@@@std@@YAABUBallAfterImage@BingoRightWnd@@ABU12@@Z ENDP ; std::forward<BingoRightWnd::BallAfterImage const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UBallAfterImage@BingoRightWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBallAfterImage@BingoRightWnd@@0@Z ; std::_Ptr_cat<BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UBallAfterImage@BingoRightWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBallAfterImage@BingoRightWnd@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UBallAfterImage@BingoRightWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBallAfterImage@BingoRightWnd@@0@Z PROC ; std::_Ptr_cat<BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UBallAfterImage@BingoRightWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBallAfterImage@BingoRightWnd@@0@Z ENDP ; std::_Ptr_cat<BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z ; std::_Ptr_cat<ioUIRenderImage *,ioUIRenderImage *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z PROC ; std::_Ptr_cat<ioUIRenderImage *,ioUIRenderImage *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z ENDP ; std::_Ptr_cat<ioUIRenderImage *,ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z ; std::_Construct<ioUIRenderImage *,ioUIRenderImage * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z PROC ; std::_Construct<ioUIRenderImage *,ioUIRenderImage * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z ENDP ; std::_Construct<ioUIRenderImage *,ioUIRenderImage * const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UBallAfterImage@BingoRightWnd@@ABU12@@std@@YAXPAUBallAfterImage@BingoRightWnd@@ABU12@@Z ; std::_Construct<BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@UBallAfterImage@BingoRightWnd@@ABU12@@std@@YAXPAUBallAfterImage@BingoRightWnd@@ABU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UBallAfterImage@BingoRightWnd@@ABU12@@std@@YAXPAUBallAfterImage@BingoRightWnd@@ABU12@@Z PROC ; std::_Construct<BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@Construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 05		 push	 5
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@Construct@2:
  00015	5f		 pop	 edi

; 49   : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Construct@UBallAfterImage@BingoRightWnd@@ABU12@@std@@YAXPAUBallAfterImage@BingoRightWnd@@ABU12@@Z ENDP ; std::_Construct<BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@AAPAPAVioUIRenderImage@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@AAPAPAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@AAPAPAVioUIRenderImage@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@AAPAPAVioUIRenderImage@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$move@AAUBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z ; std::move<BingoRightWnd::BallAfterImage &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z PROC ; std::move<BingoRightWnd::BallAfterImage &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z ENDP ; std::move<BingoRightWnd::BallAfterImage &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z ; std::_Val_type<ioUIRenderImage * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z PROC ; std::_Val_type<ioUIRenderImage * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z ENDP ; std::_Val_type<ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioUIRenderImage *,ioUIRenderImage *,ioUIRenderImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioUIRenderImage *,ioUIRenderImage *,ioUIRenderImage *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioUIRenderImage *,ioUIRenderImage *,ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@@Z ; std::_Val_type<BingoRightWnd::BallAfterImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@@Z PROC ; std::_Val_type<BingoRightWnd::BallAfterImage *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@@Z ENDP ; std::_Val_type<BingoRightWnd::BallAfterImage *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEABQAVioUIRenderImage@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEABQAVioUIRenderImage@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEABQAVioUIRenderImage@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEABQAVioUIRenderImage@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Destroy@UBallAfterImage@BingoRightWnd@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@@Z ; std::_Destroy<BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UBallAfterImage@BingoRightWnd@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UBallAfterImage@BingoRightWnd@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@@Z PROC ; std::_Destroy<BingoRightWnd::BallAfterImage>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UBallAfterImage@BingoRightWnd@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@@Z ENDP ; std::_Destroy<BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	??$forward@UBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z ; std::forward<BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z PROC ; std::forward<BingoRightWnd::BallAfterImage>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UBallAfterImage@BingoRightWnd@@@std@@YA$$QAUBallAfterImage@BingoRightWnd@@AAU12@@Z ENDP ; std::forward<BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAVioUIRenderImage@@@std@@YAXPAPAVioUIRenderImage@@@Z ; std::_Destroy<ioUIRenderImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@PAVioUIRenderImage@@@std@@YAXPAPAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAVioUIRenderImage@@@std@@YAXPAPAVioUIRenderImage@@@Z PROC ; std::_Destroy<ioUIRenderImage *>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAVioUIRenderImage@@@std@@YAXPAPAVioUIRenderImage@@@Z ENDP ; std::_Destroy<ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR2@@QAE@XZ				; D3DXVECTOR2::D3DXVECTOR2
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR2@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR2@@QAE@XZ PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 91   :     D3DXVECTOR2() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR2@@QAE@XZ ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR2@@QAE@MM@Z			; D3DXVECTOR2::D3DXVECTOR2
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
??0D3DXVECTOR2@@QAE@MM@Z PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 91   :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 92   : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??0D3DXVECTOR2@@QAE@MM@Z ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR2@@QBE?AU0@ABU0@@Z			; D3DXVECTOR2::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR2@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR2@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR2::operator+, COMDAT
; _this$ = ecx

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 162  :     return D3DXVECTOR2(x + v.x, y + v.y);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 163  : }

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
??HD3DXVECTOR2@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR2::operator+
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR2@@QBE?AU0@ABU0@@Z			; D3DXVECTOR2::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR2@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR2@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR2::operator-, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  :     return D3DXVECTOR2(x - v.x, y - v.y);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 169  : }

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
??GD3DXVECTOR2@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR2::operator-
_TEXT	ENDS
PUBLIC	??DD3DXVECTOR2@@QBE?AU0@M@Z			; D3DXVECTOR2::operator*
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXVECTOR2@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR2@@QBE?AU0@M@Z PROC			; D3DXVECTOR2::operator*, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 174  :     return D3DXVECTOR2(x * f, y * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00012	0f 5a c9	 cvtps2pd xmm1, xmm1
  00015	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00019	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0001e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00022	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00039	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 175  : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
??DD3DXVECTOR2@@QBE?AU0@M@Z ENDP			; D3DXVECTOR2::operator*
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogsp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 4d 10	 dec	 DWORD PTR ___n$[ebp]
  00006	78 12		 js	 SHORT $LN1@vector
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  0000c	8b ce		 mov	 ecx, esi
  0000e	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00011	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00014	ff 4d 10	 dec	 DWORD PTR ___n$[ebp]
  00017	79 f3		 jns	 SHORT $LL2@vector
  00019	5e		 pop	 esi
$LN1@vector:
  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetName@ioEtcItem@@QBEABVioHashString@@XZ	; ioEtcItem::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
;	COMDAT ?GetName@ioEtcItem@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioEtcItem@@QBEABVioHashString@@XZ PROC		; ioEtcItem::GetName, COMDAT
; _this$ = ecx

; 465  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetName@ioEtcItem@@QBEABVioHashString@@XZ ENDP		; ioEtcItem::GetName
_TEXT	ENDS
PUBLIC	?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ		; ioMyInfo::GetBingo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ
_TEXT	SEGMENT
?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ PROC		; ioMyInfo::GetBingo, COMDAT
; _this$ = ecx

; 643  : 	ioBingo* GetBingo() { return m_pBingo; }

  00000	8b 81 94 0b 00
	00		 mov	 eax, DWORD PTR [ecx+2964]
  00006	c3		 ret	 0
?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ ENDP		; ioMyInfo::GetBingo
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??0BallAfterImage@BingoRightWnd@@QAE@UD3DXVECTOR2@@H@Z ; BingoRightWnd::BallAfterImage::BallAfterImage
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.h
CONST	ENDS
;	COMDAT ??0BallAfterImage@BingoRightWnd@@QAE@UD3DXVECTOR2@@H@Z
_TEXT	SEGMENT
_vPos$ = 8						; size = 8
tv137 = 16						; size = 4
_iAlpha$ = 16						; size = 4
??0BallAfterImage@BingoRightWnd@@QAE@UD3DXVECTOR2@@H@Z PROC ; BingoRightWnd::BallAfterImage::BallAfterImage, COMDAT
; _this$ = ecx

; 59   : 		BallAfterImage( D3DXVECTOR2 vPos, int iAlpha )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 		{
; 61   : 			m_vPosition = vPos;

  00003	8b 45 08	 mov	 eax, DWORD PTR _vPos$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 06		 mov	 DWORD PTR [esi], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _vPos$[ebp+4]
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 62   : 			m_iAlpha = iAlpha;

  00011	8b 45 10	 mov	 eax, DWORD PTR _iAlpha$[ebp]
  00014	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 63   : 			m_fScale = FLOAT1;

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	89 45 10	 mov	 DWORD PTR tv137[ebp], eax
  0001f	db 45 10	 fild	 DWORD PTR tv137[ebp]
  00022	85 c0		 test	 eax, eax
  00024	79 06		 jns	 SHORT $LN7@BallAfterI
  00026	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN7@BallAfterI:
  0002c	d9 5e 0c	 fstp	 DWORD PTR [esi+12]

; 64   : 			m_dwEndTime = FRAMEGETTIME() + 250;

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00035	8b c8		 mov	 ecx, eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0003d	05 fa 00 00 00	 add	 eax, 250		; 000000faH
  00042	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 65   : 		}

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
??0BallAfterImage@BingoRightWnd@@QAE@UD3DXVECTOR2@@H@Z ENDP ; BingoRightWnd::BallAfterImage::BallAfterImage
_TEXT	ENDS
PUBLIC	??_R0?AVioBingoRewardWnd@@@8			; ioBingoRewardWnd `RTTI Type Descriptor'
PUBLIC	??_R0?AVBingoMsgBox@@@8				; BingoMsgBox `RTTI Type Descriptor'
PUBLIC	__$ArrayPad$
PUBLIC	?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z	; BingoRightWnd::iwm_command
EXTRN	?MouseBusy@TCPNetwork@@YAX_N@Z:PROC		; TCPNetwork::MouseBusy
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?GetParent@ioWnd@@QAEPAV1@XZ:PROC
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z:PROC
EXTRN	?SetInfo@BingoMsgBox@@QAEXW4UseType@1@H@Z:PROC	; BingoMsgBox::SetInfo
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z:PROC ; TCPNetwork::SendToServer
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_R0?AVioBingoRewardWnd@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobingo.h
_DATA	SEGMENT
??_R0?AVioBingoRewardWnd@@@8 DD FLAT:??_7type_info@@6B@	; ioBingoRewardWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBingoRewardWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVBingoMsgBox@@@8
_DATA	SEGMENT
??_R0?AVBingoMsgBox@@@8 DD FLAT:??_7type_info@@6B@	; BingoMsgBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBingoMsgBox@@', 00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$7
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_iBingoType$ = -65604					; size = 4
_kPacket$508776 = -65600				; size = 32812
_kPacket$508774 = -32808				; size = 32812
_kPacket$508772 = -32808				; size = 32812
_kPacket$508770 = -32808				; size = 32812
_kPacket$508768 = -32808				; size = 32792
_kPacket$508758 = -32808				; size = 32792
_kPacket$508724 = -32808				; size = 32792
_kPacket$508718 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z PROC	; BingoRightWnd::iwm_command, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 38 00 01 00	 mov	 eax, 65592		; 00010038H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 5d 08	 mov	 ebx, DWORD PTR _pWnd$[ebp]

; 228  : 	int iBingoType = 0;

  00035	33 ff		 xor	 edi, edi
  00037	8b f1		 mov	 esi, ecx
  00039	89 bd bc ff fe
	ff		 mov	 DWORD PTR _iBingoType$[ebp], edi

; 229  : 	ioBingo *pBingo = g_MyInfo.GetBingo();

  0003f	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00044	8b 80 94 0b 00
	00		 mov	 eax, DWORD PTR [eax+2964]

; 230  : 	if( pBingo )

  0004a	3b c7		 cmp	 eax, edi
  0004c	74 09		 je	 SHORT $LN57@iwm_comman

; 231  : 		iBingoType = pBingo->GetBingoType();

  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00051	89 85 bc ff fe
	ff		 mov	 DWORD PTR _iBingoType$[ebp], eax
$LN57@iwm_comman:

; 232  : 
; 233  : 	DWORD dwID = pWnd->GetID();

  00057	8b cb		 mov	 ecx, ebx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 234  : 	switch( dwID )

  0005f	6a 64		 push	 100			; 00000064H
  00061	5b		 pop	 ebx
  00062	3b c3		 cmp	 eax, ebx
  00064	0f 87 c7 03 00
	00		 ja	 $LN9@iwm_comman
  0006a	0f 84 a3 02 00
	00		 je	 $LN15@iwm_comman
  00070	48		 dec	 eax
  00071	83 f8 08	 cmp	 eax, 8
  00074	0f 87 b7 03 00
	00		 ja	 $LN9@iwm_comman
  0007a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN70@iwm_comman[eax*4]
$LN40@iwm_comman:

; 235  : 	{
; 236  : 	case ID_BINGO_START_BTN:
; 237  : 		if( cmd == IOBN_BTNUP )

  00081	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00085	0f 85 a6 03 00
	00		 jne	 $LN9@iwm_comman

; 238  : 		{
; 239  : 			SP2Packet kPacket( CTPK_BINGO_START );

  0008b	68 04 03 00 00	 push	 772			; 00000304H
  00090	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508718[ebp]
  00096	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 240  : 			TCPNetwork::SendToServer( kPacket );

  0009b	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$508718[ebp]
  000a1	50		 push	 eax
  000a2	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  000a5	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 241  : 
; 242  : 			if( m_iBingoType == ioBingo::BT_FIXED )

  000aa	83 be b4 02 00
	00 01		 cmp	 DWORD PTR [esi+692], 1
  000b1	59		 pop	 ecx

; 243  : 			{
; 244  : 				SetWindowType( BingoRightWnd::RWT_FIXED_PLAY );

  000b2	8b ce		 mov	 ecx, esi
  000b4	75 04		 jne	 SHORT $LN38@iwm_comman
  000b6	6a 03		 push	 3

; 245  : 			}
; 246  : 			else

  000b8	eb 02		 jmp	 SHORT $LN61@iwm_comman
$LN38@iwm_comman:

; 247  : 			{
; 248  : 				SetWindowType( BingoRightWnd::RWT_RAND_PLAY );

  000ba	6a 02		 push	 2
$LN61@iwm_comman:
  000bc	e8 00 00 00 00	 call	 ?SetWindowType@BingoRightWnd@@QAEXW4RightWndType@1@@Z ; BingoRightWnd::SetWindowType
$LN67@iwm_comman:

; 249  : 			}
; 250  : 			SetInActvieChildBtn();

  000c1	8b ce		 mov	 ecx, esi
  000c3	e8 00 00 00 00	 call	 ?SetInActvieChildBtn@BingoRightWnd@@QAEXXZ ; BingoRightWnd::SetInActvieChildBtn

; 251  : 		}
; 252  : 		break;

  000c8	e9 55 03 00 00	 jmp	 $LN62@iwm_comman
$LN36@iwm_comman:

; 253  : 	case ID_GET_NUMBER_BTN:
; 254  : 		if( cmd == IOBN_BTNUP )

  000cd	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  000d1	0f 85 5a 03 00
	00		 jne	 $LN9@iwm_comman

; 255  : 		{
; 256  : 			if( g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_NUMBER_GASHAPON ) > 0 )

  000d7	68 98 4a 0f 00	 push	 1002136			; 000f4a98H
  000dc	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000e1	8b c8		 mov	 ecx, eax
  000e3	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney
  000e8	85 c0		 test	 eax, eax
  000ea	7e 38		 jle	 SHORT $LN34@iwm_comman

; 257  : 			{
; 258  : 				SP2Packet kPacket( CTPK_ETCITEM_USE );

  000ec	68 59 01 00 00	 push	 345			; 00000159H
  000f1	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508724[ebp]
  000f7	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  000fc	33 f6		 xor	 esi, esi
  000fe	46		 inc	 esi

; 259  : 				kPacket << ioEtcItem::EIT_ETC_BINGO_NUMBER_GASHAPON;

  000ff	68 98 4a 0f 00	 push	 1002136			; 000f4a98H
  00104	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508724[ebp]
  0010a	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0010d	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 260  : 				TCPNetwork::SendToServer( kPacket );

  00112	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$508724[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 261  : 				TCPNetwork::MouseBusy( true );

  0011e	56		 push	 esi

; 262  : 			}
; 263  : 			else

  0011f	e9 f7 02 00 00	 jmp	 $LN63@iwm_comman
$LN34@iwm_comman:

; 264  : 			{
; 265  : 				BingoMsgBox *pMsg = dynamic_cast<BingoMsgBox*>( FindChildWnd(ID_MESSAGE_BOX) );

  00124	57		 push	 edi
  00125	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoMsgBox@@@8
  0012a	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0012f	57		 push	 edi
  00130	53		 push	 ebx
  00131	8b ce		 mov	 ecx, esi
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0013f	83 c4 14	 add	 esp, 20			; 00000014H

; 266  : 				if( pMsg )

  00142	3b c7		 cmp	 eax, edi
  00144	0f 84 e7 02 00
	00		 je	 $LN9@iwm_comman

; 267  : 					pMsg->SetInfo( BingoMsgBox::UT_GET_NUMBER, iBingoType );

  0014a	ff b5 bc ff fe
	ff		 push	 DWORD PTR _iBingoType$[ebp]
  00150	6a 01		 push	 1

; 268  : 			}
; 269  : 		}
; 270  : 		break;

  00152	e9 e9 00 00 00	 jmp	 $LN68@iwm_comman
$LN31@iwm_comman:

; 271  : 	case ID_SHUFFLE_NUMBER_BTN:
; 272  : 		if( cmd == IOBN_BTNUP )

  00157	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0015b	0f 85 d0 02 00
	00		 jne	 $LN9@iwm_comman

; 273  : 		{
; 274  : 			BingoMsgBox *pMsg = dynamic_cast<BingoMsgBox*>( FindChildWnd(ID_MESSAGE_BOX) );

  00161	57		 push	 edi
  00162	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoMsgBox@@@8
  00167	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0016c	57		 push	 edi
  0016d	53		 push	 ebx
  0016e	8b ce		 mov	 ecx, esi
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ___RTDynamicCast
  0017c	83 c4 14	 add	 esp, 20			; 00000014H

; 275  : 			if( pMsg )

  0017f	3b c7		 cmp	 eax, edi
  00181	0f 84 aa 02 00
	00		 je	 $LN9@iwm_comman

; 276  : 				pMsg->SetInfo( BingoMsgBox::UT_SHUFFLE_NUMBER, iBingoType );

  00187	ff b5 bc ff fe
	ff		 push	 DWORD PTR _iBingoType$[ebp]
  0018d	6a 02		 push	 2

; 277  : 		}
; 278  : 		break;

  0018f	e9 ac 00 00 00	 jmp	 $LN68@iwm_comman
$LN28@iwm_comman:

; 279  : 	case ID_SHUFFLE_REWARD_BTN:
; 280  : 		if( cmd == IOBN_BTNUP )

  00194	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00198	0f 85 93 02 00
	00		 jne	 $LN9@iwm_comman

; 281  : 		{
; 282  : 			BingoMsgBox *pMsg = dynamic_cast<BingoMsgBox*>( FindChildWnd(ID_MESSAGE_BOX) );

  0019e	57		 push	 edi
  0019f	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoMsgBox@@@8
  001a4	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8b ce		 mov	 ecx, esi
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ___RTDynamicCast
  001b9	83 c4 14	 add	 esp, 20			; 00000014H

; 283  : 			if( pMsg )

  001bc	3b c7		 cmp	 eax, edi
  001be	0f 84 6d 02 00
	00		 je	 $LN9@iwm_comman

; 284  : 				pMsg->SetInfo( BingoMsgBox::UT_SHUFFLE_REWARD, iBingoType );

  001c4	ff b5 bc ff fe
	ff		 push	 DWORD PTR _iBingoType$[ebp]
  001ca	6a 03		 push	 3

; 285  : 		}
; 286  : 		break;

  001cc	eb 72		 jmp	 SHORT $LN68@iwm_comman
$LN25@iwm_comman:

; 287  : 	case ID_GET_SPECIAL_NUMBER_BTN:
; 288  : 		if( cmd == IOBN_BTNUP )

  001ce	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  001d2	0f 85 59 02 00
	00		 jne	 $LN9@iwm_comman

; 289  : 		{
; 290  : 			BingoMsgBox *pMsg = dynamic_cast<BingoMsgBox*>( FindChildWnd(ID_MESSAGE_BOX) );

  001d8	57		 push	 edi
  001d9	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoMsgBox@@@8
  001de	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  001e3	57		 push	 edi
  001e4	53		 push	 ebx
  001e5	8b ce		 mov	 ecx, esi
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 ___RTDynamicCast
  001f3	83 c4 14	 add	 esp, 20			; 00000014H

; 291  : 			if( pMsg )

  001f6	3b c7		 cmp	 eax, edi
  001f8	0f 84 33 02 00
	00		 je	 $LN9@iwm_comman

; 292  : 				pMsg->SetInfo( BingoMsgBox::UT_SPECIAL_NUMBER, iBingoType );

  001fe	ff b5 bc ff fe
	ff		 push	 DWORD PTR _iBingoType$[ebp]
  00204	6a 04		 push	 4

; 293  : 		}
; 294  : 		break;

  00206	eb 38		 jmp	 SHORT $LN68@iwm_comman
$LN22@iwm_comman:

; 295  : 	case ID_INIT_BTN:
; 296  : 		if( cmd == IOBN_BTNUP )

  00208	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0020c	0f 85 1f 02 00
	00		 jne	 $LN9@iwm_comman

; 297  : 		{
; 298  : 			BingoMsgBox *pMsg = dynamic_cast<BingoMsgBox*>( FindChildWnd(ID_MESSAGE_BOX) );

  00212	57		 push	 edi
  00213	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoMsgBox@@@8
  00218	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0021d	57		 push	 edi
  0021e	53		 push	 ebx
  0021f	8b ce		 mov	 ecx, esi
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ___RTDynamicCast
  0022d	83 c4 14	 add	 esp, 20			; 00000014H

; 299  : 			if( pMsg )

  00230	3b c7		 cmp	 eax, edi
  00232	0f 84 f9 01 00
	00		 je	 $LN9@iwm_comman

; 300  : 				pMsg->SetInfo( BingoMsgBox::UT_INIT, iBingoType );

  00238	ff b5 bc ff fe
	ff		 push	 DWORD PTR _iBingoType$[ebp]
  0023e	6a 05		 push	 5
$LN68@iwm_comman:
  00240	8b c8		 mov	 ecx, eax
  00242	e8 00 00 00 00	 call	 ?SetInfo@BingoMsgBox@@QAEXW4UseType@1@H@Z ; BingoMsgBox::SetInfo

; 301  : 		}
; 302  : 		break;

  00247	e9 e5 01 00 00	 jmp	 $LN9@iwm_comman
$LN19@iwm_comman:

; 303  : 	case ID_REWARD_LIST_BTN:
; 304  : 		if( cmd == IOBN_BTNUP )

  0024c	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00250	0f 85 db 01 00
	00		 jne	 $LN9@iwm_comman

; 305  : 		{
; 306  : 			ioBingoRewardWnd* pWnd = dynamic_cast<ioBingoRewardWnd*>( g_GUIMgr.FindWnd( BINGO_REWARD_WND ) );

  00256	57		 push	 edi
  00257	68 00 00 00 00	 push	 OFFSET ??_R0?AVioBingoRewardWnd@@@8
  0025c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00261	57		 push	 edi
  00262	68 24 27 00 00	 push	 10020			; 00002724H
  00267	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0026c	8b c8		 mov	 ecx, eax
  0026e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 ___RTDynamicCast
  0027a	83 c4 14	 add	 esp, 20			; 00000014H

; 307  : 			if( pWnd )

  0027d	3b c7		 cmp	 eax, edi
  0027f	0f 84 ac 01 00
	00		 je	 $LN9@iwm_comman

; 308  : 				pWnd->ShowWnd();

  00285	8b c8		 mov	 ecx, eax
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ

; 309  : 		}
; 310  : 		break;

  0028d	e9 9f 01 00 00	 jmp	 $LN9@iwm_comman
$LN16@iwm_comman:

; 311  : 	case ID_NEW_BINGO_BTN:
; 312  : 		if( cmd == IOBN_BTNUP )

  00292	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00296	0f 85 95 01 00
	00		 jne	 $LN9@iwm_comman

; 313  : 		{
; 314  : 			SP2Packet kPacket( CTPK_BINGO_ALL_INIT );

  0029c	68 06 03 00 00	 push	 774			; 00000306H
  002a1	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508758[ebp]
  002a7	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  002ac	6a 02		 push	 2
  002ae	5f		 pop	 edi

; 315  : 			TCPNetwork::SendToServer( kPacket );

  002af	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$508758[ebp]
  002b5	50		 push	 eax
  002b6	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  002b9	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 316  : 
; 317  : 			if( m_iBingoType == ioBingo::BT_FIXED )

  002be	83 be b4 02 00
	00 01		 cmp	 DWORD PTR [esi+692], 1
  002c5	59		 pop	 ecx

; 318  : 			{
; 319  : 				SetWindowType( BingoRightWnd::RWT_FIXED_PLAY );

  002c6	8b ce		 mov	 ecx, esi
  002c8	75 04		 jne	 SHORT $LN14@iwm_comman
  002ca	6a 03		 push	 3

; 320  : 			}
; 321  : 			else

  002cc	eb 01		 jmp	 SHORT $LN64@iwm_comman
$LN14@iwm_comman:

; 322  : 			{
; 323  : 				SetWindowType( BingoRightWnd::RWT_RAND_PLAY );

  002ce	57		 push	 edi
$LN64@iwm_comman:
  002cf	e8 00 00 00 00	 call	 ?SetWindowType@BingoRightWnd@@QAEXW4RightWndType@1@@Z ; BingoRightWnd::SetWindowType

; 324  : 			}
; 325  : 			SetInActvieChildBtn();

  002d4	8b ce		 mov	 ecx, esi
  002d6	e8 00 00 00 00	 call	 ?SetInActvieChildBtn@BingoRightWnd@@QAEXXZ ; BingoRightWnd::SetInActvieChildBtn

; 326  : 		}

  002db	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002df	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508758[ebp]
  002e5	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
  002ea	eb 31		 jmp	 SHORT $LN59@iwm_comman
$LN3@iwm_comman:

; 374  : 			}
; 375  : 		}
; 376  : 		break;
; 377  : 	case ID_CLOSE_BTN:
; 378  : 		if( cmd == IOBN_BTNUP )

  002ec	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  002f0	0f 85 3b 01 00
	00		 jne	 $LN9@iwm_comman

; 379  : 		{
; 380  : 			BingoWnd *pWnd = (BingoWnd*)( GetParent() );

  002f6	8b ce		 mov	 ecx, esi
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ

; 381  : 			if( pWnd )

  002fe	3b c7		 cmp	 eax, edi
  00300	0f 84 2b 01 00
	00		 je	 $LN9@iwm_comman

; 382  : 				pWnd->HideWnd();

  00306	8b c8		 mov	 ecx, eax
  00308	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
  0030e	e9 1e 01 00 00	 jmp	 $LN9@iwm_comman
$LN15@iwm_comman:

; 327  : 	case ID_MESSAGE_BOX:
; 328  : 		if( cmd == IOBN_BTNUP )

  00313	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00317	0f 85 14 01 00
	00		 jne	 $LN9@iwm_comman
$LN59@iwm_comman:

; 329  : 		{
; 330  : 			switch( param )

  0031d	8b 45 10	 mov	 eax, DWORD PTR _param$[ebp]
  00320	48		 dec	 eax
  00321	0f 84 bf 00 00
	00		 je	 $LN8@iwm_comman
  00327	48		 dec	 eax
  00328	0f 84 9a 00 00
	00		 je	 $LN7@iwm_comman
  0032e	48		 dec	 eax
  0032f	74 5e		 je	 SHORT $LN6@iwm_comman
  00331	48		 dec	 eax
  00332	74 3d		 je	 SHORT $LN5@iwm_comman
  00334	48		 dec	 eax
  00335	0f 85 f6 00 00
	00		 jne	 $LN9@iwm_comman

; 366  : 			case BingoMsgBox::UT_INIT:
; 367  : 				{
; 368  : 					SP2Packet kPacket( CTPK_BINGO_NUMBER_INIT );

  0033b	68 05 03 00 00	 push	 773			; 00000305H
  00340	8d 8d c0 ff fe
	ff		 lea	 ecx, DWORD PTR _kPacket$508776[ebp]
  00346	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 369  : 					TCPNetwork::SendToServer( kPacket );

  0034b	8d 85 c0 ff fe
	ff		 lea	 eax, DWORD PTR _kPacket$508776[ebp]
  00351	50		 push	 eax
  00352	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  00359	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer
  0035e	59		 pop	 ecx

; 370  : 
; 371  : 					SetInActvieChildBtn();

  0035f	8b ce		 mov	 ecx, esi
  00361	e8 00 00 00 00	 call	 ?SetInActvieChildBtn@BingoRightWnd@@QAEXXZ ; BingoRightWnd::SetInActvieChildBtn

; 372  : 				}

  00366	8d 8d c0 ff fe
	ff		 lea	 ecx, DWORD PTR _kPacket$508776[ebp]

; 373  : 				break;

  0036c	e9 b7 00 00 00	 jmp	 $LN65@iwm_comman
$LN5@iwm_comman:

; 358  : 			case BingoMsgBox::UT_SPECIAL_NUMBER:
; 359  : 				{
; 360  : 					SP2Packet kPacket( CTPK_ETCITEM_USE );

  00371	68 59 01 00 00	 push	 345			; 00000159H
  00376	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508774[ebp]
  0037c	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00381	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6

; 361  : 					kPacket << ioEtcItem::EIT_ETC_BINGO_RANDOM_NUMBER_CLEAR;

  00388	68 9b 4a 0f 00	 push	 1002139			; 000f4a9bH

; 362  : 					TCPNetwork::SendToServer( kPacket );
; 363  : 					TCPNetwork::MouseBusy( true );
; 364  : 				}
; 365  : 				break;

  0038d	eb 73		 jmp	 SHORT $LN66@iwm_comman
$LN6@iwm_comman:

; 349  : 			case BingoMsgBox::UT_SHUFFLE_REWARD:
; 350  : 				{
; 351  : 					SP2Packet kPacket( CTPK_ETCITEM_USE );

  0038f	68 59 01 00 00	 push	 345			; 00000159H
  00394	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508772[ebp]
  0039a	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  0039f	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5

; 352  : 					kPacket << ioEtcItem::EIT_ETC_BINGO_SHUFFLE_REWARD_ITEM;

  003a6	68 9a 4a 0f 00	 push	 1002138			; 000f4a9aH
$LN69@iwm_comman:
  003ab	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508772[ebp]
  003b1	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 353  : 					TCPNetwork::SendToServer( kPacket );

  003b6	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$508772[ebp]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer
  003c2	59		 pop	 ecx

; 354  : 
; 355  : 					SetInActvieChildBtn();
; 356  : 				}
; 357  : 				break;

  003c3	e9 f9 fc ff ff	 jmp	 $LN67@iwm_comman
$LN7@iwm_comman:

; 339  : 				break;
; 340  : 			case BingoMsgBox::UT_SHUFFLE_NUMBER:
; 341  : 				{
; 342  : 					SP2Packet kPacket( CTPK_ETCITEM_USE );

  003c8	68 59 01 00 00	 push	 345			; 00000159H
  003cd	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508770[ebp]
  003d3	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  003d8	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 343  : 					kPacket << ioEtcItem::EIT_ETC_BINGO_SHUFFLE_NUMBER;

  003df	68 99 4a 0f 00	 push	 1002137			; 000f4a99H

; 344  : 					TCPNetwork::SendToServer( kPacket );
; 345  : 
; 346  : 					SetInActvieChildBtn();
; 347  : 				}
; 348  : 				break;

  003e4	eb c5		 jmp	 SHORT $LN69@iwm_comman
$LN8@iwm_comman:

; 331  : 			{
; 332  : 			case BingoMsgBox::UT_GET_NUMBER:
; 333  : 				{
; 334  : 					SP2Packet kPacket( CTPK_ETCITEM_USE );

  003e6	68 59 01 00 00	 push	 345			; 00000159H
  003eb	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508768[ebp]
  003f1	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  003f6	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 335  : 					kPacket << ioEtcItem::EIT_ETC_BINGO_NUMBER_GASHAPON;

  003fd	68 98 4a 0f 00	 push	 1002136			; 000f4a98H
$LN66@iwm_comman:
  00402	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508768[ebp]
  00408	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 336  : 					TCPNetwork::SendToServer( kPacket );

  0040d	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$508768[ebp]
  00413	50		 push	 eax
  00414	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 337  : 					TCPNetwork::MouseBusy( true );

  00419	6a 01		 push	 1
$LN63@iwm_comman:
  0041b	e8 00 00 00 00	 call	 ?MouseBusy@TCPNetwork@@YAX_N@Z ; TCPNetwork::MouseBusy
  00420	59		 pop	 ecx
  00421	59		 pop	 ecx
$LN62@iwm_comman:

; 338  : 				}

  00422	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508768[ebp]
$LN65@iwm_comman:
  00428	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0042c	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN9@iwm_comman:

; 383  : 		}
; 384  : 	}
; 385  : }

  00431	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00434	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0043b	59		 pop	 ecx
  0043c	5f		 pop	 edi
  0043d	5e		 pop	 esi
  0043e	5b		 pop	 ebx
  0043f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00442	33 cd		 xor	 ecx, ebp
  00444	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00449	c9		 leave
  0044a	c2 0c 00	 ret	 12			; 0000000cH
  0044d	8d 49 00	 npad	 3
$LN70@iwm_comman:
  00450	00 00 00 00	 DD	 $LN40@iwm_comman
  00454	00 00 00 00	 DD	 $LN36@iwm_comman
  00458	00 00 00 00	 DD	 $LN31@iwm_comman
  0045c	00 00 00 00	 DD	 $LN28@iwm_comman
  00460	00 00 00 00	 DD	 $LN25@iwm_comman
  00464	00 00 00 00	 DD	 $LN22@iwm_comman
  00468	00 00 00 00	 DD	 $LN19@iwm_comman
  0046c	00 00 00 00	 DD	 $LN16@iwm_comman
  00470	00 00 00 00	 DD	 $LN3@iwm_comman
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508718[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$1:
  0000b	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508724[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$2:
  00016	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508758[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$7:
  00021	8d 8d c0 ff fe
	ff		 lea	 ecx, DWORD PTR _kPacket$508776[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$6:
  0002c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508774[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$5:
  00037	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508772[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$4:
  00042	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508770[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z$3:
  0004d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$508768[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z:
  00058	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005f	8b 8a b8 ff fe
	ff		 mov	 ecx, DWORD PTR [edx-65608]
  00065	33 c8		 xor	 ecx, eax
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006f	33 c8		 xor	 ecx, eax
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z
  0007b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z ENDP	; BingoRightWnd::iwm_command
PUBLIC	__real@3f19999a
PUBLIC	?RenderStart@BingoRightWnd@@IAEXHH@Z		; BingoRightWnd::RenderStart
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	?ClearList@ioComplexStringPrinter@@QAEXXZ:PROC	; ioComplexStringPrinter::ClearList
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	?SetUIPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z:PROC ; ioBingo::SetUIPrinter
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT __real@3f19999a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderStart@BingoRightWnd@@IAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderStart@BingoRightWnd@@IAEXHH@Z$0
__ehfuncinfo$?RenderStart@BingoRightWnd@@IAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderStart@BingoRightWnd@@IAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ?RenderStart@BingoRightWnd@@IAEXHH@Z
_TEXT	SEGMENT
_kPrinter$508844 = -48					; size = 32
tv245 = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv272 = 8						; size = 4
tv93 = 8						; size = 4
_x$ = 8							; size = 4
tv305 = 12						; size = 4
_iLine$508845 = 12					; size = 4
_y$ = 12						; size = 4
?RenderStart@BingoRightWnd@@IAEXHH@Z PROC		; BingoRightWnd::RenderStart, COMDAT
; _this$ = ecx

; 479  : {

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?RenderStart@BingoRightWnd@@IAEXHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 480  : 	if( m_pUnderLine )

  0000e	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00014	8b 7d 0c	 mov	 edi, DWORD PTR _y$[ebp]
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _x$[ebp]
  0001a	33 c0		 xor	 eax, eax
  0001c	3b c8		 cmp	 ecx, eax
  0001e	74 6f		 je	 SHORT $LN6@RenderStar

; 481  : 	{
; 482  : 		m_pUnderLine->SetHorzFormatting( ioUIRenderImage::HF_STRETCH );

  00020	6a 03		 push	 3
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z

; 483  : 		m_pUnderLine->SetSize( 187, 2 );

  00028	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00030	6a 02		 push	 2
  00032	68 bb 00 00 00	 push	 187			; 000000bbH
  00037	ff 50 10	 call	 DWORD PTR [eax+16]
  0003a	8d 43 11	 lea	 eax, DWORD PTR [ebx+17]

; 484  : 		for( int i=0; i<5; ++i )

  0003d	0f 57 c0	 xorps	 xmm0, xmm0
  00040	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00044	8d 87 0f 01 00
	00		 lea	 eax, DWORD PTR [edi+271]
  0004a	f3 0f 11 45 f0	 movss	 DWORD PTR tv245[ebp], xmm0
  0004f	89 45 0c	 mov	 DWORD PTR tv305[ebp], eax
  00052	c7 45 08 05 00
	00 00		 mov	 DWORD PTR tv93[ebp], 5
$LN8@RenderStar:

; 485  : 		{
; 486  : 			m_pUnderLine->Render( x + 17, y + 271 + i * 20, UI_RENDER_MULTIPLY );

  00059	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0005f	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR tv305[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	33 c0		 xor	 eax, eax
  00068	50		 push	 eax
  00069	50		 push	 eax
  0006a	50		 push	 eax
  0006b	6a 08		 push	 8
  0006d	51		 push	 ecx
  0006e	51		 push	 ecx
  0006f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00072	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00078	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv245[ebp]
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	ff 12		 call	 DWORD PTR [edx]
  00084	83 45 0c 14	 add	 DWORD PTR tv305[ebp], 20 ; 00000014H
  00088	ff 4d 08	 dec	 DWORD PTR tv93[ebp]
  0008b	75 cc		 jne	 SHORT $LN8@RenderStar

; 484  : 		for( int i=0; i<5; ++i )

  0008d	33 c0		 xor	 eax, eax
$LN6@RenderStar:

; 487  : 		}
; 488  : 	}
; 489  : 
; 490  : 	if( m_pTextBingo )

  0008f	39 86 64 01 00
	00		 cmp	 DWORD PTR [esi+356], eax
  00095	74 32		 je	 SHORT $LN5@RenderStar

; 491  : 		m_pTextBingo->Render( x + 110, y + 197 );

  00097	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0009d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009f	50		 push	 eax
  000a0	50		 push	 eax
  000a1	50		 push	 eax
  000a2	50		 push	 eax
  000a3	0f 57 c0	 xorps	 xmm0, xmm0
  000a6	51		 push	 ecx
  000a7	8d 87 c5 00 00
	00		 lea	 eax, DWORD PTR [edi+197]
  000ad	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000b1	51		 push	 ecx
  000b2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b8	8d 43 6e	 lea	 eax, DWORD PTR [ebx+110]
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c7	ff 12		 call	 DWORD PTR [edx]
$LN5@RenderStar:

; 492  : 
; 493  : 	int iXPos = x + 22;

  000c9	83 c3 16	 add	 ebx, 22			; 00000016H

; 494  : 	int iYPos = y + 255;

  000cc	81 c7 ff 00 00
	00		 add	 edi, 255		; 000000ffH

; 495  : 
; 496  : 	ioBingo *pBingo = g_MyInfo.GetBingo();

  000d2	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000d7	8b b0 94 0b 00
	00		 mov	 esi, DWORD PTR [eax+2964]

; 497  : 	if( pBingo )

  000dd	85 f6		 test	 esi, esi
  000df	0f 84 82 00 00
	00		 je	 $LN4@RenderStar

; 498  : 	{
; 499  : 		ioComplexStringPrinter kPrinter;

  000e5	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$508844[ebp]
  000e8	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  000ed	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 500  : 		for( int iLine=0; iLine<5; ++iLine )

  000f1	83 65 0c 00	 and	 DWORD PTR _iLine$508845[ebp], 0
  000f5	0f 57 c0	 xorps	 xmm0, xmm0
  000f8	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  000fc	f3 0f 11 45 08	 movss	 DWORD PTR tv272[ebp], xmm0
$LN3@RenderStar:

; 501  : 		{
; 502  : 			pBingo->SetUIPrinter( ioBingo::UI_MANUAL_START_BINGO, iLine, FONT_SIZE_12, kPrinter );

  00101	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00109	8d 45 d0	 lea	 eax, DWORD PTR _kPrinter$508844[ebp]
  0010c	50		 push	 eax
  0010d	51		 push	 ecx
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	ff 75 0c	 push	 DWORD PTR _iLine$508845[ebp]
  00116	8b ce		 mov	 ecx, esi
  00118	6a 01		 push	 1
  0011a	e8 00 00 00 00	 call	 ?SetUIPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z ; ioBingo::SetUIPrinter

; 503  : 			kPrinter.PrintFullText( iXPos, iYPos, TAT_LEFT );

  0011f	68 ff 00 00 00	 push	 255			; 000000ffH
  00124	6a 00		 push	 0
  00126	51		 push	 ecx
  00127	51		 push	 ecx
  00128	0f 57 c0	 xorps	 xmm0, xmm0
  0012b	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  0012f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00135	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv272[ebp]
  0013a	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$508844[ebp]
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 504  : 			kPrinter.ClearList();

  00147	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$508844[ebp]
  0014a	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 505  : 			iYPos += 20;

  0014f	83 c7 14	 add	 edi, 20			; 00000014H
  00152	ff 45 0c	 inc	 DWORD PTR _iLine$508845[ebp]
  00155	83 7d 0c 05	 cmp	 DWORD PTR _iLine$508845[ebp], 5
  00159	7c a6		 jl	 SHORT $LN3@RenderStar

; 506  : 		}
; 507  : 	}

  0015b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0015f	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$508844[ebp]
  00162	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN4@RenderStar:

; 508  : }

  00167	e8 00 00 00 00	 call	 __EH_epilog3
  0016c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderStart@BingoRightWnd@@IAEXHH@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$508844[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?RenderStart@BingoRightWnd@@IAEXHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderStart@BingoRightWnd@@IAEXHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderStart@BingoRightWnd@@IAEXHH@Z ENDP		; BingoRightWnd::RenderStart
PUBLIC	__real@4008000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@c0a00000
PUBLIC	?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z	; BingoRightWnd::RenderFixedPlay
EXTRN	?GetNumberLength@Help@@YAHH@Z:PROC		; Help::GetNumberLength
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
EXTRN	?GetBingoDummyNumberOfCurrent@ioBingo@@QAEHXZ:PROC ; ioBingo::GetBingoDummyNumberOfCurrent
;	COMDAT __real@4008000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z$0
__ehfuncinfo$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z
_TEXT	SEGMENT
_kPrinter$508884 = -72					; size = 32
$T512944 = -40						; size = 8
tv392 = -32						; size = 4
tv354 = -28						; size = 4
tv341 = -28						; size = 4
_iNumCnt$ = -28						; size = 4
_iXPos$ = -28						; size = 4
tv387 = -24						; size = 4
tv219 = -20						; size = 4
_fScale$ = -20						; size = 4
_iYPos$ = -20						; size = 4
_iLine$508885 = -16					; size = 4
_iCount$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z PROC		; BingoRightWnd::RenderFixedPlay, COMDAT
; _this$ = ecx

; 549  : {

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 550  : 	if( m_pUnderLine )

  0000e	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00014	33 ff		 xor	 edi, edi
  00016	3b cf		 cmp	 ecx, edi
  00018	74 6c		 je	 SHORT $LN7@RenderFixe

; 551  : 	{
; 552  : 		m_pUnderLine->SetHorzFormatting( ioUIRenderImage::HF_STRETCH );

  0001a	6a 03		 push	 3
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z

; 553  : 		m_pUnderLine->SetSize( 187, 2 );

  00022	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	6a 02		 push	 2
  0002c	68 bb 00 00 00	 push	 187			; 000000bbH
  00031	ff 50 10	 call	 DWORD PTR [eax+16]
  00034	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00037	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
  0003a	83 c0 11	 add	 eax, 17			; 00000011H

; 554  : 		for( int i=0; i<5; ++i )

  0003d	0f 57 c0	 xorps	 xmm0, xmm0
  00040	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00044	f3 0f 11 45 e4	 movss	 DWORD PTR tv341[ebp], xmm0
  00049	81 c3 1e 01 00
	00		 add	 ebx, 286		; 0000011eH
  0004f	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR tv219[ebp], 5
$LN9@RenderFixe:

; 555  : 		{
; 556  : 			m_pUnderLine->Render( x + 17, y + 286 + i * 20, UI_RENDER_MULTIPLY );

  00056	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0005c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005e	57		 push	 edi
  0005f	57		 push	 edi
  00060	57		 push	 edi
  00061	6a 08		 push	 8
  00063	51		 push	 ecx
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	51		 push	 ecx
  00068	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  0006c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00072	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv341[ebp]
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	ff 10		 call	 DWORD PTR [eax]
  0007e	83 c3 14	 add	 ebx, 20			; 00000014H
  00081	ff 4d ec	 dec	 DWORD PTR tv219[ebp]
  00084	75 d0		 jne	 SHORT $LN9@RenderFixe
$LN7@RenderFixe:

; 557  : 		}
; 558  : 	}
; 559  : 
; 560  : 	int iXPos = x + 22;

  00086	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00089	83 c0 16	 add	 eax, 22			; 00000016H
  0008c	89 45 e4	 mov	 DWORD PTR _iXPos$[ebp], eax

; 561  : 	int iYPos = y + 270;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00092	05 0e 01 00 00	 add	 eax, 270		; 0000010eH
  00097	89 45 ec	 mov	 DWORD PTR _iYPos$[ebp], eax

; 562  : 
; 563  : 	int iCount = 0;

  0009a	89 7d f0	 mov	 DWORD PTR _iCount$[ebp], edi

; 564  : 	ioBingo *pBingo = g_MyInfo.GetBingo();

  0009d	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000a2	8b 98 94 0b 00
	00		 mov	 ebx, DWORD PTR [eax+2964]

; 565  : 	if( pBingo )

  000a8	3b df		 cmp	 ebx, edi
  000aa	0f 84 8c 00 00
	00		 je	 $LN6@RenderFixe

; 566  : 	{
; 567  : 		ioComplexStringPrinter kPrinter;

  000b0	8d 4d b8	 lea	 ecx, DWORD PTR _kPrinter$508884[ebp]
  000b3	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 568  : 		for( int iLine=0; iLine<5; ++iLine )

  000b8	66 0f 6e 45 e4	 movd	 xmm0, DWORD PTR _iXPos$[ebp]
  000bd	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000c0	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  000c3	89 7d f0	 mov	 DWORD PTR _iLine$508885[ebp], edi
  000c6	f3 0f 11 45 e4	 movss	 DWORD PTR tv354[ebp], xmm0
$LN5@RenderFixe:

; 569  : 		{
; 570  : 			pBingo->SetUIPrinter( ioBingo::UI_MANUAL_FIXED_BINGO, iLine, FONT_SIZE_12, kPrinter );

  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000d3	8d 45 b8	 lea	 eax, DWORD PTR _kPrinter$508884[ebp]
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	ff 75 f0	 push	 DWORD PTR _iLine$508885[ebp]
  000e0	8b cb		 mov	 ecx, ebx
  000e2	6a 07		 push	 7
  000e4	e8 00 00 00 00	 call	 ?SetUIPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z ; ioBingo::SetUIPrinter

; 571  : 			kPrinter.PrintFullText( iXPos, iYPos, TAT_LEFT );

  000e9	66 0f 6e 45 ec	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  000ee	68 ff 00 00 00	 push	 255			; 000000ffH
  000f3	57		 push	 edi
  000f4	51		 push	 ecx
  000f5	51		 push	 ecx
  000f6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000f9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ff	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv354[ebp]
  00104	8d 4d b8	 lea	 ecx, DWORD PTR _kPrinter$508884[ebp]
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 572  : 			kPrinter.ClearList();

  00111	8d 4d b8	 lea	 ecx, DWORD PTR _kPrinter$508884[ebp]
  00114	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 573  : 			iYPos += 20;

  00119	83 45 ec 14	 add	 DWORD PTR _iYPos$[ebp], 20 ; 00000014H
  0011d	ff 45 f0	 inc	 DWORD PTR _iLine$508885[ebp]
  00120	83 7d f0 05	 cmp	 DWORD PTR _iLine$508885[ebp], 5
  00124	7c a5		 jl	 SHORT $LN5@RenderFixe

; 574  : 		}
; 575  : 
; 576  : 		iCount = pBingo->GetBingoDummyNumberOfCurrent();

  00126	8b cb		 mov	 ecx, ebx
  00128	e8 00 00 00 00	 call	 ?GetBingoDummyNumberOfCurrent@ioBingo@@QAEHXZ ; ioBingo::GetBingoDummyNumberOfCurrent

; 577  : 	}

  0012d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00131	8d 4d b8	 lea	 ecx, DWORD PTR _kPrinter$508884[ebp]
  00134	89 45 f0	 mov	 DWORD PTR _iCount$[ebp], eax
  00137	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN6@RenderFixe:

; 578  : 
; 579  : 	if( !m_pTextNumber || !m_pTextCount || !m_pTextSelect )

  0013c	39 be 70 01 00
	00		 cmp	 DWORD PTR [esi+368], edi
  00142	0f 84 82 01 00
	00		 je	 $LN1@RenderFixe
  00148	39 be 74 01 00
	00		 cmp	 DWORD PTR [esi+372], edi
  0014e	0f 84 76 01 00
	00		 je	 $LN1@RenderFixe
  00154	39 be 78 01 00
	00		 cmp	 DWORD PTR [esi+376], edi
  0015a	0f 84 6a 01 00
	00		 je	 $LN1@RenderFixe

; 580  : 		return;
; 581  : 		
; 582  : 	iXPos = x + GetWidth()/2;

  00160	8b ce		 mov	 ecx, esi
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ

; 583  : 	float fScale    = m_pTextNumber->GetScale().x;

  00168	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  0016e	99		 cdq
  0016f	2b c2		 sub	 eax, edx
  00171	8b d8		 mov	 ebx, eax
  00173	8b 01		 mov	 eax, DWORD PTR [ecx]
  00175	8d 55 d8	 lea	 edx, DWORD PTR $T512944[ebp]
  00178	d1 fb		 sar	 ebx, 1
  0017a	03 5d 08	 add	 ebx, DWORD PTR _x$[ebp]
  0017d	52		 push	 edx
  0017e	ff 50 38	 call	 DWORD PTR [eax+56]
  00181	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]

; 584  : 	int iNumCnt     = Help::GetNumberLength( iCount );

  00185	ff 75 f0	 push	 DWORD PTR _iCount$[ebp]
  00188	f3 0f 11 45 ec	 movss	 DWORD PTR _fScale$[ebp], xmm0
  0018d	e8 00 00 00 00	 call	 ?GetNumberLength@Help@@YAHH@Z ; Help::GetNumberLength
  00192	59		 pop	 ecx

; 585  : 	int iNumWidth   = m_pTextNumber->GetWidth()/10 * fScale;

  00193	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00199	89 45 e4	 mov	 DWORD PTR _iNumCnt$[ebp], eax
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  001a2	99		 cdq
  001a3	6a 0a		 push	 10			; 0000000aH
  001a5	59		 pop	 ecx
  001a6	f7 f9		 idiv	 ecx
  001a8	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _fScale$[ebp]

; 586  : 	int iTextWidth  = m_pTextCount->GetWidth();

  001ad	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  001b3	0f 57 c0	 xorps	 xmm0, xmm0
  001b6	0f 5a c9	 cvtps2pd xmm1, xmm1
  001b9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001bd	0f 5a c0	 cvtps2pd xmm0, xmm0
  001c0	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001c4	f2 0f 2c c0	 cvttsd2si eax, xmm0

; 587  : 	iXPos -= (iTextWidth + iNumWidth * iNumCnt)/2;

  001c8	0f af 45 e4	 imul	 eax, DWORD PTR _iNumCnt$[ebp]
  001cc	89 45 e8	 mov	 DWORD PTR tv387[ebp], eax
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  001d5	03 45 e8	 add	 eax, DWORD PTR tv387[ebp]

; 588  : 	
; 589  : 	m_pTextNumber->RenderNum( iXPos, y + 179, iCount, -5.0f, fScale, UI_RENDER_NORMAL, TFO_BILINEAR );

  001d8	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _fScale$[ebp]
  001dd	57		 push	 edi
  001de	57		 push	 edi
  001df	6a 01		 push	 1
  001e1	57		 push	 edi
  001e2	99		 cdq
  001e3	51		 push	 ecx
  001e4	51		 push	 ecx
  001e5	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  001eb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c0a00000
  001f3	2b c2		 sub	 eax, edx
  001f5	d1 f8		 sar	 eax, 1
  001f7	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  001fc	ff 75 f0	 push	 DWORD PTR _iCount$[ebp]
  001ff	f7 d8		 neg	 eax
  00201	03 d8		 add	 ebx, eax
  00203	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00206	51		 push	 ecx
  00207	0f 57 c0	 xorps	 xmm0, xmm0
  0020a	51		 push	 ecx
  0020b	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00211	05 b3 00 00 00	 add	 eax, 179		; 000000b3H
  00216	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0021a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00220	f3 0f 11 45 e0	 movss	 DWORD PTR tv392[ebp], xmm0
  00225	0f 57 c0	 xorps	 xmm0, xmm0
  00228	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  0022c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00231	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderNum@ioUIRenderImage@@QAEXMMHMMW4UIRenderType@@W4TextureFilterOption@@0W4RenerNumerFormatting@1@@Z

; 591  : 
; 592  : 	m_pTextCount->Render( iXPos + iOffset, y + 179 );

  00237	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  0023d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv392[ebp]
  00242	66 0f 6e 4d e4	 movd	 xmm1, DWORD PTR _iNumCnt$[ebp]
  00247	8b 01		 mov	 eax, DWORD PTR [ecx]
  00249	57		 push	 edi
  0024a	57		 push	 edi
  0024b	57		 push	 edi
  0024c	57		 push	 edi
  0024d	51		 push	 ecx
  0024e	51		 push	 ecx
  0024f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00255	66 0f 6e 45 e8	 movd	 xmm0, DWORD PTR tv387[ebp]
  0025a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0025d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00260	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00264	f3 0f 5a c9	 cvtss2sd xmm1, xmm1

; 590  : 	int iOffset = iNumWidth * iNumCnt - iNumCnt * 5.0f + 3.0f;

  00268	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4014000000000000
  00270	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00274	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000

; 591  : 
; 592  : 	m_pTextCount->Render( iXPos + iOffset, y + 179 );

  0027c	f2 0f 2c d0	 cvttsd2si edx, xmm0
  00280	03 d3		 add	 edx, ebx
  00282	0f 57 c0	 xorps	 xmm0, xmm0
  00285	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00289	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028e	ff 10		 call	 DWORD PTR [eax]

; 593  : 	m_pTextSelect->Render( x + 106, y + 217  );

  00290	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00293	8b b6 78 01 00
	00		 mov	 esi, DWORD PTR [esi+376]
  00299	8b 06		 mov	 eax, DWORD PTR [esi]
  0029b	57		 push	 edi
  0029c	57		 push	 edi
  0029d	81 c1 d9 00 00
	00		 add	 ecx, 217		; 000000d9H
  002a3	57		 push	 edi
  002a4	57		 push	 edi
  002a5	51		 push	 ecx
  002a6	51		 push	 ecx
  002a7	0f 57 c0	 xorps	 xmm0, xmm0
  002aa	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002ae	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002b1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002b7	83 c1 6a	 add	 ecx, 106		; 0000006aH
  002ba	0f 57 c0	 xorps	 xmm0, xmm0
  002bd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002c1	8b ce		 mov	 ecx, esi
  002c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c8	ff 10		 call	 DWORD PTR [eax]
$LN1@RenderFixe:

; 594  : }

  002ca	e8 00 00 00 00	 call	 __EH_epilog3
  002cf	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR _kPrinter$508884[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z ENDP		; BingoRightWnd::RenderFixedPlay
PUBLIC	?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z ; BingoRightWnd::RenderAllBingo
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
xdata$x	SEGMENT
__unwindtable$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z$0
__ehfuncinfo$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_kPrinter$508914 = -52					; size = 32
tv340 = -20						; size = 4
tv306 = -20						; size = 4
tv298 = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv353 = 8						; size = 4
_iXPos$ = 8						; size = 4
_x$ = 8							; size = 4
tv300 = 12						; size = 4
tv248 = 12						; size = 4
_y$ = 12						; size = 4
tv388 = 16						; size = 4
_iLine$508915 = 16					; size = 4
_pTextImage$ = 16					; size = 4
?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z PROC ; BingoRightWnd::RenderAllBingo, COMDAT
; _this$ = ecx

; 597  : {

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 598  : 	if( m_pTextAll && pTextImage )

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _y$[ebp]
  00011	33 db		 xor	 ebx, ebx
  00013	39 9e 68 01 00
	00		 cmp	 DWORD PTR [esi+360], ebx
  00019	0f 84 c8 00 00
	00		 je	 $LN9@RenderAllB
  0001f	39 5d 10	 cmp	 DWORD PTR _pTextImage$[ebp], ebx
  00022	0f 84 bf 00 00
	00		 je	 $LN9@RenderAllB

; 599  : 	{
; 600  : 		m_pTextAll->Render( x + 110, y + 202 );

  00028	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0002e	53		 push	 ebx
  0002f	53		 push	 ebx
  00030	53		 push	 ebx
  00031	8d 87 ca 00 00
	00		 lea	 eax, DWORD PTR [edi+202]
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0003e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00041	53		 push	 ebx
  00042	83 c0 6e	 add	 eax, 110		; 0000006eH
  00045	51		 push	 ecx
  00046	51		 push	 ecx
  00047	0f 57 c9	 xorps	 xmm1, xmm1
  0004a	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0004e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00050	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00056	f3 0f 11 45 f0	 movss	 DWORD PTR tv298[ebp], xmm0
  0005b	f3 0f 11 4d 0c	 movss	 DWORD PTR tv300[ebp], xmm1
  00060	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00065	ff 10		 call	 DWORD PTR [eax]

; 601  : 		pTextImage->Render( x + 110, y + 197 );

  00067	8b 4d 10	 mov	 ecx, DWORD PTR _pTextImage$[ebp]
  0006a	53		 push	 ebx
  0006b	53		 push	 ebx
  0006c	53		 push	 ebx
  0006d	53		 push	 ebx
  0006e	51		 push	 ecx
  0006f	8d 87 c5 00 00
	00		 lea	 eax, DWORD PTR [edi+197]
  00075	0f 57 c0	 xorps	 xmm0, xmm0
  00078	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0007c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007e	51		 push	 ecx
  0007f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00085	f3 0f 11 45 ec	 movss	 DWORD PTR tv306[ebp], xmm0
  0008a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv300[ebp]
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	ff 10		 call	 DWORD PTR [eax]

; 602  : 		if( m_bLightIcon )

  00096	38 9e bc 01 00
	00		 cmp	 BYTE PTR [esi+444], bl
  0009c	74 49		 je	 SHORT $LN9@RenderAllB

; 603  : 		{
; 604  : 			m_pTextAll->Render( x + 110, y + 202, UI_RENDER_SCREEN );

  0009e	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  000a4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv298[ebp]
  000a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ab	53		 push	 ebx
  000ac	53		 push	 ebx
  000ad	53		 push	 ebx
  000ae	6a 01		 push	 1
  000b0	51		 push	 ecx
  000b1	51		 push	 ecx
  000b2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv300[ebp]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	ff 10		 call	 DWORD PTR [eax]

; 605  : 			pTextImage->Render( x + 110, y + 197, UI_RENDER_SCREEN );

  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _pTextImage$[ebp]
  000c7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv306[ebp]
  000cc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ce	53		 push	 ebx
  000cf	53		 push	 ebx
  000d0	53		 push	 ebx
  000d1	6a 01		 push	 1
  000d3	51		 push	 ecx
  000d4	51		 push	 ecx
  000d5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000db	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv300[ebp]
  000e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e5	ff 10		 call	 DWORD PTR [eax]
$LN9@RenderAllB:

; 606  : 		}
; 607  : 	}
; 608  : 
; 609  : 	if( m_pUnderLine )

  000e7	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  000ed	3b cb		 cmp	 ecx, ebx
  000ef	74 6e		 je	 SHORT $LN5@RenderAllB

; 610  : 	{
; 611  : 		m_pUnderLine->SetHorzFormatting( ioUIRenderImage::HF_STRETCH );

  000f1	6a 03		 push	 3
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z

; 612  : 		m_pUnderLine->SetSize( 187, 2 );

  000f9	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  000ff	8b 01		 mov	 eax, DWORD PTR [ecx]
  00101	6a 02		 push	 2
  00103	68 bb 00 00 00	 push	 187			; 000000bbH
  00108	ff 50 10	 call	 DWORD PTR [eax+16]
  0010b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0010e	83 c0 11	 add	 eax, 17			; 00000011H

; 613  : 		for( int i=0; i<5; ++i )

  00111	0f 57 c0	 xorps	 xmm0, xmm0
  00114	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00118	8d 87 0f 01 00
	00		 lea	 eax, DWORD PTR [edi+271]
  0011e	f3 0f 11 45 ec	 movss	 DWORD PTR tv340[ebp], xmm0
  00123	89 45 10	 mov	 DWORD PTR tv388[ebp], eax
  00126	c7 45 0c 05 00
	00 00		 mov	 DWORD PTR tv248[ebp], 5
$LN7@RenderAllB:

; 614  : 		{
; 615  : 			m_pUnderLine->Render( x + 17, y + 271 + i * 20, UI_RENDER_MULTIPLY );

  0012d	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00133	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR tv388[ebp]
  00138	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013a	53		 push	 ebx
  0013b	53		 push	 ebx
  0013c	53		 push	 ebx
  0013d	6a 08		 push	 8
  0013f	51		 push	 ecx
  00140	51		 push	 ecx
  00141	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00144	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0014a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv340[ebp]
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	ff 10		 call	 DWORD PTR [eax]
  00156	83 45 10 14	 add	 DWORD PTR tv388[ebp], 20 ; 00000014H
  0015a	ff 4d 0c	 dec	 DWORD PTR tv248[ebp]
  0015d	75 ce		 jne	 SHORT $LN7@RenderAllB
$LN5@RenderAllB:

; 616  : 		}
; 617  : 	}
; 618  : 
; 619  : 	int iXPos = x + 22;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00162	83 c0 16	 add	 eax, 22			; 00000016H
  00165	89 45 08	 mov	 DWORD PTR _iXPos$[ebp], eax

; 620  : 	int iYPos = y + 255; 

  00168	81 c7 ff 00 00
	00		 add	 edi, 255		; 000000ffH

; 621  : 	ioBingo *pBingo = g_MyInfo.GetBingo();

  0016e	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00173	8b b0 94 0b 00
	00		 mov	 esi, DWORD PTR [eax+2964]

; 622  : 	if( pBingo )

  00179	3b f3		 cmp	 esi, ebx
  0017b	0f 84 80 00 00
	00		 je	 $LN4@RenderAllB

; 623  : 	{
; 624  : 		ioComplexStringPrinter kPrinter;

  00181	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$508914[ebp]
  00184	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 625  : 		for( int iLine=0; iLine<5; ++iLine )

  00189	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _iXPos$[ebp]
  0018e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00191	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00194	89 5d 10	 mov	 DWORD PTR _iLine$508915[ebp], ebx
  00197	f3 0f 11 45 08	 movss	 DWORD PTR tv353[ebp], xmm0
$LN3@RenderAllB:

; 626  : 		{
; 627  : 			pBingo->SetUIPrinter( ioBingo::UI_MANUAL_ALL_BINGO, iLine, FONT_SIZE_12, kPrinter );

  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  001a4	8d 45 cc	 lea	 eax, DWORD PTR _kPrinter$508914[ebp]
  001a7	50		 push	 eax
  001a8	51		 push	 ecx
  001a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ae	ff 75 10	 push	 DWORD PTR _iLine$508915[ebp]
  001b1	8b ce		 mov	 ecx, esi
  001b3	6a 02		 push	 2
  001b5	e8 00 00 00 00	 call	 ?SetUIPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z ; ioBingo::SetUIPrinter

; 628  : 			kPrinter.PrintFullText( iXPos, iYPos, TAT_LEFT );

  001ba	68 ff 00 00 00	 push	 255			; 000000ffH
  001bf	53		 push	 ebx
  001c0	51		 push	 ecx
  001c1	51		 push	 ecx
  001c2	0f 57 c0	 xorps	 xmm0, xmm0
  001c5	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  001c9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001cf	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv353[ebp]
  001d4	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$508914[ebp]
  001d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dc	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 629  : 			kPrinter.ClearList();

  001e1	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$508914[ebp]
  001e4	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 630  : 			iYPos+=20;

  001e9	83 c7 14	 add	 edi, 20			; 00000014H
  001ec	ff 45 10	 inc	 DWORD PTR _iLine$508915[ebp]
  001ef	83 7d 10 05	 cmp	 DWORD PTR _iLine$508915[ebp], 5
  001f3	7c a7		 jl	 SHORT $LN3@RenderAllB

; 631  : 		}
; 632  : 	}

  001f5	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001f9	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$508914[ebp]
  001fc	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN4@RenderAllB:

; 633  : }

  00201	e8 00 00 00 00	 call	 __EH_epilog3
  00206	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$508914[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z ENDP ; BingoRightWnd::RenderAllBingo
PUBLIC	__real@40000000
PUBLIC	__real@c05c400000000000
PUBLIC	__real@4069000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	??_C@_0BN@BMDMJPHH@BingoRightWnd?3?3RenderBallAni?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?RenderBallAni@BingoRightWnd@@IAEXHH@Z		; BingoRightWnd::RenderBallAni
EXTRN	?Render@ioSprite@@QAEXHHMW4UIRenderType@@W4TextureFilterOption@@@Z:PROC ; ioSprite::Render
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBDH@Z:PROC
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@40000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@c05c400000000000
CONST	SEGMENT
__real@c05c400000000000 DQ 0c05c400000000000r	; -113
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT ??_C@_0BN@BMDMJPHH@BingoRightWnd?3?3RenderBallAni?$AA@
CONST	SEGMENT
??_C@_0BN@BMDMJPHH@BingoRightWnd?3?3RenderBallAni?$AA@ DB 'BingoRightWnd:'
	DB	':RenderBallAni', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
CONST	ENDS
;	COMDAT ?RenderBallAni@BingoRightWnd@@IAEXHH@Z
_TEXT	SEGMENT
tv888 = -16						; size = 4
tv884 = -16						; size = 4
tv854 = -16						; size = 4
tv947 = -12						; size = 4
tv907 = -12						; size = 4
tv763 = -12						; size = 4
tv881 = -8						; size = 4
tv497 = -8						; size = 4
$T512997 = -8						; size = 4
_iXPos$509173 = -8					; size = 4
_fRate$509141 = -8					; size = 4
tv1002 = -4						; size = 4
tv788 = -4						; size = 4
_iYPos$509174 = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RenderBallAni@BingoRightWnd@@IAEXHH@Z PROC		; BingoRightWnd::RenderBallAni, COMDAT
; _this$ = ecx

; 757  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 758  : 	y -= 30;

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx

; 759  : 	switch( m_BallAniState )

  0000e	8b 86 c4 01 00
	00		 mov	 eax, DWORD PTR [esi+452]
  00014	83 eb 1e	 sub	 ebx, 30			; 0000001eH
  00017	48		 dec	 eax
  00018	6a 00		 push	 0
  0001a	89 5d 0c	 mov	 DWORD PTR _y$[ebp], ebx
  0001d	5f		 pop	 edi
  0001e	0f 84 71 04 00
	00		 je	 $LN26@RenderBall
  00024	48		 dec	 eax
  00025	0f 84 2f 02 00
	00		 je	 $LN24@RenderBall
  0002b	48		 dec	 eax
  0002c	0f 84 19 01 00
	00		 je	 $LN17@RenderBall
  00032	48		 dec	 eax
  00033	0f 85 10 05 00
	00		 jne	 $LN45@RenderBall

; 840  : 	case BAS_MOVING:
; 841  : 		{
; 842  : 			int iXPos = m_vCurPos.x;

  00039	f3 0f 2c 86 24
	02 00 00	 cvttss2si eax, DWORD PTR [esi+548]
  00041	89 45 f8	 mov	 DWORD PTR _iXPos$509173[ebp], eax

; 843  : 			int iYPos = m_vCurPos.y;

  00044	f3 0f 2c 86 28
	02 00 00	 cvttss2si eax, DWORD PTR [esi+552]
  0004c	89 45 fc	 mov	 DWORD PTR _iYPos$509174[ebp], eax

; 844  : 
; 845  : 			if( m_pRedBall )

  0004f	39 be 80 01 00
	00		 cmp	 DWORD PTR [esi+384], edi
  00055	74 5f		 je	 SHORT $LN9@RenderBall

; 846  : 			{
; 847  : 				m_pRedBall->SetScale( FLOAT1 );

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	89 45 f4	 mov	 DWORD PTR tv947[ebp], eax
  00067	db 45 f4	 fild	 DWORD PTR tv947[ebp]
  0006a	85 c0		 test	 eax, eax
  0006c	79 06		 jns	 SHORT $LN49@RenderBall
  0006e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN49@RenderBall:
  00074	51		 push	 ecx
  00075	d9 1c 24	 fstp	 DWORD PTR [esp]
  00078	ff 52 1c	 call	 DWORD PTR [edx+28]

; 848  : 				m_pRedBall->SetAlpha( MAX_ALPHA_RATE );

  0007b	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  00081	8b 01		 mov	 eax, DWORD PTR [ecx]
  00083	68 ff 00 00 00	 push	 255			; 000000ffH
  00088	ff 50 30	 call	 DWORD PTR [eax+48]

; 849  : 				m_pRedBall->Render( iXPos, iYPos );

  0008b	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  00091	66 0f 6e 45 fc	 movd	 xmm0, DWORD PTR _iYPos$509174[ebp]
  00096	8b 01		 mov	 eax, DWORD PTR [ecx]
  00098	57		 push	 edi
  00099	57		 push	 edi
  0009a	57		 push	 edi
  0009b	57		 push	 edi
  0009c	51		 push	 ecx
  0009d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000a0	51		 push	 ecx
  000a1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000a7	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR _iXPos$509173[ebp]
  000ac	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	ff 10		 call	 DWORD PTR [eax]
$LN9@RenderBall:

; 850  : 			}
; 851  : 
; 852  : 			switch( m_iBingoType )

  000b6	39 be b4 02 00
	00		 cmp	 DWORD PTR [esi+692], edi
  000bc	0f 85 87 04 00
	00		 jne	 $LN45@RenderBall

; 853  : 			{
; 854  : 			case ioBingo::BT_RAND:
; 855  : 				{
; 856  : 					g_FontMgr.SetAlignType( TAT_CENTER );

  000c2	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  000c8	6a 01		 push	 1
  000ca	ff d3		 call	 ebx
  000cc	8b c8		 mov	 ecx, eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 857  : 					g_FontMgr.SetTextStyle( TS_NORMAL );

  000d4	57		 push	 edi
  000d5	ff d3		 call	 ebx
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 858  : 					g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  000df	6a ff		 push	 -1
  000e1	ff d3		 call	 ebx
  000e3	8b c8		 mov	 ecx, eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 859  : 					g_FontMgr.SetBkColor( 0, 0, 0 );

  000eb	57		 push	 edi
  000ec	57		 push	 edi
  000ed	57		 push	 edi
  000ee	ff d3		 call	 ebx
  000f0	8b c8		 mov	 ecx, eax
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 860  : 					g_FontMgr.PrintText( iXPos, iYPos - 11, FONT_SIZE_20, STR(3), m_iLastGetNumber );

  000f8	ff b6 c0 01 00
	00		 push	 DWORD PTR [esi+448]
  000fe	57		 push	 edi
  000ff	6a 03		 push	 3
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BMDMJPHH@BingoRightWnd?3?3RenderBallAni?$AA@
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00111	8b c8		 mov	 ecx, eax
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00119	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00121	50		 push	 eax
  00122	8b 45 fc	 mov	 eax, DWORD PTR _iYPos$509174[ebp]
  00125	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00128	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0012e	0f 57 c0	 xorps	 xmm0, xmm0
  00131	83 c0 f5	 add	 eax, -11		; fffffff5H
  00134	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00138	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013e	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR _iXPos$509173[ebp]
  00143	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 861  : 				}
; 862  : 				break;
; 863  : 			}
; 864  : 
; 865  : 		}
; 866  : 		break;

  00146	e9 33 03 00 00	 jmp	 $LN55@RenderBall
$LN17@RenderBall:

; 812  : 	case BAS_WAIT:
; 813  : 		{
; 814  : 			if( m_pBallBg )

  0014b	39 be 88 01 00
	00		 cmp	 DWORD PTR [esi+392], edi
  00151	74 33		 je	 SHORT $LN43@RenderBall

; 815  : 				m_pBallBg->Render( x + 111, y + 114, UI_RENDER_MULTIPLY );

  00153	8b 8e 88 01 00
	00		 mov	 ecx, DWORD PTR [esi+392]
  00159	8b 01		 mov	 eax, DWORD PTR [ecx]
  0015b	57		 push	 edi
  0015c	57		 push	 edi
  0015d	57		 push	 edi
  0015e	6a 08		 push	 8
  00160	0f 57 c0	 xorps	 xmm0, xmm0
  00163	8d 53 72	 lea	 edx, DWORD PTR [ebx+114]
  00166	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0016a	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0016d	51		 push	 ecx
  0016e	51		 push	 ecx
  0016f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00175	83 c2 6f	 add	 edx, 111		; 0000006fH
  00178	0f 57 c0	 xorps	 xmm0, xmm0
  0017b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	ff 10		 call	 DWORD PTR [eax]
$LN43@RenderBall:

; 816  : 
; 817  : 			if( m_pRedBall )

  00186	39 be 80 01 00
	00		 cmp	 DWORD PTR [esi+384], edi
  0018c	74 32		 je	 SHORT $LN15@RenderBall

; 818  : 				m_pRedBall->Render( x + 111, y + 114 );

  0018e	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  00194	8b 01		 mov	 eax, DWORD PTR [ecx]
  00196	57		 push	 edi
  00197	57		 push	 edi
  00198	57		 push	 edi
  00199	57		 push	 edi
  0019a	0f 57 c0	 xorps	 xmm0, xmm0
  0019d	8d 53 72	 lea	 edx, DWORD PTR [ebx+114]
  001a0	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001a4	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001a7	51		 push	 ecx
  001a8	51		 push	 ecx
  001a9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001af	83 c2 6f	 add	 edx, 111		; 0000006fH
  001b2	0f 57 c0	 xorps	 xmm0, xmm0
  001b5	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	ff 10		 call	 DWORD PTR [eax]
$LN15@RenderBall:

; 819  : 
; 820  : 			if( m_pTextGet )

  001c0	39 be 7c 01 00
	00		 cmp	 DWORD PTR [esi+380], edi
  001c6	74 42		 je	 SHORT $LN14@RenderBall

; 821  : 			{
; 822  : 				m_pTextGet->SetAlpha( MAX_ALPHA_RATE );

  001c8	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  001ce	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d0	68 ff 00 00 00	 push	 255			; 000000ffH
  001d5	ff 50 30	 call	 DWORD PTR [eax+48]

; 823  : 				m_pTextGet->Render( x + 111, y + 75 );

  001d8	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  001de	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e0	57		 push	 edi
  001e1	57		 push	 edi
  001e2	57		 push	 edi
  001e3	57		 push	 edi
  001e4	0f 57 c0	 xorps	 xmm0, xmm0
  001e7	8d 53 4b	 lea	 edx, DWORD PTR [ebx+75]
  001ea	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001ee	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001f1	51		 push	 ecx
  001f2	51		 push	 ecx
  001f3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001f9	83 c2 6f	 add	 edx, 111		; 0000006fH
  001fc	0f 57 c0	 xorps	 xmm0, xmm0
  001ff	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00203	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00208	ff 10		 call	 DWORD PTR [eax]
$LN14@RenderBall:

; 824  : 			}
; 825  : 
; 826  : 			switch( m_iBingoType )

  0020a	39 be b4 02 00
	00		 cmp	 DWORD PTR [esi+692], edi
  00210	0f 85 33 03 00
	00		 jne	 $LN45@RenderBall

; 827  : 			{
; 828  : 			case ioBingo::BT_RAND:
; 829  : 				{
; 830  : 					g_FontMgr.SetAlignType( TAT_CENTER );

  00216	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  0021c	6a 01		 push	 1
  0021e	ff d3		 call	 ebx
  00220	8b c8		 mov	 ecx, eax
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 831  : 					g_FontMgr.SetTextStyle( TS_NORMAL );

  00228	57		 push	 edi
  00229	ff d3		 call	 ebx
  0022b	8b c8		 mov	 ecx, eax
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 832  : 					g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  00233	6a ff		 push	 -1
  00235	ff d3		 call	 ebx
  00237	8b c8		 mov	 ecx, eax
  00239	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 833  : 					g_FontMgr.SetBkColor( 0, 0, 0 );

  0023f	57		 push	 edi
  00240	57		 push	 edi
  00241	57		 push	 edi
  00242	ff d3		 call	 ebx
  00244	8b c8		 mov	 ecx, eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 834  : 					g_FontMgr.PrintText( x + 111, y + 103 , FONT_SIZE_20, STR(2), m_iLastGetNumber );

  0024c	ff b6 c0 01 00
	00		 push	 DWORD PTR [esi+448]
  00252	57		 push	 edi
  00253	6a 02		 push	 2

; 835  : 				}
; 836  : 				break;
; 837  : 			}
; 838  : 		}
; 839  : 		break;

  00255	e9 da 01 00 00	 jmp	 $LN54@RenderBall
$LN24@RenderBall:

; 770  : 			}
; 771  : 		}
; 772  : 		break;
; 773  : 	case BAS_SHINING:
; 774  : 		{
; 775  : 			if( m_pBallBg )

  0025a	39 be 88 01 00
	00		 cmp	 DWORD PTR [esi+392], edi
  00260	74 33		 je	 SHORT $LN44@RenderBall

; 776  : 				m_pBallBg->Render( x + 111, y + 114, UI_RENDER_MULTIPLY );

  00262	8b 8e 88 01 00
	00		 mov	 ecx, DWORD PTR [esi+392]
  00268	8b 01		 mov	 eax, DWORD PTR [ecx]
  0026a	57		 push	 edi
  0026b	57		 push	 edi
  0026c	57		 push	 edi
  0026d	6a 08		 push	 8
  0026f	0f 57 c0	 xorps	 xmm0, xmm0
  00272	8d 53 72	 lea	 edx, DWORD PTR [ebx+114]
  00275	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00279	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0027c	51		 push	 ecx
  0027d	51		 push	 ecx
  0027e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00284	83 c2 6f	 add	 edx, 111		; 0000006fH
  00287	0f 57 c0	 xorps	 xmm0, xmm0
  0028a	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0028e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00293	ff 10		 call	 DWORD PTR [eax]
$LN44@RenderBall:

; 777  : 
; 778  : 			if( m_pRedBall )

  00295	39 be 80 01 00
	00		 cmp	 DWORD PTR [esi+384], edi
  0029b	74 66		 je	 SHORT $LN22@RenderBall

; 779  : 			{
; 780  : 				m_pRedBall->SetScale( FLOAT1 );

  0029d	b8 01 00 00 00	 mov	 eax, 1
  002a2	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  002a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  002aa	89 45 f4	 mov	 DWORD PTR tv907[ebp], eax
  002ad	db 45 f4	 fild	 DWORD PTR tv907[ebp]
  002b0	85 c0		 test	 eax, eax
  002b2	79 06		 jns	 SHORT $LN50@RenderBall
  002b4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN50@RenderBall:
  002ba	51		 push	 ecx
  002bb	d9 1c 24	 fstp	 DWORD PTR [esp]
  002be	ff 52 1c	 call	 DWORD PTR [edx+28]

; 781  : 				m_pRedBall->SetAlpha( MAX_ALPHA_RATE );

  002c1	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  002c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c9	68 ff 00 00 00	 push	 255			; 000000ffH
  002ce	ff 50 30	 call	 DWORD PTR [eax+48]

; 782  : 				m_pRedBall->Render( x + 111, y + 114 );

  002d1	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  002d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  002d9	57		 push	 edi
  002da	57		 push	 edi
  002db	57		 push	 edi
  002dc	57		 push	 edi
  002dd	0f 57 c0	 xorps	 xmm0, xmm0
  002e0	8d 53 72	 lea	 edx, DWORD PTR [ebx+114]
  002e3	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  002e7	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  002ea	51		 push	 ecx
  002eb	51		 push	 ecx
  002ec	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002f2	83 c2 6f	 add	 edx, 111		; 0000006fH
  002f5	0f 57 c0	 xorps	 xmm0, xmm0
  002f8	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  002fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00301	ff 10		 call	 DWORD PTR [eax]
$LN22@RenderBall:

; 783  : 			}
; 784  : 
; 785  : 			if( m_pTextGet )

  00303	39 be 7c 01 00
	00		 cmp	 DWORD PTR [esi+380], edi
  00309	0f 84 da 00 00
	00		 je	 $LN21@RenderBall

; 786  : 			{
; 787  : 				m_pTextGet->SetAlpha( MAX_ALPHA_RATE );

  0030f	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00315	8b 01		 mov	 eax, DWORD PTR [ecx]
  00317	68 ff 00 00 00	 push	 255			; 000000ffH
  0031c	ff 50 30	 call	 DWORD PTR [eax+48]

; 788  : 				m_pTextGet->Render( x + 111, y + 75 );

  0031f	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00325	57		 push	 edi
  00326	57		 push	 edi
  00327	57		 push	 edi
  00328	8d 43 4b	 lea	 eax, DWORD PTR [ebx+75]
  0032b	0f 57 c0	 xorps	 xmm0, xmm0
  0032e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00332	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00335	57		 push	 edi
  00336	83 c0 6f	 add	 eax, 111		; 0000006fH
  00339	51		 push	 ecx
  0033a	51		 push	 ecx
  0033b	0f 57 c9	 xorps	 xmm1, xmm1
  0033e	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00342	8b 01		 mov	 eax, DWORD PTR [ecx]
  00344	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0034a	f3 0f 11 45 fc	 movss	 DWORD PTR tv788[ebp], xmm0
  0034f	f3 0f 11 4d f4	 movss	 DWORD PTR tv763[ebp], xmm1
  00354	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00359	ff 10		 call	 DWORD PTR [eax]

; 789  : 
; 790  : 				float fRate = static_cast<float>( m_dwBallAniCheckTime - FRAMEGETTIME() ) / FLOAT1000;

  0035b	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00360	89 45 f8	 mov	 DWORD PTR $T512997[ebp], eax
  00363	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00369	8b c8		 mov	 ecx, eax
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00371	8b 8e c8 01 00
	00		 mov	 ecx, DWORD PTR [esi+456]
  00377	2b c8		 sub	 ecx, eax

; 791  : 				int iAlpha = MAX_ALPHA_RATE * fRate;

  00379	89 4d f0	 mov	 DWORD PTR tv888[ebp], ecx
  0037c	db 45 f0	 fild	 DWORD PTR tv888[ebp]
  0037f	79 06		 jns	 SHORT $LN51@RenderBall
  00381	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN51@RenderBall:
  00387	8b 45 f8	 mov	 eax, DWORD PTR $T512997[ebp]
  0038a	db 45 f8	 fild	 DWORD PTR $T512997[ebp]
  0038d	85 c0		 test	 eax, eax
  0038f	79 06		 jns	 SHORT $LN52@RenderBall
  00391	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN52@RenderBall:

; 789  : 
; 790  : 				float fRate = static_cast<float>( m_dwBallAniCheckTime - FRAMEGETTIME() ) / FLOAT1000;

  00397	de f9		 fdivp	 ST(1), ST(0)

; 791  : 				int iAlpha = MAX_ALPHA_RATE * fRate;

  00399	d9 5d f8	 fstp	 DWORD PTR tv881[ebp]
  0039c	d9 45 f8	 fld	 DWORD PTR tv881[ebp]
  0039f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000
  003a5	e8 00 00 00 00	 call	 __ftol2_sse

; 792  : 				m_pTextGet->SetAlpha( iAlpha );

  003aa	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  003b0	8b 11		 mov	 edx, DWORD PTR [ecx]
  003b2	50		 push	 eax
  003b3	ff 52 30	 call	 DWORD PTR [edx+48]

; 793  : 				m_pTextGet->SetColor( TCT_DEFAULT_WHITE );

  003b6	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  003bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  003be	6a ff		 push	 -1
  003c0	ff 50 2c	 call	 DWORD PTR [eax+44]

; 794  : 				m_pTextGet->Render( x + 111, y + 75, UI_RENDER_NORMAL_ADD_COLOR );

  003c3	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  003c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv788[ebp]
  003ce	8b 01		 mov	 eax, DWORD PTR [ecx]
  003d0	57		 push	 edi
  003d1	57		 push	 edi
  003d2	57		 push	 edi
  003d3	6a 04		 push	 4
  003d5	51		 push	 ecx
  003d6	51		 push	 ecx
  003d7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003dd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv763[ebp]
  003e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e7	ff 10		 call	 DWORD PTR [eax]
$LN21@RenderBall:

; 795  : 			}
; 796  : 
; 797  : 			switch( m_iBingoType )

  003e9	39 be b4 02 00
	00		 cmp	 DWORD PTR [esi+692], edi
  003ef	0f 85 54 01 00
	00		 jne	 $LN45@RenderBall

; 798  : 			{
; 799  : 			case ioBingo::BT_RAND:
; 800  : 				{
; 801  : 					g_FontMgr.SetAlignType( TAT_CENTER );

  003f5	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  003fb	6a 01		 push	 1
  003fd	ff d3		 call	 ebx
  003ff	8b c8		 mov	 ecx, eax
  00401	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 802  : 					g_FontMgr.SetTextStyle( TS_NORMAL );

  00407	57		 push	 edi
  00408	ff d3		 call	 ebx
  0040a	8b c8		 mov	 ecx, eax
  0040c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 803  : 					g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  00412	6a ff		 push	 -1
  00414	ff d3		 call	 ebx
  00416	8b c8		 mov	 ecx, eax
  00418	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 804  : 					g_FontMgr.SetBkColor( 0, 0, 0 );

  0041e	57		 push	 edi
  0041f	57		 push	 edi
  00420	57		 push	 edi
  00421	ff d3		 call	 ebx
  00423	8b c8		 mov	 ecx, eax
  00425	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 805  : 					g_FontMgr.PrintText( x + 111, y + 103 , FONT_SIZE_20, STR(1), m_iLastGetNumber );

  0042b	ff b6 c0 01 00
	00		 push	 DWORD PTR [esi+448]
  00431	57		 push	 edi
  00432	6a 01		 push	 1
$LN54@RenderBall:
  00434	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00439	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BMDMJPHH@BingoRightWnd?3?3RenderBallAni?$AA@
  0043e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00444	8b c8		 mov	 ecx, eax
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00454	50		 push	 eax
  00455	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00458	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0045b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00461	83 c0 67	 add	 eax, 103		; 00000067H
  00464	0f 57 c0	 xorps	 xmm0, xmm0
  00467	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0046b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0046e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00474	83 c0 6f	 add	 eax, 111		; 0000006fH
  00477	0f 57 c0	 xorps	 xmm0, xmm0
  0047a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
$LN55@RenderBall:
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	ff d3		 call	 ebx
  00485	8b c8		 mov	 ecx, eax
  00487	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBDH@Z

; 806  : 				}
; 807  : 			break;
; 808  : 			}
; 809  : 			
; 810  : 		}
; 811  : 		break;

  0048d	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
  00490	e9 b4 00 00 00	 jmp	 $LN45@RenderBall
$LN26@RenderBall:

; 760  : 	{
; 761  : 	case BAS_POP:
; 762  : 		{
; 763  : 			if( m_pLightBall )

  00495	39 be 84 01 00
	00		 cmp	 DWORD PTR [esi+388], edi
  0049b	0f 84 a8 00 00
	00		 je	 $LN45@RenderBall

; 764  : 			{
; 765  : 				float fRate = static_cast<float>( m_dwBallAniCheckTime - FRAMEGETTIME() ) / 200.0f;

  004a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  004a7	8b c8		 mov	 ecx, eax
  004a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  004af	8b 8e c8 01 00
	00		 mov	 ecx, DWORD PTR [esi+456]
  004b5	2b c8		 sub	 ecx, eax
  004b7	89 4d f0	 mov	 DWORD PTR tv854[ebp], ecx
  004ba	db 45 f0	 fild	 DWORD PTR tv854[ebp]
  004bd	79 06		 jns	 SHORT $LN53@RenderBall
  004bf	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN53@RenderBall:
  004c5	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4069000000000000

; 766  : 				int iYGap = 113 * fRate;
; 767  : 				int iAlpha = MAX_ALPHA_RATE - ( MAX_ALPHA_RATE * fRate );

  004cb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000

; 768  : 				m_pLightBall->SetAlpha( iAlpha );

  004d3	8b 8e 84 01 00
	00		 mov	 ecx, DWORD PTR [esi+388]
  004d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  004db	d9 5d f8	 fstp	 DWORD PTR _fRate$509141[ebp]
  004de	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _fRate$509141[ebp]
  004e3	0f 5a c9	 cvtps2pd xmm1, xmm1
  004e6	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  004ea	f2 0f 5c c1	 subsd	 xmm0, xmm1
  004ee	f2 0f 2c d0	 cvttsd2si edx, xmm0
  004f2	0f b6 d2	 movzx	 edx, dl
  004f5	52		 push	 edx
  004f6	ff 50 30	 call	 DWORD PTR [eax+48]

; 769  : 				m_pLightBall->Render( x + 111, y + 114 + iYGap );

  004f9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fRate$509141[ebp]
  004fe	8b 86 84 01 00
	00		 mov	 eax, DWORD PTR [esi+388]
  00504	8b 00		 mov	 eax, DWORD PTR [eax]
  00506	57		 push	 edi
  00507	57		 push	 edi
  00508	0f 5a c0	 cvtps2pd xmm0, xmm0
  0050b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c05c400000000000
  00513	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00517	57		 push	 edi
  00518	57		 push	 edi
  00519	51		 push	 ecx
  0051a	51		 push	 ecx
  0051b	8b d3		 mov	 edx, ebx
  0051d	2b d1		 sub	 edx, ecx
  0051f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00522	0f 57 c0	 xorps	 xmm0, xmm0
  00525	83 c2 72	 add	 edx, 114		; 00000072H
  00528	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0052c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00532	83 c1 6f	 add	 ecx, 111		; 0000006fH
  00535	0f 57 c0	 xorps	 xmm0, xmm0
  00538	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0053c	8b 8e 84 01 00
	00		 mov	 ecx, DWORD PTR [esi+388]
  00542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00547	ff 10		 call	 DWORD PTR [eax]
$LN45@RenderBall:

; 867  : 	case BAS_NUMBER_EFFECT:
; 868  : 		break;
; 869  : 	case BAS_REWARD_EFFECT:
; 870  : 		break;
; 871  : 	}
; 872  : 
; 873  : 	int iSize = m_vBallAfterImageList.size();

  00549	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  0054f	2b 86 a4 02 00
	00		 sub	 eax, DWORD PTR [esi+676]
  00555	6a 14		 push	 20			; 00000014H
  00557	99		 cdq
  00558	59		 pop	 ecx
  00559	f7 f9		 idiv	 ecx

; 874  : 	for( int i=0; i<iSize; ++i )

  0055b	3b c7		 cmp	 eax, edi
  0055d	7e 66		 jle	 SHORT $LN1@RenderBall

; 867  : 	case BAS_NUMBER_EFFECT:
; 868  : 		break;
; 869  : 	case BAS_REWARD_EFFECT:
; 870  : 		break;
; 871  : 	}
; 872  : 
; 873  : 	int iSize = m_vBallAfterImageList.size();

  0055f	89 7d fc	 mov	 DWORD PTR tv1002[ebp], edi
  00562	89 45 f8	 mov	 DWORD PTR tv497[ebp], eax
$LL48@RenderBall:

; 875  : 	{
; 876  : 		BallAfterImage &rkInfo = m_vBallAfterImageList[i];

  00565	8b 9e a4 02 00
	00		 mov	 ebx, DWORD PTR [esi+676]

; 877  : 		m_pRedBall->SetScale( rkInfo.m_fScale );

  0056b	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  00571	03 5d fc	 add	 ebx, DWORD PTR tv1002[ebp]
  00574	8b 01		 mov	 eax, DWORD PTR [ecx]
  00576	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  0057b	51		 push	 ecx
  0057c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00581	ff 50 1c	 call	 DWORD PTR [eax+28]

; 878  : 		m_pRedBall->SetAlpha( rkInfo.m_iAlpha );

  00584	0f b6 53 08	 movzx	 edx, BYTE PTR [ebx+8]
  00588	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  0058e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00590	52		 push	 edx
  00591	ff 50 30	 call	 DWORD PTR [eax+48]

; 879  : 		m_pRedBall->Render( rkInfo.m_vPosition.x, rkInfo.m_vPosition.y, UI_RENDER_NORMAL, TFO_BILINEAR );

  00594	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  0059a	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  0059f	8b 01		 mov	 eax, DWORD PTR [ecx]
  005a1	57		 push	 edi
  005a2	57		 push	 edi
  005a3	6a 01		 push	 1
  005a5	57		 push	 edi
  005a6	51		 push	 ecx
  005a7	51		 push	 ecx
  005a8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  005ae	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	ff 10		 call	 DWORD PTR [eax]
  005b9	83 45 fc 14	 add	 DWORD PTR tv1002[ebp], 20 ; 00000014H
  005bd	ff 4d f8	 dec	 DWORD PTR tv497[ebp]
  005c0	75 a3		 jne	 SHORT $LL48@RenderBall

; 874  : 	for( int i=0; i<iSize; ++i )

  005c2	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
$LN1@RenderBall:

; 880  : 	}
; 881  : 
; 882  : 	m_BallEffect.Render( x + 111, y + 114, 2.0f, UI_RENDER_SCREEN, TFO_BILINEAR );

  005c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  005cd	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  005d0	6a 01		 push	 1
  005d2	6a 01		 push	 1
  005d4	51		 push	 ecx
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	83 c3 72	 add	 ebx, 114		; 00000072H
  005dd	53		 push	 ebx
  005de	83 c0 6f	 add	 eax, 111		; 0000006fH
  005e1	50		 push	 eax
  005e2	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  005e8	e8 00 00 00 00	 call	 ?Render@ioSprite@@QAEXHHMW4UIRenderType@@W4TextureFilterOption@@@Z ; ioSprite::Render
  005ed	5f		 pop	 edi
  005ee	5e		 pop	 esi
  005ef	5b		 pop	 ebx

; 883  : }

  005f0	c9		 leave
  005f1	c2 08 00	 ret	 8
?RenderBallAni@BingoRightWnd@@IAEXHH@Z ENDP		; BingoRightWnd::RenderBallAni
_TEXT	ENDS
PUBLIC	??_R0?AVNumberButton@@@8			; NumberButton `RTTI Type Descriptor'
PUBLIC	??_R0?AVBingoWnd@@@8				; BingoWnd `RTTI Type Descriptor'
PUBLIC	?SetBallAni@BingoRightWnd@@QAEXHPAVioBingo@@ABVioHashString@@@Z ; BingoRightWnd::SetBallAni
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?CheckBingoLine@ioBingo@@QAE_NH@Z:PROC		; ioBingo::CheckBingoLine
EXTRN	?SetClear@NumberButton@@QAEXXZ:PROC		; NumberButton::SetClear
;	COMDAT ??_R0?AVNumberButton@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingownd.h
_DATA	SEGMENT
??_R0?AVNumberButton@@@8 DD FLAT:??_7type_info@@6B@	; NumberButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNumberButton@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVBingoWnd@@@8
_DATA	SEGMENT
??_R0?AVBingoWnd@@@8 DD FLAT:??_7type_info@@6B@		; BingoWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBingoWnd@@', 00H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
_DATA	ENDS
;	COMDAT ?SetBallAni@BingoRightWnd@@QAEXHPAVioBingo@@ABVioHashString@@@Z
_TEXT	SEGMENT
$T513040 = -12						; size = 8
$T513039 = -12						; size = 8
_pBtn$509235 = -8					; size = 4
_pWnd$509212 = -8					; size = 4
_i$509215 = -4						; size = 4
_iNumber$ = 8						; size = 4
_pWnd$ = 12						; size = 4
_pBingo$ = 12						; size = 4
_i$509231 = 16						; size = 4
_szNewBallImage$ = 16					; size = 4
?SetBallAni@BingoRightWnd@@QAEXHPAVioBingo@@ABVioHashString@@@Z PROC ; BingoRightWnd::SetBallAni, COMDAT
; _this$ = ecx

; 973  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 974  : 	if( iNumber <= 0 )

  00007	33 db		 xor	 ebx, ebx
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	39 5d 08	 cmp	 DWORD PTR _iNumber$[ebp], ebx
  0000f	0f 8e f0 01 00
	00		 jle	 $LN2@SetBallAni

; 975  : 		return;
; 976  : 
; 977  : 	if( m_BallAniState != BAS_NONE && m_iLastGetNumber > 0 )

  00015	57		 push	 edi
  00016	bf 00 00 00 00	 mov	 edi, OFFSET ??_R0?AVioWnd@@@8
  0001b	39 9e c4 01 00
	00		 cmp	 DWORD PTR [esi+452], ebx
  00021	74 7a		 je	 SHORT $LN13@SetBallAni
  00023	39 9e c0 01 00
	00		 cmp	 DWORD PTR [esi+448], ebx
  00029	7e 72		 jle	 SHORT $LN13@SetBallAni

; 978  : 	{
; 979  : 		BingoWnd *pWnd = dynamic_cast<BingoWnd*>( GetParent() );

  0002b	53		 push	 ebx
  0002c	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoWnd@@@8
  00031	57		 push	 edi
  00032	53		 push	 ebx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0003f	83 c4 14	 add	 esp, 20			; 00000014H
  00042	89 45 f8	 mov	 DWORD PTR _pWnd$509212[ebp], eax

; 980  : 		if( pWnd )

  00045	3b c3		 cmp	 eax, ebx
  00047	74 46		 je	 SHORT $LN9@SetBallAni

; 981  : 		{
; 982  : 			for( int i=BingoWnd::ID_NUMBER_BTN_1; i<BingoWnd::ID_NUMBER_BTN_25+1; ++i)

  00049	c7 45 fc 65 00
	00 00		 mov	 DWORD PTR _i$509215[ebp], 101 ; 00000065H
$LL31@SetBallAni:

; 983  : 			{
; 984  : 				NumberButton *pBtn = dynamic_cast<NumberButton*>( pWnd->FindChildWnd(i) );

  00050	8b 4d f8	 mov	 ecx, DWORD PTR _pWnd$509212[ebp]
  00053	53		 push	 ebx
  00054	68 00 00 00 00	 push	 OFFSET ??_R0?AVNumberButton@@@8
  00059	57		 push	 edi
  0005a	53		 push	 ebx
  0005b	ff 75 fc	 push	 DWORD PTR _i$509215[ebp]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ___RTDynamicCast
  0006a	83 c4 14	 add	 esp, 20			; 00000014H

; 985  : 				if( pBtn && pBtn->GetNumber() == m_iLastGetNumber )

  0006d	3b c3		 cmp	 eax, ebx
  0006f	74 15		 je	 SHORT $LN10@SetBallAni
  00071	8b 88 28 02 00
	00		 mov	 ecx, DWORD PTR [eax+552]
  00077	3b 8e c0 01 00
	00		 cmp	 ecx, DWORD PTR [esi+448]
  0007d	75 07		 jne	 SHORT $LN10@SetBallAni

; 986  : 				{
; 987  : 					pBtn->SetClear();

  0007f	8b c8		 mov	 ecx, eax
  00081	e8 00 00 00 00	 call	 ?SetClear@NumberButton@@QAEXXZ ; NumberButton::SetClear
$LN10@SetBallAni:

; 981  : 		{
; 982  : 			for( int i=BingoWnd::ID_NUMBER_BTN_1; i<BingoWnd::ID_NUMBER_BTN_25+1; ++i)

  00086	ff 45 fc	 inc	 DWORD PTR _i$509215[ebp]
  00089	83 7d fc 7e	 cmp	 DWORD PTR _i$509215[ebp], 126 ; 0000007eH
  0008d	7c c1		 jl	 SHORT $LL31@SetBallAni
$LN9@SetBallAni:

; 988  : 				}
; 989  : 			}
; 990  : 		}
; 991  : 
; 992  : 		pBingo->CheckBingoLine( m_iLastGetNumber );

  0008f	ff b6 c0 01 00
	00		 push	 DWORD PTR [esi+448]
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _pBingo$[ebp]
  00098	e8 00 00 00 00	 call	 ?CheckBingoLine@ioBingo@@QAE_NH@Z ; ioBingo::CheckBingoLine
$LN13@SetBallAni:

; 993  : 	}
; 994  : 
; 995  : 	if( !szNewBallImage.IsEmpty() )

  0009d	8b 4d 10	 mov	 ecx, DWORD PTR _szNewBallImage$[ebp]
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000a6	84 c0		 test	 al, al
  000a8	75 2f		 jne	 SHORT $LN7@SetBallAni

; 996  : 	{
; 997  : 		SAFEDELETE( m_pRedBall );

  000aa	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  000b0	3b cb		 cmp	 ecx, ebx
  000b2	74 0d		 je	 SHORT $LN6@SetBallAni
  000b4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b6	6a 01		 push	 1
  000b8	ff 50 40	 call	 DWORD PTR [eax+64]
  000bb	89 9e 80 01 00
	00		 mov	 DWORD PTR [esi+384], ebx
$LN6@SetBallAni:

; 998  : 		m_pRedBall =  g_UIImageSetMgr.CreateImageByFullName( szNewBallImage );

  000c1	53		 push	 ebx
  000c2	ff 75 10	 push	 DWORD PTR _szNewBallImage$[ebp]
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  000cb	8b c8		 mov	 ecx, eax
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z
  000d3	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax
$LN7@SetBallAni:

; 999  : 	}
; 1000 : 
; 1001 : 	m_BallAniState = BAS_POP;

  000d9	c7 86 c4 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+452], 1

; 1002 : 	m_dwBallAniCheckTime = FRAMEGETTIME() + 200;

  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000e9	8b c8		 mov	 ecx, eax
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 1003 : 	m_iLastGetNumber = iNumber;
; 1004 : 	m_vTargetPos = D3DXVECTOR2( 0.0f, 0.0f );

  000f1	0f 57 c0	 xorps	 xmm0, xmm0
  000f4	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  000f9	89 86 c8 01 00
	00		 mov	 DWORD PTR [esi+456], eax
  000ff	8b 45 08	 mov	 eax, DWORD PTR _iNumber$[ebp]
  00102	89 86 c0 01 00
	00		 mov	 DWORD PTR [esi+448], eax
  00108	f3 0f 11 45 f4	 movss	 DWORD PTR $T513039[ebp], xmm0
  0010d	8b 45 f4	 mov	 eax, DWORD PTR $T513039[ebp]
  00110	f3 0f 11 45 f8	 movss	 DWORD PTR $T513039[ebp+4], xmm0
  00115	89 86 2c 02 00
	00		 mov	 DWORD PTR [esi+556], eax
  0011b	8b 45 f8	 mov	 eax, DWORD PTR $T513039[ebp+4]

; 1005 : 	m_vBallPos = m_vCurPos = D3DXVECTOR2( GetDerivedPosX() + 111, GetDerivedPosY() + 84 );

  0011e	8b ce		 mov	 ecx, esi
  00120	89 86 30 02 00
	00		 mov	 DWORD PTR [esi+560], eax
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ
  0012c	83 c0 6f	 add	 eax, 111		; 0000006fH
  0012f	0f 57 c0	 xorps	 xmm0, xmm0
  00132	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00136	8b ce		 mov	 ecx, esi
  00138	f3 0f 11 45 f4	 movss	 DWORD PTR $T513040[ebp], xmm0
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  00143	83 c0 54	 add	 eax, 84			; 00000054H

; 1006 : 
; 1007 : 	BingoWnd *pWnd = dynamic_cast<BingoWnd*>( GetParent() );

  00146	53		 push	 ebx
  00147	0f 57 c0	 xorps	 xmm0, xmm0
  0014a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0014e	8b 45 f4	 mov	 eax, DWORD PTR $T513040[ebp]
  00151	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoWnd@@@8
  00156	f3 0f 11 45 f8	 movss	 DWORD PTR $T513040[ebp+4], xmm0
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR $T513040[ebp+4]
  0015e	57		 push	 edi
  0015f	89 8e 28 02 00
	00		 mov	 DWORD PTR [esi+552], ecx
  00165	89 8e 20 02 00
	00		 mov	 DWORD PTR [esi+544], ecx
  0016b	53		 push	 ebx
  0016c	8b ce		 mov	 ecx, esi
  0016e	89 86 24 02 00
	00		 mov	 DWORD PTR [esi+548], eax
  00174	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ___RTDynamicCast
  00186	83 c4 14	 add	 esp, 20			; 00000014H
  00189	89 45 0c	 mov	 DWORD PTR _pWnd$[ebp], eax

; 1008 : 	if( pWnd )

  0018c	3b c3		 cmp	 eax, ebx
  0018e	74 74		 je	 SHORT $LN33@SetBallAni

; 1009 : 	{
; 1010 : 		for( int i=BingoWnd::ID_NUMBER_BTN_1; i<BingoWnd::ID_NUMBER_BTN_25+1; ++i)

  00190	c7 45 10 65 00
	00 00		 mov	 DWORD PTR _i$509231[ebp], 101 ; 00000065H
$LL32@SetBallAni:

; 1011 : 		{
; 1012 : 			NumberButton *pBtn = dynamic_cast<NumberButton*>( pWnd->FindChildWnd(i) );

  00197	8b 4d 0c	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  0019a	53		 push	 ebx
  0019b	68 00 00 00 00	 push	 OFFSET ??_R0?AVNumberButton@@@8
  001a0	57		 push	 edi
  001a1	53		 push	 ebx
  001a2	ff 75 10	 push	 DWORD PTR _i$509231[ebp]
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ___RTDynamicCast
  001b1	83 c4 14	 add	 esp, 20			; 00000014H
  001b4	89 45 f8	 mov	 DWORD PTR _pBtn$509235[ebp], eax

; 1013 : 			if( pBtn && pBtn->GetNumber() == iNumber )

  001b7	3b c3		 cmp	 eax, ebx
  001b9	74 40		 je	 SHORT $LN3@SetBallAni
  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _iNumber$[ebp]
  001be	39 88 28 02 00
	00		 cmp	 DWORD PTR [eax+552], ecx
  001c4	75 35		 jne	 SHORT $LN3@SetBallAni

; 1014 : 			{
; 1015 : 				m_vTargetPos.x = pBtn->GetDerivedPosX() + 26;

  001c6	8b c8		 mov	 ecx, eax
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 1016 : 				m_vTargetPos.y = pBtn->GetDerivedPosY() + 26;

  001ce	8b 4d f8	 mov	 ecx, DWORD PTR _pBtn$509235[ebp]
  001d1	83 c0 1a	 add	 eax, 26			; 0000001aH
  001d4	0f 57 c0	 xorps	 xmm0, xmm0
  001d7	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001db	f3 0f 11 86 2c
	02 00 00	 movss	 DWORD PTR [esi+556], xmm0
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  001e9	83 c0 1a	 add	 eax, 26			; 0000001aH
  001ec	0f 57 c0	 xorps	 xmm0, xmm0
  001ef	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001f3	f3 0f 11 86 30
	02 00 00	 movss	 DWORD PTR [esi+560], xmm0
$LN3@SetBallAni:

; 1009 : 	{
; 1010 : 		for( int i=BingoWnd::ID_NUMBER_BTN_1; i<BingoWnd::ID_NUMBER_BTN_25+1; ++i)

  001fb	ff 45 10	 inc	 DWORD PTR _i$509231[ebp]
  001fe	83 7d 10 7e	 cmp	 DWORD PTR _i$509231[ebp], 126 ; 0000007eH
  00202	7c 93		 jl	 SHORT $LL32@SetBallAni
$LN33@SetBallAni:
  00204	5f		 pop	 edi
$LN2@SetBallAni:
  00205	5e		 pop	 esi
  00206	5b		 pop	 ebx

; 1017 : 			}
; 1018 : 		}
; 1019 : 	}
; 1020 : }

  00207	c9		 leave
  00208	c2 0c 00	 ret	 12			; 0000000cH
?SetBallAni@BingoRightWnd@@QAEXHPAVioBingo@@ABVioHashString@@@Z ENDP ; BingoRightWnd::SetBallAni
_TEXT	ENDS
PUBLIC	?CalcLinear@BingoRightWnd@@IAE?AUD3DXVECTOR2@@U2@0M@Z ; BingoRightWnd::CalcLinear
; Function compile flags: /Ogsp
;	COMDAT ?CalcLinear@BingoRightWnd@@IAE?AUD3DXVECTOR2@@U2@0M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_vPos0$ = 12						; size = 8
_vPos1$ = 20						; size = 8
_t$ = 28						; size = 4
?CalcLinear@BingoRightWnd@@IAE?AUD3DXVECTOR2@@U2@0M@Z PROC ; BingoRightWnd::CalcLinear, COMDAT
; _this$ = ecx

; 1072 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1073 : 	return vPos0 + ( vPos1 - vPos0 ) * t;

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _vPos1$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _vPos0$[ebp]
  0000d	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _vPos0$[ebp+4]
  00012	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00015	0f 5a c0	 cvtps2pd xmm0, xmm0
  00018	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001b	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001f	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _vPos1$[ebp+4]
  00024	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00028	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002b	0f 5a d2	 cvtps2pd xmm2, xmm2
  0002e	f2 0f 5c ca	 subsd	 xmm1, xmm2
  00032	f3 0f 10 55 1c	 movss	 xmm2, DWORD PTR _t$[ebp]
  00037	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0003b	0f 5a d2	 cvtps2pd xmm2, xmm2
  0003e	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00042	f3 0f 10 55 1c	 movss	 xmm2, DWORD PTR _t$[ebp]
  00047	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0004b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0004f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00053	0f 5a d2	 cvtps2pd xmm2, xmm2
  00056	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0005a	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _vPos0$[ebp]
  0005f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00063	0f 5a d2	 cvtps2pd xmm2, xmm2
  00066	f2 0f 58 c2	 addsd	 xmm0, xmm2
  0006a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0006e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00072	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  0007d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _vPos0$[ebp+4]
  00082	0f 5a c9	 cvtps2pd xmm1, xmm1
  00085	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00089	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0008d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1074 : }

  00092	5d		 pop	 ebp
  00093	c2 18 00	 ret	 24			; 00000018H
?CalcLinear@BingoRightWnd@@IAE?AUD3DXVECTOR2@@U2@0M@Z ENDP ; BingoRightWnd::CalcLinear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GBingoHelpButton@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBingoHelpButton@@UAEPAXI@Z PROC			; BingoHelpButton::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1BingoHelpButton@@UAE@XZ ; BingoHelpButton::~BingoHelpButton
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GBingoHelpButton@@UAEPAXI@Z ENDP			; BingoHelpButton::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEAAUBallAfterImage@BingoRightWnd@@XZ ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEAAUBallAfterImage@BingoRightWnd@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEAAUBallAfterImage@BingoRightWnd@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBEAAUBallAfterImage@BingoRightWnd@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator*
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z PROC ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z ENDP ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@V?$allocator@UBallAfterImage@BingoRightWnd@@@1@@Z ; std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@V?$allocator@UBallAfterImage@BingoRightWnd@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@V?$allocator@UBallAfterImage@BingoRightWnd@@@1@@Z PROC ; std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@V?$allocator@UBallAfterImage@BingoRightWnd@@@1@@Z ENDP ; std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE@PAUBallAfterImage@BingoRightWnd@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 14	 add	 DWORD PTR [eax], 20	; 00000014H

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator==
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z ; std::allocator<ioUIRenderImage *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z PROC ; std::allocator<ioUIRenderImage *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ; std::_Allocate<ioUIRenderImage *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z ENDP ; std::allocator<ioUIRenderImage *>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBEIXZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEII@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEII@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 14		 push	 20			; 00000014H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba cc cc cc 0c	 mov	 edx, 214748364		; 0cccccccH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEII@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEPAUBallAfterImage@BingoRightWnd@@I@Z ; std::allocator<BingoRightWnd::BallAfterImage>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEPAUBallAfterImage@BingoRightWnd@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEPAUBallAfterImage@BingoRightWnd@@I@Z PROC ; std::allocator<BingoRightWnd::BallAfterImage>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@IPAU12@@Z ; std::_Allocate<BingoRightWnd::BallAfterImage>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEPAUBallAfterImage@BingoRightWnd@@I@Z ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z	; operator==<14>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z PROC	; operator==<14>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 64 01 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 4d 01 00
	00		 je	 $LN95@operator
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 36 01 00
	00		 je	 $LN94@operator
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 1e 01 00
	00		 je	 $LN93@operator
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 07 01 00
	00		 je	 $LN92@operator
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 f0 00 00
	00		 je	 $LN91@operator
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 da 00 00
	00		 je	 $LN90@operator
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 c4 00 00
	00		 je	 $LN89@operator
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	0f 84 ad 00 00
	00		 je	 $LN88@operator
  000aa	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ad	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000b0	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b3	84 d2		 test	 dl, dl
  000b5	0f 84 96 00 00
	00		 je	 $LN87@operator
  000bb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000be	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000c1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c4	84 d2		 test	 dl, dl
  000c6	0f 84 80 00 00
	00		 je	 $LN86@operator
  000cc	32 d1		 xor	 dl, cl
  000ce	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000d1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d4	84 d2		 test	 dl, dl
  000d6	74 6e		 je	 SHORT $LN85@operator
  000d8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000db	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000de	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e1	84 d2		 test	 dl, dl
  000e3	74 5b		 je	 SHORT $LN84@operator
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ec	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000ef	0f 84 95 00 00
	00		 je	 $LN1@operator
  000f5	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f8	84 d2		 test	 dl, dl
  000fa	74 3f		 je	 SHORT $LN82@operator
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  00101	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00104	84 d2		 test	 dl, dl
  00106	74 2d		 je	 SHORT $LN81@operator
  00108	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0010b	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010e	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00111	84 d2		 test	 dl, dl
  00113	74 1a		 je	 SHORT $LN80@operator
  00115	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00118	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011b	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  0011e	84 c0		 test	 al, al
  00120	74 07		 je	 SHORT $LN79@operator
  00122	34 ec		 xor	 al, -20			; ffffffecH
  00124	88 45 f9	 mov	 BYTE PTR __t$[ebp+17], al
  00127	eb 61		 jmp	 SHORT $LN1@operator
$LN79@operator:
  00129	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+17], -20 ; ffffffecH
  0012d	eb 5b		 jmp	 SHORT $LN1@operator
$LN80@operator:
  0012f	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00133	eb 55		 jmp	 SHORT $LN1@operator
$LN81@operator:
  00135	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00139	eb 4f		 jmp	 SHORT $LN1@operator
$LN82@operator:
  0013b	88 4d f6	 mov	 BYTE PTR __t$[ebp+14], cl
  0013e	eb 4a		 jmp	 SHORT $LN1@operator
$LN84@operator:
  00140	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00144	eb 44		 jmp	 SHORT $LN1@operator
$LN85@operator:
  00146	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0014a	eb 3e		 jmp	 SHORT $LN1@operator
$LN86@operator:
  0014c	88 4d f2	 mov	 BYTE PTR __t$[ebp+10], cl
  0014f	eb 39		 jmp	 SHORT $LN1@operator
$LN87@operator:
  00151	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00155	eb 33		 jmp	 SHORT $LN1@operator
$LN88@operator:
  00157	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0015b	eb 2d		 jmp	 SHORT $LN1@operator
$LN89@operator:
  0015d	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00161	eb 27		 jmp	 SHORT $LN1@operator
$LN90@operator:
  00163	88 4d ee	 mov	 BYTE PTR __t$[ebp+6], cl
  00166	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  00168	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0016c	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  0016e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00172	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  00174	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00178	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  0017a	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0017e	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00180	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00184	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  00186	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  0018a	6a 03		 push	 3
  0018c	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  0018f	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+13], 0
  00193	5a		 pop	 edx
$LL104@operator:
  00194	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0019a	83 c0 04	 add	 eax, 4
  0019d	4a		 dec	 edx
  0019e	75 f4		 jne	 SHORT $LL104@operator
  001a0	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  001a4	8b cf		 mov	 ecx, edi
  001a6	8d 75 e8	 lea	 esi, DWORD PTR __t$[ebp]
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  001af	8a 08		 mov	 cl, BYTE PTR [eax]
  001b1	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001b3	75 1a		 jne	 SHORT $LN112@operator
  001b5	84 c9		 test	 cl, cl
  001b7	74 12		 je	 SHORT $LN113@operator
  001b9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001bc	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001bf	75 0e		 jne	 SHORT $LN112@operator
  001c1	83 c0 02	 add	 eax, 2
  001c4	83 c6 02	 add	 esi, 2
  001c7	84 c9		 test	 cl, cl
  001c9	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  001cb	33 c0		 xor	 eax, eax
  001cd	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  001cf	1b c0		 sbb	 eax, eax
  001d1	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  001d4	33 c9		 xor	 ecx, ecx
  001d6	85 c0		 test	 eax, eax
  001d8	0f 94 c0	 sete	 al

; 148  : }

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	5f		 pop	 edi
  001df	33 cd		 xor	 ecx, ebp
  001e1	5e		 pop	 esi
  001e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e7	c9		 leave
  001e8	c3		 ret	 0
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z ENDP	; operator==<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z	; operator==<10>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z PROC	; operator==<10>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 0d 01 00
	00		 je	 $LN96@operator@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 f6 00 00
	00		 je	 $LN95@operator@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 df 00 00
	00		 je	 $LN94@operator@2
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 c8 00 00
	00		 je	 $LN93@operator@2
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 b1 00 00
	00		 je	 $LN92@operator@2
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 9a 00 00
	00		 je	 $LN91@operator@2
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 83 00 00
	00		 je	 $LN90@operator@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	74 70		 je	 SHORT $LN89@operator@2
  00093	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00096	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00099	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0009c	84 d2		 test	 dl, dl
  0009e	74 5d		 je	 SHORT $LN88@operator@2
  000a0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a3	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	0f 84 81 00 00
	00		 je	 $LN1@operator@2
  000b0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b3	84 d2		 test	 dl, dl
  000b5	74 40		 je	 SHORT $LN86@operator@2
  000b7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ba	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000bd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c0	84 d2		 test	 dl, dl
  000c2	74 2d		 je	 SHORT $LN85@operator@2
  000c4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c7	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ca	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000cd	84 d2		 test	 dl, dl
  000cf	74 1a		 je	 SHORT $LN84@operator@2
  000d1	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000da	84 c0		 test	 al, al
  000dc	74 07		 je	 SHORT $LN83@operator@2
  000de	34 ec		 xor	 al, -20			; ffffffecH
  000e0	88 45 f9	 mov	 BYTE PTR __t$[ebp+13], al
  000e3	eb 4c		 jmp	 SHORT $LN1@operator@2
$LN83@operator@2:
  000e5	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  000e9	eb 46		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  000eb	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000ef	eb 40		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  000f1	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000f5	eb 3a		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  000f7	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000fb	eb 34		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  000fd	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00101	eb 2e		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  00103	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00107	eb 28		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00109	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0010d	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  0010f	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00113	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  00115	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00119	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  0011b	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0011f	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  00121	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00125	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  00127	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0012b	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  0012d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  00131	6a 02		 push	 2
  00133	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00136	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+9], 0
  0013a	5a		 pop	 edx
$LL104@operator@2:
  0013b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00141	83 c0 04	 add	 eax, 4
  00144	4a		 dec	 edx
  00145	75 f4		 jne	 SHORT $LL104@operator@2
  00147	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0014b	56		 push	 esi
  0014c	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00155	8a 08		 mov	 cl, BYTE PTR [eax]
  00157	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00159	75 1a		 jne	 SHORT $LN112@operator@2
  0015b	84 c9		 test	 cl, cl
  0015d	74 12		 je	 SHORT $LN113@operator@2
  0015f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00162	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00165	75 0e		 jne	 SHORT $LN112@operator@2
  00167	83 c0 02	 add	 eax, 2
  0016a	83 c6 02	 add	 esi, 2
  0016d	84 c9		 test	 cl, cl
  0016f	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  00171	33 c0		 xor	 eax, eax
  00173	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  00175	1b c0		 sbb	 eax, eax
  00177	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  0017a	33 c9		 xor	 ecx, ecx
  0017c	85 c0		 test	 eax, eax
  0017e	0f 94 c0	 sete	 al

; 148  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	c9		 leave
  0018d	c3		 ret	 0
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z ENDP	; operator==<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z	; operator==<13>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z PROC	; operator==<13>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 4d 01 00
	00		 je	 $LN96@operator@3
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 36 01 00
	00		 je	 $LN95@operator@3
  00033	b1 ec		 mov	 cl, -20			; ffffffecH
  00035	32 d1		 xor	 dl, cl
  00037	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  0003a	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003d	84 d2		 test	 dl, dl
  0003f	0f 84 1e 01 00
	00		 je	 $LN94@operator@3
  00045	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00048	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 07 01 00
	00		 je	 $LN93@operator@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 f0 00 00
	00		 je	 $LN92@operator@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 da 00 00
	00		 je	 $LN91@operator@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 c4 00 00
	00		 je	 $LN90@operator@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 ad 00 00
	00		 je	 $LN89@operator@3
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	0f 84 96 00 00
	00		 je	 $LN88@operator@3
  000aa	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ad	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000b0	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b3	84 d2		 test	 dl, dl
  000b5	0f 84 80 00 00
	00		 je	 $LN87@operator@3
  000bb	32 d1		 xor	 dl, cl
  000bd	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	74 6e		 je	 SHORT $LN86@operator@3
  000c7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ca	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000cd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d0	84 d2		 test	 dl, dl
  000d2	74 5b		 je	 SHORT $LN85@operator@3
  000d4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d7	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000db	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000de	0f 84 8f 00 00
	00		 je	 $LN1@operator@3
  000e4	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e7	84 d2		 test	 dl, dl
  000e9	74 3f		 je	 SHORT $LN83@operator@3
  000eb	32 d1		 xor	 dl, cl
  000ed	88 55 f5	 mov	 BYTE PTR __t$[ebp+13], dl
  000f0	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f3	84 d2		 test	 dl, dl
  000f5	74 2d		 je	 SHORT $LN82@operator@3
  000f7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000fa	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  000fd	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00100	84 d2		 test	 dl, dl
  00102	74 1a		 je	 SHORT $LN81@operator@3
  00104	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00107	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0010a	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010d	84 c0		 test	 al, al
  0010f	74 07		 je	 SHORT $LN80@operator@3
  00111	34 ed		 xor	 al, -19			; ffffffedH
  00113	88 45 f8	 mov	 BYTE PTR __t$[ebp+16], al
  00116	eb 5b		 jmp	 SHORT $LN1@operator@3
$LN80@operator@3:
  00118	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  0011c	eb 55		 jmp	 SHORT $LN1@operator@3
$LN81@operator@3:
  0011e	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00122	eb 4f		 jmp	 SHORT $LN1@operator@3
$LN82@operator@3:
  00124	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  00128	eb 49		 jmp	 SHORT $LN1@operator@3
$LN83@operator@3:
  0012a	88 4d f5	 mov	 BYTE PTR __t$[ebp+13], cl
  0012d	eb 44		 jmp	 SHORT $LN1@operator@3
$LN85@operator@3:
  0012f	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  00133	eb 3e		 jmp	 SHORT $LN1@operator@3
$LN86@operator@3:
  00135	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  00139	eb 38		 jmp	 SHORT $LN1@operator@3
$LN87@operator@3:
  0013b	88 4d f1	 mov	 BYTE PTR __t$[ebp+9], cl
  0013e	eb 33		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  00140	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00144	eb 2d		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  00146	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0014a	eb 27		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  0014c	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00150	eb 21		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  00152	88 4d ed	 mov	 BYTE PTR __t$[ebp+5], cl
  00155	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  00157	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  0015b	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  0015d	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00161	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  00163	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00167	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  00169	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0016d	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  0016f	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  00173	6a 03		 push	 3
  00175	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  00178	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+12], 0
  0017c	5a		 pop	 edx
$LL104@operator@3:
  0017d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00183	83 c0 04	 add	 eax, 4
  00186	4a		 dec	 edx
  00187	75 f4		 jne	 SHORT $LL104@operator@3
  00189	8b cf		 mov	 ecx, edi
  0018b	8d 75 e8	 lea	 esi, DWORD PTR __t$[ebp]
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  00194	8a 08		 mov	 cl, BYTE PTR [eax]
  00196	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00198	75 1a		 jne	 SHORT $LN112@operator@3
  0019a	84 c9		 test	 cl, cl
  0019c	74 12		 je	 SHORT $LN113@operator@3
  0019e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a1	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a4	75 0e		 jne	 SHORT $LN112@operator@3
  001a6	83 c0 02	 add	 eax, 2
  001a9	83 c6 02	 add	 esi, 2
  001ac	84 c9		 test	 cl, cl
  001ae	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  001b0	33 c0		 xor	 eax, eax
  001b2	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  001b4	1b c0		 sbb	 eax, eax
  001b6	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  001b9	33 c9		 xor	 ecx, ecx
  001bb	85 c0		 test	 eax, eax
  001bd	0f 94 c0	 sete	 al

; 148  : }

  001c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c3	5f		 pop	 edi
  001c4	33 cd		 xor	 ecx, ebp
  001c6	5e		 pop	 esi
  001c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cc	c9		 leave
  001cd	c3		 ret	 0
??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z ENDP	; operator==<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z	; operator==<11>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z PROC	; operator==<11>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 24 01 00
	00		 je	 $LN96@operator@4
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 0d 01 00
	00		 je	 $LN95@operator@4
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 f6 00 00
	00		 je	 $LN94@operator@4
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 df 00 00
	00		 je	 $LN93@operator@4
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	0f 84 c8 00 00
	00		 je	 $LN92@operator@4
  00066	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00069	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006c	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006f	84 d2		 test	 dl, dl
  00071	0f 84 b1 00 00
	00		 je	 $LN91@operator@4
  00077	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007a	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 9a 00 00
	00		 je	 $LN90@operator@4
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 83 00 00
	00		 je	 $LN89@operator@4
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 70		 je	 SHORT $LN88@operator@4
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5d		 je	 SHORT $LN87@operator@4
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000ba	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000bd	0f 84 87 00 00
	00		 je	 $LN1@operator@4
  000c3	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c6	84 d2		 test	 dl, dl
  000c8	74 40		 je	 SHORT $LN85@operator@4
  000ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cd	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000d0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d3	84 d2		 test	 dl, dl
  000d5	74 2d		 je	 SHORT $LN84@operator@4
  000d7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000da	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dd	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e0	84 d2		 test	 dl, dl
  000e2	74 1a		 je	 SHORT $LN83@operator@4
  000e4	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ea	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000ed	84 c0		 test	 al, al
  000ef	74 07		 je	 SHORT $LN82@operator@4
  000f1	34 eb		 xor	 al, -21			; ffffffebH
  000f3	88 45 fa	 mov	 BYTE PTR __t$[ebp+14], al
  000f6	eb 52		 jmp	 SHORT $LN1@operator@4
$LN82@operator@4:
  000f8	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  000fc	eb 4c		 jmp	 SHORT $LN1@operator@4
$LN83@operator@4:
  000fe	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00102	eb 46		 jmp	 SHORT $LN1@operator@4
$LN84@operator@4:
  00104	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00108	eb 40		 jmp	 SHORT $LN1@operator@4
$LN85@operator@4:
  0010a	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0010e	eb 3a		 jmp	 SHORT $LN1@operator@4
$LN87@operator@4:
  00110	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00114	eb 34		 jmp	 SHORT $LN1@operator@4
$LN88@operator@4:
  00116	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0011a	eb 2e		 jmp	 SHORT $LN1@operator@4
$LN89@operator@4:
  0011c	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00120	eb 28		 jmp	 SHORT $LN1@operator@4
$LN90@operator@4:
  00122	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00126	eb 22		 jmp	 SHORT $LN1@operator@4
$LN91@operator@4:
  00128	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0012c	eb 1c		 jmp	 SHORT $LN1@operator@4
$LN92@operator@4:
  0012e	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00132	eb 16		 jmp	 SHORT $LN1@operator@4
$LN93@operator@4:
  00134	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00138	eb 10		 jmp	 SHORT $LN1@operator@4
$LN94@operator@4:
  0013a	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0013e	eb 0a		 jmp	 SHORT $LN1@operator@4
$LN95@operator@4:
  00140	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00144	eb 04		 jmp	 SHORT $LN1@operator@4
$LN96@operator@4:
  00146	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@4:
  0014a	6a 02		 push	 2
  0014c	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0014f	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+10], 0
  00153	5a		 pop	 edx
$LL104@operator@4:
  00154	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0015a	83 c0 04	 add	 eax, 4
  0015d	4a		 dec	 edx
  0015e	75 f4		 jne	 SHORT $LL104@operator@4
  00160	6a 08		 push	 8
  00162	58		 pop	 eax
$LL101@operator@4:
  00163	8b c8		 mov	 ecx, eax
  00165	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0016b	79 05		 jns	 SHORT $LN115@operator@4
  0016d	49		 dec	 ecx
  0016e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00171	41		 inc	 ecx
$LN115@operator@4:
  00172	b2 ed		 mov	 dl, -19			; ffffffedH
  00174	2a d1		 sub	 dl, cl
  00176	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  0017a	40		 inc	 eax
  0017b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017e	7c e3		 jl	 SHORT $LL101@operator@4
  00180	8b cf		 mov	 ecx, edi
  00182	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@4:
  0018b	8a 08		 mov	 cl, BYTE PTR [eax]
  0018d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0018f	75 1a		 jne	 SHORT $LN112@operator@4
  00191	84 c9		 test	 cl, cl
  00193	74 12		 je	 SHORT $LN113@operator@4
  00195	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00198	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0019b	75 0e		 jne	 SHORT $LN112@operator@4
  0019d	83 c0 02	 add	 eax, 2
  001a0	83 c6 02	 add	 esi, 2
  001a3	84 c9		 test	 cl, cl
  001a5	75 e4		 jne	 SHORT $LL111@operator@4
$LN113@operator@4:
  001a7	33 c0		 xor	 eax, eax
  001a9	eb 05		 jmp	 SHORT $LN114@operator@4
$LN112@operator@4:
  001ab	1b c0		 sbb	 eax, eax
  001ad	83 d8 ff	 sbb	 eax, -1
$LN114@operator@4:
  001b0	33 c9		 xor	 ecx, ecx
  001b2	85 c0		 test	 eax, eax
  001b4	0f 94 c0	 sete	 al

; 148  : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	5f		 pop	 edi
  001bb	33 cd		 xor	 ecx, ebp
  001bd	5e		 pop	 esi
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	c9		 leave
  001c4	c3		 ret	 0
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z ENDP	; operator==<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z	; operator==<8>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z PROC	; operator==<8>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 d7 00 00
	00		 je	 $LN96@operator@5
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 c0 00 00
	00		 je	 $LN95@operator@5
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 a9 00 00
	00		 je	 $LN94@operator@5
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 92 00 00
	00		 je	 $LN93@operator@5
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	74 7f		 je	 SHORT $LN92@operator@5
  00062	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00065	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00068	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006b	84 d2		 test	 dl, dl
  0006d	74 6c		 je	 SHORT $LN91@operator@5
  0006f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00078	84 d2		 test	 dl, dl
  0007a	74 59		 je	 SHORT $LN90@operator@5
  0007c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007f	80 78 07 00	 cmp	 BYTE PTR [eax+7], 0
  00083	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  00086	74 75		 je	 SHORT $LN1@operator@5
  00088	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0008b	84 d2		 test	 dl, dl
  0008d	74 40		 je	 SHORT $LN88@operator@5
  0008f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00092	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00095	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00098	84 d2		 test	 dl, dl
  0009a	74 2d		 je	 SHORT $LN87@operator@5
  0009c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009f	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a2	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a5	84 d2		 test	 dl, dl
  000a7	74 1a		 je	 SHORT $LN86@operator@5
  000a9	8a 40 0b	 mov	 al, BYTE PTR [eax+11]
  000ac	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000af	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b2	84 c0		 test	 al, al
  000b4	74 07		 je	 SHORT $LN85@operator@5
  000b6	34 ea		 xor	 al, -22			; ffffffeaH
  000b8	88 45 fb	 mov	 BYTE PTR __t$[ebp+11], al
  000bb	eb 40		 jmp	 SHORT $LN1@operator@5
$LN85@operator@5:
  000bd	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000c1	eb 3a		 jmp	 SHORT $LN1@operator@5
$LN86@operator@5:
  000c3	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000c7	eb 34		 jmp	 SHORT $LN1@operator@5
$LN87@operator@5:
  000c9	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000cd	eb 2e		 jmp	 SHORT $LN1@operator@5
$LN88@operator@5:
  000cf	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000d3	eb 28		 jmp	 SHORT $LN1@operator@5
$LN90@operator@5:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000d9	eb 22		 jmp	 SHORT $LN1@operator@5
$LN91@operator@5:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000df	eb 1c		 jmp	 SHORT $LN1@operator@5
$LN92@operator@5:
  000e1	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000e5	eb 16		 jmp	 SHORT $LN1@operator@5
$LN93@operator@5:
  000e7	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000eb	eb 10		 jmp	 SHORT $LN1@operator@5
$LN94@operator@5:
  000ed	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000f1	eb 0a		 jmp	 SHORT $LN1@operator@5
$LN95@operator@5:
  000f3	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000f7	eb 04		 jmp	 SHORT $LN1@operator@5
$LN96@operator@5:
  000f9	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@5:
  000fd	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  00104	6a 04		 push	 4
  00106	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+7], 0
  0010a	58		 pop	 eax
$LL101@operator@5:
  0010b	8b c8		 mov	 ecx, eax
  0010d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00113	79 05		 jns	 SHORT $LN115@operator@5
  00115	49		 dec	 ecx
  00116	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00119	41		 inc	 ecx
$LN115@operator@5:
  0011a	b2 ed		 mov	 dl, -19			; ffffffedH
  0011c	2a d1		 sub	 dl, cl
  0011e	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00122	40		 inc	 eax
  00123	83 f8 07	 cmp	 eax, 7
  00126	7c e3		 jl	 SHORT $LL101@operator@5
  00128	8b cf		 mov	 ecx, edi
  0012a	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@5:
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00137	75 1a		 jne	 SHORT $LN112@operator@5
  00139	84 c9		 test	 cl, cl
  0013b	74 12		 je	 SHORT $LN113@operator@5
  0013d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00140	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00143	75 0e		 jne	 SHORT $LN112@operator@5
  00145	83 c0 02	 add	 eax, 2
  00148	83 c6 02	 add	 esi, 2
  0014b	84 c9		 test	 cl, cl
  0014d	75 e4		 jne	 SHORT $LL111@operator@5
$LN113@operator@5:
  0014f	33 c0		 xor	 eax, eax
  00151	eb 05		 jmp	 SHORT $LN114@operator@5
$LN112@operator@5:
  00153	1b c0		 sbb	 eax, eax
  00155	83 d8 ff	 sbb	 eax, -1
$LN114@operator@5:
  00158	33 c9		 xor	 ecx, ecx
  0015a	85 c0		 test	 eax, eax
  0015c	0f 94 c0	 sete	 al

; 148  : }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c3		 ret	 0
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z ENDP	; operator==<8>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z	; operator==<7>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z PROC	; operator==<7>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 c0 00 00
	00		 je	 $LN96@operator@6
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 a9 00 00
	00		 je	 $LN95@operator@6
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 92 00 00
	00		 je	 $LN94@operator@6
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	74 7f		 je	 SHORT $LN93@operator@6
  00051	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00054	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00057	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005a	84 d2		 test	 dl, dl
  0005c	74 6c		 je	 SHORT $LN92@operator@6
  0005e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00061	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00064	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00067	84 d2		 test	 dl, dl
  00069	74 59		 je	 SHORT $LN91@operator@6
  0006b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006e	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	74 6f		 je	 SHORT $LN1@operator@6
  00077	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0007a	84 d2		 test	 dl, dl
  0007c	74 40		 je	 SHORT $LN89@operator@6
  0007e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00081	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  00084	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00087	84 d2		 test	 dl, dl
  00089	74 2d		 je	 SHORT $LN88@operator@6
  0008b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008e	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00091	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00094	84 d2		 test	 dl, dl
  00096	74 1a		 je	 SHORT $LN87@operator@6
  00098	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a1	84 c0		 test	 al, al
  000a3	74 07		 je	 SHORT $LN86@operator@6
  000a5	34 eb		 xor	 al, -21			; ffffffebH
  000a7	88 45 fa	 mov	 BYTE PTR __t$[ebp+10], al
  000aa	eb 3a		 jmp	 SHORT $LN1@operator@6
$LN86@operator@6:
  000ac	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000b0	eb 34		 jmp	 SHORT $LN1@operator@6
$LN87@operator@6:
  000b2	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000b6	eb 2e		 jmp	 SHORT $LN1@operator@6
$LN88@operator@6:
  000b8	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000bc	eb 28		 jmp	 SHORT $LN1@operator@6
$LN89@operator@6:
  000be	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c2	eb 22		 jmp	 SHORT $LN1@operator@6
$LN91@operator@6:
  000c4	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000c8	eb 1c		 jmp	 SHORT $LN1@operator@6
$LN92@operator@6:
  000ca	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000ce	eb 16		 jmp	 SHORT $LN1@operator@6
$LN93@operator@6:
  000d0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000d4	eb 10		 jmp	 SHORT $LN1@operator@6
$LN94@operator@6:
  000d6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000da	eb 0a		 jmp	 SHORT $LN1@operator@6
$LN95@operator@6:
  000dc	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000e0	eb 04		 jmp	 SHORT $LN1@operator@6
$LN96@operator@6:
  000e2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@6:
  000e6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000ed	6a 04		 push	 4
  000ef	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+6], 0
  000f3	58		 pop	 eax
$LL101@operator@6:
  000f4	8b c8		 mov	 ecx, eax
  000f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fc	79 05		 jns	 SHORT $LN115@operator@6
  000fe	49		 dec	 ecx
  000ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00102	41		 inc	 ecx
$LN115@operator@6:
  00103	b2 ed		 mov	 dl, -19			; ffffffedH
  00105	2a d1		 sub	 dl, cl
  00107	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  0010b	40		 inc	 eax
  0010c	83 f8 06	 cmp	 eax, 6
  0010f	7c e3		 jl	 SHORT $LL101@operator@6
  00111	8b cf		 mov	 ecx, edi
  00113	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@6:
  0011c	8a 08		 mov	 cl, BYTE PTR [eax]
  0011e	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00120	75 1a		 jne	 SHORT $LN112@operator@6
  00122	84 c9		 test	 cl, cl
  00124	74 12		 je	 SHORT $LN113@operator@6
  00126	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00129	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0012c	75 0e		 jne	 SHORT $LN112@operator@6
  0012e	83 c0 02	 add	 eax, 2
  00131	83 c6 02	 add	 esi, 2
  00134	84 c9		 test	 cl, cl
  00136	75 e4		 jne	 SHORT $LL111@operator@6
$LN113@operator@6:
  00138	33 c0		 xor	 eax, eax
  0013a	eb 05		 jmp	 SHORT $LN114@operator@6
$LN112@operator@6:
  0013c	1b c0		 sbb	 eax, eax
  0013e	83 d8 ff	 sbb	 eax, -1
$LN114@operator@6:
  00141	33 c9		 xor	 ecx, ecx
  00143	85 c0		 test	 eax, eax
  00145	0f 94 c0	 sete	 al

; 148  : }

  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	5f		 pop	 edi
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	c9		 leave
  00155	c3		 ret	 0
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z ENDP	; operator==<7>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z	; operator==<12>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z PROC	; operator==<12>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 32 01 00
	00		 je	 $LN96@operator@7
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 1b 01 00
	00		 je	 $LN95@operator@7
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 04 01 00
	00		 je	 $LN94@operator@7
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 ec 00 00
	00		 je	 $LN93@operator@7
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 d5 00 00
	00		 je	 $LN92@operator@7
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 be 00 00
	00		 je	 $LN91@operator@7
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 a8 00 00
	00		 je	 $LN90@operator@7
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 92 00 00
	00		 je	 $LN89@operator@7
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 7f		 je	 SHORT $LN88@operator@7
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 6c		 je	 SHORT $LN87@operator@7
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000b9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000bc	84 d2		 test	 dl, dl
  000be	74 5a		 je	 SHORT $LN86@operator@7
  000c0	32 d1		 xor	 dl, cl
  000c2	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c6	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000c9	0f 84 89 00 00
	00		 je	 $LN1@operator@7
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 3e		 je	 SHORT $LN84@operator@7
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 2b		 je	 SHORT $LN83@operator@7
  000e3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e6	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000e9	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ec	84 d2		 test	 dl, dl
  000ee	74 19		 je	 SHORT $LN82@operator@7
  000f0	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f3	32 d1		 xor	 dl, cl
  000f5	88 55 fa	 mov	 BYTE PTR __t$[ebp+14], dl
  000f8	84 c0		 test	 al, al
  000fa	74 07		 je	 SHORT $LN81@operator@7
  000fc	34 ea		 xor	 al, -22			; ffffffeaH
  000fe	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  00101	eb 55		 jmp	 SHORT $LN1@operator@7
$LN81@operator@7:
  00103	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00107	eb 4f		 jmp	 SHORT $LN1@operator@7
$LN82@operator@7:
  00109	88 4d fa	 mov	 BYTE PTR __t$[ebp+14], cl
  0010c	eb 4a		 jmp	 SHORT $LN1@operator@7
$LN83@operator@7:
  0010e	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00112	eb 44		 jmp	 SHORT $LN1@operator@7
$LN84@operator@7:
  00114	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00118	eb 3e		 jmp	 SHORT $LN1@operator@7
$LN86@operator@7:
  0011a	88 4d f6	 mov	 BYTE PTR __t$[ebp+10], cl
  0011d	eb 39		 jmp	 SHORT $LN1@operator@7
$LN87@operator@7:
  0011f	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00123	eb 33		 jmp	 SHORT $LN1@operator@7
$LN88@operator@7:
  00125	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00129	eb 2d		 jmp	 SHORT $LN1@operator@7
$LN89@operator@7:
  0012b	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0012f	eb 27		 jmp	 SHORT $LN1@operator@7
$LN90@operator@7:
  00131	88 4d f2	 mov	 BYTE PTR __t$[ebp+6], cl
  00134	eb 22		 jmp	 SHORT $LN1@operator@7
$LN91@operator@7:
  00136	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0013a	eb 1c		 jmp	 SHORT $LN1@operator@7
$LN92@operator@7:
  0013c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00140	eb 16		 jmp	 SHORT $LN1@operator@7
$LN93@operator@7:
  00142	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00146	eb 10		 jmp	 SHORT $LN1@operator@7
$LN94@operator@7:
  00148	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0014c	eb 0a		 jmp	 SHORT $LN1@operator@7
$LN95@operator@7:
  0014e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00152	eb 04		 jmp	 SHORT $LN1@operator@7
$LN96@operator@7:
  00154	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@7:
  00158	6a 02		 push	 2
  0015a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0015d	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+11], 0
  00161	5a		 pop	 edx
$LL104@operator@7:
  00162	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00168	83 c0 04	 add	 eax, 4
  0016b	4a		 dec	 edx
  0016c	75 f4		 jne	 SHORT $LL104@operator@7
  0016e	6a 08		 push	 8
  00170	58		 pop	 eax
$LL101@operator@7:
  00171	8b c8		 mov	 ecx, eax
  00173	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00179	79 05		 jns	 SHORT $LN115@operator@7
  0017b	49		 dec	 ecx
  0017c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017f	41		 inc	 ecx
$LN115@operator@7:
  00180	b2 ed		 mov	 dl, -19			; ffffffedH
  00182	2a d1		 sub	 dl, cl
  00184	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00188	40		 inc	 eax
  00189	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018c	7c e3		 jl	 SHORT $LL101@operator@7
  0018e	8b cf		 mov	 ecx, edi
  00190	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@7:
  00199	8a 08		 mov	 cl, BYTE PTR [eax]
  0019b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0019d	75 1a		 jne	 SHORT $LN112@operator@7
  0019f	84 c9		 test	 cl, cl
  001a1	74 12		 je	 SHORT $LN113@operator@7
  001a3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a9	75 0e		 jne	 SHORT $LN112@operator@7
  001ab	83 c0 02	 add	 eax, 2
  001ae	83 c6 02	 add	 esi, 2
  001b1	84 c9		 test	 cl, cl
  001b3	75 e4		 jne	 SHORT $LL111@operator@7
$LN113@operator@7:
  001b5	33 c0		 xor	 eax, eax
  001b7	eb 05		 jmp	 SHORT $LN114@operator@7
$LN112@operator@7:
  001b9	1b c0		 sbb	 eax, eax
  001bb	83 d8 ff	 sbb	 eax, -1
$LN114@operator@7:
  001be	33 c9		 xor	 ecx, ecx
  001c0	85 c0		 test	 eax, eax
  001c2	0f 94 c0	 sete	 al

; 148  : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	c9		 leave
  001d2	c3		 ret	 0
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z ENDP	; operator==<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetStringAttribute_e@$0O@@ioXMLElement@@QBEPBDAAY0O@$$CBD@Z ; ioXMLElement::GetStringAttribute_e<14>
EXTRN	__imp_?GetStringAttribute@ioXMLElement@@QBEPBDPBD@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioxmlelement.h
;	COMDAT ??$GetStringAttribute_e@$0O@@ioXMLElement@@QBEPBDAAY0O@$$CBD@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetStringAttribute_e@$0O@@ioXMLElement@@QBEPBDAAY0O@$$CBD@Z PROC ; ioXMLElement::GetStringAttribute_e<14>, COMDAT
; _this$ = ecx

; 107  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 108  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@GetStringA
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@GetStringA
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@GetStringA
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@GetStringA
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@GetStringA
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@GetStringA
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@GetStringA
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@GetStringA
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@GetStringA
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@GetStringA
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@GetStringA
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@GetStringA
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@GetStringA
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@GetStringA
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@GetStringA
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@GetStringA
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@GetStringA
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@GetStringA
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@GetStringA
$LN79@GetStringA:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@GetStringA
$LN80@GetStringA:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@GetStringA
$LN81@GetStringA:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@GetStringA
$LN82@GetStringA:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@GetStringA
$LN84@GetStringA:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@GetStringA
$LN85@GetStringA:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@GetStringA
$LN86@GetStringA:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@GetStringA
$LN87@GetStringA:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@GetStringA
$LN88@GetStringA:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@GetStringA
$LN89@GetStringA:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@GetStringA
$LN90@GetStringA:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@GetStringA
$LN91@GetStringA:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@GetStringA
$LN92@GetStringA:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@GetStringA
$LN93@GetStringA:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@GetStringA
$LN94@GetStringA:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@GetStringA
$LN95@GetStringA:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@GetStringA
$LN96@GetStringA:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetStringA:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@GetStringA:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@GetStringA
  0019e	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH

; 109  : 		return GetStringAttribute(_k);

  001a2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a5	50		 push	 eax
  001a6	8b ce		 mov	 ecx, esi
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetStringAttribute@ioXMLElement@@QBEPBDPBD@Z

; 110  : 	}

  001ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b1	33 cd		 xor	 ecx, ebp
  001b3	5e		 pop	 esi
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	c9		 leave
  001ba	c2 04 00	 ret	 4
??$GetStringAttribute_e@$0O@@ioXMLElement@@QBEPBDAAY0O@$$CBD@Z ENDP ; ioXMLElement::GetStringAttribute_e<14>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@AAU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@AAU23@@Z ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@AAU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@AAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@AAU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 05		 push	 5
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val@2:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@AAU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage &>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z
_TEXT	SEGMENT
__Cat$513550 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z PROC ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$513550[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z ENDP ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z ; std::allocator<ioUIRenderImage *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z PROC ; std::allocator<ioUIRenderImage *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@3:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z ENDP ; std::allocator<ioUIRenderImage *>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@ABU34@@Z ; std::allocator<BingoRightWnd::BallAfterImage>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@ABU34@@Z PROC ; std::allocator<BingoRightWnd::BallAfterImage>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN5@construct@4
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 05		 push	 5
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN5@construct@4:
  00015	5f		 pop	 edi

; 198  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@ABU34@@Z ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 1a		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 14	 add	 DWORD PTR __Dest$[ebp], 20 ; 00000014H
  00014	8b f0		 mov	 esi, eax
  00016	6a 05		 push	 5
  00018	83 c0 14	 add	 eax, 20			; 00000014H
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	75 ea		 jne	 SHORT $LL3@Move
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z PROC ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ENDP ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@@Z ; std::allocator<BingoRightWnd::BallAfterImage>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@@Z PROC ; std::allocator<BingoRightWnd::BallAfterImage>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@@Z ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@@Z ; std::allocator<ioUIRenderImage *>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@@Z PROC ; std::allocator<ioUIRenderImage *>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@@Z ENDP ; std::allocator<ioUIRenderImage *>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@$$QAU34@@Z ; std::allocator<BingoRightWnd::BallAfterImage>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@$$QAU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@$$QAU34@@Z PROC ; std::allocator<BingoRightWnd::BallAfterImage>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct@5
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 05		 push	 5
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct@5:
  00015	5f		 pop	 edi

; 203  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UBallAfterImage@BingoRightWnd@@@std@@QAEXPAUBallAfterImage@BingoRightWnd@@$$QAU34@@Z ENDP ; std::allocator<BingoRightWnd::BallAfterImage>::construct
_TEXT	ENDS
PUBLIC	_szType$GSCopy$
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddRenderImage@BingoRightWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ; BingoRightWnd::AddRenderImage
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
;	COMDAT ?AddRenderImage@BingoRightWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_szType$GSCopy$ = -352					; size = 4
_pImage$GSCopy$ = -348					; size = 4
_this$GSCopy$ = -344					; size = 4
__t$514008 = -340					; size = 13
__t$516271 = -320					; size = 13
__t$516008 = -300					; size = 12
__t$516146 = -284					; size = 12
__t$515896 = -268					; size = 12
__t$514383 = -252					; size = 10
__t$513805 = -236					; size = 14
__t$514271 = -216					; size = 11
__t$515146 = -200					; size = 12
__t$515771 = -184					; size = 12
__t$514883 = -168					; size = 10
__t$515646 = -152					; size = 12
__t$514134 = -136					; size = 10
__t$515521 = -120					; size = 12
__t$513883 = -104					; size = 10
__t$515396 = -88					; size = 12
__t$515271 = -72					; size = 12
__t$514508 = -56					; size = 11
__t$514633 = -40					; size = 8
__t$514758 = -28					; size = 8
__t$515008 = -16					; size = 7
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@BingoRightWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; BingoRightWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  00016	8b 55 08	 mov	 edx, DWORD PTR _szType$[ebp]
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi

; 61   : 	if( szType == "TextUnderLine" )

  0001c	6a 03		 push	 3
  0001e	89 8d a8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 160  : 	}
; 161  : 	else if( szType == "BallEffect10" )

  00024	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  0002a	89 95 a0 fe ff
	ff		 mov	 DWORD PTR _szType$GSCopy$[ebp], edx
  00030	c7 85 14 ff ff
	ff b9 89 93 9e	 mov	 DWORD PTR __t$513805[ebp], -1634498119 ; 9e9389b9H
  0003a	c7 85 18 ff ff
	ff b8 82 8f 8f	 mov	 DWORD PTR __t$513805[ebp+4], -1886420296 ; 8f8f82b8H
  00044	c7 85 1c ff ff
	ff 9f a0 82 84	 mov	 DWORD PTR __t$513805[ebp+8], -2071813985 ; 8482a09fH
  0004e	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR __t$513805[ebp]
  00054	33 db		 xor	 ebx, ebx
  00056	66 c7 85 20 ff
	ff ff 88 00	 mov	 WORD PTR __t$513805[ebp+12], 136 ; 00000088H
  0005f	59		 pop	 ecx
$LL211@AddRenderI:

; 61   : 	if( szType == "TextUnderLine" )

  00060	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00066	83 c0 04	 add	 eax, 4
  00069	49		 dec	 ecx
  0006a	75 f4		 jne	 SHORT $LL211@AddRenderI
  0006c	80 b5 20 ff ff
	ff ed		 xor	 BYTE PTR __t$513805[ebp+12], -19 ; ffffffedH
  00073	8b ca		 mov	 ecx, edx
  00075	8d b5 14 ff ff
	ff		 lea	 esi, DWORD PTR __t$513805[ebp]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00081	6a 02		 push	 2
  00083	5f		 pop	 edi
$LL2438@AddRenderI:
  00084	8a 08		 mov	 cl, BYTE PTR [eax]
  00086	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00088	75 18		 jne	 SHORT $LN2439@AddRenderI
  0008a	3a cb		 cmp	 cl, bl
  0008c	74 10		 je	 SHORT $LN2440@AddRenderI
  0008e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00091	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00094	75 0c		 jne	 SHORT $LN2439@AddRenderI
  00096	03 c7		 add	 eax, edi
  00098	03 f7		 add	 esi, edi
  0009a	3a cb		 cmp	 cl, bl
  0009c	75 e6		 jne	 SHORT $LL2438@AddRenderI
$LN2440@AddRenderI:
  0009e	33 c0		 xor	 eax, eax
  000a0	eb 05		 jmp	 SHORT $LN2441@AddRenderI
$LN2439@AddRenderI:
  000a2	1b c0		 sbb	 eax, eax
  000a4	83 d8 ff	 sbb	 eax, -1
$LN2441@AddRenderI:
  000a7	3b c3		 cmp	 eax, ebx
  000a9	75 3c		 jne	 SHORT $LN2418@AddRenderI

; 62   : 	{
; 63   : 		SAFEDELETE( m_pUnderLine );

  000ab	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  000b1	39 98 60 01 00
	00		 cmp	 DWORD PTR [eax+352], ebx
  000b7	74 1d		 je	 SHORT $LN62@AddRenderI
  000b9	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR [eax+352]
  000bf	3b cb		 cmp	 ecx, ebx
  000c1	74 0d		 je	 SHORT $LN66@AddRenderI
  000c3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c5	6a 01		 push	 1
  000c7	ff 50 40	 call	 DWORD PTR [eax+64]
  000ca	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN66@AddRenderI:
  000d0	89 98 60 01 00
	00		 mov	 DWORD PTR [eax+352], ebx
$LN62@AddRenderI:

; 64   : 		m_pUnderLine = pImage;

  000d6	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  000dc	89 88 60 01 00
	00		 mov	 DWORD PTR [eax+352], ecx
  000e2	e9 71 0e 00 00	 jmp	 $LN1@AddRenderI
$LN2418@AddRenderI:

; 65   : 	}
; 66   : 	else if( szType == "TextBingo" )

  000e7	c7 45 98 b9 89
	93 9e		 mov	 DWORD PTR __t$513883[ebp], -1634498119 ; 9e9389b9H
  000ee	c7 45 9c af 85
	85 8d		 mov	 DWORD PTR __t$513883[ebp+4], -1920629329 ; 8d8585afH
  000f5	8d 45 98	 lea	 eax, DWORD PTR __t$513883[ebp]
  000f8	66 c7 45 a0 82
	00		 mov	 WORD PTR __t$513883[ebp+8], 130 ; 00000082H
  000fe	8b cf		 mov	 ecx, edi
$LL317@AddRenderI:
  00100	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00106	83 c0 04	 add	 eax, 4
  00109	49		 dec	 ecx
  0010a	75 f4		 jne	 SHORT $LL317@AddRenderI
  0010c	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00112	80 75 a0 ed	 xor	 BYTE PTR __t$513883[ebp+8], -19 ; ffffffedH
  00116	8d 75 98	 lea	 esi, DWORD PTR __t$513883[ebp]
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2442@AddRenderI:
  0011f	8a 08		 mov	 cl, BYTE PTR [eax]
  00121	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00123	75 18		 jne	 SHORT $LN2443@AddRenderI
  00125	3a cb		 cmp	 cl, bl
  00127	74 10		 je	 SHORT $LN2444@AddRenderI
  00129	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0012c	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0012f	75 0c		 jne	 SHORT $LN2443@AddRenderI
  00131	03 c7		 add	 eax, edi
  00133	03 f7		 add	 esi, edi
  00135	3a cb		 cmp	 cl, bl
  00137	75 e6		 jne	 SHORT $LL2442@AddRenderI
$LN2444@AddRenderI:
  00139	33 c0		 xor	 eax, eax
  0013b	eb 05		 jmp	 SHORT $LN2445@AddRenderI
$LN2443@AddRenderI:
  0013d	1b c0		 sbb	 eax, eax
  0013f	83 d8 ff	 sbb	 eax, -1
$LN2445@AddRenderI:
  00142	3b c3		 cmp	 eax, ebx
  00144	75 3c		 jne	 SHORT $LN2419@AddRenderI

; 67   : 	{
; 68   : 		SAFEDELETE( m_pTextBingo );

  00146	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0014c	39 98 64 01 00
	00		 cmp	 DWORD PTR [eax+356], ebx
  00152	74 1d		 je	 SHORT $LN59@AddRenderI
  00154	8b 88 64 01 00
	00		 mov	 ecx, DWORD PTR [eax+356]
  0015a	3b cb		 cmp	 ecx, ebx
  0015c	74 0d		 je	 SHORT $LN68@AddRenderI
  0015e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00160	6a 01		 push	 1
  00162	ff 50 40	 call	 DWORD PTR [eax+64]
  00165	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN68@AddRenderI:
  0016b	89 98 64 01 00
	00		 mov	 DWORD PTR [eax+356], ebx
$LN59@AddRenderI:

; 69   : 		m_pTextBingo = pImage;

  00171	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00177	89 88 64 01 00
	00		 mov	 DWORD PTR [eax+356], ecx
  0017d	e9 d6 0d 00 00	 jmp	 $LN1@AddRenderI
$LN2419@AddRenderI:

; 70   : 	}
; 71   : 	else if( szType == "TextAllBingo" )

  00182	6a 03		 push	 3
  00184	c7 85 ac fe ff
	ff b9 89 93 9e	 mov	 DWORD PTR __t$514008[ebp], -1634498119 ; 9e9389b9H
  0018e	c7 85 b0 fe ff
	ff ac 80 87 a8	 mov	 DWORD PTR __t$514008[ebp+4], -1467514708 ; a88780acH
  00198	c7 85 b4 fe ff
	ff 84 82 8c 85	 mov	 DWORD PTR __t$514008[ebp+8], -2054389116 ; 858c8284H
  001a2	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR __t$514008[ebp]
  001a8	88 9d b8 fe ff
	ff		 mov	 BYTE PTR __t$514008[ebp+12], bl
  001ae	59		 pop	 ecx
$LL423@AddRenderI:
  001af	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b5	83 c0 04	 add	 eax, 4
  001b8	49		 dec	 ecx
  001b9	75 f4		 jne	 SHORT $LL423@AddRenderI
  001bb	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  001c1	8d b5 ac fe ff
	ff		 lea	 esi, DWORD PTR __t$514008[ebp]
  001c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2446@AddRenderI:
  001cd	8a 08		 mov	 cl, BYTE PTR [eax]
  001cf	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001d1	75 18		 jne	 SHORT $LN2447@AddRenderI
  001d3	3a cb		 cmp	 cl, bl
  001d5	74 10		 je	 SHORT $LN2448@AddRenderI
  001d7	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001da	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001dd	75 0c		 jne	 SHORT $LN2447@AddRenderI
  001df	03 c7		 add	 eax, edi
  001e1	03 f7		 add	 esi, edi
  001e3	3a cb		 cmp	 cl, bl
  001e5	75 e6		 jne	 SHORT $LL2446@AddRenderI
$LN2448@AddRenderI:
  001e7	33 c0		 xor	 eax, eax
  001e9	eb 05		 jmp	 SHORT $LN2449@AddRenderI
$LN2447@AddRenderI:
  001eb	1b c0		 sbb	 eax, eax
  001ed	83 d8 ff	 sbb	 eax, -1
$LN2449@AddRenderI:
  001f0	3b c3		 cmp	 eax, ebx
  001f2	75 3c		 jne	 SHORT $LN2420@AddRenderI

; 72   : 	{
; 73   : 		SAFEDELETE( m_pTextAll );

  001f4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  001fa	39 98 68 01 00
	00		 cmp	 DWORD PTR [eax+360], ebx
  00200	74 1d		 je	 SHORT $LN56@AddRenderI
  00202	8b 88 68 01 00
	00		 mov	 ecx, DWORD PTR [eax+360]
  00208	3b cb		 cmp	 ecx, ebx
  0020a	74 0d		 je	 SHORT $LN70@AddRenderI
  0020c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020e	6a 01		 push	 1
  00210	ff 50 40	 call	 DWORD PTR [eax+64]
  00213	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN70@AddRenderI:
  00219	89 98 68 01 00
	00		 mov	 DWORD PTR [eax+360], ebx
$LN56@AddRenderI:

; 74   : 		m_pTextAll = pImage;

  0021f	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00225	89 88 68 01 00
	00		 mov	 DWORD PTR [eax+360], ecx
  0022b	e9 28 0d 00 00	 jmp	 $LN1@AddRenderI
$LN2420@AddRenderI:

; 75   : 	}
; 76   : 	else if( szType == "TextClear" )

  00230	c7 85 78 ff ff
	ff b9 89 93 9e	 mov	 DWORD PTR __t$514134[ebp], -1634498119 ; 9e9389b9H
  0023a	c7 85 7c ff ff
	ff ae 80 8e 8b	 mov	 DWORD PTR __t$514134[ebp+4], -1953595218 ; 8b8e80aeH
  00244	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR __t$514134[ebp]
  0024a	66 c7 45 80 9f
	00		 mov	 WORD PTR __t$514134[ebp+8], 159 ; 0000009fH
  00250	8b cf		 mov	 ecx, edi
$LL529@AddRenderI:
  00252	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00258	83 c0 04	 add	 eax, 4
  0025b	49		 dec	 ecx
  0025c	75 f4		 jne	 SHORT $LL529@AddRenderI
  0025e	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00264	80 75 80 ed	 xor	 BYTE PTR __t$514134[ebp+8], -19 ; ffffffedH
  00268	8d b5 78 ff ff
	ff		 lea	 esi, DWORD PTR __t$514134[ebp]
  0026e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2450@AddRenderI:
  00274	8a 08		 mov	 cl, BYTE PTR [eax]
  00276	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00278	75 18		 jne	 SHORT $LN2451@AddRenderI
  0027a	3a cb		 cmp	 cl, bl
  0027c	74 10		 je	 SHORT $LN2452@AddRenderI
  0027e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00281	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00284	75 0c		 jne	 SHORT $LN2451@AddRenderI
  00286	03 c7		 add	 eax, edi
  00288	03 f7		 add	 esi, edi
  0028a	3a cb		 cmp	 cl, bl
  0028c	75 e6		 jne	 SHORT $LL2450@AddRenderI
$LN2452@AddRenderI:
  0028e	33 c0		 xor	 eax, eax
  00290	eb 05		 jmp	 SHORT $LN2453@AddRenderI
$LN2451@AddRenderI:
  00292	1b c0		 sbb	 eax, eax
  00294	83 d8 ff	 sbb	 eax, -1
$LN2453@AddRenderI:
  00297	3b c3		 cmp	 eax, ebx
  00299	75 3c		 jne	 SHORT $LN2421@AddRenderI

; 77   : 	{
; 78   : 		SAFEDELETE( m_pTextClear );

  0029b	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  002a1	39 98 6c 01 00
	00		 cmp	 DWORD PTR [eax+364], ebx
  002a7	74 1d		 je	 SHORT $LN53@AddRenderI
  002a9	8b 88 6c 01 00
	00		 mov	 ecx, DWORD PTR [eax+364]
  002af	3b cb		 cmp	 ecx, ebx
  002b1	74 0d		 je	 SHORT $LN72@AddRenderI
  002b3	8b 01		 mov	 eax, DWORD PTR [ecx]
  002b5	6a 01		 push	 1
  002b7	ff 50 40	 call	 DWORD PTR [eax+64]
  002ba	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN72@AddRenderI:
  002c0	89 98 6c 01 00
	00		 mov	 DWORD PTR [eax+364], ebx
$LN53@AddRenderI:

; 79   : 		m_pTextClear = pImage;

  002c6	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  002cc	89 88 6c 01 00
	00		 mov	 DWORD PTR [eax+364], ecx
  002d2	e9 81 0c 00 00	 jmp	 $LN1@AddRenderI
$LN2421@AddRenderI:

; 80   : 	}
; 81   : 	else if( szType == "TextNumber" )

  002d7	c7 85 28 ff ff
	ff b9 89 93 9e	 mov	 DWORD PTR __t$514271[ebp], -1634498119 ; 9e9389b9H
  002e1	c7 85 2c ff ff
	ff a3 99 86 88	 mov	 DWORD PTR __t$514271[ebp+4], -2004444765 ; 888699a3H
  002eb	66 c7 85 30 ff
	ff ff 88 9e	 mov	 WORD PTR __t$514271[ebp+8], 40584 ; 00009e88H
  002f4	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR __t$514271[ebp]
  002fa	88 9d 32 ff ff
	ff		 mov	 BYTE PTR __t$514271[ebp+10], bl
  00300	8b cf		 mov	 ecx, edi
$LL635@AddRenderI:
  00302	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00308	83 c0 04	 add	 eax, 4
  0030b	49		 dec	 ecx
  0030c	75 f4		 jne	 SHORT $LL635@AddRenderI
  0030e	6a 08		 push	 8
  00310	58		 pop	 eax
$LL632@AddRenderI:
  00311	8b c8		 mov	 ecx, eax
  00313	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00319	79 05		 jns	 SHORT $LN2522@AddRenderI
  0031b	49		 dec	 ecx
  0031c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0031f	41		 inc	 ecx
$LN2522@AddRenderI:
  00320	b2 ed		 mov	 dl, -19			; ffffffedH
  00322	2a d1		 sub	 dl, cl
  00324	30 94 05 28 ff
	ff ff		 xor	 BYTE PTR __t$514271[ebp+eax], dl
  0032b	40		 inc	 eax
  0032c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0032f	7c e0		 jl	 SHORT $LL632@AddRenderI
  00331	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00337	8d b5 28 ff ff
	ff		 lea	 esi, DWORD PTR __t$514271[ebp]
  0033d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2454@AddRenderI:
  00343	8a 08		 mov	 cl, BYTE PTR [eax]
  00345	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00347	75 18		 jne	 SHORT $LN2455@AddRenderI
  00349	3a cb		 cmp	 cl, bl
  0034b	74 10		 je	 SHORT $LN2456@AddRenderI
  0034d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00350	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00353	75 0c		 jne	 SHORT $LN2455@AddRenderI
  00355	03 c7		 add	 eax, edi
  00357	03 f7		 add	 esi, edi
  00359	3a cb		 cmp	 cl, bl
  0035b	75 e6		 jne	 SHORT $LL2454@AddRenderI
$LN2456@AddRenderI:
  0035d	33 c0		 xor	 eax, eax
  0035f	eb 05		 jmp	 SHORT $LN2457@AddRenderI
$LN2455@AddRenderI:
  00361	1b c0		 sbb	 eax, eax
  00363	83 d8 ff	 sbb	 eax, -1
$LN2457@AddRenderI:
  00366	3b c3		 cmp	 eax, ebx
  00368	75 3c		 jne	 SHORT $LN2422@AddRenderI

; 82   : 	{
; 83   : 		SAFEDELETE( m_pTextNumber );

  0036a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00370	39 98 70 01 00
	00		 cmp	 DWORD PTR [eax+368], ebx
  00376	74 1d		 je	 SHORT $LN50@AddRenderI
  00378	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  0037e	3b cb		 cmp	 ecx, ebx
  00380	74 0d		 je	 SHORT $LN74@AddRenderI
  00382	8b 01		 mov	 eax, DWORD PTR [ecx]
  00384	6a 01		 push	 1
  00386	ff 50 40	 call	 DWORD PTR [eax+64]
  00389	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN74@AddRenderI:
  0038f	89 98 70 01 00
	00		 mov	 DWORD PTR [eax+368], ebx
$LN50@AddRenderI:

; 84   : 		m_pTextNumber = pImage;

  00395	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  0039b	89 88 70 01 00
	00		 mov	 DWORD PTR [eax+368], ecx
  003a1	e9 b2 0b 00 00	 jmp	 $LN1@AddRenderI
$LN2422@AddRenderI:

; 85   : 	}
; 86   : 	else if( szType == "TextCount" )

  003a6	c7 85 04 ff ff
	ff b9 89 93 9e	 mov	 DWORD PTR __t$514383[ebp], -1634498119 ; 9e9389b9H
  003b0	c7 85 08 ff ff
	ff ae 83 9e 84	 mov	 DWORD PTR __t$514383[ebp+4], -2069986386 ; 849e83aeH
  003ba	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR __t$514383[ebp]
  003c0	66 c7 85 0c ff
	ff ff 99 00	 mov	 WORD PTR __t$514383[ebp+8], 153 ; 00000099H
  003c9	8b cf		 mov	 ecx, edi
$LL741@AddRenderI:
  003cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003d1	83 c0 04	 add	 eax, 4
  003d4	49		 dec	 ecx
  003d5	75 f4		 jne	 SHORT $LL741@AddRenderI
  003d7	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  003dd	80 b5 0c ff ff
	ff ed		 xor	 BYTE PTR __t$514383[ebp+8], -19 ; ffffffedH
  003e4	8d b5 04 ff ff
	ff		 lea	 esi, DWORD PTR __t$514383[ebp]
  003ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2458@AddRenderI:
  003f0	8a 08		 mov	 cl, BYTE PTR [eax]
  003f2	3a 0e		 cmp	 cl, BYTE PTR [esi]
  003f4	75 18		 jne	 SHORT $LN2459@AddRenderI
  003f6	3a cb		 cmp	 cl, bl
  003f8	74 10		 je	 SHORT $LN2460@AddRenderI
  003fa	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  003fd	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00400	75 0c		 jne	 SHORT $LN2459@AddRenderI
  00402	03 c7		 add	 eax, edi
  00404	03 f7		 add	 esi, edi
  00406	3a cb		 cmp	 cl, bl
  00408	75 e6		 jne	 SHORT $LL2458@AddRenderI
$LN2460@AddRenderI:
  0040a	33 c0		 xor	 eax, eax
  0040c	eb 05		 jmp	 SHORT $LN2461@AddRenderI
$LN2459@AddRenderI:
  0040e	1b c0		 sbb	 eax, eax
  00410	83 d8 ff	 sbb	 eax, -1
$LN2461@AddRenderI:
  00413	3b c3		 cmp	 eax, ebx
  00415	75 3c		 jne	 SHORT $LN2423@AddRenderI

; 87   : 	{
; 88   : 		SAFEDELETE( m_pTextCount );

  00417	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0041d	39 98 74 01 00
	00		 cmp	 DWORD PTR [eax+372], ebx
  00423	74 1d		 je	 SHORT $LN47@AddRenderI
  00425	8b 88 74 01 00
	00		 mov	 ecx, DWORD PTR [eax+372]
  0042b	3b cb		 cmp	 ecx, ebx
  0042d	74 0d		 je	 SHORT $LN76@AddRenderI
  0042f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00431	6a 01		 push	 1
  00433	ff 50 40	 call	 DWORD PTR [eax+64]
  00436	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN76@AddRenderI:
  0043c	89 98 74 01 00
	00		 mov	 DWORD PTR [eax+372], ebx
$LN47@AddRenderI:

; 89   : 		m_pTextCount = pImage;

  00442	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00448	89 88 74 01 00
	00		 mov	 DWORD PTR [eax+372], ecx
  0044e	e9 05 0b 00 00	 jmp	 $LN1@AddRenderI
$LN2423@AddRenderI:

; 90   : 	}
; 91   : 	else if( szType == "TextSelect" )

  00453	c7 45 c8 b9 89
	93 9e		 mov	 DWORD PTR __t$514508[ebp], -1634498119 ; 9e9389b9H
  0045a	c7 45 cc be 89
	87 8f		 mov	 DWORD PTR __t$514508[ebp+4], -1886942786 ; 8f8789beH
  00461	66 c7 45 d0 8e
	98		 mov	 WORD PTR __t$514508[ebp+8], 39054 ; 0000988eH
  00467	8d 45 c8	 lea	 eax, DWORD PTR __t$514508[ebp]
  0046a	88 5d d2	 mov	 BYTE PTR __t$514508[ebp+10], bl
  0046d	8b cf		 mov	 ecx, edi
$LL847@AddRenderI:
  0046f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00475	83 c0 04	 add	 eax, 4
  00478	49		 dec	 ecx
  00479	75 f4		 jne	 SHORT $LL847@AddRenderI
  0047b	6a 08		 push	 8
  0047d	58		 pop	 eax
$LL844@AddRenderI:
  0047e	8b c8		 mov	 ecx, eax
  00480	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00486	79 05		 jns	 SHORT $LN2523@AddRenderI
  00488	49		 dec	 ecx
  00489	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0048c	41		 inc	 ecx
$LN2523@AddRenderI:
  0048d	b2 ed		 mov	 dl, -19			; ffffffedH
  0048f	2a d1		 sub	 dl, cl
  00491	30 54 05 c8	 xor	 BYTE PTR __t$514508[ebp+eax], dl
  00495	40		 inc	 eax
  00496	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00499	7c e3		 jl	 SHORT $LL844@AddRenderI
  0049b	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  004a1	8d 75 c8	 lea	 esi, DWORD PTR __t$514508[ebp]
  004a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2462@AddRenderI:
  004aa	8a 08		 mov	 cl, BYTE PTR [eax]
  004ac	3a 0e		 cmp	 cl, BYTE PTR [esi]
  004ae	75 18		 jne	 SHORT $LN2463@AddRenderI
  004b0	3a cb		 cmp	 cl, bl
  004b2	74 10		 je	 SHORT $LN2464@AddRenderI
  004b4	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  004b7	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  004ba	75 0c		 jne	 SHORT $LN2463@AddRenderI
  004bc	03 c7		 add	 eax, edi
  004be	03 f7		 add	 esi, edi
  004c0	3a cb		 cmp	 cl, bl
  004c2	75 e6		 jne	 SHORT $LL2462@AddRenderI
$LN2464@AddRenderI:
  004c4	33 c0		 xor	 eax, eax
  004c6	eb 05		 jmp	 SHORT $LN2465@AddRenderI
$LN2463@AddRenderI:
  004c8	1b c0		 sbb	 eax, eax
  004ca	83 d8 ff	 sbb	 eax, -1
$LN2465@AddRenderI:
  004cd	3b c3		 cmp	 eax, ebx
  004cf	75 3c		 jne	 SHORT $LN2424@AddRenderI

; 92   : 	{
; 93   : 		SAFEDELETE( m_pTextSelect );

  004d1	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  004d7	39 98 78 01 00
	00		 cmp	 DWORD PTR [eax+376], ebx
  004dd	74 1d		 je	 SHORT $LN44@AddRenderI
  004df	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  004e5	3b cb		 cmp	 ecx, ebx
  004e7	74 0d		 je	 SHORT $LN78@AddRenderI
  004e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  004eb	6a 01		 push	 1
  004ed	ff 50 40	 call	 DWORD PTR [eax+64]
  004f0	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN78@AddRenderI:
  004f6	89 98 78 01 00
	00		 mov	 DWORD PTR [eax+376], ebx
$LN44@AddRenderI:

; 94   : 		m_pTextSelect = pImage;

  004fc	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00502	89 88 78 01 00
	00		 mov	 DWORD PTR [eax+376], ecx
  00508	e9 4b 0a 00 00	 jmp	 $LN1@AddRenderI
$LN2424@AddRenderI:

; 95   : 	}
; 96   : 	else if( szType == "TextGet" )

  0050d	6a 04		 push	 4
  0050f	c7 45 d8 b9 89
	93 9e		 mov	 DWORD PTR __t$514633[ebp], -1634498119 ; 9e9389b9H
  00516	81 75 d8 ed ec
	eb ea		 xor	 DWORD PTR __t$514633[ebp], -353637139 ; eaebecedH
  0051d	c7 45 dc aa 89
	9f 00		 mov	 DWORD PTR __t$514633[ebp+4], 10455466 ; 009f89aaH
  00524	58		 pop	 eax
$LL950@AddRenderI:
  00525	8b c8		 mov	 ecx, eax
  00527	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0052d	79 05		 jns	 SHORT $LN2524@AddRenderI
  0052f	49		 dec	 ecx
  00530	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00533	41		 inc	 ecx
$LN2524@AddRenderI:
  00534	b2 ed		 mov	 dl, -19			; ffffffedH
  00536	2a d1		 sub	 dl, cl
  00538	30 54 05 d8	 xor	 BYTE PTR __t$514633[ebp+eax], dl
  0053c	40		 inc	 eax
  0053d	83 f8 07	 cmp	 eax, 7
  00540	7c e3		 jl	 SHORT $LL950@AddRenderI
  00542	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00548	8d 75 d8	 lea	 esi, DWORD PTR __t$514633[ebp]
  0054b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2466@AddRenderI:
  00551	8a 08		 mov	 cl, BYTE PTR [eax]
  00553	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00555	75 18		 jne	 SHORT $LN2467@AddRenderI
  00557	3a cb		 cmp	 cl, bl
  00559	74 10		 je	 SHORT $LN2468@AddRenderI
  0055b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0055e	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00561	75 0c		 jne	 SHORT $LN2467@AddRenderI
  00563	03 c7		 add	 eax, edi
  00565	03 f7		 add	 esi, edi
  00567	3a cb		 cmp	 cl, bl
  00569	75 e6		 jne	 SHORT $LL2466@AddRenderI
$LN2468@AddRenderI:
  0056b	33 c0		 xor	 eax, eax
  0056d	eb 05		 jmp	 SHORT $LN2469@AddRenderI
$LN2467@AddRenderI:
  0056f	1b c0		 sbb	 eax, eax
  00571	83 d8 ff	 sbb	 eax, -1
$LN2469@AddRenderI:
  00574	3b c3		 cmp	 eax, ebx
  00576	75 3c		 jne	 SHORT $LN2425@AddRenderI

; 97   : 	{
; 98   : 		SAFEDELETE( m_pTextGet );

  00578	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0057e	39 98 7c 01 00
	00		 cmp	 DWORD PTR [eax+380], ebx
  00584	74 1d		 je	 SHORT $LN41@AddRenderI
  00586	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  0058c	3b cb		 cmp	 ecx, ebx
  0058e	74 0d		 je	 SHORT $LN80@AddRenderI
  00590	8b 01		 mov	 eax, DWORD PTR [ecx]
  00592	6a 01		 push	 1
  00594	ff 50 40	 call	 DWORD PTR [eax+64]
  00597	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN80@AddRenderI:
  0059d	89 98 7c 01 00
	00		 mov	 DWORD PTR [eax+380], ebx
$LN41@AddRenderI:

; 99   : 		m_pTextGet = pImage;

  005a3	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  005a9	89 88 7c 01 00
	00		 mov	 DWORD PTR [eax+380], ecx
  005af	e9 a4 09 00 00	 jmp	 $LN1@AddRenderI
$LN2425@AddRenderI:

; 100  : 	}
; 101  : 	else if( szType == "RedBall" )

  005b4	6a 04		 push	 4
  005b6	c7 45 e4 bf 89
	8f a8		 mov	 DWORD PTR __t$514758[ebp], -1466988097 ; a88f89bfH
  005bd	81 75 e4 ed ec
	eb ea		 xor	 DWORD PTR __t$514758[ebp], -353637139 ; eaebecedH
  005c4	c7 45 e8 8c 80
	87 00		 mov	 DWORD PTR __t$514758[ebp+4], 8880268 ; 0087808cH
  005cb	58		 pop	 eax
$LL1056@AddRenderI:
  005cc	8b c8		 mov	 ecx, eax
  005ce	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  005d4	79 05		 jns	 SHORT $LN2525@AddRenderI
  005d6	49		 dec	 ecx
  005d7	83 c9 fc	 or	 ecx, -4			; fffffffcH
  005da	41		 inc	 ecx
$LN2525@AddRenderI:
  005db	b2 ed		 mov	 dl, -19			; ffffffedH
  005dd	2a d1		 sub	 dl, cl
  005df	30 54 05 e4	 xor	 BYTE PTR __t$514758[ebp+eax], dl
  005e3	40		 inc	 eax
  005e4	83 f8 07	 cmp	 eax, 7
  005e7	7c e3		 jl	 SHORT $LL1056@AddRenderI
  005e9	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  005ef	8d 75 e4	 lea	 esi, DWORD PTR __t$514758[ebp]
  005f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2470@AddRenderI:
  005f8	8a 08		 mov	 cl, BYTE PTR [eax]
  005fa	3a 0e		 cmp	 cl, BYTE PTR [esi]
  005fc	75 18		 jne	 SHORT $LN2471@AddRenderI
  005fe	3a cb		 cmp	 cl, bl
  00600	74 10		 je	 SHORT $LN2472@AddRenderI
  00602	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00605	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00608	75 0c		 jne	 SHORT $LN2471@AddRenderI
  0060a	03 c7		 add	 eax, edi
  0060c	03 f7		 add	 esi, edi
  0060e	3a cb		 cmp	 cl, bl
  00610	75 e6		 jne	 SHORT $LL2470@AddRenderI
$LN2472@AddRenderI:
  00612	33 c0		 xor	 eax, eax
  00614	eb 05		 jmp	 SHORT $LN2473@AddRenderI
$LN2471@AddRenderI:
  00616	1b c0		 sbb	 eax, eax
  00618	83 d8 ff	 sbb	 eax, -1
$LN2473@AddRenderI:
  0061b	3b c3		 cmp	 eax, ebx
  0061d	75 3c		 jne	 SHORT $LN2426@AddRenderI

; 102  : 	{
; 103  : 		SAFEDELETE( m_pRedBall );

  0061f	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00625	39 98 80 01 00
	00		 cmp	 DWORD PTR [eax+384], ebx
  0062b	74 1d		 je	 SHORT $LN38@AddRenderI
  0062d	8b 88 80 01 00
	00		 mov	 ecx, DWORD PTR [eax+384]
  00633	3b cb		 cmp	 ecx, ebx
  00635	74 0d		 je	 SHORT $LN82@AddRenderI
  00637	8b 01		 mov	 eax, DWORD PTR [ecx]
  00639	6a 01		 push	 1
  0063b	ff 50 40	 call	 DWORD PTR [eax+64]
  0063e	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN82@AddRenderI:
  00644	89 98 80 01 00
	00		 mov	 DWORD PTR [eax+384], ebx
$LN38@AddRenderI:

; 104  : 		m_pRedBall = pImage;

  0064a	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00650	89 88 80 01 00
	00		 mov	 DWORD PTR [eax+384], ecx
  00656	e9 fd 08 00 00	 jmp	 $LN1@AddRenderI
$LN2426@AddRenderI:

; 105  : 	}
; 106  : 	else if( szType == "LightBall" )

  0065b	c7 85 58 ff ff
	ff a1 85 8c 82	 mov	 DWORD PTR __t$514883[ebp], -2104719967 ; 828c85a1H
  00665	c7 85 5c ff ff
	ff 99 ae 8a 86	 mov	 DWORD PTR __t$514883[ebp+4], -2037731687 ; 868aae99H
  0066f	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR __t$514883[ebp]
  00675	66 c7 85 60 ff
	ff ff 81 00	 mov	 WORD PTR __t$514883[ebp+8], 129 ; 00000081H
  0067e	8b cf		 mov	 ecx, edi
$LL1165@AddRenderI:
  00680	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00686	83 c0 04	 add	 eax, 4
  00689	49		 dec	 ecx
  0068a	75 f4		 jne	 SHORT $LL1165@AddRenderI
  0068c	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00692	80 b5 60 ff ff
	ff ed		 xor	 BYTE PTR __t$514883[ebp+8], -19 ; ffffffedH
  00699	8d b5 58 ff ff
	ff		 lea	 esi, DWORD PTR __t$514883[ebp]
  0069f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2474@AddRenderI:
  006a5	8a 08		 mov	 cl, BYTE PTR [eax]
  006a7	3a 0e		 cmp	 cl, BYTE PTR [esi]
  006a9	75 18		 jne	 SHORT $LN2475@AddRenderI
  006ab	3a cb		 cmp	 cl, bl
  006ad	74 10		 je	 SHORT $LN2476@AddRenderI
  006af	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  006b2	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  006b5	75 0c		 jne	 SHORT $LN2475@AddRenderI
  006b7	03 c7		 add	 eax, edi
  006b9	03 f7		 add	 esi, edi
  006bb	3a cb		 cmp	 cl, bl
  006bd	75 e6		 jne	 SHORT $LL2474@AddRenderI
$LN2476@AddRenderI:
  006bf	33 c0		 xor	 eax, eax
  006c1	eb 05		 jmp	 SHORT $LN2477@AddRenderI
$LN2475@AddRenderI:
  006c3	1b c0		 sbb	 eax, eax
  006c5	83 d8 ff	 sbb	 eax, -1
$LN2477@AddRenderI:
  006c8	3b c3		 cmp	 eax, ebx
  006ca	75 3c		 jne	 SHORT $LN2427@AddRenderI

; 107  : 	{
; 108  : 		SAFEDELETE( m_pLightBall );

  006cc	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  006d2	39 98 84 01 00
	00		 cmp	 DWORD PTR [eax+388], ebx
  006d8	74 1d		 je	 SHORT $LN35@AddRenderI
  006da	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  006e0	3b cb		 cmp	 ecx, ebx
  006e2	74 0d		 je	 SHORT $LN84@AddRenderI
  006e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  006e6	6a 01		 push	 1
  006e8	ff 50 40	 call	 DWORD PTR [eax+64]
  006eb	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN84@AddRenderI:
  006f1	89 98 84 01 00
	00		 mov	 DWORD PTR [eax+388], ebx
$LN35@AddRenderI:

; 109  : 		m_pLightBall = pImage;

  006f7	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  006fd	89 88 84 01 00
	00		 mov	 DWORD PTR [eax+388], ecx
  00703	e9 50 08 00 00	 jmp	 $LN1@AddRenderI
$LN2427@AddRenderI:

; 110  : 	}
; 111  : 	else if( szType == "BallBg" )

  00708	6a 04		 push	 4
  0070a	c7 45 f0 af 8d
	87 86		 mov	 DWORD PTR __t$515008[ebp], -2037936721 ; 86878dafH
  00711	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$515008[ebp], -353637139 ; eaebecedH
  00718	66 c7 45 f4 af
	8b		 mov	 WORD PTR __t$515008[ebp+4], 35759 ; 00008bafH
  0071e	88 5d f6	 mov	 BYTE PTR __t$515008[ebp+6], bl
  00721	58		 pop	 eax
$LL1268@AddRenderI:
  00722	8b c8		 mov	 ecx, eax
  00724	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0072a	79 05		 jns	 SHORT $LN2526@AddRenderI
  0072c	49		 dec	 ecx
  0072d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00730	41		 inc	 ecx
$LN2526@AddRenderI:
  00731	b2 ed		 mov	 dl, -19			; ffffffedH
  00733	2a d1		 sub	 dl, cl
  00735	30 54 05 f0	 xor	 BYTE PTR __t$515008[ebp+eax], dl
  00739	40		 inc	 eax
  0073a	83 f8 06	 cmp	 eax, 6
  0073d	7c e3		 jl	 SHORT $LL1268@AddRenderI
  0073f	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00745	8d 75 f0	 lea	 esi, DWORD PTR __t$515008[ebp]
  00748	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2478@AddRenderI:
  0074e	8a 08		 mov	 cl, BYTE PTR [eax]
  00750	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00752	75 18		 jne	 SHORT $LN2479@AddRenderI
  00754	3a cb		 cmp	 cl, bl
  00756	74 10		 je	 SHORT $LN2480@AddRenderI
  00758	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0075b	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0075e	75 0c		 jne	 SHORT $LN2479@AddRenderI
  00760	03 c7		 add	 eax, edi
  00762	03 f7		 add	 esi, edi
  00764	3a cb		 cmp	 cl, bl
  00766	75 e6		 jne	 SHORT $LL2478@AddRenderI
$LN2480@AddRenderI:
  00768	33 c0		 xor	 eax, eax
  0076a	eb 05		 jmp	 SHORT $LN2481@AddRenderI
$LN2479@AddRenderI:
  0076c	1b c0		 sbb	 eax, eax
  0076e	83 d8 ff	 sbb	 eax, -1
$LN2481@AddRenderI:
  00771	3b c3		 cmp	 eax, ebx
  00773	75 3c		 jne	 SHORT $LN2428@AddRenderI

; 112  : 	{
; 113  : 		SAFEDELETE( m_pBallBg );

  00775	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0077b	39 98 88 01 00
	00		 cmp	 DWORD PTR [eax+392], ebx
  00781	74 1d		 je	 SHORT $LN32@AddRenderI
  00783	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00789	3b cb		 cmp	 ecx, ebx
  0078b	74 0d		 je	 SHORT $LN86@AddRenderI
  0078d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0078f	6a 01		 push	 1
  00791	ff 50 40	 call	 DWORD PTR [eax+64]
  00794	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN86@AddRenderI:
  0079a	89 98 88 01 00
	00		 mov	 DWORD PTR [eax+392], ebx
$LN32@AddRenderI:

; 114  : 		m_pBallBg = pImage;

  007a0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  007a6	89 88 88 01 00
	00		 mov	 DWORD PTR [eax+392], ecx
  007ac	e9 a7 07 00 00	 jmp	 $LN1@AddRenderI
$LN2428@AddRenderI:

; 115  : 	}
; 116  : 	else if( szType == "BallEffect1" )

  007b1	c7 85 38 ff ff
	ff af 8d 87 86	 mov	 DWORD PTR __t$515146[ebp], -2037936721 ; 86878dafH
  007bb	c7 85 3c ff ff
	ff a8 8a 8d 8f	 mov	 DWORD PTR __t$515146[ebp+4], -1886549336 ; 8f8d8aa8H
  007c5	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR __t$515146[ebp]
  007cb	c7 85 40 ff ff
	ff 8e 98 da 00	 mov	 DWORD PTR __t$515146[ebp+8], 14325902 ; 00da988eH
  007d5	8b cf		 mov	 ecx, edi
$LL1377@AddRenderI:
  007d7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  007dd	83 c0 04	 add	 eax, 4
  007e0	49		 dec	 ecx
  007e1	75 f4		 jne	 SHORT $LL1377@AddRenderI
  007e3	6a 08		 push	 8
  007e5	58		 pop	 eax
$LL1374@AddRenderI:
  007e6	8b c8		 mov	 ecx, eax
  007e8	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  007ee	79 05		 jns	 SHORT $LN2527@AddRenderI
  007f0	49		 dec	 ecx
  007f1	83 c9 fc	 or	 ecx, -4			; fffffffcH
  007f4	41		 inc	 ecx
$LN2527@AddRenderI:
  007f5	b2 ed		 mov	 dl, -19			; ffffffedH
  007f7	2a d1		 sub	 dl, cl
  007f9	30 94 05 38 ff
	ff ff		 xor	 BYTE PTR __t$515146[ebp+eax], dl
  00800	40		 inc	 eax
  00801	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00804	7c e0		 jl	 SHORT $LL1374@AddRenderI
  00806	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0080c	8d b5 38 ff ff
	ff		 lea	 esi, DWORD PTR __t$515146[ebp]
  00812	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2482@AddRenderI:
  00818	8a 08		 mov	 cl, BYTE PTR [eax]
  0081a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0081c	75 18		 jne	 SHORT $LN2483@AddRenderI
  0081e	3a cb		 cmp	 cl, bl
  00820	74 10		 je	 SHORT $LN2484@AddRenderI
  00822	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00825	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00828	75 0c		 jne	 SHORT $LN2483@AddRenderI
  0082a	03 c7		 add	 eax, edi
  0082c	03 f7		 add	 esi, edi
  0082e	3a cb		 cmp	 cl, bl
  00830	75 e6		 jne	 SHORT $LL2482@AddRenderI
$LN2484@AddRenderI:
  00832	33 c0		 xor	 eax, eax
  00834	eb 05		 jmp	 SHORT $LN2485@AddRenderI
$LN2483@AddRenderI:
  00836	1b c0		 sbb	 eax, eax
  00838	83 d8 ff	 sbb	 eax, -1
$LN2485@AddRenderI:
  0083b	3b c3		 cmp	 eax, ebx
  0083d	75 3c		 jne	 SHORT $LN2429@AddRenderI

; 117  : 	{
; 118  : 		SAFEDELETE( m_pBallEffect[0] );

  0083f	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00845	39 98 8c 01 00
	00		 cmp	 DWORD PTR [eax+396], ebx
  0084b	74 1d		 je	 SHORT $LN29@AddRenderI
  0084d	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00853	3b cb		 cmp	 ecx, ebx
  00855	74 0d		 je	 SHORT $LN88@AddRenderI
  00857	8b 01		 mov	 eax, DWORD PTR [ecx]
  00859	6a 01		 push	 1
  0085b	ff 50 40	 call	 DWORD PTR [eax+64]
  0085e	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN88@AddRenderI:
  00864	89 98 8c 01 00
	00		 mov	 DWORD PTR [eax+396], ebx
$LN29@AddRenderI:

; 119  : 		m_pBallEffect[0] = pImage;

  0086a	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00870	89 88 8c 01 00
	00		 mov	 DWORD PTR [eax+396], ecx
  00876	e9 dd 06 00 00	 jmp	 $LN1@AddRenderI
$LN2429@AddRenderI:

; 120  : 	}
; 121  : 	else if( szType == "BallEffect2" )

  0087b	c7 45 b8 af 8d
	87 86		 mov	 DWORD PTR __t$515271[ebp], -2037936721 ; 86878dafH
  00882	c7 45 bc a8 8a
	8d 8f		 mov	 DWORD PTR __t$515271[ebp+4], -1886549336 ; 8f8d8aa8H
  00889	8d 45 b8	 lea	 eax, DWORD PTR __t$515271[ebp]
  0088c	c7 45 c0 8e 98
	d9 00		 mov	 DWORD PTR __t$515271[ebp+8], 14260366 ; 00d9988eH
  00893	8b cf		 mov	 ecx, edi
$LL1483@AddRenderI:
  00895	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0089b	83 c0 04	 add	 eax, 4
  0089e	49		 dec	 ecx
  0089f	75 f4		 jne	 SHORT $LL1483@AddRenderI
  008a1	6a 08		 push	 8
  008a3	58		 pop	 eax
$LL1480@AddRenderI:
  008a4	8b c8		 mov	 ecx, eax
  008a6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  008ac	79 05		 jns	 SHORT $LN2528@AddRenderI
  008ae	49		 dec	 ecx
  008af	83 c9 fc	 or	 ecx, -4			; fffffffcH
  008b2	41		 inc	 ecx
$LN2528@AddRenderI:
  008b3	b2 ed		 mov	 dl, -19			; ffffffedH
  008b5	2a d1		 sub	 dl, cl
  008b7	30 54 05 b8	 xor	 BYTE PTR __t$515271[ebp+eax], dl
  008bb	40		 inc	 eax
  008bc	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  008bf	7c e3		 jl	 SHORT $LL1480@AddRenderI
  008c1	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  008c7	8d 75 b8	 lea	 esi, DWORD PTR __t$515271[ebp]
  008ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2486@AddRenderI:
  008d0	8a 08		 mov	 cl, BYTE PTR [eax]
  008d2	3a 0e		 cmp	 cl, BYTE PTR [esi]
  008d4	75 18		 jne	 SHORT $LN2487@AddRenderI
  008d6	3a cb		 cmp	 cl, bl
  008d8	74 10		 je	 SHORT $LN2488@AddRenderI
  008da	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  008dd	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  008e0	75 0c		 jne	 SHORT $LN2487@AddRenderI
  008e2	03 c7		 add	 eax, edi
  008e4	03 f7		 add	 esi, edi
  008e6	3a cb		 cmp	 cl, bl
  008e8	75 e6		 jne	 SHORT $LL2486@AddRenderI
$LN2488@AddRenderI:
  008ea	33 c0		 xor	 eax, eax
  008ec	eb 05		 jmp	 SHORT $LN2489@AddRenderI
$LN2487@AddRenderI:
  008ee	1b c0		 sbb	 eax, eax
  008f0	83 d8 ff	 sbb	 eax, -1
$LN2489@AddRenderI:
  008f3	3b c3		 cmp	 eax, ebx
  008f5	75 3c		 jne	 SHORT $LN2430@AddRenderI

; 122  : 	{
; 123  : 		SAFEDELETE( m_pBallEffect[1] );

  008f7	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  008fd	39 98 90 01 00
	00		 cmp	 DWORD PTR [eax+400], ebx
  00903	74 1d		 je	 SHORT $LN26@AddRenderI
  00905	8b 88 90 01 00
	00		 mov	 ecx, DWORD PTR [eax+400]
  0090b	3b cb		 cmp	 ecx, ebx
  0090d	74 0d		 je	 SHORT $LN90@AddRenderI
  0090f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00911	6a 01		 push	 1
  00913	ff 50 40	 call	 DWORD PTR [eax+64]
  00916	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN90@AddRenderI:
  0091c	89 98 90 01 00
	00		 mov	 DWORD PTR [eax+400], ebx
$LN26@AddRenderI:

; 124  : 		m_pBallEffect[1] = pImage;

  00922	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00928	89 88 90 01 00
	00		 mov	 DWORD PTR [eax+400], ecx
  0092e	e9 25 06 00 00	 jmp	 $LN1@AddRenderI
$LN2430@AddRenderI:

; 125  : 	}
; 126  : 	else if( szType == "BallEffect3" )

  00933	c7 45 a8 af 8d
	87 86		 mov	 DWORD PTR __t$515396[ebp], -2037936721 ; 86878dafH
  0093a	c7 45 ac a8 8a
	8d 8f		 mov	 DWORD PTR __t$515396[ebp+4], -1886549336 ; 8f8d8aa8H
  00941	8d 45 a8	 lea	 eax, DWORD PTR __t$515396[ebp]
  00944	c7 45 b0 8e 98
	d8 00		 mov	 DWORD PTR __t$515396[ebp+8], 14194830 ; 00d8988eH
  0094b	8b cf		 mov	 ecx, edi
$LL1589@AddRenderI:
  0094d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00953	83 c0 04	 add	 eax, 4
  00956	49		 dec	 ecx
  00957	75 f4		 jne	 SHORT $LL1589@AddRenderI
  00959	6a 08		 push	 8
  0095b	58		 pop	 eax
$LL1586@AddRenderI:
  0095c	8b c8		 mov	 ecx, eax
  0095e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00964	79 05		 jns	 SHORT $LN2529@AddRenderI
  00966	49		 dec	 ecx
  00967	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0096a	41		 inc	 ecx
$LN2529@AddRenderI:
  0096b	b2 ed		 mov	 dl, -19			; ffffffedH
  0096d	2a d1		 sub	 dl, cl
  0096f	30 54 05 a8	 xor	 BYTE PTR __t$515396[ebp+eax], dl
  00973	40		 inc	 eax
  00974	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00977	7c e3		 jl	 SHORT $LL1586@AddRenderI
  00979	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0097f	8d 75 a8	 lea	 esi, DWORD PTR __t$515396[ebp]
  00982	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2490@AddRenderI:
  00988	8a 08		 mov	 cl, BYTE PTR [eax]
  0098a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0098c	75 18		 jne	 SHORT $LN2491@AddRenderI
  0098e	3a cb		 cmp	 cl, bl
  00990	74 10		 je	 SHORT $LN2492@AddRenderI
  00992	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00995	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00998	75 0c		 jne	 SHORT $LN2491@AddRenderI
  0099a	03 c7		 add	 eax, edi
  0099c	03 f7		 add	 esi, edi
  0099e	3a cb		 cmp	 cl, bl
  009a0	75 e6		 jne	 SHORT $LL2490@AddRenderI
$LN2492@AddRenderI:
  009a2	33 c0		 xor	 eax, eax
  009a4	eb 05		 jmp	 SHORT $LN2493@AddRenderI
$LN2491@AddRenderI:
  009a6	1b c0		 sbb	 eax, eax
  009a8	83 d8 ff	 sbb	 eax, -1
$LN2493@AddRenderI:
  009ab	3b c3		 cmp	 eax, ebx
  009ad	75 3c		 jne	 SHORT $LN2431@AddRenderI

; 127  : 	{
; 128  : 		SAFEDELETE( m_pBallEffect[2] );

  009af	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  009b5	39 98 94 01 00
	00		 cmp	 DWORD PTR [eax+404], ebx
  009bb	74 1d		 je	 SHORT $LN23@AddRenderI
  009bd	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  009c3	3b cb		 cmp	 ecx, ebx
  009c5	74 0d		 je	 SHORT $LN92@AddRenderI
  009c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  009c9	6a 01		 push	 1
  009cb	ff 50 40	 call	 DWORD PTR [eax+64]
  009ce	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN92@AddRenderI:
  009d4	89 98 94 01 00
	00		 mov	 DWORD PTR [eax+404], ebx
$LN23@AddRenderI:

; 129  : 		m_pBallEffect[2] = pImage;

  009da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  009e0	89 88 94 01 00
	00		 mov	 DWORD PTR [eax+404], ecx
  009e6	e9 6d 05 00 00	 jmp	 $LN1@AddRenderI
$LN2431@AddRenderI:

; 130  : 	}
; 131  : 	else if( szType == "BallEffect4" )

  009eb	c7 45 88 af 8d
	87 86		 mov	 DWORD PTR __t$515521[ebp], -2037936721 ; 86878dafH
  009f2	c7 45 8c a8 8a
	8d 8f		 mov	 DWORD PTR __t$515521[ebp+4], -1886549336 ; 8f8d8aa8H
  009f9	8d 45 88	 lea	 eax, DWORD PTR __t$515521[ebp]
  009fc	c7 45 90 8e 98
	df 00		 mov	 DWORD PTR __t$515521[ebp+8], 14653582 ; 00df988eH
  00a03	8b cf		 mov	 ecx, edi
$LL1695@AddRenderI:
  00a05	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00a0b	83 c0 04	 add	 eax, 4
  00a0e	49		 dec	 ecx
  00a0f	75 f4		 jne	 SHORT $LL1695@AddRenderI
  00a11	6a 08		 push	 8
  00a13	58		 pop	 eax
$LL1692@AddRenderI:
  00a14	8b c8		 mov	 ecx, eax
  00a16	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00a1c	79 05		 jns	 SHORT $LN2530@AddRenderI
  00a1e	49		 dec	 ecx
  00a1f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00a22	41		 inc	 ecx
$LN2530@AddRenderI:
  00a23	b2 ed		 mov	 dl, -19			; ffffffedH
  00a25	2a d1		 sub	 dl, cl
  00a27	30 54 05 88	 xor	 BYTE PTR __t$515521[ebp+eax], dl
  00a2b	40		 inc	 eax
  00a2c	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00a2f	7c e3		 jl	 SHORT $LL1692@AddRenderI
  00a31	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00a37	8d 75 88	 lea	 esi, DWORD PTR __t$515521[ebp]
  00a3a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2494@AddRenderI:
  00a40	8a 08		 mov	 cl, BYTE PTR [eax]
  00a42	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00a44	75 18		 jne	 SHORT $LN2495@AddRenderI
  00a46	3a cb		 cmp	 cl, bl
  00a48	74 10		 je	 SHORT $LN2496@AddRenderI
  00a4a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00a4d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00a50	75 0c		 jne	 SHORT $LN2495@AddRenderI
  00a52	03 c7		 add	 eax, edi
  00a54	03 f7		 add	 esi, edi
  00a56	3a cb		 cmp	 cl, bl
  00a58	75 e6		 jne	 SHORT $LL2494@AddRenderI
$LN2496@AddRenderI:
  00a5a	33 c0		 xor	 eax, eax
  00a5c	eb 05		 jmp	 SHORT $LN2497@AddRenderI
$LN2495@AddRenderI:
  00a5e	1b c0		 sbb	 eax, eax
  00a60	83 d8 ff	 sbb	 eax, -1
$LN2497@AddRenderI:
  00a63	3b c3		 cmp	 eax, ebx
  00a65	75 3c		 jne	 SHORT $LN2432@AddRenderI

; 132  : 	{
; 133  : 		SAFEDELETE( m_pBallEffect[3] );

  00a67	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00a6d	39 98 98 01 00
	00		 cmp	 DWORD PTR [eax+408], ebx
  00a73	74 1d		 je	 SHORT $LN20@AddRenderI
  00a75	8b 88 98 01 00
	00		 mov	 ecx, DWORD PTR [eax+408]
  00a7b	3b cb		 cmp	 ecx, ebx
  00a7d	74 0d		 je	 SHORT $LN94@AddRenderI
  00a7f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00a81	6a 01		 push	 1
  00a83	ff 50 40	 call	 DWORD PTR [eax+64]
  00a86	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN94@AddRenderI:
  00a8c	89 98 98 01 00
	00		 mov	 DWORD PTR [eax+408], ebx
$LN20@AddRenderI:

; 134  : 		m_pBallEffect[3] = pImage;

  00a92	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00a98	89 88 98 01 00
	00		 mov	 DWORD PTR [eax+408], ecx
  00a9e	e9 b5 04 00 00	 jmp	 $LN1@AddRenderI
$LN2432@AddRenderI:

; 135  : 	}
; 136  : 	else if( szType == "BallEffect5" )

  00aa3	c7 85 68 ff ff
	ff af 8d 87 86	 mov	 DWORD PTR __t$515646[ebp], -2037936721 ; 86878dafH
  00aad	c7 85 6c ff ff
	ff a8 8a 8d 8f	 mov	 DWORD PTR __t$515646[ebp+4], -1886549336 ; 8f8d8aa8H
  00ab7	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR __t$515646[ebp]
  00abd	c7 85 70 ff ff
	ff 8e 98 de 00	 mov	 DWORD PTR __t$515646[ebp+8], 14588046 ; 00de988eH
  00ac7	8b cf		 mov	 ecx, edi
$LL1801@AddRenderI:
  00ac9	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00acf	83 c0 04	 add	 eax, 4
  00ad2	49		 dec	 ecx
  00ad3	75 f4		 jne	 SHORT $LL1801@AddRenderI
  00ad5	6a 08		 push	 8
  00ad7	58		 pop	 eax
$LL1798@AddRenderI:
  00ad8	8b c8		 mov	 ecx, eax
  00ada	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00ae0	79 05		 jns	 SHORT $LN2531@AddRenderI
  00ae2	49		 dec	 ecx
  00ae3	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00ae6	41		 inc	 ecx
$LN2531@AddRenderI:
  00ae7	b2 ed		 mov	 dl, -19			; ffffffedH
  00ae9	2a d1		 sub	 dl, cl
  00aeb	30 94 05 68 ff
	ff ff		 xor	 BYTE PTR __t$515646[ebp+eax], dl
  00af2	40		 inc	 eax
  00af3	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00af6	7c e0		 jl	 SHORT $LL1798@AddRenderI
  00af8	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00afe	8d b5 68 ff ff
	ff		 lea	 esi, DWORD PTR __t$515646[ebp]
  00b04	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2498@AddRenderI:
  00b0a	8a 08		 mov	 cl, BYTE PTR [eax]
  00b0c	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00b0e	75 18		 jne	 SHORT $LN2499@AddRenderI
  00b10	3a cb		 cmp	 cl, bl
  00b12	74 10		 je	 SHORT $LN2500@AddRenderI
  00b14	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00b17	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00b1a	75 0c		 jne	 SHORT $LN2499@AddRenderI
  00b1c	03 c7		 add	 eax, edi
  00b1e	03 f7		 add	 esi, edi
  00b20	3a cb		 cmp	 cl, bl
  00b22	75 e6		 jne	 SHORT $LL2498@AddRenderI
$LN2500@AddRenderI:
  00b24	33 c0		 xor	 eax, eax
  00b26	eb 05		 jmp	 SHORT $LN2501@AddRenderI
$LN2499@AddRenderI:
  00b28	1b c0		 sbb	 eax, eax
  00b2a	83 d8 ff	 sbb	 eax, -1
$LN2501@AddRenderI:
  00b2d	3b c3		 cmp	 eax, ebx
  00b2f	75 3c		 jne	 SHORT $LN2433@AddRenderI

; 137  : 	{
; 138  : 		SAFEDELETE( m_pBallEffect[4] );

  00b31	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00b37	39 98 9c 01 00
	00		 cmp	 DWORD PTR [eax+412], ebx
  00b3d	74 1d		 je	 SHORT $LN17@AddRenderI
  00b3f	8b 88 9c 01 00
	00		 mov	 ecx, DWORD PTR [eax+412]
  00b45	3b cb		 cmp	 ecx, ebx
  00b47	74 0d		 je	 SHORT $LN96@AddRenderI
  00b49	8b 01		 mov	 eax, DWORD PTR [ecx]
  00b4b	6a 01		 push	 1
  00b4d	ff 50 40	 call	 DWORD PTR [eax+64]
  00b50	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN96@AddRenderI:
  00b56	89 98 9c 01 00
	00		 mov	 DWORD PTR [eax+412], ebx
$LN17@AddRenderI:

; 139  : 		m_pBallEffect[4] = pImage;

  00b5c	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00b62	89 88 9c 01 00
	00		 mov	 DWORD PTR [eax+412], ecx
  00b68	e9 eb 03 00 00	 jmp	 $LN1@AddRenderI
$LN2433@AddRenderI:

; 140  : 	}
; 141  : 	else if( szType == "BallEffect6" )

  00b6d	c7 85 48 ff ff
	ff af 8d 87 86	 mov	 DWORD PTR __t$515771[ebp], -2037936721 ; 86878dafH
  00b77	c7 85 4c ff ff
	ff a8 8a 8d 8f	 mov	 DWORD PTR __t$515771[ebp+4], -1886549336 ; 8f8d8aa8H
  00b81	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR __t$515771[ebp]
  00b87	c7 85 50 ff ff
	ff 8e 98 dd 00	 mov	 DWORD PTR __t$515771[ebp+8], 14522510 ; 00dd988eH
  00b91	8b cf		 mov	 ecx, edi
$LL1907@AddRenderI:
  00b93	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00b99	83 c0 04	 add	 eax, 4
  00b9c	49		 dec	 ecx
  00b9d	75 f4		 jne	 SHORT $LL1907@AddRenderI
  00b9f	6a 08		 push	 8
  00ba1	58		 pop	 eax
$LL1904@AddRenderI:
  00ba2	8b c8		 mov	 ecx, eax
  00ba4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00baa	79 05		 jns	 SHORT $LN2532@AddRenderI
  00bac	49		 dec	 ecx
  00bad	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00bb0	41		 inc	 ecx
$LN2532@AddRenderI:
  00bb1	b2 ed		 mov	 dl, -19			; ffffffedH
  00bb3	2a d1		 sub	 dl, cl
  00bb5	30 94 05 48 ff
	ff ff		 xor	 BYTE PTR __t$515771[ebp+eax], dl
  00bbc	40		 inc	 eax
  00bbd	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00bc0	7c e0		 jl	 SHORT $LL1904@AddRenderI
  00bc2	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00bc8	8d b5 48 ff ff
	ff		 lea	 esi, DWORD PTR __t$515771[ebp]
  00bce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2502@AddRenderI:
  00bd4	8a 08		 mov	 cl, BYTE PTR [eax]
  00bd6	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00bd8	75 18		 jne	 SHORT $LN2503@AddRenderI
  00bda	3a cb		 cmp	 cl, bl
  00bdc	74 10		 je	 SHORT $LN2504@AddRenderI
  00bde	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00be1	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00be4	75 0c		 jne	 SHORT $LN2503@AddRenderI
  00be6	03 c7		 add	 eax, edi
  00be8	03 f7		 add	 esi, edi
  00bea	3a cb		 cmp	 cl, bl
  00bec	75 e6		 jne	 SHORT $LL2502@AddRenderI
$LN2504@AddRenderI:
  00bee	33 c0		 xor	 eax, eax
  00bf0	eb 05		 jmp	 SHORT $LN2505@AddRenderI
$LN2503@AddRenderI:
  00bf2	1b c0		 sbb	 eax, eax
  00bf4	83 d8 ff	 sbb	 eax, -1
$LN2505@AddRenderI:
  00bf7	3b c3		 cmp	 eax, ebx
  00bf9	75 3c		 jne	 SHORT $LN2434@AddRenderI

; 142  : 	{
; 143  : 		SAFEDELETE( m_pBallEffect[5] );

  00bfb	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00c01	39 98 a0 01 00
	00		 cmp	 DWORD PTR [eax+416], ebx
  00c07	74 1d		 je	 SHORT $LN14@AddRenderI
  00c09	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00c0f	3b cb		 cmp	 ecx, ebx
  00c11	74 0d		 je	 SHORT $LN98@AddRenderI
  00c13	8b 01		 mov	 eax, DWORD PTR [ecx]
  00c15	6a 01		 push	 1
  00c17	ff 50 40	 call	 DWORD PTR [eax+64]
  00c1a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN98@AddRenderI:
  00c20	89 98 a0 01 00
	00		 mov	 DWORD PTR [eax+416], ebx
$LN14@AddRenderI:

; 144  : 		m_pBallEffect[5] = pImage;

  00c26	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00c2c	89 88 a0 01 00
	00		 mov	 DWORD PTR [eax+416], ecx
  00c32	e9 21 03 00 00	 jmp	 $LN1@AddRenderI
$LN2434@AddRenderI:

; 145  : 	}
; 146  : 	else if( szType == "BallEffect7" )

  00c37	c7 85 f4 fe ff
	ff af 8d 87 86	 mov	 DWORD PTR __t$515896[ebp], -2037936721 ; 86878dafH
  00c41	c7 85 f8 fe ff
	ff a8 8a 8d 8f	 mov	 DWORD PTR __t$515896[ebp+4], -1886549336 ; 8f8d8aa8H
  00c4b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR __t$515896[ebp]
  00c51	c7 85 fc fe ff
	ff 8e 98 dc 00	 mov	 DWORD PTR __t$515896[ebp+8], 14456974 ; 00dc988eH
  00c5b	8b cf		 mov	 ecx, edi
$LL2013@AddRenderI:
  00c5d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00c63	83 c0 04	 add	 eax, 4
  00c66	49		 dec	 ecx
  00c67	75 f4		 jne	 SHORT $LL2013@AddRenderI
  00c69	6a 08		 push	 8
  00c6b	58		 pop	 eax
$LL2010@AddRenderI:
  00c6c	8b c8		 mov	 ecx, eax
  00c6e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00c74	79 05		 jns	 SHORT $LN2533@AddRenderI
  00c76	49		 dec	 ecx
  00c77	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00c7a	41		 inc	 ecx
$LN2533@AddRenderI:
  00c7b	b2 ed		 mov	 dl, -19			; ffffffedH
  00c7d	2a d1		 sub	 dl, cl
  00c7f	30 94 05 f4 fe
	ff ff		 xor	 BYTE PTR __t$515896[ebp+eax], dl
  00c86	40		 inc	 eax
  00c87	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00c8a	7c e0		 jl	 SHORT $LL2010@AddRenderI
  00c8c	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00c92	8d b5 f4 fe ff
	ff		 lea	 esi, DWORD PTR __t$515896[ebp]
  00c98	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2506@AddRenderI:
  00c9e	8a 08		 mov	 cl, BYTE PTR [eax]
  00ca0	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00ca2	75 18		 jne	 SHORT $LN2507@AddRenderI
  00ca4	3a cb		 cmp	 cl, bl
  00ca6	74 10		 je	 SHORT $LN2508@AddRenderI
  00ca8	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00cab	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00cae	75 0c		 jne	 SHORT $LN2507@AddRenderI
  00cb0	03 c7		 add	 eax, edi
  00cb2	03 f7		 add	 esi, edi
  00cb4	3a cb		 cmp	 cl, bl
  00cb6	75 e6		 jne	 SHORT $LL2506@AddRenderI
$LN2508@AddRenderI:
  00cb8	33 c0		 xor	 eax, eax
  00cba	eb 05		 jmp	 SHORT $LN2509@AddRenderI
$LN2507@AddRenderI:
  00cbc	1b c0		 sbb	 eax, eax
  00cbe	83 d8 ff	 sbb	 eax, -1
$LN2509@AddRenderI:
  00cc1	3b c3		 cmp	 eax, ebx
  00cc3	75 3c		 jne	 SHORT $LN2435@AddRenderI

; 147  : 	{
; 148  : 		SAFEDELETE( m_pBallEffect[6] );

  00cc5	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00ccb	39 98 a4 01 00
	00		 cmp	 DWORD PTR [eax+420], ebx
  00cd1	74 1d		 je	 SHORT $LN11@AddRenderI
  00cd3	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  00cd9	3b cb		 cmp	 ecx, ebx
  00cdb	74 0d		 je	 SHORT $LN100@AddRenderI
  00cdd	8b 01		 mov	 eax, DWORD PTR [ecx]
  00cdf	6a 01		 push	 1
  00ce1	ff 50 40	 call	 DWORD PTR [eax+64]
  00ce4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN100@AddRenderI:
  00cea	89 98 a4 01 00
	00		 mov	 DWORD PTR [eax+420], ebx
$LN11@AddRenderI:

; 149  : 		m_pBallEffect[6] = pImage;

  00cf0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00cf6	89 88 a4 01 00
	00		 mov	 DWORD PTR [eax+420], ecx
  00cfc	e9 57 02 00 00	 jmp	 $LN1@AddRenderI
$LN2435@AddRenderI:

; 150  : 	}
; 151  : 	else if( szType == "BallEffect8" )

  00d01	c7 85 d4 fe ff
	ff af 8d 87 86	 mov	 DWORD PTR __t$516008[ebp], -2037936721 ; 86878dafH
  00d0b	c7 85 d8 fe ff
	ff a8 8a 8d 8f	 mov	 DWORD PTR __t$516008[ebp+4], -1886549336 ; 8f8d8aa8H
  00d15	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR __t$516008[ebp]
  00d1b	c7 85 dc fe ff
	ff 8e 98 d3 00	 mov	 DWORD PTR __t$516008[ebp+8], 13867150 ; 00d3988eH
  00d25	8b cf		 mov	 ecx, edi
$LL2119@AddRenderI:
  00d27	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00d2d	83 c0 04	 add	 eax, 4
  00d30	49		 dec	 ecx
  00d31	75 f4		 jne	 SHORT $LL2119@AddRenderI
  00d33	6a 08		 push	 8
  00d35	58		 pop	 eax
$LL2116@AddRenderI:
  00d36	8b c8		 mov	 ecx, eax
  00d38	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00d3e	79 05		 jns	 SHORT $LN2534@AddRenderI
  00d40	49		 dec	 ecx
  00d41	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00d44	41		 inc	 ecx
$LN2534@AddRenderI:
  00d45	b2 ed		 mov	 dl, -19			; ffffffedH
  00d47	2a d1		 sub	 dl, cl
  00d49	30 94 05 d4 fe
	ff ff		 xor	 BYTE PTR __t$516008[ebp+eax], dl
  00d50	40		 inc	 eax
  00d51	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00d54	7c e0		 jl	 SHORT $LL2116@AddRenderI
  00d56	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00d5c	8d b5 d4 fe ff
	ff		 lea	 esi, DWORD PTR __t$516008[ebp]
  00d62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2510@AddRenderI:
  00d68	8a 08		 mov	 cl, BYTE PTR [eax]
  00d6a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00d6c	75 18		 jne	 SHORT $LN2511@AddRenderI
  00d6e	3a cb		 cmp	 cl, bl
  00d70	74 10		 je	 SHORT $LN2512@AddRenderI
  00d72	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00d75	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00d78	75 0c		 jne	 SHORT $LN2511@AddRenderI
  00d7a	03 c7		 add	 eax, edi
  00d7c	03 f7		 add	 esi, edi
  00d7e	3a cb		 cmp	 cl, bl
  00d80	75 e6		 jne	 SHORT $LL2510@AddRenderI
$LN2512@AddRenderI:
  00d82	33 c0		 xor	 eax, eax
  00d84	eb 05		 jmp	 SHORT $LN2513@AddRenderI
$LN2511@AddRenderI:
  00d86	1b c0		 sbb	 eax, eax
  00d88	83 d8 ff	 sbb	 eax, -1
$LN2513@AddRenderI:
  00d8b	3b c3		 cmp	 eax, ebx
  00d8d	75 3c		 jne	 SHORT $LN2436@AddRenderI

; 152  : 	{
; 153  : 		SAFEDELETE( m_pBallEffect[7] );

  00d8f	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00d95	39 98 a8 01 00
	00		 cmp	 DWORD PTR [eax+424], ebx
  00d9b	74 1d		 je	 SHORT $LN8@AddRenderI
  00d9d	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  00da3	3b cb		 cmp	 ecx, ebx
  00da5	74 0d		 je	 SHORT $LN102@AddRenderI
  00da7	8b 01		 mov	 eax, DWORD PTR [ecx]
  00da9	6a 01		 push	 1
  00dab	ff 50 40	 call	 DWORD PTR [eax+64]
  00dae	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN102@AddRenderI:
  00db4	89 98 a8 01 00
	00		 mov	 DWORD PTR [eax+424], ebx
$LN8@AddRenderI:

; 154  : 		m_pBallEffect[7] = pImage;

  00dba	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00dc0	89 88 a8 01 00
	00		 mov	 DWORD PTR [eax+424], ecx
  00dc6	e9 8d 01 00 00	 jmp	 $LN1@AddRenderI
$LN2436@AddRenderI:

; 155  : 	}
; 156  : 	else if( szType == "BallEffect9" )

  00dcb	c7 85 e4 fe ff
	ff af 8d 87 86	 mov	 DWORD PTR __t$516146[ebp], -2037936721 ; 86878dafH
  00dd5	c7 85 e8 fe ff
	ff a8 8a 8d 8f	 mov	 DWORD PTR __t$516146[ebp+4], -1886549336 ; 8f8d8aa8H
  00ddf	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR __t$516146[ebp]
  00de5	c7 85 ec fe ff
	ff 8e 98 d2 00	 mov	 DWORD PTR __t$516146[ebp+8], 13801614 ; 00d2988eH
  00def	8b cf		 mov	 ecx, edi
$LL2225@AddRenderI:
  00df1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00df7	83 c0 04	 add	 eax, 4
  00dfa	49		 dec	 ecx
  00dfb	75 f4		 jne	 SHORT $LL2225@AddRenderI
  00dfd	6a 08		 push	 8
  00dff	58		 pop	 eax
$LL2222@AddRenderI:
  00e00	8b c8		 mov	 ecx, eax
  00e02	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00e08	79 05		 jns	 SHORT $LN2535@AddRenderI
  00e0a	49		 dec	 ecx
  00e0b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00e0e	41		 inc	 ecx
$LN2535@AddRenderI:
  00e0f	b2 ed		 mov	 dl, -19			; ffffffedH
  00e11	2a d1		 sub	 dl, cl
  00e13	30 94 05 e4 fe
	ff ff		 xor	 BYTE PTR __t$516146[ebp+eax], dl
  00e1a	40		 inc	 eax
  00e1b	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00e1e	7c e0		 jl	 SHORT $LL2222@AddRenderI
  00e20	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00e26	8d b5 e4 fe ff
	ff		 lea	 esi, DWORD PTR __t$516146[ebp]
  00e2c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2514@AddRenderI:
  00e32	8a 08		 mov	 cl, BYTE PTR [eax]
  00e34	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00e36	75 18		 jne	 SHORT $LN2515@AddRenderI
  00e38	3a cb		 cmp	 cl, bl
  00e3a	74 10		 je	 SHORT $LN2516@AddRenderI
  00e3c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00e3f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00e42	75 0c		 jne	 SHORT $LN2515@AddRenderI
  00e44	03 c7		 add	 eax, edi
  00e46	03 f7		 add	 esi, edi
  00e48	3a cb		 cmp	 cl, bl
  00e4a	75 e6		 jne	 SHORT $LL2514@AddRenderI
$LN2516@AddRenderI:
  00e4c	33 c0		 xor	 eax, eax
  00e4e	eb 05		 jmp	 SHORT $LN2517@AddRenderI
$LN2515@AddRenderI:
  00e50	1b c0		 sbb	 eax, eax
  00e52	83 d8 ff	 sbb	 eax, -1
$LN2517@AddRenderI:
  00e55	3b c3		 cmp	 eax, ebx
  00e57	75 3c		 jne	 SHORT $LN2437@AddRenderI

; 157  : 	{
; 158  : 		SAFEDELETE( m_pBallEffect[8] );

  00e59	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00e5f	39 98 ac 01 00
	00		 cmp	 DWORD PTR [eax+428], ebx
  00e65	74 1d		 je	 SHORT $LN5@AddRenderI
  00e67	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [eax+428]
  00e6d	3b cb		 cmp	 ecx, ebx
  00e6f	74 0d		 je	 SHORT $LN104@AddRenderI
  00e71	8b 01		 mov	 eax, DWORD PTR [ecx]
  00e73	6a 01		 push	 1
  00e75	ff 50 40	 call	 DWORD PTR [eax+64]
  00e78	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN104@AddRenderI:
  00e7e	89 98 ac 01 00
	00		 mov	 DWORD PTR [eax+428], ebx
$LN5@AddRenderI:

; 159  : 		m_pBallEffect[8] = pImage;

  00e84	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00e8a	89 88 ac 01 00
	00		 mov	 DWORD PTR [eax+428], ecx
  00e90	e9 c3 00 00 00	 jmp	 $LN1@AddRenderI
$LN2437@AddRenderI:

; 160  : 	}
; 161  : 	else if( szType == "BallEffect10" )

  00e95	6a 03		 push	 3
  00e97	c7 85 c0 fe ff
	ff af 8d 87 86	 mov	 DWORD PTR __t$516271[ebp], -2037936721 ; 86878dafH
  00ea1	c7 85 c4 fe ff
	ff a8 8a 8d 8f	 mov	 DWORD PTR __t$516271[ebp+4], -1886549336 ; 8f8d8aa8H
  00eab	c7 85 c8 fe ff
	ff 8e 98 da da	 mov	 DWORD PTR __t$516271[ebp+8], -623208306 ; dada988eH
  00eb5	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __t$516271[ebp]
  00ebb	88 9d cc fe ff
	ff		 mov	 BYTE PTR __t$516271[ebp+12], bl
  00ec1	59		 pop	 ecx
$LL2331@AddRenderI:
  00ec2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00ec8	83 c0 04	 add	 eax, 4
  00ecb	49		 dec	 ecx
  00ecc	75 f4		 jne	 SHORT $LL2331@AddRenderI
  00ece	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00ed4	8d b5 c0 fe ff
	ff		 lea	 esi, DWORD PTR __t$516271[ebp]
  00eda	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL2518@AddRenderI:
  00ee0	8a 08		 mov	 cl, BYTE PTR [eax]
  00ee2	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00ee4	75 18		 jne	 SHORT $LN2519@AddRenderI
  00ee6	3a cb		 cmp	 cl, bl
  00ee8	74 10		 je	 SHORT $LN2520@AddRenderI
  00eea	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00eed	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00ef0	75 0c		 jne	 SHORT $LN2519@AddRenderI
  00ef2	03 c7		 add	 eax, edi
  00ef4	03 f7		 add	 esi, edi
  00ef6	3a cb		 cmp	 cl, bl
  00ef8	75 e6		 jne	 SHORT $LL2518@AddRenderI
$LN2520@AddRenderI:
  00efa	33 c0		 xor	 eax, eax
  00efc	eb 05		 jmp	 SHORT $LN2521@AddRenderI
$LN2519@AddRenderI:
  00efe	1b c0		 sbb	 eax, eax
  00f00	83 d8 ff	 sbb	 eax, -1
$LN2521@AddRenderI:
  00f03	3b c3		 cmp	 eax, ebx
  00f05	75 39		 jne	 SHORT $LN3@AddRenderI

; 162  : 	{
; 163  : 		SAFEDELETE( m_pBallEffect[9] );

  00f07	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00f0d	39 98 b0 01 00
	00		 cmp	 DWORD PTR [eax+432], ebx
  00f13	74 1d		 je	 SHORT $LN2@AddRenderI
  00f15	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00f1b	3b cb		 cmp	 ecx, ebx
  00f1d	74 0d		 je	 SHORT $LN106@AddRenderI
  00f1f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00f21	6a 01		 push	 1
  00f23	ff 50 40	 call	 DWORD PTR [eax+64]
  00f26	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN106@AddRenderI:
  00f2c	89 98 b0 01 00
	00		 mov	 DWORD PTR [eax+432], ebx
$LN2@AddRenderI:

; 164  : 		m_pBallEffect[9] = pImage;

  00f32	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  00f38	89 88 b0 01 00
	00		 mov	 DWORD PTR [eax+432], ecx

; 165  : 	}
; 166  : 	else

  00f3e	eb 18		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 167  : 		ioWnd::AddRenderImage( szType, pImage );

  00f40	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _pImage$GSCopy$[ebp]
  00f46	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00f4c	ff b5 a0 fe ff
	ff		 push	 DWORD PTR _szType$GSCopy$[ebp]
  00f52	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 168  : }

  00f58	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f5b	5f		 pop	 edi
  00f5c	5e		 pop	 esi
  00f5d	33 cd		 xor	 ecx, ebp
  00f5f	5b		 pop	 ebx
  00f60	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f65	c9		 leave
  00f66	c2 08 00	 ret	 8
?AddRenderImage@BingoRightWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; BingoRightWnd::AddRenderImage
_TEXT	ENDS
PUBLIC	_xElement$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ParseExtraInfo@BingoRightWnd@@MAEXAAVioXMLElement@@@Z ; BingoRightWnd::ParseExtraInfo
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ParseExtraInfo@BingoRightWnd@@MAEXAAVioXMLElement@@@Z
_TEXT	SEGMENT
_xElement$GSCopy$ = -28					; size = 4
__k$517022 = -24					; size = 14
__k$516897 = -24					; size = 14
__k$516772 = -24					; size = 14
__k$516647 = -24					; size = 14
__$ArrayPad$ = -4					; size = 4
_xElement$ = 8						; size = 4
?ParseExtraInfo@BingoRightWnd@@MAEXAAVioXMLElement@@@Z PROC ; BingoRightWnd::ParseExtraInfo, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b d9		 mov	 ebx, ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _xElement$[ebp]

; 172  : 	m_szBallAniSound1 = xElement.GetStringAttribute_e( "BallAniSound1" );

  00018	6a 03		 push	 3

; 175  : 	m_szAllBingoSound = xElement.GetStringAttribute_e( "AllBingoSound" );

  0001a	89 4d e4	 mov	 DWORD PTR _xElement$GSCopy$[ebp], ecx
  0001d	c7 45 e8 af 8d
	87 86		 mov	 DWORD PTR __k$516647[ebp], -2037936721 ; 86878dafH
  00024	c7 45 ec ac 82
	82 b9		 mov	 DWORD PTR __k$516647[ebp+4], -1182629204 ; b98282acH
  0002b	c7 45 f0 82 99
	85 8e		 mov	 DWORD PTR __k$516647[ebp+8], -1903847038 ; 8e859982H
  00032	8d 45 e8	 lea	 eax, DWORD PTR __k$516647[ebp]
  00035	66 c7 45 f4 dc
	00		 mov	 WORD PTR __k$516647[ebp+12], 220 ; 000000dcH
  0003b	5a		 pop	 edx
$LL106@ParseExtra:

; 172  : 	m_szBallAniSound1 = xElement.GetStringAttribute_e( "BallAniSound1" );

  0003c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00042	83 c0 04	 add	 eax, 4
  00045	4a		 dec	 edx
  00046	75 f4		 jne	 SHORT $LL106@ParseExtra
  00048	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetStringAttribute@ioXMLElement@@QBEPBDPBD@Z
  0004e	80 75 f4 ed	 xor	 BYTE PTR __k$516647[ebp+12], -19 ; ffffffedH
  00052	8d 45 e8	 lea	 eax, DWORD PTR __k$516647[ebp]
  00055	50		 push	 eax
  00056	ff d6		 call	 esi
  00058	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0005e	50		 push	 eax
  0005f	8d 8b 64 02 00
	00		 lea	 ecx, DWORD PTR [ebx+612]
  00065	ff d7		 call	 edi
  00067	6a 03		 push	 3

; 173  : 	m_szBallAniSound2 = xElement.GetStringAttribute_e( "BallAniSound2" );

  00069	c7 45 e8 af 8d
	87 86		 mov	 DWORD PTR __k$516772[ebp], -2037936721 ; 86878dafH
  00070	c7 45 ec ac 82
	82 b9		 mov	 DWORD PTR __k$516772[ebp+4], -1182629204 ; b98282acH
  00077	c7 45 f0 82 99
	85 8e		 mov	 DWORD PTR __k$516772[ebp+8], -1903847038 ; 8e859982H
  0007e	8d 45 e8	 lea	 eax, DWORD PTR __k$516772[ebp]
  00081	66 c7 45 f4 df
	00		 mov	 WORD PTR __k$516772[ebp+12], 223 ; 000000dfH
  00087	59		 pop	 ecx
$LL212@ParseExtra:
  00088	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0008e	83 c0 04	 add	 eax, 4
  00091	49		 dec	 ecx
  00092	75 f4		 jne	 SHORT $LL212@ParseExtra
  00094	8b 4d e4	 mov	 ecx, DWORD PTR _xElement$GSCopy$[ebp]
  00097	80 75 f4 ed	 xor	 BYTE PTR __k$516772[ebp+12], -19 ; ffffffedH
  0009b	8d 45 e8	 lea	 eax, DWORD PTR __k$516772[ebp]
  0009e	50		 push	 eax
  0009f	ff d6		 call	 esi
  000a1	50		 push	 eax
  000a2	8d 8b 74 02 00
	00		 lea	 ecx, DWORD PTR [ebx+628]
  000a8	ff d7		 call	 edi
  000aa	6a 03		 push	 3

; 174  : 	m_szBallAniSound3 = xElement.GetStringAttribute_e( "BallAniSound3" );

  000ac	c7 45 e8 af 8d
	87 86		 mov	 DWORD PTR __k$516897[ebp], -2037936721 ; 86878dafH
  000b3	c7 45 ec ac 82
	82 b9		 mov	 DWORD PTR __k$516897[ebp+4], -1182629204 ; b98282acH
  000ba	c7 45 f0 82 99
	85 8e		 mov	 DWORD PTR __k$516897[ebp+8], -1903847038 ; 8e859982H
  000c1	8d 45 e8	 lea	 eax, DWORD PTR __k$516897[ebp]
  000c4	66 c7 45 f4 de
	00		 mov	 WORD PTR __k$516897[ebp+12], 222 ; 000000deH
  000ca	59		 pop	 ecx
$LL318@ParseExtra:
  000cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000d1	83 c0 04	 add	 eax, 4
  000d4	49		 dec	 ecx
  000d5	75 f4		 jne	 SHORT $LL318@ParseExtra
  000d7	8b 4d e4	 mov	 ecx, DWORD PTR _xElement$GSCopy$[ebp]
  000da	80 75 f4 ed	 xor	 BYTE PTR __k$516897[ebp+12], -19 ; ffffffedH
  000de	8d 45 e8	 lea	 eax, DWORD PTR __k$516897[ebp]
  000e1	50		 push	 eax
  000e2	ff d6		 call	 esi
  000e4	50		 push	 eax
  000e5	8d 8b 84 02 00
	00		 lea	 ecx, DWORD PTR [ebx+644]
  000eb	ff d7		 call	 edi
  000ed	6a 03		 push	 3

; 175  : 	m_szAllBingoSound = xElement.GetStringAttribute_e( "AllBingoSound" );

  000ef	c7 45 e8 ac 80
	87 a8		 mov	 DWORD PTR __k$517022[ebp], -1467514708 ; a88780acH
  000f6	c7 45 ec 84 82
	8c 85		 mov	 DWORD PTR __k$517022[ebp+4], -2054389116 ; 858c8284H
  000fd	c7 45 f0 be 83
	9e 84		 mov	 DWORD PTR __k$517022[ebp+8], -2069986370 ; 849e83beH
  00104	8d 45 e8	 lea	 eax, DWORD PTR __k$517022[ebp]
  00107	66 c7 45 f4 89
	00		 mov	 WORD PTR __k$517022[ebp+12], 137 ; 00000089H
  0010d	59		 pop	 ecx
$LL424@ParseExtra:
  0010e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00114	83 c0 04	 add	 eax, 4
  00117	49		 dec	 ecx
  00118	75 f4		 jne	 SHORT $LL424@ParseExtra
  0011a	8b 4d e4	 mov	 ecx, DWORD PTR _xElement$GSCopy$[ebp]
  0011d	80 75 f4 ed	 xor	 BYTE PTR __k$517022[ebp+12], -19 ; ffffffedH
  00121	8d 45 e8	 lea	 eax, DWORD PTR __k$517022[ebp]
  00124	50		 push	 eax
  00125	ff d6		 call	 esi
  00127	50		 push	 eax
  00128	8d 8b 94 02 00
	00		 lea	 ecx, DWORD PTR [ebx+660]
  0012e	ff d7		 call	 edi

; 176  : }

  00130	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	33 cd		 xor	 ecx, ebp
  00137	5b		 pop	 ebx
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	c9		 leave
  0013e	c2 04 00	 ret	 4
?ParseExtraInfo@BingoRightWnd@@MAEXAAVioXMLElement@@@Z ENDP ; BingoRightWnd::ParseExtraInfo
_TEXT	ENDS
PUBLIC	?OnRender@BingoRightWnd@@MAEXXZ			; BingoRightWnd::OnRender
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnRender@BingoRightWnd@@MAEXXZ
_TEXT	SEGMENT
?OnRender@BingoRightWnd@@MAEXXZ PROC			; BingoRightWnd::OnRender, COMDAT
; _this$ = ecx

; 436  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 437  : 	ioWnd::OnRender();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 438  : 
; 439  : 	int iXPos = GetDerivedPosX();

  0000b	8b ce		 mov	 ecx, esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 440  : 	int iYPos = GetDerivedPosY();

  00013	8b ce		 mov	 ecx, esi
  00015	8b f8		 mov	 edi, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  0001d	8b d8		 mov	 ebx, eax

; 441  : 
; 442  : 	switch( m_WindowType )

  0001f	8b 86 b4 01 00
	00		 mov	 eax, DWORD PTR [esi+436]
  00025	48		 dec	 eax
  00026	74 4e		 je	 SHORT $LN8@OnRender
  00028	48		 dec	 eax
  00029	74 40		 je	 SHORT $LN7@OnRender
  0002b	48		 dec	 eax
  0002c	74 32		 je	 SHORT $LN6@OnRender
  0002e	48		 dec	 eax
  0002f	75 4e		 jne	 SHORT $LN9@OnRender

; 453  : 	case RWT_ALL_BINGO:
; 454  : 		{
; 455  : 			ioBingo *pBingo = g_MyInfo.GetBingo();

  00031	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton

; 456  : 			switch( pBingo->GetBingoType() )

  00036	8b 80 94 0b 00
	00		 mov	 eax, DWORD PTR [eax+2964]
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003f	83 e8 00	 sub	 eax, 0
  00042	74 0b		 je	 SHORT $LN2@OnRender
  00044	48		 dec	 eax
  00045	75 38		 jne	 SHORT $LN9@OnRender

; 460  : 				break;
; 461  : 			case ioBingo::BT_FIXED:
; 462  : 				RenderAllBingo( iXPos, iYPos, m_pTextClear );

  00047	ff b6 6c 01 00
	00		 push	 DWORD PTR [esi+364]

; 463  : 				break;

  0004d	eb 06		 jmp	 SHORT $LN17@OnRender
$LN2@OnRender:

; 457  : 			{
; 458  : 			case ioBingo::BT_RAND:
; 459  : 				RenderAllBingo( iXPos, iYPos, m_pTextBingo );

  0004f	ff b6 64 01 00
	00		 push	 DWORD PTR [esi+356]
$LN17@OnRender:
  00055	53		 push	 ebx
  00056	57		 push	 edi
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?RenderAllBingo@BingoRightWnd@@IAEXHHPAVioUIRenderImage@@@Z ; BingoRightWnd::RenderAllBingo

; 464  : 			}
; 465  : 		}
; 466  : 		break;

  0005e	eb 1f		 jmp	 SHORT $LN9@OnRender
$LN6@OnRender:

; 450  : 	case RWT_FIXED_PLAY:
; 451  : 		RenderFixedPlay( iXPos, iYPos );

  00060	53		 push	 ebx
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?RenderFixedPlay@BingoRightWnd@@IAEXHH@Z ; BingoRightWnd::RenderFixedPlay

; 452  : 		break;

  00069	eb 14		 jmp	 SHORT $LN9@OnRender
$LN7@OnRender:

; 446  : 		break;
; 447  : 	case RWT_RAND_PLAY:
; 448  : 		RenderRandPlay( iXPos, iYPos );

  0006b	53		 push	 ebx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?RenderRandPlay@BingoRightWnd@@IAEXHH@Z ; BingoRightWnd::RenderRandPlay

; 449  : 		break;

  00074	eb 09		 jmp	 SHORT $LN9@OnRender
$LN8@OnRender:

; 443  : 	{
; 444  : 	case RWT_START:
; 445  : 		RenderStart( iXPos, iYPos );

  00076	53		 push	 ebx
  00077	57		 push	 edi
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ?RenderStart@BingoRightWnd@@IAEXHH@Z ; BingoRightWnd::RenderStart
$LN9@OnRender:

; 467  : 	}
; 468  : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	c3		 ret	 0
?OnRender@BingoRightWnd@@MAEXXZ ENDP			; BingoRightWnd::OnRender
_TEXT	ENDS
PUBLIC	?OnRenderAfterChild@BingoRightWnd@@MAEXXZ	; BingoRightWnd::OnRenderAfterChild
; Function compile flags: /Ogsp
;	COMDAT ?OnRenderAfterChild@BingoRightWnd@@MAEXXZ
_TEXT	SEGMENT
?OnRenderAfterChild@BingoRightWnd@@MAEXXZ PROC		; BingoRightWnd::OnRenderAfterChild, COMDAT
; _this$ = ecx

; 471  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 472  : 	int iXPos = GetDerivedPosX();

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 473  : 	int iYPos = GetDerivedPosY();

  0000a	8b ce		 mov	 ecx, esi
  0000c	8b f8		 mov	 edi, eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 474  : 
; 475  : 	RenderBallAni( iXPos, iYPos );

  00014	50		 push	 eax
  00015	57		 push	 edi
  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?RenderBallAni@BingoRightWnd@@IAEXHH@Z ; BingoRightWnd::RenderBallAni
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 476  : }

  0001f	c3		 ret	 0
?OnRenderAfterChild@BingoRightWnd@@MAEXXZ ENDP		; BingoRightWnd::OnRenderAfterChild
_TEXT	ENDS
PUBLIC	?PointOnCubicBezier@BingoRightWnd@@IAE?AUD3DXVECTOR2@@PAU2@M@Z ; BingoRightWnd::PointOnCubicBezier
; Function compile flags: /Ogsp
;	COMDAT ?PointOnCubicBezier@BingoRightWnd@@IAE?AUD3DXVECTOR2@@PAU2@M@Z
_TEXT	SEGMENT
$T517144 = -48						; size = 8
$T517136 = -48						; size = 8
$T517133 = -48						; size = 8
$T517130 = -48						; size = 8
$T517113 = -48						; size = 8
$T517137 = -40						; size = 8
$T517134 = -40						; size = 8
$T517126 = -40						; size = 8
$T517125 = -40						; size = 8
$T517114 = -40						; size = 8
$T517428 = -32						; size = 8
$T517129 = -32						; size = 8
$T517124 = -32						; size = 8
$T517121 = -32						; size = 8
$T517118 = -32						; size = 8
$T517115 = -32						; size = 8
$T517429 = -24						; size = 8
$T517444 = -24						; size = 8
$T517393 = -24						; size = 8
$T517342 = -24						; size = 8
$T517291 = -24						; size = 8
$T517131 = -24						; size = 8
$T517122 = -24						; size = 8
$T517119 = -24						; size = 8
$T517116 = -24						; size = 8
$T517240 = -16						; size = 8
$T517110 = -16						; size = 8
$T517443 = -8						; size = 8
$T517392 = -8						; size = 8
$T517341 = -8						; size = 8
$T517290 = -8						; size = 8
$T517239 = -8						; size = 8
$T517117 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_vP$ = 12						; size = 4
_t$ = 16						; size = 4
?PointOnCubicBezier@BingoRightWnd@@IAE?AUD3DXVECTOR2@@PAU2@M@Z PROC ; BingoRightWnd::PointOnCubicBezier, COMDAT
; _this$ = ecx

; 1041 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 1042 : 	D3DXVECTOR2 vA0, vA1, vA2, vA3, vA4;
; 1043 : 	D3DXVECTOR2 vQ0, vQ1, vQ2, vQ3;
; 1044 : 	D3DXVECTOR2 vR0, vR1, vR2;
; 1045 : 	D3DXVECTOR2 vJ0, vJ1;
; 1046 : 	D3DXVECTOR2 vResult;
; 1047 : 
; 1048 : 	vA0 = CalcLinear( vP[0], vP[1] , t );

  00006	8b 45 0c	 mov	 eax, DWORD PTR _vP$[ebp]
  00009	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000c	89 4d f0	 mov	 DWORD PTR $T517240[ebp], ecx
  0000f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00012	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR $T517240[ebp]
  00017	89 4d f4	 mov	 DWORD PTR $T517240[ebp+4], ecx
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d f8	 mov	 DWORD PTR $T517239[ebp], ecx
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR $T517239[ebp]
  00027	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002a	89 4d fc	 mov	 DWORD PTR $T517239[ebp+4], ecx
  0002d	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR $T517239[ebp+4]

; 1049 : 	vA1 = CalcLinear( vP[1], vP[2] , t);

  00032	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00035	0f 5a d2	 cvtps2pd xmm2, xmm2
  00038	0f 5a c0	 cvtps2pd xmm0, xmm0
  0003b	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0003f	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR $T517240[ebp+4]
  00044	0f 5a c9	 cvtps2pd xmm1, xmm1
  00047	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0004b	0f 57 d2	 xorps	 xmm2, xmm2
  0004e	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00052	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00056	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0005a	f3 0f 5a d0	 cvtss2sd xmm2, xmm0
  0005e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00063	0f 5a d8	 cvtps2pd xmm3, xmm0
  00066	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  0006a	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0006e	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00072	89 4d e8	 mov	 DWORD PTR $T517291[ebp], ecx
  00075	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00078	0f 5a d8	 cvtps2pd xmm3, xmm0
  0007b	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  0007f	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR $T517239[ebp]
  00084	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00088	0f 5a db	 cvtps2pd xmm3, xmm3
  0008b	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0008f	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00093	f3 0f 11 55 f0	 movss	 DWORD PTR $T517110[ebp], xmm2
  00098	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR $T517239[ebp+4]
  0009d	0f 5a d2	 cvtps2pd xmm2, xmm2
  000a0	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000a4	f2 0f 58 ca	 addsd	 xmm1, xmm2
  000a8	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000ac	89 4d ec	 mov	 DWORD PTR $T517291[ebp+4], ecx
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	f3 0f 11 4d f4	 movss	 DWORD PTR $T517110[ebp+4], xmm1
  000b7	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR $T517291[ebp]
  000bc	89 4d f8	 mov	 DWORD PTR $T517290[ebp], ecx
  000bf	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c2	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR $T517290[ebp]
  000c7	0f 5a d2	 cvtps2pd xmm2, xmm2
  000ca	0f 5a c9	 cvtps2pd xmm1, xmm1
  000cd	f2 0f 5c ca	 subsd	 xmm1, xmm2
  000d1	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR $T517291[ebp+4]
  000d6	89 4d fc	 mov	 DWORD PTR $T517290[ebp+4], ecx
  000d9	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR $T517290[ebp+4]
  000de	0f 5a db	 cvtps2pd xmm3, xmm3
  000e1	0f 5a d2	 cvtps2pd xmm2, xmm2
  000e4	f2 0f 5c d3	 subsd	 xmm2, xmm3
  000e8	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000ec	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  000f0	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000f4	0f 5a d8	 cvtps2pd xmm3, xmm0
  000f7	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  000fb	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  000ff	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00103	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00107	0f 5a d8	 cvtps2pd xmm3, xmm0
  0010a	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  0010e	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR $T517290[ebp]
  00113	0f 5a db	 cvtps2pd xmm3, xmm3
  00116	f2 0f 58 cb	 addsd	 xmm1, xmm3
  0011a	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR $T517290[ebp+4]
  0011f	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00123	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00127	0f 5a db	 cvtps2pd xmm3, xmm3
  0012a	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0012e	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00132	66 0f 5a d2	 cvtpd2ps xmm2, xmm2

; 1050 : 	vA2 = CalcLinear( vP[2], vP[3] , t);

  00136	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00139	89 4d e8	 mov	 DWORD PTR $T517342[ebp], ecx
  0013c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0013f	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR $T517342[ebp]
  00144	89 4d ec	 mov	 DWORD PTR $T517342[ebp+4], ecx
  00147	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0014a	89 4d f8	 mov	 DWORD PTR $T517341[ebp], ecx
  0014d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00150	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR $T517341[ebp]
  00155	89 4d fc	 mov	 DWORD PTR $T517341[ebp+4], ecx
  00158	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR $T517341[ebp+4]

; 1051 : 	vA3 = CalcLinear( vP[3], vP[4] , t);

  0015d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00160	0f 5a ed	 cvtps2pd xmm5, xmm5
  00163	0f 5a e4	 cvtps2pd xmm4, xmm4
  00166	0f 5a db	 cvtps2pd xmm3, xmm3
  00169	f2 0f 5c dc	 subsd	 xmm3, xmm4
  0016d	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR $T517342[ebp+4]
  00172	0f 5a e4	 cvtps2pd xmm4, xmm4
  00175	f2 0f 5c e5	 subsd	 xmm4, xmm5
  00179	0f 5a e8	 cvtps2pd xmm5, xmm0
  0017c	89 4d e8	 mov	 DWORD PTR $T517393[ebp], ecx
  0017f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00182	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  00186	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  0018a	f3 0f 5a db	 cvtss2sd xmm3, xmm3
  0018e	f2 0f 59 dd	 mulsd	 xmm3, xmm5
  00192	0f 5a e8	 cvtps2pd xmm5, xmm0
  00195	89 4d ec	 mov	 DWORD PTR $T517393[ebp+4], ecx
  00198	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0019b	f3 0f 5a e4	 cvtss2sd xmm4, xmm4
  0019f	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  001a3	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR $T517341[ebp]
  001a8	0f 5a ed	 cvtps2pd xmm5, xmm5
  001ab	89 4d f8	 mov	 DWORD PTR $T517392[ebp], ecx
  001ae	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  001b1	f3 0f 10 75 f8	 movss	 xmm6, DWORD PTR $T517392[ebp]
  001b6	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  001ba	0f 5a f6	 cvtps2pd xmm6, xmm6
  001bd	f3 0f 5a db	 cvtss2sd xmm3, xmm3
  001c1	f2 0f 58 dd	 addsd	 xmm3, xmm5
  001c5	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR $T517341[ebp+4]
  001ca	0f 5a ed	 cvtps2pd xmm5, xmm5
  001cd	89 4d fc	 mov	 DWORD PTR $T517392[ebp+4], ecx
  001d0	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR $T517392[ebp+4]

; 1052 : 	vA4 = CalcLinear( vP[4], vP[5] , t);

  001d5	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001d8	0f 5a ff	 cvtps2pd xmm7, xmm7
  001db	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  001df	f3 0f 5a e4	 cvtss2sd xmm4, xmm4
  001e3	f2 0f 58 e5	 addsd	 xmm4, xmm5
  001e7	f3 0f 10 6d e8	 movss	 xmm5, DWORD PTR $T517393[ebp]
  001ec	0f 5a ed	 cvtps2pd xmm5, xmm5
  001ef	f2 0f 5c ee	 subsd	 xmm5, xmm6
  001f3	f3 0f 10 75 ec	 movss	 xmm6, DWORD PTR $T517393[ebp+4]
  001f8	0f 5a f6	 cvtps2pd xmm6, xmm6
  001fb	f2 0f 5c f7	 subsd	 xmm6, xmm7
  001ff	0f 5a f8	 cvtps2pd xmm7, xmm0
  00202	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  00206	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  0020a	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  0020e	f2 0f 59 ef	 mulsd	 xmm5, xmm7
  00212	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  00216	0f 5a f8	 cvtps2pd xmm7, xmm0
  00219	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0021d	f3 0f 10 7d f8	 movss	 xmm7, DWORD PTR $T517392[ebp]
  00222	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  00226	0f 5a ff	 cvtps2pd xmm7, xmm7
  00229	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  0022d	f2 0f 58 ef	 addsd	 xmm5, xmm7
  00231	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR $T517392[ebp+4]
  00236	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  0023a	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  0023e	0f 5a ff	 cvtps2pd xmm7, xmm7
  00241	89 4d e8	 mov	 DWORD PTR $T517444[ebp], ecx
  00244	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00247	f2 0f 58 f7	 addsd	 xmm6, xmm7
  0024b	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  0024f	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  00253	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  00257	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  0025b	f3 0f 11 75 d4	 movss	 DWORD PTR $T517113[ebp+4], xmm6
  00260	89 4d ec	 mov	 DWORD PTR $T517444[ebp+4], ecx
  00263	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00266	f3 0f 10 75 e8	 movss	 xmm6, DWORD PTR $T517444[ebp]
  0026b	0f 5a f6	 cvtps2pd xmm6, xmm6
  0026e	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00271	89 4d f8	 mov	 DWORD PTR $T517443[ebp], ecx
  00274	f3 0f 10 7d f8	 movss	 xmm7, DWORD PTR $T517443[ebp]
  00279	0f 5a ff	 cvtps2pd xmm7, xmm7
  0027c	f2 0f 5c f7	 subsd	 xmm6, xmm7
  00280	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  00284	f3 0f 11 75 e0	 movss	 DWORD PTR $T517428[ebp], xmm6
  00289	f3 0f 10 75 ec	 movss	 xmm6, DWORD PTR $T517444[ebp+4]
  0028e	0f 5a f6	 cvtps2pd xmm6, xmm6
  00291	89 45 fc	 mov	 DWORD PTR $T517443[ebp+4], eax
  00294	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR $T517443[ebp+4]
  00299	0f 5a ff	 cvtps2pd xmm7, xmm7
  0029c	f2 0f 5c f7	 subsd	 xmm6, xmm7
  002a0	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  002a4	f3 0f 11 75 e4	 movss	 DWORD PTR $T517428[ebp+4], xmm6
  002a9	f3 0f 10 75 e0	 movss	 xmm6, DWORD PTR $T517428[ebp]
  002ae	0f 5a f6	 cvtps2pd xmm6, xmm6
  002b1	0f 5a f8	 cvtps2pd xmm7, xmm0
  002b4	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  002b8	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  002bc	f3 0f 11 75 e8	 movss	 DWORD PTR $T517429[ebp], xmm6
  002c1	f3 0f 10 75 e4	 movss	 xmm6, DWORD PTR $T517428[ebp+4]
  002c6	0f 5a f6	 cvtps2pd xmm6, xmm6
  002c9	0f 5a f8	 cvtps2pd xmm7, xmm0
  002cc	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  002d0	f3 0f 10 7d f8	 movss	 xmm7, DWORD PTR $T517443[ebp]
  002d5	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  002d9	f3 0f 11 75 ec	 movss	 DWORD PTR $T517429[ebp+4], xmm6
  002de	f3 0f 10 75 e8	 movss	 xmm6, DWORD PTR $T517429[ebp]
  002e3	0f 5a f6	 cvtps2pd xmm6, xmm6
  002e6	0f 5a ff	 cvtps2pd xmm7, xmm7
  002e9	f2 0f 58 f7	 addsd	 xmm6, xmm7
  002ed	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR $T517443[ebp+4]
  002f2	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  002f6	f3 0f 11 75 d8	 movss	 DWORD PTR $T517114[ebp], xmm6
  002fb	f3 0f 10 75 ec	 movss	 xmm6, DWORD PTR $T517429[ebp+4]
  00300	0f 5a f6	 cvtps2pd xmm6, xmm6
  00303	0f 5a ff	 cvtps2pd xmm7, xmm7
  00306	f2 0f 58 f7	 addsd	 xmm6, xmm7

; 1053 : 
; 1054 : 	vQ0 = vA0 + ( vA1 - vA0 ) * t ;

  0030a	f3 0f 10 7d f0	 movss	 xmm7, DWORD PTR $T517110[ebp]
  0030f	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00313	f3 0f 11 75 dc	 movss	 DWORD PTR $T517114[ebp+4], xmm6
  00318	0f 57 f6	 xorps	 xmm6, xmm6
  0031b	f3 0f 5a f1	 cvtss2sd xmm6, xmm1
  0031f	0f 5a ff	 cvtps2pd xmm7, xmm7
  00322	f2 0f 5c f7	 subsd	 xmm6, xmm7
  00326	f3 0f 10 7d f4	 movss	 xmm7, DWORD PTR $T517110[ebp+4]
  0032b	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  0032f	f3 0f 11 75 e0	 movss	 DWORD PTR $T517115[ebp], xmm6
  00334	0f 57 f6	 xorps	 xmm6, xmm6
  00337	f3 0f 5a f2	 cvtss2sd xmm6, xmm2
  0033b	0f 5a ff	 cvtps2pd xmm7, xmm7
  0033e	f2 0f 5c f7	 subsd	 xmm6, xmm7
  00342	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  00346	f3 0f 11 75 e4	 movss	 DWORD PTR $T517115[ebp+4], xmm6
  0034b	f3 0f 10 75 e0	 movss	 xmm6, DWORD PTR $T517115[ebp]
  00350	0f 5a f6	 cvtps2pd xmm6, xmm6
  00353	0f 5a f8	 cvtps2pd xmm7, xmm0
  00356	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0035a	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  0035e	f3 0f 11 75 e8	 movss	 DWORD PTR $T517116[ebp], xmm6
  00363	f3 0f 10 75 e4	 movss	 xmm6, DWORD PTR $T517115[ebp+4]
  00368	0f 5a f6	 cvtps2pd xmm6, xmm6
  0036b	0f 5a f8	 cvtps2pd xmm7, xmm0
  0036e	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00372	f3 0f 10 7d f0	 movss	 xmm7, DWORD PTR $T517110[ebp]
  00377	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  0037b	f3 0f 11 75 ec	 movss	 DWORD PTR $T517116[ebp+4], xmm6
  00380	f3 0f 10 75 e8	 movss	 xmm6, DWORD PTR $T517116[ebp]
  00385	0f 5a f6	 cvtps2pd xmm6, xmm6
  00388	0f 5a ff	 cvtps2pd xmm7, xmm7
  0038b	f2 0f 58 f7	 addsd	 xmm6, xmm7
  0038f	f3 0f 10 7d f4	 movss	 xmm7, DWORD PTR $T517110[ebp+4]
  00394	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00398	f3 0f 11 75 f8	 movss	 DWORD PTR $T517117[ebp], xmm6
  0039d	f3 0f 10 75 ec	 movss	 xmm6, DWORD PTR $T517116[ebp+4]
  003a2	0f 5a f6	 cvtps2pd xmm6, xmm6
  003a5	0f 5a ff	 cvtps2pd xmm7, xmm7
  003a8	f2 0f 58 f7	 addsd	 xmm6, xmm7
  003ac	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  003b0	f3 0f 11 75 fc	 movss	 DWORD PTR $T517117[ebp+4], xmm6

; 1055 : 	vQ1 = vA1 + ( vA2 - vA1 ) * t ;

  003b5	0f 57 f6	 xorps	 xmm6, xmm6
  003b8	f3 0f 5a f3	 cvtss2sd xmm6, xmm3
  003bc	0f 57 ff	 xorps	 xmm7, xmm7
  003bf	f3 0f 5a f9	 cvtss2sd xmm7, xmm1
  003c3	f2 0f 5c f7	 subsd	 xmm6, xmm7
  003c7	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  003cb	f3 0f 11 75 e0	 movss	 DWORD PTR $T517118[ebp], xmm6
  003d0	0f 57 f6	 xorps	 xmm6, xmm6
  003d3	f3 0f 5a f4	 cvtss2sd xmm6, xmm4
  003d7	0f 57 ff	 xorps	 xmm7, xmm7
  003da	f3 0f 5a fa	 cvtss2sd xmm7, xmm2
  003de	f2 0f 5c f7	 subsd	 xmm6, xmm7
  003e2	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  003e6	f3 0f 11 75 e4	 movss	 DWORD PTR $T517118[ebp+4], xmm6
  003eb	f3 0f 10 75 e0	 movss	 xmm6, DWORD PTR $T517118[ebp]
  003f0	0f 5a f6	 cvtps2pd xmm6, xmm6
  003f3	0f 5a f8	 cvtps2pd xmm7, xmm0
  003f6	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  003fa	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  003fe	f3 0f 11 75 e8	 movss	 DWORD PTR $T517119[ebp], xmm6
  00403	f3 0f 10 75 e4	 movss	 xmm6, DWORD PTR $T517118[ebp+4]
  00408	0f 5a f6	 cvtps2pd xmm6, xmm6
  0040b	0f 5a f8	 cvtps2pd xmm7, xmm0
  0040e	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00412	f3 0f 10 7d e8	 movss	 xmm7, DWORD PTR $T517119[ebp]
  00417	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  0041b	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  0041f	0f 5a ff	 cvtps2pd xmm7, xmm7
  00422	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00426	f2 0f 58 f9	 addsd	 xmm7, xmm1
  0042a	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  0042e	f2 0f 58 f2	 addsd	 xmm6, xmm2
  00432	0f 57 c9	 xorps	 xmm1, xmm1
  00435	f2 0f 5a cf	 cvtsd2ss xmm1, xmm7

; 1056 : 	vQ2 = vA2 + ( vA3 - vA2 ) * t ;

  00439	0f 57 ff	 xorps	 xmm7, xmm7
  0043c	f3 0f 5a fb	 cvtss2sd xmm7, xmm3
  00440	0f 57 d2	 xorps	 xmm2, xmm2
  00443	f2 0f 5a d6	 cvtsd2ss xmm2, xmm6
  00447	0f 57 f6	 xorps	 xmm6, xmm6
  0044a	f3 0f 5a f5	 cvtss2sd xmm6, xmm5
  0044e	f2 0f 5c f7	 subsd	 xmm6, xmm7
  00452	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  00456	f3 0f 11 75 e0	 movss	 DWORD PTR $T517121[ebp], xmm6
  0045b	f3 0f 10 75 d4	 movss	 xmm6, DWORD PTR $T517113[ebp+4]
  00460	0f 5a f6	 cvtps2pd xmm6, xmm6
  00463	0f 57 ff	 xorps	 xmm7, xmm7
  00466	f3 0f 5a fc	 cvtss2sd xmm7, xmm4
  0046a	f2 0f 5c f7	 subsd	 xmm6, xmm7
  0046e	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00472	f3 0f 11 75 e4	 movss	 DWORD PTR $T517121[ebp+4], xmm6
  00477	f3 0f 10 75 e0	 movss	 xmm6, DWORD PTR $T517121[ebp]
  0047c	0f 5a f6	 cvtps2pd xmm6, xmm6
  0047f	0f 5a f8	 cvtps2pd xmm7, xmm0
  00482	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00486	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  0048a	f3 0f 11 75 e8	 movss	 DWORD PTR $T517122[ebp], xmm6
  0048f	f3 0f 10 75 e4	 movss	 xmm6, DWORD PTR $T517121[ebp+4]
  00494	0f 5a f6	 cvtps2pd xmm6, xmm6
  00497	0f 5a f8	 cvtps2pd xmm7, xmm0
  0049a	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0049e	f3 0f 10 7d e8	 movss	 xmm7, DWORD PTR $T517122[ebp]
  004a3	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  004a7	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  004ab	0f 5a ff	 cvtps2pd xmm7, xmm7
  004ae	f3 0f 5a db	 cvtss2sd xmm3, xmm3
  004b2	f2 0f 58 fb	 addsd	 xmm7, xmm3
  004b6	f3 0f 5a e4	 cvtss2sd xmm4, xmm4
  004ba	f2 0f 58 f4	 addsd	 xmm6, xmm4
  004be	0f 57 db	 xorps	 xmm3, xmm3
  004c1	f2 0f 5a df	 cvtsd2ss xmm3, xmm7
  004c5	0f 57 e4	 xorps	 xmm4, xmm4
  004c8	f2 0f 5a e6	 cvtsd2ss xmm4, xmm6

; 1057 : 	vQ3 = vA3 + ( vA4 - vA3 ) * t ;

  004cc	f3 0f 10 75 d8	 movss	 xmm6, DWORD PTR $T517114[ebp]
  004d1	0f 5a f6	 cvtps2pd xmm6, xmm6
  004d4	0f 57 ff	 xorps	 xmm7, xmm7
  004d7	f3 0f 5a fd	 cvtss2sd xmm7, xmm5
  004db	f2 0f 5c f7	 subsd	 xmm6, xmm7
  004df	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  004e3	f3 0f 10 7d d4	 movss	 xmm7, DWORD PTR $T517113[ebp+4]
  004e8	f3 0f 11 75 e0	 movss	 DWORD PTR $T517124[ebp], xmm6
  004ed	f3 0f 10 75 dc	 movss	 xmm6, DWORD PTR $T517114[ebp+4]
  004f2	0f 5a f6	 cvtps2pd xmm6, xmm6
  004f5	0f 5a ff	 cvtps2pd xmm7, xmm7
  004f8	f2 0f 5c f7	 subsd	 xmm6, xmm7
  004fc	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00500	f3 0f 11 75 e4	 movss	 DWORD PTR $T517124[ebp+4], xmm6
  00505	f3 0f 10 75 e0	 movss	 xmm6, DWORD PTR $T517124[ebp]
  0050a	0f 5a f6	 cvtps2pd xmm6, xmm6
  0050d	0f 5a f8	 cvtps2pd xmm7, xmm0
  00510	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00514	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00518	f3 0f 11 75 d8	 movss	 DWORD PTR $T517125[ebp], xmm6
  0051d	f3 0f 10 75 e4	 movss	 xmm6, DWORD PTR $T517124[ebp+4]
  00522	0f 5a f6	 cvtps2pd xmm6, xmm6
  00525	0f 5a f8	 cvtps2pd xmm7, xmm0
  00528	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0052c	f3 0f 10 7d d8	 movss	 xmm7, DWORD PTR $T517125[ebp]
  00531	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00535	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  00539	0f 5a ff	 cvtps2pd xmm7, xmm7
  0053c	f2 0f 58 fd	 addsd	 xmm7, xmm5
  00540	0f 57 ed	 xorps	 xmm5, xmm5
  00543	f2 0f 5a ef	 cvtsd2ss xmm5, xmm7

; 1058 : 
; 1059 : 	vR0 = vQ0 + ( vQ1 - vQ0 ) * t;

  00547	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR $T517117[ebp+4]
  0054c	f3 0f 11 6d d8	 movss	 DWORD PTR $T517126[ebp], xmm5
  00551	0f 57 ed	 xorps	 xmm5, xmm5
  00554	f3 0f 5a ee	 cvtss2sd xmm5, xmm6
  00558	f3 0f 10 75 d4	 movss	 xmm6, DWORD PTR $T517113[ebp+4]
  0055d	0f 5a f6	 cvtps2pd xmm6, xmm6
  00560	f2 0f 58 ee	 addsd	 xmm5, xmm6
  00564	f3 0f 10 75 f8	 movss	 xmm6, DWORD PTR $T517117[ebp]
  00569	0f 5a f6	 cvtps2pd xmm6, xmm6
  0056c	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  00570	0f 5a ff	 cvtps2pd xmm7, xmm7
  00573	f3 0f 11 6d dc	 movss	 DWORD PTR $T517126[ebp+4], xmm5
  00578	0f 5a e9	 cvtps2pd xmm5, xmm1
  0057b	f2 0f 5c ee	 subsd	 xmm5, xmm6
  0057f	0f 5a f2	 cvtps2pd xmm6, xmm2
  00582	f2 0f 5c f7	 subsd	 xmm6, xmm7
  00586	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  0058a	0f 5a f8	 cvtps2pd xmm7, xmm0
  0058d	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  00591	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  00595	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  00599	f2 0f 59 ef	 mulsd	 xmm5, xmm7
  0059d	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  005a1	0f 5a f8	 cvtps2pd xmm7, xmm0
  005a4	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  005a8	f3 0f 10 7d f8	 movss	 xmm7, DWORD PTR $T517117[ebp]
  005ad	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  005b1	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  005b5	0f 5a ff	 cvtps2pd xmm7, xmm7
  005b8	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  005bc	f2 0f 58 ef	 addsd	 xmm5, xmm7
  005c0	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR $T517117[ebp+4]
  005c5	0f 5a ff	 cvtps2pd xmm7, xmm7
  005c8	f2 0f 58 f7	 addsd	 xmm6, xmm7
  005cc	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  005d0	f3 0f 11 75 e4	 movss	 DWORD PTR $T517129[ebp+4], xmm6
  005d5	66 0f 5a ed	 cvtpd2ps xmm5, xmm5

; 1060 : 	vR1 = vQ1 + ( vQ2 - vQ1 ) * t;

  005d9	0f 5a f9	 cvtps2pd xmm7, xmm1
  005dc	0f 5a f3	 cvtps2pd xmm6, xmm3
  005df	f2 0f 5c f7	 subsd	 xmm6, xmm7
  005e3	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  005e7	f3 0f 11 75 d0	 movss	 DWORD PTR $T517130[ebp], xmm6
  005ec	0f 5a fa	 cvtps2pd xmm7, xmm2
  005ef	0f 5a f4	 cvtps2pd xmm6, xmm4
  005f2	f2 0f 5c f7	 subsd	 xmm6, xmm7
  005f6	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  005fa	f3 0f 11 75 d4	 movss	 DWORD PTR $T517130[ebp+4], xmm6
  005ff	f3 0f 10 75 d0	 movss	 xmm6, DWORD PTR $T517130[ebp]
  00604	0f 5a f6	 cvtps2pd xmm6, xmm6
  00607	0f 5a f8	 cvtps2pd xmm7, xmm0
  0060a	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0060e	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00612	f3 0f 11 75 e8	 movss	 DWORD PTR $T517131[ebp], xmm6
  00617	f3 0f 10 75 d4	 movss	 xmm6, DWORD PTR $T517130[ebp+4]
  0061c	0f 5a f6	 cvtps2pd xmm6, xmm6
  0061f	0f 5a f8	 cvtps2pd xmm7, xmm0
  00622	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00626	f3 0f 10 7d e8	 movss	 xmm7, DWORD PTR $T517131[ebp]
  0062b	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  0062f	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  00633	0f 5a ff	 cvtps2pd xmm7, xmm7
  00636	0f 5a c9	 cvtps2pd xmm1, xmm1
  00639	f2 0f 58 f9	 addsd	 xmm7, xmm1
  0063d	0f 57 c9	 xorps	 xmm1, xmm1
  00640	f2 0f 5a cf	 cvtsd2ss xmm1, xmm7
  00644	0f 5a d2	 cvtps2pd xmm2, xmm2
  00647	f2 0f 58 f2	 addsd	 xmm6, xmm2
  0064b	0f 57 d2	 xorps	 xmm2, xmm2

; 1061 : 	vR2 = vQ2 + ( vQ3 - vQ2 ) * t;

  0064e	0f 5a fb	 cvtps2pd xmm7, xmm3
  00651	f2 0f 5a d6	 cvtsd2ss xmm2, xmm6
  00655	f3 0f 10 75 d8	 movss	 xmm6, DWORD PTR $T517126[ebp]
  0065a	0f 5a f6	 cvtps2pd xmm6, xmm6
  0065d	f2 0f 5c f7	 subsd	 xmm6, xmm7
  00661	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00665	0f 5a fc	 cvtps2pd xmm7, xmm4
  00668	f3 0f 11 75 d0	 movss	 DWORD PTR $T517133[ebp], xmm6
  0066d	f3 0f 10 75 dc	 movss	 xmm6, DWORD PTR $T517126[ebp+4]
  00672	0f 5a f6	 cvtps2pd xmm6, xmm6
  00675	f2 0f 5c f7	 subsd	 xmm6, xmm7
  00679	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  0067d	f3 0f 11 75 d4	 movss	 DWORD PTR $T517133[ebp+4], xmm6
  00682	f3 0f 10 75 d0	 movss	 xmm6, DWORD PTR $T517133[ebp]
  00687	0f 5a db	 cvtps2pd xmm3, xmm3
  0068a	0f 5a f6	 cvtps2pd xmm6, xmm6
  0068d	0f 5a f8	 cvtps2pd xmm7, xmm0
  00690	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00694	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00698	f3 0f 11 75 d8	 movss	 DWORD PTR $T517134[ebp], xmm6
  0069d	f3 0f 10 75 d4	 movss	 xmm6, DWORD PTR $T517133[ebp+4]
  006a2	0f 5a e4	 cvtps2pd xmm4, xmm4
  006a5	0f 5a f8	 cvtps2pd xmm7, xmm0
  006a8	0f 5a f6	 cvtps2pd xmm6, xmm6
  006ab	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  006af	f3 0f 10 7d d8	 movss	 xmm7, DWORD PTR $T517134[ebp]
  006b4	0f 5a ff	 cvtps2pd xmm7, xmm7
  006b7	f2 0f 58 fb	 addsd	 xmm7, xmm3
  006bb	0f 57 db	 xorps	 xmm3, xmm3
  006be	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  006c2	f3 0f 5a de	 cvtss2sd xmm3, xmm6
  006c6	f2 0f 58 dc	 addsd	 xmm3, xmm4

; 1062 : 
; 1063 : 	vJ0 = vR0 + ( vR1 - vR0 ) * t;

  006ca	0f 57 e4	 xorps	 xmm4, xmm4
  006cd	f3 0f 5a e5	 cvtss2sd xmm4, xmm5
  006d1	0f 57 f6	 xorps	 xmm6, xmm6
  006d4	66 0f 5a f3	 cvtpd2ps xmm6, xmm3
  006d8	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  006dc	0f 5a d9	 cvtps2pd xmm3, xmm1
  006df	f2 0f 5c dc	 subsd	 xmm3, xmm4
  006e3	f3 0f 10 65 e4	 movss	 xmm4, DWORD PTR $T517129[ebp+4]
  006e8	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  006ec	f3 0f 11 5d d0	 movss	 DWORD PTR $T517136[ebp], xmm3
  006f1	0f 5a e4	 cvtps2pd xmm4, xmm4
  006f4	f2 0f 5a ff	 cvtsd2ss xmm7, xmm7
  006f8	0f 5a da	 cvtps2pd xmm3, xmm2
  006fb	f2 0f 5c dc	 subsd	 xmm3, xmm4
  006ff	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  00703	f3 0f 11 5d d4	 movss	 DWORD PTR $T517136[ebp+4], xmm3
  00708	f3 0f 10 5d d0	 movss	 xmm3, DWORD PTR $T517136[ebp]
  0070d	0f 5a db	 cvtps2pd xmm3, xmm3
  00710	0f 5a e0	 cvtps2pd xmm4, xmm0
  00713	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  00717	f2 0f 5a db	 cvtsd2ss xmm3, xmm3
  0071b	f3 0f 11 5d d8	 movss	 DWORD PTR $T517137[ebp], xmm3
  00720	f3 0f 10 5d d4	 movss	 xmm3, DWORD PTR $T517136[ebp+4]
  00725	0f 5a db	 cvtps2pd xmm3, xmm3
  00728	0f 5a e0	 cvtps2pd xmm4, xmm0
  0072b	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  0072f	0f 57 e4	 xorps	 xmm4, xmm4
  00732	f2 0f 5a e3	 cvtsd2ss xmm4, xmm3
  00736	f3 0f 10 5d d8	 movss	 xmm3, DWORD PTR $T517137[ebp]
  0073b	0f 5a db	 cvtps2pd xmm3, xmm3
  0073e	f2 0f 58 dd	 addsd	 xmm3, xmm5
  00742	f3 0f 10 6d e4	 movss	 xmm5, DWORD PTR $T517129[ebp+4]
  00747	0f 5a e4	 cvtps2pd xmm4, xmm4
  0074a	0f 5a ed	 cvtps2pd xmm5, xmm5
  0074d	f2 0f 58 e5	 addsd	 xmm4, xmm5
  00751	f2 0f 5a db	 cvtsd2ss xmm3, xmm3
  00755	66 0f 5a e4	 cvtpd2ps xmm4, xmm4

; 1064 : 	vJ1 = vR1 + ( vR2 - vR1 ) * t;

  00759	0f 57 ed	 xorps	 xmm5, xmm5
  0075c	f3 0f 5a ef	 cvtss2sd xmm5, xmm7
  00760	0f 5a f9	 cvtps2pd xmm7, xmm1
  00763	f2 0f 5c ef	 subsd	 xmm5, xmm7
  00767	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  0076b	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  0076f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00772	0f 5a f6	 cvtps2pd xmm6, xmm6
  00775	0f 5a fa	 cvtps2pd xmm7, xmm2
  00778	f2 0f 5c f7	 subsd	 xmm6, xmm7
  0077c	0f 5a d2	 cvtps2pd xmm2, xmm2
  0077f	66 0f 5a f6	 cvtpd2ps xmm6, xmm6

; 1065 : 
; 1066 : 	vResult = vJ0 + ( vJ1 - vJ0 ) * t;

  00783	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00786	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  0078a	0f 5a f8	 cvtps2pd xmm7, xmm0
  0078d	f2 0f 59 ef	 mulsd	 xmm5, xmm7
  00791	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  00795	f3 0f 5a ed	 cvtss2sd xmm5, xmm5
  00799	f2 0f 58 e9	 addsd	 xmm5, xmm1
  0079d	0f 57 c9	 xorps	 xmm1, xmm1
  007a0	66 0f 5a cd	 cvtpd2ps xmm1, xmm5
  007a4	0f 5a f8	 cvtps2pd xmm7, xmm0
  007a7	0f 57 ed	 xorps	 xmm5, xmm5
  007aa	0f 5a c9	 cvtps2pd xmm1, xmm1
  007ad	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  007b1	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  007b5	f3 0f 5a ee	 cvtss2sd xmm5, xmm6
  007b9	f2 0f 58 ea	 addsd	 xmm5, xmm2
  007bd	0f 57 d2	 xorps	 xmm2, xmm2
  007c0	66 0f 5a d5	 cvtpd2ps xmm2, xmm5
  007c4	0f 57 ed	 xorps	 xmm5, xmm5
  007c7	f3 0f 5a eb	 cvtss2sd xmm5, xmm3
  007cb	f2 0f 5c cd	 subsd	 xmm1, xmm5
  007cf	0f 57 ed	 xorps	 xmm5, xmm5
  007d2	f3 0f 5a ec	 cvtss2sd xmm5, xmm4
  007d6	0f 5a d2	 cvtps2pd xmm2, xmm2
  007d9	f2 0f 5c d5	 subsd	 xmm2, xmm5
  007dd	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  007e1	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  007e5	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  007e9	0f 5a e8	 cvtps2pd xmm5, xmm0
  007ec	0f 5a c0	 cvtps2pd xmm0, xmm0
  007ef	f2 0f 59 cd	 mulsd	 xmm1, xmm5
  007f3	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  007f7	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  007fb	0f 57 c0	 xorps	 xmm0, xmm0
  007fe	66 0f 5a c2	 cvtpd2ps xmm0, xmm2
  00802	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00806	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0080a	0f 57 d2	 xorps	 xmm2, xmm2
  0080d	f3 0f 5a d3	 cvtss2sd xmm2, xmm3
  00811	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00815	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00819	f3 0f 11 4d d0	 movss	 DWORD PTR $T517144[ebp], xmm1
  0081e	8b 4d d0	 mov	 ecx, DWORD PTR $T517144[ebp]
  00821	0f 5a c0	 cvtps2pd xmm0, xmm0
  00824	0f 57 c9	 xorps	 xmm1, xmm1
  00827	f3 0f 5a cc	 cvtss2sd xmm1, xmm4
  0082b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0082f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00833	f3 0f 11 45 d4	 movss	 DWORD PTR $T517144[ebp+4], xmm0
  00838	89 08		 mov	 DWORD PTR [eax], ecx
  0083a	8b 4d d4	 mov	 ecx, DWORD PTR $T517144[ebp+4]
  0083d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1067 : 
; 1068 : 	return vResult;
; 1069 : }

  00840	c9		 leave
  00841	c2 0c 00	 ret	 12			; 0000000cH
?PointOnCubicBezier@BingoRightWnd@@IAE?AUD3DXVECTOR2@@PAU2@M@Z ENDP ; BingoRightWnd::PointOnCubicBezier
_TEXT	ENDS
PUBLIC	??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??0?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@XZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::end
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 14	 add	 edx, 20			; 00000014H
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAE_NI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 29		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ; std::_Allocate<ioUIRenderImage *>
  00036	89 06		 mov	 DWORD PTR [esi], eax

; 1262 : 			this->_Mylast = this->_Myfirst;

  00038	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  0003b	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  0003e	59		 pop	 ecx
  0003f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00042	59		 pop	 ecx

; 1264 : 			}
; 1265 : 		return (true);

  00043	b0 01		 mov	 al, 1
$LN5@Buy:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 1266 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Buy
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@3:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@ABU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@ABU23@@Z ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@ABU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@ABU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN9@Cons_val@4
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 05		 push	 5
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN9@Cons_val@4:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@ABU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00@Z ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$517996 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00@Z PROC ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$517996[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00@Z ENDP ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Umove<ioUIRenderImage * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Umove<ioUIRenderImage * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Umove<ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@@Z ; std::_Dest_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@@Z PROC ; std::_Dest_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@@Z ENDP ; std::_Dest_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@@Z ; std::_Dest_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@@Z PROC ; std::_Dest_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@@Z ENDP ; std::_Dest_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@U34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@$$QAU23@@Z ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@U34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@$$QAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@U34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val@5
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 05		 push	 5
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val@5:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@U34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$518123 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$518123[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ; std::_Allocate<ioUIRenderImage *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BingoRightWnd::BallAfterImage> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<BingoRightWnd::BallAfterImage> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<BingoRightWnd::BallAfterImage> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	eb 17		 jmp	 SHORT $LN48@Uninit_cop
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00008	83 7d 10 00	 cmp	 DWORD PTR __Dest$[ebp], 0
  0000c	74 07		 je	 SHORT $LN32@Uninit_cop
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00013	89 0a		 mov	 DWORD PTR [edx], ecx
$LN32@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00015	83 45 10 04	 add	 DWORD PTR __Dest$[ebp], 4
  00019	83 c0 04	 add	 eax, 4
  0001c	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN48@Uninit_cop:
  0001f	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00022	75 e4		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@U12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage>
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninit_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@U12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@U12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@U34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@$$QAU23@@Z ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage>
  00015	83 45 10 14	 add	 DWORD PTR __Dest$[ebp], 20 ; 00000014H
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 14	 add	 esi, 20			; 00000014H
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@U12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage>
_TEXT	ENDS
PUBLIC	??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T518441 = -4						; size = 4
?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T518441[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z ; std::_Destroy_range<std::allocator<BingoRightWnd::BallAfterImage> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z PROC ; std::_Destroy_range<std::allocator<BingoRightWnd::BallAfterImage> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAXPAUBallAfterImage@BingoRightWnd@@0AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<BingoRightWnd::BallAfterImage> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@@Z
_TEXT	SEGMENT
__Cat$518566 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$518566[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z ; std::_Uninitialized_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z
_TEXT	SEGMENT
__Cat$518573 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z PROC ; std::_Uninitialized_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$518573[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@U12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z ENDP ; std::_Uninitialized_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage> >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXPAUBallAfterImage@BingoRightWnd@@0@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXPAUBallAfterImage@BingoRightWnd@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXPAUBallAfterImage@BingoRightWnd@@0@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXPAUBallAfterImage@BingoRightWnd@@0@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXXZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXXZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@1@0PAPAV2@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@1@0PAPAV2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$518848 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@1@0PAPAV2@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$518848[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@1@0PAPAV2@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUBallAfterImage@BingoRightWnd@@@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEPAUBallAfterImage@BingoRightWnd@@PAU23@00@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Umove<BingoRightWnd::BallAfterImage *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUBallAfterImage@BingoRightWnd@@@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEPAUBallAfterImage@BingoRightWnd@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUBallAfterImage@BingoRightWnd@@@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEPAUBallAfterImage@BingoRightWnd@@PAU23@00@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Umove<BingoRightWnd::BallAfterImage *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z ; std::_Uninitialized_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUBallAfterImage@BingoRightWnd@@@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEPAUBallAfterImage@BingoRightWnd@@PAU23@00@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Umove<BingoRightWnd::BallAfterImage *>
_TEXT	ENDS
PUBLIC	??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$518934 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	c1 f8 02	 sar	 eax, 2
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Buy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAE_NI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Buy
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00030	ff 75 08	 push	 DWORD PTR __Cat$518934[ebp]
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003a	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	57		 push	 edi
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@PAPAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@2@@std@@YAPAPAVioUIRenderImage@@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@0@0PAPAV1@AAV?$allocator@PAVioUIRenderImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
__catch$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy

; 542  : 			_RERAISE;

  00061	33 db		 xor	 ebx, ebx
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
PUBLIC	??1?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::~vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::~vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Tidy
??1?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::~vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$518969 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	ff 75 0c	 push	 DWORD PTR __Cat$518969[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	50		 push	 eax
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	83 c0 14	 add	 eax, 20			; 00000014H
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1183 : 		--this->_Mylast;
; 1184 : 		return (_Make_iter(_Where));

  00019	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	83 46 04 ec	 add	 DWORD PTR [esi+4], -20	; ffffffecH
  00026	89 08		 mov	 DWORD PTR [eax], ecx
  00028	5e		 pop	 esi

; 1185 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@0@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$519144 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@0@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$519144[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUBallAfterImage@BingoRightWnd@@PAU12@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@0@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$509798 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb cc cc cc
	0c		 cmp	 ebx, 214748364		; 0cccccccH
  00017	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 14		 push	 20			; 00000014H
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UBallAfterImage@BingoRightWnd@@@std@@YAPAUBallAfterImage@BingoRightWnd@@IPAU12@@Z ; std::_Allocate<BingoRightWnd::BallAfterImage>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$509798[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$509798[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUBallAfterImage@BingoRightWnd@@PAU12@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@YAPAUBallAfterImage@BingoRightWnd@@PAU12@00AAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@@Z ; std::_Uninitialized_move<BingoRightWnd::BallAfterImage *,BingoRightWnd::BallAfterImage *,std::allocator<BingoRightWnd::BallAfterImage> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 14		 push	 20			; 00000014H
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve@2

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve@2:
  00071	83 c1 14	 add	 ecx, 20			; 00000014H
$LN55@reserve@2:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve@2

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 14	 imul	 ebx, 20			; 00000014H

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 14	 imul	 edi, 20			; 00000014H
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$509798[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$509798[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve@2:
$LN54@reserve@2:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::reserve
PUBLIC	??_7BingoRightWnd@@6B@				; BingoRightWnd::`vftable'
PUBLIC	??1BingoRightWnd@@UAE@XZ			; BingoRightWnd::~BingoRightWnd
PUBLIC	??_R4BingoRightWnd@@6B@				; BingoRightWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBingoRightWnd@@@8			; BingoRightWnd `RTTI Type Descriptor'
PUBLIC	??_R3BingoRightWnd@@8				; BingoRightWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BingoRightWnd@@8				; BingoRightWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BingoRightWnd@@8			; BingoRightWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?OnProcess@BingoRightWnd@@MAEXM@Z		; BingoRightWnd::OnProcess
PUBLIC	?iwm_show@BingoRightWnd@@UAEXXZ			; BingoRightWnd::iwm_show
PUBLIC	?iwm_hide@BingoRightWnd@@UAEXXZ			; BingoRightWnd::iwm_hide
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	??1ioSprite@@QAE@XZ:PROC			; ioSprite::~ioSprite
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	??_EBingoRightWnd@@UAEPAXI@Z:PROC		; BingoRightWnd::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@BingoRightWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BingoRightWnd@@8 DD FLAT:??_R0?AVBingoRightWnd@@@8 ; BingoRightWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BingoRightWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2BingoRightWnd@@8
rdata$r	SEGMENT
??_R2BingoRightWnd@@8 DD FLAT:??_R1A@?0A@EA@BingoRightWnd@@8 ; BingoRightWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3BingoRightWnd@@8
rdata$r	SEGMENT
??_R3BingoRightWnd@@8 DD 00H				; BingoRightWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BingoRightWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBingoRightWnd@@@8
_DATA	SEGMENT
??_R0?AVBingoRightWnd@@@8 DD FLAT:??_7type_info@@6B@	; BingoRightWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBingoRightWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BingoRightWnd@@6B@
rdata$r	SEGMENT
??_R4BingoRightWnd@@6B@ DD 00H				; BingoRightWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBingoRightWnd@@@8
	DD	FLAT:??_R3BingoRightWnd@@8
rdata$r	ENDS
;	COMDAT ??_7BingoRightWnd@@6B@
CONST	SEGMENT
??_7BingoRightWnd@@6B@ DD FLAT:??_R4BingoRightWnd@@6B@	; BingoRightWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@BingoRightWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@BingoRightWnd@@MAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@BingoRightWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@BingoRightWnd@@MAEXXZ
	DD	FLAT:?OnProcess@BingoRightWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@BingoRightWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@BingoRightWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@BingoRightWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@BingoRightWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EBingoRightWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1BingoRightWnd@@UAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??1BingoRightWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1BingoRightWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1BingoRightWnd@@UAE@XZ$9
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ??1BingoRightWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
tv259 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BingoRightWnd@@UAE@XZ PROC				; BingoRightWnd::~BingoRightWnd, COMDAT
; _this$ = ecx

; 43   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1BingoRightWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BingoRightWnd@@6B@

; 44   : 	SAFEDELETE( m_pUnderLine );

  00017	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0001d	33 db		 xor	 ebx, ebx
  0001f	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  00026	3b cb		 cmp	 ecx, ebx
  00028	74 0d		 je	 SHORT $LN15@BingoRight
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	6a 01		 push	 1
  0002e	ff 50 40	 call	 DWORD PTR [eax+64]
  00031	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
$LN15@BingoRight:

; 45   : 	SAFEDELETE( m_pTextBingo );

  00037	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0003d	3b cb		 cmp	 ecx, ebx
  0003f	74 0d		 je	 SHORT $LN14@BingoRight
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	6a 01		 push	 1
  00045	ff 50 40	 call	 DWORD PTR [eax+64]
  00048	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
$LN14@BingoRight:

; 46   : 	SAFEDELETE( m_pTextAll );

  0004e	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00054	3b cb		 cmp	 ecx, ebx
  00056	74 0d		 je	 SHORT $LN13@BingoRight
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	6a 01		 push	 1
  0005c	ff 50 40	 call	 DWORD PTR [eax+64]
  0005f	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
$LN13@BingoRight:

; 47   : 	SAFEDELETE( m_pTextClear );

  00065	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  0006b	3b cb		 cmp	 ecx, ebx
  0006d	74 0d		 je	 SHORT $LN12@BingoRight
  0006f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00071	6a 01		 push	 1
  00073	ff 50 40	 call	 DWORD PTR [eax+64]
  00076	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
$LN12@BingoRight:

; 48   : 	SAFEDELETE( m_pTextNumber );

  0007c	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00082	3b cb		 cmp	 ecx, ebx
  00084	74 0d		 je	 SHORT $LN11@BingoRight
  00086	8b 01		 mov	 eax, DWORD PTR [ecx]
  00088	6a 01		 push	 1
  0008a	ff 50 40	 call	 DWORD PTR [eax+64]
  0008d	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
$LN11@BingoRight:

; 49   : 	SAFEDELETE( m_pTextCount );

  00093	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  00099	3b cb		 cmp	 ecx, ebx
  0009b	74 0d		 je	 SHORT $LN10@BingoRight
  0009d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009f	6a 01		 push	 1
  000a1	ff 50 40	 call	 DWORD PTR [eax+64]
  000a4	89 9e 74 01 00
	00		 mov	 DWORD PTR [esi+372], ebx
$LN10@BingoRight:

; 50   : 	SAFEDELETE( m_pTextSelect );

  000aa	8b 8e 78 01 00
	00		 mov	 ecx, DWORD PTR [esi+376]
  000b0	3b cb		 cmp	 ecx, ebx
  000b2	74 0d		 je	 SHORT $LN9@BingoRight
  000b4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b6	6a 01		 push	 1
  000b8	ff 50 40	 call	 DWORD PTR [eax+64]
  000bb	89 9e 78 01 00
	00		 mov	 DWORD PTR [esi+376], ebx
$LN9@BingoRight:

; 51   : 	SAFEDELETE( m_pTextGet );

  000c1	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  000c7	3b cb		 cmp	 ecx, ebx
  000c9	74 0d		 je	 SHORT $LN8@BingoRight
  000cb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cd	6a 01		 push	 1
  000cf	ff 50 40	 call	 DWORD PTR [eax+64]
  000d2	89 9e 7c 01 00
	00		 mov	 DWORD PTR [esi+380], ebx
$LN8@BingoRight:

; 52   : 	SAFEDELETE( m_pRedBall );

  000d8	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  000de	3b cb		 cmp	 ecx, ebx
  000e0	74 0d		 je	 SHORT $LN7@BingoRight
  000e2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e4	6a 01		 push	 1
  000e6	ff 50 40	 call	 DWORD PTR [eax+64]
  000e9	89 9e 80 01 00
	00		 mov	 DWORD PTR [esi+384], ebx
$LN7@BingoRight:

; 53   : 	SAFEDELETE( m_pLightBall );

  000ef	8b 8e 84 01 00
	00		 mov	 ecx, DWORD PTR [esi+388]
  000f5	3b cb		 cmp	 ecx, ebx
  000f7	74 0d		 je	 SHORT $LN6@BingoRight
  000f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fb	6a 01		 push	 1
  000fd	ff 50 40	 call	 DWORD PTR [eax+64]
  00100	89 9e 84 01 00
	00		 mov	 DWORD PTR [esi+388], ebx
$LN6@BingoRight:

; 54   : 	SAFEDELETE( m_pBallBg );

  00106	8b 8e 88 01 00
	00		 mov	 ecx, DWORD PTR [esi+392]
  0010c	3b cb		 cmp	 ecx, ebx
  0010e	74 0d		 je	 SHORT $LN5@BingoRight
  00110	8b 01		 mov	 eax, DWORD PTR [ecx]
  00112	6a 01		 push	 1
  00114	ff 50 40	 call	 DWORD PTR [eax+64]
  00117	89 9e 88 01 00
	00		 mov	 DWORD PTR [esi+392], ebx
$LN5@BingoRight:

; 55   : 	for( int i=0; i<10; ++i )

  0011d	8d be 8c 01 00
	00		 lea	 edi, DWORD PTR [esi+396]
  00123	c7 45 f0 0a 00
	00 00		 mov	 DWORD PTR tv259[ebp], 10 ; 0000000aH
$LL4@BingoRight:

; 56   : 		SAFEDELETE( m_pBallEffect[i] );

  0012a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0012c	3b cb		 cmp	 ecx, ebx
  0012e	74 09		 je	 SHORT $LN3@BingoRight
  00130	8b 01		 mov	 eax, DWORD PTR [ecx]
  00132	6a 01		 push	 1
  00134	ff 50 40	 call	 DWORD PTR [eax+64]
  00137	89 1f		 mov	 DWORD PTR [edi], ebx
$LN3@BingoRight:

; 55   : 	for( int i=0; i<10; ++i )

  00139	83 c7 04	 add	 edi, 4
  0013c	ff 4d f0	 dec	 DWORD PTR tv259[ebp]
  0013f	75 e9		 jne	 SHORT $LL4@BingoRight

; 57   : }

  00141	8d 8e a4 02 00
	00		 lea	 ecx, DWORD PTR [esi+676]
  00147	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0014b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Tidy
  00150	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00156	8d 8e 94 02 00
	00		 lea	 ecx, DWORD PTR [esi+660]
  0015c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00160	ff d7		 call	 edi
  00162	8d 8e 84 02 00
	00		 lea	 ecx, DWORD PTR [esi+644]
  00168	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0016c	ff d7		 call	 edi
  0016e	8d 8e 74 02 00
	00		 lea	 ecx, DWORD PTR [esi+628]
  00174	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00178	ff d7		 call	 edi
  0017a	8d 8e 64 02 00
	00		 lea	 ecx, DWORD PTR [esi+612]
  00180	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00184	ff d7		 call	 edi
  00186	8d 8e 54 02 00
	00		 lea	 ecx, DWORD PTR [esi+596]
  0018c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00190	ff d7		 call	 edi
  00192	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  00198	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0019c	ff d7		 call	 edi
  0019e	8d 8e 34 02 00
	00		 lea	 ecx, DWORD PTR [esi+564]
  001a4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001a8	ff d7		 call	 edi
  001aa	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  001b0	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  001b3	e8 00 00 00 00	 call	 ??1ioSprite@@QAE@XZ	; ioSprite::~ioSprite
  001b8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001bc	8b ce		 mov	 ecx, esi
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  001c4	e8 00 00 00 00	 call	 __EH_epilog3
  001c9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$1:
  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 cc 01 00
	00		 add	 ecx, 460		; 000001ccH
  00012	e9 00 00 00 00	 jmp	 ??1ioSprite@@QAE@XZ	; ioSprite::~ioSprite
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$2:
  00017	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 34 02 00
	00		 add	 ecx, 564		; 00000234H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$3:
  00026	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 44 02 00
	00		 add	 ecx, 580		; 00000244H
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$4:
  00035	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 54 02 00
	00		 add	 ecx, 596		; 00000254H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$5:
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 64 02 00
	00		 add	 ecx, 612		; 00000264H
  0004d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$6:
  00053	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 74 02 00
	00		 add	 ecx, 628		; 00000274H
  0005c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$7:
  00062	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	81 c1 84 02 00
	00		 add	 ecx, 644		; 00000284H
  0006b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$8:
  00071	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	81 c1 94 02 00
	00		 add	 ecx, 660		; 00000294H
  0007a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1BingoRightWnd@@UAE@XZ$9:
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	81 c1 a4 02 00
	00		 add	 ecx, 676		; 000002a4H
  00089	e9 00 00 00 00	 jmp	 ??1?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE@XZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::~vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >
__ehhandler$??1BingoRightWnd@@UAE@XZ:
  0008e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00092	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00095	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00098	33 c8		 xor	 ecx, eax
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1BingoRightWnd@@UAE@XZ
  000a4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1BingoRightWnd@@UAE@XZ ENDP				; BingoRightWnd::~BingoRightWnd
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z:PROC ; ioEtcItemManager::FindEtcItem
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
EXTRN	?SetAnimationGapTime@ioSprite@@QAEXK@Z:PROC	; ioSprite::SetAnimationGapTime
EXTRN	?SetType@ioSprite@@QAEXW4AniType@1@@Z:PROC	; ioSprite::SetType
EXTRN	?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z:PROC ; ioSprite::AddSpriteList
EXTRN	?DestroySpriteList@ioSprite@@QAEXXZ:PROC	; ioSprite::DestroySpriteList
EXTRN	?Init@ioSprite@@QAEXXZ:PROC			; ioSprite::Init
EXTRN	__ftol2:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?iwm_show@BingoRightWnd@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_show@BingoRightWnd@@UAEXXZ$0
__ehfuncinfo$?iwm_show@BingoRightWnd@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?iwm_show@BingoRightWnd@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ?iwm_show@BingoRightWnd@@UAEXXZ
_TEXT	SEGMENT
_vImageList$ = -32					; size = 16
tv353 = -16						; size = 4
tv309 = -16						; size = 4
tv244 = -16						; size = 4
$T519531 = -16						; size = 4
$T519436 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?iwm_show@BingoRightWnd@@UAEXXZ PROC			; BingoRightWnd::iwm_show, COMDAT
; _this$ = ecx

; 184  : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?iwm_show@BingoRightWnd@@UAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 185  : 	m_iLastGetNumber = 0;

  0000e	33 db		 xor	 ebx, ebx
  00010	89 9e c0 01 00
	00		 mov	 DWORD PTR [esi+448], ebx

; 186  : 	ioBingo* pBingo = g_MyInfo.GetBingo();	

  00016	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0001b	8b 80 94 0b 00
	00		 mov	 eax, DWORD PTR [eax+2964]

; 187  : 	if( pBingo )

  00021	3b c3		 cmp	 eax, ebx
  00023	74 09		 je	 SHORT $LN7@iwm_show

; 188  : 	{
; 189  : 		m_iBingoType = pBingo->GetBingoType();

  00025	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00028	89 86 b4 02 00
	00		 mov	 DWORD PTR [esi+692], eax
$LN7@iwm_show:

; 190  : 	}
; 191  : 
; 192  : 	ioUIRenderImageList vImageList;

  0002e	89 5d e0	 mov	 DWORD PTR _vImageList$[ebp], ebx
  00031	89 5d e4	 mov	 DWORD PTR _vImageList$[ebp+4], ebx
  00034	89 5d e8	 mov	 DWORD PTR _vImageList$[ebp+8], ebx

; 193  : 	vImageList.clear();

  00037	33 c0		 xor	 eax, eax
  00039	50		 push	 eax
  0003a	33 c9		 xor	 ecx, ecx
  0003c	51		 push	 ecx
  0003d	8d 45 f0	 lea	 eax, DWORD PTR $T519531[ebp]
  00040	50		 push	 eax
  00041	8d 4d e0	 lea	 ecx, DWORD PTR _vImageList$[ebp]
  00044	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00047	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase
  0004c	8d be 8c 01 00
	00		 lea	 edi, DWORD PTR [esi+396]
  00052	c7 45 f0 0a 00
	00 00		 mov	 DWORD PTR tv244[ebp], 10 ; 0000000aH
$LL6@iwm_show:

; 194  : 	for( int i=0; i<10; ++i )
; 195  : 		vImageList.push_back( m_pBallEffect[i] );

  00059	57		 push	 edi
  0005a	8d 4d e0	 lea	 ecx, DWORD PTR _vImageList$[ebp]
  0005d	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back
  00062	83 c7 04	 add	 edi, 4
  00065	ff 4d f0	 dec	 DWORD PTR tv244[ebp]
  00068	75 ef		 jne	 SHORT $LL6@iwm_show

; 196  : 
; 197  : 	m_BallEffect.Init();

  0006a	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  00070	e8 00 00 00 00	 call	 ?Init@ioSprite@@QAEXXZ	; ioSprite::Init

; 198  : 	m_BallEffect.DestroySpriteList();

  00075	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  0007b	e8 00 00 00 00	 call	 ?DestroySpriteList@ioSprite@@QAEXXZ ; ioSprite::DestroySpriteList

; 199  : 	m_BallEffect.AddSpriteList( vImageList );

  00080	83 ec 10	 sub	 esp, 16			; 00000010H
  00083	8d 45 e0	 lea	 eax, DWORD PTR _vImageList$[ebp]
  00086	8b cc		 mov	 ecx, esp
  00088	89 65 f0	 mov	 DWORD PTR $T519436[ebp], esp
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
  00091	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  00097	e8 00 00 00 00	 call	 ?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z ; ioSprite::AddSpriteList

; 200  : 	m_BallEffect.SetType( ioSprite::AT_PLAY_ONCE );

  0009c	53		 push	 ebx
  0009d	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  000a3	e8 00 00 00 00	 call	 ?SetType@ioSprite@@QAEXW4AniType@1@@Z ; ioSprite::SetType

; 201  : 	m_BallEffect.SetAnimationGapTime( FLOAT100 );

  000a8	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000ad	89 45 f0	 mov	 DWORD PTR tv353[ebp], eax
  000b0	db 45 f0	 fild	 DWORD PTR tv353[ebp]
  000b3	85 c0		 test	 eax, eax
  000b5	79 06		 jns	 SHORT $LN63@iwm_show
  000b7	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN63@iwm_show:
  000bd	e8 00 00 00 00	 call	 __ftol2
  000c2	50		 push	 eax
  000c3	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  000c9	e8 00 00 00 00	 call	 ?SetAnimationGapTime@ioSprite@@QAEXK@Z ; ioSprite::SetAnimationGapTime

; 202  : 
; 203  : 	m_ShuffleNumberItemName.Clear();

  000ce	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  000d4	8d 8e 34 02 00
	00		 lea	 ecx, DWORD PTR [esi+564]
  000da	ff d7		 call	 edi

; 204  : 	m_ShuffleRewardItemName.Clear();

  000dc	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  000e2	89 4d f0	 mov	 DWORD PTR tv309[ebp], ecx
  000e5	ff d7		 call	 edi

; 205  : 	m_SpecialNumberItemName.Clear();

  000e7	8d 8e 54 02 00
	00		 lea	 ecx, DWORD PTR [esi+596]
  000ed	ff d7		 call	 edi

; 206  : 	ioEtcItem *pItem = NULL;
; 207  : 	pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_NUMBER );

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  000f5	68 99 4a 0f 00	 push	 1002137			; 000f4a99H
  000fa	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem

; 208  : 	if( pItem )

  000ff	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00105	85 c0		 test	 eax, eax
  00107	74 0c		 je	 SHORT $LN3@iwm_show

; 209  : 		m_ShuffleNumberItemName = pItem->GetName();

  00109	83 c0 04	 add	 eax, 4
  0010c	50		 push	 eax
  0010d	8d 8e 34 02 00
	00		 lea	 ecx, DWORD PTR [esi+564]
  00113	ff d7		 call	 edi
$LN3@iwm_show:

; 210  : 	pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_REWARD_ITEM );

  00115	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  0011b	68 9a 4a 0f 00	 push	 1002138			; 000f4a9aH
  00120	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem

; 211  : 	if( pItem )

  00125	85 c0		 test	 eax, eax
  00127	74 09		 je	 SHORT $LN2@iwm_show

; 212  : 		m_ShuffleRewardItemName = pItem->GetName();

  00129	8b 4d f0	 mov	 ecx, DWORD PTR tv309[ebp]
  0012c	83 c0 04	 add	 eax, 4
  0012f	50		 push	 eax
  00130	ff d7		 call	 edi
$LN2@iwm_show:

; 213  : 	pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_RANDOM_NUMBER_CLEAR );

  00132	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  00138	68 9b 4a 0f 00	 push	 1002139			; 000f4a9bH
  0013d	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem

; 214  : 	if( pItem )

  00142	85 c0		 test	 eax, eax
  00144	74 0c		 je	 SHORT $LN1@iwm_show

; 215  : 		m_SpecialNumberItemName = pItem->GetName();

  00146	83 c0 04	 add	 eax, 4
  00149	50		 push	 eax
  0014a	8d 8e 54 02 00
	00		 lea	 ecx, DWORD PTR [esi+596]
  00150	ff d7		 call	 edi
$LN1@iwm_show:

; 216  : }

  00152	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00156	8d 4d e0	 lea	 ecx, DWORD PTR _vImageList$[ebp]
  00159	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
  0015e	e8 00 00 00 00	 call	 __EH_epilog3
  00163	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?iwm_show@BingoRightWnd@@UAEXXZ$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _vImageList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
__ehhandler$?iwm_show@BingoRightWnd@@UAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?iwm_show@BingoRightWnd@@UAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?iwm_show@BingoRightWnd@@UAEXXZ ENDP			; BingoRightWnd::iwm_show
PUBLIC	?clear@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXXZ ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?clear@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T519598 = -4						; size = 4
?clear@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXXZ PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T519598[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@0@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXXZ ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXI@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXI@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 14		 push	 20			; 00000014H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 14		 push	 20			; 00000014H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IBEII@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXI@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::reserve
$LN1@Reserve@2:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXI@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Reserve
_TEXT	ENDS
PUBLIC	??0BingoRightWnd@@QAE@XZ			; BingoRightWnd::BingoRightWnd
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioSprite@@QAE@XZ:PROC			; ioSprite::ioSprite
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$??0BingoRightWnd@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0BingoRightWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0BingoRightWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0BingoRightWnd@@QAE@XZ$7
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ??0BingoRightWnd@@QAE@XZ
_TEXT	SEGMENT
$T519786 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BingoRightWnd@@QAE@XZ PROC				; BingoRightWnd::BingoRightWnd, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0BingoRightWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00017	33 db		 xor	 ebx, ebx
  00019	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BingoRightWnd@@6B@
  00028	e8 00 00 00 00	 call	 ??0ioSprite@@QAE@XZ	; ioSprite::ioSprite
  0002d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00033	8d 8e 34 02 00
	00		 lea	 ecx, DWORD PTR [esi+564]
  00039	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003d	ff d7		 call	 edi
  0003f	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  00045	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00049	ff d7		 call	 edi
  0004b	8d 8e 54 02 00
	00		 lea	 ecx, DWORD PTR [esi+596]
  00051	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00055	ff d7		 call	 edi
  00057	8d 8e 64 02 00
	00		 lea	 ecx, DWORD PTR [esi+612]
  0005d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00061	ff d7		 call	 edi
  00063	8d 8e 74 02 00
	00		 lea	 ecx, DWORD PTR [esi+628]
  00069	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0006d	ff d7		 call	 edi
  0006f	8d 8e 84 02 00
	00		 lea	 ecx, DWORD PTR [esi+644]
  00075	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00079	ff d7		 call	 edi
  0007b	8d 8e 94 02 00
	00		 lea	 ecx, DWORD PTR [esi+660]
  00081	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00085	ff d7		 call	 edi
  00087	89 9e a4 02 00
	00		 mov	 DWORD PTR [esi+676], ebx
  0008d	89 9e a8 02 00
	00		 mov	 DWORD PTR [esi+680], ebx
  00093	89 9e ac 02 00
	00		 mov	 DWORD PTR [esi+684], ebx

; 13   : 	m_WindowType = RWT_NONE;
; 14   : 	
; 15   : 	m_pUnderLine    = NULL;
; 16   : 	m_pTextBingo    = NULL;
; 17   : 	m_pTextAll      = NULL;
; 18   : 	m_pTextClear	= NULL;
; 19   : 	m_pTextNumber   = NULL;
; 20   : 	m_pTextCount    = NULL;
; 21   : 	m_pTextSelect   = NULL;
; 22   : 	m_pTextGet      = NULL;
; 23   : 	m_pRedBall      = NULL;
; 24   : 	m_pLightBall    = NULL;
; 25   : 	m_pBallBg       = NULL;
; 26   : 
; 27   : 	for( int i=0; i<10; ++i )
; 28   : 		m_pBallEffect[i] = NULL;

  00099	6a 0a		 push	 10			; 0000000aH
  0009b	59		 pop	 ecx
  0009c	33 c0		 xor	 eax, eax
  0009e	89 9e b4 01 00
	00		 mov	 DWORD PTR [esi+436], ebx
  000a4	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
  000aa	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
  000b0	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
  000b6	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
  000bc	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
  000c2	89 9e 74 01 00
	00		 mov	 DWORD PTR [esi+372], ebx
  000c8	89 9e 78 01 00
	00		 mov	 DWORD PTR [esi+376], ebx
  000ce	89 9e 7c 01 00
	00		 mov	 DWORD PTR [esi+380], ebx
  000d4	89 9e 80 01 00
	00		 mov	 DWORD PTR [esi+384], ebx
  000da	89 9e 84 01 00
	00		 mov	 DWORD PTR [esi+388], ebx
  000e0	89 9e 88 01 00
	00		 mov	 DWORD PTR [esi+392], ebx
  000e6	8d be 8c 01 00
	00		 lea	 edi, DWORD PTR [esi+396]
  000ec	f3 ab		 rep stosd

; 29   : 
; 30   : 	m_dwCheckTime = 0;

  000ee	89 9e b8 01 00
	00		 mov	 DWORD PTR [esi+440], ebx

; 31   : 	m_bLightIcon = false;

  000f4	88 9e bc 01 00
	00		 mov	 BYTE PTR [esi+444], bl

; 32   : 
; 33   : 	m_BallAniState = BAS_NONE;

  000fa	89 9e c4 01 00
	00		 mov	 DWORD PTR [esi+452], ebx

; 34   : 	m_dwBallAniCheckTime = 0;

  00100	89 9e c8 01 00
	00		 mov	 DWORD PTR [esi+456], ebx

; 35   : 
; 36   : 	m_iLastGetNumber = 0;

  00106	89 9e c0 01 00
	00		 mov	 DWORD PTR [esi+448], ebx

; 37   : 	m_iBingoType	 = 0;

  0010c	89 9e b4 02 00
	00		 mov	 DWORD PTR [esi+692], ebx

; 38   : 
; 39   : 	m_vBallAfterImageList.clear();

  00112	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00118	8b 8e a4 02 00
	00		 mov	 ecx, DWORD PTR [esi+676]
  0011e	50		 push	 eax
  0011f	51		 push	 ecx
  00120	8d 45 f0	 lea	 eax, DWORD PTR $T519786[ebp]
  00123	50		 push	 eax
  00124	8d 8e a4 02 00
	00		 lea	 ecx, DWORD PTR [esi+676]
  0012a	e8 00 00 00 00	 call	 ?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@0@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase

; 40   : }

  0012f	8b c6		 mov	 eax, esi
  00131	e8 00 00 00 00	 call	 __EH_epilog3
  00136	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 cc 01 00
	00		 add	 ecx, 460		; 000001ccH
  00012	e9 00 00 00 00	 jmp	 ??1ioSprite@@QAE@XZ	; ioSprite::~ioSprite
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 34 02 00
	00		 add	 ecx, 564		; 00000234H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 44 02 00
	00		 add	 ecx, 580		; 00000244H
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 54 02 00
	00		 add	 ecx, 596		; 00000254H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$5:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 64 02 00
	00		 add	 ecx, 612		; 00000264H
  0004d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$6:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 74 02 00
	00		 add	 ecx, 628		; 00000274H
  0005c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0BingoRightWnd@@QAE@XZ$7:
  00062	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	81 c1 84 02 00
	00		 add	 ecx, 644		; 00000284H
  0006b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0BingoRightWnd@@QAE@XZ:
  00071	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00075	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00078	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0007b	33 c8		 xor	 ecx, eax
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0BingoRightWnd@@QAE@XZ
  00087	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0BingoRightWnd@@QAE@XZ ENDP				; BingoRightWnd::BingoRightWnd
; Function compile flags: /Ogsp
;	COMDAT ??_GBingoRightWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBingoRightWnd@@UAEPAXI@Z PROC			; BingoRightWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1BingoRightWnd@@UAE@XZ ; BingoRightWnd::~BingoRightWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GBingoRightWnd@@UAEPAXI@Z ENDP			; BingoRightWnd::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@BingoRightWnd@@UAEXXZ
_TEXT	SEGMENT
$T519878 = -4						; size = 4
?iwm_hide@BingoRightWnd@@UAEXXZ PROC			; BingoRightWnd::iwm_hide, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 220  : 	m_WindowType   = RWT_NONE;

  00007	83 a6 b4 01 00
	00 00		 and	 DWORD PTR [esi+436], 0

; 221  : 	m_BallAniState = BAS_NONE;

  0000e	83 a6 c4 01 00
	00 00		 and	 DWORD PTR [esi+452], 0

; 222  : 	m_BallEffect.Init();

  00015	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  0001b	e8 00 00 00 00	 call	 ?Init@ioSprite@@QAEXXZ	; ioSprite::Init

; 223  : 	m_vBallAfterImageList.clear();

  00020	8d 8e a4 02 00
	00		 lea	 ecx, DWORD PTR [esi+676]
  00026	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	50		 push	 eax
  0002c	52		 push	 edx
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T519878[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@0@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase
  00036	5e		 pop	 esi

; 224  : }

  00037	c9		 leave
  00038	c3		 ret	 0
?iwm_hide@BingoRightWnd@@UAEXXZ ENDP			; BingoRightWnd::iwm_hide
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXABUBallAfterImage@BingoRightWnd@@@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXABUBallAfterImage@BingoRightWnd@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXABUBallAfterImage@BingoRightWnd@@@Z PROC ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back@2
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 14		 push	 20			; 00000014H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXI@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 14	 imul	 edi, 20			; 00000014H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@AAU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@AAU23@@Z ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@IAEXI@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@UBallAfterImage@BingoRightWnd@@ABU34@@std@@YAXAAV?$allocator@UBallAfterImage@BingoRightWnd@@@0@PAUBallAfterImage@BingoRightWnd@@ABU23@@Z ; std::_Cons_val<std::allocator<BingoRightWnd::BallAfterImage>,BingoRightWnd::BallAfterImage,BingoRightWnd::BallAfterImage const &>
$LN20@push_back@2:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 14	 add	 DWORD PTR [esi+4], 20	; 00000014H
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXABUBallAfterImage@BingoRightWnd@@@Z ENDP ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::push_back
_TEXT	ENDS
PUBLIC	__real@406f400000000000
PUBLIC	__real@4077c00000000000
PUBLIC	__real@3fc99999a0000000
PUBLIC	__real@3fe8000000000000
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessBallAni@BingoRightWnd@@IAEXXZ		; BingoRightWnd::ProcessBallAni
EXTRN	?Process@ioSprite@@QAEXXZ:PROC			; ioSprite::Process
EXTRN	?SetPlay@ioSprite@@QAEXK@Z:PROC			; ioSprite::SetPlay
EXTRN	?CheckAllBingo@ioBingo@@QAE_NXZ:PROC		; ioBingo::CheckAllBingo
EXTRN	__imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@HK@Z:PROC
EXTRN	?Width@Setting@@SAHXZ:PROC			; Setting::Width
EXTRN	?Height@Setting@@SAHXZ:PROC			; Setting::Height
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@4077c00000000000
CONST	SEGMENT
__real@4077c00000000000 DQ 04077c00000000000r	; 380
CONST	ENDS
;	COMDAT __real@3fc99999a0000000
CONST	SEGMENT
__real@3fc99999a0000000 DQ 03fc99999a0000000r	; 0.2
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
CONST	ENDS
;	COMDAT ?ProcessBallAni@BingoRightWnd@@IAEXXZ
_TEXT	SEGMENT
_kImage$508949 = -92					; size = 20
$T519927 = -72						; size = 8
$T519923 = -72						; size = 8
$T519930 = -68						; size = 4
tv605 = -64						; size = 4
_fRate$509125 = -64					; size = 4
_i$508956 = -64						; size = 4
_fRate$508942 = -64					; size = 4
$T519926 = -60						; size = 8
$T519925 = -60						; size = 8
$T519924 = -60						; size = 8
tv725 = -56						; size = 4
tv721 = -56						; size = 4
tv694 = -56						; size = 4
tv688 = -56						; size = 4
tv682 = -56						; size = 4
tv675 = -56						; size = 4
tv671 = -56						; size = 4
tv667 = -56						; size = 4
tv629 = -56						; size = 4
tv623 = -56						; size = 4
tv619 = -56						; size = 4
tv615 = -56						; size = 4
_pWnd$508952 = -56					; size = 4
_vPos$508936 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
?ProcessBallAni@BingoRightWnd@@IAEXXZ PROC		; BingoRightWnd::ProcessBallAni, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 637  : 	if( m_BallAniState == BAS_NONE )

  00013	83 be c4 01 00
	00 00		 cmp	 DWORD PTR [esi+452], 0
  0001a	0f 84 c6 04 00
	00		 je	 $LN28@ProcessBal

; 638  : 		return;
; 639  : 
; 640  : 	if( m_dwBallAniCheckTime == 0 )

  00020	83 be c8 01 00
	00 00		 cmp	 DWORD PTR [esi+456], 0
  00027	0f 84 b9 04 00
	00		 je	 $LN28@ProcessBal

; 641  : 		return;
; 642  : 
; 643  : 	DWORD dwCurTime = FRAMEGETTIME();

  0002d	53		 push	 ebx
  0002e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00034	57		 push	 edi
  00035	ff d3		 call	 ebx
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0003f	8b f8		 mov	 edi, eax

; 644  : 
; 645  : 	switch( m_BallAniState )

  00041	8b 86 c4 01 00
	00		 mov	 eax, DWORD PTR [esi+452]
  00047	48		 dec	 eax
  00048	0f 84 99 03 00
	00		 je	 $LN23@ProcessBal
  0004e	48		 dec	 eax
  0004f	0f 84 72 03 00
	00		 je	 $LN21@ProcessBal
  00055	48		 dec	 eax
  00056	0f 84 41 03 00
	00		 je	 $LN19@ProcessBal
  0005c	48		 dec	 eax
  0005d	74 62		 je	 SHORT $LN17@ProcessBal
  0005f	48		 dec	 eax
  00060	74 12		 je	 SHORT $LN7@ProcessBal
  00062	48		 dec	 eax
  00063	0f 85 c2 03 00
	00		 jne	 $LN22@ProcessBal

; 733  : 	case BAS_REWARD_EFFECT:
; 734  : 		m_BallAniState = BAS_NONE;

  00069	21 86 c4 01 00
	00		 and	 DWORD PTR [esi+452], eax

; 735  : 		break;

  0006f	e9 b7 03 00 00	 jmp	 $LN22@ProcessBal
$LN7@ProcessBal:

; 724  : 	case BAS_NUMBER_EFFECT:
; 725  : 		{
; 726  : 			if( m_dwBallAniCheckTime < dwCurTime )

  00074	39 be c8 01 00
	00		 cmp	 DWORD PTR [esi+456], edi
  0007a	0f 83 ab 03 00
	00		 jae	 $LN22@ProcessBal

; 727  : 			{
; 728  : 				m_dwBallAniCheckTime = dwCurTime + FLOAT100;

  00080	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00085	89 45 c8	 mov	 DWORD PTR tv725[ebp], eax
  00088	db 45 c8	 fild	 DWORD PTR tv725[ebp]
  0008b	85 c0		 test	 eax, eax
  0008d	79 06		 jns	 SHORT $LN102@ProcessBal
  0008f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN102@ProcessBal:
  00095	89 7d c8	 mov	 DWORD PTR tv721[ebp], edi
  00098	db 45 c8	 fild	 DWORD PTR tv721[ebp]
  0009b	85 ff		 test	 edi, edi
  0009d	79 06		 jns	 SHORT $LN103@ProcessBal
  0009f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN103@ProcessBal:
  000a5	de c1		 faddp	 ST(1), ST(0)
  000a7	e8 00 00 00 00	 call	 __ftol2
  000ac	89 86 c8 01 00
	00		 mov	 DWORD PTR [esi+456], eax

; 729  : 				m_BallAniState = BAS_REWARD_EFFECT;

  000b2	c7 86 c4 01 00
	00 06 00 00 00	 mov	 DWORD PTR [esi+452], 6

; 730  : 			}
; 731  : 		}
; 732  : 		break;

  000bc	e9 6a 03 00 00	 jmp	 $LN22@ProcessBal
$LN17@ProcessBal:

; 675  : 	case BAS_MOVING:
; 676  : 		{
; 677  : 			D3DXVECTOR2 vPos[6];
; 678  : 			vPos[0] = m_vBallPos;

  000c1	8b 86 1c 02 00
	00		 mov	 eax, DWORD PTR [esi+540]

; 679  : 			vPos[1] = D3DXVECTOR2( 0, 0 );

  000c7	0f 57 c0	 xorps	 xmm0, xmm0
  000ca	89 45 cc	 mov	 DWORD PTR _vPos$508936[ebp], eax
  000cd	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  000d3	89 45 d0	 mov	 DWORD PTR _vPos$508936[ebp+4], eax
  000d6	f3 0f 11 45 b8	 movss	 DWORD PTR $T519923[ebp], xmm0
  000db	8b 45 b8	 mov	 eax, DWORD PTR $T519923[ebp]
  000de	f3 0f 11 45 bc	 movss	 DWORD PTR $T519923[ebp+4], xmm0
  000e3	89 45 d4	 mov	 DWORD PTR _vPos$508936[ebp+8], eax
  000e6	8b 45 bc	 mov	 eax, DWORD PTR $T519923[ebp+4]
  000e9	89 45 d8	 mov	 DWORD PTR _vPos$508936[ebp+12], eax

; 680  : 			vPos[2] = D3DXVECTOR2( 0, Setting::Height() );

  000ec	f3 0f 11 45 c4	 movss	 DWORD PTR $T519924[ebp], xmm0
  000f1	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  000f6	0f 57 c0	 xorps	 xmm0, xmm0
  000f9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000fd	8b 45 c4	 mov	 eax, DWORD PTR $T519924[ebp]
  00100	f3 0f 11 45 c8	 movss	 DWORD PTR $T519924[ebp+4], xmm0
  00105	89 45 dc	 mov	 DWORD PTR _vPos$508936[ebp+16], eax
  00108	8b 45 c8	 mov	 eax, DWORD PTR $T519924[ebp+4]
  0010b	89 45 e0	 mov	 DWORD PTR _vPos$508936[ebp+20], eax

; 681  : 			vPos[3] = D3DXVECTOR2( Setting::Width(), Setting::Height() );

  0010e	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0011a	f3 0f 11 45 c4	 movss	 DWORD PTR $T519925[ebp], xmm0
  0011f	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  00124	0f 57 c0	 xorps	 xmm0, xmm0
  00127	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0012b	8b 45 c4	 mov	 eax, DWORD PTR $T519925[ebp]
  0012e	f3 0f 11 45 c8	 movss	 DWORD PTR $T519925[ebp+4], xmm0
  00133	89 45 e4	 mov	 DWORD PTR _vPos$508936[ebp+24], eax
  00136	8b 45 c8	 mov	 eax, DWORD PTR $T519925[ebp+4]
  00139	89 45 e8	 mov	 DWORD PTR _vPos$508936[ebp+28], eax

; 682  : 			vPos[4] = D3DXVECTOR2( Setting::Width()*0.75f, Setting::Height()*0.2f );

  0013c	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00141	0f 57 c0	 xorps	 xmm0, xmm0
  00144	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00148	0f 5a c0	 cvtps2pd xmm0, xmm0
  0014b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  00153	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00157	f3 0f 11 45 c4	 movss	 DWORD PTR $T519926[ebp], xmm0
  0015c	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  00161	0f 57 c0	 xorps	 xmm0, xmm0
  00164	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00168	8b 45 c4	 mov	 eax, DWORD PTR $T519926[ebp]
  0016b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0016e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc99999a0000000
  00176	89 45 ec	 mov	 DWORD PTR _vPos$508936[ebp+32], eax
  00179	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0017d	f3 0f 11 45 c8	 movss	 DWORD PTR $T519926[ebp+4], xmm0
  00182	8b 45 c8	 mov	 eax, DWORD PTR $T519926[ebp+4]
  00185	89 45 f0	 mov	 DWORD PTR _vPos$508936[ebp+36], eax

; 683  : 			vPos[5] = m_vTargetPos;

  00188	8b 86 2c 02 00
	00		 mov	 eax, DWORD PTR [esi+556]
  0018e	89 45 f4	 mov	 DWORD PTR _vPos$508936[ebp+40], eax
  00191	8b 86 30 02 00
	00		 mov	 eax, DWORD PTR [esi+560]
  00197	89 45 f8	 mov	 DWORD PTR _vPos$508936[ebp+44], eax

; 684  : 
; 685  : 			float fRate = FLOAT1;

  0019a	b8 01 00 00 00	 mov	 eax, 1
  0019f	89 45 c8	 mov	 DWORD PTR tv694[ebp], eax
  001a2	db 45 c8	 fild	 DWORD PTR tv694[ebp]
  001a5	85 c0		 test	 eax, eax
  001a7	79 06		 jns	 SHORT $LN104@ProcessBal
  001a9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN104@ProcessBal:
  001af	d9 5d c0	 fstp	 DWORD PTR _fRate$508942[ebp]

; 686  : 			if( m_dwBallAniCheckTime >= FRAMEGETTIME() )

  001b2	ff d3		 call	 ebx
  001b4	8b c8		 mov	 ecx, eax
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  001bc	39 86 c8 01 00
	00		 cmp	 DWORD PTR [esi+456], eax
  001c2	72 44		 jb	 SHORT $LN16@ProcessBal

; 687  : 				fRate = FLOAT1 - ( ( m_dwBallAniCheckTime - FRAMEGETTIME() ) / 380.0f );

  001c4	b8 01 00 00 00	 mov	 eax, 1
  001c9	89 45 c8	 mov	 DWORD PTR tv688[ebp], eax
  001cc	db 45 c8	 fild	 DWORD PTR tv688[ebp]
  001cf	85 c0		 test	 eax, eax
  001d1	79 06		 jns	 SHORT $LN105@ProcessBal
  001d3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN105@ProcessBal:
  001d9	d9 5d c0	 fstp	 DWORD PTR tv605[ebp]
  001dc	ff d3		 call	 ebx
  001de	8b c8		 mov	 ecx, eax
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  001e6	8b 8e c8 01 00
	00		 mov	 ecx, DWORD PTR [esi+456]
  001ec	2b c8		 sub	 ecx, eax
  001ee	89 4d c8	 mov	 DWORD PTR tv682[ebp], ecx
  001f1	db 45 c8	 fild	 DWORD PTR tv682[ebp]
  001f4	79 06		 jns	 SHORT $LN106@ProcessBal
  001f6	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN106@ProcessBal:
  001fc	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4077c00000000000
  00202	d8 6d c0	 fsubr	 DWORD PTR tv605[ebp]
  00205	d9 5d c0	 fstp	 DWORD PTR _fRate$508942[ebp]
$LN16@ProcessBal:

; 688  : 
; 689  : 			BallAfterImage kImage( m_vCurPos, MAX_ALPHA_RATE * FLOAT08 );

  00208	b8 08 00 00 00	 mov	 eax, 8
  0020d	8b c8		 mov	 ecx, eax
  0020f	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00214	89 4d c8	 mov	 DWORD PTR tv675[ebp], ecx
  00217	db 45 c8	 fild	 DWORD PTR tv675[ebp]
  0021a	85 c9		 test	 ecx, ecx
  0021c	79 06		 jns	 SHORT $LN107@ProcessBal
  0021e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN107@ProcessBal:
  00224	89 45 c8	 mov	 DWORD PTR tv671[ebp], eax
  00227	db 45 c8	 fild	 DWORD PTR tv671[ebp]
  0022a	85 c0		 test	 eax, eax
  0022c	79 06		 jns	 SHORT $LN108@ProcessBal
  0022e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN108@ProcessBal:
  00234	de f9		 fdivp	 ST(1), ST(0)
  00236	d9 5d c8	 fstp	 DWORD PTR tv667[ebp]
  00239	d9 45 c8	 fld	 DWORD PTR tv667[ebp]
  0023c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000
  00242	e8 00 00 00 00	 call	 __ftol2_sse
  00247	50		 push	 eax
  00248	ff b6 28 02 00
	00		 push	 DWORD PTR [esi+552]
  0024e	8d 4d a4	 lea	 ecx, DWORD PTR _kImage$508949[ebp]
  00251	ff b6 24 02 00
	00		 push	 DWORD PTR [esi+548]
  00257	e8 00 00 00 00	 call	 ??0BallAfterImage@BingoRightWnd@@QAE@UD3DXVECTOR2@@H@Z ; BingoRightWnd::BallAfterImage::BallAfterImage

; 690  : 			m_vBallAfterImageList.push_back( kImage );

  0025c	8d 45 a4	 lea	 eax, DWORD PTR _kImage$508949[ebp]
  0025f	50		 push	 eax
  00260	8d 8e a4 02 00
	00		 lea	 ecx, DWORD PTR [esi+676]
  00266	e8 00 00 00 00	 call	 ?push_back@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAEXABUBallAfterImage@BingoRightWnd@@@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::push_back

; 691  : 
; 692  : 			m_vCurPos = PointOnCubicBezier( vPos, fRate );

  0026b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _fRate$508942[ebp]
  00270	51		 push	 ecx
  00271	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00276	8d 45 cc	 lea	 eax, DWORD PTR _vPos$508936[ebp]
  00279	50		 push	 eax
  0027a	8d 45 b8	 lea	 eax, DWORD PTR $T519927[ebp]
  0027d	50		 push	 eax
  0027e	8b ce		 mov	 ecx, esi
  00280	e8 00 00 00 00	 call	 ?PointOnCubicBezier@BingoRightWnd@@IAE?AUD3DXVECTOR2@@PAU2@M@Z ; BingoRightWnd::PointOnCubicBezier
  00285	8b 08		 mov	 ecx, DWORD PTR [eax]
  00287	89 8e 24 02 00
	00		 mov	 DWORD PTR [esi+548], ecx
  0028d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00290	89 86 28 02 00
	00		 mov	 DWORD PTR [esi+552], eax

; 693  : 
; 694  : 			if( m_dwBallAniCheckTime < dwCurTime )

  00296	39 be c8 01 00
	00		 cmp	 DWORD PTR [esi+456], edi
  0029c	0f 83 89 01 00
	00		 jae	 $LN22@ProcessBal

; 695  : 			{
; 696  : 				m_dwBallAniCheckTime = dwCurTime + 200;
; 697  : 				m_BallAniState = BAS_NUMBER_EFFECT;
; 698  : 
; 699  : 				BingoWnd *pWnd = dynamic_cast<BingoWnd*>( GetParent() );

  002a2	6a 00		 push	 0
  002a4	68 00 00 00 00	 push	 OFFSET ??_R0?AVBingoWnd@@@8
  002a9	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  002ae	81 c7 c8 00 00
	00		 add	 edi, 200		; 000000c8H
  002b4	6a 00		 push	 0
  002b6	8b ce		 mov	 ecx, esi
  002b8	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi
  002be	c7 86 c4 01 00
	00 05 00 00 00	 mov	 DWORD PTR [esi+452], 5
  002c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 ___RTDynamicCast
  002d4	83 c4 14	 add	 esp, 20			; 00000014H
  002d7	89 45 c8	 mov	 DWORD PTR _pWnd$508952[ebp], eax

; 700  : 				if( pWnd )

  002da	85 c0		 test	 eax, eax
  002dc	0f 84 98 00 00
	00		 je	 $LN11@ProcessBal

; 701  : 				{
; 702  : 					for( int i=BingoWnd::ID_NUMBER_BTN_1; i<BingoWnd::ID_NUMBER_BTN_25+1; ++i)

  002e2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@HK@Z
  002e8	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  002ee	c7 45 c0 65 00
	00 00		 mov	 DWORD PTR _i$508956[ebp], 101 ; 00000065H
$LL101@ProcessBal:

; 703  : 					{
; 704  : 						NumberButton *pBtn = dynamic_cast<NumberButton*>( pWnd->FindChildWnd(i) );

  002f5	8b 4d c8	 mov	 ecx, DWORD PTR _pWnd$508952[ebp]
  002f8	6a 00		 push	 0
  002fa	68 00 00 00 00	 push	 OFFSET ??_R0?AVNumberButton@@@8
  002ff	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00304	6a 00		 push	 0
  00306	ff 75 c0	 push	 DWORD PTR _i$508956[ebp]
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  0030f	50		 push	 eax
  00310	e8 00 00 00 00	 call	 ___RTDynamicCast
  00315	83 c4 14	 add	 esp, 20			; 00000014H

; 705  : 						if( pBtn && pBtn->GetNumber() == m_iLastGetNumber )

  00318	85 c0		 test	 eax, eax
  0031a	74 4f		 je	 SHORT $LN12@ProcessBal
  0031c	8b 88 28 02 00
	00		 mov	 ecx, DWORD PTR [eax+552]
  00322	3b 8e c0 01 00
	00		 cmp	 ecx, DWORD PTR [esi+448]
  00328	75 41		 jne	 SHORT $LN12@ProcessBal

; 706  : 						{
; 707  : 							pBtn->SetClear();

  0032a	8b c8		 mov	 ecx, eax
  0032c	e8 00 00 00 00	 call	 ?SetClear@NumberButton@@QAEXXZ ; NumberButton::SetClear

; 708  : 
; 709  : 							g_SoundMgr.PlaySound( m_szBallAniSound3 );

  00331	6a 04		 push	 4
  00333	8d 86 84 02 00
	00		 lea	 eax, DWORD PTR [esi+644]
  00339	6a 00		 push	 0
  0033b	50		 push	 eax
  0033c	ff d3		 call	 ebx
  0033e	8b c8		 mov	 ecx, eax
  00340	ff d7		 call	 edi

; 710  : 
; 711  : 							ioBingo *pBingo = g_MyInfo.GetBingo();

  00342	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00347	8b 88 94 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2964]

; 712  : 							if( pBingo && pBingo->CheckAllBingo() )

  0034d	85 c9		 test	 ecx, ecx
  0034f	74 1a		 je	 SHORT $LN12@ProcessBal
  00351	e8 00 00 00 00	 call	 ?CheckAllBingo@ioBingo@@QAE_NXZ ; ioBingo::CheckAllBingo
  00356	84 c0		 test	 al, al
  00358	74 11		 je	 SHORT $LN12@ProcessBal

; 713  : 								g_SoundMgr.PlaySound( m_szAllBingoSound );

  0035a	6a 04		 push	 4
  0035c	8d 86 94 02 00
	00		 lea	 eax, DWORD PTR [esi+660]
  00362	6a 00		 push	 0
  00364	50		 push	 eax
  00365	ff d3		 call	 ebx
  00367	8b c8		 mov	 ecx, eax
  00369	ff d7		 call	 edi
$LN12@ProcessBal:

; 701  : 				{
; 702  : 					for( int i=BingoWnd::ID_NUMBER_BTN_1; i<BingoWnd::ID_NUMBER_BTN_25+1; ++i)

  0036b	ff 45 c0	 inc	 DWORD PTR _i$508956[ebp]
  0036e	83 7d c0 7e	 cmp	 DWORD PTR _i$508956[ebp], 126 ; 0000007eH
  00372	7c 81		 jl	 SHORT $LL101@ProcessBal
  00374	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
$LN11@ProcessBal:

; 714  : 						}
; 715  : 					}
; 716  : 				}
; 717  : 
; 718  : 				ioBingo *pBingo = g_MyInfo.GetBingo();

  0037a	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0037f	8b 88 94 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2964]

; 719  : 				if( pBingo )

  00385	85 c9		 test	 ecx, ecx
  00387	0f 84 9e 00 00
	00		 je	 $LN22@ProcessBal

; 720  : 					pBingo->CheckBingoLine( m_iLastGetNumber );

  0038d	ff b6 c0 01 00
	00		 push	 DWORD PTR [esi+448]
  00393	e8 00 00 00 00	 call	 ?CheckBingoLine@ioBingo@@QAE_NH@Z ; ioBingo::CheckBingoLine

; 721  : 			}
; 722  : 		}
; 723  : 		break;

  00398	e9 8e 00 00 00	 jmp	 $LN22@ProcessBal
$LN19@ProcessBal:

; 667  : 	case BAS_WAIT:
; 668  : 		if( m_dwBallAniCheckTime < dwCurTime )

  0039d	39 be c8 01 00
	00		 cmp	 DWORD PTR [esi+456], edi
  003a3	0f 83 82 00 00
	00		 jae	 $LN22@ProcessBal

; 669  : 		{
; 670  : 			m_dwBallAniCheckTime = dwCurTime + 380;
; 671  : 			m_BallAniState = BAS_MOVING;

  003a9	6a 04		 push	 4
  003ab	58		 pop	 eax
  003ac	81 c7 7c 01 00
	00		 add	 edi, 380		; 0000017cH
  003b2	89 86 c4 01 00
	00		 mov	 DWORD PTR [esi+452], eax

; 672  : 			g_SoundMgr.PlaySound( m_szBallAniSound2 );

  003b8	50		 push	 eax
  003b9	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi
  003bf	8d 86 74 02 00
	00		 lea	 eax, DWORD PTR [esi+628]

; 673  : 		}
; 674  : 		break;

  003c5	eb 53		 jmp	 SHORT $LN112@ProcessBal
$LN21@ProcessBal:

; 655  : 			}
; 656  : 		}
; 657  : 		break;
; 658  : 	case BAS_SHINING:
; 659  : 		{
; 660  : 			if( m_dwBallAniCheckTime < dwCurTime )

  003c7	39 be c8 01 00
	00		 cmp	 DWORD PTR [esi+456], edi
  003cd	73 5c		 jae	 SHORT $LN22@ProcessBal

; 661  : 			{
; 662  : 				m_dwBallAniCheckTime = dwCurTime + 500;

  003cf	81 c7 f4 01 00
	00		 add	 edi, 500		; 000001f4H
  003d5	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi

; 663  : 				m_BallAniState = BAS_WAIT;

  003db	c7 86 c4 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+452], 3

; 664  : 			}
; 665  : 		}
; 666  : 		break;

  003e5	eb 44		 jmp	 SHORT $LN22@ProcessBal
$LN23@ProcessBal:

; 646  : 	{
; 647  : 	case BAS_POP:
; 648  : 		{
; 649  : 			if( m_dwBallAniCheckTime < dwCurTime )

  003e7	39 be c8 01 00
	00		 cmp	 DWORD PTR [esi+456], edi
  003ed	73 3c		 jae	 SHORT $LN22@ProcessBal

; 650  : 			{
; 651  : 				m_dwBallAniCheckTime = dwCurTime + 1000;

  003ef	81 c7 e8 03 00
	00		 add	 edi, 1000		; 000003e8H

; 652  : 				m_BallAniState = BAS_SHINING;
; 653  : 				m_BallEffect.SetPlay();

  003f5	6a 00		 push	 0
  003f7	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  003fd	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi
  00403	c7 86 c4 01 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+452], 2
  0040d	e8 00 00 00 00	 call	 ?SetPlay@ioSprite@@QAEXK@Z ; ioSprite::SetPlay

; 654  : 				g_SoundMgr.PlaySound( m_szBallAniSound1 );

  00412	6a 04		 push	 4
  00414	8d 86 64 02 00
	00		 lea	 eax, DWORD PTR [esi+612]
$LN112@ProcessBal:
  0041a	6a 00		 push	 0
  0041c	50		 push	 eax
  0041d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  00423	8b c8		 mov	 ecx, eax
  00425	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@HK@Z
$LN22@ProcessBal:

; 736  : 	}
; 737  : 
; 738  : 	BallAfterImageList::iterator iter = m_vBallAfterImageList.begin();

  0042b	8b be a4 02 00
	00		 mov	 edi, DWORD PTR [esi+676]
  00431	e9 97 00 00 00	 jmp	 $LN113@ProcessBal
$LL4@ProcessBal:

; 740  : 	{
; 741  : 		BallAfterImage &kInfo = *iter;
; 742  : 		if( kInfo.m_dwEndTime < FRAMEGETTIME() )

  00436	ff d3		 call	 ebx
  00438	8b c8		 mov	 ecx, eax
  0043a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00440	39 47 10	 cmp	 DWORD PTR [edi+16], eax
  00443	73 14		 jae	 SHORT $LN2@ProcessBal

; 743  : 			iter = m_vBallAfterImageList.erase( iter );

  00445	57		 push	 edi
  00446	8d 45 bc	 lea	 eax, DWORD PTR $T519930[ebp]
  00449	50		 push	 eax
  0044a	8d 8e a4 02 00
	00		 lea	 ecx, DWORD PTR [esi+676]
  00450	e8 00 00 00 00	 call	 ?erase@?$vector@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBallAfterImage@BingoRightWnd@@V?$allocator@UBallAfterImage@BingoRightWnd@@@std@@@std@@@2@@Z ; std::vector<BingoRightWnd::BallAfterImage,std::allocator<BingoRightWnd::BallAfterImage> >::erase
  00455	8b 38		 mov	 edi, DWORD PTR [eax]

; 744  : 		else

  00457	eb 74		 jmp	 SHORT $LN113@ProcessBal
$LN2@ProcessBal:

; 745  : 		{
; 746  : 			float fRate = ( kInfo.m_dwEndTime - FRAMEGETTIME() ) / 250.0f;

  00459	ff d3		 call	 ebx
  0045b	8b c8		 mov	 ecx, eax
  0045d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00463	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00466	2b c8		 sub	 ecx, eax
  00468	89 4d c8	 mov	 DWORD PTR tv629[ebp], ecx
  0046b	db 45 c8	 fild	 DWORD PTR tv629[ebp]
  0046e	79 06		 jns	 SHORT $LN109@ProcessBal
  00470	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN109@ProcessBal:
  00476	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@406f400000000000
  0047c	d9 5d c0	 fstp	 DWORD PTR _fRate$509125[ebp]

; 747  : 			kInfo.m_iAlpha = (MAX_ALPHA_RATE*FLOAT05)*fRate;

  0047f	b8 05 00 00 00	 mov	 eax, 5
  00484	8b c8		 mov	 ecx, eax
  00486	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0048b	89 4d c8	 mov	 DWORD PTR tv623[ebp], ecx
  0048e	db 45 c8	 fild	 DWORD PTR tv623[ebp]
  00491	85 c9		 test	 ecx, ecx
  00493	79 06		 jns	 SHORT $LN110@ProcessBal
  00495	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN110@ProcessBal:
  0049b	89 45 c8	 mov	 DWORD PTR tv619[ebp], eax
  0049e	db 45 c8	 fild	 DWORD PTR tv619[ebp]
  004a1	85 c0		 test	 eax, eax
  004a3	79 06		 jns	 SHORT $LN111@ProcessBal
  004a5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN111@ProcessBal:
  004ab	de f9		 fdivp	 ST(1), ST(0)
  004ad	d9 5d c8	 fstp	 DWORD PTR tv615[ebp]
  004b0	d9 45 c8	 fld	 DWORD PTR tv615[ebp]
  004b3	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000
  004b9	d8 4d c0	 fmul	 DWORD PTR _fRate$509125[ebp]
  004bc	e8 00 00 00 00	 call	 __ftol2_sse

; 748  : 			kInfo.m_fScale = fRate;

  004c1	d9 45 c0	 fld	 DWORD PTR _fRate$509125[ebp]
  004c4	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  004c7	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 749  : 			iter++;

  004ca	83 c7 14	 add	 edi, 20			; 00000014H
$LN113@ProcessBal:

; 739  : 	while( iter!=m_vBallAfterImageList.end() )

  004cd	3b be a8 02 00
	00		 cmp	 edi, DWORD PTR [esi+680]
  004d3	0f 85 5d ff ff
	ff		 jne	 $LL4@ProcessBal

; 750  : 		}
; 751  : 	}
; 752  : 
; 753  : 	m_BallEffect.Process();

  004d9	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  004df	e8 00 00 00 00	 call	 ?Process@ioSprite@@QAEXXZ ; ioSprite::Process
  004e4	5f		 pop	 edi
  004e5	5b		 pop	 ebx
$LN28@ProcessBal:

; 754  : }

  004e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e9	33 cd		 xor	 ecx, ebp
  004eb	5e		 pop	 esi
  004ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f1	c9		 leave
  004f2	c3		 ret	 0
?ProcessBallAni@BingoRightWnd@@IAEXXZ ENDP		; BingoRightWnd::ProcessBallAni
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GCKKDBCF@BingoRightWnd?3?3OnProcess?$AA@ ; `string'
EXTRN	__imp_?SafeSprintf@@YAXPADHPBDH@Z:PROC
EXTRN	__imp_?SafeSprintf@@YAXPADHPBD1H@Z:PROC
EXTRN	__imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z:PROC
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BJ@GCKKDBCF@BingoRightWnd?3?3OnProcess?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
CONST	SEGMENT
??_C@_0BJ@GCKKDBCF@BingoRightWnd?3?3OnProcess?$AA@ DB 'BingoRightWnd::OnP'
	DB	'rocess', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnProcess@BingoRightWnd@@MAEXM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnProcess@BingoRightWnd@@MAEXM@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?OnProcess@BingoRightWnd@@MAEXM@Z$1
__ehfuncinfo$?OnProcess@BingoRightWnd@@MAEXM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnProcess@BingoRightWnd@@MAEXM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingorightwnd.cpp
xdata$x	ENDS
;	COMDAT ?OnProcess@BingoRightWnd@@MAEXM@Z
_TEXT	SEGMENT
_szItemName$508800 = -324				; size = 16
_szItemName$508796 = -308				; size = 16
_iShuffleNumberItemCnt$ = -292				; size = 4
_iShuffleRewardItemCnt$ = -288				; size = 4
_iRandomNumberItemCnt$ = -284				; size = 4
_pWnd$ = -280						; size = 4
_szBuf$ = -276						; size = 260
__$EHRec$ = -12						; size = 12
_fTimePerSec$ = 8					; size = 4
?OnProcess@BingoRightWnd@@MAEXM@Z PROC			; BingoRightWnd::OnProcess, COMDAT
; _this$ = ecx

; 388  : {

  00000	68 38 01 00 00	 push	 312			; 00000138H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnProcess@BingoRightWnd@@MAEXM@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f9		 mov	 edi, ecx

; 389  : 	if( !IsShow() )

  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00017	84 c0		 test	 al, al
  00019	0f 84 68 02 00
	00		 je	 $LN1@OnProcess

; 390  : 		return;
; 391  : 
; 392  : 	int iGetNumberItemCnt     = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_NUMBER_GASHAPON );

  0001f	68 98 4a 0f 00	 push	 1002136			; 000f4a98H
  00024	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 393  : 	int iShuffleNumberItemCnt = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_NUMBER );

  00030	68 99 4a 0f 00	 push	 1002137			; 000f4a99H
  00035	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0003a	8b c8		 mov	 ecx, eax
  0003c	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 394  : 	int iShuffleRewardItemCnt = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_REWARD_ITEM );

  00041	68 9a 4a 0f 00	 push	 1002138			; 000f4a9aH
  00046	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iShuffleNumberItemCnt$[ebp], eax
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 395  : 	int iRandomNumberItemCnt  = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_RANDOM_NUMBER_CLEAR );

  00058	68 9b 4a 0f 00	 push	 1002139			; 000f4a9bH
  0005d	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _iShuffleRewardItemCnt$[ebp], eax
  00063	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00068	8b c8		 mov	 ecx, eax
  0006a	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 396  : 
; 397  : 	char szBuf[MAX_PATH]="";

  0006f	68 03 01 00 00	 push	 259			; 00000103H
  00074	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _iRandomNumberItemCnt$[ebp], eax
  0007a	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00080	6a 00		 push	 0
  00082	50		 push	 eax
  00083	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  0008a	e8 00 00 00 00	 call	 _memset
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 398  : 	ioWnd *pWnd = NULL;
; 399  : 	pWnd = FindChildWnd( ID_SHUFFLE_NUMBER_BTN );

  00092	6a 03		 push	 3
  00094	8b cf		 mov	 ecx, edi
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z

; 400  : 	if( pWnd )

  0009c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z
  000a2	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax
  000a8	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000ad	85 c0		 test	 eax, eax
  000af	74 53		 je	 SHORT $LN6@OnProcess

; 401  : 	{
; 402  : 		SafeSprintf( szBuf, sizeof(szBuf), STR(1), m_ShuffleNumberItemName.c_str(), iShuffleNumberItemCnt );

  000b1	ff b5 dc fe ff
	ff		 push	 DWORD PTR _iShuffleNumberItemCnt$[ebp]
  000b7	8d 8f 34 02 00
	00		 lea	 ecx, DWORD PTR [edi+564]
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000c3	50		 push	 eax
  000c4	6a 00		 push	 0
  000c6	6a 01		 push	 1
  000c8	56		 push	 esi
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GCKKDBCF@BingoRightWnd?3?3OnProcess?$AA@
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000d4	8b c8		 mov	 ecx, eax
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  000dc	50		 push	 eax
  000dd	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000e3	68 04 01 00 00	 push	 260			; 00000104H
  000e8	50		 push	 eax
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBD1H@Z

; 403  : 		pWnd->SetTitleText( szBuf );

  000ef	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$[ebp]
  000f5	83 c4 14	 add	 esp, 20			; 00000014H
  000f8	6a 00		 push	 0
  000fa	56		 push	 esi
  000fb	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00101	50		 push	 eax
  00102	ff d3		 call	 ebx
$LN6@OnProcess:

; 404  : 	}
; 405  : 	pWnd = FindChildWnd( ID_SHUFFLE_REWARD_BTN );

  00104	6a 04		 push	 4
  00106	8b cf		 mov	 ecx, edi
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  0010e	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax

; 406  : 	if( pWnd )

  00114	85 c0		 test	 eax, eax
  00116	0f 84 97 00 00
	00		 je	 $LN5@OnProcess

; 407  : 	{
; 408  : 		ioHashString szItemName;

  0011c	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508796[ebp]
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 409  : 		ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_NUMBER );

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  0012e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00132	68 99 4a 0f 00	 push	 1002137			; 000f4a99H
  00137	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem

; 410  : 		if( pItem )

  0013c	85 c0		 test	 eax, eax
  0013e	74 10		 je	 SHORT $LN4@OnProcess

; 411  : 			szItemName = pItem->GetName();

  00140	83 c0 04	 add	 eax, 4
  00143	50		 push	 eax
  00144	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508796[ebp]
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
$LN4@OnProcess:

; 412  : 		SafeSprintf( szBuf, sizeof( szBuf ), STR(1), m_ShuffleRewardItemName.c_str(), iShuffleRewardItemCnt );

  00150	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _iShuffleRewardItemCnt$[ebp]
  00156	8d 8f 44 02 00
	00		 lea	 ecx, DWORD PTR [edi+580]
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00162	50		 push	 eax
  00163	6a 00		 push	 0
  00165	6a 01		 push	 1
  00167	56		 push	 esi
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GCKKDBCF@BingoRightWnd?3?3OnProcess?$AA@
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00173	8b c8		 mov	 ecx, eax
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0017b	50		 push	 eax
  0017c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00182	68 04 01 00 00	 push	 260			; 00000104H
  00187	50		 push	 eax
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBD1H@Z

; 413  : 		pWnd->SetTitleText( szBuf );

  0018e	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00194	83 c4 14	 add	 esp, 20			; 00000014H
  00197	6a 00		 push	 0
  00199	56		 push	 esi
  0019a	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001a0	50		 push	 eax
  001a1	ff d3		 call	 ebx

; 414  : 	}

  001a3	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a7	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508796[ebp]
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN5@OnProcess:

; 415  : 	pWnd = FindChildWnd( ID_GET_SPECIAL_NUMBER_BTN );

  001b3	6a 05		 push	 5
  001b5	8b cf		 mov	 ecx, edi
  001b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  001bd	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax

; 416  : 	if( pWnd )

  001c3	85 c0		 test	 eax, eax
  001c5	0f 84 81 00 00
	00		 je	 $LN3@OnProcess

; 417  : 	{
; 418  : 		ioHashString szItemName;

  001cb	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508800[ebp]
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 419  : 		ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_NUMBER );

  001d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  001dd	68 99 4a 0f 00	 push	 1002137			; 000f4a99H
  001e2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  001e9	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem

; 420  : 		if( pItem )

  001ee	85 c0		 test	 eax, eax
  001f0	74 10		 je	 SHORT $LN2@OnProcess

; 421  : 			szItemName = pItem->GetName();

  001f2	83 c0 04	 add	 eax, 4
  001f5	50		 push	 eax
  001f6	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508800[ebp]
  001fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
$LN2@OnProcess:

; 422  : 		SafeSprintf( szBuf, sizeof( szBuf ), m_SpecialNumberItemName.c_str(), iRandomNumberItemCnt );

  00202	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _iRandomNumberItemCnt$[ebp]
  00208	8d 8f 54 02 00
	00		 lea	 ecx, DWORD PTR [edi+596]
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00214	50		 push	 eax
  00215	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0021b	68 04 01 00 00	 push	 260			; 00000104H
  00220	50		 push	 eax
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDH@Z

; 423  : 		pWnd->SetTitleText( szBuf );

  00227	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$[ebp]
  0022d	83 c4 10	 add	 esp, 16			; 00000010H
  00230	6a 00		 push	 0
  00232	56		 push	 esi
  00233	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00239	50		 push	 eax
  0023a	ff d3		 call	 ebx

; 424  : 	}

  0023c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00240	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508800[ebp]
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN3@OnProcess:

; 425  : 
; 426  : 	ProcessBallAni();

  0024c	8b cf		 mov	 ecx, edi
  0024e	e8 00 00 00 00	 call	 ?ProcessBallAni@BingoRightWnd@@IAEXXZ ; BingoRightWnd::ProcessBallAni

; 427  : 
; 428  : 	if( m_dwCheckTime < FRAMEGETTIME() )

  00253	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00259	ff d6		 call	 esi
  0025b	8b c8		 mov	 ecx, eax
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00263	39 87 b8 01 00
	00		 cmp	 DWORD PTR [edi+440], eax
  00269	73 1c		 jae	 SHORT $LN1@OnProcess

; 429  : 	{
; 430  : 		m_bLightIcon ^= true;

  0026b	80 b7 bc 01 00
	00 01		 xor	 BYTE PTR [edi+444], 1

; 431  : 		m_dwCheckTime = FRAMEGETTIME() + 500;

  00272	ff d6		 call	 esi
  00274	8b c8		 mov	 ecx, eax
  00276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0027c	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  00281	89 87 b8 01 00
	00		 mov	 DWORD PTR [edi+440], eax
$LN1@OnProcess:

; 432  : 	}
; 433  : }

  00287	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0028c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnProcess@BingoRightWnd@@MAEXM@Z$0:
  00000	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508796[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnProcess@BingoRightWnd@@MAEXM@Z$1:
  0000c	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _szItemName$508800[ebp]
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?OnProcess@BingoRightWnd@@MAEXM@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnProcess@BingoRightWnd@@MAEXM@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnProcess@BingoRightWnd@@MAEXM@Z ENDP			; BingoRightWnd::OnProcess
END
