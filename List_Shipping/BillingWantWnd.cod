; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\BillingWantWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	??_7BillingWantWnd@@6B@				; BillingWantWnd::`vftable'
PUBLIC	??0BillingWantWnd@@QAE@XZ			; BillingWantWnd::BillingWantWnd
PUBLIC	??_R4BillingWantWnd@@6B@			; BillingWantWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBillingWantWnd@@@8			; BillingWantWnd `RTTI Type Descriptor'
PUBLIC	??_R3BillingWantWnd@@8				; BillingWantWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BillingWantWnd@@8				; BillingWantWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BillingWantWnd@@8			; BillingWantWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderFrame@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ; BillingWantWnd::AddRenderFrame
PUBLIC	?AddRenderImage@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; BillingWantWnd::AddRenderImage
PUBLIC	?OnRender@BillingWantWnd@@MAEXXZ		; BillingWantWnd::OnRender
PUBLIC	?iwm_command@BillingWantWnd@@UAEXPAVioWnd@@HK@Z	; BillingWantWnd::iwm_command
PUBLIC	?iwm_show@BillingWantWnd@@UAEXXZ		; BillingWantWnd::iwm_show
PUBLIC	?iwm_hide@BillingWantWnd@@UAEXXZ		; BillingWantWnd::iwm_hide
PUBLIC	?iwm_spacebar@BillingWantWnd@@UAE_NXZ		; BillingWantWnd::iwm_spacebar
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EBillingWantWnd@@UAEPAXI@Z:PROC		; BillingWantWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\billingwantwnd.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BillingWantWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BillingWantWnd@@8 DD FLAT:??_R0?AVBillingWantWnd@@@8 ; BillingWantWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BillingWantWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2BillingWantWnd@@8
rdata$r	SEGMENT
??_R2BillingWantWnd@@8 DD FLAT:??_R1A@?0A@EA@BillingWantWnd@@8 ; BillingWantWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3BillingWantWnd@@8
rdata$r	SEGMENT
??_R3BillingWantWnd@@8 DD 00H				; BillingWantWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BillingWantWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBillingWantWnd@@@8
_DATA	SEGMENT
??_R0?AVBillingWantWnd@@@8 DD FLAT:??_7type_info@@6B@	; BillingWantWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBillingWantWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BillingWantWnd@@6B@
rdata$r	SEGMENT
??_R4BillingWantWnd@@6B@ DD 00H				; BillingWantWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBillingWantWnd@@@8
	DD	FLAT:??_R3BillingWantWnd@@8
rdata$r	ENDS
;	COMDAT ??_7BillingWantWnd@@6B@
CONST	SEGMENT
??_7BillingWantWnd@@6B@ DD FLAT:??_R4BillingWantWnd@@6B@ ; BillingWantWnd::`vftable'
	DD	FLAT:?AddRenderFrame@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@BillingWantWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@BillingWantWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@BillingWantWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@BillingWantWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@BillingWantWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EBillingWantWnd@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0BillingWantWnd@@QAE@XZ
_TEXT	SEGMENT
??0BillingWantWnd@@QAE@XZ PROC				; BillingWantWnd::BillingWantWnd, COMDAT
; _this$ = ecx

; 8    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ

; 9    : 	m_pPlayStage	= NULL;

  00009	33 c0		 xor	 eax, eax
  0000b	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax

; 10   : 
; 11   : 	m_pBottomFrm	= NULL;

  00011	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax

; 12   : 	m_pIcon			= NULL;

  00017	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax

; 13   : 	m_pIconBack		= NULL;

  0001d	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax

; 14   : 
; 15   : 	m_bPresent		= false;

  00023	88 86 64 01 00
	00		 mov	 BYTE PTR [esi+356], al
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BillingWantWnd@@6B@

; 16   : }

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
??0BillingWantWnd@@QAE@XZ ENDP				; BillingWantWnd::BillingWantWnd
_TEXT	ENDS
PUBLIC	??1BillingWantWnd@@UAE@XZ			; BillingWantWnd::~BillingWantWnd
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BillingWantWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BillingWantWnd@@UAE@XZ$0
__ehfuncinfo$??1BillingWantWnd@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BillingWantWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1BillingWantWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BillingWantWnd@@UAE@XZ PROC				; BillingWantWnd::~BillingWantWnd, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1BillingWantWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BillingWantWnd@@6B@

; 20   : 	SAFEDELETE( m_pBottomFrm );

  00017	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	85 c9		 test	 ecx, ecx
  00023	74 0e		 je	 SHORT $LN3@BillingWan
  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	6a 01		 push	 1
  00029	ff 50 40	 call	 DWORD PTR [eax+64]
  0002c	83 a6 68 01 00
	00 00		 and	 DWORD PTR [esi+360], 0
$LN3@BillingWan:

; 21   : 	SAFEDELETE( m_pIcon );

  00033	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 0e		 je	 SHORT $LN2@BillingWan
  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	6a 01		 push	 1
  00041	ff 50 40	 call	 DWORD PTR [eax+64]
  00044	83 a6 6c 01 00
	00 00		 and	 DWORD PTR [esi+364], 0
$LN2@BillingWan:

; 22   : 	SAFEDELETE( m_pIconBack );

  0004b	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00051	85 c9		 test	 ecx, ecx
  00053	74 0e		 je	 SHORT $LN1@BillingWan
  00055	8b 01		 mov	 eax, DWORD PTR [ecx]
  00057	6a 01		 push	 1
  00059	ff 50 40	 call	 DWORD PTR [eax+64]
  0005c	83 a6 70 01 00
	00 00		 and	 DWORD PTR [esi+368], 0
$LN1@BillingWan:

; 23   : }

  00063	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	8b ce		 mov	 ecx, esi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  0006f	e8 00 00 00 00	 call	 __EH_epilog3
  00074	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BillingWantWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__ehhandler$??1BillingWantWnd@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1BillingWantWnd@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1BillingWantWnd@@UAE@XZ ENDP				; BillingWantWnd::~BillingWantWnd
PUBLIC	?SetPlayStage@BillingWantWnd@@QAEXPAVioPlayStage@@@Z ; BillingWantWnd::SetPlayStage
; Function compile flags: /Ogsp
;	COMDAT ?SetPlayStage@BillingWantWnd@@QAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pPlayStage$ = 8					; size = 4
?SetPlayStage@BillingWantWnd@@QAEXPAVioPlayStage@@@Z PROC ; BillingWantWnd::SetPlayStage, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : 	m_pPlayStage = pPlayStage;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pPlayStage$[ebp]
  00006	89 81 60 01 00
	00		 mov	 DWORD PTR [ecx+352], eax

; 28   : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetPlayStage@BillingWantWnd@@QAEXPAVioPlayStage@@@Z ENDP ; BillingWantWnd::SetPlayStage
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@BillingWantWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@BillingWantWnd@@UAEXXZ PROC			; BillingWantWnd::iwm_hide, COMDAT
; _this$ = ecx

; 71   : 	m_bPresent = false;

  00000	c6 81 64 01 00
	00 00		 mov	 BYTE PTR [ecx+356], 0

; 72   : }

  00007	c3		 ret	 0
?iwm_hide@BillingWantWnd@@UAEXXZ ENDP			; BillingWantWnd::iwm_hide
_TEXT	ENDS
PUBLIC	?ShowPresent@BillingWantWnd@@QAEXXZ		; BillingWantWnd::ShowPresent
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ShowPresent@BillingWantWnd@@QAEXXZ
_TEXT	SEGMENT
?ShowPresent@BillingWantWnd@@QAEXXZ PROC		; BillingWantWnd::ShowPresent, COMDAT
; _this$ = ecx

; 76   : 	m_bPresent = true;

  00000	c6 81 64 01 00
	00 01		 mov	 BYTE PTR [ecx+356], 1

; 77   : 	ShowWnd(); 

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
?ShowPresent@BillingWantWnd@@QAEXXZ ENDP		; BillingWantWnd::ShowPresent
_TEXT	ENDS
PUBLIC	?ReSizeUI@BillingWantWnd@@IAEX_N@Z		; BillingWantWnd::ReSizeUI
EXTRN	__imp_?GetHeight@ioUIRenderElement@@QBEHXZ:PROC
EXTRN	__imp_?SetWndPos@ioWnd@@QAEXHH@Z:PROC
EXTRN	__imp_?GetYPos@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ReSizeUI@BillingWantWnd@@IAEX_N@Z
_TEXT	SEGMENT
_iXBtnXPos$ = -8					; size = 4
_iHeight$ = -4						; size = 4
_iWidth$ = 8						; size = 4
_bPresent$ = 8						; size = 1
?ReSizeUI@BillingWantWnd@@IAEX_N@Z PROC			; BillingWantWnd::ReSizeUI, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi

; 82   : 	int iWidth  = 0;
; 83   : 	int iHeight = 0;
; 84   : 	int iXBtnXPos = 0;
; 85   : 	if( bPresent )

  00007	33 db		 xor	 ebx, ebx
  00009	57		 push	 edi

; 86   : 	{
; 87   : 		iWidth  = PRESENT_WIDTH;
; 88   : 		iHeight = PRESENT_HEIGHT;
; 89   : 		ShowChildWnd( ID_GOLD_CHARGE_PRESENT );

  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z
  00010	8b f1		 mov	 esi, ecx
  00012	53		 push	 ebx
  00013	38 5d 08	 cmp	 BYTE PTR _bPresent$[ebp], bl
  00016	74 36		 je	 SHORT $LN4@ReSizeUI
  00018	6a 04		 push	 4
  0001a	c7 45 08 0e 01
	00 00		 mov	 DWORD PTR _iWidth$[ebp], 270 ; 0000010eH
  00021	c7 45 fc 3e 01
	00 00		 mov	 DWORD PTR _iHeight$[ebp], 318 ; 0000013eH
  00028	ff d7		 call	 edi

; 90   : 		ShowChildWnd( ID_CANCEL_PRESENT );

  0002a	53		 push	 ebx
  0002b	6a 05		 push	 5
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff d7		 call	 edi

; 91   : 		HideChildWnd( ID_GOLD_CHARGE );

  00031	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  00037	53		 push	 ebx
  00038	6a 02		 push	 2
  0003a	8b ce		 mov	 ecx, esi
  0003c	ff d7		 call	 edi

; 92   : 		HideChildWnd( ID_CANCEL );

  0003e	53		 push	 ebx
  0003f	6a 03		 push	 3
  00041	8b ce		 mov	 ecx, esi
  00043	ff d7		 call	 edi

; 93   : 		iXBtnXPos = PRESENT_X_OFFSET;

  00045	c7 45 f8 ec 00
	00 00		 mov	 DWORD PTR _iXBtnXPos$[ebp], 236 ; 000000ecH

; 94   : 	}
; 95   : 	else

  0004c	eb 34		 jmp	 SHORT $LN3@ReSizeUI
$LN4@ReSizeUI:

; 96   : 	{
; 97   : 		iWidth  = NORMAL_WIDTH;
; 98   : 		iHeight = NORMAL_HEIGHT;
; 99   : 		ShowChildWnd( ID_GOLD_CHARGE );

  0004e	6a 02		 push	 2
  00050	c7 45 08 fa 00
	00 00		 mov	 DWORD PTR _iWidth$[ebp], 250 ; 000000faH
  00057	c7 45 fc 02 01
	00 00		 mov	 DWORD PTR _iHeight$[ebp], 258 ; 00000102H
  0005e	ff d7		 call	 edi

; 100  : 		ShowChildWnd( ID_CANCEL );

  00060	53		 push	 ebx
  00061	6a 03		 push	 3
  00063	8b ce		 mov	 ecx, esi
  00065	ff d7		 call	 edi

; 101  : 		HideChildWnd( ID_GOLD_CHARGE_PRESENT );

  00067	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  0006d	53		 push	 ebx
  0006e	6a 04		 push	 4
  00070	8b ce		 mov	 ecx, esi
  00072	ff d7		 call	 edi

; 102  : 		HideChildWnd( ID_CANCEL_PRESENT );

  00074	53		 push	 ebx
  00075	6a 05		 push	 5
  00077	8b ce		 mov	 ecx, esi
  00079	ff d7		 call	 edi

; 103  : 		iXBtnXPos = NORMAL_X_OFFSET;

  0007b	c7 45 f8 d8 00
	00 00		 mov	 DWORD PTR _iXBtnXPos$[ebp], 216 ; 000000d8H
$LN3@ReSizeUI:

; 104  : 	}
; 105  : 
; 106  : 	SetSize( iWidth, iHeight );

  00082	ff 75 fc	 push	 DWORD PTR _iHeight$[ebp]
  00085	8b 06		 mov	 eax, DWORD PTR [esi]
  00087	ff 75 08	 push	 DWORD PTR _iWidth$[ebp]
  0008a	8b ce		 mov	 ecx, esi
  0008c	ff 50 2c	 call	 DWORD PTR [eax+44]

; 107  : 
; 108  : 	ioWnd *pWnd = FindChildWnd( ID_EXIT );

  0008f	6a 01		 push	 1
  00091	8b ce		 mov	 ecx, esi
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00099	8b f8		 mov	 edi, eax

; 109  : 	if( pWnd )

  0009b	3b fb		 cmp	 edi, ebx
  0009d	74 14		 je	 SHORT $LN2@ReSizeUI

; 110  : 		pWnd->SetWndPos( iXBtnXPos, pWnd->GetYPos() );

  0009f	8b cf		 mov	 ecx, edi
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetYPos@ioWnd@@QBEHXZ
  000a7	50		 push	 eax
  000a8	ff 75 f8	 push	 DWORD PTR _iXBtnXPos$[ebp]
  000ab	8b cf		 mov	 ecx, edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z
$LN2@ReSizeUI:

; 111  : 
; 112  : 	if( m_pBottomFrm )

  000b3	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  000b9	3b cb		 cmp	 ecx, ebx
  000bb	74 15		 je	 SHORT $LN1@ReSizeUI

; 113  : 		m_pBottomFrm->SetSize( iWidth, m_pBottomFrm->GetHeight() );

  000bd	8b 39		 mov	 edi, DWORD PTR [ecx]
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioUIRenderElement@@QBEHXZ
  000c5	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  000cb	50		 push	 eax
  000cc	ff 75 08	 push	 DWORD PTR _iWidth$[ebp]
  000cf	ff 57 10	 call	 DWORD PTR [edi+16]
$LN1@ReSizeUI:
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 114  : 
; 115  : }

  000d5	c9		 leave
  000d6	c2 04 00	 ret	 4
?ReSizeUI@BillingWantWnd@@IAEX_N@Z ENDP			; BillingWantWnd::ReSizeUI
_TEXT	ENDS
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_spacebar@BillingWantWnd@@UAE_NXZ
_TEXT	SEGMENT
?iwm_spacebar@BillingWantWnd@@UAE_NXZ PROC		; BillingWantWnd::iwm_spacebar, COMDAT
; _this$ = ecx

; 161  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 162  : 	ioWnd *pChargeBtn = FindChildWnd( ID_GOLD_CHARGE );

  00003	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00009	6a 02		 push	 2
  0000b	8b f1		 mov	 esi, ecx
  0000d	ff d7		 call	 edi
  0000f	8b d8		 mov	 ebx, eax

; 163  : 	if( pChargeBtn && pChargeBtn->IsShow() )

  00011	85 db		 test	 ebx, ebx
  00013	74 1f		 je	 SHORT $LN2@iwm_spaceb
  00015	8b cb		 mov	 ecx, ebx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0001d	84 c0		 test	 al, al
  0001f	74 13		 je	 SHORT $LN2@iwm_spaceb

; 164  : 	{
; 165  : 		iwm_command( pChargeBtn, IOBN_BTNUP, 0 );

  00021	6a 00		 push	 0
  00023	6a 11		 push	 17			; 00000011H
  00025	53		 push	 ebx
$LN6@iwm_spaceb:
  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	8b ce		 mov	 ecx, esi
  0002a	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]

; 166  : 		return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 21		 jmp	 SHORT $LN3@iwm_spaceb
$LN2@iwm_spaceb:

; 167  : 	}
; 168  : 
; 169  : 	pChargeBtn = FindChildWnd( ID_GOLD_CHARGE_PRESENT );

  00034	6a 04		 push	 4
  00036	8b ce		 mov	 ecx, esi
  00038	ff d7		 call	 edi
  0003a	8b f8		 mov	 edi, eax

; 170  : 	if( pChargeBtn && pChargeBtn->IsShow() )

  0003c	85 ff		 test	 edi, edi
  0003e	74 13		 je	 SHORT $LN1@iwm_spaceb
  00040	8b cf		 mov	 ecx, edi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00048	84 c0		 test	 al, al
  0004a	74 07		 je	 SHORT $LN1@iwm_spaceb

; 171  : 	{
; 172  : 		iwm_command( pChargeBtn, IOBN_BTNUP, 0 );

  0004c	6a 00		 push	 0
  0004e	6a 11		 push	 17			; 00000011H
  00050	57		 push	 edi

; 173  : 		return true;

  00051	eb d3		 jmp	 SHORT $LN6@iwm_spaceb
$LN1@iwm_spaceb:

; 174  : 	}
; 175  : 
; 176  : 	return false;

  00053	32 c0		 xor	 al, al
$LN3@iwm_spaceb:
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx

; 177  : }

  00058	c3		 ret	 0
?iwm_spacebar@BillingWantWnd@@UAE_NXZ ENDP		; BillingWantWnd::iwm_spacebar
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ ; ioApplication::GetConnectedMoveMode
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
;	COMDAT ?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ
_TEXT	SEGMENT
?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ PROC ; ioApplication::GetConnectedMoveMode, COMDAT
; _this$ = ecx

; 1225 : 	inline ConnectedMoveMode GetConnectedMoveMode(){ return static_cast<ConnectedMoveMode>( m_eConnectedMoveMode ); }

  00000	8b 81 ac 06 00
	00		 mov	 eax, DWORD PTR [ecx+1708]
  00006	c3		 ret	 0
?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ ENDP ; ioApplication::GetConnectedMoveMode
_TEXT	ENDS
PUBLIC	?GetPurchasedCash@ioMyInfo@@QBEHXZ		; ioMyInfo::GetPurchasedCash
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetPurchasedCash@ioMyInfo@@QBEHXZ
_TEXT	SEGMENT
?GetPurchasedCash@ioMyInfo@@QBEHXZ PROC			; ioMyInfo::GetPurchasedCash, COMDAT
; _this$ = ecx

; 547  : 	int GetPurchasedCash() const { return m_user_data.m_purchased_cash; }

  00000	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  00006	c3		 ret	 0
?GetPurchasedCash@ioMyInfo@@QBEHXZ ENDP			; ioMyInfo::GetPurchasedCash
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GBillingWantWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBillingWantWnd@@UAEPAXI@Z PROC			; BillingWantWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1BillingWantWnd@@UAE@XZ ; BillingWantWnd::~BillingWantWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GBillingWantWnd@@UAEPAXI@Z ENDP			; BillingWantWnd::`scalar deleting destructor'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\billingwantwnd.cpp
_TEXT	ENDS
;	COMDAT ?iwm_show@BillingWantWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@BillingWantWnd@@UAEXXZ PROC			; BillingWantWnd::iwm_show, COMDAT
; _this$ = ecx

; 66   : 	ReSizeUI( m_bPresent );

  00000	0f b6 81 64 01
	00 00		 movzx	 eax, BYTE PTR [ecx+356]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?ReSizeUI@BillingWantWnd@@IAEX_N@Z ; BillingWantWnd::ReSizeUI

; 67   : }

  0000d	c3		 ret	 0
?iwm_show@BillingWantWnd@@UAEXXZ ENDP			; BillingWantWnd::iwm_show
_TEXT	ENDS
PUBLIC	??_C@_0BM@IONNHMJI@BillingWantWnd?3?3iwm_command?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z:PROC ; ioLocalManager::GetLocal
EXTRN	?GetSingleton@ioLocalManager@@SAAAV1@XZ:PROC	; ioLocalManager::GetSingleton
EXTRN	__imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ:PROC
EXTRN	?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ:PROC ; ioSP2GUIManager::SetMsgBox
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	?GetModeType@ioPlayStage@@QBE?AW4ModeType@@XZ:PROC ; ioPlayStage::GetModeType
EXTRN	?GetSingleton@ioApplication@@SAAAV1@XZ:PROC	; ioApplication::GetSingleton
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
;	COMDAT ??_C@_0BM@IONNHMJI@BillingWantWnd?3?3iwm_command?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
CONST	SEGMENT
??_C@_0BM@IONNHMJI@BillingWantWnd?3?3iwm_command?$AA@ DB 'BillingWantWnd:'
	DB	':iwm_command', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\billingwantwnd.cpp
CONST	ENDS
;	COMDAT ?iwm_command@BillingWantWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@BillingWantWnd@@UAEXPAVioWnd@@HK@Z PROC	; BillingWantWnd::iwm_command, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 119  : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 120  : 
; 121  : 	switch( dwID )

  0000f	48		 dec	 eax
  00010	74 0c		 je	 SHORT $LN9@iwm_comman
  00012	48		 dec	 eax
  00013	74 1c		 je	 SHORT $LN7@iwm_comman
  00015	48		 dec	 eax
  00016	74 06		 je	 SHORT $LN9@iwm_comman
  00018	48		 dec	 eax
  00019	74 16		 je	 SHORT $LN7@iwm_comman
  0001b	48		 dec	 eax
  0001c	75 0e		 jne	 SHORT $LN8@iwm_comman
$LN9@iwm_comman:

; 122  : 	{
; 123  : 	case ID_EXIT:
; 124  : 	case ID_CANCEL:
; 125  : 	case ID_CANCEL_PRESENT:
; 126  : 		if( cmd == IOBN_BTNUP )

  0001e	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00022	75 08		 jne	 SHORT $LN8@iwm_comman

; 127  : 			HideWnd();

  00024	8b ce		 mov	 ecx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN8@iwm_comman:
  0002c	5e		 pop	 esi

; 157  : 	}
; 158  : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN7@iwm_comman:

; 128  : 		break;
; 129  : 	case ID_GOLD_CHARGE:
; 130  : 	case ID_GOLD_CHARGE_PRESENT:
; 131  : 		if( cmd == IOBN_BTNUP )

  00031	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00035	75 f5		 jne	 SHORT $LN8@iwm_comman

; 132  : 		{
; 133  : 			HideWnd();

  00037	8b ce		 mov	 ecx, esi
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ

; 134  : 
; 135  : 			if( g_App.GetConnectedMoveMode() == ioApplication::CMM_LOBBY )

  0003f	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00044	83 b8 ac 06 00
	00 02		 cmp	 DWORD PTR [eax+1708], 2

; 136  : 			{
; 137  : 				if( m_pPlayStage && m_pPlayStage->GetModeType() != MT_MYROOM )

  0004b	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00051	75 3f		 jne	 SHORT $LN5@iwm_comman
  00053	85 c9		 test	 ecx, ecx
  00055	74 69		 je	 SHORT $LN2@iwm_comman
  00057	e8 00 00 00 00	 call	 ?GetModeType@ioPlayStage@@QBE?AW4ModeType@@XZ ; ioPlayStage::GetModeType
  0005c	83 f8 18	 cmp	 eax, 24			; 00000018H
$LN16@iwm_comman:
  0005f	74 5f		 je	 SHORT $LN2@iwm_comman

; 138  : 				{
; 139  : 					g_GUIMgr.SetMsgBox( MB_OK, NULL, STR(1) );

  00061	6a 00		 push	 0
  00063	6a 01		 push	 1
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IONNHMJI@BillingWantWnd?3?3iwm_command?$AA@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00075	8b c8		 mov	 ecx, eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0007d	50		 push	 eax
  0007e	6a 00		 push	 0
  00080	6a 00		 push	 0
  00082	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ ; ioSP2GUIManager::SetMsgBox
  0008d	83 c4 10	 add	 esp, 16			; 00000010H

; 140  : 					return;

  00090	eb 9a		 jmp	 SHORT $LN8@iwm_comman
$LN5@iwm_comman:

; 141  : 				}
; 142  : 			}
; 143  : 			else
; 144  : 			{
; 145  : 				if( m_pPlayStage && m_pPlayStage->GetModeType() != MT_TRAINING && m_pPlayStage->GetModeType() != MT_HEADQUARTERS && m_pPlayStage->GetModeType() != MT_HOUSE )

  00092	85 c9		 test	 ecx, ecx
  00094	74 2a		 je	 SHORT $LN2@iwm_comman
  00096	e8 00 00 00 00	 call	 ?GetModeType@ioPlayStage@@QBE?AW4ModeType@@XZ ; ioPlayStage::GetModeType
  0009b	83 f8 04	 cmp	 eax, 4
  0009e	74 20		 je	 SHORT $LN2@iwm_comman
  000a0	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  000a6	e8 00 00 00 00	 call	 ?GetModeType@ioPlayStage@@QBE?AW4ModeType@@XZ ; ioPlayStage::GetModeType
  000ab	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000ae	74 10		 je	 SHORT $LN2@iwm_comman
  000b0	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  000b6	e8 00 00 00 00	 call	 ?GetModeType@ioPlayStage@@QBE?AW4ModeType@@XZ ; ioPlayStage::GetModeType
  000bb	83 f8 17	 cmp	 eax, 23			; 00000017H

; 146  : 				{
; 147  : 					g_GUIMgr.SetMsgBox( MB_OK, NULL, STR(1) );
; 148  : 					return;

  000be	eb 9f		 jmp	 SHORT $LN16@iwm_comman
$LN2@iwm_comman:

; 149  : 				}
; 150  : 			}
; 151  : 
; 152  : 			ioLocalParent *pLocal = g_LocalMgr.GetLocal( ioLocalManager::GetLocalType() );

  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ?GetSingleton@ioLocalManager@@SAAAV1@XZ ; ioLocalManager::GetSingleton
  000cc	8b c8		 mov	 ecx, eax
  000ce	e8 00 00 00 00	 call	 ?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z ; ioLocalManager::GetLocal

; 153  : 			if( pLocal )

  000d3	85 c0		 test	 eax, eax
  000d5	0f 84 51 ff ff
	ff		 je	 $LN8@iwm_comman

; 154  : 				pLocal->OpenFillCashPage();

  000db	8b 10		 mov	 edx, DWORD PTR [eax]
  000dd	8b c8		 mov	 ecx, eax
  000df	ff 52 7c	 call	 DWORD PTR [edx+124]

; 155  : 		}
; 156  : 		break;

  000e2	e9 45 ff ff ff	 jmp	 $LN8@iwm_comman
?iwm_command@BillingWantWnd@@UAEXPAVioWnd@@HK@Z ENDP	; BillingWantWnd::iwm_command
_TEXT	ENDS
PUBLIC	__real@436c0000
PUBLIC	__real@3f266666
PUBLIC	??_C@_0BJ@NLGJGKH@BillingWantWnd?3?3OnRender?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?PrintTextWidthCut@ioFontManager@@QAEXMMMMPBD0@Z:PROC
EXTRN	?ConvertNumToStrComma@Help@@YAXHPADH@Z:PROC	; Help::ConvertNumToStrComma
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	__imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	_memset:PROC
;	COMDAT __real@436c0000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
CONST	SEGMENT
__real@436c0000 DD 0436c0000r			; 236
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_C@_0BJ@NLGJGKH@BillingWantWnd?3?3OnRender?$AA@
CONST	SEGMENT
??_C@_0BJ@NLGJGKH@BillingWantWnd?3?3OnRender?$AA@ DB 'BillingWantWnd::OnR'
	DB	'ender', 00H					; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\billingwantwnd.cpp
CONST	ENDS
;	COMDAT ?OnRender@BillingWantWnd@@MAEXXZ
_TEXT	SEGMENT
_iXPos$ = -284						; size = 4
tv351 = -280						; size = 4
_this$GSCopy$ = -280					; size = 4
_iYPos$ = -276						; size = 4
tv399 = -272						; size = 4
tv391 = -272						; size = 4
_iTextYPos$512009 = -268				; size = 4
_szNumComma$512012 = -264				; size = 260
__$ArrayPad$ = -4					; size = 4
?OnRender@BillingWantWnd@@MAEXXZ PROC			; BillingWantWnd::OnRender, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	57		 push	 edi

; 181  : 	ioWnd::OnRender();
; 182  : 
; 183  : 	int iXPos = GetDerivedPosX();

  00018	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ
  00024	8b ce		 mov	 ecx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ
  0002c	8b f8		 mov	 edi, eax

; 184  : 	int iYPos = GetDerivedPosY();

  0002e	8b ce		 mov	 ecx, esi
  00030	89 bd e4 fe ff
	ff		 mov	 DWORD PTR _iXPos$[ebp], edi
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 185  : 
; 186  : 	g_FontMgr.SetAlignType( TAT_CENTER );

  0003c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00042	6a 01		 push	 1
  00044	89 85 ec fe ff
	ff		 mov	 DWORD PTR _iYPos$[ebp], eax
  0004a	ff d6		 call	 esi
  0004c	8b c8		 mov	 ecx, eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 187  : 	g_FontMgr.SetTextStyle( TS_NORMAL );

  00054	33 db		 xor	 ebx, ebx
  00056	53		 push	 ebx
  00057	ff d6		 call	 esi
  00059	8b c8		 mov	 ecx, eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 188  : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  00061	53		 push	 ebx
  00062	53		 push	 ebx
  00063	53		 push	 ebx
  00064	ff d6		 call	 esi
  00066	8b c8		 mov	 ecx, eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 189  : 	g_FontMgr.SetTextColor( TCT_DEFAULT_DARKGRAY );

  0006e	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  00073	ff d6		 call	 esi
  00075	8b c8		 mov	 ecx, eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 190  : 
; 191  : 	int iIconXOffset = 0;
; 192  : 	if( m_bPresent )

  0007d	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00083	38 98 64 01 00
	00		 cmp	 BYTE PTR [eax+356], bl

; 193  : 	{
; 194  : 		int iTextYPos = iYPos + Y_OFFSET;
; 195  : 		g_FontMgr.PrintText( iXPos + X_PRESENT_OFFSET, iTextYPos, FONT_SIZE_13, STR(1) );

  00089	53		 push	 ebx
  0008a	0f 57 c0	 xorps	 xmm0, xmm0
  0008d	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00092	0f 84 41 02 00
	00		 je	 $LN5@OnRender
  00098	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  0009e	81 c7 87 00 00
	00		 add	 edi, 135		; 00000087H
  000a4	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  000a8	6a 01		 push	 1
  000aa	05 90 00 00 00	 add	 eax, 144		; 00000090H
  000af	53		 push	 ebx
  000b0	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BJ@NLGJGKH@BillingWantWnd?3?3OnRender?$AA@
  000b5	57		 push	 edi
  000b6	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iTextYPos$512009[ebp], eax
  000bc	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR tv391[ebp], xmm0
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000ca	8b c8		 mov	 ecx, eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  000d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  000da	50		 push	 eax
  000db	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000de	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000e4	66 0f 6e 85 f4
	fe ff ff	 movd	 xmm0, DWORD PTR _iTextYPos$512009[ebp]
  000ec	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ef	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f5	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv391[ebp]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	ff d6		 call	 esi
  00104	50		 push	 eax
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  0010b	83 c4 14	 add	 esp, 20			; 00000014H

; 196  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_GRAY );

  0010e	68 6e 6e 6e ff	 push	 -9539986		; ff6e6e6eH
  00113	ff d6		 call	 esi
  00115	8b c8		 mov	 ecx, eax
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 197  : 		iTextYPos += Y_LINE_GAP;

  0011d	83 85 f4 fe ff
	ff 14		 add	 DWORD PTR _iTextYPos$512009[ebp], 20 ; 00000014H

; 198  : 		g_FontMgr.PrintText( iXPos + X_PRESENT_OFFSET, iTextYPos, FONT_SIZE_13, STR(2) );

  00124	6a 00		 push	 0
  00126	6a 02		 push	 2
  00128	53		 push	 ebx
  00129	57		 push	 edi
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00130	8b c8		 mov	 ecx, eax
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00140	50		 push	 eax
  00141	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00144	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0014a	66 0f 6e 85 f4
	fe ff ff	 movd	 xmm0, DWORD PTR _iTextYPos$512009[ebp]
  00152	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00155	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0015b	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv391[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	ff d6		 call	 esi
  0016a	50		 push	 eax
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ

; 199  : 		iTextYPos += Y_LINE_GAP;

  00171	83 85 f4 fe ff
	ff 14		 add	 DWORD PTR _iTextYPos$512009[ebp], 20 ; 00000014H
  00178	83 c4 14	 add	 esp, 20			; 00000014H

; 200  : 		g_FontMgr.PrintText( iXPos + X_PRESENT_OFFSET, iTextYPos, FONT_SIZE_13, STR(3) );

  0017b	6a 00		 push	 0
  0017d	6a 03		 push	 3
  0017f	53		 push	 ebx
  00180	57		 push	 edi
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00187	8b c8		 mov	 ecx, eax
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00197	50		 push	 eax
  00198	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0019b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001a1	66 0f 6e 85 f4
	fe ff ff	 movd	 xmm0, DWORD PTR _iTextYPos$512009[ebp]
  001a9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001ac	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001b2	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv391[ebp]
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	ff d6		 call	 esi
  001c1	50		 push	 eax
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ

; 201  : 		iTextYPos += Y_LINE_GAP;

  001c8	83 85 f4 fe ff
	ff 14		 add	 DWORD PTR _iTextYPos$512009[ebp], 20 ; 00000014H
  001cf	83 c4 14	 add	 esp, 20			; 00000014H

; 202  : 		g_FontMgr.PrintText( iXPos + X_PRESENT_OFFSET, iTextYPos, FONT_SIZE_13, STR(4) );

  001d2	6a 00		 push	 0
  001d4	6a 04		 push	 4
  001d6	53		 push	 ebx
  001d7	57		 push	 edi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  001de	8b c8		 mov	 ecx, eax
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  001e6	50		 push	 eax
  001e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  001ef	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001f2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001f8	66 0f 6e 85 f4
	fe ff ff	 movd	 xmm0, DWORD PTR _iTextYPos$512009[ebp]
  00200	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00203	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00209	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv391[ebp]
  00211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00216	ff d6		 call	 esi
  00218	50		 push	 eax
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ

; 203  : 
; 204  : 		char szNumComma[MAX_PATH]="";

  0021f	68 03 01 00 00	 push	 259			; 00000103H
  00224	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szNumComma$512012[ebp+1]
  0022a	6a 00		 push	 0
  0022c	50		 push	 eax
  0022d	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szNumComma$512012[ebp], 0
  00234	e8 00 00 00 00	 call	 _memset

; 205  : 		Help::ConvertNumToStrComma( g_MyInfo.GetPurchasedCash(), szNumComma, sizeof( szNumComma ) );

  00239	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0023e	68 04 01 00 00	 push	 260			; 00000104H
  00243	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szNumComma$512012[ebp]
  00249	51		 push	 ecx
  0024a	ff b0 a4 00 00
	00		 push	 DWORD PTR [eax+164]
  00250	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma
  00255	83 c4 2c	 add	 esp, 44			; 0000002cH

; 206  : 		iTextYPos += Y_LINE_GAP;
; 207  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_GREEN );

  00258	68 22 72 11 ff	 push	 -15633886		; ff117222H
  0025d	ff d6		 call	 esi
  0025f	8b c8		 mov	 ecx, eax
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 208  : 		g_FontMgr.PrintTextWidthCut( iXPos + X_PRESENT_OFFSET, iTextYPos, FONT_SIZE_13, WIDTH_CUT, STR(5), szNumComma );

  00267	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szNumComma$512012[ebp]
  0026d	50		 push	 eax
  0026e	6a 00		 push	 0
  00270	6a 05		 push	 5
  00272	53		 push	 ebx
  00273	57		 push	 edi
  00274	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0027a	8b c8		 mov	 ecx, eax
  0027c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00282	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@436c0000
  0028a	50		 push	 eax
  0028b	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _iTextYPos$512009[ebp]
  00291	83 ec 10	 sub	 esp, 16			; 00000010H
  00294	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0029a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  002a2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002a8	83 c0 14	 add	 eax, 20			; 00000014H
  002ab	0f 57 c0	 xorps	 xmm0, xmm0
  002ae	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002b2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002b8	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv391[ebp]
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	ff d6		 call	 esi
  002c7	8b c8		 mov	 ecx, eax
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTextWidthCut@ioFontManager@@QAEXMMMMPBD0@Z

; 209  : 		iIconXOffset = ICON_X_PRESENT_OFFSET;

  002cf	bb 87 00 00 00	 mov	 ebx, 135		; 00000087H

; 210  : 	}
; 211  : 	else

  002d4	e9 d2 00 00 00	 jmp	 $LN4@OnRender
$LN5@OnRender:

; 212  : 	{
; 213  : 		int iTextYPos = iYPos + Y_OFFSET;
; 214  : 		g_FontMgr.PrintText( iXPos + X_OFFSET, iTextYPos, FONT_SIZE_13, STR(6) );

  002d9	83 c7 7d	 add	 edi, 125		; 0000007dH
  002dc	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  002e0	6a 06		 push	 6
  002e2	53		 push	 ebx
  002e3	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BJ@NLGJGKH@BillingWantWnd?3?3OnRender?$AA@
  002e8	57		 push	 edi
  002e9	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR tv399[ebp], xmm0
  002f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  002f7	8b c8		 mov	 ecx, eax
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  002ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00307	50		 push	 eax
  00308	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  0030e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00311	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00317	05 90 00 00 00	 add	 eax, 144		; 00000090H
  0031c	0f 57 c0	 xorps	 xmm0, xmm0
  0031f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00323	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00329	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv399[ebp]
  00331	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00336	ff d6		 call	 esi
  00338	50		 push	 eax
  00339	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  0033f	83 c4 14	 add	 esp, 20			; 00000014H

; 215  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_GRAY );

  00342	68 6e 6e 6e ff	 push	 -9539986		; ff6e6e6eH
  00347	ff d6		 call	 esi
  00349	8b c8		 mov	 ecx, eax
  0034b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 216  : 		iTextYPos += Y_LINE_GAP;
; 217  : 		g_FontMgr.PrintText( iXPos + X_OFFSET, iTextYPos, FONT_SIZE_13, STR(7) );

  00351	6a 00		 push	 0
  00353	6a 07		 push	 7
  00355	53		 push	 ebx
  00356	57		 push	 edi
  00357	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0035d	8b c8		 mov	 ecx, eax
  0035f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00365	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0036d	50		 push	 eax
  0036e	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  00374	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00377	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0037d	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  00382	0f 57 c0	 xorps	 xmm0, xmm0
  00385	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00389	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0038f	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv399[ebp]
  00397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039c	ff d6		 call	 esi
  0039e	50		 push	 eax
  0039f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  003a5	83 c4 14	 add	 esp, 20			; 00000014H

; 218  : 		iIconXOffset = ICON_X_OFFSET;

  003a8	6a 7d		 push	 125			; 0000007dH
  003aa	5b		 pop	 ebx
$LN4@OnRender:

; 219  : 	}
; 220  : 
; 221  : 	if( m_pIconBack )

  003ab	8b bd e8 fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  003b1	33 f6		 xor	 esi, esi
  003b3	39 b7 70 01 00
	00		 cmp	 DWORD PTR [edi+368], esi
  003b9	74 3b		 je	 SHORT $LN10@OnRender

; 222  : 		m_pIconBack->Render( iXPos + iIconXOffset, iYPos + ICON_Y_OFFSET, UI_RENDER_MULTIPLY );

  003bb	8b 8f 70 01 00
	00		 mov	 ecx, DWORD PTR [edi+368]
  003c1	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _iYPos$[ebp]
  003c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  003c9	56		 push	 esi
  003ca	56		 push	 esi
  003cb	56		 push	 esi
  003cc	6a 08		 push	 8
  003ce	83 c2 62	 add	 edx, 98			; 00000062H
  003d1	0f 57 c0	 xorps	 xmm0, xmm0
  003d4	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  003d8	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _iXPos$[ebp]
  003de	51		 push	 ecx
  003df	51		 push	 ecx
  003e0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003e6	03 d3		 add	 edx, ebx
  003e8	0f 57 c0	 xorps	 xmm0, xmm0
  003eb	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  003ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f4	ff 10		 call	 DWORD PTR [eax]
$LN10@OnRender:

; 223  : 
; 224  : 	if( m_pIcon )

  003f6	39 b7 6c 01 00
	00		 cmp	 DWORD PTR [edi+364], esi
  003fc	74 38		 je	 SHORT $LN2@OnRender

; 225  : 		m_pIcon->Render( iXPos + iIconXOffset, iYPos + ICON_Y_OFFSET );

  003fe	8b 8f 6c 01 00
	00		 mov	 ecx, DWORD PTR [edi+364]
  00404	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _iYPos$[ebp]
  0040a	03 9d e4 fe ff
	ff		 add	 ebx, DWORD PTR _iXPos$[ebp]
  00410	8b 01		 mov	 eax, DWORD PTR [ecx]
  00412	56		 push	 esi
  00413	56		 push	 esi
  00414	56		 push	 esi
  00415	56		 push	 esi
  00416	0f 57 c0	 xorps	 xmm0, xmm0
  00419	51		 push	 ecx
  0041a	83 c2 62	 add	 edx, 98			; 00000062H
  0041d	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00421	51		 push	 ecx
  00422	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00428	0f 57 c0	 xorps	 xmm0, xmm0
  0042b	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  0042f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00434	ff 10		 call	 DWORD PTR [eax]
$LN2@OnRender:

; 226  : 
; 227  : 	if( m_pBottomFrm )

  00436	8b 8f 68 01 00
	00		 mov	 ecx, DWORD PTR [edi+360]
  0043c	3b ce		 cmp	 ecx, esi
  0043e	74 50		 je	 SHORT $LN1@OnRender

; 228  : 		m_pBottomFrm->Render( iXPos, iYPos + GetHeight() - m_pBottomFrm->GetHeight() , UI_RENDER_MULTIPLY );

  00440	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00442	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioUIRenderElement@@QBEHXZ
  00448	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _iYPos$[ebp]
  0044e	56		 push	 esi
  0044f	56		 push	 esi
  00450	2b c8		 sub	 ecx, eax
  00452	56		 push	 esi
  00453	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv351[ebp], ecx
  00459	6a 08		 push	 8
  0045b	8b cf		 mov	 ecx, edi
  0045d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00463	03 85 e8 fe ff
	ff		 add	 eax, DWORD PTR tv351[ebp]
  00469	51		 push	 ecx
  0046a	0f 57 c0	 xorps	 xmm0, xmm0
  0046d	51		 push	 ecx
  0046e	8b 8f 68 01 00
	00		 mov	 ecx, DWORD PTR [edi+360]
  00474	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00478	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0047e	66 0f 6e 85 e4
	fe ff ff	 movd	 xmm0, DWORD PTR _iXPos$[ebp]
  00486	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00489	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048e	ff 13		 call	 DWORD PTR [ebx]
$LN1@OnRender:

; 229  : }

  00490	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00493	5f		 pop	 edi
  00494	5e		 pop	 esi
  00495	33 cd		 xor	 ecx, ebp
  00497	5b		 pop	 ebx
  00498	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0049d	c9		 leave
  0049e	c3		 ret	 0
?OnRender@BillingWantWnd@@MAEXXZ ENDP			; BillingWantWnd::OnRender
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z	; operator==<10>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z PROC	; operator==<10>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 0d 01 00
	00		 je	 $LN96@operator
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 f6 00 00
	00		 je	 $LN95@operator
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 df 00 00
	00		 je	 $LN94@operator
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 c8 00 00
	00		 je	 $LN93@operator
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 b1 00 00
	00		 je	 $LN92@operator
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 9a 00 00
	00		 je	 $LN91@operator
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 83 00 00
	00		 je	 $LN90@operator
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	74 70		 je	 SHORT $LN89@operator
  00093	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00096	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00099	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0009c	84 d2		 test	 dl, dl
  0009e	74 5d		 je	 SHORT $LN88@operator
  000a0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a3	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	0f 84 81 00 00
	00		 je	 $LN1@operator
  000b0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b3	84 d2		 test	 dl, dl
  000b5	74 40		 je	 SHORT $LN86@operator
  000b7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ba	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000bd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c0	84 d2		 test	 dl, dl
  000c2	74 2d		 je	 SHORT $LN85@operator
  000c4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c7	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ca	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000cd	84 d2		 test	 dl, dl
  000cf	74 1a		 je	 SHORT $LN84@operator
  000d1	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000da	84 c0		 test	 al, al
  000dc	74 07		 je	 SHORT $LN83@operator
  000de	34 ec		 xor	 al, -20			; ffffffecH
  000e0	88 45 f9	 mov	 BYTE PTR __t$[ebp+13], al
  000e3	eb 4c		 jmp	 SHORT $LN1@operator
$LN83@operator:
  000e5	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  000e9	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  000eb	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000ef	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  000f1	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000f5	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000f7	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000fb	eb 34		 jmp	 SHORT $LN1@operator
$LN88@operator:
  000fd	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00101	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  00103	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00107	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  00109	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0010d	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  0010f	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00113	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  00115	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00119	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  0011b	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0011f	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  00121	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00125	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00127	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0012b	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  0012d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  00131	6a 02		 push	 2
  00133	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00136	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+9], 0
  0013a	5a		 pop	 edx
$LL104@operator:
  0013b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00141	83 c0 04	 add	 eax, 4
  00144	4a		 dec	 edx
  00145	75 f4		 jne	 SHORT $LL104@operator
  00147	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0014b	56		 push	 esi
  0014c	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  00155	8a 08		 mov	 cl, BYTE PTR [eax]
  00157	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00159	75 1a		 jne	 SHORT $LN112@operator
  0015b	84 c9		 test	 cl, cl
  0015d	74 12		 je	 SHORT $LN113@operator
  0015f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00162	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00165	75 0e		 jne	 SHORT $LN112@operator
  00167	83 c0 02	 add	 eax, 2
  0016a	83 c6 02	 add	 esi, 2
  0016d	84 c9		 test	 cl, cl
  0016f	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  00171	33 c0		 xor	 eax, eax
  00173	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  00175	1b c0		 sbb	 eax, eax
  00177	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  0017a	33 c9		 xor	 ecx, ecx
  0017c	85 c0		 test	 eax, eax
  0017e	0f 94 c0	 sete	 al

; 148  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	c9		 leave
  0018d	c3		 ret	 0
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z ENDP	; operator==<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z	; operator==<5>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 5
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z PROC	; operator==<5>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 92 00 00
	00		 je	 $LN96@operator@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	74 7f		 je	 SHORT $LN95@operator@2
  0002d	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00030	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00033	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00036	84 d2		 test	 dl, dl
  00038	74 6c		 je	 SHORT $LN94@operator@2
  0003a	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0003d	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  00040	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00043	84 d2		 test	 dl, dl
  00045	74 59		 je	 SHORT $LN93@operator@2
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  0004e	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00051	74 63		 je	 SHORT $LN1@operator@2
  00053	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00056	84 d2		 test	 dl, dl
  00058	74 40		 je	 SHORT $LN91@operator@2
  0005a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0005d	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00060	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00063	84 d2		 test	 dl, dl
  00065	74 2d		 je	 SHORT $LN90@operator@2
  00067	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0006a	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  0006d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00070	84 d2		 test	 dl, dl
  00072	74 1a		 je	 SHORT $LN89@operator@2
  00074	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  00077	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0007a	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  0007d	84 c0		 test	 al, al
  0007f	74 07		 je	 SHORT $LN88@operator@2
  00081	34 ed		 xor	 al, -19			; ffffffedH
  00083	88 45 f8	 mov	 BYTE PTR __t$[ebp+8], al
  00086	eb 2e		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  00088	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0008c	eb 28		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  0008e	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00092	eb 22		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00094	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00098	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  0009a	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0009e	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  000a0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000a4	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  000a6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000aa	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  000ac	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000b0	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  000b2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  000b6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000bd	56		 push	 esi
  000be	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+4], 0
  000c2	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  000cb	8a 08		 mov	 cl, BYTE PTR [eax]
  000cd	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000cf	75 1a		 jne	 SHORT $LN112@operator@2
  000d1	84 c9		 test	 cl, cl
  000d3	74 12		 je	 SHORT $LN113@operator@2
  000d5	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000d8	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000db	75 0e		 jne	 SHORT $LN112@operator@2
  000dd	83 c0 02	 add	 eax, 2
  000e0	83 c6 02	 add	 esi, 2
  000e3	84 c9		 test	 cl, cl
  000e5	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  000e7	33 c0		 xor	 eax, eax
  000e9	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  000eb	1b c0		 sbb	 eax, eax
  000ed	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  000f0	33 c9		 xor	 ecx, ecx
  000f2	85 c0		 test	 eax, eax
  000f4	0f 94 c0	 sete	 al

; 148  : }

  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	5e		 pop	 esi
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	c9		 leave
  00103	c3		 ret	 0
??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z ENDP	; operator==<5>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator@3
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator@3
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator@3
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator@3
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator@3
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator@3
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator@3
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator@3
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator@3
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator@3
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator@3
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator@3
$LN84@operator@3:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator@3
$LN85@operator@3:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator@3
$LN86@operator@3:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator@3
$LN87@operator@3:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator@3:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator@3
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator@3
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator@3
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator@3
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\billingwantwnd.cpp
;	COMDAT ?AddRenderFrame@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__t$512877 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pFrame$ = 12						; size = 4
?AddRenderFrame@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z PROC ; BillingWantWnd::AddRenderFrame, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pFrame$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]
  00018	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 32   : 	if( pFrame )

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 8e 00 00
	00		 je	 $LN1@AddRenderF

; 33   : 	{
; 34   : 		if( szType == "BottomFrm" )

  00023	6a 02		 push	 2
  00025	c7 45 ec af 83
	9f 9e		 mov	 DWORD PTR __t$512877[ebp], -1633713233 ; 9e9f83afH
  0002c	c7 45 f0 82 81
	ad 98		 mov	 DWORD PTR __t$512877[ebp+4], -1733459582 ; 98ad8182H
  00033	8d 45 ec	 lea	 eax, DWORD PTR __t$512877[ebp]
  00036	66 c7 45 f4 80
	00		 mov	 WORD PTR __t$512877[ebp+8], 128 ; 00000080H
  0003c	59		 pop	 ecx
$LL112@AddRenderF:
  0003d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00043	83 c0 04	 add	 eax, 4
  00046	49		 dec	 ecx
  00047	75 f4		 jne	 SHORT $LL112@AddRenderF
  00049	80 75 f4 ed	 xor	 BYTE PTR __t$512877[ebp+8], -19 ; ffffffedH
  0004d	56		 push	 esi
  0004e	8b cf		 mov	 ecx, edi
  00050	8d 75 ec	 lea	 esi, DWORD PTR __t$512877[ebp]
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL119@AddRenderF:
  00059	8a 08		 mov	 cl, BYTE PTR [eax]
  0005b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0005d	75 1a		 jne	 SHORT $LN120@AddRenderF
  0005f	84 c9		 test	 cl, cl
  00061	74 12		 je	 SHORT $LN121@AddRenderF
  00063	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00066	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00069	75 0e		 jne	 SHORT $LN120@AddRenderF
  0006b	83 c0 02	 add	 eax, 2
  0006e	83 c6 02	 add	 esi, 2
  00071	84 c9		 test	 cl, cl
  00073	75 e4		 jne	 SHORT $LL119@AddRenderF
$LN121@AddRenderF:
  00075	33 c0		 xor	 eax, eax
  00077	eb 05		 jmp	 SHORT $LN122@AddRenderF
$LN120@AddRenderF:
  00079	1b c0		 sbb	 eax, eax
  0007b	83 d8 ff	 sbb	 eax, -1
$LN122@AddRenderF:
  0007e	85 c0		 test	 eax, eax
  00080	75 23		 jne	 SHORT $LN3@AddRenderF

; 35   : 		{
; 36   : 			SAFEDELETE( m_pBottomFrm );

  00082	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00085	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0008b	85 c9		 test	 ecx, ecx
  0008d	74 0e		 je	 SHORT $LN2@AddRenderF
  0008f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00091	6a 01		 push	 1
  00093	ff 50 40	 call	 DWORD PTR [eax+64]
  00096	83 a6 68 01 00
	00 00		 and	 DWORD PTR [esi+360], 0
$LN2@AddRenderF:

; 37   : 			m_pBottomFrm = pFrame;

  0009d	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx

; 38   : 		}
; 39   : 		else

  000a3	eb 0b		 jmp	 SHORT $LN123@AddRenderF
$LN3@AddRenderF:

; 40   : 		{	
; 41   : 			ioWnd::AddRenderFrame( szType, pFrame );

  000a5	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000a8	53		 push	 ebx
  000a9	57		 push	 edi
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
$LN123@AddRenderF:
  000b0	5e		 pop	 esi
$LN1@AddRenderF:

; 42   : 		}
; 43   : 	}
; 44   : }

  000b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b4	5f		 pop	 edi
  000b5	33 cd		 xor	 ecx, ebp
  000b7	5b		 pop	 ebx
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	c9		 leave
  000be	c2 08 00	 ret	 8
?AddRenderFrame@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ENDP ; BillingWantWnd::AddRenderFrame
_TEXT	ENDS
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderImage@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_pImage$GSCopy$ = -28					; size = 4
_this$GSCopy$ = -24					; size = 4
__t$513162 = -20					; size = 9
__t$513024 = -16					; size = 5
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; BillingWantWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _szType$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 48   : 	if( szType == "Icon" )

  0001c	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
  00021	c7 45 f0 a4 8f
	84 84		 mov	 DWORD PTR __t$513024[ebp], -2071687260 ; 84848fa4H
  00028	31 7d f0	 xor	 DWORD PTR __t$513024[ebp], edi
  0002b	8b cb		 mov	 ecx, ebx

; 59   : 	{
; 60   : 		ioWnd::AddRenderImage( szType, pImage );	

  0002d	89 45 e4	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00030	c6 45 f4 00	 mov	 BYTE PTR __t$513024[ebp+4], 0
  00034	8d 75 f0	 lea	 esi, DWORD PTR __t$513024[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL234@AddRenderI:

; 48   : 	if( szType == "Icon" )

  0003d	8a 08		 mov	 cl, BYTE PTR [eax]
  0003f	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00041	75 1a		 jne	 SHORT $LN235@AddRenderI
  00043	84 c9		 test	 cl, cl
  00045	74 12		 je	 SHORT $LN236@AddRenderI
  00047	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0004a	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0004d	75 0e		 jne	 SHORT $LN235@AddRenderI
  0004f	83 c0 02	 add	 eax, 2
  00052	83 c6 02	 add	 esi, 2
  00055	84 c9		 test	 cl, cl
  00057	75 e4		 jne	 SHORT $LL234@AddRenderI
$LN236@AddRenderI:
  00059	33 c0		 xor	 eax, eax
  0005b	eb 05		 jmp	 SHORT $LN237@AddRenderI
$LN235@AddRenderI:
  0005d	1b c0		 sbb	 eax, eax
  0005f	83 d8 ff	 sbb	 eax, -1
$LN237@AddRenderI:
  00062	85 c0		 test	 eax, eax
  00064	75 29		 jne	 SHORT $LN233@AddRenderI

; 49   : 	{
; 50   : 		SAFEDELETE( m_pIcon );

  00066	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00069	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  0006f	85 c9		 test	 ecx, ecx
  00071	74 0e		 je	 SHORT $LN5@AddRenderI
  00073	8b 01		 mov	 eax, DWORD PTR [ecx]
  00075	6a 01		 push	 1
  00077	ff 50 40	 call	 DWORD PTR [eax+64]
  0007a	83 a6 6c 01 00
	00 00		 and	 DWORD PTR [esi+364], 0
$LN5@AddRenderI:

; 51   : 		m_pIcon = pImage;

  00081	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00084	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax
  0008a	e9 87 00 00 00	 jmp	 $LN1@AddRenderI
$LN233@AddRenderI:

; 52   : 	}
; 53   : 	else if( szType == "IconBack" )

  0008f	6a 02		 push	 2
  00091	c7 45 ec a4 8f
	84 84		 mov	 DWORD PTR __t$513162[ebp], -2071687260 ; 84848fa4H
  00098	c7 45 f0 af 8d
	88 81		 mov	 DWORD PTR __t$513162[ebp+4], -2121757265 ; 81888dafH
  0009f	8d 45 ec	 lea	 eax, DWORD PTR __t$513162[ebp]
  000a2	c6 45 f4 00	 mov	 BYTE PTR __t$513162[ebp+8], 0
  000a6	59		 pop	 ecx
$LL222@AddRenderI:
  000a7	31 38		 xor	 DWORD PTR [eax], edi
  000a9	83 c0 04	 add	 eax, 4
  000ac	49		 dec	 ecx
  000ad	75 f8		 jne	 SHORT $LL222@AddRenderI
  000af	8b cb		 mov	 ecx, ebx
  000b1	8d 75 ec	 lea	 esi, DWORD PTR __t$513162[ebp]
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL238@AddRenderI:
  000ba	8a 08		 mov	 cl, BYTE PTR [eax]
  000bc	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000be	75 1a		 jne	 SHORT $LN239@AddRenderI
  000c0	84 c9		 test	 cl, cl
  000c2	74 12		 je	 SHORT $LN240@AddRenderI
  000c4	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000c7	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000ca	75 0e		 jne	 SHORT $LN239@AddRenderI
  000cc	83 c0 02	 add	 eax, 2
  000cf	83 c6 02	 add	 esi, 2
  000d2	84 c9		 test	 cl, cl
  000d4	75 e4		 jne	 SHORT $LL238@AddRenderI
$LN240@AddRenderI:
  000d6	33 c0		 xor	 eax, eax
  000d8	eb 05		 jmp	 SHORT $LN241@AddRenderI
$LN239@AddRenderI:
  000da	1b c0		 sbb	 eax, eax
  000dc	83 d8 ff	 sbb	 eax, -1
$LN241@AddRenderI:
  000df	85 c0		 test	 eax, eax
  000e1	75 26		 jne	 SHORT $LN3@AddRenderI

; 54   : 	{
; 55   : 		SAFEDELETE( m_pIconBack );

  000e3	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000e6	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  000ec	85 c9		 test	 ecx, ecx
  000ee	74 0e		 je	 SHORT $LN2@AddRenderI
  000f0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f2	6a 01		 push	 1
  000f4	ff 50 40	 call	 DWORD PTR [eax+64]
  000f7	83 a6 70 01 00
	00 00		 and	 DWORD PTR [esi+368], 0
$LN2@AddRenderI:

; 56   : 		m_pIconBack = pImage;

  000fe	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00101	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax

; 57   : 	}
; 58   : 	else

  00107	eb 0d		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 59   : 	{
; 60   : 		ioWnd::AddRenderImage( szType, pImage );	

  00109	ff 75 e4	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  0010c	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0010f	53		 push	 ebx
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 61   : 	}
; 62   : }

  00116	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	33 cd		 xor	 ecx, ebp
  0011d	5b		 pop	 ebx
  0011e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00123	c9		 leave
  00124	c2 08 00	 ret	 8
?AddRenderImage@BillingWantWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; BillingWantWnd::AddRenderImage
_TEXT	ENDS
END
