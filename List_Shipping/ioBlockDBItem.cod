; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\Housing\ioBlockDBItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0TilePos@@QAE@HHH@Z				; TilePos::TilePos
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\blockdefine.h
;	COMDAT ??0TilePos@@QAE@HHH@Z
_TEXT	SEGMENT
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
_nZ$ = 16						; size = 4
??0TilePos@@QAE@HHH@Z PROC				; TilePos::TilePos, COMDAT
; _this$ = ecx

; 96   : 	TilePos( int nX, int nY, int nZ )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 97   : 	{
; 98   : 		x		= nX;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _nX$[ebp]

; 99   : 		y		= nY;
; 100  : 		z		= nZ;
; 101  : 		event	= 0;

  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _nY$[ebp]
  00011	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _nZ$[ebp]
  00017	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 102  : 	}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??0TilePos@@QAE@HHH@Z ENDP				; TilePos::TilePos
_TEXT	ENDS
PUBLIC	??_7ioBlockDBItem@@6B@				; ioBlockDBItem::`vftable'
PUBLIC	??0ioBlockDBItem@@QAE@XZ			; ioBlockDBItem::ioBlockDBItem
PUBLIC	??_R4ioBlockDBItem@@6B@				; ioBlockDBItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioBlockDBItem@@@8			; ioBlockDBItem `RTTI Type Descriptor'
PUBLIC	??_R3ioBlockDBItem@@8				; ioBlockDBItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBlockDBItem@@8				; ioBlockDBItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioBlockDBItem@@8			; ioBlockDBItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EioBlockDBItem@@UAEPAXI@Z:PROC		; ioBlockDBItem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioBlockDBItem@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioblockdbitem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBlockDBItem@@8 DD FLAT:??_R0?AVioBlockDBItem@@@8 ; ioBlockDBItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBlockDBItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioBlockDBItem@@8
rdata$r	SEGMENT
??_R2ioBlockDBItem@@8 DD FLAT:??_R1A@?0A@EA@ioBlockDBItem@@8 ; ioBlockDBItem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBlockDBItem@@8
rdata$r	SEGMENT
??_R3ioBlockDBItem@@8 DD 00H				; ioBlockDBItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBlockDBItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBlockDBItem@@@8
_DATA	SEGMENT
??_R0?AVioBlockDBItem@@@8 DD FLAT:??_7type_info@@6B@	; ioBlockDBItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBlockDBItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioBlockDBItem@@6B@
rdata$r	SEGMENT
??_R4ioBlockDBItem@@6B@ DD 00H				; ioBlockDBItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioBlockDBItem@@@8
	DD	FLAT:??_R3ioBlockDBItem@@8
rdata$r	ENDS
;	COMDAT ??_7ioBlockDBItem@@6B@
CONST	SEGMENT
??_7ioBlockDBItem@@6B@ DD FLAT:??_R4ioBlockDBItem@@6B@	; ioBlockDBItem::`vftable'
	DD	FLAT:??_EioBlockDBItem@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioBlockDBItem@@QAE@XZ
_TEXT	SEGMENT
??0ioBlockDBItem@@QAE@XZ PROC				; ioBlockDBItem::ioBlockDBItem, COMDAT
; _this$ = ecx

; 6    : {	

  00000	8b c1		 mov	 eax, ecx

; 7    : 	m_nCode			= 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ioBlockDBItem@@6B@
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 8    : 	m_nUniqueIndex	= 0;

  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00010	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 9    : 	m_nCellPos		= 0;

  00013	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 10   : 	m_nCellLevel	= 0;

  00016	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 11   : 	m_nTileMax		= 0;

  00019	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 12   : 	m_nRotate		= 0;	

  0001c	88 48 24	 mov	 BYTE PTR [eax+36], cl

; 13   : }

  0001f	c3		 ret	 0
??0ioBlockDBItem@@QAE@XZ ENDP				; ioBlockDBItem::ioBlockDBItem
_TEXT	ENDS
PUBLIC	??0ioBlockDBItem@@QAE@H_JHHHH@Z			; ioBlockDBItem::ioBlockDBItem
; Function compile flags: /Ogsp
;	COMDAT ??0ioBlockDBItem@@QAE@H_JHHHH@Z
_TEXT	SEGMENT
_nCode$ = 8						; size = 4
_nUniqueIndex$ = 12					; size = 8
_nCellPos$ = 20						; size = 4
_nCellLevel$ = 24					; size = 4
_nTileMax$ = 28						; size = 4
_nRotate$ = 32						; size = 4
??0ioBlockDBItem@@QAE@H_JHHHH@Z PROC			; ioBlockDBItem::ioBlockDBItem, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _nCode$[ebp]
  00008	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nUniqueIndex$[ebp]
  0000e	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _nUniqueIndex$[ebp+4]
  00014	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00017	8b 4d 14	 mov	 ecx, DWORD PTR _nCellPos$[ebp]
  0001a	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001d	8b 4d 18	 mov	 ecx, DWORD PTR _nCellLevel$[ebp]
  00020	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00023	8b 4d 1c	 mov	 ecx, DWORD PTR _nTileMax$[ebp]
  00026	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00029	8a 4d 20	 mov	 cl, BYTE PTR _nRotate$[ebp]
  0002c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ioBlockDBItem@@6B@
  00032	88 48 24	 mov	 BYTE PTR [eax+36], cl

; 23   : }

  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
??0ioBlockDBItem@@QAE@H_JHHHH@Z ENDP			; ioBlockDBItem::ioBlockDBItem
_TEXT	ENDS
PUBLIC	??1ioBlockDBItem@@UAE@XZ			; ioBlockDBItem::~ioBlockDBItem
; Function compile flags: /Ogsp
;	COMDAT ??1ioBlockDBItem@@UAE@XZ
_TEXT	SEGMENT
??1ioBlockDBItem@@UAE@XZ PROC				; ioBlockDBItem::~ioBlockDBItem, COMDAT
; _this$ = ecx

; 26   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioBlockDBItem@@6B@

; 27   : }

  00006	c3		 ret	 0
??1ioBlockDBItem@@UAE@XZ ENDP				; ioBlockDBItem::~ioBlockDBItem
_TEXT	ENDS
PUBLIC	?GetCode@ioBlockDBItem@@QBEKXZ			; ioBlockDBItem::GetCode
; Function compile flags: /Ogsp
;	COMDAT ?GetCode@ioBlockDBItem@@QBEKXZ
_TEXT	SEGMENT
?GetCode@ioBlockDBItem@@QBEKXZ PROC			; ioBlockDBItem::GetCode, COMDAT
; _this$ = ecx

; 31   : 	return m_nCode;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 32   : }

  00003	c3		 ret	 0
?GetCode@ioBlockDBItem@@QBEKXZ ENDP			; ioBlockDBItem::GetCode
_TEXT	ENDS
PUBLIC	?GetType@ioBlockDBItem@@QBEKXZ			; ioBlockDBItem::GetType
; Function compile flags: /Ogsp
;	COMDAT ?GetType@ioBlockDBItem@@QBEKXZ
_TEXT	SEGMENT
?GetType@ioBlockDBItem@@QBEKXZ PROC			; ioBlockDBItem::GetType, COMDAT
; _this$ = ecx

; 36   : 	return m_nCode / HBT_CUT_TYPE;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	99		 cdq
  00004	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00009	f7 f9		 idiv	 ecx

; 37   : }

  0000b	c3		 ret	 0
?GetType@ioBlockDBItem@@QBEKXZ ENDP			; ioBlockDBItem::GetType
_TEXT	ENDS
PUBLIC	?GetUniqueIndex@ioBlockDBItem@@QBE_JXZ		; ioBlockDBItem::GetUniqueIndex
; Function compile flags: /Ogsp
;	COMDAT ?GetUniqueIndex@ioBlockDBItem@@QBE_JXZ
_TEXT	SEGMENT
?GetUniqueIndex@ioBlockDBItem@@QBE_JXZ PROC		; ioBlockDBItem::GetUniqueIndex, COMDAT
; _this$ = ecx

; 41   : 	return m_nUniqueIndex;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]

; 42   : }

  00006	c3		 ret	 0
?GetUniqueIndex@ioBlockDBItem@@QBE_JXZ ENDP		; ioBlockDBItem::GetUniqueIndex
_TEXT	ENDS
PUBLIC	?GetSubType@ioBlockDBItem@@QBEKXZ		; ioBlockDBItem::GetSubType
; Function compile flags: /Ogsp
;	COMDAT ?GetSubType@ioBlockDBItem@@QBEKXZ
_TEXT	SEGMENT
?GetSubType@ioBlockDBItem@@QBEKXZ PROC			; ioBlockDBItem::GetSubType, COMDAT
; _this$ = ecx

; 46   : 	return m_nCode % HBT_CUT_TYPE;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	99		 cdq
  00004	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00009	f7 f9		 idiv	 ecx
  0000b	8b c2		 mov	 eax, edx

; 47   : }

  0000d	c3		 ret	 0
?GetSubType@ioBlockDBItem@@QBEKXZ ENDP			; ioBlockDBItem::GetSubType
_TEXT	ENDS
PUBLIC	?GetTilePosX@ioBlockDBItem@@QBEHXZ		; ioBlockDBItem::GetTilePosX
; Function compile flags: /Ogsp
;	COMDAT ?GetTilePosX@ioBlockDBItem@@QBEHXZ
_TEXT	SEGMENT
?GetTilePosX@ioBlockDBItem@@QBEHXZ PROC			; ioBlockDBItem::GetTilePosX, COMDAT
; _this$ = ecx

; 51   : 	return m_nCellPos % m_nTileMax;

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	99		 cdq
  00004	f7 79 20	 idiv	 DWORD PTR [ecx+32]
  00007	8b c2		 mov	 eax, edx

; 52   : }

  00009	c3		 ret	 0
?GetTilePosX@ioBlockDBItem@@QBEHXZ ENDP			; ioBlockDBItem::GetTilePosX
_TEXT	ENDS
PUBLIC	?GetTilePosY@ioBlockDBItem@@QBEHXZ		; ioBlockDBItem::GetTilePosY
; Function compile flags: /Ogsp
;	COMDAT ?GetTilePosY@ioBlockDBItem@@QBEHXZ
_TEXT	SEGMENT
?GetTilePosY@ioBlockDBItem@@QBEHXZ PROC			; ioBlockDBItem::GetTilePosY, COMDAT
; _this$ = ecx

; 56   : 	return m_nCellLevel;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 57   : }

  00003	c3		 ret	 0
?GetTilePosY@ioBlockDBItem@@QBEHXZ ENDP			; ioBlockDBItem::GetTilePosY
_TEXT	ENDS
PUBLIC	?GetTilePosZ@ioBlockDBItem@@QBEHXZ		; ioBlockDBItem::GetTilePosZ
; Function compile flags: /Ogsp
;	COMDAT ?GetTilePosZ@ioBlockDBItem@@QBEHXZ
_TEXT	SEGMENT
?GetTilePosZ@ioBlockDBItem@@QBEHXZ PROC			; ioBlockDBItem::GetTilePosZ, COMDAT
; _this$ = ecx

; 61   : 	return m_nCellPos / m_nTileMax;

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	99		 cdq
  00004	f7 79 20	 idiv	 DWORD PTR [ecx+32]

; 62   : }

  00007	c3		 ret	 0
?GetTilePosZ@ioBlockDBItem@@QBEHXZ ENDP			; ioBlockDBItem::GetTilePosZ
_TEXT	ENDS
PUBLIC	?GetTilePos@ioBlockDBItem@@QBE?AVTilePos@@XZ	; ioBlockDBItem::GetTilePos
; Function compile flags: /Ogsp
;	COMDAT ?GetTilePos@ioBlockDBItem@@QBE?AVTilePos@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTilePos@ioBlockDBItem@@QBE?AVTilePos@@XZ PROC	; ioBlockDBItem::GetTilePos, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	return TilePos( GetTilePosX(), GetTilePosY(), GetTilePosZ() );

  00003	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00006	99		 cdq
  00007	f7 79 20	 idiv	 DWORD PTR [ecx+32]
  0000a	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0000d	56		 push	 esi
  0000e	8b f0		 mov	 esi, eax
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  00017	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001a	89 10		 mov	 DWORD PTR [eax], edx
  0001c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001f	5e		 pop	 esi

; 67   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?GetTilePos@ioBlockDBItem@@QBE?AVTilePos@@XZ ENDP	; ioBlockDBItem::GetTilePos
_TEXT	ENDS
PUBLIC	?GetRotate@ioBlockDBItem@@QBEEXZ		; ioBlockDBItem::GetRotate
; Function compile flags: /Ogsp
;	COMDAT ?GetRotate@ioBlockDBItem@@QBEEXZ
_TEXT	SEGMENT
?GetRotate@ioBlockDBItem@@QBEEXZ PROC			; ioBlockDBItem::GetRotate, COMDAT
; _this$ = ecx

; 71   : 	return m_nRotate;

  00000	8a 41 24	 mov	 al, BYTE PTR [ecx+36]

; 72   : }

  00003	c3		 ret	 0
?GetRotate@ioBlockDBItem@@QBEEXZ ENDP			; ioBlockDBItem::GetRotate
_TEXT	ENDS
PUBLIC	?FillItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z	; ioBlockDBItem::FillItem
EXTRN	??6SP2Packet@@QAEAAV0@E@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@_J@Z:PROC			; SP2Packet::operator<<
; Function compile flags: /Ogsp
;	COMDAT ?FillItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?FillItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z PROC	; ioBlockDBItem::FillItem, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 76   : 	rkPacket << m_nUniqueIndex;

  00005	8b 7d 08	 mov	 edi, DWORD PTR _rkPacket$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 76 14	 push	 DWORD PTR [esi+20]
  0000d	8b cf		 mov	 ecx, edi
  0000f	ff 76 10	 push	 DWORD PTR [esi+16]
  00012	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_J@Z ; SP2Packet::operator<<

; 77   : 	rkPacket << m_nCode;

  00017	ff 76 08	 push	 DWORD PTR [esi+8]
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 78   : 	rkPacket << m_nCellPos;

  00021	ff 76 18	 push	 DWORD PTR [esi+24]
  00024	8b cf		 mov	 ecx, edi
  00026	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 79   : 	rkPacket << m_nCellLevel;

  0002b	ff 76 1c	 push	 DWORD PTR [esi+28]
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 80   : 	rkPacket << m_nRotate;

  00035	0f b6 46 24	 movzx	 eax, BYTE PTR [esi+36]
  00039	50		 push	 eax
  0003a	8b cf		 mov	 ecx, edi
  0003c	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@E@Z ; SP2Packet::operator<<
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 81   : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?FillItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z ENDP	; ioBlockDBItem::FillItem
_TEXT	ENDS
PUBLIC	?ApplyItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z	; ioBlockDBItem::ApplyItem
EXTRN	??5SP2Packet@@QAEAAV0@AAE@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AA_J@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?ApplyItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z PROC	; ioBlockDBItem::ApplyItem, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 85   : 	rkPacket >> m_nUniqueIndex;

  00007	8b 7d 08	 mov	 edi, DWORD PTR _rkPacket$[ebp]
  0000a	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0000d	50		 push	 eax
  0000e	8b cf		 mov	 ecx, edi
  00010	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_J@Z ; SP2Packet::operator>>

; 86   : 	rkPacket >> m_nCode;	

  00015	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00018	50		 push	 eax
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 87   : 	rkPacket >> m_nCellPos;

  00020	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00023	50		 push	 eax
  00024	8b cf		 mov	 ecx, edi
  00026	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 88   : 	rkPacket >> m_nCellLevel;

  0002b	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  0002e	50		 push	 eax
  0002f	8b cf		 mov	 ecx, edi
  00031	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 89   : 	rkPacket >> m_nRotate;

  00036	83 c6 24	 add	 esi, 36			; 00000024H
  00039	56		 push	 esi
  0003a	8b cf		 mov	 ecx, edi
  0003c	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAE@Z ; SP2Packet::operator>>
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 90   : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?ApplyItem@ioBlockDBItem@@QAEXAAVSP2Packet@@@Z ENDP	; ioBlockDBItem::ApplyItem
_TEXT	ENDS
PUBLIC	?SetTileMax@ioBlockDBItem@@QAEXH@Z		; ioBlockDBItem::SetTileMax
; Function compile flags: /Ogsp
;	COMDAT ?SetTileMax@ioBlockDBItem@@QAEXH@Z
_TEXT	SEGMENT
_nTileMax$ = 8						; size = 4
?SetTileMax@ioBlockDBItem@@QAEXH@Z PROC			; ioBlockDBItem::SetTileMax, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 	m_nTileMax = nTileMax;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nTileMax$[ebp]
  00006	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 95   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetTileMax@ioBlockDBItem@@QAEXH@Z ENDP			; ioBlockDBItem::SetTileMax
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioBlockDBItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioBlockDBItem@@UAEPAXI@Z PROC			; ioBlockDBItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioBlockDBItem@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioBlockDBItem@@UAEPAXI@Z ENDP			; ioBlockDBItem::`scalar deleting destructor'
_TEXT	ENDS
_BSS	SEGMENT
_ZERO_TILE_POS DB 010H DUP (?)
_BSS	ENDS
END
