; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioSkillAttackBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_7ioSkillAttackBuff@@6B@			; ioSkillAttackBuff::`vftable'
PUBLIC	??0ioSkillAttackBuff@@QAE@XZ			; ioSkillAttackBuff::ioSkillAttackBuff
PUBLIC	??_R4ioSkillAttackBuff@@6B@			; ioSkillAttackBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioSkillAttackBuff@@@8			; ioSkillAttackBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioSkillAttackBuff@@8			; ioSkillAttackBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSkillAttackBuff@@8			; ioSkillAttackBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSkillAttackBuff@@8		; ioSkillAttackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioSkillAttackBuff@@UAEXAAVioINILoader@@@Z ; ioSkillAttackBuff::LoadProperty
PUBLIC	?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ	; ioSkillAttackBuff::Clone
PUBLIC	?StartBuff@ioSkillAttackBuff@@UAEXPAVioBaseChar@@@Z ; ioSkillAttackBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioSkillAttackBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioSkillAttackBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z		; ioSkillAttackBuff::ProcessBuff
PUBLIC	?EndBuff@ioSkillAttackBuff@@UAEXXZ		; ioSkillAttackBuff::EndBuff
PUBLIC	?ApplyExtraBuffInfo@ioSkillAttackBuff@@UAEXAAVSP2Packet@@@Z ; ioSkillAttackBuff::ApplyExtraBuffInfo
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioSkillAttackBuff@@UAEPAXI@Z:PROC		; ioSkillAttackBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillattackbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSkillAttackBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSkillAttackBuff@@8 DD FLAT:??_R0?AVioSkillAttackBuff@@@8 ; ioSkillAttackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSkillAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioSkillAttackBuff@@8
rdata$r	SEGMENT
??_R2ioSkillAttackBuff@@8 DD FLAT:??_R1A@?0A@EA@ioSkillAttackBuff@@8 ; ioSkillAttackBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioSkillAttackBuff@@8
rdata$r	SEGMENT
??_R3ioSkillAttackBuff@@8 DD 00H			; ioSkillAttackBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioSkillAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSkillAttackBuff@@@8
_DATA	SEGMENT
??_R0?AVioSkillAttackBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioSkillAttackBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSkillAttackBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioSkillAttackBuff@@6B@
rdata$r	SEGMENT
??_R4ioSkillAttackBuff@@6B@ DD 00H			; ioSkillAttackBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioSkillAttackBuff@@@8
	DD	FLAT:??_R3ioSkillAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioSkillAttackBuff@@6B@
CONST	SEGMENT
??_7ioSkillAttackBuff@@6B@ DD FLAT:??_R4ioSkillAttackBuff@@6B@ ; ioSkillAttackBuff::`vftable'
	DD	FLAT:?LoadProperty@ioSkillAttackBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioSkillAttackBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioSkillAttackBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioSkillAttackBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioSkillAttackBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioSkillAttackBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioSkillAttackBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioSkillAttackBuff@@QAE@XZ$0
__ehfuncinfo$??0ioSkillAttackBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioSkillAttackBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioSkillAttackBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioSkillAttackBuff@@QAE@XZ PROC			; ioSkillAttackBuff::ioSkillAttackBuff, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioSkillAttackBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSkillAttackBuff@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 13   : }

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioSkillAttackBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioSkillAttackBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioSkillAttackBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioSkillAttackBuff@@QAE@XZ ENDP			; ioSkillAttackBuff::ioSkillAttackBuff
PUBLIC	??0ioSkillAttackBuff@@QAE@ABV0@@Z		; ioSkillAttackBuff::ioSkillAttackBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioSkillAttackBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioSkillAttackBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioSkillAttackBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioSkillAttackBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioSkillAttackBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioSkillAttackBuff@@QAE@ABV0@@Z PROC			; ioSkillAttackBuff::ioSkillAttackBuff, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioSkillAttackBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSkillAttackBuff@@6B@
  00024	8b 87 6c 09 00
	00		 mov	 eax, DWORD PTR [edi+2412]
  0002a	81 c7 70 09 00
	00		 add	 edi, 2416		; 00000970H
  00030	57		 push	 edi
  00031	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00037	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 20   : }

  00043	8b c6		 mov	 eax, esi
  00045	e8 00 00 00 00	 call	 __EH_epilog3
  0004a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioSkillAttackBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioSkillAttackBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioSkillAttackBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioSkillAttackBuff@@QAE@ABV0@@Z ENDP			; ioSkillAttackBuff::ioSkillAttackBuff
PUBLIC	??1ioSkillAttackBuff@@UAE@XZ			; ioSkillAttackBuff::~ioSkillAttackBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioSkillAttackBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioSkillAttackBuff@@UAE@XZ$0
__ehfuncinfo$??1ioSkillAttackBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioSkillAttackBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioSkillAttackBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioSkillAttackBuff@@UAE@XZ PROC			; ioSkillAttackBuff::~ioSkillAttackBuff, COMDAT
; _this$ = ecx

; 23   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioSkillAttackBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSkillAttackBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 24   : }

  0001b	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioSkillAttackBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioSkillAttackBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioSkillAttackBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioSkillAttackBuff@@UAE@XZ ENDP			; ioSkillAttackBuff::~ioSkillAttackBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T550978 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ PROC		; ioSkillAttackBuff::Clone, COMDAT
; _this$ = ecx

; 39   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 40   : 	return new ioSkillAttackBuff( *this );

  0000e	68 80 09 00 00	 push	 2432			; 00000980H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T550978[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioSkillAttackBuff@@QAE@ABV0@@Z ; ioSkillAttackBuff::ioSkillAttackBuff
$LN3@Clone:

; 41   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T550978[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioSkillAttackBuff@@UAEPAVioBuff@@XZ ENDP		; ioSkillAttackBuff::Clone
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioSkillAttackBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioSkillAttackBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioSkillAttackBuff::StartBuff, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 
; 47   : }

  00003	5d		 pop	 ebp

; 45   : 	ioBuff::StartBuff( pOwner );

  00004	e9 00 00 00 00	 jmp	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff
?StartBuff@ioSkillAttackBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioSkillAttackBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioSkillAttackBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioSkillAttackBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioSkillAttackBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00003	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00011	84 c0		 test	 al, al
  00013	0f 95 c0	 setne	 al

; 52   : 		return false;
; 53   : 
; 54   : 	return true;
; 55   : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioSkillAttackBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioSkillAttackBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioSkillAttackBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioSkillAttackBuff@@UAEXXZ PROC			; ioSkillAttackBuff::EndBuff, COMDAT
; _this$ = ecx

; 116  : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioSkillAttackBuff@@UAEXXZ ENDP			; ioSkillAttackBuff::EndBuff
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
; Function compile flags: /Ogsp
;	COMDAT ?ApplyExtraBuffInfo@ioSkillAttackBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?ApplyExtraBuffInfo@ioSkillAttackBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioSkillAttackBuff::ApplyExtraBuffInfo, COMDAT
; _this$ = ecx

; 166  : 	/*ioBaseChar *pOwner = GetOwner();
; 167  : 	if( !pOwner )
; 168  : 		return;
; 169  : 
; 170  : 	ioPlayStage *pStage = pOwner->GetCreator();
; 171  : 	if( !pStage )
; 172  : 		return;
; 173  : 
; 174  : 	bool bSuccess;
; 175  : 	rkPacket >> bSuccess;
; 176  : 
; 177  : 	if( bSuccess )
; 178  : 		CreateSuccusWeapon(false);
; 179  : 	else
; 180  : 		CreateFailWeapon(false);
; 181  : 
; 182  : 	SetReserveEndBuff();*/
; 183  : }

  00000	c2 04 00	 ret	 4
?ApplyExtraBuffInfo@ioSkillAttackBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioSkillAttackBuff::ApplyExtraBuffInfo
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??0FireTime@@QAE@XZ				; FireTime::FireTime
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$1
__ehfuncinfo$??0FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FireTime@@QAE@XZ PROC				; FireTime::FireTime, COMDAT
; _this$ = ecx

; 219  : 	FireTime()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi
  00026	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00029	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002d	ff d7		 call	 edi

; 220  : 	{
; 221  : 		dwStart = 0;

  0002f	89 1e		 mov	 DWORD PTR [esi], ebx

; 222  : 		dwDuration = 0;

  00031	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 223  : 
; 224  : 		iAttributeIdx = 0;

  00034	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  : 		iResistanceIdx = 0;

  00037	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 226  : 
; 227  : 		bLoopWoundedAni = false;

  0003a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 228  : 		dwWoundedAniDuration = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 229  : 
; 230  : 		dwWeaponIdx = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 231  : 		eCollisionType = ACT_NONE;

  00043	c7 46 2c 06 00
	00 00		 mov	 DWORD PTR [esi+44], 6

; 232  : 		eFireTimeType = FTT_NORMAL_ATTACK;

  0004a	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 233  : 
; 234  : 		m_iExtraValue = 0;

  0004d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 235  : 	}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FireTime@@QAE@XZ ENDP				; FireTime::FireTime
PUBLIC	?GetName@ioBuff@@QBEABVioHashString@@XZ		; ioBuff::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetName@ioBuff@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioBuff@@QBEABVioHashString@@XZ PROC		; ioBuff::GetName, COMDAT
; _this$ = ecx

; 440  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 81 34 02 00
	00		 lea	 eax, DWORD PTR [ecx+564]
  00006	c3		 ret	 0
?GetName@ioBuff@@QBEABVioHashString@@XZ ENDP		; ioBuff::GetName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioSkillAttackBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioSkillAttackBuff@@UAEPAXI@Z PROC			; ioSkillAttackBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioSkillAttackBuff@@UAE@XZ ; ioSkillAttackBuff::~ioSkillAttackBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioSkillAttackBuff@@UAEPAXI@Z ENDP			; ioSkillAttackBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z	; ioSkillAttackBuff::CreateWeapon
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	?GetWeaponIndexBase@ioBaseChar@@QBEKXZ:PROC	; ioBaseChar::GetWeaponIndexBase
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ:PROC ; ioBaseChar::IncreaseWeaponIndexBase
EXTRN	?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z:PROC ; ioBaseChar::GetBaseChar
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z$0
__ehfuncinfo$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillattackbuff.cpp
xdata$x	ENDS
;	COMDAT ?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z
_TEXT	SEGMENT
_kFireTime$ = -132					; size = 88
tv379 = -44						; size = 4
tv375 = -44						; size = 4
tv371 = -44						; size = 4
_vPos$ = -40						; size = 12
_vDir$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_bSend$ = 8						; size = 1
?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z PROC		; ioSkillAttackBuff::CreateWeapon, COMDAT
; _this$ = ecx

; 121  : {

  00000	6a 78		 push	 120			; 00000078H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx

; 122  : 	if( GetOwner() == NULL )

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner

; 123  : 	{
; 124  : 		SetReserveEndBuff();

  00013	8b ce		 mov	 ecx, esi
  00015	85 c0		 test	 eax, eax
  00017	75 0a		 jne	 SHORT $LN2@CreateWeap
$LN19@CreateWeap:
  00019	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 125  : 		return;

  0001e	e9 58 01 00 00	 jmp	 $LN3@CreateWeap
$LN2@CreateWeap:

; 126  : 	}
; 127  : 
; 128  : 	ioBaseChar *pCreator = GetOwner()->GetBaseChar( m_CreateChar );

  00023	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  0002f	8b c8		 mov	 ecx, eax
  00031	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar
  00036	8b d8		 mov	 ebx, eax

; 129  : 	if( pCreator == NULL )

  00038	33 ff		 xor	 edi, edi
  0003a	3b df		 cmp	 ebx, edi
  0003c	75 04		 jne	 SHORT $LN1@CreateWeap

; 130  : 	{
; 131  : 		SetReserveEndBuff();

  0003e	8b ce		 mov	 ecx, esi

; 132  : 		return;

  00040	eb d7		 jmp	 SHORT $LN19@CreateWeap
$LN1@CreateWeap:

; 133  : 	}
; 134  : 	pCreator->IncreaseWeaponIndexBase();

  00042	8b cb		 mov	 ecx, ebx
  00044	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase

; 135  : 	FireTime kFireTime;

  00049	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  0004f	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00054	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi

; 136  : 	kFireTime.dwStart = FRAMEGETTIME();

  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0005d	8b c8		 mov	 ecx, eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00065	89 85 7c ff ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp], eax

; 137  : 
; 138  : 	kFireTime.iAttributeIdx = m_nCallWeapon;

  0006b	8b 86 6c 09 00
	00		 mov	 eax, DWORD PTR [esi+2412]

; 139  : 	kFireTime.iResistanceIdx = 0;
; 140  : 	kFireTime.szWoundedAni  = "";

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00076	8d 4d 90	 lea	 ecx, DWORD PTR _kFireTime$[ebp+20]
  00079	89 45 84	 mov	 DWORD PTR _kFireTime$[ebp+8], eax
  0007c	89 7d 88	 mov	 DWORD PTR _kFireTime$[ebp+12], edi
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 141  : 	kFireTime.dwWoundedAniDuration = 0;
; 142  : 	kFireTime.bLoopWoundedAni = false;
; 143  : 
; 144  : 	kFireTime.dwWeaponIdx = pCreator->GetWeaponIndexBase();

  00085	8b cb		 mov	 ecx, ebx
  00087	89 7d a0	 mov	 DWORD PTR _kFireTime$[ebp+36], edi
  0008a	c6 45 8c 00	 mov	 BYTE PTR _kFireTime$[ebp+16], 0
  0008e	e8 00 00 00 00	 call	 ?GetWeaponIndexBase@ioBaseChar@@QBEKXZ ; ioBaseChar::GetWeaponIndexBase
  00093	89 45 a4	 mov	 DWORD PTR _kFireTime$[ebp+40], eax

; 145  : 	kFireTime.eFireTimeType = FTT_NORMAL_ATTACK;

  00096	89 7d bc	 mov	 DWORD PTR _kFireTime$[ebp+64], edi

; 146  : 
; 147  : 	D3DXVECTOR3 vPos = GetOwner()->GetMidPositionByRate();

  00099	b8 05 00 00 00	 mov	 eax, 5
  0009e	8b c8		 mov	 ecx, eax
  000a0	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000a5	89 4d d4	 mov	 DWORD PTR tv379[ebp], ecx
  000a8	db 45 d4	 fild	 DWORD PTR tv379[ebp]
  000ab	85 c9		 test	 ecx, ecx
  000ad	79 06		 jns	 SHORT $LN17@CreateWeap
  000af	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN17@CreateWeap:
  000b5	89 45 d4	 mov	 DWORD PTR tv375[ebp], eax
  000b8	db 45 d4	 fild	 DWORD PTR tv375[ebp]
  000bb	85 c0		 test	 eax, eax
  000bd	79 06		 jns	 SHORT $LN18@CreateWeap
  000bf	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN18@CreateWeap:
  000c5	de f9		 fdivp	 ST(1), ST(0)
  000c7	51		 push	 ecx
  000c8	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  000cb	8b ce		 mov	 ecx, esi
  000cd	d9 5d d4	 fstp	 DWORD PTR tv371[ebp]
  000d0	d9 45 d4	 fld	 DWORD PTR tv371[ebp]
  000d3	d9 1c 24	 fstp	 DWORD PTR [esp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  000dc	8b c8		 mov	 ecx, eax
  000de	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 148  : 	D3DXVECTOR3 vDir = pCreator->GetWorldPosition() - GetOwner()->GetWorldPosition();

  000e3	8b ce		 mov	 ecx, esi
  000e5	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  000ea	8b 10		 mov	 edx, DWORD PTR [eax]
  000ec	8b c8		 mov	 ecx, eax
  000ee	ff 52 70	 call	 DWORD PTR [edx+112]
  000f1	8b f8		 mov	 edi, eax
  000f3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f5	8b cb		 mov	 ecx, ebx
  000f7	ff 50 70	 call	 DWORD PTR [eax+112]
  000fa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000fe	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00102	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00107	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]
  0010c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0010f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00112	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00116	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0011b	0f 5a d2	 cvtps2pd xmm2, xmm2
  0011e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00121	f2 0f 5c ca	 subsd	 xmm1, xmm2
  00125	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]

; 149  : 	pCreator->ExtendFireExplicit( kFireTime, vPos, vDir, GetName() );

  0012a	81 c6 34 02 00
	00		 add	 esi, 564		; 00000234H
  00130	56		 push	 esi
  00131	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  00134	50		 push	 eax
  00135	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  00138	50		 push	 eax
  00139	0f 5a d2	 cvtps2pd xmm2, xmm2
  0013c	0f 5a db	 cvtps2pd xmm3, xmm3
  0013f	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _kFireTime$[ebp]
  00145	f2 0f 5c d3	 subsd	 xmm2, xmm3
  00149	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0014d	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00151	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00155	50		 push	 eax
  00156	8b cb		 mov	 ecx, ebx
  00158	f3 0f 11 45 e4	 movss	 DWORD PTR _vDir$[ebp], xmm0
  0015d	f3 0f 11 4d e8	 movss	 DWORD PTR _vDir$[ebp+4], xmm1
  00162	f3 0f 11 55 ec	 movss	 DWORD PTR _vDir$[ebp+8], xmm2
  00167	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit

; 150  : 
; 151  : 	/*if( bSend )
; 152  : 	{
; 153  : 	SP2Packet kPacket( CUPK_APPLY_EXTRA_BUFF_INFO );
; 154  : 	kPacket << m_pOwner->GetCharName();
; 155  : 	kPacket << GetName();
; 156  : 	kPacket << true;
; 157  : 
; 158  : 	P2PNetwork::SendToAllPlayingUser( kPacket );
; 159  : 	}*/
; 160  : }

  0016c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00170	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00176	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN3@CreateWeap:
  0017b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00180	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__ehhandler$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z ENDP		; ioSkillAttackBuff::CreateWeapon
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ; ioINILoader::LoadInt_e<16>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<16>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadInt_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadInt_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadInt_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadInt_e
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadInt_e
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadInt_e
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadInt_e
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadInt_e
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadInt_e
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadInt_e
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadInt_e
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadInt_e:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadInt_e
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadInt_e:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadInt_e
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadInt_e:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  001e6	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e9	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ec	50		 push	 eax
  001ed	8b ce		 mov	 ecx, esi
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5e		 pop	 esi
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	c9		 leave
  00201	c2 08 00	 ret	 8
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<16>
_TEXT	ENDS
PUBLIC	??_C@_0BH@HBMHONHJ@call_creator_buff_name?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BH@HBMHONHJ@call_creator_buff_name?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0BH@HBMHONHJ@call_creator_buff_name?$AA@ DB 'call_creator_buff_name'
	DB	00H						; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillattackbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioSkillAttackBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -284						; size = 260
__k$551150 = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioSkillAttackBuff@@UAEXAAVioINILoader@@@Z PROC ; ioSkillAttackBuff::LoadProperty, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00017	57		 push	 edi

; 28   : 	ioBuff::LoadProperty( rkLoader );

  00018	56		 push	 esi
  00019	8b f9		 mov	 edi, ecx
  0001b	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 29   : 
; 30   : 	char szKey[MAX_PATH] = "";
; 31   : 	char szBuf[MAX_PATH] = "";

  00020	68 03 01 00 00	 push	 259			; 00000103H
  00025	8d 85 e5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  0002b	6a 00		 push	 0
  0002d	50		 push	 eax
  0002e	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  00035	e8 00 00 00 00	 call	 _memset
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	m_nCallWeapon	= rkLoader.LoadInt_e( "call_weapon_idx", 0 );

  0003d	6a 03		 push	 3
  0003f	c7 45 e8 8e 8d
	87 86		 mov	 DWORD PTR __k$551150[ebp], -2037936754 ; 86878d8eH
  00046	c7 45 ec b2 9b
	8e 8b		 mov	 DWORD PTR __k$551150[ebp+4], -1953588302 ; 8b8e9bb2H
  0004d	c7 45 f0 9d 83
	85 b5		 mov	 DWORD PTR __k$551150[ebp+8], -1249541219 ; b585839dH
  00054	8d 45 e8	 lea	 eax, DWORD PTR __k$551150[ebp]
  00057	c7 45 f4 84 88
	93 00		 mov	 DWORD PTR __k$551150[ebp+12], 9668740 ; 00938884H
  0005e	59		 pop	 ecx
$LL106@LoadProper:
  0005f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00065	83 c0 04	 add	 eax, 4
  00068	49		 dec	 ecx
  00069	75 f4		 jne	 SHORT $LL106@LoadProper
  0006b	6a 0c		 push	 12			; 0000000cH
  0006d	58		 pop	 eax
$LL103@LoadProper:
  0006e	8b c8		 mov	 ecx, eax
  00070	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00076	79 05		 jns	 SHORT $LN113@LoadProper
  00078	49		 dec	 ecx
  00079	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0007c	41		 inc	 ecx
$LN113@LoadProper:
  0007d	b2 ed		 mov	 dl, -19			; ffffffedH
  0007f	2a d1		 sub	 dl, cl
  00081	30 54 05 e8	 xor	 BYTE PTR __k$551150[ebp+eax], dl
  00085	40		 inc	 eax
  00086	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00089	7c e3		 jl	 SHORT $LL103@LoadProper
  0008b	6a 00		 push	 0
  0008d	8d 45 e8	 lea	 eax, DWORD PTR __k$551150[ebp]
  00090	50		 push	 eax
  00091	8b ce		 mov	 ecx, esi
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 34   : 	rkLoader.LoadString( "call_creator_buff_name", "", szBuf, MAX_PATH );

  00099	68 04 01 00 00	 push	 260			; 00000104H
  0009e	89 87 6c 09 00
	00		 mov	 DWORD PTR [edi+2412], eax
  000a4	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000aa	50		 push	 eax
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HBMHONHJ@call_creator_buff_name?$AA@
  000b5	8b ce		 mov	 ecx, esi
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 35   : 	m_stCreatorAddBuff = szBuf;

  000bd	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000c3	50		 push	 eax
  000c4	8d 8f 70 09 00
	00		 lea	 ecx, DWORD PTR [edi+2416]
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 36   : }

  000d0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d3	5f		 pop	 edi
  000d4	33 cd		 xor	 ecx, ebp
  000d6	5e		 pop	 esi
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	c9		 leave
  000dd	c2 04 00	 ret	 4
?LoadProperty@ioSkillAttackBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioSkillAttackBuff::LoadProperty
_TEXT	ENDS
EXTRN	?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z:PROC ; ioBaseChar::AddNewBuff
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?SetCurSkillGauge@ioItem@@QAEXM@Z:PROC		; ioItem::SetCurSkillGauge
EXTRN	?GetEquipedSkill@ioBaseChar@@QAEPAVioSkill@@H@Z:PROC ; ioBaseChar::GetEquipedSkill
EXTRN	?GetEquipedItem@ioBaseChar@@QAEPAVioItem@@H@Z:PROC ; ioBaseChar::GetEquipedItem
EXTRN	?GetCurActiveSkill@ioBaseChar@@QAEPAVioSkill@@XZ:PROC ; ioBaseChar::GetCurActiveSkill
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z$0
__ehfuncinfo$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillattackbuff.cpp
xdata$x	ENDS
;	COMDAT ?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z
_TEXT	SEGMENT
$T551257 = -40						; size = 16
_value$551273 = -24					; size = 4
_pCreator$ = -24					; size = 4
_pActiveSkill$550220 = -20				; size = 4
_pItem$550226 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z PROC		; ioSkillAttackBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 58   : {

  00000	6a 1c		 push	 28			; 0000001cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 59   : 	if( GetOwner() == NULL )

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner

; 60   : 	{
; 61   : 		SetReserveEndBuff();

  00013	8b cf		 mov	 ecx, edi
  00015	85 c0		 test	 eax, eax

; 62   : 		return;

  00017	0f 84 f9 00 00
	00		 je	 $LN28@ProcessBuf

; 63   : 	}
; 64   : 
; 65   : 	ioBaseChar* pOwner = GetOwner();

  0001d	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00022	8b f0		 mov	 esi, eax

; 66   : 
; 67   : 	ioBaseChar *pCreator = GetOwner()->GetBaseChar( m_CreateChar );

  00024	8d 87 88 02 00
	00		 lea	 eax, DWORD PTR [edi+648]
  0002a	50		 push	 eax
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar

; 68   : 	if( pCreator == NULL )

  00039	33 db		 xor	 ebx, ebx
  0003b	89 45 e8	 mov	 DWORD PTR _pCreator$[ebp], eax
  0003e	3b c3		 cmp	 eax, ebx

; 69   : 	{
; 70   : 		SetReserveEndBuff();
; 71   : 		return;

  00040	0f 84 ce 00 00
	00		 je	 $LN29@ProcessBuf

; 72   : 	}
; 73   : 
; 74   : 	ioPlayStage *pStage = pOwner->GetCreator();
; 75   : 	if( pStage == NULL )

  00046	39 9e 44 03 00
	00		 cmp	 DWORD PTR [esi+836], ebx

; 76   : 	{
; 77   : 		SetReserveEndBuff();
; 78   : 		return;

  0004c	0f 84 c2 00 00
	00		 je	 $LN29@ProcessBuf

; 79   : 	}
; 80   : 
; 81   : 	if( pOwner->GetState() == CS_USING_SKILL )

  00052	80 be 10 03 00
	00 07		 cmp	 BYTE PTR [esi+784], 7
  00059	0f 85 91 00 00
	00		 jne	 $LN9@ProcessBuf

; 82   : 	{
; 83   : 		ioSkill* pActiveSkill = pOwner->GetCurActiveSkill();

  0005f	8b ce		 mov	 ecx, esi
  00061	e8 00 00 00 00	 call	 ?GetCurActiveSkill@ioBaseChar@@QAEPAVioSkill@@XZ ; ioBaseChar::GetCurActiveSkill
  00066	89 45 ec	 mov	 DWORD PTR _pActiveSkill$550220[ebp], eax

; 84   : 		if( pActiveSkill )

  00069	3b c3		 cmp	 eax, ebx
  0006b	0f 84 a3 00 00
	00		 je	 $LN29@ProcessBuf
$LL7@ProcessBuf:

; 87   : 			{
; 88   : 				ioItem *pItem = pOwner->GetEquipedItem( iSlot );

  00071	53		 push	 ebx
  00072	8b ce		 mov	 ecx, esi
  00074	e8 00 00 00 00	 call	 ?GetEquipedItem@ioBaseChar@@QAEPAVioItem@@H@Z ; ioBaseChar::GetEquipedItem

; 89   : 				ioSkill *pSkill = pOwner->GetEquipedSkill( iSlot );

  00079	53		 push	 ebx
  0007a	8b ce		 mov	 ecx, esi
  0007c	89 45 f0	 mov	 DWORD PTR _pItem$550226[ebp], eax
  0007f	e8 00 00 00 00	 call	 ?GetEquipedSkill@ioBaseChar@@QAEPAVioSkill@@H@Z ; ioBaseChar::GetEquipedSkill

; 90   : 				if( !pItem || !pSkill )

  00084	8b 4d f0	 mov	 ecx, DWORD PTR _pItem$550226[ebp]
  00087	85 c9		 test	 ecx, ecx
  00089	74 09		 je	 SHORT $LN6@ProcessBuf
  0008b	85 c0		 test	 eax, eax
  0008d	74 05		 je	 SHORT $LN6@ProcessBuf

; 91   : 					continue;
; 92   : 
; 93   : 				if( pSkill == pActiveSkill )

  0008f	3b 45 ec	 cmp	 eax, DWORD PTR _pActiveSkill$550220[ebp]
  00092	74 08		 je	 SHORT $LN25@ProcessBuf
$LN6@ProcessBuf:

; 85   : 		{
; 86   : 			for( int iSlot = 0; iSlot < 4; iSlot++ )

  00094	43		 inc	 ebx
  00095	83 fb 04	 cmp	 ebx, 4
  00098	7c d7		 jl	 SHORT $LL7@ProcessBuf

; 91   : 					continue;
; 92   : 
; 93   : 				if( pSkill == pActiveSkill )

  0009a	eb 0e		 jmp	 SHORT $LN5@ProcessBuf
$LN25@ProcessBuf:

; 94   : 				{
; 95   : 					pItem->SetCurSkillGauge( 0.f );

  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	51		 push	 ecx
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	e8 00 00 00 00	 call	 ?SetCurSkillGauge@ioItem@@QAEXM@Z ; ioItem::SetCurSkillGauge
$LN5@ProcessBuf:

; 96   : 					break;
; 97   : 				}
; 98   : 
; 99   : 			}
; 100  : 
; 101  : 			//pCreator->ReserveAddNewBuff( m_stCreatorAddBuff, pCreator->GetCharName(), "", NULL );
; 102  : 			pCreator->AddNewBuff( m_stCreatorAddBuff, pCreator->GetCharName(), "", NULL );

  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000af	8d 4d d8	 lea	 ecx, DWORD PTR $T551257[ebp]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000b8	8b 4d e8	 mov	 ecx, DWORD PTR _pCreator$[ebp]
  000bb	33 f6		 xor	 esi, esi
  000bd	56		 push	 esi
  000be	56		 push	 esi
  000bf	8d 45 d8	 lea	 eax, DWORD PTR $T551257[ebp]
  000c2	50		 push	 eax
  000c3	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  000c9	50		 push	 eax
  000ca	8d 87 70 09 00
	00		 lea	 eax, DWORD PTR [edi+2416]
  000d0	50		 push	 eax
  000d1	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  000d4	e8 00 00 00 00	 call	 ?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z ; ioBaseChar::AddNewBuff
  000d9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000dd	8d 4d d8	 lea	 ecx, DWORD PTR $T551257[ebp]
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 103  : 			CreateWeapon(false);

  000e6	56		 push	 esi
  000e7	8b cf		 mov	 ecx, edi
  000e9	e8 00 00 00 00	 call	 ?CreateWeapon@ioSkillAttackBuff@@IAEX_N@Z ; ioSkillAttackBuff::CreateWeapon

; 104  : 		}
; 105  : 		
; 106  : 		SetReserveEndBuff();
; 107  : 		return;

  000ee	eb 24		 jmp	 SHORT $LN29@ProcessBuf
$LN9@ProcessBuf:

; 108  : 	}
; 109  : 
; 110  : 	if( m_dwBuffEndTime < FRAMEGETTIME() )

  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000f6	8b c8		 mov	 ecx, eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000fe	8b f0		 mov	 esi, eax
  00100	8d 45 e8	 lea	 eax, DWORD PTR _value$551273[ebp]
  00103	50		 push	 eax
  00104	8d 8f 9c 03 00
	00		 lea	 ecx, DWORD PTR [edi+924]
  0010a	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0010f	39 75 e8	 cmp	 DWORD PTR _value$551273[ebp], esi
  00112	73 07		 jae	 SHORT $LN1@ProcessBuf
$LN29@ProcessBuf:

; 111  : 		SetReserveEndBuff();

  00114	8b cf		 mov	 ecx, edi
$LN28@ProcessBuf:
  00116	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessBuf:

; 112  : }

  0011b	e8 00 00 00 00	 call	 __EH_epilog3
  00120	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T551257[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessBuff@ioSkillAttackBuff@@UAEXM@Z ENDP		; ioSkillAttackBuff::ProcessBuff
END
