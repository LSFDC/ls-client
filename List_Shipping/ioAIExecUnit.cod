; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAIExecUnit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_13CIFDLIMG@?$AAw?$AA?$AA@			; `string'
PUBLIC	??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_13KHDBCPJB@?$AAs?$AA?$AA@			; `string'
PUBLIC	??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_13GKPPEALH@?$AAd?$AA?$AA@			; `string'
PUBLIC	??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_06BAPHGFFK@xdigit?$AA@			; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	??_C@_05OLNILLAB@space?$AA@			; `string'
PUBLIC	??_C@_05KOBGHFJJ@punct?$AA@			; `string'
PUBLIC	??_C@_05IJDJACGD@print?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_05KCJBMLII@graph?$AA@			; `string'
PUBLIC	??_C@_05ODNOIFML@digit?$AA@			; `string'
PUBLIC	??_C@_01LPLHEDKD@d?$AA@				; `string'
PUBLIC	??_C@_05JMDPEFNK@cntrl?$AA@			; `string'
PUBLIC	??_C@_05BABJKOGB@blank?$AA@			; `string'
PUBLIC	??_C@_05IAEKHIAN@alpha?$AA@			; `string'
PUBLIC	??_C@_05IIMHCHIO@alnum?$AA@			; `string'
PUBLIC	?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B ; std::tr1::_Regex_traits<char>::_Names
PUBLIC	?_Names@?$_Regex_traits@_W@tr1@std@@0QBU?$_Cl_names@_W@23@B ; std::tr1::_Regex_traits<wchar_t>::_Names
;	COMDAT ?_Names@?$_Regex_traits@_W@tr1@std@@0QBU?$_Cl_names@_W@23@B
CONST	SEGMENT
?_Names@?$_Regex_traits@_W@tr1@std@@0QBU?$_Cl_names@_W@23@B DD FLAT:??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@ ; std::tr1::_Regex_traits<wchar_t>::_Names
	DD	05H
	DW	0107H
	ORG $+2
	DD	FLAT:??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@
	DD	05H
	DW	0103H
	ORG $+2
	DD	FLAT:??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@
	DD	05H
	DW	020H
	ORG $+2
	DD	FLAT:??_C@_13GKPPEALH@?$AAd?$AA?$AA@
	DD	01H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
	DD	05H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@
	DD	05H
	DW	0117H
	ORG $+2
	DD	FLAT:??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@
	DD	05H
	DW	02H
	ORG $+2
	DD	FLAT:??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@
	DD	05H
	DW	01d7H
	ORG $+2
	DD	FLAT:??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@
	DD	05H
	DW	010H
	ORG $+2
	DD	FLAT:??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	DD	01H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@
	DD	05H
	DW	01H
	ORG $+2
	DD	FLAT:??_C@_13CIFDLIMG@?$AAw?$AA?$AA@
	DD	01H
	DW	0ffffH
	ORG $+2
	DD	FLAT:??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
	DD	06H
	DW	080H
	ORG $+2
	DD	00H
	DD	00H
	DW	00H
	ORG $+2
CONST	ENDS
;	COMDAT ??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ DB 'x', 00H, 'd'
	DB	00H, 'i', 00H, 'g', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13CIFDLIMG@?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_13CIFDLIMG@?$AAw?$AA?$AA@ DB 'w', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@ DB 'u', 00H, 'p', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_13KHDBCPJB@?$AAs?$AA?$AA@ DB 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@ DB 's', 00H, 'p', 00H
	DB	'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@ DB 'p', 00H, 'u', 00H
	DB	'n', 00H, 'c', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@ DB 'p', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@ DB 'l', 00H, 'o', 00H
	DB	'w', 00H, 'e', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@ DB 'g', 00H, 'r', 00H
	DB	'a', 00H, 'p', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ DB 'd', 00H, 'i', 00H
	DB	'g', 00H, 'i', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13GKPPEALH@?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_13GKPPEALH@?$AAd?$AA?$AA@ DB 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@ DB 'c', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@ DB 'b', 00H, 'l', 00H
	DB	'a', 00H, 'n', 00H, 'k', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@ DB 'a', 00H, 'l', 00H
	DB	'p', 00H, 'h', 00H, 'a', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@ DB 'a', 00H, 'l', 00H
	DB	'n', 00H, 'u', 00H, 'm', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B
CONST	SEGMENT
?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B DD FLAT:??_C@_05IIMHCHIO@alnum?$AA@ ; std::tr1::_Regex_traits<char>::_Names
	DD	05H
	DW	0107H
	ORG $+2
	DD	FLAT:??_C@_05IAEKHIAN@alpha?$AA@
	DD	05H
	DW	0103H
	ORG $+2
	DD	FLAT:??_C@_05BABJKOGB@blank?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_05JMDPEFNK@cntrl?$AA@
	DD	05H
	DW	020H
	ORG $+2
	DD	FLAT:??_C@_01LPLHEDKD@d?$AA@
	DD	01H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_05ODNOIFML@digit?$AA@
	DD	05H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_05KCJBMLII@graph?$AA@
	DD	05H
	DW	0117H
	ORG $+2
	DD	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DD	05H
	DW	02H
	ORG $+2
	DD	FLAT:??_C@_05IJDJACGD@print?$AA@
	DD	05H
	DW	01d7H
	ORG $+2
	DD	FLAT:??_C@_05KOBGHFJJ@punct?$AA@
	DD	05H
	DW	010H
	ORG $+2
	DD	FLAT:??_C@_05OLNILLAB@space?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_01LKDEMHDF@s?$AA@
	DD	01H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DD	05H
	DW	01H
	ORG $+2
	DD	FLAT:??_C@_01NOFIACDB@w?$AA@
	DD	01H
	DW	0ffffH
	ORG $+2
	DD	FLAT:??_C@_06BAPHGFFK@xdigit?$AA@
	DD	06H
	DW	080H
	ORG $+2
	DD	00H
	DD	00H
	DW	00H
	ORG $+2
CONST	ENDS
;	COMDAT ??_C@_06BAPHGFFK@xdigit?$AA@
CONST	SEGMENT
??_C@_06BAPHGFFK@xdigit?$AA@ DB 'xdigit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLNILLAB@space?$AA@
CONST	SEGMENT
??_C@_05OLNILLAB@space?$AA@ DB 'space', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOBGHFJJ@punct?$AA@
CONST	SEGMENT
??_C@_05KOBGHFJJ@punct?$AA@ DB 'punct', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print?$AA@
CONST	SEGMENT
??_C@_05IJDJACGD@print?$AA@ DB 'print', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCJBMLII@graph?$AA@
CONST	SEGMENT
??_C@_05KCJBMLII@graph?$AA@ DB 'graph', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODNOIFML@digit?$AA@
CONST	SEGMENT
??_C@_05ODNOIFML@digit?$AA@ DB 'digit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LPLHEDKD@d?$AA@
CONST	SEGMENT
??_C@_01LPLHEDKD@d?$AA@ DB 'd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMDPEFNK@cntrl?$AA@
CONST	SEGMENT
??_C@_05JMDPEFNK@cntrl?$AA@ DB 'cntrl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BABJKOGB@blank?$AA@
CONST	SEGMENT
??_C@_05BABJKOGB@blank?$AA@ DB 'blank', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAEKHIAN@alpha?$AA@
CONST	SEGMENT
??_C@_05IAEKHIAN@alpha?$AA@ DB 'alpha', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IIMHCHIO@alnum?$AA@
CONST	SEGMENT
??_C@_05IIMHCHIO@alnum?$AA@ DB 'alnum', 00H		; `string'
CONST	ENDS
PUBLIC	?GetType@ioAIBaseExecElem@@QAE?AW4AIExecElemType@@XZ ; ioAIBaseExecElem::GetType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaibaseexecelem.h
;	COMDAT ?GetType@ioAIBaseExecElem@@QAE?AW4AIExecElemType@@XZ
_TEXT	SEGMENT
?GetType@ioAIBaseExecElem@@QAE?AW4AIExecElemType@@XZ PROC ; ioAIBaseExecElem::GetType, COMDAT
; _this$ = ecx

; 16   : 	AIExecElemType	GetType()			{	return m_Type;			}

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetType@ioAIBaseExecElem@@QAE?AW4AIExecElemType@@XZ ENDP ; ioAIBaseExecElem::GetType
_TEXT	ENDS
PUBLIC	?GetLastResult@ioAIBaseExecElem@@QAE_NXZ	; ioAIBaseExecElem::GetLastResult
; Function compile flags: /Ogsp
;	COMDAT ?GetLastResult@ioAIBaseExecElem@@QAE_NXZ
_TEXT	SEGMENT
?GetLastResult@ioAIBaseExecElem@@QAE_NXZ PROC		; ioAIBaseExecElem::GetLastResult, COMDAT
; _this$ = ecx

; 19   : 	bool			GetLastResult()		{	return m_bLastResult;	}

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]
  00003	c3		 ret	 0
?GetLastResult@ioAIBaseExecElem@@QAE_NXZ ENDP		; ioAIBaseExecElem::GetLastResult
_TEXT	ENDS
PUBLIC	?IsRunning@ioAITimer@@QAE_NXZ			; ioAITimer::IsRunning
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaitimer.h
;	COMDAT ?IsRunning@ioAITimer@@QAE_NXZ
_TEXT	SEGMENT
?IsRunning@ioAITimer@@QAE_NXZ PROC			; ioAITimer::IsRunning, COMDAT
; _this$ = ecx

; 16   : 	bool	IsRunning()	{	return (m_nStartTimeStamp != 0);	}

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 95 c0	 setne	 al
  00008	c3		 ret	 0
?IsRunning@ioAITimer@@QAE_NXZ ENDP			; ioAITimer::IsRunning
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??_7ioAIExecUnit@@6B@				; ioAIExecUnit::`vftable'
PUBLIC	??1ioAIExecUnit@@QAE@XZ				; ioAIExecUnit::~ioAIExecUnit
PUBLIC	??_R4ioAIExecUnit@@6B@				; ioAIExecUnit::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAIExecUnit@@@8			; ioAIExecUnit `RTTI Type Descriptor'
PUBLIC	??_R3ioAIExecUnit@@8				; ioAIExecUnit::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAIExecUnit@@8				; ioAIExecUnit::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAIExecUnit@@8			; ioAIExecUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Execute@ioAIExecUnit@@UAE_NAAPAVioBaseChar@@PAVioChampionAI@@@Z ; ioAIExecUnit::Execute
;	COMDAT ??_R1A@?0A@EA@ioAIExecUnit@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaiexecunit.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAIExecUnit@@8 DD FLAT:??_R0?AVioAIExecUnit@@@8 ; ioAIExecUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAIExecUnit@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAIExecUnit@@8
rdata$r	SEGMENT
??_R2ioAIExecUnit@@8 DD FLAT:??_R1A@?0A@EA@ioAIExecUnit@@8 ; ioAIExecUnit::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioAIExecUnit@@8
rdata$r	SEGMENT
??_R3ioAIExecUnit@@8 DD 00H				; ioAIExecUnit::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioAIExecUnit@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAIExecUnit@@@8
_DATA	SEGMENT
??_R0?AVioAIExecUnit@@@8 DD FLAT:??_7type_info@@6B@	; ioAIExecUnit `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAIExecUnit@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAIExecUnit@@6B@
rdata$r	SEGMENT
??_R4ioAIExecUnit@@6B@ DD 00H				; ioAIExecUnit::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAIExecUnit@@@8
	DD	FLAT:??_R3ioAIExecUnit@@8
rdata$r	ENDS
;	COMDAT ??_7ioAIExecUnit@@6B@
CONST	SEGMENT
??_7ioAIExecUnit@@6B@ DD FLAT:??_R4ioAIExecUnit@@6B@	; ioAIExecUnit::`vftable'
	DD	FLAT:?Execute@ioAIExecUnit@@UAE_NAAPAVioBaseChar@@PAVioChampionAI@@@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1ioAIExecUnit@@QAE@XZ
_TEXT	SEGMENT
??1ioAIExecUnit@@QAE@XZ PROC				; ioAIExecUnit::~ioAIExecUnit, COMDAT
; _this$ = ecx

; 56   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 57   : 	SAFEDELETE(m_pElem); 

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAIExecUnit@@6B@
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 0a		 je	 SHORT $LN1@ioAIExecUn
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]
  00012	6a 01		 push	 1
  00014	ff 10		 call	 DWORD PTR [eax]
  00016	83 66 04 00	 and	 DWORD PTR [esi+4], 0
$LN1@ioAIExecUn:
  0001a	5e		 pop	 esi

; 58   : }

  0001b	c3		 ret	 0
??1ioAIExecUnit@@QAE@XZ ENDP				; ioAIExecUnit::~ioAIExecUnit
_TEXT	ENDS
EXTRN	?GetPollingTimer@ioChampionAI@@QAEPAVioAITimer@@XZ:PROC ; ioChampionAI::GetPollingTimer
; Function compile flags: /Ogsp
;	COMDAT ?Execute@ioAIExecUnit@@UAE_NAAPAVioBaseChar@@PAVioChampionAI@@@Z
_TEXT	SEGMENT
_pTarget$ = 8						; size = 4
_pCAI$ = 12						; size = 4
?Execute@ioAIExecUnit@@UAE_NAAPAVioBaseChar@@PAVioChampionAI@@@Z PROC ; ioAIExecUnit::Execute, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 62   : 	bool bResult = false;
; 63   : 	if( m_pElem )

  00007	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000a	32 db		 xor	 bl, bl
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 49		 je	 SHORT $LN4@Execute

; 64   : 	{
; 65   : 		bResult = m_pElem->Execute( pTarget, pCAI );

  00010	ff 75 0c	 push	 DWORD PTR _pCAI$[ebp]
  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	ff 75 08	 push	 DWORD PTR _pTarget$[ebp]
  00018	ff 50 08	 call	 DWORD PTR [eax+8]
  0001b	8a d8		 mov	 bl, al

; 66   : 
; 67   : 		// set holding 
; 68   : 		switch( m_pElem->GetType() )

  0001d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00020	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00023	83 e8 03	 sub	 eax, 3
  00026	74 2d		 je	 SHORT $LN1@Execute
  00028	48		 dec	 eax
  00029	48		 dec	 eax
  0002a	74 29		 je	 SHORT $LN1@Execute
  0002c	83 e8 03	 sub	 eax, 3
  0002f	74 24		 je	 SHORT $LN1@Execute
  00031	83 e8 04	 sub	 eax, 4
  00034	74 1f		 je	 SHORT $LN1@Execute
  00036	83 e8 03	 sub	 eax, 3
  00039	74 06		 je	 SHORT $LN2@Execute

; 69   : 		{
; 70   : 		default:
; 71   : 			m_bHold = false;

  0003b	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0

; 72   : 			break;

  0003f	eb 18		 jmp	 SHORT $LN4@Execute
$LN2@Execute:

; 73   : 		case AI_EXEC_TARGET_IsCurrentState:
; 74   : 			m_bHold = pCAI->GetPollingTimer()->IsRunning();

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _pCAI$[ebp]
  00044	e8 00 00 00 00	 call	 ?GetPollingTimer@ioChampionAI@@QAEPAVioAITimer@@XZ ; ioChampionAI::GetPollingTimer
  00049	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004d	0f 95 c0	 setne	 al
  00050	88 46 08	 mov	 BYTE PTR [esi+8], al

; 75   : 			break;

  00053	eb 04		 jmp	 SHORT $LN4@Execute
$LN1@Execute:

; 76   : 		case AI_EXEC_MYSELF_DoKeySeq:			
; 77   : 		case AI_EXEC_MYSELF_Move:	
; 78   : 		case AI_EXEC_MYSELF_Idle:	
; 79   : 		case AI_EXEC_MYSELF_WaitForCombo:
; 80   : 			m_bHold = true;

  00055	c6 46 08 01	 mov	 BYTE PTR [esi+8], 1
$LN4@Execute:
  00059	5e		 pop	 esi

; 81   : 			break;
; 82   : 		}
; 83   : 	}
; 84   : 
; 85   : 	return bResult;

  0005a	8a c3		 mov	 al, bl
  0005c	5b		 pop	 ebx

; 86   : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?Execute@ioAIExecUnit@@UAE_NAAPAVioBaseChar@@PAVioChampionAI@@@Z ENDP ; ioAIExecUnit::Execute
_TEXT	ENDS
PUBLIC	?GetLastResult@ioAIExecUnit@@QAE_NXZ		; ioAIExecUnit::GetLastResult
; Function compile flags: /Ogsp
;	COMDAT ?GetLastResult@ioAIExecUnit@@QAE_NXZ
_TEXT	SEGMENT
?GetLastResult@ioAIExecUnit@@QAE_NXZ PROC		; ioAIExecUnit::GetLastResult, COMDAT
; _this$ = ecx

; 90   : 	if( m_pElem != (ioAIBaseExecElem*)0 )

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 04		 je	 SHORT $LN2@GetLastRes

; 91   : 	{
; 92   : 		return m_pElem->GetLastResult();

  00007	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 95   : }

  0000a	c3		 ret	 0
$LN2@GetLastRes:

; 93   : 	}
; 94   : 	else return false;

  0000b	32 c0		 xor	 al, al

; 95   : }

  0000d	c3		 ret	 0
?GetLastResult@ioAIExecUnit@@QAE_NXZ ENDP		; ioAIExecUnit::GetLastResult
_TEXT	ENDS
PUBLIC	?base@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::base
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?base@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?base@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::base, COMDAT
; _this$ = ecx

; 1038 : 		{	// return wrapped iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1039 : 		return (current);

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1040 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?base@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::base
_TEXT	ENDS
PUBLIC	??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >, COMDAT
; _this$ = ecx

; 1027 : 		{	// construct wrapped iterator from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1028 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
_TEXT	ENDS
PUBLIC	??0?$pointer_to_unary_function@HHP6AHH@Z@std@@QAE@P6AHH@Z@Z ; std::pointer_to_unary_function<int,int,int (__cdecl*)(int)>::pointer_to_unary_function<int,int,int (__cdecl*)(int)>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??0?$pointer_to_unary_function@HHP6AHH@Z@std@@QAE@P6AHH@Z@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
??0?$pointer_to_unary_function@HHP6AHH@Z@std@@QAE@P6AHH@Z@Z PROC ; std::pointer_to_unary_function<int,int,int (__cdecl*)(int)>::pointer_to_unary_function<int,int,int (__cdecl*)(int)>, COMDAT
; _this$ = ecx

; 369  : 		{	// construct from pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 370  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$pointer_to_unary_function@HHP6AHH@Z@std@@QAE@P6AHH@Z@Z ENDP ; std::pointer_to_unary_function<int,int,int (__cdecl*)(int)>::pointer_to_unary_function<int,int,int (__cdecl*)(int)>
_TEXT	ENDS
PUBLIC	??0?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QAE@ABV?$pointer_to_unary_function@HHP6AHH@Z@1@@Z ; std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QAE@ABV?$pointer_to_unary_function@HHP6AHH@Z@1@@Z
_TEXT	SEGMENT
__Func$ = 8						; size = 4
??0?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QAE@ABV?$pointer_to_unary_function@HHP6AHH@Z@1@@Z PROC ; std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from functor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Func$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 228  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??0?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QAE@ABV?$pointer_to_unary_function@HHP6AHH@Z@1@@Z ENDP ; std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@@Z ; std::_Unchecked<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Unchecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Src$ = 12						; size = 4
??$_Unchecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@@Z PROC ; std::_Unchecked<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 268  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Unchecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@@Z ENDP ; std::_Unchecked<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Rechecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V12@@std@@YAAAV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@V10@@Z ; std::_Rechecked<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Rechecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V12@@std@@YAAAV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@V10@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V12@@std@@YAAAV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@V10@@Z PROC ; std::_Rechecked<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 274  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 275  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 276  : 	return (_Dest);
; 277  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V12@@std@@YAAAV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@V10@@Z ENDP ; std::_Rechecked<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?_Rechecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PAD@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_Rechecked
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Rechecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PAD@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Rechecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PAD@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_Rechecked, COMDAT
; _this$ = ecx

; 331  : 		{	// reset from unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 332  : 		this->_Ptr = _Right;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 333  : 		return (*this);
; 334  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Rechecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PAD@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_Rechecked
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_Unchecked
; Function compile flags: /Ogsp
;	COMDAT ?_Unchecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPADXZ
_TEXT	SEGMENT
?_Unchecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPADXZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_Unchecked, COMDAT
; _this$ = ecx

; 338  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 339  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPADXZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_Unchecked
_TEXT	ENDS
PUBLIC	??R?$pointer_to_unary_function@HHP6AHH@Z@std@@QBEHH@Z ; std::pointer_to_unary_function<int,int,int (__cdecl*)(int)>::operator()
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$pointer_to_unary_function@HHP6AHH@Z@std@@QBEHH@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
??R?$pointer_to_unary_function@HHP6AHH@Z@std@@QBEHH@Z PROC ; std::pointer_to_unary_function<int,int,int (__cdecl*)(int)>::operator(), COMDAT
; _this$ = ecx

; 373  : 		{	// call function with operand

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 374  : 		return (_Pfun(_Left));

  00003	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00006	ff 11		 call	 DWORD PTR [ecx]
  00008	59		 pop	 ecx

; 375  : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??R?$pointer_to_unary_function@HHP6AHH@Z@std@@QBEHH@Z ENDP ; std::pointer_to_unary_function<int,int,int (__cdecl*)(int)>::operator()
_TEXT	ENDS
PUBLIC	??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--, COMDAT
; _this$ = ecx

; 131  : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 132  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 133  : 		if (this->_Getcont() == 0
; 134  : 			|| this->_Ptr == 0
; 135  : 			|| this->_Ptr <= ((_Mystr *)this->_Getcont())->_Myptr())
; 136  : 			{	// report error
; 137  : 			_DEBUG_ERROR("string iterator not decrementable");
; 138  : 			_SCL_SECURE_OUT_OF_RANGE;
; 139  : 			}
; 140  : 
; 141  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 142  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 143  : 		_SCL_SECURE_VALIDATE_RANGE(
; 144  : 			((_Mystr *)this->_Getcont())->_Myptr() < this->_Ptr);
; 145  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 146  : 
; 147  : 		--this->_Ptr;

  00002	ff 08		 dec	 DWORD PTR [eax]

; 148  : 		return (*this);
; 149  : 		}

  00004	c3		 ret	 0
??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 71   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 72   : 		if (this->_Getcont() == 0
; 73   : 			|| this->_Ptr == 0
; 74   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 75   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 77   : 			{	// report error
; 78   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 79   : 			_SCL_SECURE_OUT_OF_RANGE;
; 80   : 			}
; 81   : 
; 82   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 83   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 84   : 		_SCL_SECURE_VALIDATE_RANGE(
; 85   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 86   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 87   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 88   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 89   : 
; 90   : 		__analysis_assume(this->_Ptr != 0);
; 91   : 
; 92   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 93   : 		}

  00002	c3		 ret	 0
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1906 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1907 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1908 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 50   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 51   : 		{	// construct with pointer _Parg
; 52   : 		this->_Adopt(_Pstring);
; 53   : 		this->_Ptr = _Parg;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 54   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat, COMDAT
; _this$ = ecx

; 264  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T526513 = -12						; size = 12
$T526518 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T526518[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T526518[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T526513[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T526513[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T526513[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1249 : 		{	// construct wrapped iterator from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1250 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$ptr_fun@HH@std@@YA?AV?$pointer_to_unary_function@HHP6AHH@Z@0@P6AHH@Z@Z ; std::ptr_fun<int,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??$ptr_fun@HH@std@@YA?AV?$pointer_to_unary_function@HHP6AHH@Z@0@P6AHH@Z@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
??$ptr_fun@HH@std@@YA?AV?$pointer_to_unary_function@HHP6AHH@Z@0@P6AHH@Z@Z PROC ; std::ptr_fun<int,int>, COMDAT

; 410  : 	{	// return pointer_to_unary_function functor adapter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 411  : 	return (pointer_to_unary_function<_Arg, _Result,
; 412  : 		_Result (__cdecl *)(_Arg)>(_Left));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 413  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$ptr_fun@HH@std@@YA?AV?$pointer_to_unary_function@HHP6AHH@Z@0@P6AHH@Z@Z ENDP ; std::ptr_fun<int,int>
_TEXT	ENDS
PUBLIC	??$not1@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@YA?AV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@ABV?$pointer_to_unary_function@HHP6AHH@Z@0@@Z ; std::not1<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >
; Function compile flags: /Ogsp
;	COMDAT ??$not1@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@YA?AV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@ABV?$pointer_to_unary_function@HHP6AHH@Z@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Func$ = 12						; size = 4
??$not1@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@YA?AV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@ABV?$pointer_to_unary_function@HHP6AHH@Z@0@@Z PROC ; std::not1<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >, COMDAT

; 242  : 	{	// return a unary_negate functor adapter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 	return (_STD unary_negate<_Fn1>(_Func));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Func$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 244  : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$not1@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@YA?AV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@ABV?$pointer_to_unary_function@HHP6AHH@Z@0@@Z ENDP ; std::not1<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >
_TEXT	ENDS
PUBLIC	??$_Unchecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Unchecked<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??$_Unchecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Unchecked<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 416  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 418  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Unchecked<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Rechecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@PAD@Z ; std::_Rechecked<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Rechecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@PAD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Iter$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Rechecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@PAD@Z PROC ; std::_Rechecked<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 427  : 	{	// convert to checked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 	return (_Iter._Rechecked(_Right));

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Iter$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 429  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Rechecked@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@PAD@Z ENDP ; std::_Rechecked<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??R?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QBE_NABH@Z ; std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >::operator()
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QBE_NABH@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
??R?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QBE_NABH@Z PROC ; std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >::operator(), COMDAT
; _this$ = ecx

; 231  : 		{	// apply functor to operand

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 232  : 		return (!_Functor(_Left));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	ff 30		 push	 DWORD PTR [eax]
  00008	ff 11		 call	 DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	59		 pop	 ecx
  0000f	40		 inc	 eax

; 233  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??R?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@QBE_NABH@Z ENDP ; std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> >::operator()
_TEXT	ENDS
PUBLIC	??F?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??F?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--, COMDAT
; _this$ = ecx

; 365  : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 366  : 		--*(_Mybase *)this;

  00002	ff 08		 dec	 DWORD PTR [eax]

; 367  : 		return (*this);
; 368  : 		}

  00004	c3		 ret	 0
??F?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--
_TEXT	ENDS
PUBLIC	??E?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAEAAV01@XZ ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??E?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAEAAV01@XZ PROC ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::operator++, COMDAT
; _this$ = ecx

; 1054 : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 1055 : 		--current;

  00002	ff 08		 dec	 DWORD PTR [eax]

; 1056 : 		return (*this);
; 1057 : 		}

  00004	c3		 ret	 0
??E?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAEAAV01@XZ ENDP ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::operator++
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 343  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 344  : 		}

  00002	c3		 ret	 0
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 325  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 326  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx

; 201  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]

; 204  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==, COMDAT
; _this$ = ecx

; 212  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Compat(_Right);
; 214  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 215  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??$_Find_if@PADV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@@std@@YAPADPAD0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::_Find_if<char *,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Find_if@PADV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@@std@@YAPADPAD0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Find_if@PADV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@@std@@YAPADPAD0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z PROC ; std::_Find_if<char *,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >, COMDAT

; 81   : 	{	// find first satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 82   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0d		 jmp	 SHORT $LN14@Find_if
$LL4@Find_if:

; 83   : 		if (_Pred(*_First))

  00009	0f be 06	 movsx	 eax, BYTE PTR [esi]
  0000c	50		 push	 eax
  0000d	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  00010	59		 pop	 ecx
  00011	85 c0		 test	 eax, eax
  00013	74 06		 je	 SHORT $LN12@Find_if

; 82   : 	for (; _First != _Last; ++_First)

  00015	46		 inc	 esi
$LN14@Find_if:
  00016	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00019	75 ee		 jne	 SHORT $LL4@Find_if
$LN12@Find_if:

; 84   : 			break;
; 85   : 	return (_First);

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi

; 86   : 	}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Find_if@PADV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@@std@@YAPADPAD0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ENDP ; std::_Find_if<char *,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
_TEXT	ENDS
PUBLIC	??E?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEAAV01@XZ ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??E?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEAAV01@XZ PROC ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator++, COMDAT
; _this$ = ecx

; 1264 : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 1265 : 		++*((_Mybase *)this);

  00002	ff 08		 dec	 DWORD PTR [eax]

; 1266 : 		return (*this);
; 1267 : 		}

  00004	c3		 ret	 0
??E?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBEAADXZ ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBEAADXZ PROC ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::operator*, COMDAT
; _this$ = ecx

; 1044 : 		_RanIt _Tmp = current;
; 1045 : 		return (*--_Tmp);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	48		 dec	 eax

; 1046 : 		}

  00003	c3		 ret	 0
??D?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBEAADXZ ENDP ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::operator*
_TEXT	ENDS
PUBLIC	??$_Equal@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE_NABV01@@Z ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Equal<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Equal@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$_Equal@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE_NABV01@@Z PROC ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Equal<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >, COMDAT
; _this$ = ecx

; 1081 : 		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1082 : 		{	// test for iterator equality
; 1083 : 		return (current == _Right.base());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	33 d2		 xor	 edx, edx
  0000a	39 01		 cmp	 DWORD PTR [ecx], eax
  0000c	0f 94 c0	 sete	 al

; 1084 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??$_Equal@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QBE_NABV01@@Z ENDP ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Equal<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1351 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1352 : 		return (_STRING_ITERATOR(_Myptr()));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 02		 jb	 SHORT $LN5@begin
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@begin:
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1353 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1361 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1362 : 		return (_STRING_ITERATOR(_Myptr() + this->_Mysize));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 04		 jb	 SHORT $LN5@end
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	eb 02		 jmp	 SHORT $LN6@end
$LN5@end:
  0000d	8b c1		 mov	 eax, ecx
$LN6@end:
  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	03 c8		 add	 ecx, eax
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00017	89 08		 mov	 DWORD PTR [eax], ecx

; 1363 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
; Function compile flags: /Ogsp
;	COMDAT ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__P2$ = 8						; size = 4
__P1$ = 12						; size = 4
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif, COMDAT

; 1982 : 		{	// compute safe iterator difference

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1983 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00003	8b 45 08	 mov	 eax, DWORD PTR __P2$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 02		 jne	 SHORT $LN3@Pdif

; 1984 : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
$LN3@Pdif:

; 1983 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  0000c	2b 45 0c	 sub	 eax, DWORD PTR __P1$[ebp]

; 1984 : 		}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1132 : 		{	// erase substring [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1133 : 		size_type _Count = _Pdif(_First, begin());

  00006	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000a	57		 push	 edi
  0000b	72 04		 jb	 SHORT $LN7@erase@2
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	eb 02		 jmp	 SHORT $LN8@erase@2
$LN7@erase@2:
  00011	8b c6		 mov	 eax, esi
$LN8@erase@2:
  00013	83 7d 0c 00	 cmp	 DWORD PTR __First$[ebp], 0
  00017	75 04		 jne	 SHORT $LN17@erase@2
  00019	33 ff		 xor	 edi, edi
  0001b	eb 05		 jmp	 SHORT $LN18@erase@2
$LN17@erase@2:
  0001d	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  00020	2b f8		 sub	 edi, eax
$LN18@erase@2:

; 1134 : 		erase(_Count, _Pdif(_Last, _First));

  00022	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00025	85 c0		 test	 eax, eax
  00027	74 03		 je	 SHORT $LN26@erase@2
$LN25@erase@2:
  00029	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
$LN26@erase@2:
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1135 : 		return (_STRING_ITERATOR(_Myptr() + _Count));

  00033	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00037	72 02		 jb	 SHORT $LN33@erase@2
  00039	8b 36		 mov	 esi, DWORD PTR [esi]
$LN33@erase@2:
  0003b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003e	03 f7		 add	 esi, edi
  00040	5f		 pop	 edi
  00041	89 30		 mov	 DWORD PTR [eax], esi
  00043	5e		 pop	 esi

; 1136 : 		}

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin
; Function compile flags: /Ogsp
;	COMDAT ?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin, COMDAT
; _this$ = ecx

; 1371 : 		{	// return iterator for beginning of reversed mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1372 : 		return (reverse_iterator(end()));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 04		 jb	 SHORT $LN7@rbegin
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	eb 02		 jmp	 SHORT $LN8@rbegin
$LN7@rbegin:
  0000d	8b c1		 mov	 eax, ecx
$LN8@rbegin:
  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	03 c8		 add	 ecx, eax
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00017	89 08		 mov	 DWORD PTR [eax], ecx

; 1373 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin
_TEXT	ENDS
PUBLIC	?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend
; Function compile flags: /Ogsp
;	COMDAT ?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend, COMDAT
; _this$ = ecx

; 1381 : 		{	// return iterator for end of reversed mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1382 : 		return (reverse_iterator(begin()));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 02		 jb	 SHORT $LN7@rend
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@rend:
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1383 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend
_TEXT	ENDS
PUBLIC	??$find_if@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::find_if<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$find_if@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$find_if@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z PROC ; std::find_if<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >, COMDAT

; 91   : 	{	// find first satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : 	_DEBUG_RANGE(_First, _Last);
; 93   : 	_DEBUG_POINTER(_Pred);
; 94   : 	return (_Rechecked(_First,
; 95   : 		_Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));

  00003	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Find_if@PADV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@@std@@YAPADPAD0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::_Find_if<char *,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	89 01		 mov	 DWORD PTR [ecx], eax
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	8b c1		 mov	 eax, ecx

; 96   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$find_if@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ENDP ; std::find_if<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
_TEXT	ENDS
PUBLIC	??$?8V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ; std::operator==<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$?8V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z PROC ; std::operator==<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1342 : 	{	// test for reverse_iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1343 : 	return (_Left._Equal(_Right));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000b	33 c9		 xor	 ecx, ecx
  0000d	39 02		 cmp	 DWORD PTR [edx], eax
  0000f	0f 94 c0	 sete	 al

; 1344 : 	}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$?8V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ENDP ; std::operator==<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
EXTRN	__imp__isspace:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringext.h
;	COMDAT ?ltrim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z
_TEXT	SEGMENT
$T527368 = -4						; size = 4
?ltrim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z PROC ; ltrim, COMDAT
; _s$ = esi

; 7    : static inline std::string &ltrim(std::string &s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 8    :         s.erase(s.begin(), std::find_if(s.begin(), s.end(), std::not1(std::ptr_fun<int, int>(std::isspace))));

  00004	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00007	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000a	72 04		 jb	 SHORT $LN15@ltrim
  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	eb 02		 jmp	 SHORT $LN16@ltrim
$LN15@ltrim:
  00010	8b ce		 mov	 ecx, esi
$LN16@ltrim:
  00012	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00015	03 c1		 add	 eax, ecx
  00017	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001a	72 04		 jb	 SHORT $LN27@ltrim
  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	eb 02		 jmp	 SHORT $LN28@ltrim
$LN27@ltrim:
  00020	8b ce		 mov	 ecx, esi
$LN28@ltrim:
  00022	ff 35 00 00 00
	00		 push	 DWORD PTR __imp__isspace
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??$_Find_if@PADV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@@std@@YAPADPAD0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::_Find_if<char *,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00036	72 04		 jb	 SHORT $LN53@ltrim
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	eb 02		 jmp	 SHORT $LN54@ltrim
$LN53@ltrim:
  0003c	8b ce		 mov	 ecx, esi
$LN54@ltrim:
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	8d 45 fc	 lea	 eax, DWORD PTR $T527368[ebp]
  00043	50		 push	 eax
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 9    :         return s;

  0004b	8b c6		 mov	 eax, esi

; 10   : }

  0004d	c9		 leave
  0004e	c3		 ret	 0
?ltrim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z ENDP ; ltrim
_TEXT	ENDS
PUBLIC	??$?9V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ; std::operator!=<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$?9V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z PROC ; std::operator!=<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1350 : 	{	// test for reverse_iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1351 : 	return (!(_Left == _Right));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000b	33 c9		 xor	 ecx, ecx
  0000d	39 02		 cmp	 DWORD PTR [edx], eax
  0000f	0f 95 c0	 setne	 al

; 1352 : 	}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$?9V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ENDP ; std::operator!=<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::_Find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z PROC ; std::_Find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >, COMDAT

; 81   : 	{	// find first satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 82   : 	for (; _First != _Last; ++_First)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	eb 14		 jmp	 SHORT $LN45@Find_if@2
$LL13@Find_if@2:

; 83   : 		if (_Pred(*_First))

  00008	0f be 41 ff	 movsx	 eax, BYTE PTR [ecx-1]
  0000c	50		 push	 eax
  0000d	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00010	59		 pop	 ecx
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00014	85 c0		 test	 eax, eax
  00016	74 09		 je	 SHORT $LN42@Find_if@2

; 82   : 	for (; _First != _Last; ++_First)

  00018	49		 dec	 ecx
  00019	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
$LN45@Find_if@2:
  0001c	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0001f	75 e7		 jne	 SHORT $LL13@Find_if@2
$LN42@Find_if@2:

; 84   : 			break;
; 85   : 	return (_First);

  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00024	89 08		 mov	 DWORD PTR [eax], ecx

; 86   : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ENDP ; std::_Find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 887  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 888  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 889  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z
_TEXT	SEGMENT
$T527754 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z PROC ; std::find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >, COMDAT

; 91   : 	{	// find first satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 92   : 	_DEBUG_RANGE(_First, _Last);
; 93   : 	_DEBUG_POINTER(_Pred);
; 94   : 	return (_Rechecked(_First,
; 95   : 		_Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));

  00004	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00007	8d 45 fc	 lea	 eax, DWORD PTR $T527754[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??$_Find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::_Find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	83 c4 10	 add	 esp, 16			; 00000010H
  0001e	89 08		 mov	 DWORD PTR [eax], ecx

; 96   : 	}

  00020	c9		 leave
  00021	c3		 ret	 0
??$find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ENDP ; std::find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 763  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 764  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 765  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 3c		 je	 SHORT $LN3@assign@2

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 12		 jae	 SHORT $LN2@assign@2

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002d	eb 07		 jmp	 SHORT $LN1@assign@2
$LN2@assign@2:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00033	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@2:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Mysize = 0;

  00042	83 66 10 00	 and	 DWORD PTR [esi+16], 0

; 734  : 			_Right._Myres = 0;

  00046	83 66 14 00	 and	 DWORD PTR [esi+20], 0
$LN3@assign@2:

; 735  : 			}
; 736  : 		return (*this);

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 737  : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringext.h
_TEXT	ENDS
;	COMDAT ?rtrim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z
_TEXT	SEGMENT
$T527821 = -8						; size = 4
$T527819 = -4						; size = 4
?rtrim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z PROC ; rtrim, COMDAT
; _s$ = esi

; 13   : static inline std::string &rtrim(std::string &s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 14   :         s.erase(std::find_if(s.rbegin(), s.rend(), std::not1(std::ptr_fun<int, int>(std::isspace))).base(), s.end());

  00005	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00008	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000b	72 04		 jb	 SHORT $LN7@rtrim
  0000d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000f	eb 02		 jmp	 SHORT $LN8@rtrim
$LN7@rtrim:
  00011	8b ce		 mov	 ecx, esi
$LN8@rtrim:
  00013	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00016	53		 push	 ebx
  00017	57		 push	 edi
  00018	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  0001b	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001e	72 04		 jb	 SHORT $LN29@rtrim
  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00022	eb 02		 jmp	 SHORT $LN30@rtrim
$LN29@rtrim:
  00024	8b de		 mov	 ebx, esi
$LN30@rtrim:
  00026	83 fa 10	 cmp	 edx, 16			; 00000010H
  00029	72 04		 jb	 SHORT $LN47@rtrim
  0002b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002d	eb 02		 jmp	 SHORT $LN48@rtrim
$LN47@rtrim:
  0002f	8b ce		 mov	 ecx, esi
$LN48@rtrim:
  00031	ff 35 00 00 00
	00		 push	 DWORD PTR __imp__isspace
  00037	03 c1		 add	 eax, ecx
  00039	53		 push	 ebx
  0003a	50		 push	 eax
  0003b	8d 45 fc	 lea	 eax, DWORD PTR $T527819[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	57		 push	 edi
  0004a	50		 push	 eax
  0004b	8d 45 f8	 lea	 eax, DWORD PTR $T527821[ebp]
  0004e	50		 push	 eax
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00056	5f		 pop	 edi

; 15   :         return s;

  00057	8b c6		 mov	 eax, esi
  00059	5b		 pop	 ebx

; 16   : }

  0005a	c9		 leave
  0005b	c3		 ret	 0
?rtrim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z ENDP ; rtrim
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?trim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z
_TEXT	SEGMENT
$T528496 = -8						; size = 4
$T528217 = -8						; size = 4
$T528215 = -4						; size = 4
?trim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z PROC ; trim, COMDAT
; _s$ = esi

; 19   : static inline std::string &trim(std::string &s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	57		 push	 edi

; 20   :         return ltrim(rtrim(s));

  00006	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00009	83 ff 10	 cmp	 edi, 16			; 00000010H
  0000c	72 04		 jb	 SHORT $LN9@trim
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	eb 02		 jmp	 SHORT $LN10@trim
$LN9@trim:
  00012	8b ce		 mov	 ecx, esi
$LN10@trim:
  00014	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00017	53		 push	 ebx
  00018	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  0001b	83 ff 10	 cmp	 edi, 16			; 00000010H
  0001e	72 04		 jb	 SHORT $LN31@trim
  00020	8b 16		 mov	 edx, DWORD PTR [esi]
  00022	eb 02		 jmp	 SHORT $LN32@trim
$LN31@trim:
  00024	8b d6		 mov	 edx, esi
$LN32@trim:
  00026	83 ff 10	 cmp	 edi, 16			; 00000010H
  00029	72 04		 jb	 SHORT $LN49@trim
  0002b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002d	eb 02		 jmp	 SHORT $LN50@trim
$LN49@trim:
  0002f	8b ce		 mov	 ecx, esi
$LN50@trim:
  00031	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__isspace
  00037	57		 push	 edi
  00038	03 c1		 add	 eax, ecx
  0003a	52		 push	 edx
  0003b	50		 push	 eax
  0003c	8d 45 fc	 lea	 eax, DWORD PTR $T528215[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$find_if@V?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@2@@std@@YA?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::find_if<std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	53		 push	 ebx
  0004b	50		 push	 eax
  0004c	8d 45 f8	 lea	 eax, DWORD PTR $T528217[ebp]
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00057	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0005a	5b		 pop	 ebx
  0005b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0005e	72 04		 jb	 SHORT $LN77@trim
  00060	8b 16		 mov	 edx, DWORD PTR [esi]
  00062	eb 02		 jmp	 SHORT $LN78@trim
$LN77@trim:
  00064	8b d6		 mov	 edx, esi
$LN78@trim:
  00066	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00069	03 c2		 add	 eax, edx
  0006b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0006e	72 04		 jb	 SHORT $LN89@trim
  00070	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00072	eb 02		 jmp	 SHORT $LN90@trim
$LN89@trim:
  00074	8b ce		 mov	 ecx, esi
$LN90@trim:
  00076	57		 push	 edi
  00077	50		 push	 eax
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ??$_Find_if@PADV?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@std@@@std@@YAPADPAD0V?$unary_negate@V?$pointer_to_unary_function@HHP6AHH@Z@std@@@0@@Z ; std::_Find_if<char *,std::unary_negate<std::pointer_to_unary_function<int,int,int (__cdecl*)(int)> > >
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00085	5f		 pop	 edi
  00086	72 04		 jb	 SHORT $LN115@trim
  00088	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008a	eb 02		 jmp	 SHORT $LN116@trim
$LN115@trim:
  0008c	8b ce		 mov	 ecx, esi
$LN116@trim:
  0008e	50		 push	 eax
  0008f	51		 push	 ecx
  00090	8d 45 f8	 lea	 eax, DWORD PTR $T528496[ebp]
  00093	50		 push	 eax
  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0009b	8b c6		 mov	 eax, esi

; 21   : }

  0009d	c9		 leave
  0009e	c3		 ret	 0
?trim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z ENDP ; trim
_TEXT	ENDS
PUBLIC	??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExecUnit::ioAIExecUnit
EXTRN	??0ioAIExec_Myself_IsCurrentState@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_IsCurrentState::ioAIExec_Myself_IsCurrentState
EXTRN	??0ioAIExec_Myself_IsHP@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_IsHP::ioAIExec_Myself_IsHP
EXTRN	??0ioAIExec_Myself_WaitForCombo@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_WaitForCombo::ioAIExec_Myself_WaitForCombo
EXTRN	??0ioAIExec_Myself_CanDoCombo@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_CanDoCombo::ioAIExec_Myself_CanDoCombo
EXTRN	??0ioAIExec_Myself_IsCombo@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_IsCombo::ioAIExec_Myself_IsCombo
EXTRN	??0ioAIExec_Myself_Idle@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_Idle::ioAIExec_Myself_Idle
EXTRN	??0ioAIExec_Myself_Turn@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_Turn::ioAIExec_Myself_Turn
EXTRN	??0ioAIExec_Myself_ShowChat@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_ShowChat::ioAIExec_Myself_ShowChat
EXTRN	??0ioAIExec_Myself_StopAllActions@@QAE@W4AIExecOperatorType@@@Z:PROC ; ioAIExec_Myself_StopAllActions::ioAIExec_Myself_StopAllActions
EXTRN	??0ioAIExec_Myself_DoKeySeq@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_DoKeySeq::ioAIExec_Myself_DoKeySeq
EXTRN	??0ioAIExec_Myself_Move@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Myself_Move::ioAIExec_Myself_Move
EXTRN	??0ioAIExec_Target_IsTargetValid@@QAE@W4AIExecOperatorType@@@Z:PROC ; ioAIExec_Target_IsTargetValid::ioAIExec_Target_IsTargetValid
EXTRN	??0ioAIExec_Target_IsDistance@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Target_IsDistance::ioAIExec_Target_IsDistance
EXTRN	??0ioAIExec_Target_IsHP@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Target_IsHP::ioAIExec_Target_IsHP
EXTRN	??0ioAIExec_Target_IsCurrentState@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Target_IsCurrentState::ioAIExec_Target_IsCurrentState
EXTRN	??0ioAIExec_Global_GetTarget@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Global_GetTarget::ioAIExec_Global_GetTarget
EXTRN	??0ioAIExec_Global_GetTargetByHP@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Global_GetTargetByHP::ioAIExec_Global_GetTargetByHP
EXTRN	??0ioAIExec_Global_IsTarget@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; ioAIExec_Global_IsTarget::ioAIExec_Global_IsTarget
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__ehfuncinfo$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$11
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$12
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$14
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$15
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$16
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$18
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaiexecunit.cpp
xdata$x	ENDS
;	COMDAT ??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T528602 = -16						; size = 4
$T528598 = -16						; size = 4
$T528594 = -16						; size = 4
$T528590 = -16						; size = 4
$T528586 = -16						; size = 4
$T528582 = -16						; size = 4
$T528578 = -16						; size = 4
$T528573 = -16						; size = 4
$T528569 = -16						; size = 4
$T528565 = -16						; size = 4
$T528561 = -16						; size = 4
$T528557 = -16						; size = 4
$T528553 = -16						; size = 4
$T528549 = -16						; size = 4
$T528545 = -16						; size = 4
$T528541 = -16						; size = 4
$T528537 = -16						; size = 4
$T528533 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
_var$ = 12						; size = 4
_m$ = 16						; size = 4
_args$ = 20						; size = 28
??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; ioAIExecUnit::ioAIExecUnit, COMDAT
; _this$ = ecx

; 14   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _op$[ebp]
  0000f	8b f9		 mov	 edi, ecx
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 15   : 	args = trim(args);

  00015	8d 75 14	 lea	 esi, DWORD PTR _args$[ebp]
  00018	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ioAIExecUnit@@6B@
  0001e	c6 47 08 00	 mov	 BYTE PTR [edi+8], 0
  00022	e8 00 00 00 00	 call	 ?trim@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@Z ; trim
  00027	6a ff		 push	 -1
  00029	33 f6		 xor	 esi, esi
  0002b	56		 push	 esi
  0002c	50		 push	 eax
  0002d	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00030	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 16   : 	m_pElem = NULL;
; 17   : 	switch( var )

  00035	8b 45 0c	 mov	 eax, DWORD PTR _var$[ebp]
  00038	48		 dec	 eax
  00039	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0003c	0f 84 55 01 00
	00		 je	 $LN27@ioAIExecUn@2
  00042	48		 dec	 eax
  00043	0f 84 93 00 00
	00		 je	 $LN13@ioAIExecUn@2
  00049	48		 dec	 eax
  0004a	0f 85 18 03 00
	00		 jne	 $LN25@ioAIExecUn@2

; 42   : 		}
; 43   : 		break;
; 44   : 	case AI_BvT_AVT_GLOBAL:
; 45   : 		switch( m )

  00050	8b 45 10	 mov	 eax, DWORD PTR _m$[ebp]
  00053	2d a1 0f 00 00	 sub	 eax, 4001		; 00000fa1H
  00058	74 5a		 je	 SHORT $LN3@ioAIExecUn@2
  0005a	48		 dec	 eax
  0005b	74 2f		 je	 SHORT $LN2@ioAIExecUn@2
  0005d	48		 dec	 eax
  0005e	0f 85 04 03 00
	00		 jne	 $LN25@ioAIExecUn@2

; 49   : 		case AI_BvT_AMT_IsTarget:		m_pElem = new ioAIExec_Global_IsTarget( op, args );			break;

  00064	6a 14		 push	 20			; 00000014H
  00066	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006b	59		 pop	 ecx
  0006c	89 45 f0	 mov	 DWORD PTR $T528602[ebp], eax
  0006f	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00073	3b c6		 cmp	 eax, esi
  00075	0f 84 e8 02 00
	00		 je	 $LN40@ioAIExecUn@2
  0007b	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  0007e	51		 push	 ecx
  0007f	53		 push	 ebx
  00080	8b c8		 mov	 ecx, eax
  00082	e8 00 00 00 00	 call	 ??0ioAIExec_Global_IsTarget@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Global_IsTarget::ioAIExec_Global_IsTarget
  00087	e9 d9 02 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN2@ioAIExecUn@2:

; 48   : 		case AI_BvT_AMT_GetTargetByHP:	m_pElem = new ioAIExec_Global_GetTargetByHP( op, args );	break;

  0008c	6a 18		 push	 24			; 00000018H
  0008e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00093	59		 pop	 ecx
  00094	89 45 f0	 mov	 DWORD PTR $T528598[ebp], eax
  00097	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  0009b	3b c6		 cmp	 eax, esi
  0009d	0f 84 c0 02 00
	00		 je	 $LN40@ioAIExecUn@2
  000a3	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  000a6	51		 push	 ecx
  000a7	53		 push	 ebx
  000a8	8b c8		 mov	 ecx, eax
  000aa	e8 00 00 00 00	 call	 ??0ioAIExec_Global_GetTargetByHP@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Global_GetTargetByHP::ioAIExec_Global_GetTargetByHP
  000af	e9 b1 02 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN3@ioAIExecUn@2:

; 46   : 		{
; 47   : 		case AI_BvT_AMT_GetTarget:		m_pElem = new ioAIExec_Global_GetTarget( op, args );		break;

  000b4	6a 14		 push	 20			; 00000014H
  000b6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bb	59		 pop	 ecx
  000bc	89 45 f0	 mov	 DWORD PTR $T528594[ebp], eax
  000bf	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  000c3	3b c6		 cmp	 eax, esi
  000c5	0f 84 98 02 00
	00		 je	 $LN40@ioAIExecUn@2
  000cb	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  000ce	51		 push	 ecx
  000cf	53		 push	 ebx
  000d0	8b c8		 mov	 ecx, eax
  000d2	e8 00 00 00 00	 call	 ??0ioAIExec_Global_GetTarget@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Global_GetTarget::ioAIExec_Global_GetTarget
  000d7	e9 89 02 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN13@ioAIExecUn@2:

; 33   : 		}
; 34   : 		break;
; 35   : 	case AI_BvT_AVT_TARGET:
; 36   : 		switch( m )

  000dc	8b 45 10	 mov	 eax, DWORD PTR _m$[ebp]
  000df	2d d1 07 00 00	 sub	 eax, 2001		; 000007d1H
  000e4	0f 84 89 00 00
	00		 je	 $LN10@ioAIExecUn@2
  000ea	48		 dec	 eax
  000eb	74 5e		 je	 SHORT $LN9@ioAIExecUn@2
  000ed	2d e7 03 00 00	 sub	 eax, 999		; 000003e7H
  000f2	74 2f		 je	 SHORT $LN8@ioAIExecUn@2
  000f4	48		 dec	 eax
  000f5	0f 85 6d 02 00
	00		 jne	 $LN25@ioAIExecUn@2

; 41   : 		case AI_BvT_AMT_IsCurrentState:	m_pElem = new ioAIExec_Target_IsCurrentState( op, args );	break;

  000fb	6a 48		 push	 72			; 00000048H
  000fd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00102	59		 pop	 ecx
  00103	89 45 f0	 mov	 DWORD PTR $T528590[ebp], eax
  00106	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  0010a	3b c6		 cmp	 eax, esi
  0010c	0f 84 51 02 00
	00		 je	 $LN40@ioAIExecUn@2
  00112	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00115	51		 push	 ecx
  00116	53		 push	 ebx
  00117	8b c8		 mov	 ecx, eax
  00119	e8 00 00 00 00	 call	 ??0ioAIExec_Target_IsCurrentState@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Target_IsCurrentState::ioAIExec_Target_IsCurrentState
  0011e	e9 42 02 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN8@ioAIExecUn@2:

; 40   : 		case AI_BvT_AMT_IsHP:			m_pElem = new ioAIExec_Target_IsHP( op, args );				break;

  00123	6a 18		 push	 24			; 00000018H
  00125	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0012a	59		 pop	 ecx
  0012b	89 45 f0	 mov	 DWORD PTR $T528586[ebp], eax
  0012e	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00132	3b c6		 cmp	 eax, esi
  00134	0f 84 29 02 00
	00		 je	 $LN40@ioAIExecUn@2
  0013a	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  0013d	51		 push	 ecx
  0013e	53		 push	 ebx
  0013f	8b c8		 mov	 ecx, eax
  00141	e8 00 00 00 00	 call	 ??0ioAIExec_Target_IsHP@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Target_IsHP::ioAIExec_Target_IsHP
  00146	e9 1a 02 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN9@ioAIExecUn@2:

; 39   : 		case AI_BvT_AMT_IsDistance:		m_pElem = new ioAIExec_Target_IsDistance( op, args );		break;

  0014b	6a 1c		 push	 28			; 0000001cH
  0014d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00152	59		 pop	 ecx
  00153	89 45 f0	 mov	 DWORD PTR $T528582[ebp], eax
  00156	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0015a	3b c6		 cmp	 eax, esi
  0015c	0f 84 01 02 00
	00		 je	 $LN40@ioAIExecUn@2
  00162	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00165	51		 push	 ecx
  00166	53		 push	 ebx
  00167	8b c8		 mov	 ecx, eax
  00169	e8 00 00 00 00	 call	 ??0ioAIExec_Target_IsDistance@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Target_IsDistance::ioAIExec_Target_IsDistance
  0016e	e9 f2 01 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN10@ioAIExecUn@2:

; 37   : 		{
; 38   : 		case AI_BvT_AMT_IsTargetValid:	m_pElem = new ioAIExec_Target_IsTargetValid( op );			break;

  00173	6a 10		 push	 16			; 00000010H
  00175	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0017a	59		 pop	 ecx
  0017b	89 45 f0	 mov	 DWORD PTR $T528578[ebp], eax
  0017e	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00182	3b c6		 cmp	 eax, esi
  00184	0f 84 d9 01 00
	00		 je	 $LN40@ioAIExecUn@2
  0018a	53		 push	 ebx
  0018b	8b c8		 mov	 ecx, eax
  0018d	e8 00 00 00 00	 call	 ??0ioAIExec_Target_IsTargetValid@@QAE@W4AIExecOperatorType@@@Z ; ioAIExec_Target_IsTargetValid::ioAIExec_Target_IsTargetValid
  00192	e9 ce 01 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN27@ioAIExecUn@2:

; 18   : 	{
; 19   : 	case AI_BvT_AVT_MYSELF:
; 20   : 		switch( m )

  00197	8b 4d 10	 mov	 ecx, DWORD PTR _m$[ebp]
  0019a	b8 b9 0b 00 00	 mov	 eax, 3001		; 00000bb9H
  0019f	3b c8		 cmp	 ecx, eax
  001a1	0f 8f 93 01 00
	00		 jg	 $LN54@ioAIExecUn@2
  001a7	0f 84 6c 01 00
	00		 je	 $LN21@ioAIExecUn@2
  001ad	8d 81 17 fc ff
	ff		 lea	 eax, DWORD PTR [ecx-1001]
  001b3	83 f8 08	 cmp	 eax, 8
  001b6	0f 87 ac 01 00
	00		 ja	 $LN25@ioAIExecUn@2
  001bc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN97@ioAIExecUn@2[eax*4]
$LN24@ioAIExecUn@2:

; 21   : 		{
; 22   : 		case AI_BvT_AMT_Move:			m_pElem = new ioAIExec_Myself_Move( op, args );				break;

  001c3	6a 34		 push	 52			; 00000034H
  001c5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ca	59		 pop	 ecx
  001cb	89 45 f0	 mov	 DWORD PTR $T528533[ebp], eax
  001ce	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001d2	3b c6		 cmp	 eax, esi
  001d4	0f 84 89 01 00
	00		 je	 $LN40@ioAIExecUn@2
  001da	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  001dd	51		 push	 ecx
  001de	53		 push	 ebx
  001df	8b c8		 mov	 ecx, eax
  001e1	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_Move@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_Move::ioAIExec_Myself_Move
  001e6	e9 7a 01 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN23@ioAIExecUn@2:

; 23   : 		case AI_BvT_AMT_DoKeySeq:		m_pElem = new ioAIExec_Myself_DoKeySeq( op, args );			break;

  001eb	6a 2c		 push	 44			; 0000002cH
  001ed	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001f2	59		 pop	 ecx
  001f3	89 45 f0	 mov	 DWORD PTR $T528537[ebp], eax
  001f6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001fa	3b c6		 cmp	 eax, esi
  001fc	0f 84 61 01 00
	00		 je	 $LN40@ioAIExecUn@2
  00202	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00205	51		 push	 ecx
  00206	53		 push	 ebx
  00207	8b c8		 mov	 ecx, eax
  00209	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_DoKeySeq@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_DoKeySeq::ioAIExec_Myself_DoKeySeq
  0020e	e9 52 01 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN22@ioAIExecUn@2:

; 24   : 		case AI_BvT_AMT_StopAllActions:	m_pElem = new ioAIExec_Myself_StopAllActions( op );			break;

  00213	6a 10		 push	 16			; 00000010H
  00215	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0021a	59		 pop	 ecx
  0021b	89 45 f0	 mov	 DWORD PTR $T528541[ebp], eax
  0021e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00222	3b c6		 cmp	 eax, esi
  00224	0f 84 39 01 00
	00		 je	 $LN40@ioAIExecUn@2
  0022a	53		 push	 ebx
  0022b	8b c8		 mov	 ecx, eax
  0022d	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_StopAllActions@@QAE@W4AIExecOperatorType@@@Z ; ioAIExec_Myself_StopAllActions::ioAIExec_Myself_StopAllActions
  00232	e9 2e 01 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN19@ioAIExecUn@2:

; 27   : 		case AI_BvT_AMT_ShowChat:		m_pElem = new ioAIExec_Myself_ShowChat( op, args );			break;

  00237	6a 30		 push	 48			; 00000030H
  00239	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0023e	59		 pop	 ecx
  0023f	89 45 f0	 mov	 DWORD PTR $T528553[ebp], eax
  00242	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00246	3b c6		 cmp	 eax, esi
  00248	0f 84 15 01 00
	00		 je	 $LN40@ioAIExecUn@2
  0024e	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00251	51		 push	 ecx
  00252	53		 push	 ebx
  00253	8b c8		 mov	 ecx, eax
  00255	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_ShowChat@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_ShowChat::ioAIExec_Myself_ShowChat
  0025a	e9 06 01 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN18@ioAIExecUn@2:

; 28   : 		case AI_BvT_AMT_Turn:			m_pElem = new ioAIExec_Myself_Turn( op, args );				break;

  0025f	6a 14		 push	 20			; 00000014H
  00261	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00266	59		 pop	 ecx
  00267	89 45 f0	 mov	 DWORD PTR $T528557[ebp], eax
  0026a	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0026e	3b c6		 cmp	 eax, esi
  00270	0f 84 ed 00 00
	00		 je	 $LN40@ioAIExecUn@2
  00276	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00279	51		 push	 ecx
  0027a	53		 push	 ebx
  0027b	8b c8		 mov	 ecx, eax
  0027d	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_Turn@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_Turn::ioAIExec_Myself_Turn
  00282	e9 de 00 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN17@ioAIExecUn@2:

; 29   : 		case AI_BvT_AMT_Idle:			m_pElem = new ioAIExec_Myself_Idle( op, args );				break;

  00287	6a 14		 push	 20			; 00000014H
  00289	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0028e	59		 pop	 ecx
  0028f	89 45 f0	 mov	 DWORD PTR $T528561[ebp], eax
  00292	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00296	3b c6		 cmp	 eax, esi
  00298	0f 84 c5 00 00
	00		 je	 $LN40@ioAIExecUn@2
  0029e	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  002a1	51		 push	 ecx
  002a2	53		 push	 ebx
  002a3	8b c8		 mov	 ecx, eax
  002a5	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_Idle@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_Idle::ioAIExec_Myself_Idle
  002aa	e9 b6 00 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN16@ioAIExecUn@2:

; 30   : 		case AI_BvT_AMT_IsCombo:		m_pElem = new ioAIExec_Myself_IsCombo( op, args );			break;

  002af	6a 14		 push	 20			; 00000014H
  002b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002b6	59		 pop	 ecx
  002b7	89 45 f0	 mov	 DWORD PTR $T528565[ebp], eax
  002ba	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  002be	3b c6		 cmp	 eax, esi
  002c0	0f 84 9d 00 00
	00		 je	 $LN40@ioAIExecUn@2
  002c6	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  002c9	51		 push	 ecx
  002ca	53		 push	 ebx
  002cb	8b c8		 mov	 ecx, eax
  002cd	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_IsCombo@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_IsCombo::ioAIExec_Myself_IsCombo
  002d2	e9 8e 00 00 00	 jmp	 $LN41@ioAIExecUn@2
$LN15@ioAIExecUn@2:

; 31   : 		case AI_BvT_AMT_CanDoCombo:		m_pElem = new ioAIExec_Myself_CanDoCombo( op, args );		break;

  002d7	6a 10		 push	 16			; 00000010H
  002d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002de	59		 pop	 ecx
  002df	89 45 f0	 mov	 DWORD PTR $T528569[ebp], eax
  002e2	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  002e6	3b c6		 cmp	 eax, esi
  002e8	74 79		 je	 SHORT $LN40@ioAIExecUn@2
  002ea	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  002ed	51		 push	 ecx
  002ee	53		 push	 ebx
  002ef	8b c8		 mov	 ecx, eax
  002f1	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_CanDoCombo@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_CanDoCombo::ioAIExec_Myself_CanDoCombo
  002f6	eb 6d		 jmp	 SHORT $LN41@ioAIExecUn@2
$LN14@ioAIExecUn@2:

; 32   : 		case AI_BvT_AMT_WaitForCombo:	m_pElem = new ioAIExec_Myself_WaitForCombo( op, args );		break;

  002f8	6a 18		 push	 24			; 00000018H
  002fa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002ff	59		 pop	 ecx
  00300	89 45 f0	 mov	 DWORD PTR $T528573[ebp], eax
  00303	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00307	3b c6		 cmp	 eax, esi
  00309	74 58		 je	 SHORT $LN40@ioAIExecUn@2
  0030b	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  0030e	51		 push	 ecx
  0030f	53		 push	 ebx
  00310	8b c8		 mov	 ecx, eax
  00312	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_WaitForCombo@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_WaitForCombo::ioAIExec_Myself_WaitForCombo
  00317	eb 4c		 jmp	 SHORT $LN41@ioAIExecUn@2
$LN21@ioAIExecUn@2:

; 25   : 		case AI_BvT_AMT_IsHP:			m_pElem = new ioAIExec_Myself_IsHP( op, args );				break;

  00319	6a 20		 push	 32			; 00000020H
  0031b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00320	59		 pop	 ecx
  00321	89 45 f0	 mov	 DWORD PTR $T528545[ebp], eax
  00324	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00328	3b c6		 cmp	 eax, esi
  0032a	74 37		 je	 SHORT $LN40@ioAIExecUn@2
  0032c	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  0032f	51		 push	 ecx
  00330	53		 push	 ebx
  00331	8b c8		 mov	 ecx, eax
  00333	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_IsHP@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_IsHP::ioAIExec_Myself_IsHP
  00338	eb 2b		 jmp	 SHORT $LN41@ioAIExecUn@2
$LN54@ioAIExecUn@2:

; 18   : 	{
; 19   : 	case AI_BvT_AVT_MYSELF:
; 20   : 		switch( m )

  0033a	81 f9 ba 0b 00
	00		 cmp	 ecx, 3002		; 00000bbaH
  00340	75 26		 jne	 SHORT $LN25@ioAIExecUn@2

; 26   : 		case AI_BvT_AMT_IsCurrentState:	m_pElem = new ioAIExec_Myself_IsCurrentState( op, args );	break;

  00342	6a 2c		 push	 44			; 0000002cH
  00344	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00349	59		 pop	 ecx
  0034a	89 45 f0	 mov	 DWORD PTR $T528549[ebp], eax
  0034d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00351	3b c6		 cmp	 eax, esi
  00353	74 0e		 je	 SHORT $LN40@ioAIExecUn@2
  00355	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00358	51		 push	 ecx
  00359	53		 push	 ebx
  0035a	8b c8		 mov	 ecx, eax
  0035c	e8 00 00 00 00	 call	 ??0ioAIExec_Myself_IsCurrentState@@QAE@W4AIExecOperatorType@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ioAIExec_Myself_IsCurrentState::ioAIExec_Myself_IsCurrentState
  00361	eb 02		 jmp	 SHORT $LN41@ioAIExecUn@2
$LN40@ioAIExecUn@2:
  00363	33 c0		 xor	 eax, eax
$LN41@ioAIExecUn@2:
  00365	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN25@ioAIExecUn@2:

; 50   : 		}
; 51   : 		break;
; 52   : 	}
; 53   : }

  00368	56		 push	 esi
  00369	6a 01		 push	 1
  0036b	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  0036e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00373	8b c7		 mov	 eax, edi
  00375	e8 00 00 00 00	 call	 __EH_epilog3
  0037a	c2 28 00	 ret	 40			; 00000028H
  0037d	8d 49 00	 npad	 3
$LN97@ioAIExecUn@2:
  00380	00 00 00 00	 DD	 $LN23@ioAIExecUn@2
  00384	00 00 00 00	 DD	 $LN22@ioAIExecUn@2
  00388	00 00 00 00	 DD	 $LN24@ioAIExecUn@2
  0038c	00 00 00 00	 DD	 $LN19@ioAIExecUn@2
  00390	00 00 00 00	 DD	 $LN18@ioAIExecUn@2
  00394	00 00 00 00	 DD	 $LN17@ioAIExecUn@2
  00398	00 00 00 00	 DD	 $LN16@ioAIExecUn@2
  0039c	00 00 00 00	 DD	 $LN15@ioAIExecUn@2
  003a0	00 00 00 00	 DD	 $LN14@ioAIExecUn@2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR _args$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$18:
  00008	ff 75 f0	 push	 DWORD PTR $T528602[ebp]
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	59		 pop	 ecx
  00011	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17:
  00012	ff 75 f0	 push	 DWORD PTR $T528598[ebp]
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	59		 pop	 ecx
  0001b	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$16:
  0001c	ff 75 f0	 push	 DWORD PTR $T528594[ebp]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00024	59		 pop	 ecx
  00025	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$15:
  00026	ff 75 f0	 push	 DWORD PTR $T528590[ebp]
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$14:
  00030	ff 75 f0	 push	 DWORD PTR $T528586[ebp]
  00033	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00038	59		 pop	 ecx
  00039	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13:
  0003a	ff 75 f0	 push	 DWORD PTR $T528582[ebp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	59		 pop	 ecx
  00043	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$12:
  00044	ff 75 f0	 push	 DWORD PTR $T528578[ebp]
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	59		 pop	 ecx
  0004d	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  0004e	ff 75 f0	 push	 DWORD PTR $T528533[ebp]
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	59		 pop	 ecx
  00057	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00058	ff 75 f0	 push	 DWORD PTR $T528537[ebp]
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	59		 pop	 ecx
  00061	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00062	ff 75 f0	 push	 DWORD PTR $T528541[ebp]
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	59		 pop	 ecx
  0006b	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$6:
  0006c	ff 75 f0	 push	 DWORD PTR $T528553[ebp]
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00074	59		 pop	 ecx
  00075	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$7:
  00076	ff 75 f0	 push	 DWORD PTR $T528557[ebp]
  00079	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007e	59		 pop	 ecx
  0007f	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$8:
  00080	ff 75 f0	 push	 DWORD PTR $T528561[ebp]
  00083	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00088	59		 pop	 ecx
  00089	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$9:
  0008a	ff 75 f0	 push	 DWORD PTR $T528565[ebp]
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00092	59		 pop	 ecx
  00093	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$10:
  00094	ff 75 f0	 push	 DWORD PTR $T528569[ebp]
  00097	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009c	59		 pop	 ecx
  0009d	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$11:
  0009e	ff 75 f0	 push	 DWORD PTR $T528573[ebp]
  000a1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a6	59		 pop	 ecx
  000a7	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  000a8	ff 75 f0	 push	 DWORD PTR $T528545[ebp]
  000ab	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b0	59		 pop	 ecx
  000b1	c3		 ret	 0
__unwindfunclet$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5:
  000b2	ff 75 f0	 push	 DWORD PTR $T528549[ebp]
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ba	59		 pop	 ecx
  000bb	c3		 ret	 0
__ehhandler$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  000bc	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000c0	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000c3	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  000c6	33 c8		 xor	 ecx, eax
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  000d2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAIExecUnit@@QAE@W4AIExecOperatorType@@W4AIExecVariableType@@W4AIExecMethodType@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; ioAIExecUnit::ioAIExecUnit
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 708  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 710  : 		}

  00003	5d		 pop	 ebp

; 709  : 		return (assign(_STD forward<_Myt>(_Right)));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; ioAIExecUnit::GetDebugString
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaiexecunit.cpp
xdata$x	ENDS
;	COMDAT ?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -52				; size = 4
$T528733 = -48						; size = 4
$T522821 = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; ioAIExecUnit::GetDebugString, COMDAT
; _this$ = ecx

; 98   : {

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b c1		 mov	 eax, ecx
  0000e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00011	33 db		 xor	 ebx, ebx
  00013	89 5d d0	 mov	 DWORD PTR $T528733[ebp], ebx

; 99   : 	std::string szDebugStr;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001d	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00020	89 75 cc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  00023	88 1e		 mov	 BYTE PTR [esi], bl

; 103  : 	}
; 104  : 
; 105  : 	return szDebugStr;

  00025	33 ff		 xor	 edi, edi
  00027	47		 inc	 edi
  00028	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002b	89 7d d0	 mov	 DWORD PTR $T528733[ebp], edi
  0002e	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00031	74 21		 je	 SHORT $LN37@GetDebugSt

; 100  : 	if( m_pElem )
; 101  : 	{
; 102  : 		szDebugStr = m_pElem->GetDebugString();

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	8b 01		 mov	 eax, DWORD PTR [ecx]
  00038	8d 55 d4	 lea	 edx, DWORD PTR $T522821[ebp]
  0003b	52		 push	 edx
  0003c	ff 50 0c	 call	 DWORD PTR [eax+12]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	53		 push	 ebx
  0004b	57		 push	 edi
  0004c	8d 4d d4	 lea	 ecx, DWORD PTR $T522821[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN37@GetDebugSt:

; 103  : 	}
; 104  : 
; 105  : 	return szDebugStr;

  00054	8b c6		 mov	 eax, esi

; 106  : }

  00056	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8b 45 d0	 mov	 eax, DWORD PTR $T528733[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@GetDebugSt
  0000c	83 65 d0 fe	 and	 DWORD PTR $T528733[ebp], -2 ; fffffffeH
  00010	8b 4d cc	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@GetDebugSt:
  00018	c3		 ret	 0
__unwindfunclet$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00019	8d 4d d4	 lea	 ecx, DWORD PTR $T522821[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDebugString@ioAIExecUnit@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; ioAIExecUnit::GetDebugString
END
