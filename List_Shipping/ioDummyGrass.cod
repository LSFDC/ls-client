; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioDummyGrass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	??_7ioDummyGrass@@6BioWorldEventReceiver@@@	; ioDummyGrass::`vftable'
PUBLIC	??_7ioDummyGrass@@6BioPlayEntity@@@		; ioDummyGrass::`vftable'
PUBLIC	??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyGrass::ioDummyGrass
PUBLIC	??_R4ioDummyGrass@@6BioPlayEntity@@@		; ioDummyGrass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioDummyGrass@@@8			; ioDummyGrass `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyGrass@@8				; ioDummyGrass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyGrass@@8				; ioDummyGrass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioDummyGrass@@8			; ioDummyGrass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioDummyChar@@8			; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioDummyChar@@@8				; ioDummyChar `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyChar@@8				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyChar@@8				; ioDummyChar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	??_R1BMI@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
PUBLIC	??_R0?AVioWorldEventReceiver@@@8		; ioWorldEventReceiver `RTTI Type Descriptor'
PUBLIC	??_R3ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ApplyWeapon@ioDummyGrass@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z ; ioDummyGrass::ApplyWeapon
PUBLIC	?IsCollisionAvailableWeapon@ioDummyGrass@@UAE_NPAVioWeapon@@@Z ; ioDummyGrass::IsCollisionAvailableWeapon
PUBLIC	?LoadProperty@ioDummyGrass@@UAEXAAVioINILoader@@@Z ; ioDummyGrass::LoadProperty
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
PUBLIC	?GetDummyGrassType@ioDummyGrass@@UAEHXZ		; ioDummyGrass::GetDummyGrassType
PUBLIC	?IsActivateWeapon@ioDummyGrass@@UAE_NXZ		; ioDummyGrass::IsActivateWeapon
PUBLIC	?ProcessState@ioDummyGrass@@MAEXMK@Z		; ioDummyGrass::ProcessState
PUBLIC	?ProcessDelayState@ioDummyGrass@@MAEXM@Z	; ioDummyGrass::ProcessDelayState
PUBLIC	?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ	; ioDummyChar::IsDummyCharMidSync
PUBLIC	?ProcessStartState@ioDummyGrass@@MAEXM@Z	; ioDummyGrass::ProcessStartState
PUBLIC	?ProcessLoopAttackState@ioDummyGrass@@MAEXM@Z	; ioDummyGrass::ProcessLoopAttackState
PUBLIC	?SetDieState@ioDummyGrass@@UAEX_N@Z		; ioDummyGrass::SetDieState
PUBLIC	??_R4ioDummyGrass@@6BioWorldEventReceiver@@@	; ioDummyGrass::`RTTI Complete Object Locator'
PUBLIC	??_EioDummyGrass@@WBMI@AEPAXI@Z			; [thunk]:ioDummyGrass::`vector deleting destructor'
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioDummyChar@@UAE@XZ:PROC			; ioDummyChar::~ioDummyChar
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioDummyChar::ioDummyChar
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z:PROC ; ioDummyChar::AddEntityEvent
EXTRN	??_EioDummyGrass@@UAEPAXI@Z:PROC		; ioDummyGrass::`vector deleting destructor'
EXTRN	?Update@ioDummyChar@@UAEXMKK@Z:PROC		; ioDummyChar::Update
EXTRN	?UpdateAfter@ioDummyChar@@UAEXM@Z:PROC		; ioDummyChar::UpdateAfter
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ:PROC ; ioDummyChar::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountAvailable
EXTRN	?IsMountingAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountingAvailable
EXTRN	?IsNowMountEnable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?UpdateBottomHeight@ioDummyChar@@MBEXXZ:PROC	; ioDummyChar::UpdateBottomHeight
EXTRN	?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ:PROC ; ioDummyChar::NeedUpdateBottomHeight
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::Translate
EXTRN	?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByConveyer
EXTRN	?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z:PROC ; ioDummyChar::IsEntityCollisionSkipState
EXTRN	?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z:PROC ; ioDummyChar::IsCharCollisionSkipState
EXTRN	?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z:PROC ; ioPlayEntity::IsWoundedCollision
EXTRN	?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioDummyChar::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ:PROC ; ioDummyChar::GetSubType
EXTRN	?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ:PROC ; ioDummyChar::GetArmorType
EXTRN	?DontMoveEntityLevel@ioDummyChar@@UBEHXZ:PROC	; ioDummyChar::DontMoveEntityLevel
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioDummyChar::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::UpdateGauge
EXTRN	?RenderGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
EXTRN	?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z:PROC ; ioDummyChar::InitDummyCharInfo
EXTRN	?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioDummyChar::TestMapCollision
EXTRN	?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z:PROC ; ioDummyChar::CheckEntityCollision
EXTRN	?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z:PROC ; ioDummyChar::IsDummyVsDummyCollisionSkipState
EXTRN	?ProcessPos@ioDummyChar@@MAEXM@Z:PROC		; ioDummyChar::ProcessPos
EXTRN	?ProcessMoveState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessMoveState
EXTRN	?ProcessDashState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDashState
EXTRN	?ProcessAttackState@ioDummyChar@@MAEXMK@Z:PROC	; ioDummyChar::ProcessAttackState
EXTRN	?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharSync
EXTRN	?SetDelayState@ioDummyChar@@UAEX_N@Z:PROC	; ioDummyChar::SetDelayState
EXTRN	?SetMoveState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetMoveState
EXTRN	?SetDieState@ioDummyChar@@UAEX_N0@Z:PROC	; ioDummyChar::SetDieState
EXTRN	?SetDashState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetDashState
EXTRN	?SetAttackState@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::SetAttackState
EXTRN	?DropZoneCheck@ioDummyChar@@MAEXXZ:PROC		; ioDummyChar::DropZoneCheck
EXTRN	?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::SendAttackInfoToSkill
EXTRN	?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z:PROC ; ioDummyChar::CheckCollisionWeapon
EXTRN	?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateMountEntity
EXTRN	?ClearMountEntity@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::ClearMountEntity
EXTRN	?UpdateMountedEntityList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedEntityList
EXTRN	?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedWeaponList
EXTRN	?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z:PROC ; ioDummyChar::SetWorldPositionMountEntity
EXTRN	?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::DummyDieClearMountEntity
EXTRN	?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::FillDummyCharMidSync
EXTRN	?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharMidSync
EXTRN	?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillMaxActiveCnt
EXTRN	?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillCurActiveCnt
EXTRN	?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::OnTelepotation
EXTRN	?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z:PROC ; ioDummyChar::OnFireZoneDamage
EXTRN	?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::OnPoisonZoneDamage
;	COMDAT ??_R4ioDummyGrass@@6BioWorldEventReceiver@@@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummygrass.cpp
rdata$r	SEGMENT
??_R4ioDummyGrass@@6BioWorldEventReceiver@@@ DD 00H	; ioDummyGrass::`RTTI Complete Object Locator'
	DD	01c8H
	DD	00H
	DD	FLAT:??_R0?AVioDummyGrass@@@8
	DD	FLAT:??_R3ioDummyGrass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R2ioWorldEventReceiver@@8 DD FLAT:??_R1A@?0A@EA@ioWorldEventReceiver@@8 ; ioWorldEventReceiver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R3ioWorldEventReceiver@@8 DD 00H			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWorldEventReceiver@@@8
_DATA	SEGMENT
??_R0?AVioWorldEventReceiver@@@8 DD FLAT:??_7type_info@@6B@ ; ioWorldEventReceiver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWorldEventReceiver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1BMI@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
	DD	00H
	DD	01c8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEntityEvent@@8
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyChar@@8
rdata$r	SEGMENT
??_R2ioDummyChar@@8 DD FLAT:??_R1A@?0A@EA@ioDummyChar@@8 ; ioDummyChar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyChar@@8
rdata$r	SEGMENT
??_R3ioDummyChar@@8 DD 00H				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyChar@@@8
_DATA	SEGMENT
??_R0?AVioDummyChar@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyChar@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyChar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyChar@@8 DD FLAT:??_R0?AVioDummyChar@@@8 ; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyGrass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyGrass@@8 DD FLAT:??_R0?AVioDummyGrass@@@8 ; ioDummyGrass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyGrass@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyGrass@@8
rdata$r	SEGMENT
??_R2ioDummyGrass@@8 DD FLAT:??_R1A@?0A@EA@ioDummyGrass@@8 ; ioDummyGrass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioDummyChar@@8
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyGrass@@8
rdata$r	SEGMENT
??_R3ioDummyGrass@@8 DD 00H				; ioDummyGrass::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ioDummyGrass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyGrass@@@8
_DATA	SEGMENT
??_R0?AVioDummyGrass@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyGrass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyGrass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioDummyGrass@@6BioPlayEntity@@@
rdata$r	SEGMENT
??_R4ioDummyGrass@@6BioPlayEntity@@@ DD 00H		; ioDummyGrass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioDummyGrass@@@8
	DD	FLAT:??_R3ioDummyGrass@@8
rdata$r	ENDS
;	COMDAT ??_7ioDummyGrass@@6BioWorldEventReceiver@@@
CONST	SEGMENT
??_7ioDummyGrass@@6BioWorldEventReceiver@@@ DD FLAT:??_R4ioDummyGrass@@6BioWorldEventReceiver@@@ ; ioDummyGrass::`vftable'
	DD	FLAT:?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z
	DD	FLAT:?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ
	DD	FLAT:??_EioDummyGrass@@WBMI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ioDummyGrass@@6BioPlayEntity@@@
CONST	SEGMENT
??_7ioDummyGrass@@6BioPlayEntity@@@ DD FLAT:??_R4ioDummyGrass@@6BioPlayEntity@@@ ; ioDummyGrass::`vftable'
	DD	FLAT:?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioDummyGrass@@UAEPAXI@Z
	DD	FLAT:?Update@ioDummyChar@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioDummyChar@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioDummyChar@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioDummyGrass@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioDummyGrass@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioDummyChar@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioDummyGrass@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?RenderGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
	DD	FLAT:?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z
	DD	FLAT:?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?GetDummyGrassType@ioDummyGrass@@UAEHXZ
	DD	FLAT:?IsActivateWeapon@ioDummyGrass@@UAE_NXZ
	DD	FLAT:?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z
	DD	FLAT:?ProcessState@ioDummyGrass@@MAEXMK@Z
	DD	FLAT:?ProcessPos@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDelayState@ioDummyGrass@@MAEXM@Z
	DD	FLAT:?ProcessMoveState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDashState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessAttackState@ioDummyChar@@MAEXMK@Z
	DD	FLAT:?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDelayState@ioDummyChar@@UAEX_N@Z
	DD	FLAT:?SetMoveState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetDieState@ioDummyChar@@UAEX_N0@Z
	DD	FLAT:?SetDashState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetAttackState@ioDummyChar@@UAEXXZ
	DD	FLAT:?DropZoneCheck@ioDummyChar@@MAEXXZ
	DD	FLAT:?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ
	DD	FLAT:?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?ClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedEntityList@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ
	DD	FLAT:?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z
	DD	FLAT:?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
	DD	FLAT:?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?ProcessStartState@ioDummyGrass@@MAEXM@Z
	DD	FLAT:?ProcessLoopAttackState@ioDummyGrass@@MAEXM@Z
	DD	FLAT:?SetDieState@ioDummyGrass@@UAEX_N@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1
__ehfuncinfo$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pGrp$ = 8						; size = 4
_pMode$ = 12						; size = 4
??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z PROC ; ioDummyGrass::ioDummyGrass, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyChar::ioDummyChar
  0001c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	8d 8e 88 14 00
	00		 lea	 ecx, DWORD PTR [esi+5256]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDummyGrass@@6BioPlayEntity@@@
  00032	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioDummyGrass@@6BioWorldEventReceiver@@@
  0003c	ff d7		 call	 edi
  0003e	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00048	ff d7		 call	 edi

; 13   : 	m_bStartInit = false;

  0004a	c6 86 80 14 00
	00 00		 mov	 BYTE PTR [esi+5248], 0

; 14   : 	m_State = DCS_START;

  00051	c7 86 30 02 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+560], 1

; 15   : }

  0005b	8b c6		 mov	 eax, esi
  0005d	e8 00 00 00 00	 call	 __EH_epilog3
  00062	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 88 14 00
	00		 add	 ecx, 5256		; 00001488H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioDummyGrass@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ENDP ; ioDummyGrass::ioDummyGrass
PUBLIC	??1ioDummyGrass@@UAE@XZ				; ioDummyGrass::~ioDummyGrass
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioDummyGrass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioDummyGrass@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioDummyGrass@@UAE@XZ$1
__ehfuncinfo$??1ioDummyGrass@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioDummyGrass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioDummyGrass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioDummyGrass@@UAE@XZ PROC				; ioDummyGrass::~ioDummyGrass, COMDAT
; _this$ = ecx

; 18   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioDummyGrass@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDummyGrass@@6BioPlayEntity@@@
  00017	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioDummyGrass@@6BioWorldEventReceiver@@@

; 19   : }

  00021	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	ff d7		 call	 edi
  00036	8d 8e 88 14 00
	00		 lea	 ecx, DWORD PTR [esi+5256]
  0003c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00040	ff d7		 call	 edi
  00042	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioDummyGrass@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??1ioDummyGrass@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 88 14 00
	00		 add	 ecx, 5256		; 00001488H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioDummyGrass@@UAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioDummyGrass@@UAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioDummyGrass@@UAE@XZ ENDP				; ioDummyGrass::~ioDummyGrass
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioDummyGrass@@MAEXMK@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessState@ioDummyGrass@@MAEXMK@Z PROC		; ioDummyGrass::ProcessState, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 37   : 	DWORD dwCurTime = FRAMEGETTIME();

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000c	8b c8		 mov	 ecx, eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 38   : 	switch( m_State )

  00014	8b 8e 30 02 00
	00		 mov	 ecx, DWORD PTR [esi+560]
  0001a	49		 dec	 ecx
  0001b	74 4f		 je	 SHORT $LN5@ProcessSta
  0001d	49		 dec	 ecx
  0001e	74 35		 je	 SHORT $LN4@ProcessSta
  00020	83 e9 09	 sub	 ecx, 9
  00023	74 19		 je	 SHORT $LN3@ProcessSta
  00025	49		 dec	 ecx
  00026	49		 dec	 ecx
  00027	75 58		 jne	 SHORT $LN6@ProcessSta

; 49   : 	case DCS_WOUNDED:
; 50   : 		if( dwCurTime > m_dwMotionEndTime )

  00029	3b 86 ac 14 00
	00		 cmp	 eax, DWORD PTR [esi+5292]
  0002f	76 50		 jbe	 SHORT $LN6@ProcessSta

; 51   : 			SetDelayState( false );

  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	51		 push	 ecx
  00034	8b ce		 mov	 ecx, esi
  00036	ff 90 14 01 00
	00		 call	 DWORD PTR [eax+276]

; 52   : 		break;

  0003c	eb 43		 jmp	 SHORT $LN6@ProcessSta
$LN3@ProcessSta:

; 46   : 	case DCS_LOOP_ATTACK:
; 47   : 		ProcessLoopAttackState( fTimePerSec );

  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00043	8b 06		 mov	 eax, DWORD PTR [esi]
  00045	51		 push	 ecx
  00046	8b ce		 mov	 ecx, esi
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	ff 90 64 01 00
	00		 call	 DWORD PTR [eax+356]

; 48   : 		break;

  00053	eb 2c		 jmp	 SHORT $LN6@ProcessSta
$LN4@ProcessSta:

; 42   : 		break;
; 43   : 	case DCS_DELAY:
; 44   : 		ProcessDelayState( fTimePerSec );

  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	51		 push	 ecx
  0005d	8b ce		 mov	 ecx, esi
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]

; 45   : 		break;

  0006a	eb 15		 jmp	 SHORT $LN6@ProcessSta
$LN5@ProcessSta:

; 39   : 	{
; 40   : 	case DCS_START:
; 41   : 		ProcessStartState( fTimePerSec );

  0006c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	51		 push	 ecx
  00074	8b ce		 mov	 ecx, esi
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	ff 90 60 01 00
	00		 call	 DWORD PTR [eax+352]
$LN6@ProcessSta:
  00081	5e		 pop	 esi

; 53   : 	}
; 54   : }

  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
?ProcessState@ioDummyGrass@@MAEXMK@Z ENDP		; ioDummyGrass::ProcessState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessLoopAttackState@ioDummyGrass@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessLoopAttackState@ioDummyGrass@@MAEXM@Z PROC	; ioDummyGrass::ProcessLoopAttackState, COMDAT
; _this$ = ecx

; 96   : }

  00000	c2 04 00	 ret	 4
?ProcessLoopAttackState@ioDummyGrass@@MAEXM@Z ENDP	; ioDummyGrass::ProcessLoopAttackState
_TEXT	ENDS
EXTRN	__imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@HK@Z:PROC
EXTRN	__imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetDieState@ioDummyGrass@@UAEX_N@Z
_TEXT	SEGMENT
_bEffect$ = 8						; size = 1
?SetDieState@ioDummyGrass@@UAEX_N@Z PROC		; ioDummyGrass::SetDieState, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 102  : 	if ( !m_szExplosionSound.IsEmpty() )

  00007	8d b7 88 14 00
	00		 lea	 esi, DWORD PTR [edi+5256]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00015	84 c0		 test	 al, al
  00017	75 13		 jne	 SHORT $LN1@SetDieStat

; 103  : 	{
; 104  : 		g_SoundMgr.PlaySound( m_szExplosionSound );

  00019	6a 04		 push	 4
  0001b	6a 00		 push	 0
  0001d	56		 push	 esi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  00024	8b c8		 mov	 ecx, eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@HK@Z
$LN1@SetDieStat:

; 105  : 	}
; 106  : 
; 107  : 	ioDummyChar::SetDieState( bEffect );

  0002c	6a 00		 push	 0
  0002e	ff 75 08	 push	 DWORD PTR _bEffect$[ebp]
  00031	8b cf		 mov	 ecx, edi
  00033	e8 00 00 00 00	 call	 ?SetDieState@ioDummyChar@@UAEX_N0@Z ; ioDummyChar::SetDieState
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 108  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?SetDieState@ioDummyGrass@@UAEX_N@Z ENDP		; ioDummyGrass::SetDieState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsActivateWeapon@ioDummyGrass@@UAE_NXZ
_TEXT	SEGMENT
?IsActivateWeapon@ioDummyGrass@@UAE_NXZ PROC		; ioDummyGrass::IsActivateWeapon, COMDAT
; _this$ = ecx

; 112  : 	if( m_State == DCS_START )

  00000	83 b9 30 02 00
	00 01		 cmp	 DWORD PTR [ecx+560], 1
  00007	0f 95 c0	 setne	 al

; 113  : 		return false;
; 114  : 
; 115  : 	return true;
; 116  : }

  0000a	c3		 ret	 0
?IsActivateWeapon@ioDummyGrass@@UAE_NXZ ENDP		; ioDummyGrass::IsActivateWeapon
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetDummyGrassType@ioDummyGrass@@UAEHXZ
_TEXT	SEGMENT
?GetDummyGrassType@ioDummyGrass@@UAEHXZ PROC		; ioDummyGrass::GetDummyGrassType, COMDAT
; _this$ = ecx

; 121  : 	return DGT_GRASS1;

  00000	33 c0		 xor	 eax, eax
  00002	40		 inc	 eax

; 122  : }

  00003	c3		 ret	 0
?GetDummyGrassType@ioDummyGrass@@UAEHXZ ENDP		; ioDummyGrass::GetDummyGrassType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCollisionAvailableWeapon@ioDummyGrass@@UAE_NPAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?IsCollisionAvailableWeapon@ioDummyGrass@@UAE_NPAVioWeapon@@@Z PROC ; ioDummyGrass::IsCollisionAvailableWeapon, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 127  : 	if( pWeapon )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pWeapon$[ebp], 0
  00007	0f 95 c0	 setne	 al

; 128  : 		return true;
; 129  : 
; 130  : 	return false;
; 131  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?IsCollisionAvailableWeapon@ioDummyGrass@@UAE_NPAVioWeapon@@@Z ENDP ; ioDummyGrass::IsCollisionAvailableWeapon
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__real@42c80000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	?SetWoundedState@ioDummyGrass@@IAEXXZ		; ioDummyGrass::SetWoundedState
EXTRN	__imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z:PROC
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__ftol2:PROC
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?SetWoundedState@ioDummyGrass@@IAEXXZ
_TEXT	SEGMENT
tv144 = -4						; size = 4
_dwCurTime$ = -4					; size = 4
?SetWoundedState@ioDummyGrass@@IAEXXZ PROC		; ioDummyGrass::SetWoundedState, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 157  : 	if( !m_pGroup )

  00007	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0000b	0f 84 ef 00 00
	00		 je	 $LN3@SetWounded

; 158  : 		return;
; 159  : 
; 160  : 	DWORD dwCurTime = FRAMEGETTIME();

  00011	57		 push	 edi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00018	8b c8		 mov	 ecx, eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 161  : 
; 162  : 	m_pGroup->ClearAllActionAni( 0.0f, true );

  00020	0f 57 c0	 xorps	 xmm0, xmm0
  00023	6a 01		 push	 1
  00025	51		 push	 ecx
  00026	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00029	89 45 fc	 mov	 DWORD PTR _dwCurTime$[ebp], eax
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 163  : 	m_pGroup->ClearAllLoopAni( 0.0f, true );

  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	6a 01		 push	 1
  0003c	51		 push	 ecx
  0003d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 164  : 
; 165  : 	int iAniID = -1;
; 166  : 	float fTimeRate = 1.0f;	
; 167  : 
; 168  : 	iAniID = m_pGroup->GetAnimationIdx( m_szWoundedAni );

  0004b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004e	8d 86 98 14 00
	00		 lea	 eax, DWORD PTR [esi+5272]
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  0005b	8b f8		 mov	 edi, eax

; 169  : 
; 170  : 	if( iAniID == -1 )

  0005d	83 ff ff	 cmp	 edi, -1
  00060	0f 84 99 00 00
	00		 je	 $LN5@SetWounded

; 171  : 		return;
; 172  : 
; 173  : 	m_pGroup->SetActionAni( iAniID, 0.0f, 100.0f, 1.0f, 1.0f/m_fWounedAniRate, 0.0f, 0.0f, true );

  00066	f3 0f 10 8e a8
	14 00 00	 movss	 xmm1, DWORD PTR [esi+5288]
  0006e	0f 57 c0	 xorps	 xmm0, xmm0
  00071	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00079	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0007c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0007f	6a 01		 push	 1
  00081	6a 01		 push	 1
  00083	83 ec 18	 sub	 esp, 24			; 00000018H
  00086	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0008c	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00092	f2 0f 5e d1	 divsd	 xmm2, xmm1
  00096	66 0f 5a ca	 cvtpd2ps xmm1, xmm2
  0009a	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  000a0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000a8	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  000ae	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  000b6	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	57		 push	 edi
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z

; 174  : 
; 175  : 	m_dwMotionEndTime = dwCurTime + m_pGroup->GetAnimationFullTime( iAniID ) * m_fWounedAniRate;

  000c8	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000cb	57		 push	 edi
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  000d2	d8 8e a8 14 00
	00		 fmul	 DWORD PTR [esi+5288]
  000d8	8b 45 fc	 mov	 eax, DWORD PTR _dwCurTime$[ebp]
  000db	db 45 fc	 fild	 DWORD PTR _dwCurTime$[ebp]
  000de	85 c0		 test	 eax, eax
  000e0	79 06		 jns	 SHORT $LN6@SetWounded
  000e2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN6@SetWounded:
  000e8	de c1		 faddp	 ST(1), ST(0)
  000ea	e8 00 00 00 00	 call	 __ftol2
  000ef	89 86 ac 14 00
	00		 mov	 DWORD PTR [esi+5292], eax

; 176  : 
; 177  : 	m_State = DCS_WOUNDED;

  000f5	c7 86 30 02 00
	00 0d 00 00 00	 mov	 DWORD PTR [esi+560], 13	; 0000000dH
$LN5@SetWounded:
  000ff	5f		 pop	 edi
$LN3@SetWounded:
  00100	5e		 pop	 esi

; 178  : }

  00101	c9		 leave
  00102	c3		 ret	 0
?SetWoundedState@ioDummyGrass@@IAEXXZ ENDP		; ioDummyGrass::SetWoundedState
; Function compile flags: /Odsp
_TEXT	ENDS
;	COMDAT ??_EioDummyGrass@@WBMI@AEPAXI@Z
_TEXT	SEGMENT
??_EioDummyGrass@@WBMI@AEPAXI@Z PROC			; [thunk]:ioDummyGrass::`vector deleting destructor', COMDAT
  00000	81 e9 c8 01 00
	00		 sub	 ecx, 456		; 000001c8H
  00006	e9 00 00 00 00	 jmp	 ??_EioDummyGrass@@UAEPAXI@Z
??_EioDummyGrass@@WBMI@AEPAXI@Z ENDP			; [thunk]:ioDummyGrass::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummychar.h
_TEXT	ENDS
;	COMDAT ?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
_TEXT	SEGMENT
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ PROC		; ioDummyChar::IsDummyCharMidSync, COMDAT
; _this$ = ecx

; 742  : 	virtual bool IsDummyCharMidSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ ENDP		; ioDummyChar::IsDummyCharMidSync
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioDummyGrass@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioDummyGrass@@UAEPAXI@Z PROC			; ioDummyGrass::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioDummyGrass@@UAE@XZ	; ioDummyGrass::~ioDummyGrass
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioDummyGrass@@UAEPAXI@Z ENDP			; ioDummyGrass::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator<=
; Function compile flags: /Ogsp
;	COMDAT ??N?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator<=, COMDAT
; _this$ = ecx

; 1821 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1822 : 		type value;
; 1823 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1824 : #ifdef _NOTUSE
; 1825 : 		Debug();
; 1826 : #endif
; 1827 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c8	 comisd	 xmm1, xmm0
  00025	72 01		 jb	 SHORT $LN4@operator
  00027	40		 inc	 eax
$LN4@operator:

; 1828 : 	}

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??N?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<10>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<10>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	84 d2		 test	 dl, dl
  0001f	0f 84 0d 01 00
	00		 je	 $LN96@LoadString
  00025	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00028	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002e	84 d2		 test	 dl, dl
  00030	0f 84 f6 00 00
	00		 je	 $LN95@LoadString
  00036	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00039	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003c	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 df 00 00
	00		 je	 $LN94@LoadString
  00047	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004a	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004d	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 c8 00 00
	00		 je	 $LN93@LoadString
  00058	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005b	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005e	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 b1 00 00
	00		 je	 $LN92@LoadString
  00069	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006c	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006f	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 9a 00 00
	00		 je	 $LN91@LoadString
  0007a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007d	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00080	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00083	84 d2		 test	 dl, dl
  00085	0f 84 83 00 00
	00		 je	 $LN90@LoadString
  0008b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00091	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00094	84 d2		 test	 dl, dl
  00096	74 70		 je	 SHORT $LN89@LoadString
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	74 5d		 je	 SHORT $LN88@LoadString
  000a5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a8	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000ac	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	0f 84 81 00 00
	00		 je	 $LN1@LoadString
  000b5	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b8	84 d2		 test	 dl, dl
  000ba	74 40		 je	 SHORT $LN86@LoadString
  000bc	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000bf	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c2	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c5	84 d2		 test	 dl, dl
  000c7	74 2d		 je	 SHORT $LN85@LoadString
  000c9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cc	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 1a		 je	 SHORT $LN84@LoadString
  000d6	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000dc	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000df	84 c0		 test	 al, al
  000e1	74 07		 je	 SHORT $LN83@LoadString
  000e3	34 ec		 xor	 al, -20			; ffffffecH
  000e5	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e8	eb 4c		 jmp	 SHORT $LN1@LoadString
$LN83@LoadString:
  000ea	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000ee	eb 46		 jmp	 SHORT $LN1@LoadString
$LN84@LoadString:
  000f0	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000f4	eb 40		 jmp	 SHORT $LN1@LoadString
$LN85@LoadString:
  000f6	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000fa	eb 3a		 jmp	 SHORT $LN1@LoadString
$LN86@LoadString:
  000fc	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00100	eb 34		 jmp	 SHORT $LN1@LoadString
$LN88@LoadString:
  00102	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00106	eb 2e		 jmp	 SHORT $LN1@LoadString
$LN89@LoadString:
  00108	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0010c	eb 28		 jmp	 SHORT $LN1@LoadString
$LN90@LoadString:
  0010e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00112	eb 22		 jmp	 SHORT $LN1@LoadString
$LN91@LoadString:
  00114	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00118	eb 1c		 jmp	 SHORT $LN1@LoadString
$LN92@LoadString:
  0011a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0011e	eb 16		 jmp	 SHORT $LN1@LoadString
$LN93@LoadString:
  00120	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00124	eb 10		 jmp	 SHORT $LN1@LoadString
$LN94@LoadString:
  00126	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0012a	eb 0a		 jmp	 SHORT $LN1@LoadString
$LN95@LoadString:
  0012c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00130	eb 04		 jmp	 SHORT $LN1@LoadString
$LN96@LoadString:
  00132	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString:
  00136	6a 02		 push	 2
  00138	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0013b	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  0013f	5a		 pop	 edx
$LL104@LoadString:
  00140	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00146	83 c0 04	 add	 eax, 4
  00149	4a		 dec	 edx
  0014a	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  0014c	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0014f	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00153	57		 push	 edi
  00154	56		 push	 esi
  00155	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00158	50		 push	 eax
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@M@@QAEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@M@@QAEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QAEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QAEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??Z?$CEncrypt@M@@QAEAAMABM@Z			; CEncrypt<float>::operator-=
; Function compile flags: /Ogsp
;	COMDAT ??Z?$CEncrypt@M@@QAEAAMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Z?$CEncrypt@M@@QAEAAMABM@Z PROC			; CEncrypt<float>::operator-=, COMDAT
; _this$ = ecx

; 1728 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1729 : 		type value;
; 1730 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1731 : 		value -= inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00018	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	0f 5a c9	 cvtps2pd xmm1, xmm1

; 1732 : 		EncryptValueToPool((char*)&value);

  00022	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00025	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00029	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00035	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1733 : #ifdef _NOTUSE
; 1734 : 		m_value -= inValue;
; 1735 : 		Debug();
; 1736 : #endif
; 1737 : 		return value;

  0003a	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0003d	5e		 pop	 esi

; 1738 : 	} 

  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
??Z?$CEncrypt@M@@QAEAAMABM@Z ENDP			; CEncrypt<float>::operator-=
_TEXT	ENDS
PUBLIC	??O?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator>
; Function compile flags: /Ogsp
;	COMDAT ??O?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??O?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator>, COMDAT
; _this$ = ecx

; 1811 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1812 : 		type value;
; 1813 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1814 : #ifdef _NOTUSE
; 1815 : 		Debug();
; 1816 : #endif
; 1817 : 		return (value > inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c1	 comisd	 xmm0, xmm1
  00025	76 01		 jbe	 SHORT $LN4@operator@2
  00027	40		 inc	 eax
$LN4@operator@2:

; 1818 : 	}		

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??O?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator>
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QAE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QAE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QAE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QAE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z:PROC ; ioDummyChar::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummygrass.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioDummyGrass@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -284						; size = 260
__k$551504 = -24					; size = 15
__k$551379 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioDummyGrass@@UAEXAAVioINILoader@@@Z PROC	; ioDummyGrass::LoadProperty, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 23   : 	ioDummyChar::LoadProperty( rkLoader );

  00018	57		 push	 edi
  00019	8b f1		 mov	 esi, ecx
  0001b	e8 00 00 00 00	 call	 ?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z ; ioDummyChar::LoadProperty

; 24   : 
; 25   : 	char szBuf[MAX_PATH] = "";

  00020	68 03 01 00 00	 push	 259			; 00000103H
  00025	8d 85 e5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  0002b	6a 00		 push	 0
  0002d	50		 push	 eax
  0002e	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  00035	e8 00 00 00 00	 call	 _memset
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 26   : 	char szKey[MAX_PATH] = "";
; 27   : 
; 28   : 	rkLoader.LoadString_e( "wound_ani", "", szBuf, MAX_PATH );

  0003d	6a 02		 push	 2
  0003f	c7 45 ec 9a 83
	9e 84		 mov	 DWORD PTR __k$551379[ebp], -2069986406 ; 849e839aH
  00046	c7 45 f0 89 b3
	8a 84		 mov	 DWORD PTR __k$551379[ebp+4], -2071284855 ; 848ab389H
  0004d	8d 45 ec	 lea	 eax, DWORD PTR __k$551379[ebp]
  00050	66 c7 45 f4 84
	00		 mov	 WORD PTR __k$551379[ebp+8], 132 ; 00000084H
  00056	59		 pop	 ecx
$LL106@LoadProper:
  00057	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0005d	83 c0 04	 add	 eax, 4
  00060	49		 dec	 ecx
  00061	75 f4		 jne	 SHORT $LL106@LoadProper
  00063	80 75 f4 ed	 xor	 BYTE PTR __k$551379[ebp+8], -19 ; ffffffedH
  00067	68 04 01 00 00	 push	 260			; 00000104H
  0006c	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00078	8d 45 ec	 lea	 eax, DWORD PTR __k$551379[ebp]
  0007b	50		 push	 eax
  0007c	8b cf		 mov	 ecx, edi
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 29   : 	m_szWoundedAni =  szBuf;

  00084	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0008a	50		 push	 eax
  0008b	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00097	6a 03		 push	 3

; 30   : 
; 31   : 	m_fWounedAniRate = rkLoader.LoadFloat_e( "wound_ani_rate", 1.0f );

  00099	c7 45 e8 9a 83
	9e 84		 mov	 DWORD PTR __k$551504[ebp], -2069986406 ; 849e839aH
  000a0	c7 45 ec 89 b3
	8a 84		 mov	 DWORD PTR __k$551504[ebp+4], -2071284855 ; 848ab389H
  000a7	c7 45 f0 84 b3
	99 8b		 mov	 DWORD PTR __k$551504[ebp+8], -1952861308 ; 8b99b384H
  000ae	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$551504[ebp+12], 35225 ; 00008999H
  000b4	8d 45 e8	 lea	 eax, DWORD PTR __k$551504[ebp]
  000b7	c6 45 f6 00	 mov	 BYTE PTR __k$551504[ebp+14], 0
  000bb	59		 pop	 ecx
$LL212@LoadProper:
  000bc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c2	83 c0 04	 add	 eax, 4
  000c5	49		 dec	 ecx
  000c6	75 f4		 jne	 SHORT $LL212@LoadProper
  000c8	6a 0c		 push	 12			; 0000000cH
  000ca	58		 pop	 eax
$LL209@LoadProper:
  000cb	8b c8		 mov	 ecx, eax
  000cd	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d3	79 05		 jns	 SHORT $LN223@LoadProper
  000d5	49		 dec	 ecx
  000d6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d9	41		 inc	 ecx
$LN223@LoadProper:
  000da	b2 ed		 mov	 dl, -19			; ffffffedH
  000dc	2a d1		 sub	 dl, cl
  000de	30 54 05 e8	 xor	 BYTE PTR __k$551504[ebp+eax], dl
  000e2	40		 inc	 eax
  000e3	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  000e6	7c e3		 jl	 SHORT $LL209@LoadProper
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f0	51		 push	 ecx
  000f1	8d 45 e8	 lea	 eax, DWORD PTR __k$551504[ebp]
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	50		 push	 eax
  000fa	8b cf		 mov	 ecx, edi
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00102	d9 9e a8 14 00
	00		 fstp	 DWORD PTR [esi+5288]

; 32   : }

  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	5f		 pop	 edi
  0010c	33 cd		 xor	 ecx, ebp
  0010e	5e		 pop	 esi
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	c9		 leave
  00115	c2 04 00	 ret	 4
?LoadProperty@ioDummyGrass@@UAEXAAVioINILoader@@@Z ENDP	; ioDummyGrass::LoadProperty
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?GetBottomHeight@ioGameEntity@@QBEMXZ:PROC	; ioGameEntity::GetBottomHeight
; Function compile flags: /Ogsp
;	COMDAT ?ProcessStartState@ioDummyGrass@@MAEXM@Z
_TEXT	SEGMENT
_dwCurTime$ = -28					; size = 4
_fMapHeight$550279 = -24				; size = 4
_value$551632 = -20					; size = 4
_value$551628 = -20					; size = 4
_value$551620 = -20					; size = 4
_vPos$550278 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessStartState@ioDummyGrass@@MAEXM@Z PROC		; ioDummyGrass::ProcessStartState, COMDAT
; _this$ = ecx

; 57   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 58   : 	DWORD dwCurTime = FRAMEGETTIME();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00019	8b c8		 mov	 ecx, eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 59   : 
; 60   : 	if ( !m_bStartInit )

  00021	80 bb 80 14 00
	00 00		 cmp	 BYTE PTR [ebx+5248], 0
  00028	89 45 e4	 mov	 DWORD PTR _dwCurTime$[ebp], eax
  0002b	0f 85 9c 00 00
	00		 jne	 $LN16@ProcessSta@2

; 61   : 	{
; 62   : 		D3DXVECTOR3 vPos = GetWorldPosition();

  00031	8b 03		 mov	 eax, DWORD PTR [ebx]
  00033	56		 push	 esi
  00034	57		 push	 edi
  00035	8b cb		 mov	 ecx, ebx
  00037	ff 50 70	 call	 DWORD PTR [eax+112]
  0003a	8b f0		 mov	 esi, eax
  0003c	8d 7d f0	 lea	 edi, DWORD PTR _vPos$550278[ebp]
  0003f	a5		 movsd
  00040	a5		 movsd

; 63   : 		float fMapHeight = GetBottomHeight();

  00041	8b cb		 mov	 ecx, ebx
  00043	a5		 movsd
  00044	e8 00 00 00 00	 call	 ?GetBottomHeight@ioGameEntity@@QBEMXZ ; ioGameEntity::GetBottomHeight

; 64   : 
; 65   : 		vPos.y = fMapHeight + m_fDummyCharHeightOffset;		

  00049	8d 45 ec	 lea	 eax, DWORD PTR _value$551620[ebp]
  0004c	50		 push	 eax
  0004d	d9 5d e8	 fstp	 DWORD PTR _fMapHeight$550279[ebp]
  00050	8d 8b ec 06 00
	00		 lea	 ecx, DWORD PTR [ebx+1772]
  00056	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0005b	d9 45 ec	 fld	 DWORD PTR _value$551620[ebp]

; 66   : 		SetWorldPosition( vPos );

  0005e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00060	d8 45 e8	 fadd	 DWORD PTR _fMapHeight$550279[ebp]
  00063	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$550278[ebp]
  00066	51		 push	 ecx
  00067	8b cb		 mov	 ecx, ebx
  00069	d9 5d f4	 fstp	 DWORD PTR _vPos$550278[ebp+4]
  0006c	ff 50 44	 call	 DWORD PTR [eax+68]

; 67   : 
; 68   : 		m_bStartInit = true;
; 69   : 
; 70   : 		if( m_HP.m_fCurValue > 0.0f && fMapHeight <= 0.0f )

  0006f	8d 45 ec	 lea	 eax, DWORD PTR _value$551628[ebp]
  00072	50		 push	 eax
  00073	8d 8b c0 00 00
	00		 lea	 ecx, DWORD PTR [ebx+192]
  00079	c6 83 80 14 00
	00 01		 mov	 BYTE PTR [ebx+5248], 1
  00080	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00085	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _value$551628[ebp]
  0008a	0f 57 c0	 xorps	 xmm0, xmm0
  0008d	0f 2f c8	 comiss	 xmm1, xmm0
  00090	76 39		 jbe	 SHORT $LN17@ProcessSta@2
  00092	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _fMapHeight$550279[ebp]
  00096	72 33		 jb	 SHORT $LN17@ProcessSta@2

; 71   : 		{
; 72   : 			m_HP.m_fCurValue = 0.0f;

  00098	8d 45 ec	 lea	 eax, DWORD PTR _value$551632[ebp]
  0009b	50		 push	 eax
  0009c	8d 8b c0 00 00
	00		 lea	 ecx, DWORD PTR [ebx+192]
  000a2	f3 0f 11 45 ec	 movss	 DWORD PTR _value$551632[ebp], xmm0
  000a7	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 73   : 			m_LastAttacker = m_OwnerName;

  000ac	8d 83 cc 01 00
	00		 lea	 eax, DWORD PTR [ebx+460]
  000b2	50		 push	 eax
  000b3	8d 8b 30 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1328]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 74   : 			SetDieState( true );

  000bf	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c1	6a 01		 push	 1
  000c3	8b cb		 mov	 ecx, ebx
  000c5	ff 90 68 01 00
	00		 call	 DWORD PTR [eax+360]
$LN17@ProcessSta@2:
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
$LN16@ProcessSta@2:

; 75   : 		}
; 76   : 	}
; 77   : 
; 78   : 	if( m_dwStartAniEndTime == 0 || m_dwStartAniEndTime < dwCurTime )

  000cd	8b 83 e4 06 00
	00		 mov	 eax, DWORD PTR [ebx+1764]
  000d3	85 c0		 test	 eax, eax
  000d5	74 05		 je	 SHORT $LN1@ProcessSta@2
  000d7	3b 45 e4	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  000da	73 0c		 jae	 SHORT $LN2@ProcessSta@2
$LN1@ProcessSta@2:

; 79   : 	{
; 80   : 		SetDelayState( false );

  000dc	8b 03		 mov	 eax, DWORD PTR [ebx]
  000de	6a 00		 push	 0
  000e0	8b cb		 mov	 ecx, ebx
  000e2	ff 90 14 01 00
	00		 call	 DWORD PTR [eax+276]
$LN2@ProcessSta@2:

; 81   : 		return;
; 82   : 	}
; 83   : }

  000e8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000eb	33 cd		 xor	 ecx, ebp
  000ed	5b		 pop	 ebx
  000ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f3	c9		 leave
  000f4	c2 04 00	 ret	 4
?ProcessStartState@ioDummyGrass@@MAEXM@Z ENDP		; ioDummyGrass::ProcessStartState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessDelayState@ioDummyGrass@@MAEXM@Z
_TEXT	SEGMENT
_value$551642 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelayState@ioDummyGrass@@MAEXM@Z PROC		; ioDummyGrass::ProcessDelayState, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 87   : 	DWORD dwCurTime = FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 88   : 	if( m_dwDelayStartTime > 0 && m_dwDelayStartTime + m_dwDelayDuration < dwCurTime )

  00016	83 be 20 02 00
	00 00		 cmp	 DWORD PTR [esi+544], 0
  0001d	8b f8		 mov	 edi, eax
  0001f	76 23		 jbe	 SHORT $LN1@ProcessDel
  00021	8d 45 fc	 lea	 eax, DWORD PTR _value$551642[ebp]
  00024	50		 push	 eax
  00025	8d 8e 3c 07 00
	00		 lea	 ecx, DWORD PTR [esi+1852]
  0002b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00030	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  00036	03 45 fc	 add	 eax, DWORD PTR _value$551642[ebp]
  00039	3b c7		 cmp	 eax, edi
  0003b	73 07		 jae	 SHORT $LN1@ProcessDel

; 89   : 	{
; 90   : 		m_dwDelayStartTime = 0;

  0003d	83 a6 20 02 00
	00 00		 and	 DWORD PTR [esi+544], 0
$LN1@ProcessDel:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 91   : 	}
; 92   : }

  00046	c9		 leave
  00047	c2 04 00	 ret	 4
?ProcessDelayState@ioDummyGrass@@MAEXM@Z ENDP		; ioDummyGrass::ProcessDelayState
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??4?$CEncrypt@M@@QAE_NAAV0@@Z			; CEncrypt<float>::operator=
;	COMDAT __real@00000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??4?$CEncrypt@M@@QAE_NAAV0@@Z
_TEXT	SEGMENT
_value$551650 = -4					; size = 4
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z PROC			; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 3314 : 	 {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3315 : 		 type value = inValue;

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$551650[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$551650[ebp]

; 3316 : 		 EncryptValueToPool((char*)&value);

  00018	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	f3 0f 11 45 08	 movss	 DWORD PTR _value$[ebp], xmm0
  00023	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 3317 : #ifdef _NOTUSE
; 3318 : 		 m_value = inValue;
; 3319 : 		 Debug();
; 3320 : #endif
; 3321 : 		 return value;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00034	9f		 lahf
  00035	5e		 pop	 esi
  00036	f6 c4 44	 test	 ah, 68			; 00000044H
  00039	7b 04		 jnp	 SHORT $LN3@operator@3
  0003b	b0 01		 mov	 al, 1
  0003d	eb 02		 jmp	 SHORT $LN4@operator@3
$LN3@operator@3:
  0003f	32 c0		 xor	 al, al
$LN4@operator@3:

; 3322 : 	 }

  00041	c9		 leave
  00042	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z ENDP			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$551656 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$551656[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$551656[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummygrass.cpp
_TEXT	ENDS
;	COMDAT ?ApplyWeapon@ioDummyGrass@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_value$551666 = -4					; size = 4
_value$551662 = -4					; size = 4
_fDamage$ = -4						; size = 4
_value$551686 = 8					; size = 4
_value$551679 = 8					; size = 4
_pWeapon$ = 8						; size = 4
_value$551676 = 11					; size = 1
_value$551672 = 11					; size = 1
?ApplyWeapon@ioDummyGrass@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z PROC ; ioDummyGrass::ApplyWeapon, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx

; 136  : 	float fPreCurHP = m_HP.m_fCurValue;

  00009	8d 45 fc	 lea	 eax, DWORD PTR _value$551662[ebp]
  0000c	50		 push	 eax
  0000d	8d 8e c0 00 00
	00		 lea	 ecx, DWORD PTR [esi+192]
  00013	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 	float fDamage = pWeapon->GetDamage( this ) * m_fDamageRate;

  00018	8d 45 fc	 lea	 eax, DWORD PTR _value$551666[ebp]
  0001b	50		 push	 eax
  0001c	8d 8e d0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1232]
  00022	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00027	8b 7d 08	 mov	 edi, DWORD PTR _pWeapon$[ebp]
  0002a	8b 07		 mov	 eax, DWORD PTR [edi]
  0002c	56		 push	 esi
  0002d	8b cf		 mov	 ecx, edi
  0002f	ff 90 d4 00 00
	00		 call	 DWORD PTR [eax+212]
  00035	d8 4d fc	 fmul	 DWORD PTR _value$551666[ebp]

; 138  : 	float fPushPower = pWeapon->GetDefensePushPower( fDamage );

  00038	8b 07		 mov	 eax, DWORD PTR [edi]
  0003a	51		 push	 ecx
  0003b	d9 5d fc	 fstp	 DWORD PTR _fDamage$[ebp]
  0003e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fDamage$[ebp]
  00043	8b cf		 mov	 ecx, edi
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
  00050	dd d8		 fstp	 ST(0)

; 139  : 
; 140  : 	if( !m_bNoDamage && !m_bPiercingProtected )

  00052	8d 45 0b	 lea	 eax, DWORD PTR _value$551672[ebp]
  00055	50		 push	 eax
  00056	8d 8e 80 03 00
	00		 lea	 ecx, DWORD PTR [esi+896]
  0005c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00061	80 7d 0b 00	 cmp	 BYTE PTR _value$551672[ebp], 0
  00065	75 50		 jne	 SHORT $LN13@ApplyWeapo
  00067	8d 45 0b	 lea	 eax, DWORD PTR _value$551676[ebp]
  0006a	50		 push	 eax
  0006b	8d 8e 70 04 00
	00		 lea	 ecx, DWORD PTR [esi+1136]
  00071	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00076	80 7d 0b 00	 cmp	 BYTE PTR _value$551676[ebp], 0
  0007a	75 3b		 jne	 SHORT $LN13@ApplyWeapo

; 141  : 		m_HP.m_fCurValue -= fDamage;

  0007c	8d 45 08	 lea	 eax, DWORD PTR _value$551679[ebp]
  0007f	50		 push	 eax
  00080	8d 8e c0 00 00
	00		 lea	 ecx, DWORD PTR [esi+192]
  00086	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0008b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$551679[ebp]
  00090	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _fDamage$[ebp]
  00095	0f 5a c0	 cvtps2pd xmm0, xmm0
  00098	0f 5a c9	 cvtps2pd xmm1, xmm1
  0009b	8d 45 08	 lea	 eax, DWORD PTR _value$551679[ebp]
  0009e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000a2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000a6	50		 push	 eax
  000a7	8d 8e c0 00 00
	00		 lea	 ecx, DWORD PTR [esi+192]
  000ad	f3 0f 11 45 08	 movss	 DWORD PTR _value$551679[ebp], xmm0
  000b2	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
$LN13@ApplyWeapo:

; 142  : 	AddHeadDamageInfo( (int)fDamage );

  000b7	f3 0f 2c 4d fc	 cvttss2si ecx, DWORD PTR _fDamage$[ebp]
  000bc	8b 06		 mov	 eax, DWORD PTR [esi]
  000be	6a 00		 push	 0
  000c0	51		 push	 ecx
  000c1	8b ce		 mov	 ecx, esi
  000c3	ff 90 d0 00 00
	00		 call	 DWORD PTR [eax+208]

; 143  : 
; 144  : 	if( m_HP.m_fCurValue <= 0.0f )

  000c9	8d 45 08	 lea	 eax, DWORD PTR _value$551686[ebp]
  000cc	50		 push	 eax
  000cd	8d 8e c0 00 00
	00		 lea	 ecx, DWORD PTR [esi+192]
  000d3	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000d8	0f 57 c0	 xorps	 xmm0, xmm0
  000db	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _value$551686[ebp]
  000df	72 12		 jb	 SHORT $LN1@ApplyWeapo

; 145  : 	{
; 146  : 		m_HP.m_fCurValue = m_HP.m_fMaxValue;

  000e1	8d 86 f0 00 00
	00		 lea	 eax, DWORD PTR [esi+240]
  000e7	50		 push	 eax
  000e8	8d 8e c0 00 00
	00		 lea	 ecx, DWORD PTR [esi+192]
  000ee	e8 00 00 00 00	 call	 ??4?$CEncrypt@M@@QAE_NAAV0@@Z ; CEncrypt<float>::operator=
$LN1@ApplyWeapo:

; 147  : 	}
; 148  : 
; 149  : 	SetWoundedState();

  000f3	8b ce		 mov	 ecx, esi
  000f5	e8 00 00 00 00	 call	 ?SetWoundedState@ioDummyGrass@@IAEXXZ ; ioDummyGrass::SetWoundedState
  000fa	5f		 pop	 edi

; 150  : 
; 151  : 	return AWE_EXPLOSION;

  000fb	33 c0		 xor	 eax, eax
  000fd	5e		 pop	 esi
  000fe	40		 inc	 eax
  000ff	5b		 pop	 ebx

; 152  : }

  00100	c9		 leave
  00101	c2 04 00	 ret	 4
?ApplyWeapon@ioDummyGrass@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z ENDP ; ioDummyGrass::ApplyWeapon
_TEXT	ENDS
END
