; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioDefenseBreakBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7ioDefenseBreakBuff@@6B@			; ioDefenseBreakBuff::`vftable'
PUBLIC	??0ioDefenseBreakBuff@@QAE@XZ			; ioDefenseBreakBuff::ioDefenseBreakBuff
PUBLIC	??_R4ioDefenseBreakBuff@@6B@			; ioDefenseBreakBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioDefenseBreakBuff@@@8			; ioDefenseBreakBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioDefenseBreakBuff@@8			; ioDefenseBreakBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDefenseBreakBuff@@8			; ioDefenseBreakBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioDefenseBreakBuff@@8		; ioDefenseBreakBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioDefenseBreakBuff@@UAEXAAVioINILoader@@@Z ; ioDefenseBreakBuff::LoadProperty
PUBLIC	?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ	; ioDefenseBreakBuff::Clone
PUBLIC	?StartBuff@ioDefenseBreakBuff@@UAEXPAVioBaseChar@@@Z ; ioDefenseBreakBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioDefenseBreakBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioDefenseBreakBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioDefenseBreakBuff@@UAEXM@Z	; ioDefenseBreakBuff::ProcessBuff
PUBLIC	?EndBuff@ioDefenseBreakBuff@@UAEXXZ		; ioDefenseBreakBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioDefenseBreakBuff@@UAEPAXI@Z:PROC		; ioDefenseBreakBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodefensebreakbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDefenseBreakBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDefenseBreakBuff@@8 DD FLAT:??_R0?AVioDefenseBreakBuff@@@8 ; ioDefenseBreakBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDefenseBreakBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDefenseBreakBuff@@8
rdata$r	SEGMENT
??_R2ioDefenseBreakBuff@@8 DD FLAT:??_R1A@?0A@EA@ioDefenseBreakBuff@@8 ; ioDefenseBreakBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDefenseBreakBuff@@8
rdata$r	SEGMENT
??_R3ioDefenseBreakBuff@@8 DD 00H			; ioDefenseBreakBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioDefenseBreakBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDefenseBreakBuff@@@8
_DATA	SEGMENT
??_R0?AVioDefenseBreakBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioDefenseBreakBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDefenseBreakBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioDefenseBreakBuff@@6B@
rdata$r	SEGMENT
??_R4ioDefenseBreakBuff@@6B@ DD 00H			; ioDefenseBreakBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioDefenseBreakBuff@@@8
	DD	FLAT:??_R3ioDefenseBreakBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioDefenseBreakBuff@@6B@
CONST	SEGMENT
??_7ioDefenseBreakBuff@@6B@ DD FLAT:??_R4ioDefenseBreakBuff@@6B@ ; ioDefenseBreakBuff::`vftable'
	DD	FLAT:?LoadProperty@ioDefenseBreakBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioDefenseBreakBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioDefenseBreakBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioDefenseBreakBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioDefenseBreakBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioDefenseBreakBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioDefenseBreakBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioDefenseBreakBuff@@QAE@XZ PROC			; ioDefenseBreakBuff::ioDefenseBreakBuff, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDefenseBreakBuff@@6B@

; 14   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioDefenseBreakBuff@@QAE@XZ ENDP			; ioDefenseBreakBuff::ioDefenseBreakBuff
_TEXT	ENDS
PUBLIC	??0ioDefenseBreakBuff@@QAE@ABV0@@Z		; ioDefenseBreakBuff::ioDefenseBreakBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??0ioDefenseBreakBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioDefenseBreakBuff@@QAE@ABV0@@Z PROC			; ioDefenseBreakBuff::ioDefenseBreakBuff, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDefenseBreakBuff@@6B@
  00016	8a 87 6c 09 00
	00		 mov	 al, BYTE PTR [edi+2412]
  0001c	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al
  00022	5f		 pop	 edi

; 20   : }

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0ioDefenseBreakBuff@@QAE@ABV0@@Z ENDP			; ioDefenseBreakBuff::ioDefenseBreakBuff
_TEXT	ENDS
PUBLIC	??1ioDefenseBreakBuff@@UAE@XZ			; ioDefenseBreakBuff::~ioDefenseBreakBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioDefenseBreakBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioDefenseBreakBuff@@UAE@XZ PROC			; ioDefenseBreakBuff::~ioDefenseBreakBuff, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioDefenseBreakBuff@@6B@

; 24   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioDefenseBreakBuff@@UAE@XZ ENDP			; ioDefenseBreakBuff::~ioDefenseBreakBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524276 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ PROC	; ioDefenseBreakBuff::Clone, COMDAT
; _this$ = ecx

; 34   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 35   : 	return new ioDefenseBreakBuff( *this );

  0000e	68 70 09 00 00	 push	 2416			; 00000970H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524276[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioDefenseBreakBuff@@QAE@ABV0@@Z ; ioDefenseBreakBuff::ioDefenseBreakBuff
$LN3@Clone:

; 36   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524276[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioDefenseBreakBuff@@UAEPAVioBuff@@XZ ENDP	; ioDefenseBreakBuff::Clone
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioDefenseBreakBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioDefenseBreakBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioDefenseBreakBuff::StartBuff, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : }

  00003	5d		 pop	 ebp

; 40   : 	ioBuff::StartBuff( pOwner );

  00004	e9 00 00 00 00	 jmp	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff
?StartBuff@ioDefenseBreakBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioDefenseBreakBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioDefenseBreakBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioDefenseBreakBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioDefenseBreakBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00003	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00011	84 c0		 test	 al, al
  00013	0f 95 c0	 setne	 al

; 46   : 		return false;
; 47   : 
; 48   : 	return true;
; 49   : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioDefenseBreakBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioDefenseBreakBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioDefenseBreakBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioDefenseBreakBuff@@UAEXXZ PROC		; ioDefenseBreakBuff::EndBuff, COMDAT
; _this$ = ecx

; 79   : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioDefenseBreakBuff@@UAEXXZ ENDP		; ioDefenseBreakBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioDefenseBreakBuff@@IAE_NXZ ; ioDefenseBreakBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioDefenseBreakBuff@@IAE_NXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioDefenseBreakBuff@@IAE_NXZ PROC	; ioDefenseBreakBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 83   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 84   : 	if( !m_pOwner ) return false;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	33 d2		 xor	 edx, edx
  0000b	3b ca		 cmp	 ecx, edx
  0000d	74 5a		 je	 SHORT $LN1@CheckOwner

; 85   : 
; 86   : 	CharState eState = m_pOwner->GetState();

  0000f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 87   : 
; 88   : 	if( m_bDisableDownState )

  00015	38 96 6c 09 00
	00		 cmp	 BYTE PTR [esi+2412], dl
  0001b	74 4c		 je	 SHORT $LN1@CheckOwner

; 89   : 	{
; 90   : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001d	3c 17		 cmp	 al, 23			; 00000017H
  0001f	75 13		 jne	 SHORT $LN13@CheckOwner
  00021	38 91 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], dl
$LN27@CheckOwner:
  00027	74 40		 je	 SHORT $LN1@CheckOwner
$LN26@CheckOwner:

; 91   : 		{
; 92   : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 93   : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 128  : }

  00033	c3		 ret	 0
$LN13@CheckOwner:

; 94   : 		}
; 95   : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00034	3c 0c		 cmp	 al, 12			; 0000000cH
  00036	75 0b		 jne	 SHORT $LN11@CheckOwner
$LN29@CheckOwner:
  00038	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  0003d	84 c0		 test	 al, al
  0003f	75 28		 jne	 SHORT $LN1@CheckOwner

; 96   : 		{
; 97   : 			SetReserveEndBuff();
; 98   : 			return true;

  00041	eb e6		 jmp	 SHORT $LN26@CheckOwner
$LN11@CheckOwner:

; 99   : 		}
; 100  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00043	3c 31		 cmp	 al, 49			; 00000031H

; 101  : 		{
; 102  : 			SetReserveEndBuff();
; 103  : 			return true;

  00045	74 f1		 je	 SHORT $LN29@CheckOwner

; 104  : 		}
; 105  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00047	3c 0f		 cmp	 al, 15			; 0000000fH
  00049	75 0a		 jne	 SHORT $LN7@CheckOwner
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  00051	84 c0		 test	 al, al

; 106  : 		{
; 107  : 			SetReserveEndBuff();
; 108  : 			return true;

  00053	eb d2		 jmp	 SHORT $LN27@CheckOwner
$LN7@CheckOwner:

; 109  : 		}
; 110  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00055	3c 26		 cmp	 al, 38			; 00000026H
  00057	75 08		 jne	 SHORT $LN5@CheckOwner
$LN28@CheckOwner:
  00059	38 91 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], dl

; 111  : 		{
; 112  : 			SetReserveEndBuff();
; 113  : 			return true;

  0005f	eb c6		 jmp	 SHORT $LN27@CheckOwner
$LN5@CheckOwner:

; 114  : 		}
; 115  : 		else if( eState == CS_DROP_ZONE_DOWN )

  00061	3c 10		 cmp	 al, 16			; 00000010H

; 116  : 		{
; 117  : 			SetReserveEndBuff();
; 118  : 			return true;

  00063	74 c4		 je	 SHORT $LN26@CheckOwner

; 119  : 		}
; 120  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00065	3c 3b		 cmp	 al, 59			; 0000003bH

; 121  : 		{
; 122  : 			SetReserveEndBuff();
; 123  : 			return true;

  00067	74 f0		 je	 SHORT $LN28@CheckOwner
$LN1@CheckOwner:

; 124  : 		}
; 125  : 	}
; 126  : 
; 127  : 	return false;

  00069	32 c0		 xor	 al, al
  0006b	5e		 pop	 esi

; 128  : }

  0006c	c3		 ret	 0
?CheckOwnerStateCheck@ioDefenseBreakBuff@@IAE_NXZ ENDP	; ioDefenseBreakBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioDefenseBreakBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioDefenseBreakBuff@@UAEPAXI@Z PROC			; ioDefenseBreakBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDefenseBreakBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioDefenseBreakBuff@@UAEPAXI@Z ENDP			; ioDefenseBreakBuff::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodefensebreakbuff.cpp
;	COMDAT ?ProcessBuff@ioDefenseBreakBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioDefenseBreakBuff@@UAEXM@Z PROC		; ioDefenseBreakBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 53   : 	if( CheckOwnerStateCheck() )

  00006	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioDefenseBreakBuff@@IAE_NXZ ; ioDefenseBreakBuff::CheckOwnerStateCheck
  0000b	84 c0		 test	 al, al
  0000d	75 55		 jne	 SHORT $LN5@ProcessBuf

; 54   : 		return;
; 55   : 
; 56   : 	switch( m_iOperationType )

  0000f	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00015	83 e8 00	 sub	 eax, 0
  00018	74 43		 je	 SHORT $LN1@ProcessBuf
  0001a	48		 dec	 eax
  0001b	74 06		 je	 SHORT $LN2@ProcessBuf
  0001d	48		 dec	 eax
  0001e	74 17		 je	 SHORT $LN4@ProcessBuf
  00020	48		 dec	 eax
  00021	75 41		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 67   : 	case OT_DELAY:
; 68   : 	case OT_ACTIVE:
; 69   : 		ioBuff::ProcessBuff( fTimePerSec );

  00023	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00028	51		 push	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 70   : 		break;

  00035	eb 2d		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 57   : 	{
; 58   : 	case OT_SWITCH:
; 59   : 		if( !CheckSwitchType( fTimePerSec ) )

  00037	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0003c	51		 push	 ecx
  0003d	8b ce		 mov	 ecx, esi
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 60   : 		{
; 61   : 			SetReserveEndBuff();

  00049	8b ce		 mov	 ecx, esi
  0004b	84 c0		 test	 al, al
  0004d	75 07		 jne	 SHORT $LN3@ProcessBuf
  0004f	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 62   : 			return;

  00054	eb 0e		 jmp	 SHORT $LN5@ProcessBuf
$LN3@ProcessBuf:

; 63   : 		}
; 64   : 
; 65   : 		CheckCallingProcess();

  00056	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 66   : 		break;

  0005b	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 71   : 	case OT_PASSIVE:
; 72   : 		CheckCallingAreaWeapon();

  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  00064	5e		 pop	 esi

; 73   : 		break;
; 74   : 	}
; 75   : }

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?ProcessBuff@ioDefenseBreakBuff@@UAEXM@Z ENDP		; ioDefenseBreakBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodefensebreakbuff.cpp
;	COMDAT ?LoadProperty@ioDefenseBreakBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$524397 = -28					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioDefenseBreakBuff@@UAEXAAVioINILoader@@@Z PROC ; ioDefenseBreakBuff::LoadProperty, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00014	57		 push	 edi

; 28   : 	ioBuff::LoadProperty( rkLoader );

  00015	56		 push	 esi
  00016	8b f9		 mov	 edi, ecx
  00018	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 29   : 
; 30   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  0001d	6a 04		 push	 4
  0001f	c7 45 e4 89 85
	98 8b		 mov	 DWORD PTR __k$524397[ebp], -1952938615 ; 8b988589H
  00026	c7 45 e8 8f 80
	8e b5		 mov	 DWORD PTR __k$524397[ebp+4], -1248952177 ; b58e808fH
  0002d	c7 45 ec 89 83
	9c 84		 mov	 DWORD PTR __k$524397[ebp+8], -2070117495 ; 849c8389H
  00034	c7 45 f0 b2 9f
	9f 8b		 mov	 DWORD PTR __k$524397[ebp+12], -1952473166 ; 8b9f9fb2H
  0003b	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$524397[ebp+16], 35225 ; 00008999H
  00041	8d 45 e4	 lea	 eax, DWORD PTR __k$524397[ebp]
  00044	c6 45 f6 00	 mov	 BYTE PTR __k$524397[ebp+18], 0
  00048	59		 pop	 ecx
$LL106@LoadProper:
  00049	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004f	83 c0 04	 add	 eax, 4
  00052	49		 dec	 ecx
  00053	75 f4		 jne	 SHORT $LL106@LoadProper
  00055	6a 10		 push	 16			; 00000010H
  00057	58		 pop	 eax
$LL103@LoadProper:
  00058	8b c8		 mov	 ecx, eax
  0005a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00060	79 05		 jns	 SHORT $LN113@LoadProper
  00062	49		 dec	 ecx
  00063	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00066	41		 inc	 ecx
$LN113@LoadProper:
  00067	b2 ed		 mov	 dl, -19			; ffffffedH
  00069	2a d1		 sub	 dl, cl
  0006b	30 54 05 e4	 xor	 BYTE PTR __k$524397[ebp+eax], dl
  0006f	40		 inc	 eax
  00070	83 f8 12	 cmp	 eax, 18			; 00000012H
  00073	7c e3		 jl	 SHORT $LL103@LoadProper
  00075	6a 00		 push	 0
  00077	8d 45 e4	 lea	 eax, DWORD PTR __k$524397[ebp]
  0007a	50		 push	 eax
  0007b	8b ce		 mov	 ecx, esi
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 31   : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	88 87 6c 09 00
	00		 mov	 BYTE PTR [edi+2412], al
  0008c	5f		 pop	 edi
  0008d	33 cd		 xor	 ecx, ebp
  0008f	5e		 pop	 esi
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	c9		 leave
  00096	c2 04 00	 ret	 4
?LoadProperty@ioDefenseBreakBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioDefenseBreakBuff::LoadProperty
_TEXT	ENDS
END
