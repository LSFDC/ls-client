; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ioTimeGrowthEndWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0TimeEndInfo@@QAE@XZ				; TimeEndInfo::TimeEndInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.h
xdata$x	SEGMENT
__unwindtable$??0TimeEndInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TimeEndInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TimeEndInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TimeEndInfo@@QAE@XZ$2
__ehfuncinfo$??0TimeEndInfo@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0TimeEndInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0TimeEndInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TimeEndInfo@@QAE@XZ PROC				; TimeEndInfo::TimeEndInfo, COMDAT
; _this$ = ecx

; 25   : 	TimeEndInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0TimeEndInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0001a	ff d7		 call	 edi
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00023	ff d7		 call	 edi
  00025	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00028	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002c	ff d7		 call	 edi

; 26   : 	{
; 27   : 		m_ClassName.Clear();

  0002e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  00034	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00037	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0003b	ff d7		 call	 edi

; 28   : 		m_IconName.Clear();

  0003d	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00040	ff d7		 call	 edi

; 29   : 		m_GrowthName.Clear();

  00042	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00045	ff d7		 call	 edi

; 30   : 
; 31   : 		m_iClassType = 0;

  00047	83 26 00	 and	 DWORD PTR [esi], 0

; 32   : 		m_iLevel = 0;

  0004a	83 66 34 00	 and	 DWORD PTR [esi+52], 0

; 33   : 
; 34   : 		m_bConfirm = false;

  0004e	c6 46 38 00	 mov	 BYTE PTR [esi+56], 0

; 35   : 	}

  00052	8b c6		 mov	 eax, esi
  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TimeEndInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0TimeEndInfo@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 14	 add	 ecx, 20			; 00000014H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0TimeEndInfo@@QAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 24	 add	 ecx, 36			; 00000024H
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0TimeEndInfo@@QAE@XZ:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0TimeEndInfo@@QAE@XZ
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0TimeEndInfo@@QAE@XZ ENDP				; TimeEndInfo::TimeEndInfo
PUBLIC	?OnProcess@ioTimeGrowthEndWnd@@MAEXM@Z		; ioTimeGrowthEndWnd::OnProcess
EXTRN	__imp_?OnProcess@ioWnd@@MAEXM@Z:PROC
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
;	COMDAT ?OnProcess@ioTimeGrowthEndWnd@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?OnProcess@ioTimeGrowthEndWnd@@MAEXM@Z PROC		; ioTimeGrowthEndWnd::OnProcess, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 109  : 	if( !IsShow() )

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0000c	84 c0		 test	 al, al
  0000e	74 13		 je	 SHORT $LN2@OnProcess

; 110  : 		return;
; 111  : 
; 112  : 	ioMovingWnd::OnProcess( fTimePerSec );

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00015	51		 push	 ecx
  00016	8b ce		 mov	 ecx, esi
  00018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnProcess@ioWnd@@MAEXM@Z
$LN2@OnProcess:
  00023	5e		 pop	 esi

; 113  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?OnProcess@ioTimeGrowthEndWnd@@MAEXM@Z ENDP		; ioTimeGrowthEndWnd::OnProcess
_TEXT	ENDS
PUBLIC	??1TimeEndInfo@@QAE@XZ				; TimeEndInfo::~TimeEndInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TimeEndInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TimeEndInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TimeEndInfo@@QAE@XZ$1
__ehfuncinfo$??1TimeEndInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1TimeEndInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1TimeEndInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TimeEndInfo@@QAE@XZ PROC				; TimeEndInfo::~TimeEndInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1TimeEndInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TimeEndInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1TimeEndInfo@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 14	 add	 ecx, 20			; 00000014H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1TimeEndInfo@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1TimeEndInfo@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1TimeEndInfo@@QAE@XZ ENDP				; TimeEndInfo::~TimeEndInfo
PUBLIC	?size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 3c		 push	 60			; 0000003cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE_NXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE_NXZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE_NXZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEAAUTimeEndInfo@@I@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEAAUTimeEndInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEAAUTimeEndInfo@@I@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEAAUTimeEndInfo@@I@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBE_NPBUTimeEndInfo@@@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBE_NPBUTimeEndInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBE_NPBUTimeEndInfo@@@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBE_NPBUTimeEndInfo@@@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXPAUTimeEndInfo@@0@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXPAUTimeEndInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXPAUTimeEndInfo@@0@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXPAUTimeEndInfo@@0@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >::~_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >::~_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >::~_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UTimeEndInfo@@@std@@QAE@XZ	; std::allocator<TimeEndInfo>::allocator<TimeEndInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UTimeEndInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UTimeEndInfo@@@std@@QAE@XZ PROC		; std::allocator<TimeEndInfo>::allocator<TimeEndInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UTimeEndInfo@@@std@@QAE@XZ ENDP		; std::allocator<TimeEndInfo>::allocator<TimeEndInfo>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 3c		 push	 60			; 0000003cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UTimeEndInfo@@@std@@QAE@ABV01@@Z	; std::allocator<TimeEndInfo>::allocator<TimeEndInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UTimeEndInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UTimeEndInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<TimeEndInfo>::allocator<TimeEndInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UTimeEndInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<TimeEndInfo>::allocator<TimeEndInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@I@Z ; std::allocator<TimeEndInfo>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@I@Z PROC ; std::allocator<TimeEndInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@I@Z ENDP ; std::allocator<TimeEndInfo>::deallocate
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UTimeEndInfo@@@std@@QBEIXZ ; std::allocator<TimeEndInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UTimeEndInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UTimeEndInfo@@@std@@QBEIXZ PROC	; std::allocator<TimeEndInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 44 44 44 04	 mov	 eax, 71582788		; 04444444H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UTimeEndInfo@@@std@@QBEIXZ ENDP	; std::allocator<TimeEndInfo>::max_size
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUTimeEndInfo@@@std@@YAPBUTimeEndInfo@@ABU1@@Z ; std::addressof<TimeEndInfo const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUTimeEndInfo@@@std@@YAPBUTimeEndInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUTimeEndInfo@@@std@@YAPBUTimeEndInfo@@ABU1@@Z PROC ; std::addressof<TimeEndInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUTimeEndInfo@@@std@@YAPBUTimeEndInfo@@ABU1@@Z ENDP ; std::addressof<TimeEndInfo const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UTimeEndInfo@@@std@@YAPAUTimeEndInfo@@IPAU1@@Z ; std::_Allocate<TimeEndInfo>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UTimeEndInfo@@@std@@YAPAUTimeEndInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T506923 = -12						; size = 12
$T506928 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UTimeEndInfo@@@std@@YAPAUTimeEndInfo@@IPAU1@@Z PROC ; std::_Allocate<TimeEndInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 44 44 44
	04		 cmp	 ecx, 71582788		; 04444444H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T506928[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T506928[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T506923[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T506923[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506923[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UTimeEndInfo@@@std@@YAPAUTimeEndInfo@@IPAU1@@Z ENDP ; std::_Allocate<TimeEndInfo>
_TEXT	ENDS
PUBLIC	??$forward@AAUTimeEndInfo@@@std@@YAAAUTimeEndInfo@@AAU1@@Z ; std::forward<TimeEndInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUTimeEndInfo@@@std@@YAAAUTimeEndInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUTimeEndInfo@@@std@@YAAAUTimeEndInfo@@AAU1@@Z PROC ; std::forward<TimeEndInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUTimeEndInfo@@@std@@YAAAUTimeEndInfo@@AAU1@@Z ENDP ; std::forward<TimeEndInfo &>
_TEXT	ENDS
PUBLIC	??$forward@ABUTimeEndInfo@@@std@@YAABUTimeEndInfo@@ABU1@@Z ; std::forward<TimeEndInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUTimeEndInfo@@@std@@YAABUTimeEndInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUTimeEndInfo@@@std@@YAABUTimeEndInfo@@ABU1@@Z PROC ; std::forward<TimeEndInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUTimeEndInfo@@@std@@YAABUTimeEndInfo@@ABU1@@Z ENDP ; std::forward<TimeEndInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UTimeEndInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTimeEndInfo@@0@Z ; std::_Ptr_cat<TimeEndInfo,TimeEndInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UTimeEndInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTimeEndInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UTimeEndInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTimeEndInfo@@0@Z PROC ; std::_Ptr_cat<TimeEndInfo,TimeEndInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UTimeEndInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTimeEndInfo@@0@Z ENDP ; std::_Ptr_cat<TimeEndInfo,TimeEndInfo>
_TEXT	ENDS
PUBLIC	??0TimeEndInfo@@QAE@ABU0@@Z			; TimeEndInfo::TimeEndInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TimeEndInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TimeEndInfo@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TimeEndInfo@@QAE@ABU0@@Z$1
__ehfuncinfo$??0TimeEndInfo@@QAE@ABU0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TimeEndInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0TimeEndInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0TimeEndInfo@@QAE@ABU0@@Z PROC			; TimeEndInfo::TimeEndInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0TimeEndInfo@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 07		 mov	 eax, DWORD PTR [edi]
  00016	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001c	89 06		 mov	 DWORD PTR [esi], eax
  0001e	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00021	50		 push	 eax
  00022	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00025	ff d3		 call	 ebx
  00027	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002e	50		 push	 eax
  0002f	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00032	ff d3		 call	 ebx
  00034	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00037	50		 push	 eax
  00038	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0003b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003f	ff d3		 call	 ebx
  00041	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00044	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00047	8a 47 38	 mov	 al, BYTE PTR [edi+56]
  0004a	88 46 38	 mov	 BYTE PTR [esi+56], al
  0004d	8b c6		 mov	 eax, esi
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TimeEndInfo@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0TimeEndInfo@@QAE@ABU0@@Z$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 14	 add	 ecx, 20			; 00000014H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0TimeEndInfo@@QAE@ABU0@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0TimeEndInfo@@QAE@ABU0@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0TimeEndInfo@@QAE@ABU0@@Z ENDP			; TimeEndInfo::TimeEndInfo
PUBLIC	??4TimeEndInfo@@QAEAAU0@ABU0@@Z			; TimeEndInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4TimeEndInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4TimeEndInfo@@QAEAAU0@ABU0@@Z PROC			; TimeEndInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000f	8b 07		 mov	 eax, DWORD PTR [edi]
  00011	8b f1		 mov	 esi, ecx
  00013	89 06		 mov	 DWORD PTR [esi], eax
  00015	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00018	50		 push	 eax
  00019	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0001c	ff d3		 call	 ebx
  0001e	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00021	50		 push	 eax
  00022	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00025	ff d3		 call	 ebx
  00027	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  0002a	50		 push	 eax
  0002b	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0002e	ff d3		 call	 ebx
  00030	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00033	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00036	8a 47 38	 mov	 al, BYTE PTR [edi+56]
  00039	88 46 38	 mov	 BYTE PTR [esi+56], al
  0003c	5f		 pop	 edi
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??4TimeEndInfo@@QAEAAU0@ABU0@@Z ENDP			; TimeEndInfo::operator=
_TEXT	ENDS
PUBLIC	??$move@AAUTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z ; std::move<TimeEndInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z PROC ; std::move<TimeEndInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z ENDP ; std::move<TimeEndInfo &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUTimeEndInfo@@@std@@YAPAUTimeEndInfo@@PAU1@@Z ; std::_Val_type<TimeEndInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUTimeEndInfo@@@std@@YAPAUTimeEndInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUTimeEndInfo@@@std@@YAPAUTimeEndInfo@@PAU1@@Z PROC ; std::_Val_type<TimeEndInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUTimeEndInfo@@@std@@YAPAUTimeEndInfo@@PAU1@@Z ENDP ; std::_Val_type<TimeEndInfo *>
_TEXT	ENDS
PUBLIC	??_GTimeEndInfo@@QAEPAXI@Z			; TimeEndInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GTimeEndInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTimeEndInfo@@QAEPAXI@Z PROC				; TimeEndInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GTimeEndInfo@@QAEPAXI@Z ENDP				; TimeEndInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$forward@UTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z ; std::forward<TimeEndInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z PROC ; std::forward<TimeEndInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UTimeEndInfo@@@std@@YA$$QAUTimeEndInfo@@AAU1@@Z ENDP ; std::forward<TimeEndInfo>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?ShowEndInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ	; ioTimeGrowthEndWnd::ShowEndInfoWnd
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
;	COMDAT ?ShowEndInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ
_TEXT	SEGMENT
?ShowEndInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ PROC		; ioTimeGrowthEndWnd::ShowEndInfoWnd, COMDAT
; _this$ = ecx

; 74   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 75   : 	if( m_vEndInfoList.empty() )

  00003	8b 86 a0 01 00
	00		 mov	 eax, DWORD PTR [esi+416]
  00009	3b 86 a4 01 00
	00		 cmp	 eax, DWORD PTR [esi+420]
  0000f	0f 84 85 00 00
	00		 je	 $LN1@ShowEndInf

; 76   : 		return;
; 77   : 	
; 78   : 	m_iCurInfoCnt = 1;
; 79   : 
; 80   : 	SAFEDELETE( m_pIcon );

  00015	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  0001b	33 c0		 xor	 eax, eax
  0001d	40		 inc	 eax
  0001e	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax
  00024	85 c9		 test	 ecx, ecx
  00026	74 0d		 je	 SHORT $LN3@ShowEndInf
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	50		 push	 eax
  0002b	ff 52 40	 call	 DWORD PTR [edx+64]
  0002e	83 a6 98 01 00
	00 00		 and	 DWORD PTR [esi+408], 0
$LN3@ShowEndInf:

; 81   : 
; 82   : 	int iCurIndex = m_iCurInfoCnt - 1;

  00035	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  0003b	49		 dec	 ecx

; 83   : 	if( COMPARE( iCurIndex, 0, (int)m_vEndInfoList.size() ) )

  0003c	78 47		 js	 SHORT $LN2@ShowEndInf
  0003e	8b 86 a4 01 00
	00		 mov	 eax, DWORD PTR [esi+420]
  00044	2b 86 a0 01 00
	00		 sub	 eax, DWORD PTR [esi+416]
  0004a	53		 push	 ebx
  0004b	6a 3c		 push	 60			; 0000003cH
  0004d	99		 cdq
  0004e	5b		 pop	 ebx
  0004f	f7 fb		 idiv	 ebx
  00051	5b		 pop	 ebx
  00052	3b c8		 cmp	 ecx, eax
  00054	7d 2f		 jge	 SHORT $LN2@ShowEndInf

; 84   : 	{
; 85   : 		m_pIcon = g_UIImageSetMgr.CreateImageByFullName( m_vEndInfoList[iCurIndex].m_IconName );

  00056	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00059	03 8e a0 01 00
	00		 add	 ecx, DWORD PTR [esi+416]
  0005f	6a 00		 push	 0
  00061	83 c1 14	 add	 ecx, 20			; 00000014H
  00064	51		 push	 ecx
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0006b	8b c8		 mov	 ecx, eax
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z

; 86   : 
; 87   : 		/*
; 88   : 		if( m_vEndInfoList[iCurIndex].m_bConfirm )
; 89   : 		{
; 90   : 			ShowChildWnd( ID_SUCCESS );
; 91   : 			HideChildWnd( ID_FAIL );
; 92   : 		}
; 93   : 		else
; 94   : 		{
; 95   : 			HideChildWnd( ID_SUCCESS );
; 96   : 			ShowChildWnd( ID_FAIL );
; 97   : 		}
; 98   : 		*/
; 99   : 
; 100  : 		HideChildWnd( ID_FAIL );

  00073	6a 00		 push	 0
  00075	6a 02		 push	 2
  00077	8b ce		 mov	 ecx, esi
  00079	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
$LN2@ShowEndInf:

; 101  : 	}
; 102  : 
; 103  : 	if( !IsShow() )

  00085	8b ce		 mov	 ecx, esi
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0008d	84 c0		 test	 al, al
  0008f	75 09		 jne	 SHORT $LN1@ShowEndInf

; 104  : 		ShowWnd();

  00091	8b ce		 mov	 ecx, esi
  00093	5e		 pop	 esi
  00094	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
$LN1@ShowEndInf:
  0009a	5e		 pop	 esi

; 105  : }

  0009b	c3		 ret	 0
?ShowEndInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ ENDP		; ioTimeGrowthEndWnd::ShowEndInfoWnd
_TEXT	ENDS
PUBLIC	?NextInfoWnd@ioTimeGrowthEndWnd@@IAEXXZ		; ioTimeGrowthEndWnd::NextInfoWnd
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?NextInfoWnd@ioTimeGrowthEndWnd@@IAEXXZ
_TEXT	SEGMENT
?NextInfoWnd@ioTimeGrowthEndWnd@@IAEXXZ PROC		; ioTimeGrowthEndWnd::NextInfoWnd, COMDAT
; _this$ = ecx

; 247  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 248  : 	m_iCurInfoCnt++;

  00003	ff 86 94 01 00
	00		 inc	 DWORD PTR [esi+404]
  00009	8b 86 94 01 00
	00		 mov	 eax, DWORD PTR [esi+404]

; 249  : 	if( m_iCurInfoCnt > m_iMaxInfoCnt )

  0000f	3b 86 90 01 00
	00		 cmp	 eax, DWORD PTR [esi+400]
  00015	7e 07		 jle	 SHORT $LN3@NextInfoWn
  00017	5e		 pop	 esi

; 250  : 	{
; 251  : 		HideWnd();

  00018	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN3@NextInfoWn:

; 252  : 		return;
; 253  : 	}
; 254  : 
; 255  : 	SAFEDELETE( m_pIcon );

  0001e	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  00024	85 c9		 test	 ecx, ecx
  00026	74 0e		 je	 SHORT $LN2@NextInfoWn
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	6a 01		 push	 1
  0002c	ff 50 40	 call	 DWORD PTR [eax+64]
  0002f	83 a6 98 01 00
	00 00		 and	 DWORD PTR [esi+408], 0
$LN2@NextInfoWn:

; 256  : 
; 257  : 	int iCurIndex = m_iCurInfoCnt - 1;

  00036	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  0003c	49		 dec	 ecx

; 258  : 	if( COMPARE( iCurIndex, 0, (int)m_vEndInfoList.size() ) )

  0003d	78 47		 js	 SHORT $LN1@NextInfoWn
  0003f	8b 86 a4 01 00
	00		 mov	 eax, DWORD PTR [esi+420]
  00045	2b 86 a0 01 00
	00		 sub	 eax, DWORD PTR [esi+416]
  0004b	53		 push	 ebx
  0004c	6a 3c		 push	 60			; 0000003cH
  0004e	99		 cdq
  0004f	5b		 pop	 ebx
  00050	f7 fb		 idiv	 ebx
  00052	5b		 pop	 ebx
  00053	3b c8		 cmp	 ecx, eax
  00055	7d 2f		 jge	 SHORT $LN1@NextInfoWn

; 259  : 	{
; 260  : 		m_pIcon = g_UIImageSetMgr.CreateImageByFullName( m_vEndInfoList[iCurIndex].m_IconName );

  00057	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  0005a	03 8e a0 01 00
	00		 add	 ecx, DWORD PTR [esi+416]
  00060	6a 00		 push	 0
  00062	83 c1 14	 add	 ecx, 20			; 00000014H
  00065	51		 push	 ecx
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0006c	8b c8		 mov	 ecx, eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z

; 261  : 
; 262  : 		/*
; 263  : 		if( m_vEndInfoList[iCurIndex].m_bConfirm )
; 264  : 		{
; 265  : 			ShowChildWnd( ID_SUCCESS );
; 266  : 			HideChildWnd( ID_FAIL );
; 267  : 		}
; 268  : 		else
; 269  : 		{
; 270  : 			HideChildWnd( ID_SUCCESS );
; 271  : 			ShowChildWnd( ID_FAIL );
; 272  : 		}
; 273  : 		*/
; 274  : 
; 275  : 		HideChildWnd( ID_FAIL );

  00074	6a 00		 push	 0
  00076	6a 02		 push	 2
  00078	8b ce		 mov	 ecx, esi
  0007a	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
$LN1@NextInfoWn:
  00086	5e		 pop	 esi

; 276  : 	}
; 277  : }

  00087	c3		 ret	 0
?NextInfoWnd@ioTimeGrowthEndWnd@@IAEXXZ ENDP		; ioTimeGrowthEndWnd::NextInfoWnd
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@V?$allocator@UTimeEndInfo@@@1@@Z ; std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@V?$allocator@UTimeEndInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@V?$allocator@UTimeEndInfo@@@1@@Z PROC ; std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@V?$allocator@UTimeEndInfo@@@1@@Z ENDP ; std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 44 44 44 04	 mov	 eax, 71582788		; 04444444H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEII@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 3c		 push	 60			; 0000003cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 44 44 44 04	 mov	 edx, 71582788		; 04444444H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UTimeEndInfo@@@std@@QAEPAUTimeEndInfo@@I@Z ; std::allocator<TimeEndInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UTimeEndInfo@@@std@@QAEPAUTimeEndInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UTimeEndInfo@@@std@@QAEPAUTimeEndInfo@@I@Z PROC ; std::allocator<TimeEndInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UTimeEndInfo@@@std@@YAPAUTimeEndInfo@@IPAU1@@Z ; std::_Allocate<TimeEndInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UTimeEndInfo@@@std@@QAEPAUTimeEndInfo@@I@Z ENDP ; std::allocator<TimeEndInfo>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z ; std::allocator<TimeEndInfo>::construct<TimeEndInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z
_TEXT	SEGMENT
$T507093 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z PROC ; std::allocator<TimeEndInfo>::construct<TimeEndInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507093[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0TimeEndInfo@@QAE@ABU0@@Z
$LN3@construct:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507093[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUTimeEndInfo@@@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@AAU2@@Z ENDP ; std::allocator<TimeEndInfo>::construct<TimeEndInfo &>
PUBLIC	??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<TimeEndInfo *,TimeEndInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<TimeEndInfo *,TimeEndInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4TimeEndInfo@@QAEAAU0@ABU0@@Z
  00012	83 45 10 3c	 add	 DWORD PTR __Dest$[ebp], 60 ; 0000003cH
  00016	83 c6 3c	 add	 esi, 60			; 0000003cH
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<TimeEndInfo *,TimeEndInfo *>
_TEXT	ENDS
PUBLIC	??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z ; std::_Construct<TimeEndInfo,TimeEndInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z
_TEXT	SEGMENT
$T507121 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z PROC ; std::_Construct<TimeEndInfo,TimeEndInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T507121[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0TimeEndInfo@@QAE@ABU0@@Z
$LN3@Construct:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507121[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z ENDP ; std::_Construct<TimeEndInfo,TimeEndInfo const &>
PUBLIC	??$_Destroy@UTimeEndInfo@@@std@@YAXPAUTimeEndInfo@@@Z ; std::_Destroy<TimeEndInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UTimeEndInfo@@@std@@YAXPAUTimeEndInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UTimeEndInfo@@@std@@YAXPAUTimeEndInfo@@@Z PROC ; std::_Destroy<TimeEndInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	e9 00 00 00 00	 jmp	 ??1TimeEndInfo@@QAE@XZ
??$_Destroy@UTimeEndInfo@@@std@@YAXPAUTimeEndInfo@@@Z ENDP ; std::_Destroy<TimeEndInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z ; std::allocator<TimeEndInfo>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z
_TEXT	SEGMENT
$T507148 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z PROC ; std::allocator<TimeEndInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507148[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0TimeEndInfo@@QAE@ABU0@@Z
$LN3@construct@2:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507148[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@$$QAU3@@Z ENDP ; std::allocator<TimeEndInfo>::construct
PUBLIC	?IsEmpty@ioComplexStringPrinter@@QBE_NXZ	; ioComplexStringPrinter::IsEmpty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocomplexstringprinter.h
;	COMDAT ?IsEmpty@ioComplexStringPrinter@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@ioComplexStringPrinter@@QBE_NXZ PROC		; ioComplexStringPrinter::IsEmpty, COMDAT
; _this$ = ecx

; 124  : 	inline bool IsEmpty() const { return m_vPieceList.empty(); }

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00006	f7 d8		 neg	 eax
  00008	1b c0		 sbb	 eax, eax
  0000a	40		 inc	 eax
  0000b	c3		 ret	 0
?IsEmpty@ioComplexStringPrinter@@QBE_NXZ ENDP		; ioComplexStringPrinter::IsEmpty
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddRenderImage@ioTimeGrowthEndWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; ioTimeGrowthEndWnd::AddRenderImage
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
;	COMDAT ?AddRenderImage@ioTimeGrowthEndWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__t$507192 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@ioTimeGrowthEndWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; ioTimeGrowthEndWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pImage$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 53   : 	if( szType == "IconBack" )

  00019	6a 02		 push	 2
  0001b	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001e	c7 45 ec a4 8f
	84 84		 mov	 DWORD PTR __t$507192[ebp], -2071687260 ; 84848fa4H
  00025	c7 45 f0 af 8d
	88 81		 mov	 DWORD PTR __t$507192[ebp+4], -2121757265 ; 81888dafH
  0002c	8d 45 ec	 lea	 eax, DWORD PTR __t$507192[ebp]
  0002f	c6 45 f4 00	 mov	 BYTE PTR __t$507192[ebp+8], 0
  00033	59		 pop	 ecx
$LL111@AddRenderI:
  00034	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003a	83 c0 04	 add	 eax, 4
  0003d	49		 dec	 ecx
  0003e	75 f4		 jne	 SHORT $LL111@AddRenderI
  00040	8b cf		 mov	 ecx, edi
  00042	8d 75 ec	 lea	 esi, DWORD PTR __t$507192[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderI:
  0004b	8a 08		 mov	 cl, BYTE PTR [eax]
  0004d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0004f	75 1a		 jne	 SHORT $LN119@AddRenderI
  00051	84 c9		 test	 cl, cl
  00053	74 12		 je	 SHORT $LN120@AddRenderI
  00055	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00058	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0005b	75 0e		 jne	 SHORT $LN119@AddRenderI
  0005d	83 c0 02	 add	 eax, 2
  00060	83 c6 02	 add	 esi, 2
  00063	84 c9		 test	 cl, cl
  00065	75 e4		 jne	 SHORT $LL118@AddRenderI
$LN120@AddRenderI:
  00067	33 c0		 xor	 eax, eax
  00069	eb 05		 jmp	 SHORT $LN121@AddRenderI
$LN119@AddRenderI:
  0006b	1b c0		 sbb	 eax, eax
  0006d	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderI:
  00070	85 c0		 test	 eax, eax
  00072	75 23		 jne	 SHORT $LN3@AddRenderI

; 54   : 	{
; 55   : 		SAFEDELETE( m_pIconBack );

  00074	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00077	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0e		 je	 SHORT $LN2@AddRenderI
  00081	8b 01		 mov	 eax, DWORD PTR [ecx]
  00083	6a 01		 push	 1
  00085	ff 50 40	 call	 DWORD PTR [eax+64]
  00088	83 a6 9c 01 00
	00 00		 and	 DWORD PTR [esi+412], 0
$LN2@AddRenderI:

; 56   : 		m_pIconBack = pImage;

  0008f	89 9e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ebx

; 57   : 	}
; 58   : 	else

  00095	eb 0b		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 59   : 	{
; 60   : 		ioWnd::AddRenderImage( szType, pImage );	

  00097	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0009a	53		 push	 ebx
  0009b	57		 push	 edi
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 61   : 	}	
; 62   : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5b		 pop	 ebx
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	c9		 leave
  000b0	c2 08 00	 ret	 8
?AddRenderImage@ioTimeGrowthEndWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; ioTimeGrowthEndWnd::AddRenderImage
_TEXT	ENDS
PUBLIC	??_C@_02OLOALJBP@?$CL0?$AA@			; `string'
PUBLIC	??_C@_02PCPLIIFO@?$CL1?$AA@			; `string'
PUBLIC	__real@3f266666
PUBLIC	??_C@_0BN@IJOOFMBN@ioTimeGrowthEndWnd?3?3OnRender?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?OnRender@ioTimeGrowthEndWnd@@MAEXXZ		; ioTimeGrowthEndWnd::OnRender
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_02OLOALJBP@?$CL0?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_02OLOALJBP@?$CL0?$AA@ DB '+0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCPLIIFO@?$CL1?$AA@
CONST	SEGMENT
??_C@_02PCPLIIFO@?$CL1?$AA@ DB '+1', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_C@_0BN@IJOOFMBN@ioTimeGrowthEndWnd?3?3OnRender?$AA@
CONST	SEGMENT
??_C@_0BN@IJOOFMBN@ioTimeGrowthEndWnd?3?3OnRender?$AA@ DB 'ioTimeGrowthEn'
	DB	'dWnd::OnRender', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ$0
__ehfuncinfo$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
xdata$x	ENDS
;	COMDAT ?OnRender@ioTimeGrowthEndWnd@@MAEXXZ
_TEXT	SEGMENT
_iXPos$ = -124						; size = 4
tv478 = -120						; size = 4
_iYPos$ = -116						; size = 4
_kPrinter$ = -112					; size = 96
__$EHRec$ = -12						; size = 12
?OnRender@ioTimeGrowthEndWnd@@MAEXXZ PROC		; ioTimeGrowthEndWnd::OnRender, COMDAT
; _this$ = ecx

; 116  : {

  00000	6a 70		 push	 112			; 00000070H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx

; 117  : 	ioWnd::OnRender();

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 118  : 
; 119  : 	int iXPos = GetDerivedPosX();

  00014	8b ce		 mov	 ecx, esi
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ
  0001c	8b f8		 mov	 edi, eax

; 120  : 	int iYPos = GetDerivedPosY();

  0001e	8b ce		 mov	 ecx, esi
  00020	89 7d 84	 mov	 DWORD PTR _iXPos$[ebp], edi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 121  : 
; 122  : 	enum
; 123  : 	{
; 124  : 		ICON_X		= 102,
; 125  : 		ICON_Y		= 98,
; 126  : 
; 127  : 		DESC_X		= 102,
; 128  : 		DESC_Y		= 145,
; 129  : 
; 130  : 		LINE_GAP	= 17,
; 131  : 	};
; 132  : 
; 133  : 	if( m_pIconBack )

  00029	33 db		 xor	 ebx, ebx
  0002b	8b d0		 mov	 edx, eax
  0002d	89 55 8c	 mov	 DWORD PTR _iYPos$[ebp], edx
  00030	39 9e 9c 01 00
	00		 cmp	 DWORD PTR [esi+412], ebx
  00036	74 37		 je	 SHORT $LN10@OnRender

; 134  : 		m_pIconBack->Render( iXPos+ICON_X, iYPos+ICON_Y, UI_RENDER_MULTIPLY );

  00038	8b 86 9c 01 00
	00		 mov	 eax, DWORD PTR [esi+412]
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	53		 push	 ebx
  00041	53		 push	 ebx
  00042	53		 push	 ebx
  00043	6a 08		 push	 8
  00045	51		 push	 ecx
  00046	83 c2 62	 add	 edx, 98			; 00000062H
  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00050	51		 push	 ecx
  00051	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00057	8d 57 66	 lea	 edx, DWORD PTR [edi+102]
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	8b c8		 mov	 ecx, eax
  0005f	8b 00		 mov	 eax, DWORD PTR [eax]
  00061	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	ff 10		 call	 DWORD PTR [eax]
  0006c	8b 55 8c	 mov	 edx, DWORD PTR _iYPos$[ebp]
$LN10@OnRender:

; 135  : 
; 136  : 	if( m_pIcon )

  0006f	39 9e 98 01 00
	00		 cmp	 DWORD PTR [esi+408], ebx
  00075	74 2f		 je	 SHORT $LN9@OnRender

; 137  : 		m_pIcon->Render( iXPos+ICON_X, iYPos+ICON_Y );

  00077	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  0007d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007f	53		 push	 ebx
  00080	53		 push	 ebx
  00081	53		 push	 ebx
  00082	53		 push	 ebx
  00083	0f 57 c0	 xorps	 xmm0, xmm0
  00086	51		 push	 ecx
  00087	83 c2 62	 add	 edx, 98			; 00000062H
  0008a	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0008e	51		 push	 ecx
  0008f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00095	83 c7 66	 add	 edi, 102		; 00000066H
  00098	0f 57 c0	 xorps	 xmm0, xmm0
  0009b	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	ff 10		 call	 DWORD PTR [eax]
$LN9@OnRender:

; 138  : 
; 139  : 
; 140  : 	// Text
; 141  : 	int iCurArray = m_iCurInfoCnt - 1;

  000a6	8b be 94 01 00
	00		 mov	 edi, DWORD PTR [esi+404]
  000ac	4f		 dec	 edi

; 142  : 	if( !COMPARE( iCurArray, 0, (int)m_vEndInfoList.size() ) )

  000ad	0f 88 3f 02 00
	00		 js	 $LN7@OnRender
  000b3	8b 86 a4 01 00
	00		 mov	 eax, DWORD PTR [esi+420]
  000b9	2b 86 a0 01 00
	00		 sub	 eax, DWORD PTR [esi+416]
  000bf	6a 3c		 push	 60			; 0000003cH
  000c1	99		 cdq
  000c2	59		 pop	 ecx
  000c3	f7 f9		 idiv	 ecx
  000c5	3b f8		 cmp	 edi, eax
  000c7	0f 8d 25 02 00
	00		 jge	 $LN7@OnRender

; 143  : 		return;
; 144  : 
; 145  : 	ioComplexStringPrinter kPrinter[3];

  000cd	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  000d2	68 00 00 00 00	 push	 OFFSET ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  000d7	6a 03		 push	 3
  000d9	6a 20		 push	 32			; 00000020H
  000db	8d 45 90	 lea	 eax, DWORD PTR _kPrinter$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z

; 146  : 	kPrinter[0].SetTextStyle( TS_NORMAL );

  000e4	53		 push	 ebx
  000e5	8d 4d 90	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  000e8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000eb	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 147  : 	kPrinter[0].SetBkColor( 0, 0, 0 );	

  000f0	53		 push	 ebx
  000f1	53		 push	 ebx
  000f2	53		 push	 ebx
  000f3	8d 4d 90	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  000f6	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 148  : 	kPrinter[0].SetTextColor( TCT_DEFAULT_GRAY );

  000fb	68 6e 6e 6e ff	 push	 -9539986		; ff6e6e6eH
  00100	8d 4d 90	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00103	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 149  : 	kPrinter[0].AddTextPiece( FONT_SIZE_13, STR(1), m_vEndInfoList[iCurArray].m_ClassName.c_str() );

  00108	6b ff 3c	 imul	 edi, 60			; 0000003cH
  0010b	8b 8e a0 01 00
	00		 mov	 ecx, DWORD PTR [esi+416]
  00111	8d 4c 39 04	 lea	 ecx, DWORD PTR [ecx+edi+4]
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0011b	50		 push	 eax
  0011c	53		 push	 ebx
  0011d	6a 01		 push	 1
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IJOOFMBN@ioTimeGrowthEndWnd?3?3OnRender?$AA@
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0012f	8b c8		 mov	 ecx, eax
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00137	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0013f	50		 push	 eax
  00140	51		 push	 ecx
  00141	8d 4d 90	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 150  : 
; 151  : 	kPrinter[1].SetTextStyle( TS_NORMAL );

  0014e	53		 push	 ebx
  0014f	8d 4d b0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  00152	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 152  : 	kPrinter[1].SetBkColor( 0, 0, 0 );	

  00157	53		 push	 ebx
  00158	53		 push	 ebx
  00159	53		 push	 ebx
  0015a	8d 4d b0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  0015d	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 153  : 	kPrinter[1].SetTextColor( TCT_DEFAULT_DARKGRAY );

  00162	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  00167	8d 4d b0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  0016a	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 154  : 	kPrinter[1].AddTextPiece( FONT_SIZE_13, STR(2), m_vEndInfoList[iCurArray].m_GrowthName.c_str() );

  0016f	8b 8e a0 01 00
	00		 mov	 ecx, DWORD PTR [esi+416]
  00175	8d 4c 39 24	 lea	 ecx, DWORD PTR [ecx+edi+36]
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0017f	50		 push	 eax
  00180	53		 push	 ebx
  00181	6a 02		 push	 2
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IJOOFMBN@ioTimeGrowthEndWnd?3?3OnRender?$AA@
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00193	8b c8		 mov	 ecx, eax
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0019b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  001a3	50		 push	 eax
  001a4	51		 push	 ecx
  001a5	8d 4d b0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 155  : 	
; 156  : 	if( m_vEndInfoList[iCurArray].m_bConfirm )

  001b2	8b 86 a0 01 00
	00		 mov	 eax, DWORD PTR [esi+416]

; 157  : 	{
; 158  : 		kPrinter[1].SetTextColor( TCT_DEFAULT_GREEN );

  001b8	8d 4d b0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  001bb	38 5c 07 38	 cmp	 BYTE PTR [edi+eax+56], bl
  001bf	74 4c		 je	 SHORT $LN6@OnRender
  001c1	be 22 72 11 ff	 mov	 esi, -15633886		; ff117222H
  001c6	56		 push	 esi
  001c7	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 159  : 		kPrinter[1].AddTextPiece( FONT_SIZE_13, "+1" );

  001cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_02PCPLIIFO@?$CL1?$AA@
  001d9	51		 push	 ecx
  001da	8d 45 b0	 lea	 eax, DWORD PTR _kPrinter$[ebp+32]
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  001e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 160  : 
; 161  : 		kPrinter[2].SetTextStyle( TS_NORMAL );

  001eb	53		 push	 ebx
  001ec	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+64]
  001ef	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 162  : 		kPrinter[2].SetBkColor( 0, 0, 0 );

  001f4	53		 push	 ebx
  001f5	53		 push	 ebx
  001f6	53		 push	 ebx
  001f7	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+64]
  001fa	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 163  : 		kPrinter[2].SetTextColor( TCT_DEFAULT_GREEN );

  001ff	56		 push	 esi
  00200	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+64]
  00203	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 164  : 		kPrinter[2].AddTextPiece( FONT_SIZE_13, STR(3) );

  00208	53		 push	 ebx
  00209	6a 03		 push	 3

; 165  : 	}
; 166  : 	else

  0020b	eb 4d		 jmp	 SHORT $LN29@OnRender
$LN6@OnRender:

; 167  : 	{
; 168  : 		kPrinter[1].SetTextColor( TCT_DEFAULT_GREEN );

  0020d	68 22 72 11 ff	 push	 -15633886		; ff117222H
  00212	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 169  : 		kPrinter[1].AddTextPiece( FONT_SIZE_13, "+0" );

  00217	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0021f	68 00 00 00 00	 push	 OFFSET ??_C@_02OLOALJBP@?$CL0?$AA@
  00224	51		 push	 ecx
  00225	8d 45 b0	 lea	 eax, DWORD PTR _kPrinter$[ebp+32]
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  00233	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 
; 171  : 		kPrinter[2].SetTextStyle( TS_NORMAL );

  00236	53		 push	 ebx
  00237	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+64]
  0023a	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 172  : 		kPrinter[2].SetBkColor( 0, 0, 0 );	

  0023f	53		 push	 ebx
  00240	53		 push	 ebx
  00241	53		 push	 ebx
  00242	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+64]
  00245	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 173  : 		kPrinter[2].SetTextColor( TCT_DEFAULT_RED );

  0024a	68 00 16 b9 ff	 push	 -4647424		; ffb91600H
  0024f	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp+64]
  00252	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 174  : 		kPrinter[2].AddTextPiece( FONT_SIZE_13, STR(4) );

  00257	53		 push	 ebx
  00258	6a 04		 push	 4
$LN29@OnRender:
  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IJOOFMBN@ioTimeGrowthEndWnd?3?3OnRender?$AA@
  00264	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0026a	8b c8		 mov	 ecx, eax
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0027a	50		 push	 eax
  0027b	51		 push	 ecx
  0027c	8d 45 d0	 lea	 eax, DWORD PTR _kPrinter$[ebp+64]
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 175  : 	}
; 176  : 
; 177  : 	for( int i=0; i < 3; ++i )

  0028a	8b 7d 8c	 mov	 edi, DWORD PTR _iYPos$[ebp]
  0028d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00290	6a 03		 push	 3
  00292	8d 75 9c	 lea	 esi, DWORD PTR _kPrinter$[ebp+12]
  00295	81 c7 91 00 00
	00		 add	 edi, 145		; 00000091H
  0029b	5b		 pop	 ebx
$LL4@OnRender:

; 178  : 	{
; 179  : 		if( kPrinter[i].IsEmpty() )

  0029c	8b 06		 mov	 eax, DWORD PTR [esi]
  0029e	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  002a1	74 30		 je	 SHORT $LN3@OnRender

; 180  : 			continue;
; 181  : 
; 182  : 		kPrinter[i].PrintFullText( iXPos+DESC_X, iYPos+DESC_Y+(LINE_GAP*i), TAT_CENTER );

  002a3	8b 45 84	 mov	 eax, DWORD PTR _iXPos$[ebp]
  002a6	68 ff 00 00 00	 push	 255			; 000000ffH
  002ab	6a 01		 push	 1
  002ad	51		 push	 ecx
  002ae	0f 57 c0	 xorps	 xmm0, xmm0
  002b1	51		 push	 ecx
  002b2	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  002b6	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002bc	83 c0 66	 add	 eax, 102		; 00000066H
  002bf	0f 57 c0	 xorps	 xmm0, xmm0
  002c2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002c6	8d 4e f4	 lea	 ecx, DWORD PTR [esi-12]
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText
$LN3@OnRender:

; 175  : 	}
; 176  : 
; 177  : 	for( int i=0; i < 3; ++i )

  002d3	83 c7 11	 add	 edi, 17			; 00000011H
  002d6	83 c6 20	 add	 esi, 32			; 00000020H
  002d9	4b		 dec	 ebx
  002da	75 c0		 jne	 SHORT $LL4@OnRender

; 183  : 	}
; 184  : }

  002dc	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002e0	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  002e5	6a 03		 push	 3
  002e7	6a 20		 push	 32			; 00000020H
  002e9	8d 45 90	 lea	 eax, DWORD PTR _kPrinter$[ebp]
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
$LN7@OnRender:
  002f2	e8 00 00 00 00	 call	 __EH_epilog3_GS
  002f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  00005	6a 03		 push	 3
  00007	6a 20		 push	 32			; 00000020H
  00009	8d 45 90	 lea	 eax, DWORD PTR _kPrinter$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00012	c3		 ret	 0
__ehhandler$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRender@ioTimeGrowthEndWnd@@MAEXXZ
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRender@ioTimeGrowthEndWnd@@MAEXXZ ENDP		; ioTimeGrowthEndWnd::OnRender
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R0?AVMyInventoryWnd@@@8			; MyInventoryWnd `RTTI Type Descriptor'
PUBLIC	?iwm_command@ioTimeGrowthEndWnd@@UAEXPAVioWnd@@HK@Z ; ioTimeGrowthEndWnd::iwm_command
EXTRN	?ShowSoldierTabDirect@MyInventoryWnd@@QAEXH@Z:PROC ; MyInventoryWnd::ShowSoldierTabDirect
EXTRN	__imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z:PROC
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioWnd@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVMyInventoryWnd@@@8
_DATA	SEGMENT
??_R0?AVMyInventoryWnd@@@8 DD FLAT:??_7type_info@@6B@	; MyInventoryWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMyInventoryWnd@@', 00H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
_DATA	ENDS
;	COMDAT ?iwm_command@ioTimeGrowthEndWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pInvenWnd$505568 = 8					; size = 4
_pWnd$ = 8						; size = 4
_iClassType$505572 = 12					; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@ioTimeGrowthEndWnd@@UAEXPAVioWnd@@HK@Z PROC ; ioTimeGrowthEndWnd::iwm_command, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 193  : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 194  : 
; 195  : 	switch( dwID )

  0000f	85 c0		 test	 eax, eax
  00011	0f 84 9c 00 00
	00		 je	 $LN5@iwm_comman
  00017	83 f8 02	 cmp	 eax, 2
  0001a	76 1c		 jbe	 SHORT $LN6@iwm_comman
  0001c	83 f8 03	 cmp	 eax, 3
  0001f	0f 85 8e 00 00
	00		 jne	 $LN5@iwm_comman

; 215  : 		}
; 216  : 		break;
; 217  : 	case ID_OK:
; 218  : 		if( cmd == IOBN_BTNUP )

  00025	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00029	0f 85 84 00 00
	00		 jne	 $LN5@iwm_comman

; 219  : 		{
; 220  : 			NextInfoWnd();

  0002f	8b cb		 mov	 ecx, ebx
  00031	e8 00 00 00 00	 call	 ?NextInfoWnd@ioTimeGrowthEndWnd@@IAEXXZ ; ioTimeGrowthEndWnd::NextInfoWnd

; 221  : 		}
; 222  : 		break;

  00036	eb 7b		 jmp	 SHORT $LN5@iwm_comman
$LN6@iwm_comman:

; 196  : 	{
; 197  : 	case ID_SUCCESS:
; 198  : 	case ID_FAIL:
; 199  : 		if( cmd == IOBN_BTNUP )

  00038	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0003c	75 75		 jne	 SHORT $LN5@iwm_comman

; 200  : 		{
; 201  : 			MyInventoryWnd *pInvenWnd = dynamic_cast<MyInventoryWnd*>(g_GUIMgr.FindWnd(MY_INVENTORY_WND));

  0003e	6a 00		 push	 0
  00040	68 00 00 00 00	 push	 OFFSET ??_R0?AVMyInventoryWnd@@@8
  00045	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0004a	6a 00		 push	 0
  0004c	68 96 17 00 00	 push	 6038			; 00001796H
  00051	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00056	8b c8		 mov	 ecx, eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ___RTDynamicCast
  00064	83 c4 14	 add	 esp, 20			; 00000014H
  00067	89 45 08	 mov	 DWORD PTR _pInvenWnd$505568[ebp], eax

; 202  : 			if( pInvenWnd )

  0006a	85 c0		 test	 eax, eax
  0006c	74 3d		 je	 SHORT $LN4@iwm_comman

; 203  : 			{
; 204  : 				int iClassType = -1;

  0006e	83 4d 0c ff	 or	 DWORD PTR _iClassType$505572[ebp], -1
  00072	56		 push	 esi

; 205  : 				int iCurIndex = m_iCurInfoCnt - 1;

  00073	8b b3 94 01 00
	00		 mov	 esi, DWORD PTR [ebx+404]
  00079	4e		 dec	 esi

; 206  : 				if( COMPARE( iCurIndex, 0, (int)m_vEndInfoList.size() ) )

  0007a	78 23		 js	 SHORT $LN15@iwm_comman
  0007c	8b 83 a4 01 00
	00		 mov	 eax, DWORD PTR [ebx+420]
  00082	57		 push	 edi
  00083	8b bb a0 01 00
	00		 mov	 edi, DWORD PTR [ebx+416]
  00089	2b c7		 sub	 eax, edi
  0008b	6a 3c		 push	 60			; 0000003cH
  0008d	99		 cdq
  0008e	59		 pop	 ecx
  0008f	f7 f9		 idiv	 ecx
  00091	3b f0		 cmp	 esi, eax
  00093	7d 09		 jge	 SHORT $LN16@iwm_comman

; 207  : 				{
; 208  : 					iClassType = m_vEndInfoList[iCurIndex].m_iClassType;

  00095	6b f6 3c	 imul	 esi, 60			; 0000003cH
  00098	8b 04 3e	 mov	 eax, DWORD PTR [esi+edi]
  0009b	89 45 0c	 mov	 DWORD PTR _iClassType$505572[ebp], eax
$LN16@iwm_comman:
  0009e	5f		 pop	 edi
$LN15@iwm_comman:

; 209  : 				}
; 210  : 
; 211  : 				pInvenWnd->ShowSoldierTabDirect( iClassType );

  0009f	ff 75 0c	 push	 DWORD PTR _iClassType$505572[ebp]
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _pInvenWnd$505568[ebp]
  000a5	e8 00 00 00 00	 call	 ?ShowSoldierTabDirect@MyInventoryWnd@@QAEXH@Z ; MyInventoryWnd::ShowSoldierTabDirect
  000aa	5e		 pop	 esi
$LN4@iwm_comman:

; 212  : 			}
; 213  : 
; 214  : 			HideWnd();

  000ab	8b cb		 mov	 ecx, ebx
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN5@iwm_comman:
  000b3	5b		 pop	 ebx

; 223  : 	}
; 224  : }

  000b4	5d		 pop	 ebp
  000b5	c2 0c 00	 ret	 12			; 0000000cH
?iwm_command@ioTimeGrowthEndWnd@@UAEXPAVioWnd@@HK@Z ENDP ; ioTimeGrowthEndWnd::iwm_command
_TEXT	ENDS
PUBLIC	??0?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::vector<TimeEndInfo,std::allocator<TimeEndInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::vector<TimeEndInfo,std::allocator<TimeEndInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::vector<TimeEndInfo,std::allocator<TimeEndInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Vector_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Vector_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QAE@PAUTimeEndInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::_Vector_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<TimeEndInfo,std::allocator<TimeEndInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z
_TEXT	SEGMENT
$T507424 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507424[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0TimeEndInfo@@QAE@ABU0@@Z
$LN7@Cons_val:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507424[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo &>
PUBLIC	??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00@Z ; std::_Move<TimeEndInfo *,TimeEndInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$507442 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00@Z PROC ; std::_Move<TimeEndInfo *,TimeEndInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507442[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<TimeEndInfo *,TimeEndInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00@Z ENDP ; std::_Move<TimeEndInfo *,TimeEndInfo *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@ABU3@@Z ; std::allocator<TimeEndInfo>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@ABU3@@Z PROC ; std::allocator<TimeEndInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z ; std::_Construct<TimeEndInfo,TimeEndInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@ABU3@@Z ENDP ; std::allocator<TimeEndInfo>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@@Z ; std::allocator<TimeEndInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@@Z PROC ; std::allocator<TimeEndInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ

; 214  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@UTimeEndInfo@@@std@@QAEXPAUTimeEndInfo@@@Z ENDP ; std::allocator<TimeEndInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z
_TEXT	SEGMENT
$T507477 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507477[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@2
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0TimeEndInfo@@QAE@ABU0@@Z
$LN7@Cons_val@2:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507477[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo>
PUBLIC	?begin@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@ABU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@ABU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@ABU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z ; std::_Construct<TimeEndInfo,TimeEndInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@ABU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo const &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@@Z ; std::_Dest_val<std::allocator<TimeEndInfo>,TimeEndInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@@Z PROC ; std::_Dest_val<std::allocator<TimeEndInfo>,TimeEndInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	e9 00 00 00 00	 jmp	 ??1TimeEndInfo@@QAE@XZ
??$_Dest_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@@Z ENDP ; std::_Dest_val<std::allocator<TimeEndInfo>,TimeEndInfo>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<TimeEndInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<TimeEndInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN17@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  00010	83 c6 3c	 add	 esi, 60			; 0000003cH
$LN17@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL3@Destroy_ra
  00018	5e		 pop	 esi

; 98   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<TimeEndInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo>,TimeEndInfo>
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo>,TimeEndInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 35		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@U3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo>
  0002a	83 45 10 3c	 add	 DWORD PTR __Dest$[ebp], 60 ; 0000003cH
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 3c	 add	 esi, 60			; 0000003cH
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0a		 jmp	 SHORT $LN29@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  00042	83 c6 3c	 add	 esi, 60			; 0000003cH
$LN29@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00045	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00048	75 f1		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN30@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00053	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c3		 ret	 0
$LN28@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo>,TimeEndInfo>
PUBLIC	??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@@Z ; std::_Destroy_range<std::allocator<TimeEndInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<TimeEndInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN21@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  00010	83 c6 3c	 add	 esi, 60			; 0000003cH
$LN21@Destroy_ra@2:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL7@Destroy_ra@2
  00018	5e		 pop	 esi

; 89   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UTimeEndInfo@@@std@@@std@@YAXPAUTimeEndInfo@@0AAV?$allocator@UTimeEndInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<TimeEndInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@@Z ; std::_Uninitialized_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$507716 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@@Z PROC ; std::_Uninitialized_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507716[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@U1@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo>,TimeEndInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@@Z ENDP ; std::_Uninitialized_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXPAUTimeEndInfo@@0@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXPAUTimeEndInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXPAUTimeEndInfo@@0@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  00010	83 c6 3c	 add	 esi, 60			; 0000003cH
$LN23@Destroy:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL9@Destroy
  00018	5e		 pop	 esi

; 1271 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?_Destroy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXPAUTimeEndInfo@@0@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUTimeEndInfo@@@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEPAUTimeEndInfo@@PAU2@00@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Umove<TimeEndInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUTimeEndInfo@@@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEPAUTimeEndInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUTimeEndInfo@@@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEPAUTimeEndInfo@@PAU2@00@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Umove<TimeEndInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@@Z ; std::_Uninitialized_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUTimeEndInfo@@@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEPAUTimeEndInfo@@PAU2@00@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Umove<TimeEndInfo *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@0@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T507928 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$507873 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 37		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$507873[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAUTimeEndInfo@@PAU1@@std@@YAPAUTimeEndInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<TimeEndInfo *,TimeEndInfo *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T507928[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 11		 je	 SHORT $LN36@erase
$LL52@erase:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T507928[ebp]
  00038	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  0003d	83 45 fc 3c	 add	 DWORD PTR $T507928[ebp], 60 ; 0000003cH
  00041	39 7d fc	 cmp	 DWORD PTR $T507928[ebp], edi
  00044	75 ef		 jne	 SHORT $LL52@erase
$LN36@erase:

; 1211 : 			this->_Mylast = _Ptr;

  00046	5f		 pop	 edi
  00047	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004a	5b		 pop	 ebx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0004b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	5e		 pop	 esi

; 1214 : 		}

  0004f	c9		 leave
  00050	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 27		 je	 SHORT $LN24@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0a		 jmp	 SHORT $LN28@Tidy
$LL12@Tidy:
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  0001e	83 c7 3c	 add	 edi, 60			; 0000003cH
$LN28@Tidy:
  00021	3b fb		 cmp	 edi, ebx
  00023	75 f2		 jne	 SHORT $LL12@Tidy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00025	ff 36		 push	 DWORD PTR [esi]
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	5f		 pop	 edi
  0002e	5b		 pop	 ebx
$LN24@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  0002f	33 c0		 xor	 eax, eax
  00031	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00033	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00036	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00039	5e		 pop	 esi

; 1312 : 		}

  0003a	c3		 ret	 0
?_Tidy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$505843 = -24					; size = 4
$T508174 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 44 44
	44 04		 cmp	 DWORD PTR __Count$[ebp], 71582788 ; 04444444H
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN59@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	6a 3c		 push	 60			; 0000003cH
  00029	99		 cdq
  0002a	59		 pop	 ecx
  0002b	f7 f9		 idiv	 ecx
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00030	0f 83 80 00 00
	00		 jae	 $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00036	6a 00		 push	 0
  00038	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$_Allocate@UTimeEndInfo@@@std@@YAPAUTimeEndInfo@@IPAU1@@Z ; std::_Allocate<TimeEndInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	89 45 e8	 mov	 DWORD PTR __Ptr$505843[ebp], eax
  0004d	ff 75 e8	 push	 DWORD PTR __Ptr$505843[ebp]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUTimeEndInfo@@PAU1@V?$allocator@UTimeEndInfo@@@std@@@std@@YAPAUTimeEndInfo@@PAU1@00AAV?$allocator@UTimeEndInfo@@@0@@Z ; std::_Uninitialized_move<TimeEndInfo *,TimeEndInfo *,std::allocator<TimeEndInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	8b c3		 mov	 eax, ebx
  00064	2b c1		 sub	 eax, ecx
  00066	6a 3c		 push	 60			; 0000003cH
  00068	99		 cdq
  00069	5f		 pop	 edi
  0006a	f7 ff		 idiv	 edi
  0006c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	8b f8		 mov	 edi, eax
  00072	85 c9		 test	 ecx, ecx
  00074	74 20		 je	 SHORT $LN51@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00076	89 4d ec	 mov	 DWORD PTR $T508174[ebp], ecx
  00079	3b cb		 cmp	 ecx, ebx
  0007b	74 11		 je	 SHORT $LN37@reserve
$LN39@reserve:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T508174[ebp]
  00080	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  00085	83 45 ec 3c	 add	 DWORD PTR $T508174[ebp], 60 ; 0000003cH
  00089	39 5d ec	 cmp	 DWORD PTR $T508174[ebp], ebx
  0008c	75 ef		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0008e	ff 36		 push	 DWORD PTR [esi]
  00090	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00095	59		 pop	 ecx
$LN51@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00096	8b ce		 mov	 ecx, esi
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;
; 770  : 			this->_Mylast = _Ptr + _Size;

  0009e	6b ff 3c	 imul	 edi, 60			; 0000003cH
  000a1	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a4	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$505843[ebp]
  000a7	6b c0 3c	 imul	 eax, 60			; 0000003cH
  000aa	03 c1		 add	 eax, ecx
  000ac	03 f9		 add	 edi, ecx
  000ae	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b1	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b4	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000b6	e8 00 00 00 00	 call	 __EH_epilog3
  000bb	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000be	ff 75 e8	 push	 DWORD PTR __Ptr$505843[ebp]
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c6	59		 pop	 ecx

; 757  : 			_RERAISE;

  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@reserve:
$LN58@reserve:
  000d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::reserve
PUBLIC	??1?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::~vector<TimeEndInfo,std::allocator<TimeEndInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::~vector<TimeEndInfo,std::allocator<TimeEndInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Tidy
??1?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::~vector<TimeEndInfo,std::allocator<TimeEndInfo> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T508252 = -4						; size = 4
?clear@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T508252[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@0@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXI@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 3c		 push	 60			; 0000003cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 44 44 44 04	 mov	 eax, 71582788		; 04444444H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 3c		 push	 60			; 0000003cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IBEII@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXI@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioTimeGrowthEndWnd@@6B@			; ioTimeGrowthEndWnd::`vftable'
PUBLIC	??1ioTimeGrowthEndWnd@@UAE@XZ			; ioTimeGrowthEndWnd::~ioTimeGrowthEndWnd
PUBLIC	??_R4ioTimeGrowthEndWnd@@6B@			; ioTimeGrowthEndWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioTimeGrowthEndWnd@@@8			; ioTimeGrowthEndWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioTimeGrowthEndWnd@@8			; ioTimeGrowthEndWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioTimeGrowthEndWnd@@8			; ioTimeGrowthEndWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioTimeGrowthEndWnd@@8		; ioTimeGrowthEndWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioMovingWnd@@8			; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioMovingWnd@@@8				; ioMovingWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioMovingWnd@@8				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioMovingWnd@@8				; ioMovingWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?iwm_hide@ioTimeGrowthEndWnd@@UAEXXZ		; ioTimeGrowthEndWnd::iwm_hide
EXTRN	__imp_??1ioMovingWnd@@UAE@XZ:PROC
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z:PROC ; ioMovingWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z:PROC ; ioMovingWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_show@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_show
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EioTimeGrowthEndWnd@@UAEPAXI@Z:PROC		; ioTimeGrowthEndWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioMovingWnd@@8
rdata$r	SEGMENT
??_R2ioMovingWnd@@8 DD FLAT:??_R1A@?0A@EA@ioMovingWnd@@8 ; ioMovingWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioMovingWnd@@8
rdata$r	SEGMENT
??_R3ioMovingWnd@@8 DD 00H				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioMovingWnd@@@8
_DATA	SEGMENT
??_R0?AVioMovingWnd@@@8 DD FLAT:??_7type_info@@6B@	; ioMovingWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioMovingWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioMovingWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioMovingWnd@@8 DD FLAT:??_R0?AVioMovingWnd@@@8 ; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioTimeGrowthEndWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioTimeGrowthEndWnd@@8 DD FLAT:??_R0?AVioTimeGrowthEndWnd@@@8 ; ioTimeGrowthEndWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioTimeGrowthEndWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioTimeGrowthEndWnd@@8
rdata$r	SEGMENT
??_R2ioTimeGrowthEndWnd@@8 DD FLAT:??_R1A@?0A@EA@ioTimeGrowthEndWnd@@8 ; ioTimeGrowthEndWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioMovingWnd@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioTimeGrowthEndWnd@@8
rdata$r	SEGMENT
??_R3ioTimeGrowthEndWnd@@8 DD 00H			; ioTimeGrowthEndWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioTimeGrowthEndWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioTimeGrowthEndWnd@@@8
_DATA	SEGMENT
??_R0?AVioTimeGrowthEndWnd@@@8 DD FLAT:??_7type_info@@6B@ ; ioTimeGrowthEndWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioTimeGrowthEndWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioTimeGrowthEndWnd@@6B@
rdata$r	SEGMENT
??_R4ioTimeGrowthEndWnd@@6B@ DD 00H			; ioTimeGrowthEndWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioTimeGrowthEndWnd@@@8
	DD	FLAT:??_R3ioTimeGrowthEndWnd@@8
rdata$r	ENDS
;	COMDAT ??_7ioTimeGrowthEndWnd@@6B@
CONST	SEGMENT
??_7ioTimeGrowthEndWnd@@6B@ DD FLAT:??_R4ioTimeGrowthEndWnd@@6B@ ; ioTimeGrowthEndWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioTimeGrowthEndWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@ioTimeGrowthEndWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioTimeGrowthEndWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioTimeGrowthEndWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioTimeGrowthEndWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EioTimeGrowthEndWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioTimeGrowthEndWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioTimeGrowthEndWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioTimeGrowthEndWnd@@UAE@XZ$1
__ehfuncinfo$??1ioTimeGrowthEndWnd@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioTimeGrowthEndWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
xdata$x	ENDS
;	COMDAT ??1ioTimeGrowthEndWnd@@UAE@XZ
_TEXT	SEGMENT
$T508406 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioTimeGrowthEndWnd@@UAE@XZ PROC			; ioTimeGrowthEndWnd::~ioTimeGrowthEndWnd, COMDAT
; _this$ = ecx

; 44   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioTimeGrowthEndWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioTimeGrowthEndWnd@@6B@

; 45   : 	m_vEndInfoList.clear();

  00017	8b 86 a4 01 00
	00		 mov	 eax, DWORD PTR [esi+420]
  0001d	8b 8e a0 01 00
	00		 mov	 ecx, DWORD PTR [esi+416]
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8d 45 ec	 lea	 eax, DWORD PTR $T508406[ebp]
  00028	50		 push	 eax
  00029	8d 8e a0 01 00
	00		 lea	 ecx, DWORD PTR [esi+416]
  0002f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00036	e8 00 00 00 00	 call	 ?erase@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@0@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::erase

; 46   : 
; 47   : 	SAFEDELETE( m_pIcon );

  0003b	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  00041	85 c9		 test	 ecx, ecx
  00043	74 0e		 je	 SHORT $LN2@ioTimeGrow
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	6a 01		 push	 1
  00049	ff 50 40	 call	 DWORD PTR [eax+64]
  0004c	83 a6 98 01 00
	00 00		 and	 DWORD PTR [esi+408], 0
$LN2@ioTimeGrow:

; 48   : 	SAFEDELETE( m_pIconBack );

  00053	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]
  00059	85 c9		 test	 ecx, ecx
  0005b	74 0e		 je	 SHORT $LN1@ioTimeGrow
  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	6a 01		 push	 1
  00061	ff 50 40	 call	 DWORD PTR [eax+64]
  00064	83 a6 9c 01 00
	00 00		 and	 DWORD PTR [esi+412], 0
$LN1@ioTimeGrow:

; 49   : }

  0006b	8d 8e a0 01 00
	00		 lea	 ecx, DWORD PTR [esi+416]
  00071	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00075	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXXZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Tidy
  0007a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007e	8b ce		 mov	 ecx, esi
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
  00086	e8 00 00 00 00	 call	 __EH_epilog3
  0008b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioTimeGrowthEndWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
__unwindfunclet$??1ioTimeGrowthEndWnd@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 a0 01 00
	00		 add	 ecx, 416		; 000001a0H
  00012	e9 00 00 00 00	 jmp	 ??1?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::~vector<TimeEndInfo,std::allocator<TimeEndInfo> >
__ehhandler$??1ioTimeGrowthEndWnd@@UAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioTimeGrowthEndWnd@@UAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioTimeGrowthEndWnd@@UAE@XZ ENDP			; ioTimeGrowthEndWnd::~ioTimeGrowthEndWnd
PUBLIC	?InitInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ		; ioTimeGrowthEndWnd::InitInfoWnd
; Function compile flags: /Ogsp
;	COMDAT ?InitInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ
_TEXT	SEGMENT
$T508506 = -4						; size = 4
?InitInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ PROC		; ioTimeGrowthEndWnd::InitInfoWnd, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 66   : 	m_iCurInfoCnt = 0;

  00007	83 a6 94 01 00
	00 00		 and	 DWORD PTR [esi+404], 0

; 67   : 	m_iMaxInfoCnt = 0;

  0000e	83 a6 90 01 00
	00 00		 and	 DWORD PTR [esi+400], 0

; 68   : 	m_vEndInfoList.clear();

  00015	8d 8e a0 01 00
	00		 lea	 ecx, DWORD PTR [esi+416]
  0001b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00020	50		 push	 eax
  00021	52		 push	 edx
  00022	8d 45 fc	 lea	 eax, DWORD PTR $T508506[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ?erase@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@@2@0@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::erase

; 69   : 
; 70   : 	SAFEDELETE( m_pIcon );

  0002b	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  00031	85 c9		 test	 ecx, ecx
  00033	74 0e		 je	 SHORT $LN1@InitInfoWn
  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	6a 01		 push	 1
  00039	ff 50 40	 call	 DWORD PTR [eax+64]
  0003c	83 a6 98 01 00
	00 00		 and	 DWORD PTR [esi+408], 0
$LN1@InitInfoWn:
  00043	5e		 pop	 esi

; 71   : }

  00044	c9		 leave
  00045	c3		 ret	 0
?InitInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ ENDP		; ioTimeGrowthEndWnd::InitInfoWnd
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@ioTimeGrowthEndWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@ioTimeGrowthEndWnd@@UAEXXZ PROC		; ioTimeGrowthEndWnd::iwm_hide, COMDAT
; _this$ = ecx

; 188  : 	InitInfoWnd();

  00000	e9 00 00 00 00	 jmp	 ?InitInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ ; ioTimeGrowthEndWnd::InitInfoWnd
?iwm_hide@ioTimeGrowthEndWnd@@UAEXXZ ENDP		; ioTimeGrowthEndWnd::iwm_hide
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXABUTimeEndInfo@@@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXABUTimeEndInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXABUTimeEndInfo@@@Z PROC ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 3c		 push	 60			; 0000003cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXI@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 3c	 imul	 edi, 60			; 0000003cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UTimeEndInfo@@@std@@UTimeEndInfo@@AAU3@@std@@YAXAAV?$allocator@UTimeEndInfo@@@0@PAUTimeEndInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<TimeEndInfo>,TimeEndInfo,TimeEndInfo &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@IAEXI@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@UTimeEndInfo@@ABU1@@std@@YAXPAUTimeEndInfo@@ABU1@@Z ; std::_Construct<TimeEndInfo,TimeEndInfo const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back:

; 996  : 			++this->_Mylast;

  00061	83 46 04 3c	 add	 DWORD PTR [esi+4], 60	; 0000003cH
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXABUTimeEndInfo@@@Z ENDP ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::push_back
_TEXT	ENDS
PUBLIC	??0ioTimeGrowthEndWnd@@QAE@XZ			; ioTimeGrowthEndWnd::ioTimeGrowthEndWnd
EXTRN	__imp_??0ioMovingWnd@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0ioTimeGrowthEndWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioTimeGrowthEndWnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioTimeGrowthEndWnd@@QAE@XZ$1
__ehfuncinfo$??0ioTimeGrowthEndWnd@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioTimeGrowthEndWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
xdata$x	ENDS
;	COMDAT ??0ioTimeGrowthEndWnd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioTimeGrowthEndWnd@@QAE@XZ PROC			; ioTimeGrowthEndWnd::ioTimeGrowthEndWnd, COMDAT
; _this$ = ecx

; 36   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioTimeGrowthEndWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioMovingWnd@@QAE@XZ
  00017	33 c9		 xor	 ecx, ecx
  00019	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioTimeGrowthEndWnd@@6B@
  0001f	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  00022	89 8e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ecx
  00028	89 8e a4 01 00
	00		 mov	 DWORD PTR [esi+420], ecx
  0002e	89 8e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ecx

; 37   : 	m_pIcon = NULL;

  00034	89 8e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ecx

; 38   : 	m_pIconBack = NULL;

  0003a	89 8e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ecx

; 39   : 
; 40   : 	InitInfoWnd();

  00040	8b ce		 mov	 ecx, esi
  00042	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00046	e8 00 00 00 00	 call	 ?InitInfoWnd@ioTimeGrowthEndWnd@@QAEXXZ ; ioTimeGrowthEndWnd::InitInfoWnd

; 41   : }

  0004b	8b c6		 mov	 eax, esi
  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioTimeGrowthEndWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
__unwindfunclet$??0ioTimeGrowthEndWnd@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 a0 01 00
	00		 add	 ecx, 416		; 000001a0H
  00012	e9 00 00 00 00	 jmp	 ??1?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAE@XZ ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::~vector<TimeEndInfo,std::allocator<TimeEndInfo> >
__ehhandler$??0ioTimeGrowthEndWnd@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioTimeGrowthEndWnd@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioTimeGrowthEndWnd@@QAE@XZ ENDP			; ioTimeGrowthEndWnd::ioTimeGrowthEndWnd
; Function compile flags: /Ogsp
;	COMDAT ??_GioTimeGrowthEndWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioTimeGrowthEndWnd@@UAEPAXI@Z PROC			; ioTimeGrowthEndWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioTimeGrowthEndWnd@@UAE@XZ ; ioTimeGrowthEndWnd::~ioTimeGrowthEndWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioTimeGrowthEndWnd@@UAEPAXI@Z ENDP			; ioTimeGrowthEndWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z ; ioTimeGrowthEndWnd::AddEndInfo
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z$0
__ehfuncinfo$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iotimegrowthendwnd.cpp
xdata$x	ENDS
;	COMDAT ?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z
_TEXT	SEGMENT
_kInfo$ = -72						; size = 60
__$EHRec$ = -12						; size = 12
_iClassType$ = 8					; size = 4
_szClassName$ = 12					; size = 4
_szIconName$ = 16					; size = 4
_szGrowthName$ = 20					; size = 4
_iLevel$ = 24						; size = 4
_bConfirm$ = 28						; size = 1
?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z PROC ; ioTimeGrowthEndWnd::AddEndInfo, COMDAT
; _this$ = ecx

; 232  : {

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 233  : 	TimeEndInfo kInfo;

  0000e	8d 4d b8	 lea	 ecx, DWORD PTR _kInfo$[ebp]
  00011	e8 00 00 00 00	 call	 ??0TimeEndInfo@@QAE@XZ	; TimeEndInfo::TimeEndInfo

; 234  : 	kInfo.m_iClassType = iClassType;

  00016	8b 45 08	 mov	 eax, DWORD PTR _iClassType$[ebp]

; 235  : 	kInfo.m_ClassName = szClassName;

  00019	ff 75 0c	 push	 DWORD PTR _szClassName$[ebp]
  0001c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	8d 4d bc	 lea	 ecx, DWORD PTR _kInfo$[ebp+4]
  00029	89 45 b8	 mov	 DWORD PTR _kInfo$[ebp], eax
  0002c	ff d6		 call	 esi

; 236  : 	kInfo.m_GrowthName = szGrowthName;

  0002e	ff 75 14	 push	 DWORD PTR _szGrowthName$[ebp]
  00031	8d 4d dc	 lea	 ecx, DWORD PTR _kInfo$[ebp+36]
  00034	ff d6		 call	 esi

; 237  : 	kInfo.m_IconName = szIconName;

  00036	ff 75 10	 push	 DWORD PTR _szIconName$[ebp]
  00039	8d 4d cc	 lea	 ecx, DWORD PTR _kInfo$[ebp+20]
  0003c	ff d6		 call	 esi

; 238  : 	kInfo.m_iLevel = iLevel;

  0003e	8b 45 18	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00041	89 45 ec	 mov	 DWORD PTR _kInfo$[ebp+52], eax

; 239  : 	kInfo.m_bConfirm = bConfirm;

  00044	8a 45 1c	 mov	 al, BYTE PTR _bConfirm$[ebp]
  00047	88 45 f0	 mov	 BYTE PTR _kInfo$[ebp+56], al

; 240  : 
; 241  : 	m_vEndInfoList.push_back( kInfo );

  0004a	8d 45 b8	 lea	 eax, DWORD PTR _kInfo$[ebp]
  0004d	50		 push	 eax
  0004e	8d 8f a0 01 00
	00		 lea	 ecx, DWORD PTR [edi+416]
  00054	e8 00 00 00 00	 call	 ?push_back@?$vector@UTimeEndInfo@@V?$allocator@UTimeEndInfo@@@std@@@std@@QAEXABUTimeEndInfo@@@Z ; std::vector<TimeEndInfo,std::allocator<TimeEndInfo> >::push_back

; 242  : 
; 243  : 	m_iMaxInfoCnt = m_vEndInfoList.size();

  00059	8b 87 a4 01 00
	00		 mov	 eax, DWORD PTR [edi+420]
  0005f	2b 87 a0 01 00
	00		 sub	 eax, DWORD PTR [edi+416]
  00065	6a 3c		 push	 60			; 0000003cH
  00067	99		 cdq
  00068	59		 pop	 ecx
  00069	f7 f9		 idiv	 ecx

; 244  : }

  0006b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006f	8d 4d b8	 lea	 ecx, DWORD PTR _kInfo$[ebp]
  00072	89 87 90 01 00
	00		 mov	 DWORD PTR [edi+400], eax
  00078	e8 00 00 00 00	 call	 ??1TimeEndInfo@@QAE@XZ
  0007d	e8 00 00 00 00	 call	 __EH_epilog3
  00082	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR _kInfo$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1TimeEndInfo@@QAE@XZ
__ehhandler$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddEndInfo@ioTimeGrowthEndWnd@@QAEXHABVioHashString@@00H_N@Z ENDP ; ioTimeGrowthEndWnd::AddEndInfo
END
