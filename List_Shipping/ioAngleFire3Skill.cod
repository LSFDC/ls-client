; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAngleFire3Skill.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?return360@@YAIXZ				; return360
; Function compile flags: /Ogsp
;	COMDAT ?return360@@YAIXZ
_TEXT	SEGMENT
?return360@@YAIXZ PROC					; return360, COMDAT

; 27   : 	__forceinline unsigned int return360() { __asm mov eax, 360 };

  00000	b8 68 01 00 00	 mov	 eax, 360		; 00000168H
  00005	c3		 ret	 0
?return360@@YAIXZ ENDP					; return360
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	_fabsf
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	_acosf
EXTRN	__CIacos:PROC
; Function compile flags: /Ogsp
;	COMDAT _acosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIacos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R0?AVioPullWeapon2@@@8			; ioPullWeapon2 `RTTI Type Descriptor'
PUBLIC	?ToPullWeapon2@@YAPAVioPullWeapon2@@PAVioWeapon@@@Z ; ToPullWeapon2
EXTRN	___RTDynamicCast:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVioWeapon@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopullweapon2.h
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioPullWeapon2@@@8
_DATA	SEGMENT
??_R0?AVioPullWeapon2@@@8 DD FLAT:??_7type_info@@6B@	; ioPullWeapon2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPullWeapon2@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToPullWeapon2@@YAPAVioPullWeapon2@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ToPullWeapon2@@YAPAVioPullWeapon2@@PAVioWeapon@@@Z PROC ; ToPullWeapon2, COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 107  : 	if( !pWeapon || pWeapon->GetType() != ioWeapon::WT_PULL_WEAPON2 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 28		 je	 SHORT $LN1@ToPullWeap
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 90 10 01 00
	00		 call	 DWORD PTR [eax+272]
  00015	83 f8 46	 cmp	 eax, 70			; 00000046H
  00018	75 19		 jne	 SHORT $LN1@ToPullWeap

; 109  : 
; 110  : 	return dynamic_cast< ioPullWeapon2* >( pWeapon );

  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPullWeapon2@@@8
  00021	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeapon@@@8
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 02		 jmp	 SHORT $LN3@ToPullWeap
$LN1@ToPullWeap:

; 108  : 		return NULL;

  00033	33 c0		 xor	 eax, eax
$LN3@ToPullWeap:
  00035	5e		 pop	 esi

; 111  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?ToPullWeapon2@@YAPAVioPullWeapon2@@PAVioWeapon@@@Z ENDP ; ToPullWeapon2
_TEXT	ENDS
PUBLIC	?CheckLoopState@ioAngleFire3Skill@@IAE_NPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::CheckLoopState
EXTRN	?IsAttackKey@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsAttackKey
EXTRN	?GetSkillKeyInput@ioBaseChar@@QAEHXZ:PROC	; ioBaseChar::GetSkillKeyInput
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
;	COMDAT ?CheckLoopState@ioAngleFire3Skill@@IAE_NPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?CheckLoopState@ioAngleFire3Skill@@IAE_NPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioAngleFire3Skill::CheckLoopState, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 226  : 	DWORD dwCurTime = FRAMEGETTIME();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000b	8b c8		 mov	 ecx, eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 227  : 
; 228  : 	if( pChar->IsNeedProcess() )

  00013	8b 75 08	 mov	 esi, DWORD PTR _pChar$[ebp]
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00020	84 c0		 test	 al, al
  00022	74 22		 je	 SHORT $LN1@CheckLoopS

; 229  : 	{
; 230  : 		//키입력 여부 검사
; 231  : 		bool bReserveSkill = false;
; 232  : 		int iSkillNum = pChar->GetSkillKeyInput();

  00024	8b ce		 mov	 ecx, esi
  00026	32 db		 xor	 bl, bl
  00028	e8 00 00 00 00	 call	 ?GetSkillKeyInput@ioBaseChar@@QAEHXZ ; ioBaseChar::GetSkillKeyInput

; 233  : 		if( iSkillNum >= 0 )

  0002d	85 c0		 test	 eax, eax
  0002f	78 02		 js	 SHORT $LN2@CheckLoopS

; 234  : 		{
; 235  : 			bReserveSkill = true;

  00031	fe c3		 inc	 bl
$LN2@CheckLoopS:

; 236  : 		}
; 237  : 
; 238  : 		if( pChar->IsAttackKey() && !bReserveSkill )

  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?IsAttackKey@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKey
  0003a	84 c0		 test	 al, al
  0003c	74 08		 je	 SHORT $LN1@CheckLoopS
  0003e	84 db		 test	 bl, bl
  00040	75 04		 jne	 SHORT $LN1@CheckLoopS

; 239  : 		{
; 240  : 			return true;

  00042	b0 01		 mov	 al, 1
  00044	eb 02		 jmp	 SHORT $LN4@CheckLoopS
$LN1@CheckLoopS:

; 241  : 		}		
; 242  : 	}
; 243  : 
; 244  : 	return false;

  00046	32 c0		 xor	 al, al
$LN4@CheckLoopS:
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 245  : }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?CheckLoopState@ioAngleFire3Skill@@IAE_NPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioAngleFire3Skill::CheckLoopState
_TEXT	ENDS
PUBLIC	?SetEndState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::SetEndState
EXTRN	?EndEffectForce@ioMapEffect@@QAEXXZ:PROC	; ioMapEffect::EndEffectForce
EXTRN	?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z:PROC ; ioPlayStage::FindMapEffect
; Function compile flags: /Ogsp
;	COMDAT ?SetEndState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?SetEndState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioAngleFire3Skill::SetEndState, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 285  : 	if( !pChar )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pChar$[ebp], 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 34		 je	 SHORT $LN2@SetEndStat

; 286  : 		return;
; 287  : 
; 288  : 	if( !pStage )

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pStage$[ebp]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 2d		 je	 SHORT $LN2@SetEndStat

; 289  : 		return;
; 290  : 
; 291  : 	m_State = SS_END;
; 292  : 
; 293  : 	if( m_dwAngleGuidEffect != -1 )

  00013	8b 86 d8 13 00
	00		 mov	 eax, DWORD PTR [esi+5080]
  00019	c7 86 e4 10 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+4324], 3
  00023	83 f8 ff	 cmp	 eax, -1
  00026	74 18		 je	 SHORT $LN2@SetEndStat

; 294  : 	{
; 295  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwAngleGuidEffect );

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 296  : 		if( pMapEffect )

  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN1@SetEndStat

; 297  : 			pMapEffect->EndEffectForce();

  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN1@SetEndStat:

; 298  : 
; 299  : 		m_dwAngleGuidEffect = -1;

  00039	83 8e d8 13 00
	00 ff		 or	 DWORD PTR [esi+5080], -1
$LN2@SetEndStat:
  00040	5e		 pop	 esi

; 300  : 	}
; 301  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?SetEndState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioAngleFire3Skill::SetEndState
_TEXT	ENDS
PUBLIC	?CheckUseItemMesh@ioAngleFire3Skill@@UAE_NXZ	; ioAngleFire3Skill::CheckUseItemMesh
; Function compile flags: /Ogsp
;	COMDAT ?CheckUseItemMesh@ioAngleFire3Skill@@UAE_NXZ
_TEXT	SEGMENT
?CheckUseItemMesh@ioAngleFire3Skill@@UAE_NXZ PROC	; ioAngleFire3Skill::CheckUseItemMesh, COMDAT
; _this$ = ecx

; 499  : 	return m_bUseItemMesh;

  00000	8a 81 08 0f 00
	00		 mov	 al, BYTE PTR [ecx+3848]

; 500  : }

  00006	c3		 ret	 0
?CheckUseItemMesh@ioAngleFire3Skill@@UAE_NXZ ENDP	; ioAngleFire3Skill::CheckUseItemMesh
_TEXT	ENDS
PUBLIC	?ApplyAttributeToWeapon@ioAngleFire3Skill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::ApplyAttributeToWeapon
; Function compile flags: /Ogsp
;	COMDAT ?ApplyAttributeToWeapon@ioAngleFire3Skill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
_pStage$ = 12						; size = 4
?ApplyAttributeToWeapon@ioAngleFire3Skill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z PROC ; ioAngleFire3Skill::ApplyAttributeToWeapon, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 505  : 
; 506  : 	ioPullWeapon2* pPull = ToPullWeapon2( pWeapon );

  00004	ff 75 08	 push	 DWORD PTR _pWeapon$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?ToPullWeapon2@@YAPAVioPullWeapon2@@PAVioWeapon@@@Z ; ToPullWeapon2
  0000e	59		 pop	 ecx

; 507  : 
; 508  : 	if( pPull )

  0000f	85 c0		 test	 eax, eax
  00011	74 11		 je	 SHORT $LN1@ApplyAttri

; 509  : 	{
; 510  : 		pPull->SetMoveDir( m_vAttackDir );

  00013	8b 10		 mov	 edx, DWORD PTR [eax]
  00015	81 c6 dc 13 00
	00		 add	 esi, 5084		; 000013dcH
  0001b	56		 push	 esi
  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 92 b0 00 00
	00		 call	 DWORD PTR [edx+176]
$LN1@ApplyAttri:
  00024	5e		 pop	 esi

; 511  : 	}
; 512  : }

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?ApplyAttributeToWeapon@ioAngleFire3Skill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ENDP ; ioAngleFire3Skill::ApplyAttributeToWeapon
_TEXT	ENDS
PUBLIC	?IsSkillMotionEnd@ioAngleFire3Skill@@UBE_NKPAVioBaseChar@@@Z ; ioAngleFire3Skill::IsSkillMotionEnd
; Function compile flags: /Ogsp
;	COMDAT ?IsSkillMotionEnd@ioAngleFire3Skill@@UBE_NKPAVioBaseChar@@@Z
_TEXT	SEGMENT
_dwActionStop$ = 8					; size = 4
_pOwner$ = 12						; size = 4
?IsSkillMotionEnd@ioAngleFire3Skill@@UBE_NKPAVioBaseChar@@@Z PROC ; ioAngleFire3Skill::IsSkillMotionEnd, COMDAT
; _this$ = ecx

; 548  : 	if( m_dwPreDelayStartTime > 0 )

  00000	83 b9 20 02 00
	00 00		 cmp	 DWORD PTR [ecx+544], 0
  00007	76 04		 jbe	 SHORT $LN5@IsSkillMot
$LN8@IsSkillMot:

; 549  : 		return false;

  00009	32 c0		 xor	 al, al
  0000b	eb 11		 jmp	 SHORT $LN6@IsSkillMot
$LN5@IsSkillMot:

; 550  : 
; 551  : 	switch( m_State )

  0000d	8b 89 e4 10 00
	00		 mov	 ecx, DWORD PTR [ecx+4324]
  00013	85 c9		 test	 ecx, ecx
  00015	78 05		 js	 SHORT $LN3@IsSkillMot
  00017	83 f9 02	 cmp	 ecx, 2

; 552  : 	{
; 553  : 	case SS_PRE:	
; 554  : 	case SS_LOOP:	
; 555  : 	case SS_ACTION:
; 556  : 		return false;

  0001a	7e ed		 jle	 SHORT $LN8@IsSkillMot
$LN3@IsSkillMot:

; 557  : 
; 558  : 	case SS_END:			
; 559  : 		return true;
; 560  : 	}
; 561  : 
; 562  : 	return true;

  0001c	b0 01		 mov	 al, 1
$LN6@IsSkillMot:

; 563  : }

  0001e	c2 08 00	 ret	 8
?IsSkillMotionEnd@ioAngleFire3Skill@@UBE_NKPAVioBaseChar@@@Z ENDP ; ioAngleFire3Skill::IsSkillMotionEnd
_TEXT	ENDS
PUBLIC	?IsNoDropState@ioAngleFire3Skill@@UBE_NXZ	; ioAngleFire3Skill::IsNoDropState
; Function compile flags: /Ogsp
;	COMDAT ?IsNoDropState@ioAngleFire3Skill@@UBE_NXZ
_TEXT	SEGMENT
?IsNoDropState@ioAngleFire3Skill@@UBE_NXZ PROC		; ioAngleFire3Skill::IsNoDropState, COMDAT
; _this$ = ecx

; 567  : 	if( m_State == SS_LOOP || m_State == SS_ACTION )

  00000	8b 81 e4 10 00
	00		 mov	 eax, DWORD PTR [ecx+4324]
  00006	83 f8 01	 cmp	 eax, 1
  00009	74 08		 je	 SHORT $LN1@IsNoDropSt
  0000b	83 f8 02	 cmp	 eax, 2
  0000e	74 03		 je	 SHORT $LN1@IsNoDropSt

; 569  : 
; 570  : 	return false;

  00010	32 c0		 xor	 al, al

; 571  : }

  00012	c3		 ret	 0
$LN1@IsNoDropSt:

; 568  : 		return true;

  00013	b0 01		 mov	 al, 1

; 571  : }

  00015	c3		 ret	 0
?IsNoDropState@ioAngleFire3Skill@@UBE_NXZ ENDP		; ioAngleFire3Skill::IsNoDropState
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC		; D3DXVec3Dot, COMDAT

; 1736 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1737 : #ifdef D3DX_DEBUG
; 1738 :     if(!pV1 || !pV2)
; 1739 :         return 0.0f;
; 1740 : #endif
; 1741 : 
; 1742 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00009	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0000f	d9 00		 fld	 DWORD PTR [eax]
  00011	d8 09		 fmul	 DWORD PTR [ecx]
  00013	de c1		 faddp	 ST(1), ST(0)
  00015	d9 40 08	 fld	 DWORD PTR [eax+8]
  00018	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0001b	de c1		 faddp	 ST(1), ST(0)
  0001d	d9 5d 08	 fstp	 DWORD PTR tv188[ebp]
  00020	d9 45 08	 fld	 DWORD PTR tv188[ebp]

; 1743 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00006	56		 push	 esi
  00007	57		 push	 edi

; 1748 :     D3DXVECTOR3 v;
; 1749 : 
; 1750 : #ifdef D3DX_DEBUG
; 1751 :     if(!pOut || !pV1 || !pV2)
; 1752 :         return NULL;
; 1753 : #endif
; 1754 : 
; 1755 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00008	8b 45 0c	 mov	 eax, DWORD PTR _pV1$[ebp]
  0000b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00010	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00018	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0001d	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00022	0f 5a e8	 cvtps2pd xmm5, xmm0
  00025	0f 5a e1	 cvtps2pd xmm4, xmm1
  00028	0f 5a f2	 cvtps2pd xmm6, xmm2
  0002b	f2 0f 59 e5	 mulsd	 xmm4, xmm5

; 1756 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0002f	0f 5a d2	 cvtps2pd xmm2, xmm2
  00032	0f 5a c9	 cvtps2pd xmm1, xmm1
  00035	0f 5a eb	 cvtps2pd xmm5, xmm3
  00038	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  0003c	f2 0f 5c e5	 subsd	 xmm4, xmm5
  00040	f3 0f 10 28	 movss	 xmm5, DWORD PTR [eax]

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00044	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00047	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  0004b	f3 0f 11 65 f4	 movss	 DWORD PTR _v$[ebp], xmm4
  00050	f3 0f 10 21	 movss	 xmm4, DWORD PTR [ecx]
  00054	0f 5a f4	 cvtps2pd xmm6, xmm4
  00057	f2 0f 59 f2	 mulsd	 xmm6, xmm2
  0005b	0f 5a d5	 cvtps2pd xmm2, xmm5
  0005e	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00062	f2 0f 5c f2	 subsd	 xmm6, xmm2
  00066	66 0f 5a ce	 cvtpd2ps xmm1, xmm6
  0006a	f3 0f 11 4d f8	 movss	 DWORD PTR _v$[ebp+4], xmm1
  0006f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00072	0f 5a d3	 cvtps2pd xmm2, xmm3
  00075	0f 5a cd	 cvtps2pd xmm1, xmm5
  00078	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0007c	8d 75 f4	 lea	 esi, DWORD PTR _v$[ebp]
  0007f	8b f8		 mov	 edi, eax
  00081	0f 5a d4	 cvtps2pd xmm2, xmm4
  00084	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00088	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0008c	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00090	f3 0f 11 45 fc	 movss	 DWORD PTR _v$[ebp+8], xmm0
  00095	a5		 movsd
  00096	a5		 movsd
  00097	a5		 movsd
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi

; 1760 :     return pOut;
; 1761 : }

  0009a	c9		 leave
  0009b	c3		 ret	 0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?return57@@YAIXZ				; return57
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
;	COMDAT ?return57@@YAIXZ
_TEXT	SEGMENT
?return57@@YAIXZ PROC					; return57, COMDAT

; 15   : __forceinline unsigned int return57() { __asm mov eax, 57 };

  00000	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  00005	c3		 ret	 0
?return57@@YAIXZ ENDP					; return57
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ	; ioMapEffect::GetEffect
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapeffect.h
;	COMDAT ?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ
_TEXT	SEGMENT
?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ PROC		; ioMapEffect::GetEffect, COMDAT
; _this$ = ecx

; 40   : 	inline ioEffect* GetEffect() const { return m_pEffect; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ ENDP		; ioMapEffect::GetEffect
_TEXT	ENDS
PUBLIC	?GetName@ioItem@@QBEABVioHashString@@XZ		; ioItem::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitem.h
;	COMDAT ?GetName@ioItem@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioItem@@QBEABVioHashString@@XZ PROC		; ioItem::GetName, COMDAT
; _this$ = ecx

; 269  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 81 34 01 00
	00		 lea	 eax, DWORD PTR [ecx+308]
  00006	c3		 ret	 0
?GetName@ioItem@@QBEABVioHashString@@XZ ENDP		; ioItem::GetName
_TEXT	ENDS
PUBLIC	?GetOwnerItem@ioSkill@@QBEPAVioItem@@XZ		; ioSkill::GetOwnerItem
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?GetOwnerItem@ioSkill@@QBEPAVioItem@@XZ
_TEXT	SEGMENT
?GetOwnerItem@ioSkill@@QBEPAVioItem@@XZ PROC		; ioSkill::GetOwnerItem, COMDAT
; _this$ = ecx

; 397  : 	inline ioItem *GetOwnerItem() const { return m_pOwnerItem; }

  00000	8b 81 a4 02 00
	00		 mov	 eax, DWORD PTR [ecx+676]
  00006	c3		 ret	 0
?GetOwnerItem@ioSkill@@QBEPAVioItem@@XZ ENDP		; ioSkill::GetOwnerItem
_TEXT	ENDS
PUBLIC	?GetName@ioSkill@@QBEABVioHashString@@XZ	; ioSkill::GetName
; Function compile flags: /Ogsp
;	COMDAT ?GetName@ioSkill@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioSkill@@QBEABVioHashString@@XZ PROC		; ioSkill::GetName, COMDAT
; _this$ = ecx

; 414  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?GetName@ioSkill@@QBEABVioHashString@@XZ ENDP		; ioSkill::GetName
_TEXT	ENDS
PUBLIC	?GetSkillUseType@ioSkill@@QBE?AW4SkillUseType@@XZ ; ioSkill::GetSkillUseType
; Function compile flags: /Ogsp
;	COMDAT ?GetSkillUseType@ioSkill@@QBE?AW4SkillUseType@@XZ
_TEXT	SEGMENT
?GetSkillUseType@ioSkill@@QBE?AW4SkillUseType@@XZ PROC	; ioSkill::GetSkillUseType, COMDAT
; _this$ = ecx

; 454  : 	inline SkillUseType GetSkillUseType() const { return m_SkillUseType; }

  00000	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00003	c3		 ret	 0
?GetSkillUseType@ioSkill@@QBE?AW4SkillUseType@@XZ ENDP	; ioSkill::GetSkillUseType
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@M@@6B@				; CEncrypt<float>::`vftable'
PUBLIC	??1?$CEncrypt@M@@UAE@XZ				; CEncrypt<float>::~CEncrypt<float>
PUBLIC	??_R4?$CEncrypt@M@@6B@				; CEncrypt<float>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@M@@@8			; CEncrypt<float> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@M@@8				; CEncrypt<float>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@M@@8				; CEncrypt<float>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@M@@8			; CEncrypt<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1ccddaabb@@UAE@XZ:PROC			; ccddaabb::~ccddaabb
EXTRN	??_E?$CEncrypt@M@@UAEPAXI@Z:PROC		; CEncrypt<float>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@M@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@M@@8 DD FLAT:??_R0?AV?$CEncrypt@M@@@8 ; CEncrypt<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@M@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@M@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@M@@8 ; CEncrypt<float>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@M@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@M@@8 DD 00H				; CEncrypt<float>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@M@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@M@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<float> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@M@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@M@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@M@@6B@ DD 00H				; CEncrypt<float>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@M@@@8
	DD	FLAT:??_R3?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@M@@6B@
CONST	SEGMENT
??_7?$CEncrypt@M@@6B@ DD FLAT:??_R4?$CEncrypt@M@@6B@	; CEncrypt<float>::`vftable'
	DD	FLAT:??_E?$CEncrypt@M@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@M@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@M@@UAE@XZ PROC				; CEncrypt<float>::~CEncrypt<float>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@M@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@M@@UAE@XZ ENDP				; CEncrypt<float>::~CEncrypt<float>
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`vftable'
PUBLIC	??1?$CEncrypt@K@@UAE@XZ				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
PUBLIC	??_R4?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@K@@@8			; CEncrypt<unsigned long> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@K@@8			; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CEncrypt@K@@UAEPAXI@Z:PROC		; CEncrypt<unsigned long>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@K@@8 DD FLAT:??_R0?AV?$CEncrypt@K@@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@K@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@K@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@K@@8 DD 00H				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@K@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@K@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<unsigned long> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@K@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@K@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@K@@6B@ DD 00H				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@K@@@8
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@K@@6B@
CONST	SEGMENT
??_7?$CEncrypt@K@@6B@ DD FLAT:??_R4?$CEncrypt@K@@6B@	; CEncrypt<unsigned long>::`vftable'
	DD	FLAT:??_E?$CEncrypt@K@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@K@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@K@@UAE@XZ PROC				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@K@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@K@@UAE@XZ ENDP				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_G?$CEncrypt@M@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@M@@UAEPAXI@Z PROC			; CEncrypt<float>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@M@@UAEPAXI@Z ENDP			; CEncrypt<float>::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$CEncrypt@K@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@K@@UAEPAXI@Z PROC			; CEncrypt<unsigned long>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar@2
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar@2:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@K@@UAEPAXI@Z ENDP			; CEncrypt<unsigned long>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@M@@AAEXXZ			; CEncrypt<float>::Init
EXTRN	?Setup@ccddaabb@@QAEXPBDHH@Z:PROC		; ccddaabb::Setup
EXTRN	__imp__rand:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@M@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@M@@AAEXXZ PROC				; CEncrypt<float>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@M@@AAEXXZ ENDP				; CEncrypt<float>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@K@@AAEXXZ			; CEncrypt<unsigned long>::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@K@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@K@@AAEXXZ PROC				; CEncrypt<unsigned long>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init@2
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init@2:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init@2:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init@2
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init@2:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init@2

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@K@@AAEXXZ ENDP				; CEncrypt<unsigned long>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_7ioAngleFire3Skill@@6B@			; ioAngleFire3Skill::`vftable'
PUBLIC	??1ioAngleFire3Skill@@UAE@XZ			; ioAngleFire3Skill::~ioAngleFire3Skill
PUBLIC	??_R4ioAngleFire3Skill@@6B@			; ioAngleFire3Skill::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAngleFire3Skill@@@8			; ioAngleFire3Skill `RTTI Type Descriptor'
PUBLIC	??_R3ioAngleFire3Skill@@8			; ioAngleFire3Skill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAngleFire3Skill@@8			; ioAngleFire3Skill::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAngleFire3Skill@@8		; ioAngleFire3Skill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioAttackSkill@@8			; ioAttackSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioAttackSkill@@@8			; ioAttackSkill `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackSkill@@8				; ioAttackSkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackSkill@@8				; ioAttackSkill::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSkill@@8			; ioSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioSkill@@@8				; ioSkill `RTTI Type Descriptor'
PUBLIC	??_R3ioSkill@@8					; ioSkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSkill@@8					; ioSkill::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioAngleFire3Skill@@UAEXAAVioINILoader@@@Z ; ioAngleFire3Skill::LoadProperty
PUBLIC	?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ	; ioAngleFire3Skill::Clone
PUBLIC	?IsProtected@ioAngleFire3Skill@@UBE_NH@Z	; ioAngleFire3Skill::IsProtected
PUBLIC	?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ ; ioSkill::GetDefenseSkillBreakeType
PUBLIC	?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ		; ioSkill::GetSkillEndNextJumpAmt
PUBLIC	?GetSkillEndNextLandRate@ioSkill@@UBEMXZ	; ioSkill::GetSkillEndNextLandRate
PUBLIC	?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ ; ioSkill::GetSkillEndNextJumpMustEnable
PUBLIC	?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ ; ioSkill::EnableChangeGrapplingTargetPos
PUBLIC	?OnSkillStart@ioAngleFire3Skill@@UAE_NPAVioBaseChar@@@Z ; ioAngleFire3Skill::OnSkillStart
PUBLIC	?OnProcessState@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::OnProcessState
PUBLIC	?OnSkillEnd@ioAngleFire3Skill@@UAEXPAVioBaseChar@@@Z ; ioAngleFire3Skill::OnSkillEnd
PUBLIC	?ApplyExtraSkillInfo@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z ; ioAngleFire3Skill::ApplyExtraSkillInfo
PUBLIC	?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z ; ioSkill::IsInvisibleBottomCircle
PUBLIC	?IsCanJumpingSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanJumpingSkill
PUBLIC	?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ	; ioSkill::IsCanJumpingSkillOnBlowWound
PUBLIC	?IsCanDownSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanDownSkill
PUBLIC	?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanBlowWoundSkill
PUBLIC	?IsCanWoundSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanWoundSkill
PUBLIC	?IsUseActiveCnt@ioSkill@@UBE_NXZ		; ioSkill::IsUseActiveCnt
PUBLIC	?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z	; ioSkill::GetMaxActiveCnt
PUBLIC	?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z	; ioSkill::GetCurActiveCnt
EXTRN	??1ioAttackSkill@@UAE@XZ:PROC			; ioAttackSkill::~ioAttackSkill
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	?GetTypeID@ioAttackSkill@@UBEHXZ:PROC		; ioAttackSkill::GetTypeID
EXTRN	?IsCanSwitchSkill@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanSwitchSkill
EXTRN	?IsCanSemiSwitchSkill@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsCanSemiSwitchSkill
EXTRN	?IsCanCancelBySkill@ioSkill@@UBE_NPAVioBaseChar@@AAH@Z:PROC ; ioSkill::IsCanCancelBySkill
EXTRN	?IsCanUseZeroHP@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseZeroHP
EXTRN	?IsCanUseSkillWithCrown@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseSkillWithCrown
EXTRN	?IsCanUseBoss@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseBoss
EXTRN	?IsCanUseFootball@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanUseFootball
EXTRN	?IsCanUseGangSiMode@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsCanUseGangSiMode
EXTRN	?IsCanUseByWeaponType@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseByWeaponType
EXTRN	?IsCanUseThunderBirdHold@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseThunderBirdHold
EXTRN	?IsCanUseLimitHP@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseLimitHP
EXTRN	?IsCanUseSkill@ioAttackSkill@@UAE_NPAVioBaseChar@@_N@Z:PROC ; ioAttackSkill::IsCanUseSkill
EXTRN	?IsOnOffEnable@ioSkill@@UAE_NXZ:PROC		; ioSkill::IsOnOffEnable
EXTRN	?IsCanDefenseStateSkill@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsCanDefenseStateSkill
EXTRN	?SetDefenseStateSkill@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::SetDefenseStateSkill
EXTRN	?HasBuff@ioSkill@@UBE_NH@Z:PROC			; ioSkill::HasBuff
EXTRN	?GetBuffType@ioSkill@@UAEHH@Z:PROC		; ioSkill::GetBuffType
EXTRN	?IsEnableReserve@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsEnableReserve
EXTRN	?IsCharSkipState@ioSkill@@UBE?AW4SkillCharColType@@XZ:PROC ; ioSkill::IsCharSkipState
EXTRN	?IsEntityCollisionSkipState@ioSkill@@UBE_NXZ:PROC ; ioSkill::IsEntityCollisionSkipState
EXTRN	?IsEndState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsEndState
EXTRN	?IsAttackEndState@ioAttackSkill@@UBE_NXZ:PROC	; ioAttackSkill::IsAttackEndState
EXTRN	?IsJumpState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsJumpState
EXTRN	?IsDownState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsDownState
EXTRN	?IsCanSendControl@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanSendControl
EXTRN	?IsSkipState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsSkipState
EXTRN	?GetSkillMoveRate@ioSkill@@UBEMXZ:PROC		; ioSkill::GetSkillMoveRate
EXTRN	?SetSkillGrapplingState@ioSkill@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioSkill::SetSkillGrapplingState
EXTRN	?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@0@Z:PROC ; ioSkill::GetGrapplingTargetPos
EXTRN	?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioSkill::GetGrapplingTargetPos
EXTRN	?GetSkillWoundGrapplingInfo@ioSkill@@UAE?AUGrapplingSkillWoundedInfo@@XZ:PROC ; ioSkill::GetSkillWoundGrapplingInfo
EXTRN	?SetCreateWeaponDependency@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z:PROC ; ioSkill::SetCreateWeaponDependency
EXTRN	?SetNextSkillState@ioSkill@@UAEXPAVioBaseChar@@PAVioWeapon@@@Z:PROC ; ioSkill::SetNextSkillState
EXTRN	?OnSkillEndByWounded@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::OnSkillEndByWounded
EXTRN	?OnProcessNotUseSkill@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z:PROC ; ioSkill::OnProcessNotUseSkill
EXTRN	?OnSkillItemRelease@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::OnSkillItemRelease
EXTRN	?ApplyEquipSlotSkillExtraInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioSkill::ApplyEquipSlotSkillExtraInfo
EXTRN	?ApplyExtraPassiveSkillInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioSkill::ApplyExtraPassiveSkillInfo
EXTRN	?StartPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::StartPreDelayEffect
EXTRN	?EndPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::EndPreDelayEffect
EXTRN	?IsUseAutoTargetValue@ioAttackSkill@@UAE_NXZ:PROC ; ioAttackSkill::IsUseAutoTargetValue
EXTRN	?IsAutoTargetDownState@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsAutoTargetDownState
EXTRN	?CheckUseBuff@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::CheckUseBuff
EXTRN	?CheckUseActiveCount@ioSkill@@UAE_NXZ:PROC	; ioSkill::CheckUseActiveCount
EXTRN	?CheckAniRotate@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::CheckAniRotate
EXTRN	?IsEnableDashCheck@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsEnableDashCheck
EXTRN	?IsEnableMultiActive@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsEnableMultiActive
EXTRN	?GetAutoTargetValue@ioSkill@@UAEXAAM00@Z:PROC	; ioSkill::GetAutoTargetValue
EXTRN	?GetSkillGravityRate@ioSkill@@UAEMXZ:PROC	; ioSkill::GetSkillGravityRate
EXTRN	?GetSkillMotionName@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetSkillMotionName
EXTRN	?HasSkillMotion@ioSkill@@UBE_NXZ:PROC		; ioSkill::HasSkillMotion
EXTRN	?GetSkillMotionRate@ioSkill@@UBEMXZ:PROC	; ioSkill::GetSkillMotionRate
EXTRN	?IsPreDelayProtect@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsPreDelayProtect
EXTRN	?GetPreDelayAniName@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayAniName
EXTRN	?GetPreDelayTime@ioSkill@@UBEKXZ:PROC		; ioSkill::GetPreDelayTime
EXTRN	?GetPreDelayOwnerEffect@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayOwnerEffect
EXTRN	?GetPreDelayOtherEffect@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayOtherEffect
EXTRN	?SetCancelSkill@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::SetCancelSkill
EXTRN	?ClearAirJump@ioSkill@@MAEXXZ:PROC		; ioSkill::ClearAirJump
EXTRN	?SetAirJump@ioSkill@@MAEXPAVioBaseChar@@HM@Z:PROC ; ioSkill::SetAirJump
EXTRN	?CheckAirJump@ioSkill@@MAEXPAVioBaseChar@@@Z:PROC ; ioSkill::CheckAirJump
EXTRN	?UseActiveCount@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::UseActiveCount
EXTRN	?GetMaxActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z:PROC ; ioSkill::GetMaxActiveCount
EXTRN	?GetCurActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z:PROC ; ioSkill::GetCurActiveCount
EXTRN	?HideHPGauge@ioSkill@@UAE_NXZ:PROC		; ioSkill::HideHPGauge
EXTRN	?SetInfoByApplyWeapon@ioSkill@@UAEXPAVioBaseChar@@0K_N@Z:PROC ; ioSkill::SetInfoByApplyWeapon
EXTRN	?SetCollisionByApplySkill@ioSkill@@UAEXXZ:PROC	; ioSkill::SetCollisionByApplySkill
EXTRN	?SetChargingRateForWeapon@ioSkill@@UAEXPAVioWeapon@@@Z:PROC ; ioSkill::SetChargingRateForWeapon
EXTRN	?CheckExceptionCamera@ioSkill@@UAE_NXZ:PROC	; ioSkill::CheckExceptionCamera
EXTRN	?GetExceptionCameraPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioSkill::GetExceptionCameraPos
EXTRN	?IsFixedExceptionCamera@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsFixedExceptionCamera
EXTRN	??_EioAngleFire3Skill@@UAEPAXI@Z:PROC		; ioAngleFire3Skill::`vector deleting destructor'
EXTRN	?StartPreDelayAnimation@ioAttackSkill@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::StartPreDelayAnimation
EXTRN	?AttackSkillFire@ioAttackSkill@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::AttackSkillFire
EXTRN	?GetAttackTimeRate@ioAttackSkill@@MBEMXZ:PROC	; ioAttackSkill::GetAttackTimeRate
EXTRN	?GetAttackEndTimeRate@ioAttackSkill@@MBEMXZ:PROC ; ioAttackSkill::GetAttackEndTimeRate
EXTRN	?LoadNormalAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadNormalAttribute
EXTRN	?LoadDownAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadDownAttribute
EXTRN	?LoadJumpAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadJumpAttribute
EXTRN	?GetAttribute@ioAttackSkill@@UAEAAUAttackAttribute@@XZ:PROC ; ioAttackSkill::GetAttribute
EXTRN	?GetAttributeConst@ioAttackSkill@@UBEABUAttackAttribute@@XZ:PROC ; ioAttackSkill::GetAttributeConst
EXTRN	?IsCanStateEscape@ioAttackSkill@@UBE_NXZ:PROC	; ioAttackSkill::IsCanStateEscape
EXTRN	?IsCanStateEscapeOnStand@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnStand
EXTRN	?IsCanStateEscapeOnAir@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnAir
EXTRN	?IsCanStateEscapeOnDown@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnDown
;	COMDAT ??_R2ioSkill@@8
rdata$r	SEGMENT
??_R2ioSkill@@8 DD FLAT:??_R1A@?0A@EA@ioSkill@@8	; ioSkill::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioSkill@@8
rdata$r	SEGMENT
??_R3ioSkill@@8 DD 00H					; ioSkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSkill@@@8
_DATA	SEGMENT
??_R0?AVioSkill@@@8 DD FLAT:??_7type_info@@6B@		; ioSkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSkill@@8 DD FLAT:??_R0?AVioSkill@@@8	; ioSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackSkill@@8
rdata$r	SEGMENT
??_R2ioAttackSkill@@8 DD FLAT:??_R1A@?0A@EA@ioAttackSkill@@8 ; ioAttackSkill::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackSkill@@8
rdata$r	SEGMENT
??_R3ioAttackSkill@@8 DD 00H				; ioAttackSkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackSkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackSkill@@@8
_DATA	SEGMENT
??_R0?AVioAttackSkill@@@8 DD FLAT:??_7type_info@@6B@	; ioAttackSkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackSkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackSkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackSkill@@8 DD FLAT:??_R0?AVioAttackSkill@@@8 ; ioAttackSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackSkill@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAngleFire3Skill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAngleFire3Skill@@8 DD FLAT:??_R0?AVioAngleFire3Skill@@@8 ; ioAngleFire3Skill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAngleFire3Skill@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAngleFire3Skill@@8
rdata$r	SEGMENT
??_R2ioAngleFire3Skill@@8 DD FLAT:??_R1A@?0A@EA@ioAngleFire3Skill@@8 ; ioAngleFire3Skill::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioAttackSkill@@8
	DD	FLAT:??_R1A@?0A@EA@ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAngleFire3Skill@@8
rdata$r	SEGMENT
??_R3ioAngleFire3Skill@@8 DD 00H			; ioAngleFire3Skill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioAngleFire3Skill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAngleFire3Skill@@@8
_DATA	SEGMENT
??_R0?AVioAngleFire3Skill@@@8 DD FLAT:??_7type_info@@6B@ ; ioAngleFire3Skill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAngleFire3Skill@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAngleFire3Skill@@6B@
rdata$r	SEGMENT
??_R4ioAngleFire3Skill@@6B@ DD 00H			; ioAngleFire3Skill::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAngleFire3Skill@@@8
	DD	FLAT:??_R3ioAngleFire3Skill@@8
rdata$r	ENDS
;	COMDAT ??_7ioAngleFire3Skill@@6B@
CONST	SEGMENT
??_7ioAngleFire3Skill@@6B@ DD FLAT:??_R4ioAngleFire3Skill@@6B@ ; ioAngleFire3Skill::`vftable'
	DD	FLAT:?LoadProperty@ioAngleFire3Skill@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ
	DD	FLAT:?GetTypeID@ioAttackSkill@@UBEHXZ
	DD	FLAT:?IsProtected@ioAngleFire3Skill@@UBE_NH@Z
	DD	FLAT:?IsCanSwitchSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanSemiSwitchSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanCancelBySkill@ioSkill@@UBE_NPAVioBaseChar@@AAH@Z
	DD	FLAT:?IsCanUseZeroHP@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseSkillWithCrown@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseBoss@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseFootball@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanUseGangSiMode@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanUseByWeaponType@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseThunderBirdHold@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseLimitHP@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseSkill@ioAttackSkill@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsOnOffEnable@ioSkill@@UAE_NXZ
	DD	FLAT:?IsCanDefenseStateSkill@ioSkill@@UAE_NXZ
	DD	FLAT:?SetDefenseStateSkill@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ
	DD	FLAT:?HasBuff@ioSkill@@UBE_NH@Z
	DD	FLAT:?GetBuffType@ioSkill@@UAEHH@Z
	DD	FLAT:?IsEnableReserve@ioSkill@@UBE_NXZ
	DD	FLAT:?IsSkillMotionEnd@ioAngleFire3Skill@@UBE_NKPAVioBaseChar@@@Z
	DD	FLAT:?IsCharSkipState@ioSkill@@UBE?AW4SkillCharColType@@XZ
	DD	FLAT:?IsEntityCollisionSkipState@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ
	DD	FLAT:?GetSkillEndNextLandRate@ioSkill@@UBEMXZ
	DD	FLAT:?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ
	DD	FLAT:?IsEndState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsAttackEndState@ioAttackSkill@@UBE_NXZ
	DD	FLAT:?IsJumpState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsDownState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsNoDropState@ioAngleFire3Skill@@UBE_NXZ
	DD	FLAT:?IsCanSendControl@ioSkill@@UBE_NXZ
	DD	FLAT:?IsSkipState@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillMoveRate@ioSkill@@UBEMXZ
	DD	FLAT:?SetSkillGrapplingState@ioSkill@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@0@Z
	DD	FLAT:?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillWoundGrapplingInfo@ioSkill@@UAE?AUGrapplingSkillWoundedInfo@@XZ
	DD	FLAT:?SetCreateWeaponDependency@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?SetNextSkillState@ioSkill@@UAEXPAVioBaseChar@@PAVioWeapon@@@Z
	DD	FLAT:?OnSkillStart@ioAngleFire3Skill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?OnProcessState@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?OnSkillEndByWounded@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnSkillEnd@ioAngleFire3Skill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnProcessNotUseSkill@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?OnSkillItemRelease@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyAttributeToWeapon@ioAngleFire3Skill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z
	DD	FLAT:?ApplyExtraSkillInfo@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyEquipSlotSkillExtraInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyExtraPassiveSkillInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?StartPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?EndPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseAutoTargetValue@ioAttackSkill@@UAE_NXZ
	DD	FLAT:?IsAutoTargetDownState@ioSkill@@UAE_NXZ
	DD	FLAT:?CheckUseBuff@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckUseItemMesh@ioAngleFire3Skill@@UAE_NXZ
	DD	FLAT:?CheckUseActiveCount@ioSkill@@UAE_NXZ
	DD	FLAT:?CheckAniRotate@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableDashCheck@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableMultiActive@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAutoTargetValue@ioSkill@@UAEXAAM00@Z
	DD	FLAT:?IsCanJumpingSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanDownSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanWoundSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillGravityRate@ioSkill@@UAEMXZ
	DD	FLAT:?GetSkillMotionName@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?HasSkillMotion@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillMotionRate@ioSkill@@UBEMXZ
	DD	FLAT:?IsPreDelayProtect@ioSkill@@UBE_NXZ
	DD	FLAT:?GetPreDelayAniName@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?GetPreDelayTime@ioSkill@@UBEKXZ
	DD	FLAT:?GetPreDelayOwnerEffect@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?GetPreDelayOtherEffect@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?SetCancelSkill@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearAirJump@ioSkill@@MAEXXZ
	DD	FLAT:?SetAirJump@ioSkill@@MAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioSkill@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?UseActiveCount@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetMaxActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?GetCurActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?HideHPGauge@ioSkill@@UAE_NXZ
	DD	FLAT:?SetInfoByApplyWeapon@ioSkill@@UAEXPAVioBaseChar@@0K_N@Z
	DD	FLAT:?SetCollisionByApplySkill@ioSkill@@UAEXXZ
	DD	FLAT:?SetChargingRateForWeapon@ioSkill@@UAEXPAVioWeapon@@@Z
	DD	FLAT:?CheckExceptionCamera@ioSkill@@UAE_NXZ
	DD	FLAT:?GetExceptionCameraPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsFixedExceptionCamera@ioSkill@@UAE_NXZ
	DD	FLAT:?IsUseActiveCnt@ioSkill@@UBE_NXZ
	DD	FLAT:?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
	DD	FLAT:?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
	DD	FLAT:??_EioAngleFire3Skill@@UAEPAXI@Z
	DD	FLAT:?StartPreDelayAnimation@ioAttackSkill@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?AttackSkillFire@ioAttackSkill@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackTimeRate@ioAttackSkill@@MBEMXZ
	DD	FLAT:?GetAttackEndTimeRate@ioAttackSkill@@MBEMXZ
	DD	FLAT:?LoadNormalAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?LoadDownAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?LoadJumpAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?GetAttribute@ioAttackSkill@@UAEAAUAttackAttribute@@XZ
	DD	FLAT:?GetAttributeConst@ioAttackSkill@@UBEABUAttackAttribute@@XZ
	DD	FLAT:?IsCanStateEscape@ioAttackSkill@@UBE_NXZ
	DD	FLAT:?IsCanStateEscapeOnStand@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanStateEscapeOnAir@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanStateEscapeOnDown@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioAngleFire3Skill@@UAE@XZ DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$??1ioAngleFire3Skill@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioAngleFire3Skill@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$17
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
xdata$x	ENDS
;	COMDAT ??1ioAngleFire3Skill@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioAngleFire3Skill@@UAE@XZ PROC			; ioAngleFire3Skill::~ioAngleFire3Skill, COMDAT
; _this$ = ecx

; 35   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioAngleFire3Skill@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAngleFire3Skill@@6B@

; 36   : }

  00017	bb 00 00 00 00	 mov	 ebx, OFFSET ??_7?$CEncrypt@K@@6B@
  0001c	8d 8e f8 13 00
	00		 lea	 ecx, DWORD PTR [esi+5112]
  00022	c7 45 fc 11 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00029	89 9e ec 13 00
	00		 mov	 DWORD PTR [esi+5100], ebx
  0002f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00034	8d 8e c8 13 00
	00		 lea	 ecx, DWORD PTR [esi+5064]
  0003a	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00044	bf 00 00 00 00	 mov	 edi, OFFSET ??_7?$CEncrypt@M@@6B@
  00049	8d 8e a4 13 00
	00		 lea	 ecx, DWORD PTR [esi+5028]
  0004f	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00053	89 be 98 13 00
	00		 mov	 DWORD PTR [esi+5016], edi
  00059	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0005e	8d 8e 74 13 00
	00		 lea	 ecx, DWORD PTR [esi+4980]
  00064	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00068	89 be 68 13 00
	00		 mov	 DWORD PTR [esi+4968], edi
  0006e	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00073	8d 8e 44 13 00
	00		 lea	 ecx, DWORD PTR [esi+4932]
  00079	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0007d	89 be 38 13 00
	00		 mov	 DWORD PTR [esi+4920], edi
  00083	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00088	8d 8e 14 13 00
	00		 lea	 ecx, DWORD PTR [esi+4884]
  0008e	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00092	89 be 08 13 00
	00		 mov	 DWORD PTR [esi+4872], edi
  00098	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0009d	8d 8e e4 12 00
	00		 lea	 ecx, DWORD PTR [esi+4836]
  000a3	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  000a7	89 be d8 12 00
	00		 mov	 DWORD PTR [esi+4824], edi
  000ad	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  000b2	8d 8e b4 12 00
	00		 lea	 ecx, DWORD PTR [esi+4788]
  000b8	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  000bc	89 be a8 12 00
	00		 mov	 DWORD PTR [esi+4776], edi
  000c2	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  000c7	8d 8e 84 12 00
	00		 lea	 ecx, DWORD PTR [esi+4740]
  000cd	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000d1	89 be 78 12 00
	00		 mov	 DWORD PTR [esi+4728], edi
  000d7	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  000dc	8d 8e 54 12 00
	00		 lea	 ecx, DWORD PTR [esi+4692]
  000e2	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000e6	89 be 48 12 00
	00		 mov	 DWORD PTR [esi+4680], edi
  000ec	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  000f1	8d 8e 24 12 00
	00		 lea	 ecx, DWORD PTR [esi+4644]
  000f7	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000fb	89 9e 18 12 00
	00		 mov	 DWORD PTR [esi+4632], ebx
  00101	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00106	8d 8e f4 11 00
	00		 lea	 ecx, DWORD PTR [esi+4596]
  0010c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00110	89 9e e8 11 00
	00		 mov	 DWORD PTR [esi+4584], ebx
  00116	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0011b	8d 8e c4 11 00
	00		 lea	 ecx, DWORD PTR [esi+4548]
  00121	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00125	89 9e b8 11 00
	00		 mov	 DWORD PTR [esi+4536], ebx
  0012b	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00130	8d 8e 94 11 00
	00		 lea	 ecx, DWORD PTR [esi+4500]
  00136	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0013a	89 9e 88 11 00
	00		 mov	 DWORD PTR [esi+4488], ebx
  00140	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00145	8d 8e 64 11 00
	00		 lea	 ecx, DWORD PTR [esi+4452]
  0014b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0014f	89 9e 58 11 00
	00		 mov	 DWORD PTR [esi+4440], ebx
  00155	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0015a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015e	8d 8e 34 11 00
	00		 lea	 ecx, DWORD PTR [esi+4404]
  00164	89 9e 28 11 00
	00		 mov	 DWORD PTR [esi+4392], ebx
  0016a	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0016f	8d 8e 04 11 00
	00		 lea	 ecx, DWORD PTR [esi+4356]
  00175	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00179	89 be f8 10 00
	00		 mov	 DWORD PTR [esi+4344], edi
  0017f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00184	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  0018a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00194	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00198	8b ce		 mov	 ecx, esi
  0019a	e8 00 00 00 00	 call	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
  0019f	e8 00 00 00 00	 call	 __EH_epilog3
  001a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 f8 10 00
	00		 add	 ecx, 4344		; 000010f8H
  00020	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 28 11 00
	00		 add	 ecx, 4392		; 00001128H
  0002e	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$4:
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 58 11 00
	00		 add	 ecx, 4440		; 00001158H
  0003c	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$5:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	81 c1 88 11 00
	00		 add	 ecx, 4488		; 00001188H
  0004a	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$6:
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	81 c1 b8 11 00
	00		 add	 ecx, 4536		; 000011b8H
  00058	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$7:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 e8 11 00
	00		 add	 ecx, 4584		; 000011e8H
  00066	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$8:
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	81 c1 18 12 00
	00		 add	 ecx, 4632		; 00001218H
  00074	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$9:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	81 c1 48 12 00
	00		 add	 ecx, 4680		; 00001248H
  00082	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$10:
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	81 c1 78 12 00
	00		 add	 ecx, 4728		; 00001278H
  00090	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$11:
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 a8 12 00
	00		 add	 ecx, 4776		; 000012a8H
  0009e	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$12:
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	81 c1 d8 12 00
	00		 add	 ecx, 4824		; 000012d8H
  000ac	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$13:
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	81 c1 08 13 00
	00		 add	 ecx, 4872		; 00001308H
  000ba	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$14:
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	81 c1 38 13 00
	00		 add	 ecx, 4920		; 00001338H
  000c8	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$15:
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	81 c1 68 13 00
	00		 add	 ecx, 4968		; 00001368H
  000d6	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$16:
  000db	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	81 c1 98 13 00
	00		 add	 ecx, 5016		; 00001398H
  000e4	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioAngleFire3Skill@@UAE@XZ$17:
  000e9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	81 c1 c8 13 00
	00		 add	 ecx, 5064		; 000013c8H
  000f2	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioAngleFire3Skill@@UAE@XZ:
  000f8	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000fc	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000ff	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00102	33 c8		 xor	 ecx, eax
  00104	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00109	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioAngleFire3Skill@@UAE@XZ
  0010e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioAngleFire3Skill@@UAE@XZ ENDP			; ioAngleFire3Skill::~ioAngleFire3Skill
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ
_TEXT	SEGMENT
?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ PROC ; ioSkill::GetDefenseSkillBreakeType, COMDAT
; _this$ = ecx

; 327  : 	virtual DefenseBreakType GetDefenseSkillBreakeType() const { return m_eDefenseSkillBreakType; }

  00000	8b 81 30 0e 00
	00		 mov	 eax, DWORD PTR [ecx+3632]
  00006	c3		 ret	 0
?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ ENDP ; ioSkill::GetDefenseSkillBreakeType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ
_TEXT	SEGMENT
?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ PROC		; ioSkill::GetSkillEndNextJumpAmt, COMDAT
; _this$ = ecx

; 335  : 	virtual float GetSkillEndNextJumpAmt() const { return m_fSkillEndNextJumpAmt; }

  00000	d9 81 4c 05 00
	00		 fld	 DWORD PTR [ecx+1356]
  00006	c3		 ret	 0
?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ ENDP		; ioSkill::GetSkillEndNextJumpAmt
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextLandRate@ioSkill@@UBEMXZ
_TEXT	SEGMENT
?GetSkillEndNextLandRate@ioSkill@@UBEMXZ PROC		; ioSkill::GetSkillEndNextLandRate, COMDAT
; _this$ = ecx

; 336  : 	virtual float GetSkillEndNextLandRate() const { return m_fSkillEndNextLandRate; }

  00000	d9 81 50 05 00
	00		 fld	 DWORD PTR [ecx+1360]
  00006	c3		 ret	 0
?GetSkillEndNextLandRate@ioSkill@@UBEMXZ ENDP		; ioSkill::GetSkillEndNextLandRate
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ
_TEXT	SEGMENT
?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ PROC ; ioSkill::GetSkillEndNextJumpMustEnable, COMDAT
; _this$ = ecx

; 337  : 	virtual SkillEndJumpType GetSkillEndNextJumpMustEnable(){ return SEJT_DEFAULT; }

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ ENDP ; ioSkill::GetSkillEndNextJumpMustEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ PROC	; ioSkill::EnableChangeGrapplingTargetPos, COMDAT
; _this$ = ecx

; 355  : 	virtual bool EnableChangeGrapplingTargetPos() const { return m_bChangeGrapplingTargetPos; }

  00000	8a 81 40 09 00
	00		 mov	 al, BYTE PTR [ecx+2368]
  00006	c3		 ret	 0
?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ ENDP	; ioSkill::EnableChangeGrapplingTargetPos
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z PROC ; ioSkill::IsInvisibleBottomCircle, COMDAT
; _this$ = ecx

; 393  : 	virtual bool IsInvisibleBottomCircle( ioBaseChar *pChar ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSkill::IsInvisibleBottomCircle
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsUseActiveCnt@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
?IsUseActiveCnt@ioSkill@@UBE_NXZ PROC			; ioSkill::IsUseActiveCnt, COMDAT
; _this$ = ecx

; 544  : 	virtual bool IsUseActiveCnt() const { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsUseActiveCnt@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsUseActiveCnt
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z PROC	; ioSkill::GetMaxActiveCnt, COMDAT
; _this$ = ecx

; 545  : 	virtual int GetMaxActiveCnt( ioBaseChar *pChar ) const { return 0; }

  00000	33 c0		 xor	 eax, eax
  00002	c2 04 00	 ret	 4
?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z ENDP	; ioSkill::GetMaxActiveCnt
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z PROC	; ioSkill::GetCurActiveCnt, COMDAT
; _this$ = ecx

; 546  : 	virtual int GetCurActiveCnt( ioBaseChar *pChar ) const { return 0; }

  00000	33 c0		 xor	 eax, eax
  00002	c2 04 00	 ret	 4
?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z ENDP	; ioSkill::GetCurActiveCnt
_TEXT	ENDS
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z ; ioAngleFire3Skill::SetActionState
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?ReduceCurSkillGaugeBySkill@ioBaseChar@@QAEMPAVioItem@@M@Z:PROC ; ioBaseChar::ReduceCurSkillGaugeBySkill
EXTRN	?GetCurItemSkillGauge@ioBaseChar@@QAEMABVioHashString@@@Z:PROC ; ioBaseChar::GetCurItemSkillGauge
EXTRN	___security_cookie:DWORD
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z$0
__ehfuncinfo$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
xdata$x	ENDS
;	COMDAT ?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z
_TEXT	SEGMENT
_pStage$GSCopy$ = -32812				; size = 4
_kPacket$548251 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
_bSend$ = 16						; size = 1
?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z PROC ; ioAngleFire3Skill::SetActionState, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 20 80 00 00	 mov	 eax, 32800		; 00008020H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]

; 262  : 		if( pMapEffect )

  00035	8b 45 0c	 mov	 eax, DWORD PTR _pStage$[ebp]
  00038	8b f1		 mov	 esi, ecx
  0003a	89 85 d4 7f ff
	ff		 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00040	85 ff		 test	 edi, edi
  00042	0f 84 20 01 00
	00		 je	 $LN1@SetActionS

; 249  : 	if( !pChar )
; 250  : 		return;
; 251  : 
; 252  : 	if( !m_bReduceGauge )

  00048	80 be 50 03 00
	00 00		 cmp	 BYTE PTR [esi+848], 0
  0004f	75 29		 jne	 SHORT $LN4@SetActionS

; 253  : 	{
; 254  : 		pChar->ReduceCurSkillGaugeBySkill( GetOwnerItem(),
; 255  : 										   pChar->GetCurItemSkillGauge( GetOwnerItem()->GetName() ) );

  00051	8b 9e a4 02 00
	00		 mov	 ebx, DWORD PTR [esi+676]
  00057	8d 83 34 01 00
	00		 lea	 eax, DWORD PTR [ebx+308]
  0005d	50		 push	 eax
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ?GetCurItemSkillGauge@ioBaseChar@@QAEMABVioHashString@@@Z ; ioBaseChar::GetCurItemSkillGauge
  00065	51		 push	 ecx
  00066	d9 1c 24	 fstp	 DWORD PTR [esp]
  00069	53		 push	 ebx
  0006a	8b cf		 mov	 ecx, edi
  0006c	e8 00 00 00 00	 call	 ?ReduceCurSkillGaugeBySkill@ioBaseChar@@QAEMPAVioItem@@M@Z ; ioBaseChar::ReduceCurSkillGaugeBySkill
  00071	dd d8		 fstp	 ST(0)

; 256  : 		m_bReduceGauge = true;

  00073	c6 86 50 03 00
	00 01		 mov	 BYTE PTR [esi+848], 1
$LN4@SetActionS:

; 257  : 	}	
; 258  : 	
; 259  : 	if( m_dwAngleGuidEffect != -1 )

  0007a	8b 86 d8 13 00
	00		 mov	 eax, DWORD PTR [esi+5080]
  00080	83 f8 ff	 cmp	 eax, -1
  00083	74 1e		 je	 SHORT $LN3@SetActionS

; 260  : 	{
; 261  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwAngleGuidEffect );

  00085	8b 8d d4 7f ff
	ff		 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 262  : 		if( pMapEffect )

  00091	85 c0		 test	 eax, eax
  00093	74 07		 je	 SHORT $LN2@SetActionS

; 263  : 			pMapEffect->EndEffectForce();

  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN2@SetActionS:

; 264  : 
; 265  : 		m_dwAngleGuidEffect = -1;

  0009c	83 8e d8 13 00
	00 ff		 or	 DWORD PTR [esi+5080], -1
$LN3@SetActionS:

; 266  : 	}
; 267  : 
; 268  : 	m_State = SS_ACTION;
; 269  : 	ioAttackSkill::AttackSkillFire( pChar );

  000a3	57		 push	 edi
  000a4	8b ce		 mov	 ecx, esi
  000a6	c7 86 e4 10 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+4324], 2
  000b0	e8 00 00 00 00	 call	 ?AttackSkillFire@ioAttackSkill@@MAEXPAVioBaseChar@@@Z ; ioAttackSkill::AttackSkillFire

; 270  : 
; 271  : 	if( pChar->IsNeedProcess() && pChar->IsNeedSendNetwork() && bSend )

  000b5	8b 07		 mov	 eax, DWORD PTR [edi]
  000b7	8b cf		 mov	 ecx, edi
  000b9	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  000bf	84 c0		 test	 al, al
  000c1	0f 84 a1 00 00
	00		 je	 $LN1@SetActionS
  000c7	8b 07		 mov	 eax, DWORD PTR [edi]
  000c9	8b cf		 mov	 ecx, edi
  000cb	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  000d1	84 c0		 test	 al, al
  000d3	0f 84 8f 00 00
	00		 je	 $LN1@SetActionS
  000d9	80 7d 10 00	 cmp	 BYTE PTR _bSend$[ebp], 0
  000dd	0f 84 85 00 00
	00		 je	 $LN1@SetActionS

; 272  : 	{
; 273  : 		SP2Packet kPacket( CUPK_SKILL_EXTRA_INFO );

  000e3	68 39 41 00 00	 push	 16697			; 00004139H
  000e8	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  000ee	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  000f3	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 274  : 		kPacket << pChar->GetCharName();

  000f7	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  000fd	50		 push	 eax
  000fe	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  00104	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 275  : 		kPacket << GetName();

  00109	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  0010c	50		 push	 eax
  0010d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  00113	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 276  : 		kPacket << SSC_ACTION;

  00118	6a 01		 push	 1
  0011a	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  00120	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 277  : 		kPacket << pChar->GetTargetRot();

  00125	81 c7 a4 06 00
	00		 add	 edi, 1700		; 000006a4H
  0012b	57		 push	 edi
  0012c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  00132	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 278  : 		kPacket << m_vAttackDir;

  00137	81 c6 dc 13 00
	00		 add	 esi, 5084		; 000013dcH
  0013d	56		 push	 esi
  0013e	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  00144	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 279  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  00149	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548251[ebp]
  0014f	6a 00		 push	 0
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 280  : 	}

  00157	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0015b	59		 pop	 ecx
  0015c	59		 pop	 ecx
  0015d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  00163	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@SetActionS:

; 281  : }

  00168	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00172	59		 pop	 ecx
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00179	33 cd		 xor	 ecx, ebp
  0017b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00180	c9		 leave
  00181	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548251[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32816]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z ENDP ; ioAngleFire3Skill::SetActionState
PUBLIC	__$ArrayPad$
PUBLIC	?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z ; ioAngleFire3Skill::CheckKeyInput
EXTRN	?CheckCurDirKey@ioBaseChar@@QAE?AW4DirKeyInput@ioUserKeyInput@@XZ:PROC ; ioBaseChar::CheckCurDirKey
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
xdata$x	ENDS
;	COMDAT ?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_kPacket$548272 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z PROC ; ioAngleFire3Skill::CheckKeyInput, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 1c 80 00 00	 mov	 eax, 32796		; 0000801cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b 75 08	 mov	 esi, DWORD PTR _pChar$[ebp]
  00034	8b f9		 mov	 edi, ecx

; 305  : 	if( !pChar ) return;

  00036	85 f6		 test	 esi, esi
  00038	0f 84 ce 00 00
	00		 je	 $LN1@CheckKeyIn

; 306  : 	if( !pChar->IsNeedProcess() ) return;

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8b ce		 mov	 ecx, esi
  00042	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00048	84 c0		 test	 al, al
  0004a	0f 84 bc 00 00
	00		 je	 $LN1@CheckKeyIn

; 307  : 
; 308  : 	ioUserKeyInput::DirKeyInput eNewDirKey = pChar->CheckCurDirKey();

  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?CheckCurDirKey@ioBaseChar@@QAE?AW4DirKeyInput@ioUserKeyInput@@XZ ; ioBaseChar::CheckCurDirKey

; 309  : 	if( eNewDirKey != m_CurDirKey )

  00057	3b 87 e8 13 00
	00		 cmp	 eax, DWORD PTR [edi+5096]
  0005d	0f 84 a9 00 00
	00		 je	 $LN1@CheckKeyIn

; 310  : 	{	
; 311  : 		m_CurDirKey = eNewDirKey;

  00063	89 87 e8 13 00
	00		 mov	 DWORD PTR [edi+5096], eax

; 312  : 
; 313  : 		if( pChar->IsNeedSendNetwork() )

  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00073	84 c0		 test	 al, al
  00075	0f 84 91 00 00
	00		 je	 $LN1@CheckKeyIn

; 314  : 		{
; 315  : 			if( m_State == SS_LOOP )

  0007b	83 bf e4 10 00
	00 01		 cmp	 DWORD PTR [edi+4324], 1
  00082	0f 85 84 00 00
	00		 jne	 $LN1@CheckKeyIn

; 316  : 			{		
; 317  : 				SP2Packet kPacket( CUPK_SKILL_EXTRA_INFO );

  00088	68 39 41 00 00	 push	 16697			; 00004139H
  0008d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  00093	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00098	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 318  : 				kPacket << pChar->GetCharName();

  0009c	8d 86 d4 02 00
	00		 lea	 eax, DWORD PTR [esi+724]
  000a2	50		 push	 eax
  000a3	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  000a9	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 319  : 				kPacket << GetName();

  000ae	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  000b1	50		 push	 eax
  000b2	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  000b8	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 320  : 				kPacket << SSC_LOOP;				

  000bd	6a 00		 push	 0
  000bf	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  000c5	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 321  : 				kPacket << pChar->GetTargetRot();

  000ca	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  000d0	56		 push	 esi
  000d1	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  000d7	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 322  : 				kPacket << (int)m_CurDirKey;

  000dc	ff b7 e8 13 00
	00		 push	 DWORD PTR [edi+5096]
  000e2	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  000e8	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 323  : 				P2PNetwork::SendToAllPlayingUser( kPacket );

  000ed	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548272[ebp]
  000f3	6a 00		 push	 0
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 324  : 
; 325  : 			}	

  000fb	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000ff	59		 pop	 ecx
  00100	59		 pop	 ecx
  00101	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  00107	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@CheckKeyIn:

; 326  : 		}
; 327  : 	}
; 328  : }

  0010c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00116	59		 pop	 ecx
  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011c	33 cd		 xor	 ecx, ebp
  0011e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00123	c9		 leave
  00124	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548272[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32808]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z ENDP ; ioAngleFire3Skill::CheckKeyInput
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateAngleGuidEffect@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::UpdateAngleGuidEffect
EXTRN	?ConvertDirToQuaternion@Help@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC ; Help::ConvertDirToQuaternion
EXTRN	?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioMapEffect::SetWorldPosition
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapeffect.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
CONST	ENDS
;	COMDAT ?UpdateAngleGuidEffect@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
tv196 = -24						; size = 4
tv192 = -24						; size = 4
tv188 = -24						; size = 4
_qtRot$548370 = -20					; size = 16
$T548367 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?UpdateAngleGuidEffect@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioAngleFire3Skill::UpdateAngleGuidEffect, COMDAT
; _this$ = ecx

; 447  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pChar$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 448  : 	if( m_dwAngleGuidEffect != -1 )

  00017	8b 87 d8 13 00
	00		 mov	 eax, DWORD PTR [edi+5080]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00020	83 f8 ff	 cmp	 eax, -1
  00023	0f 84 85 00 00
	00		 je	 $LN1@UpdateAngl

; 449  : 	{
; 450  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwAngleGuidEffect );

  00029	56		 push	 esi
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00030	8b f0		 mov	 esi, eax

; 451  : 		if( pMapEffect )

  00032	85 f6		 test	 esi, esi
  00034	74 77		 je	 SHORT $LN12@UpdateAngl

; 452  : 		{
; 453  : 			pMapEffect->SetWorldPosition( pChar->GetMidPositionByRate() );

  00036	b8 05 00 00 00	 mov	 eax, 5
  0003b	8b c8		 mov	 ecx, eax
  0003d	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00042	89 4d e8	 mov	 DWORD PTR tv196[ebp], ecx
  00045	db 45 e8	 fild	 DWORD PTR tv196[ebp]
  00048	85 c9		 test	 ecx, ecx
  0004a	79 06		 jns	 SHORT $LN13@UpdateAngl
  0004c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN13@UpdateAngl:
  00052	89 45 e8	 mov	 DWORD PTR tv192[ebp], eax
  00055	db 45 e8	 fild	 DWORD PTR tv192[ebp]
  00058	85 c0		 test	 eax, eax
  0005a	79 06		 jns	 SHORT $LN14@UpdateAngl
  0005c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@UpdateAngl:
  00062	de f9		 fdivp	 ST(1), ST(0)
  00064	51		 push	 ecx
  00065	8d 45 f0	 lea	 eax, DWORD PTR $T548367[ebp]
  00068	8b cb		 mov	 ecx, ebx
  0006a	d9 5d e8	 fstp	 DWORD PTR tv188[ebp]
  0006d	d9 45 e8	 fld	 DWORD PTR tv188[ebp]
  00070	d9 1c 24	 fstp	 DWORD PTR [esp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  00079	50		 push	 eax
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 454  : 
; 455  : 			ioEffect *pEffect = pMapEffect->GetEffect();

  00081	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 456  : 			if( pEffect )

  00084	85 f6		 test	 esi, esi
  00086	74 25		 je	 SHORT $LN12@UpdateAngl

; 457  : 			{
; 458  : 				D3DXQUATERNION qtRot = Help::ConvertDirToQuaternion( m_vAttackDir );

  00088	81 c7 dc 13 00
	00		 add	 edi, 5084		; 000013dcH
  0008e	8d 45 ec	 lea	 eax, DWORD PTR _qtRot$548370[ebp]
  00091	57		 push	 edi
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?ConvertDirToQuaternion@Help@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z ; Help::ConvertDirToQuaternion
  00098	59		 pop	 ecx
  00099	59		 pop	 ecx

; 459  : 				pEffect->GetParentNode()->SetOrientation( qtRot );

  0009a	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0009d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009f	ff 50 30	 call	 DWORD PTR [eax+48]
  000a2	8b 10		 mov	 edx, DWORD PTR [eax]
  000a4	8d 4d ec	 lea	 ecx, DWORD PTR _qtRot$548370[ebp]
  000a7	51		 push	 ecx
  000a8	8b c8		 mov	 ecx, eax
  000aa	ff 52 08	 call	 DWORD PTR [edx+8]
$LN12@UpdateAngl:
  000ad	5e		 pop	 esi
$LN1@UpdateAngl:

; 460  : 			}
; 461  : 		}
; 462  : 	}
; 463  : }

  000ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b1	5f		 pop	 edi
  000b2	33 cd		 xor	 ecx, ebp
  000b4	5b		 pop	 ebx
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	c9		 leave
  000bb	c2 08 00	 ret	 8
?UpdateAngleGuidEffect@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioAngleFire3Skill::UpdateAngleGuidEffect
_TEXT	ENDS
EXTRN	?ShowEquipItemMesh@ioBaseChar@@QAEX_NH@Z:PROC	; ioBaseChar::ShowEquipItemMesh
EXTRN	?RestoreSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N2@Z:PROC ; ioBaseChar::RestoreSkillWeaponMesh
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z:PROC	; ioBaseChar::ShowWeaponItemMesh
EXTRN	?OnSkillEnd@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::OnSkillEnd
; Function compile flags: /Ogsp
;	COMDAT ?OnSkillEnd@ioAngleFire3Skill@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?OnSkillEnd@ioAngleFire3Skill@@UAEXPAVioBaseChar@@@Z PROC ; ioAngleFire3Skill::OnSkillEnd, COMDAT
; _this$ = ecx

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 467  : 	ioAttackSkill::OnSkillEnd( pChar );

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?OnSkillEnd@ioAttackSkill@@UAEXPAVioBaseChar@@@Z ; ioAttackSkill::OnSkillEnd

; 468  : 
; 469  : 	if( GetOwnerItem() )

  00010	8b 8e a4 02 00
	00		 mov	 ecx, DWORD PTR [esi+676]
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN5@OnSkillEnd

; 470  : 		GetOwnerItem()->ClearCurChargeRateForSkill();

  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	ff 90 84 00 00
	00		 call	 DWORD PTR [eax+132]
$LN5@OnSkillEnd:

; 471  : 
; 472  : 	// 기본무기 장착
; 473  : 	if( m_bUseItemMesh )

  00022	80 be 08 0f 00
	00 00		 cmp	 BYTE PTR [esi+3848], 0
  00029	74 0b		 je	 SHORT $LN4@OnSkillEnd

; 474  : 	{
; 475  : 		pChar->ShowWeaponItemMesh( true );

  0002b	6a 00		 push	 0
  0002d	6a 01		 push	 1
  0002f	8b cf		 mov	 ecx, edi
  00031	e8 00 00 00 00	 call	 ?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z ; ioBaseChar::ShowWeaponItemMesh
$LN4@OnSkillEnd:

; 476  : 	}
; 477  : 	
; 478  : 	if( !m_HandMesh.IsEmpty() )

  00036	8d 8e f8 0e 00
	00		 lea	 ecx, DWORD PTR [esi+3832]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00042	84 c0		 test	 al, al
  00044	75 19		 jne	 SHORT $LN3@OnSkillEnd

; 479  : 	{
; 480  : 		pChar->RestoreSkillWeaponMesh( this, m_HandMesh, m_bVisibleEquipMesh );

  00046	0f b6 86 09 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3849]
  0004d	6a 00		 push	 0
  0004f	50		 push	 eax
  00050	8d 86 f8 0e 00
	00		 lea	 eax, DWORD PTR [esi+3832]
  00056	50		 push	 eax
  00057	56		 push	 esi
  00058	8b cf		 mov	 ecx, edi
  0005a	e8 00 00 00 00	 call	 ?RestoreSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N2@Z ; ioBaseChar::RestoreSkillWeaponMesh
$LN3@OnSkillEnd:

; 481  : 	}
; 482  : 	m_bSetHandMesh = false;
; 483  : 
; 484  : 	ioPlayStage *pStage = pChar->GetCreator();
; 485  : 	if( m_dwAngleGuidEffect != -1 )

  0005f	8b 86 d8 13 00
	00		 mov	 eax, DWORD PTR [esi+5080]
  00065	c6 86 0a 0f 00
	00 00		 mov	 BYTE PTR [esi+3850], 0
  0006c	8b 8f 44 03 00
	00		 mov	 ecx, DWORD PTR [edi+836]
  00072	83 f8 ff	 cmp	 eax, -1
  00075	74 18		 je	 SHORT $LN2@OnSkillEnd

; 486  : 	{
; 487  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwAngleGuidEffect );

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 488  : 		if( pMapEffect )

  0007d	85 c0		 test	 eax, eax
  0007f	74 07		 je	 SHORT $LN1@OnSkillEnd

; 489  : 			pMapEffect->EndEffectForce();

  00081	8b c8		 mov	 ecx, eax
  00083	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN1@OnSkillEnd:

; 490  : 
; 491  : 		m_dwAngleGuidEffect = -1;

  00088	83 8e d8 13 00
	00 ff		 or	 DWORD PTR [esi+5080], -1
$LN2@OnSkillEnd:

; 492  : 	}
; 493  : 
; 494  : 	pChar->ShowEquipItemMesh( true, ES_CLOAK );

  0008f	6a 03		 push	 3
  00091	6a 01		 push	 1
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 ?ShowEquipItemMesh@ioBaseChar@@QAEX_NH@Z ; ioBaseChar::ShowEquipItemMesh
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi

; 495  : }

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?OnSkillEnd@ioAngleFire3Skill@@UAEXPAVioBaseChar@@@Z ENDP ; ioAngleFire3Skill::OnSkillEnd
_TEXT	ENDS
EXTRN	?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z:PROC ; ioBaseChar::SetTargetRotToRotate
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyExtraSkillInfo@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_qtRot$548409 = -16					; size = 16
_qtRot$548405 = -16					; size = 16
_pChar$ = 8						; size = 4
_iDirKey$548406 = 12					; size = 4
_pStage$ = 12						; size = 4
_iState$ = 16						; size = 4
_rkPacket$ = 16						; size = 4
?ApplyExtraSkillInfo@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z PROC ; ioAngleFire3Skill::ApplyExtraSkillInfo, COMDAT
; _this$ = ecx

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 516  : 	int iState;
; 517  : 	rkPacket >> iState;

  00008	8b 7d 10	 mov	 edi, DWORD PTR _rkPacket$[ebp]
  0000b	8d 45 10	 lea	 eax, DWORD PTR _iState$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	50		 push	 eax
  00011	8b cf		 mov	 ecx, edi
  00013	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 518  : 
; 519  : 	switch( iState )

  00018	8b 45 10	 mov	 eax, DWORD PTR _iState$[ebp]
  0001b	83 e8 00	 sub	 eax, 0
  0001e	74 3d		 je	 SHORT $LN2@ApplyExtra
  00020	48		 dec	 eax
  00021	75 69		 jne	 SHORT $LN3@ApplyExtra

; 530  : 		}
; 531  : 		break;
; 532  : 	case SSC_ACTION:
; 533  : 		{
; 534  : 			D3DXQUATERNION qtRot;
; 535  : 			rkPacket >> qtRot;

  00023	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548409[ebp]
  00026	50		 push	 eax
  00027	8b cf		 mov	 ecx, edi
  00029	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 536  : 
; 537  : 			rkPacket >> m_vAttackDir;

  0002e	8d 86 dc 13 00
	00		 lea	 eax, DWORD PTR [esi+5084]
  00034	50		 push	 eax
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 538  : 			pChar->SetTargetRotToRotate( qtRot, true, true );

  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  0003f	6a 01		 push	 1
  00041	6a 01		 push	 1
  00043	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548409[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 539  : 			SetActionState( pChar, pStage, false);

  0004c	6a 00		 push	 0
  0004e	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  00051	8b ce		 mov	 ecx, esi
  00053	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00056	e8 00 00 00 00	 call	 ?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z ; ioAngleFire3Skill::SetActionState

; 540  : 		}
; 541  : 		break;

  0005b	eb 2f		 jmp	 SHORT $LN3@ApplyExtra
$LN2@ApplyExtra:

; 520  : 	{	
; 521  : 	case SSC_LOOP:
; 522  : 		{
; 523  : 			D3DXQUATERNION qtRot;
; 524  : 			rkPacket >> qtRot;

  0005d	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548405[ebp]
  00060	50		 push	 eax
  00061	8b cf		 mov	 ecx, edi
  00063	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 525  : 			int iDirKey;
; 526  : 			rkPacket >> iDirKey;

  00068	8d 45 0c	 lea	 eax, DWORD PTR _iDirKey$548406[ebp]
  0006b	50		 push	 eax
  0006c	8b cf		 mov	 ecx, edi
  0006e	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 527  : 
; 528  : 			pChar->SetTargetRotToRotate( qtRot, true, true );

  00073	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00076	6a 01		 push	 1
  00078	6a 01		 push	 1
  0007a	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548405[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 529  : 			m_CurDirKey = (ioUserKeyInput::DirKeyInput)iDirKey;

  00083	8b 45 0c	 mov	 eax, DWORD PTR _iDirKey$548406[ebp]
  00086	89 86 e8 13 00
	00		 mov	 DWORD PTR [esi+5096], eax
$LN3@ApplyExtra:
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi

; 542  : 	}
; 543  : }

  0008e	c9		 leave
  0008f	c2 0c 00	 ret	 12			; 0000000cH
?ApplyExtraSkillInfo@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z ENDP ; ioAngleFire3Skill::ApplyExtraSkillInfo
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMH@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@M@@QAEMH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMH@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 843  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  : 		type value = inValue;

  00003	db 45 08	 fild	 DWORD PTR _inValue$[ebp]

; 845  : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 846  : #ifdef _NOTUSE
; 847  : 		m_value = inValue;
; 848  : 		Debug();
; 849  : #endif
; 850  : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 851  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMH@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??8?$CEncrypt@K@@QAE_NABH@Z			; CEncrypt<unsigned long>::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$CEncrypt@K@@QAE_NABH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??8?$CEncrypt@K@@QAE_NABH@Z PROC			; CEncrypt<unsigned long>::operator==, COMDAT
; _this$ = ecx

; 976  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 977  : 		
; 978  : 		type value;
; 979  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 980  : #ifdef _NOTUSE
; 981  : 		Debug();
; 982  : #endif
; 983  : 		return (value == inValue);

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00010	8b 55 fc	 mov	 edx, DWORD PTR _value$[ebp]
  00013	33 c0		 xor	 eax, eax
  00015	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00017	0f 94 c0	 sete	 al

; 984  : 	} 

  0001a	c9		 leave
  0001b	c2 04 00	 ret	 4
??8?$CEncrypt@K@@QAE_NABH@Z ENDP			; CEncrypt<unsigned long>::operator==
_TEXT	ENDS
PUBLIC	??Y?$CEncrypt@K@@QAEAAKABK@Z			; CEncrypt<unsigned long>::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$CEncrypt@K@@QAEAAKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Y?$CEncrypt@K@@QAEAAKABK@Z PROC			; CEncrypt<unsigned long>::operator+=, COMDAT
; _this$ = ecx

; 1325 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1326 : 		type value;
; 1327 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1328 : 		value += inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	01 45 fc	 add	 DWORD PTR _value$[ebp], eax

; 1329 : 		EncryptValueToPool((char*)&value);

  00018	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1330 : #ifdef _NOTUSE
; 1331 : 		m_value += inValue;
; 1332 : 		Debug();
; 1333 : #endif
; 1334 : 		return value;

  00023	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00026	5e		 pop	 esi

; 1335 : 	} 

  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??Y?$CEncrypt@K@@QAEAAKABK@Z ENDP			; CEncrypt<unsigned long>::operator+=
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<18>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<18>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 be 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 a7 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 90 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 78 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 61 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 4a 01 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 34 01 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 1e 01 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 07 01 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 f0 00 00
	00		 je	 $LN87@LoadString
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 da 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 c4 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 ad 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 96 00 00
	00		 je	 $LN83@LoadString
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 80 00 00
	00		 je	 $LN82@LoadString
  00115	32 d1		 xor	 dl, cl
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 6e		 je	 SHORT $LN81@LoadString
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 5b		 je	 SHORT $LN80@LoadString
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00135	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00138	0f 84 ac 00 00
	00		 je	 $LN111@LoadString
  0013e	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00141	84 d2		 test	 dl, dl
  00143	74 3f		 je	 SHORT $LN78@LoadString
  00145	32 d1		 xor	 dl, cl
  00147	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 2d		 je	 SHORT $LN77@LoadString
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 1a		 je	 SHORT $LN76@LoadString
  0015e	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00161	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00164	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00167	84 c0		 test	 al, al
  00169	74 07		 je	 SHORT $LN75@LoadString
  0016b	34 ec		 xor	 al, -20			; ffffffecH
  0016d	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00170	eb 78		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00172	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00176	eb 72		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00178	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0017c	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0017e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00182	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  00184	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  00187	eb 61		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  00189	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0018d	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  0018f	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00193	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00195	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00198	eb 50		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  0019a	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0019e	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001a0	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a4	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001a6	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001aa	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001ac	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001af	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001b1	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001b5	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001b7	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001bb	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001bd	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001c1	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001c3	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001c6	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001c8	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001cc	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001ce	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001d2	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001d4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d8	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001da	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001de	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001e0	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001e4	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001e6	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001ea	6a 04		 push	 4
  001ec	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001f3	5a		 pop	 edx
$LL104@LoadString:
  001f4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fa	83 c0 04	 add	 eax, 4
  001fd	4a		 dec	 edx
  001fe	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00200	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00203	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00206	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0020a	57		 push	 edi
  0020b	56		 push	 esi
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	50		 push	 eax
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00216	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00219	5f		 pop	 edi
  0021a	33 cd		 xor	 ecx, ebp
  0021c	5e		 pop	 esi
  0021d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00222	c9		 leave
  00223	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ; ioINILoader::LoadFloat_e<23>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<23>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadFloat_
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadFloat_
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadFloat_
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadFloat_
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadFloat_
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadFloat_
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadFloat_
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadFloat_
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadFloat_
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadFloat_
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadFloat_
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadFloat_
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadFloat_
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadFloat_
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadFloat_
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadFloat_
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadFloat_
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN73@LoadFloat_:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadFloat_:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadFloat_:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadFloat_
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadFloat_:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00288	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0028d	51		 push	 ecx
  0028e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	50		 push	 eax
  00297	8b ce		 mov	 ecx, esi
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0029f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a2	5e		 pop	 esi
  002a3	33 cd		 xor	 ecx, ebp
  002a5	5b		 pop	 ebx
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	c9		 leave
  002ac	c2 08 00	 ret	 8
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ; ioINILoader::LoadInt_e<20>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<20>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadInt_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadInt_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadInt_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadInt_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadInt_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadInt_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadInt_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadInt_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadInt_e
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadInt_e
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadInt_e
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadInt_e
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadInt_e
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadInt_e
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadInt_e
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN73@LoadInt_e:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadInt_e:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadInt_e:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadInt_e
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadInt_e:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00238	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0023b	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023e	50		 push	 eax
  0023f	8b ce		 mov	 ecx, esi
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00247	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024a	5e		 pop	 esi
  0024b	33 cd		 xor	 ecx, ebp
  0024d	5b		 pop	 ebx
  0024e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00253	c9		 leave
  00254	c2 08 00	 ret	 8
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ; ioINILoader::LoadInt_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<24>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadInt_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadInt_e@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadInt_e@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadInt_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadInt_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadInt_e@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadInt_e@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadInt_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadInt_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadInt_e@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadInt_e@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadInt_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadInt_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadInt_e@2
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadInt_e@2
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadInt_e@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadInt_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadInt_e@2
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadInt_e@2
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadInt_e@2
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadInt_e@2
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadInt_e@2
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadInt_e@2
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadInt_e@2
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN69@LoadInt_e@2:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN70@LoadInt_e@2:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN71@LoadInt_e@2:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN72@LoadInt_e@2:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadInt_e@2
$LN75@LoadInt_e@2:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadInt_e@2:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadInt_e@2:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadInt_e@2:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  002a0	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  002a3	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a6	50		 push	 eax
  002a7	8b ce		 mov	 ecx, esi
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	5e		 pop	 esi
  002b3	33 cd		 xor	 ecx, ebp
  002b5	5b		 pop	 ebx
  002b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bb	c9		 leave
  002bc	c2 08 00	 ret	 8
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z ; ioINILoader::LoadInt_e<11>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<11>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadInt_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadInt_e@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadInt_e@3
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadInt_e@3
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadInt_e@3
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadInt_e@3
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadInt_e@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadInt_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadInt_e@3
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadInt_e@3
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadInt_e@3
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadInt_e@3
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadInt_e@3
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadInt_e@3
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadInt_e@3
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadInt_e@3:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadInt_e@3:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadInt_e@3:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  0017e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00181	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00184	50		 push	 eax
  00185	8b ce		 mov	 ecx, esi
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0018d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00190	33 cd		 xor	 ecx, ebp
  00192	5e		 pop	 esi
  00193	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00198	c9		 leave
  00199	c2 08 00	 ret	 8
??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_@2
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_@2
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_@2
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_@2
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_@2
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_@2
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_@2
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_@2:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_@3
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_@3
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_@3
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_@3
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_@3
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_@3
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_@3
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_@3
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_@3
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_@3
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_@3
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_@3
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_@3
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_@3:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_@3:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_@3:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	__real@3fd2ee0d320154cb
PUBLIC	__real@41f0000000000000
PUBLIC	??$RADtoDEG@M@@YAMM@Z				; RADtoDEG<float>
;	COMDAT __real@3fd2ee0d320154cb
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3fd2ee0d320154cb DQ 03fd2ee0d320154cbr	; 0.29578
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$RADtoDEG@M@@YAMM@Z
_TEXT	SEGMENT
tv130 = -4						; size = 4
tv75 = 8						; size = 4
_val$ = 8						; size = 4
??$RADtoDEG@M@@YAMM@Z PROC				; RADtoDEG<float>, COMDAT

; 18   : type  RADtoDEG (type val) {return (type) (val * (return57() + 0.2957795132)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  00009	89 45 fc	 mov	 DWORD PTR tv130[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv130[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN5@RADtoDEG
  00013	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$LN5@RADtoDEG:
  00019	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd2ee0d320154cb
  0001f	d8 4d 08	 fmul	 DWORD PTR _val$[ebp]
  00022	d9 5d 08	 fstp	 DWORD PTR tv75[ebp]
  00025	d9 45 08	 fld	 DWORD PTR tv75[ebp]
  00028	c9		 leave
  00029	c3		 ret	 0
??$RADtoDEG@M@@YAMM@Z ENDP				; RADtoDEG<float>
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@M@@QAE@XZ				; CEncrypt<float>::CEncrypt<float>
EXTRN	??0ccddaabb@@QAE@XZ:PROC			; ccddaabb::ccddaabb
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@M@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@M@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@M@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@M@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@M@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@M@@QAE@XZ PROC				; CEncrypt<float>::CEncrypt<float>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@M@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@M@@AAEXXZ ; CEncrypt<float>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@M@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@M@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@M@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@M@@QAE@XZ ENDP				; CEncrypt<float>::CEncrypt<float>
PUBLIC	??B?$CEncrypt@M@@QAEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@M@@QAEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QAEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QAEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@M@@QBEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@M@@QBEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QBEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QBEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??O?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator>
; Function compile flags: /Ogsp
;	COMDAT ??O?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??O?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator>, COMDAT
; _this$ = ecx

; 1811 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1812 : 		type value;
; 1813 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1814 : #ifdef _NOTUSE
; 1815 : 		Debug();
; 1816 : #endif
; 1817 : 		return (value > inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c1	 comisd	 xmm0, xmm1
  00025	76 01		 jbe	 SHORT $LN4@operator
  00027	40		 inc	 eax
$LN4@operator:

; 1818 : 	}		

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??O?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator>
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@XZ				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@K@@QAE@XZ PROC				; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@XZ ENDP				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QBEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QBEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QBEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QBEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKH@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKH@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 843  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 845  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 846  : #ifdef _NOTUSE
; 847  : 		m_value = inValue;
; 848  : 		Debug();
; 849  : #endif
; 850  : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 851  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKH@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QBE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QBE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QBE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QBE_NXZ ENDP				; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioAngleFire3Skill@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAngleFire3Skill@@UAEPAXI@Z PROC			; ioAngleFire3Skill::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioAngleFire3Skill@@UAE@XZ ; ioAngleFire3Skill::~ioAngleFire3Skill
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioAngleFire3Skill@@UAEPAXI@Z ENDP			; ioAngleFire3Skill::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?ClearData@ioAngleFire3Skill@@IAEXXZ		; ioAngleFire3Skill::ClearData
EXTRN	__imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A:BYTE
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
;	COMDAT ?ClearData@ioAngleFire3Skill@@IAEXXZ
_TEXT	SEGMENT
_value$551187 = -4					; size = 4
_value$551183 = -4					; size = 4
_value$551179 = -4					; size = 4
_value$551175 = -4					; size = 4
?ClearData@ioAngleFire3Skill@@IAEXXZ PROC		; ioAngleFire3Skill::ClearData, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	57		 push	 edi

; 40   : 	m_State = SS_PRE;
; 41   : 
; 42   : 	m_dwLoopStartTime = 0;

  00009	8d 45 fc	 lea	 eax, DWORD PTR _value$551175[ebp]
  0000c	33 f6		 xor	 esi, esi
  0000e	50		 push	 eax
  0000f	8d 8b b8 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4536]
  00015	89 b3 e4 10 00
	00		 mov	 DWORD PTR [ebx+4324], esi
  0001b	89 75 fc	 mov	 DWORD PTR _value$551175[ebp], esi
  0001e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 43   : 	m_dwLoopEndTime = 0;

  00023	8d 45 fc	 lea	 eax, DWORD PTR _value$551179[ebp]
  00026	50		 push	 eax
  00027	8d 8b e8 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4584]
  0002d	89 75 fc	 mov	 DWORD PTR _value$551179[ebp], esi
  00030	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 44   : 
; 45   : 	m_bSetHandMesh = false;
; 46   : 	m_bReduceGauge = false;
; 47   : 
; 48   : 	m_fCurAngle = 0;

  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	8d 45 fc	 lea	 eax, DWORD PTR _value$551183[ebp]
  0003b	50		 push	 eax
  0003c	8d 8b 38 13 00
	00		 lea	 ecx, DWORD PTR [ebx+4920]
  00042	c6 83 0a 0f 00
	00 00		 mov	 BYTE PTR [ebx+3850], 0
  00049	c6 83 50 03 00
	00 00		 mov	 BYTE PTR [ebx+848], 0
  00050	f3 0f 11 45 fc	 movss	 DWORD PTR _value$551183[ebp], xmm0
  00055	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 49   : 
; 50   : 	m_vAttackDir = ioMath::VEC3_ZERO;

  0005a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  00060	8d bb dc 13 00
	00		 lea	 edi, DWORD PTR [ebx+5084]
  00066	a5		 movsd
  00067	a5		 movsd
  00068	a5		 movsd

; 51   : 	m_CurDirKey = ioUserKeyInput::DKI_NONE;

  00069	33 f6		 xor	 esi, esi

; 52   : 
; 53   : 	m_dwSkillLoopProtectEndTime = 0;

  0006b	8d 45 fc	 lea	 eax, DWORD PTR _value$551187[ebp]
  0006e	50		 push	 eax
  0006f	8d 8b 88 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4488]
  00075	89 b3 e8 13 00
	00		 mov	 DWORD PTR [ebx+5096], esi
  0007b	89 75 fc	 mov	 DWORD PTR _value$551187[ebp], esi
  0007e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  00083	5f		 pop	 edi

; 54   : 
; 55   : 	m_dwInvisibleCloakID = 0;

  00084	89 b3 1c 14 00
	00		 mov	 DWORD PTR [ebx+5148], esi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 56   : }

  0008c	c9		 leave
  0008d	c3		 ret	 0
?ClearData@ioAngleFire3Skill@@IAEXXZ ENDP		; ioAngleFire3Skill::ClearData
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioAttackSkill@@UAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioAngleFire3Skill@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv10318 = -296						; size = 4
_value$552615 = -296					; size = 4
_value$552360 = -296					; size = 4
_value$552230 = -296					; size = 4
_value$552100 = -296					; size = 4
_value$551970 = -296					; size = 4
_value$551839 = -296					; size = 4
_value$551709 = -296					; size = 4
_i$551378 = -296					; size = 4
_value$551580 = -296					; size = 4
_value$551450 = -296					; size = 4
_szBuf$ = -292						; size = 260
__k$552502 = -32					; size = 24
__k$551597 = -32					; size = 24
__k$551388 = -32					; size = 23
__k$552390 = -28					; size = 18
__k$552000 = -28					; size = 17
__k$551857 = -28					; size = 17
__k$551467 = -28					; size = 20
__k$551221 = -28					; size = 18
__k$552260 = -24					; size = 15
__k$552130 = -24					; size = 15
__k$551727 = -20					; size = 11
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioAngleFire3Skill@@UAEXAAVioINILoader@@@Z PROC ; ioAngleFire3Skill::LoadProperty, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 60   : 	ioAttackSkill::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioAttackSkill@@UAEXAAVioINILoader@@@Z ; ioAttackSkill::LoadProperty

; 61   : 
; 62   : 	char szBuf[MAX_PATH];
; 63   : 	
; 64   : 	//Loop
; 65   : 	rkLoader.LoadString_e( "skill_loop_motion", "", szBuf, MAX_PATH );

  00021	6a 04		 push	 4
  00023	c7 45 e4 9e 87
	82 86		 mov	 DWORD PTR __k$551221[ebp], -2038265954 ; 8682879eH
  0002a	c7 45 e8 81 b3
	87 85		 mov	 DWORD PTR __k$551221[ebp+4], -2054704255 ; 8587b381H
  00031	c7 45 ec 82 9c
	b4 87		 mov	 DWORD PTR __k$551221[ebp+8], -2018206590 ; 87b49c82H
  00038	c7 45 f0 82 98
	82 85		 mov	 DWORD PTR __k$551221[ebp+12], -2055038846 ; 85829882H
  0003f	8d 45 e4	 lea	 eax, DWORD PTR __k$551221[ebp]
  00042	33 db		 xor	 ebx, ebx
  00044	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$551221[ebp+16], 131 ; 00000083H
  0004a	59		 pop	 ecx
$LL106@LoadProper:
  0004b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00051	83 c0 04	 add	 eax, 4
  00054	49		 dec	 ecx
  00055	75 f4		 jne	 SHORT $LL106@LoadProper
  00057	80 75 f4 ed	 xor	 BYTE PTR __k$551221[ebp+16], -19 ; ffffffedH
  0005b	68 04 01 00 00	 push	 260			; 00000104H
  00060	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006c	8d 45 e4	 lea	 eax, DWORD PTR __k$551221[ebp]
  0006f	50		 push	 eax
  00070	8b cf		 mov	 ecx, edi
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 66   : 	m_SkillLoopMotion = szBuf;

  00078	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0007e	50		 push	 eax
  0007f	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 67   : 	m_fSkillLoopMotionRate = rkLoader.LoadFloat_e( "skill_loop_motion_rate", FLOAT1 );

  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	6a 05		 push	 5
  00092	c7 45 e0 9e 87
	82 86		 mov	 DWORD PTR __k$551388[ebp], -2038265954 ; 8682879eH
  00099	c7 45 e4 81 b3
	87 85		 mov	 DWORD PTR __k$551388[ebp+4], -2054704255 ; 8587b381H
  000a0	c7 45 e8 82 9c
	b4 87		 mov	 DWORD PTR __k$551388[ebp+8], -2018206590 ; 87b49c82H
  000a7	c7 45 ec 82 98
	82 85		 mov	 DWORD PTR __k$551388[ebp+12], -2055038846 ; 85829882H
  000ae	c7 45 f0 83 b3
	99 8b		 mov	 DWORD PTR __k$551388[ebp+16], -1952861309 ; 8b99b383H
  000b5	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$551388[ebp+20], 35225 ; 00008999H
  000bb	8d 4d e0	 lea	 ecx, DWORD PTR __k$551388[ebp]
  000be	88 5d f6	 mov	 BYTE PTR __k$551388[ebp+22], bl
  000c1	5a		 pop	 edx
$LL214@LoadProper:
  000c2	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  000c8	83 c1 04	 add	 ecx, 4
  000cb	4a		 dec	 edx
  000cc	75 f4		 jne	 SHORT $LL214@LoadProper
  000ce	c7 85 d8 fe ff
	ff 14 00 00 00	 mov	 DWORD PTR _i$551378[ebp], 20 ; 00000014H
$LL211@LoadProper:
  000d8	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _i$551378[ebp]
  000de	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000e4	79 05		 jns	 SHORT $LN1233@LoadProper
  000e6	49		 dec	 ecx
  000e7	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000ea	41		 inc	 ecx
$LN1233@LoadProper:
  000eb	b2 ed		 mov	 dl, -19			; ffffffedH
  000ed	2a d1		 sub	 dl, cl
  000ef	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _i$551378[ebp]
  000f5	30 54 0d e0	 xor	 BYTE PTR __k$551388[ebp+ecx], dl
  000f9	ff 85 d8 fe ff
	ff		 inc	 DWORD PTR _i$551378[ebp]
  000ff	83 bd d8 fe ff
	ff 16		 cmp	 DWORD PTR _i$551378[ebp], 22 ; 00000016H
  00106	7c d0		 jl	 SHORT $LL211@LoadProper
  00108	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv10318[ebp], eax
  0010e	db 85 d8 fe ff
	ff		 fild	 DWORD PTR tv10318[ebp]
  00114	85 c0		 test	 eax, eax
  00116	79 06		 jns	 SHORT $LN1234@LoadProper
  00118	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1234@LoadProper:
  0011e	51		 push	 ecx
  0011f	8d 45 e0	 lea	 eax, DWORD PTR __k$551388[ebp]
  00122	d9 1c 24	 fstp	 DWORD PTR [esp]
  00125	50		 push	 eax
  00126	8b cf		 mov	 ecx, edi
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0012e	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _value$551450[ebp]
  00134	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$551450[ebp]
  0013a	50		 push	 eax
  0013b	8d 8e f8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4344]
  00141	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  00146	6a 04		 push	 4

; 68   : 	m_dwSkillLoopDuration = rkLoader.LoadInt_e( "skill_loop_duration", 0 );

  00148	c7 45 e4 9e 87
	82 86		 mov	 DWORD PTR __k$551467[ebp], -2038265954 ; 8682879eH
  0014f	c7 45 e8 81 b3
	87 85		 mov	 DWORD PTR __k$551467[ebp+4], -2054704255 ; 8587b381H
  00156	c7 45 ec 82 9c
	b4 8e		 mov	 DWORD PTR __k$551467[ebp+8], -1900766078 ; 8eb49c82H
  0015d	c7 45 f0 98 9e
	8a 9e		 mov	 DWORD PTR __k$551467[ebp+12], -1635082600 ; 9e8a9e98H
  00164	8d 45 e4	 lea	 eax, DWORD PTR __k$551467[ebp]
  00167	c7 45 f4 84 83
	85 00		 mov	 DWORD PTR __k$551467[ebp+16], 8749956 ; 00858384H
  0016e	59		 pop	 ecx
$LL322@LoadProper:
  0016f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00175	83 c0 04	 add	 eax, 4
  00178	49		 dec	 ecx
  00179	75 f4		 jne	 SHORT $LL322@LoadProper
  0017b	6a 10		 push	 16			; 00000010H
  0017d	58		 pop	 eax
$LL319@LoadProper:
  0017e	8b c8		 mov	 ecx, eax
  00180	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00186	79 05		 jns	 SHORT $LN1235@LoadProper
  00188	49		 dec	 ecx
  00189	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0018c	41		 inc	 ecx
$LN1235@LoadProper:
  0018d	b2 ed		 mov	 dl, -19			; ffffffedH
  0018f	2a d1		 sub	 dl, cl
  00191	30 54 05 e4	 xor	 BYTE PTR __k$551467[ebp+eax], dl
  00195	40		 inc	 eax
  00196	83 f8 13	 cmp	 eax, 19			; 00000013H
  00199	7c e3		 jl	 SHORT $LL319@LoadProper
  0019b	53		 push	 ebx
  0019c	8d 45 e4	 lea	 eax, DWORD PTR __k$551467[ebp]
  0019f	50		 push	 eax
  001a0	8b cf		 mov	 ecx, edi
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  001a8	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$551580[ebp], eax
  001ae	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$551580[ebp]
  001b4	50		 push	 eax
  001b5	8d 8e 28 11 00
	00		 lea	 ecx, DWORD PTR [esi+4392]
  001bb	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  001c0	6a 05		 push	 5

; 69   : 	m_dwSkillLoopProtectTime = rkLoader.LoadInt_e( "skill_loop_protect_time", 1000 );	

  001c2	c7 45 e0 9e 87
	82 86		 mov	 DWORD PTR __k$551597[ebp], -2038265954 ; 8682879eH
  001c9	c7 45 e4 81 b3
	87 85		 mov	 DWORD PTR __k$551597[ebp+4], -2054704255 ; 8587b381H
  001d0	c7 45 e8 82 9c
	b4 9a		 mov	 DWORD PTR __k$551597[ebp+8], -1699439486 ; 9ab49c82H
  001d7	c7 45 ec 9f 83
	9f 8f		 mov	 DWORD PTR __k$551597[ebp+12], -1885371489 ; 8f9f839fH
  001de	c7 45 f0 8e 98
	b4 9e		 mov	 DWORD PTR __k$551597[ebp+16], -1632331634 ; 9eb4988eH
  001e5	8d 45 e0	 lea	 eax, DWORD PTR __k$551597[ebp]
  001e8	c7 45 f4 84 81
	8e 00		 mov	 DWORD PTR __k$551597[ebp+20], 9339268 ; 008e8184H
  001ef	59		 pop	 ecx
$LL430@LoadProper:
  001f0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f6	83 c0 04	 add	 eax, 4
  001f9	49		 dec	 ecx
  001fa	75 f4		 jne	 SHORT $LL430@LoadProper
  001fc	6a 14		 push	 20			; 00000014H
  001fe	58		 pop	 eax
$LL427@LoadProper:
  001ff	8b c8		 mov	 ecx, eax
  00201	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00207	79 05		 jns	 SHORT $LN1236@LoadProper
  00209	49		 dec	 ecx
  0020a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0020d	41		 inc	 ecx
$LN1236@LoadProper:
  0020e	b2 ed		 mov	 dl, -19			; ffffffedH
  00210	2a d1		 sub	 dl, cl
  00212	30 54 05 e0	 xor	 BYTE PTR __k$551597[ebp+eax], dl
  00216	40		 inc	 eax
  00217	83 f8 17	 cmp	 eax, 23			; 00000017H
  0021a	7c e3		 jl	 SHORT $LL427@LoadProper
  0021c	68 e8 03 00 00	 push	 1000			; 000003e8H
  00221	8d 45 e0	 lea	 eax, DWORD PTR __k$551597[ebp]
  00224	50		 push	 eax
  00225	8b cf		 mov	 ecx, edi
  00227	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0022d	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$551709[ebp], eax
  00233	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$551709[ebp]
  00239	50		 push	 eax
  0023a	8d 8e 58 11 00
	00		 lea	 ecx, DWORD PTR [esi+4440]
  00240	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  00245	6a 02		 push	 2

; 70   : 
; 71   : 	//Angle
; 72   : 	m_dwAngleTime = (DWORD)rkLoader.LoadInt_e( "angle_time", 0 );

  00247	c7 45 ec 8c 82
	8c 86		 mov	 DWORD PTR __k$551727[ebp], -2037611892 ; 868c828cH
  0024e	c7 45 f0 88 b3
	9f 83		 mov	 DWORD PTR __k$551727[ebp+4], -2086685816 ; 839fb388H
  00255	66 c7 45 f4 80
	89		 mov	 WORD PTR __k$551727[ebp+8], 35200 ; 00008980H
  0025b	8d 45 ec	 lea	 eax, DWORD PTR __k$551727[ebp]
  0025e	88 5d f6	 mov	 BYTE PTR __k$551727[ebp+10], bl
  00261	59		 pop	 ecx
$LL538@LoadProper:
  00262	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00268	83 c0 04	 add	 eax, 4
  0026b	49		 dec	 ecx
  0026c	75 f4		 jne	 SHORT $LL538@LoadProper
  0026e	6a 08		 push	 8
  00270	58		 pop	 eax
$LL535@LoadProper:
  00271	8b c8		 mov	 ecx, eax
  00273	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00279	79 05		 jns	 SHORT $LN1237@LoadProper
  0027b	49		 dec	 ecx
  0027c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0027f	41		 inc	 ecx
$LN1237@LoadProper:
  00280	b2 ed		 mov	 dl, -19			; ffffffedH
  00282	2a d1		 sub	 dl, cl
  00284	30 54 05 ec	 xor	 BYTE PTR __k$551727[ebp+eax], dl
  00288	40		 inc	 eax
  00289	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0028c	7c e3		 jl	 SHORT $LL535@LoadProper
  0028e	53		 push	 ebx
  0028f	8d 45 ec	 lea	 eax, DWORD PTR __k$551727[ebp]
  00292	50		 push	 eax
  00293	8b cf		 mov	 ecx, edi
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0029b	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$551839[ebp], eax
  002a1	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$551839[ebp]
  002a7	50		 push	 eax
  002a8	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  002ae	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  002b3	6a 04		 push	 4

; 73   : 
; 74   : 	m_fNormalMaxAngle = rkLoader.LoadFloat_e( "normal_max_angle", 0.0f );

  002b5	c7 45 e4 83 83
	99 87		 mov	 DWORD PTR __k$551857[ebp], -2019982461 ; 87998383H
  002bc	c7 45 e8 8c 80
	b4 87		 mov	 DWORD PTR __k$551857[ebp+4], -2018213748 ; 87b4808cH
  002c3	c7 45 ec 8c 94
	b4 8b		 mov	 DWORD PTR __k$551857[ebp+8], -1951099764 ; 8bb4948cH
  002ca	c7 45 f0 83 8b
	87 8f		 mov	 DWORD PTR __k$551857[ebp+12], -1886942333 ; 8f878b83H
  002d1	8d 45 e4	 lea	 eax, DWORD PTR __k$551857[ebp]
  002d4	88 5d f4	 mov	 BYTE PTR __k$551857[ebp+16], bl
  002d7	59		 pop	 ecx
$LL646@LoadProper:
  002d8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002de	83 c0 04	 add	 eax, 4
  002e1	49		 dec	 ecx
  002e2	75 f4		 jne	 SHORT $LL646@LoadProper
  002e4	0f 57 c0	 xorps	 xmm0, xmm0
  002e7	51		 push	 ecx
  002e8	8d 45 e4	 lea	 eax, DWORD PTR __k$551857[ebp]
  002eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f0	50		 push	 eax
  002f1	8b cf		 mov	 ecx, edi
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002f9	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _value$551970[ebp]
  002ff	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$551970[ebp]
  00305	50		 push	 eax
  00306	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  0030c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  00311	6a 04		 push	 4

; 75   : 	m_fNormalMinAngle = rkLoader.LoadFloat_e( "normal_min_angle", 0.0f );

  00313	c7 45 e4 83 83
	99 87		 mov	 DWORD PTR __k$552000[ebp], -2019982461 ; 87998383H
  0031a	c7 45 e8 8c 80
	b4 87		 mov	 DWORD PTR __k$552000[ebp+4], -2018213748 ; 87b4808cH
  00321	c7 45 ec 84 82
	b4 8b		 mov	 DWORD PTR __k$552000[ebp+8], -1951104380 ; 8bb48284H
  00328	c7 45 f0 83 8b
	87 8f		 mov	 DWORD PTR __k$552000[ebp+12], -1886942333 ; 8f878b83H
  0032f	8d 45 e4	 lea	 eax, DWORD PTR __k$552000[ebp]
  00332	88 5d f4	 mov	 BYTE PTR __k$552000[ebp+16], bl
  00335	59		 pop	 ecx
$LL754@LoadProper:
  00336	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0033c	83 c0 04	 add	 eax, 4
  0033f	49		 dec	 ecx
  00340	75 f4		 jne	 SHORT $LL754@LoadProper
  00342	0f 57 c0	 xorps	 xmm0, xmm0
  00345	51		 push	 ecx
  00346	8d 45 e4	 lea	 eax, DWORD PTR __k$552000[ebp]
  00349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034e	50		 push	 eax
  0034f	8b cf		 mov	 ecx, edi
  00351	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00357	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _value$552100[ebp]
  0035d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$552100[ebp]
  00363	50		 push	 eax
  00364	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  0036a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0036f	6a 03		 push	 3

; 76   : 
; 77   : 	m_fJumpMaxAngle = rkLoader.LoadFloat_e( "jump_max_angle", 0.0f );

  00371	c7 45 e8 87 99
	86 9a		 mov	 DWORD PTR __k$552130[ebp], -1702454905 ; 9a869987H
  00378	c7 45 ec b2 81
	8a 92		 mov	 DWORD PTR __k$552130[ebp+4], -1836416590 ; 928a81b2H
  0037f	c7 45 f0 b2 8d
	85 8d		 mov	 DWORD PTR __k$552130[ebp+8], -1920627278 ; 8d858db2H
  00386	66 c7 45 f4 81
	89		 mov	 WORD PTR __k$552130[ebp+12], 35201 ; 00008981H
  0038c	8d 45 e8	 lea	 eax, DWORD PTR __k$552130[ebp]
  0038f	88 5d f6	 mov	 BYTE PTR __k$552130[ebp+14], bl
  00392	59		 pop	 ecx
$LL862@LoadProper:
  00393	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00399	83 c0 04	 add	 eax, 4
  0039c	49		 dec	 ecx
  0039d	75 f4		 jne	 SHORT $LL862@LoadProper
  0039f	6a 0c		 push	 12			; 0000000cH
  003a1	58		 pop	 eax
$LL859@LoadProper:
  003a2	8b c8		 mov	 ecx, eax
  003a4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003aa	79 05		 jns	 SHORT $LN1238@LoadProper
  003ac	49		 dec	 ecx
  003ad	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003b0	41		 inc	 ecx
$LN1238@LoadProper:
  003b1	b2 ed		 mov	 dl, -19			; ffffffedH
  003b3	2a d1		 sub	 dl, cl
  003b5	30 54 05 e8	 xor	 BYTE PTR __k$552130[ebp+eax], dl
  003b9	40		 inc	 eax
  003ba	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  003bd	7c e3		 jl	 SHORT $LL859@LoadProper
  003bf	0f 57 c0	 xorps	 xmm0, xmm0
  003c2	51		 push	 ecx
  003c3	8d 45 e8	 lea	 eax, DWORD PTR __k$552130[ebp]
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	50		 push	 eax
  003cc	8b cf		 mov	 ecx, edi
  003ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  003d4	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _value$552230[ebp]
  003da	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$552230[ebp]
  003e0	50		 push	 eax
  003e1	8d 8e a8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4776]
  003e7	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  003ec	6a 03		 push	 3

; 78   : 	m_fJumpMinAngle = rkLoader.LoadFloat_e( "jump_min_angle", 0.0f );

  003ee	c7 45 e8 87 99
	86 9a		 mov	 DWORD PTR __k$552260[ebp], -1702454905 ; 9a869987H
  003f5	c7 45 ec b2 81
	82 84		 mov	 DWORD PTR __k$552260[ebp+4], -2071821902 ; 848281b2H
  003fc	c7 45 f0 b2 8d
	85 8d		 mov	 DWORD PTR __k$552260[ebp+8], -1920627278 ; 8d858db2H
  00403	66 c7 45 f4 81
	89		 mov	 WORD PTR __k$552260[ebp+12], 35201 ; 00008981H
  00409	8d 45 e8	 lea	 eax, DWORD PTR __k$552260[ebp]
  0040c	88 5d f6	 mov	 BYTE PTR __k$552260[ebp+14], bl
  0040f	59		 pop	 ecx
$LL970@LoadProper:
  00410	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00416	83 c0 04	 add	 eax, 4
  00419	49		 dec	 ecx
  0041a	75 f4		 jne	 SHORT $LL970@LoadProper
  0041c	6a 0c		 push	 12			; 0000000cH
  0041e	58		 pop	 eax
$LL967@LoadProper:
  0041f	8b c8		 mov	 ecx, eax
  00421	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00427	79 05		 jns	 SHORT $LN1239@LoadProper
  00429	49		 dec	 ecx
  0042a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0042d	41		 inc	 ecx
$LN1239@LoadProper:
  0042e	b2 ed		 mov	 dl, -19			; ffffffedH
  00430	2a d1		 sub	 dl, cl
  00432	30 54 05 e8	 xor	 BYTE PTR __k$552260[ebp+eax], dl
  00436	40		 inc	 eax
  00437	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0043a	7c e3		 jl	 SHORT $LL967@LoadProper
  0043c	0f 57 c0	 xorps	 xmm0, xmm0
  0043f	51		 push	 ecx
  00440	8d 45 e8	 lea	 eax, DWORD PTR __k$552260[ebp]
  00443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00448	50		 push	 eax
  00449	8b cf		 mov	 ecx, edi
  0044b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00451	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _value$552360[ebp]
  00457	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$552360[ebp]
  0045d	50		 push	 eax
  0045e	8d 8e d8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4824]
  00464	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  00469	6a 04		 push	 4

; 79   : 
; 80   : 	rkLoader.LoadString_e( "angle_guid_effect", "", szBuf, MAX_PATH );

  0046b	c7 45 e4 8c 82
	8c 86		 mov	 DWORD PTR __k$552390[ebp], -2037611892 ; 868c828cH
  00472	c7 45 e8 88 b3
	8c 9f		 mov	 DWORD PTR __k$552390[ebp+4], -1618168952 ; 9f8cb388H
  00479	c7 45 ec 84 88
	b4 8f		 mov	 DWORD PTR __k$552390[ebp+8], -1883993980 ; 8fb48884H
  00480	c7 45 f0 8b 8a
	8e 89		 mov	 DWORD PTR __k$552390[ebp+12], -1987147125 ; 898e8a8bH
  00487	8d 45 e4	 lea	 eax, DWORD PTR __k$552390[ebp]
  0048a	66 c7 45 f4 99
	00		 mov	 WORD PTR __k$552390[ebp+16], 153 ; 00000099H
  00490	59		 pop	 ecx
$LL1078@LoadProper:
  00491	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00497	83 c0 04	 add	 eax, 4
  0049a	49		 dec	 ecx
  0049b	75 f4		 jne	 SHORT $LL1078@LoadProper
  0049d	80 75 f4 ed	 xor	 BYTE PTR __k$552390[ebp+16], -19 ; ffffffedH
  004a1	68 04 01 00 00	 push	 260			; 00000104H
  004a6	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004ac	50		 push	 eax
  004ad	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  004b2	8d 45 e4	 lea	 eax, DWORD PTR __k$552390[ebp]
  004b5	50		 push	 eax
  004b6	8b cf		 mov	 ecx, edi
  004b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 81   : 	m_AngleGuidEffect = szBuf;

  004be	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004c4	50		 push	 eax
  004c5	8d 8e c8 13 00
	00		 lea	 ecx, DWORD PTR [esi+5064]
  004cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  004d1	6a 05		 push	 5

; 82   : 
; 83   : 	m_dwSkillLoopRotateSpeed = (DWORD)rkLoader.LoadInt_e( "skill_loop_rotate_speed", 0 );	

  004d3	c7 45 e0 9e 87
	82 86		 mov	 DWORD PTR __k$552502[ebp], -2038265954 ; 8682879eH
  004da	c7 45 e4 81 b3
	87 85		 mov	 DWORD PTR __k$552502[ebp+4], -2054704255 ; 8587b381H
  004e1	c7 45 e8 82 9c
	b4 98		 mov	 DWORD PTR __k$552502[ebp+8], -1732993918 ; 98b49c82H
  004e8	c7 45 ec 82 98
	8a 9e		 mov	 DWORD PTR __k$552502[ebp+12], -1635084158 ; 9e8a9882H
  004ef	c7 45 f0 88 b3
	98 9a		 mov	 DWORD PTR __k$552502[ebp+16], -1701268600 ; 9a98b388H
  004f6	8d 45 e0	 lea	 eax, DWORD PTR __k$552502[ebp]
  004f9	c7 45 f4 88 89
	8f 00		 mov	 DWORD PTR __k$552502[ebp+20], 9406856 ; 008f8988H
  00500	59		 pop	 ecx
$LL1184@LoadProper:
  00501	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00507	83 c0 04	 add	 eax, 4
  0050a	49		 dec	 ecx
  0050b	75 f4		 jne	 SHORT $LL1184@LoadProper
  0050d	6a 14		 push	 20			; 00000014H
  0050f	58		 pop	 eax
$LL1181@LoadProper:
  00510	8b c8		 mov	 ecx, eax
  00512	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00518	79 05		 jns	 SHORT $LN1240@LoadProper
  0051a	49		 dec	 ecx
  0051b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0051e	41		 inc	 ecx
$LN1240@LoadProper:
  0051f	b2 ed		 mov	 dl, -19			; ffffffedH
  00521	2a d1		 sub	 dl, cl
  00523	30 54 05 e0	 xor	 BYTE PTR __k$552502[ebp+eax], dl
  00527	40		 inc	 eax
  00528	83 f8 17	 cmp	 eax, 23			; 00000017H
  0052b	7c e3		 jl	 SHORT $LL1181@LoadProper
  0052d	53		 push	 ebx
  0052e	8d 45 e0	 lea	 eax, DWORD PTR __k$552502[ebp]
  00531	50		 push	 eax
  00532	8b cf		 mov	 ecx, edi
  00534	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0053a	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$552615[ebp], eax
  00540	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$552615[ebp]
  00546	50		 push	 eax
  00547	8d 8e ec 13 00
	00		 lea	 ecx, DWORD PTR [esi+5100]
  0054d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 84   : }

  00552	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00555	5f		 pop	 edi
  00556	5e		 pop	 esi
  00557	33 cd		 xor	 ecx, ebp
  00559	5b		 pop	 ebx
  0055a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0055f	c9		 leave
  00560	c2 04 00	 ret	 4
?LoadProperty@ioAngleFire3Skill@@UAEXAAVioINILoader@@@Z ENDP ; ioAngleFire3Skill::LoadProperty
_TEXT	ENDS
EXTRN	?ChangeSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N@Z:PROC ; ioBaseChar::ChangeSkillWeaponMesh
EXTRN	?ReduceNeedGaugeBySkill@ioBaseChar@@QAEMPAVioSkill@@M@Z:PROC ; ioBaseChar::ReduceNeedGaugeBySkill
EXTRN	?GetNeedGauge@ioSkill@@QAEMABVioHashString@@@Z:PROC ; ioSkill::GetNeedGauge
EXTRN	?OnSkillStart@ioAttackSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::OnSkillStart
; Function compile flags: /Ogsp
;	COMDAT ?OnSkillStart@ioAngleFire3Skill@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?OnSkillStart@ioAngleFire3Skill@@UAE_NPAVioBaseChar@@@Z PROC ; ioAngleFire3Skill::OnSkillStart, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 93   : 	if( !ioAttackSkill::OnSkillStart( pChar ) )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?OnSkillStart@ioAttackSkill@@UAE_NPAVioBaseChar@@@Z ; ioAttackSkill::OnSkillStart
  00010	84 c0		 test	 al, al
  00012	0f 84 84 00 00
	00		 je	 $LN4@OnSkillSta
$LN3@OnSkillSta:
  00018	53		 push	 ebx

; 94   : 		return false;
; 95   : 
; 96   : 	m_bSetHandMesh = false;

  00019	33 db		 xor	 ebx, ebx
  0001b	88 9e 0a 0f 00
	00		 mov	 BYTE PTR [esi+3850], bl

; 97   : 
; 98   : 	// 기본 무기 손에서 제거
; 99   : 	if( m_bUseItemMesh )

  00021	38 9e 08 0f 00
	00		 cmp	 BYTE PTR [esi+3848], bl
  00027	74 13		 je	 SHORT $LN2@OnSkillSta

; 100  : 	{
; 101  : 		pChar->ShowWeaponItemMesh( false );

  00029	53		 push	 ebx
  0002a	53		 push	 ebx
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z ; ioBaseChar::ShowWeaponItemMesh

; 102  : 		pChar->ShowEquipItemMesh( false, ES_CLOAK );

  00032	6a 03		 push	 3
  00034	53		 push	 ebx
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?ShowEquipItemMesh@ioBaseChar@@QAEX_NH@Z ; ioBaseChar::ShowEquipItemMesh
$LN2@OnSkillSta:

; 103  : 	}
; 104  : 
; 105  : 	ClearData();

  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ?ClearData@ioAngleFire3Skill@@IAEXXZ ; ioAngleFire3Skill::ClearData

; 106  : 
; 107  : 	pChar->ReduceNeedGaugeBySkill( this, GetNeedGauge( pChar->GetCharName() ) );

  00043	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  00049	50		 push	 eax
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?GetNeedGauge@ioSkill@@QAEMABVioHashString@@@Z ; ioSkill::GetNeedGauge
  00051	51		 push	 ecx
  00052	d9 1c 24	 fstp	 DWORD PTR [esp]
  00055	56		 push	 esi
  00056	8b cf		 mov	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?ReduceNeedGaugeBySkill@ioBaseChar@@QAEMPAVioSkill@@M@Z ; ioBaseChar::ReduceNeedGaugeBySkill
  0005d	dd d8		 fstp	 ST(0)

; 108  : 
; 109  : 	if( !m_bSetHandMesh && m_bUseItemMesh && !m_HandMesh.IsEmpty() )

  0005f	38 9e 0a 0f 00
	00		 cmp	 BYTE PTR [esi+3850], bl
  00065	75 32		 jne	 SHORT $LN1@OnSkillSta
  00067	38 9e 08 0f 00
	00		 cmp	 BYTE PTR [esi+3848], bl
  0006d	74 2a		 je	 SHORT $LN1@OnSkillSta
  0006f	8d 9e f8 0e 00
	00		 lea	 ebx, DWORD PTR [esi+3832]
  00075	8b cb		 mov	 ecx, ebx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0007d	84 c0		 test	 al, al
  0007f	75 18		 jne	 SHORT $LN1@OnSkillSta

; 110  : 	{
; 111  : 		pChar->ChangeSkillWeaponMesh( this, m_HandMesh, m_bVisibleEquipMesh );

  00081	0f b6 86 09 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3849]
  00088	50		 push	 eax
  00089	53		 push	 ebx
  0008a	56		 push	 esi
  0008b	8b cf		 mov	 ecx, edi
  0008d	e8 00 00 00 00	 call	 ?ChangeSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N@Z ; ioBaseChar::ChangeSkillWeaponMesh

; 112  : 		m_bSetHandMesh = true;

  00092	c6 86 0a 0f 00
	00 01		 mov	 BYTE PTR [esi+3850], 1
$LN1@OnSkillSta:

; 113  : 	}
; 114  : 
; 115  : 	return true;

  00099	b0 01		 mov	 al, 1
  0009b	5b		 pop	 ebx
$LN4@OnSkillSta:
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 116  : }

  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?OnSkillStart@ioAngleFire3Skill@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAngleFire3Skill::OnSkillStart
_TEXT	ENDS
PUBLIC	__real@bfef5c2900000000
PUBLIC	__real@3fef5c2900000000
PUBLIC	__real@4066800000000000
PUBLIC	__real@4046800000000000
PUBLIC	_pChar$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessRotate@ioAngleFire3Skill@@IAEXPAVioBaseChar@@M@Z ; ioAngleFire3Skill::ProcessRotate
EXTRN	__imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	_D3DXQuaternionRotationYawPitchRoll@16:PROC
EXTRN	__imp_?ArrangeHead@ioMath@@SAMM@Z:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	__imp_?GetCurFrameGap@ioFrameTimer@@QBEMXZ:PROC
;	COMDAT __real@bfef5c2900000000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@bfef5c2900000000 DQ 0bfef5c2900000000r	; -0.98
CONST	ENDS
;	COMDAT __real@3fef5c2900000000
CONST	SEGMENT
__real@3fef5c2900000000 DQ 03fef5c2900000000r	; 0.98
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@4046800000000000
CONST	SEGMENT
__real@4046800000000000 DQ 04046800000000000r	; 45
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
CONST	ENDS
;	COMDAT ?ProcessRotate@ioAngleFire3Skill@@IAEXPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_qtCurRot$ = -128					; size = 16
_qtRotate$ = -112					; size = 16
_qtNewRot$ = -96					; size = 16
_pChar$GSCopy$ = -80					; size = 4
_fRotateAngle$ = -76					; size = 4
_fRate$ = -76						; size = 4
tv614 = -72						; size = 4
tv597 = -72						; size = 4
_fDotValue$ = -72					; size = 4
tv571 = -68						; size = 4
tv554 = -68						; size = 4
_this$GSCopy$ = -68					; size = 4
_fGapAngle$ = -68					; size = 4
_fYawR$ = -68						; size = 4
_vAxis$ = -64						; size = 12
_vNewDir$ = -52						; size = 12
_vTargetDir$ = -40					; size = 12
_vCurMoveDir$ = -28					; size = 12
_v$552726 = -16						; size = 12
$T548318 = -16						; size = 12
$T548312 = -16						; size = 12
$T548300 = -16						; size = 12
$T548289 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pChar$ = 8						; size = 4
_fRotateSpeed$ = 12					; size = 4
?ProcessRotate@ioAngleFire3Skill@@IAEXPAVioBaseChar@@M@Z PROC ; ioAngleFire3Skill::ProcessRotate, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _pChar$[ebp]
  00017	8b c1		 mov	 eax, ecx

; 382  : 
; 383  : 	D3DXVECTOR3 vNewDir = qtNewRot * vCurMoveDir;

  00019	89 45 bc	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001c	89 75 b0	 mov	 DWORD PTR _pChar$GSCopy$[ebp], esi
  0001f	85 f6		 test	 esi, esi
  00021	0f 84 70 03 00
	00		 je	 $LN9@ProcessRot

; 332  : 	if( !pChar ) return;
; 333  : 	if( fRotateSpeed <= 0 ) return;

  00027	0f 57 c0	 xorps	 xmm0, xmm0
  0002a	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _fRotateSpeed$[ebp]
  0002e	0f 83 63 03 00
	00		 jae	 $LN9@ProcessRot

; 334  : 
; 335  : 	if( m_CurDirKey == ioUserKeyInput::DKI_NONE )

  00034	83 b8 e8 13 00
	00 00		 cmp	 DWORD PTR [eax+5096], 0
  0003b	0f 84 56 03 00
	00		 je	 $LN9@ProcessRot

; 336  : 		return;
; 337  : 
; 338  : 	float fFrameGap = g_FrameTimer.GetCurFrameGap();

  00041	53		 push	 ebx
  00042	57		 push	 edi
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00049	8b c8		 mov	 ecx, eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCurFrameGap@ioFrameTimer@@QBEMXZ

; 339  : 	float fRate = fFrameGap / fRotateSpeed;

  00051	d8 75 0c	 fdiv	 DWORD PTR _fRotateSpeed$[ebp]
  00054	d9 5d b4	 fstp	 DWORD PTR _fRate$[ebp]

; 340  : 	float fRotateAngle = FLOAT360 * fRate;

  00057	b8 68 01 00 00	 mov	 eax, 360		; 00000168H
  0005c	89 45 b8	 mov	 DWORD PTR tv614[ebp], eax
  0005f	db 45 b8	 fild	 DWORD PTR tv614[ebp]
  00062	85 c0		 test	 eax, eax
  00064	79 06		 jns	 SHORT $LN53@ProcessRot
  00066	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN53@ProcessRot:
  0006c	d8 4d b4	 fmul	 DWORD PTR _fRate$[ebp]

; 341  : 
; 342  : 	D3DXQUATERNION qtCurRot = pChar->GetTargetRot();

  0006f	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  00075	8d 7d 80	 lea	 edi, DWORD PTR _qtCurRot$[ebp]
  00078	a5		 movsd
  00079	d9 5d b4	 fstp	 DWORD PTR _fRotateAngle$[ebp]
  0007c	a5		 movsd
  0007d	a5		 movsd
  0007e	a5		 movsd

; 343  : 	D3DXVECTOR3 vCurMoveDir = qtCurRot * D3DXVECTOR3(0.0f, 0.0f, -FLOAT1);

  0007f	b8 01 00 00 00	 mov	 eax, 1
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	89 45 b8	 mov	 DWORD PTR tv597[ebp], eax
  0008a	db 45 b8	 fild	 DWORD PTR tv597[ebp]
  0008d	f3 0f 11 45 f0	 movss	 DWORD PTR $T548289[ebp], xmm0
  00092	f3 0f 11 45 f4	 movss	 DWORD PTR $T548289[ebp+4], xmm0
  00097	85 c0		 test	 eax, eax
  00099	79 06		 jns	 SHORT $LN54@ProcessRot
  0009b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN54@ProcessRot:
  000a1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000a7	d9 e0		 fchs
  000a9	8d 45 f0	 lea	 eax, DWORD PTR $T548289[ebp]
  000ac	d9 5d f8	 fstp	 DWORD PTR $T548289[ebp+8]
  000af	50		 push	 eax
  000b0	8d 45 80	 lea	 eax, DWORD PTR _qtCurRot$[ebp]
  000b3	50		 push	 eax
  000b4	8d 45 e4	 lea	 eax, DWORD PTR _vCurMoveDir$[ebp]
  000b7	50		 push	 eax
  000b8	ff d3		 call	 ebx
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 344  : 	D3DXVec3Normalize( &vCurMoveDir, &vCurMoveDir );

  000bd	8d 45 e4	 lea	 eax, DWORD PTR _vCurMoveDir$[ebp]
  000c0	50		 push	 eax
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 345  : 
; 346  : 	// 목표에 도달체크 및 처리
; 347  : 	float fYawD = 180.0f + 45.0f * ( m_CurDirKey - ioUserKeyInput::DKI_UP );

  000c7	8b 45 bc	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  000ca	8b 80 e8 13 00
	00		 mov	 eax, DWORD PTR [eax+5096]
  000d0	0f 57 c0	 xorps	 xmm0, xmm0
  000d3	48		 dec	 eax
  000d4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000d8	0f 5a c0	 cvtps2pd xmm0, xmm0
  000db	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4046800000000000
  000e3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4066800000000000

; 348  : 	fYawD = ioMath::ArrangeHead( fYawD );

  000eb	51		 push	 ecx
  000ec	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z

; 349  : 
; 350  : 	float fYawR = DEGtoRAD( fYawD );

  000fb	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a

; 351  : 	D3DXQUATERNION qtRotate;
; 352  : 	D3DXQuaternionRotationYawPitchRoll( &qtRotate, fYawR, 0.0f, 0.0f );

  00101	0f 57 c0	 xorps	 xmm0, xmm0
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	51		 push	 ecx
  0010a	d9 5d bc	 fstp	 DWORD PTR _fYawR$[ebp]
  0010d	51		 push	 ecx
  0010e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00114	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _fYawR$[ebp]
  00119	8d 45 90	 lea	 eax, DWORD PTR _qtRotate$[ebp]
  0011c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16

; 353  : 
; 354  : 	D3DXVECTOR3 vTargetDir = qtRotate * D3DXVECTOR3(0.0f, 0.0f, -FLOAT1);

  00127	b8 01 00 00 00	 mov	 eax, 1
  0012c	0f 57 c0	 xorps	 xmm0, xmm0
  0012f	89 45 bc	 mov	 DWORD PTR tv571[ebp], eax
  00132	db 45 bc	 fild	 DWORD PTR tv571[ebp]
  00135	f3 0f 11 45 f0	 movss	 DWORD PTR $T548300[ebp], xmm0
  0013a	f3 0f 11 45 f4	 movss	 DWORD PTR $T548300[ebp+4], xmm0
  0013f	85 c0		 test	 eax, eax
  00141	79 06		 jns	 SHORT $LN55@ProcessRot
  00143	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN55@ProcessRot:
  00149	8d 45 f0	 lea	 eax, DWORD PTR $T548300[ebp]
  0014c	d9 e0		 fchs
  0014e	50		 push	 eax
  0014f	d9 5d f8	 fstp	 DWORD PTR $T548300[ebp+8]
  00152	8d 45 90	 lea	 eax, DWORD PTR _qtRotate$[ebp]
  00155	50		 push	 eax
  00156	8d 45 d8	 lea	 eax, DWORD PTR _vTargetDir$[ebp]
  00159	50		 push	 eax
  0015a	ff d3		 call	 ebx
  0015c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 355  : 	D3DXVec3Normalize( &vTargetDir, &vTargetDir );

  0015f	8d 45 d8	 lea	 eax, DWORD PTR _vTargetDir$[ebp]
  00162	50		 push	 eax
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 356  : 
; 357  : 	float fDotValue = D3DXVec3Dot( &vCurMoveDir, &vTargetDir );

  00169	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vCurMoveDir$[ebp+4]
  0016e	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _vTargetDir$[ebp+4]
  00173	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _vCurMoveDir$[ebp]
  00178	0f 5a c9	 cvtps2pd xmm1, xmm1
  0017b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0017e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00182	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _vTargetDir$[ebp]
  00187	0f 5a c9	 cvtps2pd xmm1, xmm1
  0018a	0f 5a d2	 cvtps2pd xmm2, xmm2
  0018d	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00191	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _vTargetDir$[ebp+8]
  00196	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0019a	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vCurMoveDir$[ebp+8]
  0019f	0f 5a c9	 cvtps2pd xmm1, xmm1
  001a2	0f 5a d2	 cvtps2pd xmm2, xmm2
  001a5	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001a9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ad	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001b1	f3 0f 11 45 b8	 movss	 DWORD PTR _fDotValue$[ebp], xmm0

; 358  : 	float fGapAngle = RADtoDEG( acosf(fDotValue) );

  001b6	d9 45 b8	 fld	 DWORD PTR _fDotValue$[ebp]
  001b9	e8 00 00 00 00	 call	 __CIacos
  001be	d9 5d bc	 fstp	 DWORD PTR tv554[ebp]
  001c1	d9 45 bc	 fld	 DWORD PTR tv554[ebp]
  001c4	51		 push	 ecx
  001c5	d9 1c 24	 fstp	 DWORD PTR [esp]
  001c8	e8 00 00 00 00	 call	 ??$RADtoDEG@M@@YAMM@Z	; RADtoDEG<float>

; 359  : 
; 360  : 	if( fDotValue >= 0.98f )

  001cd	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _fDotValue$[ebp]
  001d2	d9 5d bc	 fstp	 DWORD PTR _fGapAngle$[ebp]
  001d5	0f 5a c0	 cvtps2pd xmm0, xmm0
  001d8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fef5c2900000000
  001e0	59		 pop	 ecx
  001e1	72 08		 jb	 SHORT $LN5@ProcessRot

; 361  : 	{
; 362  : 		pChar->SetTargetRotToRotate( qtRotate, true );

  001e3	8d 45 90	 lea	 eax, DWORD PTR _qtRotate$[ebp]

; 363  : 		return;

  001e6	e9 9d 01 00 00	 jmp	 $LN56@ProcessRot
$LN5@ProcessRot:

; 364  : 	}
; 365  : 
; 366  : 	D3DXVECTOR3 vAxis;
; 367  : 	if( fDotValue <= -0.98f )

  001eb	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _fDotValue$[ebp]
  001f0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfef5c2900000000
  001f8	0f 5a c0	 cvtps2pd xmm0, xmm0
  001fb	66 0f 2f c8	 comisd	 xmm1, xmm0
  001ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  00207	72 11		 jb	 SHORT $LN4@ProcessRot

; 368  : 	{
; 369  : 		vAxis = ioMath::UNIT_Y;

  00209	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  0020f	8d 7d c0	 lea	 edi, DWORD PTR _vAxis$[ebp]
  00212	a5		 movsd
  00213	a5		 movsd
  00214	a5		 movsd

; 370  : 	}
; 371  : 	else

  00215	e9 cd 00 00 00	 jmp	 $LN3@ProcessRot
$LN4@ProcessRot:

; 372  : 	{
; 373  : 		D3DXVec3Cross( &vAxis, &vTargetDir, &vCurMoveDir );

  0021a	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _vCurMoveDir$[ebp+8]
  0021f	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _vTargetDir$[ebp+4]
  00224	f3 0f 10 5d e0	 movss	 xmm3, DWORD PTR _vTargetDir$[ebp+8]
  00229	f3 0f 10 65 d8	 movss	 xmm4, DWORD PTR _vTargetDir$[ebp]
  0022e	f3 0f 10 6d e4	 movss	 xmm5, DWORD PTR _vCurMoveDir$[ebp]
  00233	0f 5a d2	 cvtps2pd xmm2, xmm2
  00236	0f 5a db	 cvtps2pd xmm3, xmm3
  00239	0f 5a c9	 cvtps2pd xmm1, xmm1
  0023c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00240	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vCurMoveDir$[ebp+4]
  00245	0f 5a d2	 cvtps2pd xmm2, xmm2
  00248	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  0024c	f3 0f 10 5d e4	 movss	 xmm3, DWORD PTR _vCurMoveDir$[ebp]
  00251	f2 0f 5c ca	 subsd	 xmm1, xmm2
  00255	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _vTargetDir$[ebp+8]
  0025a	0f 5a db	 cvtps2pd xmm3, xmm3
  0025d	0f 5a d2	 cvtps2pd xmm2, xmm2
  00260	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00264	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _vCurMoveDir$[ebp+8]
  00269	0f 5a db	 cvtps2pd xmm3, xmm3
  0026c	0f 5a e4	 cvtps2pd xmm4, xmm4
  0026f	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  00273	f3 0f 10 65 d8	 movss	 xmm4, DWORD PTR _vTargetDir$[ebp]
  00278	f2 0f 5c d3	 subsd	 xmm2, xmm3
  0027c	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _vCurMoveDir$[ebp+4]
  00281	0f 5a db	 cvtps2pd xmm3, xmm3
  00284	0f 5a e4	 cvtps2pd xmm4, xmm4
  00287	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  0028b	f3 0f 10 65 dc	 movss	 xmm4, DWORD PTR _vTargetDir$[ebp+4]
  00290	0f 5a e4	 cvtps2pd xmm4, xmm4
  00293	0f 5a ed	 cvtps2pd xmm5, xmm5
  00296	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  0029a	f2 0f 5c dc	 subsd	 xmm3, xmm4
  0029e	f2 0f 5a c9	 cvtsd2ss xmm1, xmm1
  002a2	f3 0f 11 4d f0	 movss	 DWORD PTR _v$552726[ebp], xmm1
  002a7	f2 0f 5a d2	 cvtsd2ss xmm2, xmm2
  002ab	f3 0f 11 55 f4	 movss	 DWORD PTR _v$552726[ebp+4], xmm2
  002b0	f2 0f 5a db	 cvtsd2ss xmm3, xmm3
  002b4	f3 0f 11 5d f8	 movss	 DWORD PTR _v$552726[ebp+8], xmm3
  002b9	8d 75 f0	 lea	 esi, DWORD PTR _v$552726[ebp]
  002bc	8d 7d c0	 lea	 edi, DWORD PTR _vAxis$[ebp]
  002bf	a5		 movsd
  002c0	a5		 movsd

; 374  : 		D3DXVec3Normalize( &vAxis, &-vAxis );

  002c1	8d 45 f0	 lea	 eax, DWORD PTR $T548312[ebp]
  002c4	50		 push	 eax
  002c5	a5		 movsd
  002c6	8d 45 c0	 lea	 eax, DWORD PTR _vAxis$[ebp]
  002c9	0f 57 c8	 xorps	 xmm1, xmm0
  002cc	0f 57 d0	 xorps	 xmm2, xmm0
  002cf	0f 57 d8	 xorps	 xmm3, xmm0
  002d2	50		 push	 eax
  002d3	f3 0f 11 4d f0	 movss	 DWORD PTR $T548312[ebp], xmm1
  002d8	f3 0f 11 55 f4	 movss	 DWORD PTR $T548312[ebp+4], xmm2
  002dd	f3 0f 11 5d f8	 movss	 DWORD PTR $T548312[ebp+8], xmm3
  002e2	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
$LN3@ProcessRot:

; 375  : 	}
; 376  : 
; 377  : 	D3DXQUATERNION qtNewRot;
; 378  : 	if( fGapAngle < fRotateAngle )

  002e7	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _fGapAngle$[ebp]
  002ec	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _fRotateAngle$[ebp]
  002f1	0f 5a c0	 cvtps2pd xmm0, xmm0
  002f4	0f 5a c9	 cvtps2pd xmm1, xmm1
  002f7	66 0f 2f c8	 comisd	 xmm1, xmm0

; 379  : 		D3DXQuaternionRotationAxis( &qtNewRot, &vAxis, DEGtoRAD(fGapAngle) );

  002fb	51		 push	 ecx
  002fc	8d 45 c0	 lea	 eax, DWORD PTR _vAxis$[ebp]
  002ff	76 07		 jbe	 SHORT $LN2@ProcessRot
  00301	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _fGapAngle$[ebp]

; 380  : 	else

  00306	eb 05		 jmp	 SHORT $LN57@ProcessRot
$LN2@ProcessRot:

; 381  : 		D3DXQuaternionRotationAxis( &qtNewRot, &vAxis, DEGtoRAD(fRotateAngle) );

  00308	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _fRotateAngle$[ebp]
$LN57@ProcessRot:
  0030d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00310	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  00318	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00321	50		 push	 eax
  00322	8d 45 a0	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 382  : 
; 383  : 	D3DXVECTOR3 vNewDir = qtNewRot * vCurMoveDir;

  0032b	8d 45 e4	 lea	 eax, DWORD PTR _vCurMoveDir$[ebp]
  0032e	50		 push	 eax
  0032f	8d 45 a0	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  00332	50		 push	 eax
  00333	8d 45 cc	 lea	 eax, DWORD PTR _vNewDir$[ebp]
  00336	50		 push	 eax
  00337	ff d3		 call	 ebx
  00339	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 	D3DXVec3Normalize( &vNewDir, &vNewDir );

  0033c	8d 45 cc	 lea	 eax, DWORD PTR _vNewDir$[ebp]
  0033f	50		 push	 eax
  00340	50		 push	 eax
  00341	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 385  : 
; 386  : 	ioMath::CalcDirectionQuaternion( qtNewRot, -vNewDir );

  00346	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0034e	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _vNewDir$[ebp]
  00353	0f 57 c8	 xorps	 xmm1, xmm0
  00356	f3 0f 11 4d f0	 movss	 DWORD PTR $T548318[ebp], xmm1
  0035b	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _vNewDir$[ebp+4]
  00360	0f 57 c8	 xorps	 xmm1, xmm0
  00363	8d 45 f0	 lea	 eax, DWORD PTR $T548318[ebp]
  00366	50		 push	 eax
  00367	f3 0f 11 4d f4	 movss	 DWORD PTR $T548318[ebp+4], xmm1
  0036c	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _vNewDir$[ebp+8]
  00371	8d 45 a0	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  00374	0f 57 c8	 xorps	 xmm1, xmm0
  00377	50		 push	 eax
  00378	f3 0f 11 4d f8	 movss	 DWORD PTR $T548318[ebp+8], xmm1
  0037d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z
  00383	59		 pop	 ecx
  00384	59		 pop	 ecx

; 387  : 	pChar->SetTargetRotToRotate( qtNewRot, true );

  00385	8d 45 a0	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
$LN56@ProcessRot:
  00388	8b 4d b0	 mov	 ecx, DWORD PTR _pChar$GSCopy$[ebp]
  0038b	6a 00		 push	 0
  0038d	6a 01		 push	 1
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate
  00395	5f		 pop	 edi
  00396	5b		 pop	 ebx
$LN9@ProcessRot:

; 388  : }

  00397	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0039a	33 cd		 xor	 ecx, ebp
  0039c	5e		 pop	 esi
  0039d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a2	c9		 leave
  003a3	c2 08 00	 ret	 8
?ProcessRotate@ioAngleFire3Skill@@IAEXPAVioBaseChar@@M@Z ENDP ; ioAngleFire3Skill::ProcessRotate
_TEXT	ENDS
PUBLIC	__mask@@AbsDouble@
PUBLIC	?CheckAngle@ioAngleFire3Skill@@IAEXPAVioBaseChar@@MM@Z ; ioAngleFire3Skill::CheckAngle
EXTRN	__ftol2:PROC
;	COMDAT __mask@@AbsDouble@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
CONST	ENDS
;	COMDAT ?CheckAngle@ioAngleFire3Skill@@IAEXPAVioBaseChar@@MM@Z
_TEXT	SEGMENT
_value$552788 = -8					; size = 4
_fGapAngle$ = -8					; size = 4
tv285 = -4						; size = 4
tv231 = -4						; size = 4
_value$552795 = -4					; size = 4
tv271 = 8						; size = 4
tv267 = 8						; size = 4
tv263 = 8						; size = 4
tv259 = 8						; size = 4
_value$552780 = 8					; size = 4
_value$552784 = 8					; size = 4
_fHalfTime$ = 8						; size = 4
_pChar$ = 8						; size = 4
_fMinAngle$ = 12					; size = 4
tv220 = 16						; size = 4
tv218 = 16						; size = 4
_value$552816 = 16					; size = 4
_value$552808 = 16					; size = 4
_fMaxAngle$ = 16					; size = 4
?CheckAngle@ioAngleFire3Skill@@IAEXPAVioBaseChar@@MM@Z PROC ; ioAngleFire3Skill::CheckAngle, COMDAT
; _this$ = ecx

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 392  : 	if( !pChar )

  00005	83 7d 08 00	 cmp	 DWORD PTR _pChar$[ebp], 0
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	0f 84 95 01 00
	00		 je	 $LN27@CheckAngle

; 393  : 		return;
; 394  : 
; 395  : 	if( m_dwAngleTime == 0 )

  00012	57		 push	 edi
  00013	8d 45 08	 lea	 eax, DWORD PTR _value$552780[ebp]
  00016	50		 push	 eax
  00017	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  0001d	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00022	83 7d 08 00	 cmp	 DWORD PTR _value$552780[ebp], 0
  00026	0f 84 7a 01 00
	00		 je	 $LN29@CheckAngle

; 396  : 		return;
; 397  : 
; 398  : 	DWORD dwCurTime = FRAMEGETTIME();

  0002c	53		 push	 ebx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00033	8b c8		 mov	 ecx, eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0003b	8b d8		 mov	 ebx, eax

; 399  : 	DWORD dwGapTime = dwCurTime - m_dwLoopStartTime;

  0003d	8d 45 08	 lea	 eax, DWORD PTR _value$552784[ebp]
  00040	50		 push	 eax
  00041	8d 8e b8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4536]
  00047	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 400  : 
; 401  : 	dwGapTime = dwGapTime % m_dwAngleTime;

  0004c	8d 45 f8	 lea	 eax, DWORD PTR _value$552788[ebp]
  0004f	50		 push	 eax
  00050	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  00056	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0005b	8b c3		 mov	 eax, ebx
  0005d	2b 45 08	 sub	 eax, DWORD PTR _value$552784[ebp]
  00060	33 d2		 xor	 edx, edx
  00062	f7 75 f8	 div	 DWORD PTR _value$552788[ebp]

; 402  : 
; 403  : 	float fGapAngle = fabsf(fMaxAngle - fMinAngle);

  00065	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fMaxAngle$[ebp]
  0006a	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fMinAngle$[ebp]
  0006f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00072	0f 5a c9	 cvtps2pd xmm1, xmm1
  00075	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00079	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00081	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __mask@@AbsDouble@

; 404  : 	// /2.0f 를 * FLOAT05로 변경
; 405  : 	float fHalfTime = (float)m_dwAngleTime * FLOAT05;

  00089	8d 45 fc	 lea	 eax, DWORD PTR _value$552795[ebp]
  0008c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00090	50		 push	 eax
  00091	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  00097	f3 0f 11 45 f8	 movss	 DWORD PTR _fGapAngle$[ebp], xmm0
  0009c	8b da		 mov	 ebx, edx
  0009e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000a3	b8 05 00 00 00	 mov	 eax, 5
  000a8	8b c8		 mov	 ecx, eax
  000aa	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000af	89 4d 08	 mov	 DWORD PTR tv271[ebp], ecx
  000b2	db 45 08	 fild	 DWORD PTR tv271[ebp]
  000b5	85 c9		 test	 ecx, ecx
  000b7	79 06		 jns	 SHORT $LN30@CheckAngle
  000b9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN30@CheckAngle:
  000bf	89 45 08	 mov	 DWORD PTR tv267[ebp], eax
  000c2	db 45 08	 fild	 DWORD PTR tv267[ebp]
  000c5	85 c0		 test	 eax, eax
  000c7	79 06		 jns	 SHORT $LN31@CheckAngle
  000c9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN31@CheckAngle:
  000cf	de f9		 fdivp	 ST(1), ST(0)
  000d1	8b 45 fc	 mov	 eax, DWORD PTR _value$552795[ebp]
  000d4	d9 5d 08	 fstp	 DWORD PTR tv263[ebp]
  000d7	d9 45 08	 fld	 DWORD PTR tv263[ebp]
  000da	db 45 fc	 fild	 DWORD PTR _value$552795[ebp]
  000dd	85 c0		 test	 eax, eax
  000df	79 06		 jns	 SHORT $LN32@CheckAngle
  000e1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@CheckAngle:
  000e7	de c9		 fmulp	 ST(1), ST(0)

; 406  : 
; 407  : 	if( dwGapTime > fHalfTime )

  000e9	89 5d fc	 mov	 DWORD PTR tv231[ebp], ebx
  000ec	d9 5d 08	 fstp	 DWORD PTR _fHalfTime$[ebp]
  000ef	db 45 fc	 fild	 DWORD PTR tv231[ebp]
  000f2	85 db		 test	 ebx, ebx
  000f4	79 06		 jns	 SHORT $LN33@CheckAngle
  000f6	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@CheckAngle:
  000fc	d9 5d fc	 fstp	 DWORD PTR tv285[ebp]
  000ff	5b		 pop	 ebx
  00100	d9 45 08	 fld	 DWORD PTR _fHalfTime$[ebp]
  00103	d9 45 fc	 fld	 DWORD PTR tv285[ebp]
  00106	df f1		 fcomip	 ST(1)
  00108	dd d8		 fstp	 ST(0)
  0010a	76 31		 jbe	 SHORT $LN4@CheckAngle

; 408  : 	{
; 409  : 		dwGapTime -= fHalfTime;
; 410  : 
; 411  : 		float fRate = (float)dwGapTime / fHalfTime;
; 412  : 		m_fCurAngle = fMaxAngle - ( fGapAngle * fRate );

  0010c	d9 45 10	 fld	 DWORD PTR _fMaxAngle$[ebp]
  0010f	d9 45 fc	 fld	 DWORD PTR tv285[ebp]
  00112	d8 65 08	 fsub	 DWORD PTR _fHalfTime$[ebp]
  00115	e8 00 00 00 00	 call	 __ftol2
  0011a	89 45 10	 mov	 DWORD PTR tv220[ebp], eax
  0011d	db 45 10	 fild	 DWORD PTR tv220[ebp]
  00120	85 c0		 test	 eax, eax
  00122	79 06		 jns	 SHORT $LN34@CheckAngle
  00124	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@CheckAngle:
  0012a	d8 75 08	 fdiv	 DWORD PTR _fHalfTime$[ebp]
  0012d	d9 5d 10	 fstp	 DWORD PTR tv218[ebp]
  00130	d9 45 10	 fld	 DWORD PTR tv218[ebp]
  00133	d8 4d f8	 fmul	 DWORD PTR _fGapAngle$[ebp]
  00136	de e9		 fsubp	 ST(1), ST(0)
  00138	d9 5d 10	 fstp	 DWORD PTR _value$552808[ebp]
  0013b	eb 5a		 jmp	 SHORT $LN35@CheckAngle
$LN4@CheckAngle:

; 413  : 	}
; 414  : 	else if( dwGapTime < fHalfTime )

  0013d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv285[ebp]
  00142	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fHalfTime$[ebp]
  00147	0f 5a c0	 cvtps2pd xmm0, xmm0
  0014a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0014d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00151	76 3a		 jbe	 SHORT $LN2@CheckAngle

; 415  : 	{
; 416  : 		float fRate = (float)dwGapTime / fHalfTime;
; 417  : 		m_fCurAngle = fMinAngle + ( fGapAngle * fRate );

  00153	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fHalfTime$[ebp]
  00158	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv285[ebp]
  0015d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00160	0f 5a c9	 cvtps2pd xmm1, xmm1
  00163	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00167	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _fGapAngle$[ebp]
  0016c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00170	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00174	0f 5a c9	 cvtps2pd xmm1, xmm1
  00177	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0017b	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fMinAngle$[ebp]
  00180	0f 5a c9	 cvtps2pd xmm1, xmm1
  00183	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00187	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 418  : 	}
; 419  : 	else

  0018b	eb 05		 jmp	 SHORT $LN36@CheckAngle
$LN2@CheckAngle:

; 420  : 	{
; 421  : 		m_fCurAngle = fMaxAngle;

  0018d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fMaxAngle$[ebp]
$LN36@CheckAngle:
  00192	f3 0f 11 45 10	 movss	 DWORD PTR _value$552816[ebp], xmm0
$LN35@CheckAngle:
  00197	8d 45 10	 lea	 eax, DWORD PTR _value$552816[ebp]
  0019a	50		 push	 eax
  0019b	8d 8e 38 13 00
	00		 lea	 ecx, DWORD PTR [esi+4920]
  001a1	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
$LN29@CheckAngle:
  001a6	5f		 pop	 edi
$LN27@CheckAngle:
  001a7	5e		 pop	 esi

; 422  : 	}	
; 423  : }

  001a8	c9		 leave
  001a9	c2 0c 00	 ret	 12			; 0000000cH
?CheckAngle@ioAngleFire3Skill@@IAEXPAVioBaseChar@@MM@Z ENDP ; ioAngleFire3Skill::CheckAngle
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CheckDir@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z ; ioAngleFire3Skill::CheckDir
; Function compile flags: /Ogsp
;	COMDAT ?CheckDir@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_qtNewRot$ = -76					; size = 16
tv354 = -60						; size = 4
tv350 = -60						; size = 4
tv345 = -60						; size = 4
tv335 = -60						; size = 4
tv277 = -56						; size = 4
_value$552870 = -56					; size = 4
_this$GSCopy$ = -56					; size = 4
_fCurAngle$ = -56					; size = 4
_vPos$ = -52						; size = 12
_vAxis$ = -40						; size = 12
_v$552860 = -28						; size = 12
$T548358 = -28						; size = 12
$T548353 = -28						; size = 12
_vSightDir$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pChar$ = 8						; size = 4
?CheckDir@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z PROC	; ioAngleFire3Skill::CheckDir, COMDAT
; _this$ = ecx

; 426  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _pChar$[ebp]
  00014	89 4d c8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 427  : 	if( !pChar )

  00017	85 f6		 test	 esi, esi
  00019	0f 84 99 01 00
	00		 je	 $LN2@CheckDir

; 428  : 		return;
; 429  : 
; 430  : 	D3DXVECTOR3 vPos = pChar->GetMidPositionByRate();

  0001f	53		 push	 ebx
  00020	57		 push	 edi
  00021	b8 05 00 00 00	 mov	 eax, 5
  00026	8b c8		 mov	 ecx, eax
  00028	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0002d	89 4d c4	 mov	 DWORD PTR tv354[ebp], ecx
  00030	db 45 c4	 fild	 DWORD PTR tv354[ebp]
  00033	85 c9		 test	 ecx, ecx
  00035	79 06		 jns	 SHORT $LN26@CheckDir
  00037	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN26@CheckDir:
  0003d	89 45 c4	 mov	 DWORD PTR tv350[ebp], eax
  00040	db 45 c4	 fild	 DWORD PTR tv350[ebp]
  00043	85 c0		 test	 eax, eax
  00045	79 06		 jns	 SHORT $LN27@CheckDir
  00047	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN27@CheckDir:
  0004d	de f9		 fdivp	 ST(1), ST(0)
  0004f	51		 push	 ecx
  00050	8d 45 cc	 lea	 eax, DWORD PTR _vPos$[ebp]
  00053	8b ce		 mov	 ecx, esi
  00055	d9 5d c4	 fstp	 DWORD PTR tv345[ebp]
  00058	d9 45 c4	 fld	 DWORD PTR tv345[ebp]
  0005b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 431  : 
; 432  : 	D3DXVECTOR3 vSightDir = pChar->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	0f 57 c0	 xorps	 xmm0, xmm0
  0006c	89 45 c4	 mov	 DWORD PTR tv335[ebp], eax
  0006f	db 45 c4	 fild	 DWORD PTR tv335[ebp]
  00072	f3 0f 11 45 e4	 movss	 DWORD PTR $T548353[ebp], xmm0
  00077	f3 0f 11 45 e8	 movss	 DWORD PTR $T548353[ebp+4], xmm0
  0007c	85 c0		 test	 eax, eax
  0007e	79 06		 jns	 SHORT $LN28@CheckDir
  00080	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@CheckDir:
  00086	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0008c	d9 e0		 fchs
  0008e	8d 45 e4	 lea	 eax, DWORD PTR $T548353[ebp]
  00091	d9 5d ec	 fstp	 DWORD PTR $T548353[ebp+8]
  00094	50		 push	 eax
  00095	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  0009b	8d 45 f0	 lea	 eax, DWORD PTR _vSightDir$[ebp]
  0009e	56		 push	 esi
  0009f	50		 push	 eax
  000a0	ff d3		 call	 ebx
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 433  : 	D3DXVec3Normalize( &vSightDir, &vSightDir );

  000a5	8d 45 f0	 lea	 eax, DWORD PTR _vSightDir$[ebp]
  000a8	50		 push	 eax
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 434  : 
; 435  : 	D3DXVECTOR3 vAxis;
; 436  : 	D3DXVec3Cross( &vAxis, &vSightDir, &ioMath::UNIT_Y );

  000af	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _vSightDir$[ebp+4]
  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  000b9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000be	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  000c3	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _vSightDir$[ebp+8]
  000c8	0f 5a d0	 cvtps2pd xmm2, xmm0
  000cb	0f 5a db	 cvtps2pd xmm3, xmm3
  000ce	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  000d2	0f 5a e4	 cvtps2pd xmm4, xmm4
  000d5	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d8	8d 75 e4	 lea	 esi, DWORD PTR _v$552860[ebp]
  000db	8d 7d d8	 lea	 edi, DWORD PTR _vAxis$[ebp]
  000de	0f 5a d9	 cvtps2pd xmm3, xmm1
  000e1	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  000e5	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _vSightDir$[ebp+8]
  000ea	f2 0f 5c d3	 subsd	 xmm2, xmm3
  000ee	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  000f2	f3 0f 11 55 e4	 movss	 DWORD PTR _v$552860[ebp], xmm2
  000f7	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  000fb	0f 5a da	 cvtps2pd xmm3, xmm2
  000fe	0f 5a e4	 cvtps2pd xmm4, xmm4
  00101	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  00105	f3 0f 10 65 f0	 movss	 xmm4, DWORD PTR _vSightDir$[ebp]
  0010a	0f 5a e4	 cvtps2pd xmm4, xmm4
  0010d	f2 0f 59 c4	 mulsd	 xmm0, xmm4
  00111	f2 0f 5c d8	 subsd	 xmm3, xmm0

; 437  : 
; 438  : 	D3DXQUATERNION qtNewRot;
; 439  : 	float fCurAngle = ioMath::ArrangeHead( m_fCurAngle );

  00115	8d 45 c8	 lea	 eax, DWORD PTR _value$552870[ebp]
  00118	50		 push	 eax
  00119	66 0f 5a c3	 cvtpd2ps xmm0, xmm3
  0011d	f3 0f 11 45 e8	 movss	 DWORD PTR _v$552860[ebp+4], xmm0
  00122	0f 5a c1	 cvtps2pd xmm0, xmm1
  00125	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vSightDir$[ebp]
  0012a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0012d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00131	0f 5a ca	 cvtps2pd xmm1, xmm2
  00134	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vSightDir$[ebp+4]
  00139	0f 5a d2	 cvtps2pd xmm2, xmm2
  0013c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00140	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00144	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00148	f3 0f 11 45 ec	 movss	 DWORD PTR _v$552860[ebp+8], xmm0
  0014d	a5		 movsd
  0014e	a5		 movsd
  0014f	a5		 movsd
  00150	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00153	8d 8f 38 13 00
	00		 lea	 ecx, DWORD PTR [edi+4920]
  00159	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0015e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _value$552870[ebp]
  00163	51		 push	 ecx
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z
  0016f	d9 5d c8	 fstp	 DWORD PTR _fCurAngle$[ebp]

; 440  : 	D3DXQuaternionRotationAxis( &qtNewRot, &vAxis, DEGtoRAD(fCurAngle) );

  00172	d9 45 c8	 fld	 DWORD PTR _fCurAngle$[ebp]
  00175	8d 45 d8	 lea	 eax, DWORD PTR _vAxis$[ebp]
  00178	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0017e	d9 5d c8	 fstp	 DWORD PTR tv277[ebp]
  00181	d9 45 c8	 fld	 DWORD PTR tv277[ebp]
  00184	d9 1c 24	 fstp	 DWORD PTR [esp]
  00187	50		 push	 eax
  00188	8d 45 b4	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 441  : 
; 442  : 	m_vAttackDir = qtNewRot * vSightDir;

  00191	8d 45 f0	 lea	 eax, DWORD PTR _vSightDir$[ebp]
  00194	50		 push	 eax
  00195	8d 45 b4	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  00198	50		 push	 eax
  00199	8d 45 e4	 lea	 eax, DWORD PTR $T548358[ebp]
  0019c	50		 push	 eax
  0019d	ff d3		 call	 ebx
  0019f	8d 8f dc 13 00
	00		 lea	 ecx, DWORD PTR [edi+5084]
  001a5	8b f0		 mov	 esi, eax
  001a7	8b f9		 mov	 edi, ecx
  001a9	a5		 movsd
  001aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ad	a5		 movsd

; 443  : 	D3DXVec3Normalize( &m_vAttackDir, &m_vAttackDir );

  001ae	51		 push	 ecx
  001af	51		 push	 ecx
  001b0	a5		 movsd
  001b1	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  001b6	5f		 pop	 edi
  001b7	5b		 pop	 ebx
$LN2@CheckDir:

; 444  : }

  001b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bb	33 cd		 xor	 ecx, ebp
  001bd	5e		 pop	 esi
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	c9		 leave
  001c4	c2 04 00	 ret	 4
?CheckDir@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z ENDP	; ioAngleFire3Skill::CheckDir
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsProtected@ioAngleFire3Skill@@UBE_NH@Z
_TEXT	SEGMENT
_value$552885 = -1					; size = 1
_value$552895 = 8					; size = 4
_value$552890 = 8					; size = 4
_iDefenseBreakType$ = 8					; size = 4
?IsProtected@ioAngleFire3Skill@@UBE_NH@Z PROC		; ioAngleFire3Skill::IsProtected, COMDAT
; _this$ = ecx

; 574  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 575  : 
; 576  : 	if( m_bDisableSkillProtect )

  00007	8d 45 ff	 lea	 eax, DWORD PTR _value$552885[ebp]
  0000a	50		 push	 eax
  0000b	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00011	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00016	80 7d ff 00	 cmp	 BYTE PTR _value$552885[ebp], 0
  0001a	74 04		 je	 SHORT $LN10@IsProtecte
$LN20@IsProtecte:

; 577  : 		return false;

  0001c	32 c0		 xor	 al, al
  0001e	eb 42		 jmp	 SHORT $LN11@IsProtecte
$LN10@IsProtecte:

; 578  : 
; 579  : 	// 스킬 무적 파괴
; 580  : 	if( DBT_NONE != (DefenseBreakType)m_ProtectCancelType )

  00020	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  00026	85 c0		 test	 eax, eax
  00028	74 05		 je	 SHORT $LN8@IsProtecte

; 581  : 	{		
; 582  : 		if( iDefenseBreakType == m_ProtectCancelType )

  0002a	39 45 08	 cmp	 DWORD PTR _iDefenseBreakType$[ebp], eax

; 583  : 			return false;

  0002d	74 ed		 je	 SHORT $LN20@IsProtecte
$LN8@IsProtecte:
  0002f	57		 push	 edi

; 584  : 	}
; 585  : 
; 586  : 	DWORD dwCurTime = FRAMEGETTIME();

  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00036	8b c8		 mov	 ecx, eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0003e	8b f8		 mov	 edi, eax

; 587  : 
; 588  : 	switch( m_State )

  00040	8b 86 e4 10 00
	00		 mov	 eax, DWORD PTR [esi+4324]
  00046	83 e8 00	 sub	 eax, 0
  00049	74 14		 je	 SHORT $LN5@IsProtecte
  0004b	48		 dec	 eax
  0004c	74 19		 je	 SHORT $LN4@IsProtecte
  0004e	48		 dec	 eax
  0004f	75 3f		 jne	 SHORT $LN3@IsProtecte

; 597  : 		break;
; 598  : 
; 599  : 	case SS_ACTION:
; 600  : 		if( 0 < m_dwFireMotionEndTime && dwCurTime < m_dwFireMotionEndTime )

  00051	8b b6 24 02 00
	00		 mov	 esi, DWORD PTR [esi+548]
  00057	85 f6		 test	 esi, esi
  00059	74 35		 je	 SHORT $LN3@IsProtecte
  0005b	3b fe		 cmp	 edi, esi
  0005d	73 31		 jae	 SHORT $LN3@IsProtecte
$LN5@IsProtecte:

; 589  : 	{
; 590  : 	case SS_PRE:
; 591  : 		return true;

  0005f	b0 01		 mov	 al, 1
$LN19@IsProtecte:
  00061	5f		 pop	 edi
$LN11@IsProtecte:
  00062	5e		 pop	 esi

; 605  : }

  00063	c9		 leave
  00064	c2 04 00	 ret	 4
$LN4@IsProtecte:

; 592  : 		break;
; 593  : 
; 594  : 	case SS_LOOP:
; 595  : 		if( 0 < m_dwSkillLoopProtectEndTime && dwCurTime < m_dwSkillLoopProtectEndTime )

  00067	8d 45 08	 lea	 eax, DWORD PTR _value$552890[ebp]
  0006a	50		 push	 eax
  0006b	8d 8e 88 11 00
	00		 lea	 ecx, DWORD PTR [esi+4488]
  00071	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00076	83 7d 08 00	 cmp	 DWORD PTR _value$552890[ebp], 0
  0007a	76 14		 jbe	 SHORT $LN3@IsProtecte
  0007c	8d 45 08	 lea	 eax, DWORD PTR _value$552895[ebp]
  0007f	50		 push	 eax
  00080	8d 8e 88 11 00
	00		 lea	 ecx, DWORD PTR [esi+4488]
  00086	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0008b	3b 7d 08	 cmp	 edi, DWORD PTR _value$552895[ebp]

; 596  : 			return true;

  0008e	72 cf		 jb	 SHORT $LN5@IsProtecte
$LN3@IsProtecte:

; 601  : 			return true;
; 602  : 	}
; 603  : 
; 604  : 	return false;

  00090	32 c0		 xor	 al, al
  00092	eb cd		 jmp	 SHORT $LN19@IsProtecte
?IsProtected@ioAngleFire3Skill@@UBE_NH@Z ENDP		; ioAngleFire3Skill::IsProtected
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??4?$CEncrypt@M@@QAE_NAAV0@@Z			; CEncrypt<float>::operator=
;	COMDAT __real@00000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??4?$CEncrypt@M@@QAE_NAAV0@@Z
_TEXT	SEGMENT
_value$552906 = -4					; size = 4
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z PROC			; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 3314 : 	 {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3315 : 		 type value = inValue;

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$552906[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$552906[ebp]

; 3316 : 		 EncryptValueToPool((char*)&value);

  00018	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	f3 0f 11 45 08	 movss	 DWORD PTR _value$[ebp], xmm0
  00023	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 3317 : #ifdef _NOTUSE
; 3318 : 		 m_value = inValue;
; 3319 : 		 Debug();
; 3320 : #endif
; 3321 : 		 return value;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00034	9f		 lahf
  00035	5e		 pop	 esi
  00036	f6 c4 44	 test	 ah, 68			; 00000044H
  00039	7b 04		 jnp	 SHORT $LN3@operator@2
  0003b	b0 01		 mov	 al, 1
  0003d	eb 02		 jmp	 SHORT $LN4@operator@2
$LN3@operator@2:
  0003f	32 c0		 xor	 al, al
$LN4@operator@2:

; 3322 : 	 }

  00041	c9		 leave
  00042	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z ENDP			; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@ABV0@@Z			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$552918 = 8					; size = 4
_value$552913 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@K@@QAE@ABV0@@Z PROC			; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$552913[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00036	8b 45 08	 mov	 eax, DWORD PTR _value$552913[ebp]
  00039	89 45 08	 mov	 DWORD PTR _value$552918[ebp], eax
  0003c	8d 45 08	 lea	 eax, DWORD PTR _value$552918[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 124  : 	}

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@ABV0@@Z ENDP			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?IsCanJumpingSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$552931 = -1					; size = 1
?IsCanJumpingSkill@ioSkill@@UBE_NXZ PROC		; ioSkill::IsCanJumpingSkill, COMDAT
; _this$ = ecx

; 431  : 	virtual bool IsCanJumpingSkill() const { return m_bEnableJumpingSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$552931[ebp]
  00007	50		 push	 eax
  00008	81 c1 9c 03 00
	00		 add	 ecx, 924		; 0000039cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$552931[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanJumpingSkill@ioSkill@@UBE_NXZ ENDP		; ioSkill::IsCanJumpingSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$552938 = -1					; size = 1
?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ PROC	; ioSkill::IsCanJumpingSkillOnBlowWound, COMDAT
; _this$ = ecx

; 432  : 	virtual bool IsCanJumpingSkillOnBlowWound() const { return m_bEnableJumpingSkillOnBlowWound; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$552938[ebp]
  00007	50		 push	 eax
  00008	81 c1 cc 03 00
	00		 add	 ecx, 972		; 000003ccH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$552938[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ ENDP	; ioSkill::IsCanJumpingSkillOnBlowWound
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanDownSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$552945 = -1					; size = 1
?IsCanDownSkill@ioSkill@@UBE_NXZ PROC			; ioSkill::IsCanDownSkill, COMDAT
; _this$ = ecx

; 437  : 	virtual bool IsCanDownSkill() const { return m_bEnableDownSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$552945[ebp]
  00007	50		 push	 eax
  00008	81 c1 5c 04 00
	00		 add	 ecx, 1116		; 0000045cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$552945[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanDownSkill@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsCanDownSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$552952 = -1					; size = 1
?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ PROC		; ioSkill::IsCanBlowWoundSkill, COMDAT
; _this$ = ecx

; 440  : 	virtual bool IsCanBlowWoundSkill() const { return m_bEnableBlowWoundSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$552952[ebp]
  00007	50		 push	 eax
  00008	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$552952[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ ENDP		; ioSkill::IsCanBlowWoundSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanWoundSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$552959 = -1					; size = 1
?IsCanWoundSkill@ioSkill@@UBE_NXZ PROC			; ioSkill::IsCanWoundSkill, COMDAT
; _this$ = ecx

; 446  : 	virtual bool IsCanWoundSkill() const { return m_bEnableWoundSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$552959[ebp]
  00007	50		 push	 eax
  00008	81 c1 54 05 00
	00		 add	 ecx, 1364		; 00000554H
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$552959[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanWoundSkill@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsCanWoundSkill
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@M@@QAE@ABV0@@Z			; CEncrypt<float>::CEncrypt<float>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@M@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@M@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@M@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@M@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@M@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$552973 = 8					; size = 4
_value$552968 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@M@@QAE@ABV0@@Z PROC			; CEncrypt<float>::CEncrypt<float>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@M@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@M@@AAEXXZ ; CEncrypt<float>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$552968[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$552968[ebp]
  0003b	8d 45 08	 lea	 eax, DWORD PTR _value$552973[ebp]
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	f3 0f 11 45 08	 movss	 DWORD PTR _value$552973[ebp], xmm0
  00046	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 124  : 	}

  0004b	8b c6		 mov	 eax, esi
  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@M@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@M@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@M@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@M@@QAE@ABV0@@Z ENDP			; CEncrypt<float>::CEncrypt<float>
PUBLIC	??0ioAngleFire3Skill@@QAE@XZ			; ioAngleFire3Skill::ioAngleFire3Skill
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioAttackSkill@@QAE@XZ:PROC			; ioAttackSkill::ioAttackSkill
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
xdata$x	SEGMENT
__ehfuncinfo$??0ioAngleFire3Skill@@QAE@XZ DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$??0ioAngleFire3Skill@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioAngleFire3Skill@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$18
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
xdata$x	ENDS
;	COMDAT ??0ioAngleFire3Skill@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioAngleFire3Skill@@QAE@XZ PROC			; ioAngleFire3Skill::ioAngleFire3Skill, COMDAT
; _this$ = ecx

; 13   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAngleFire3Skill@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioAttackSkill@@QAE@XZ ; ioAttackSkill::ioAttackSkill
  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAngleFire3Skill@@6B@
  0002c	ff d7		 call	 edi
  0002e	8d 8e f8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4344]
  00034	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00038	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  0003d	8d 8e 28 11 00
	00		 lea	 ecx, DWORD PTR [esi+4392]
  00043	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00047	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0004c	8d 8e 58 11 00
	00		 lea	 ecx, DWORD PTR [esi+4440]
  00052	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00056	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0005b	8d 8e 88 11 00
	00		 lea	 ecx, DWORD PTR [esi+4488]
  00061	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00065	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0006a	8d 8e b8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4536]
  00070	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00074	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00079	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  0007f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00083	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00088	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  0008e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00092	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00097	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  0009d	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000a1	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  000a6	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  000ac	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000b0	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  000b5	8d 8e a8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4776]
  000bb	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  000bf	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  000c4	8d 8e d8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4824]
  000ca	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  000ce	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  000d3	8d 8e 08 13 00
	00		 lea	 ecx, DWORD PTR [esi+4872]
  000d9	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  000dd	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  000e2	8d 8e 38 13 00
	00		 lea	 ecx, DWORD PTR [esi+4920]
  000e8	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  000ec	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  000f1	8d 8e 68 13 00
	00		 lea	 ecx, DWORD PTR [esi+4968]
  000f7	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  000fb	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  00100	8d 8e 98 13 00
	00		 lea	 ecx, DWORD PTR [esi+5016]
  00106	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  0010a	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  0010f	8d 8e c8 13 00
	00		 lea	 ecx, DWORD PTR [esi+5064]
  00115	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00119	ff d7		 call	 edi
  0011b	8d 8e ec 13 00
	00		 lea	 ecx, DWORD PTR [esi+5100]
  00121	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00125	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>

; 14   : 	ClearData();

  0012a	8b ce		 mov	 ecx, esi
  0012c	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00130	e8 00 00 00 00	 call	 ?ClearData@ioAngleFire3Skill@@IAEXXZ ; ioAngleFire3Skill::ClearData

; 15   : }

  00135	8b c6		 mov	 eax, esi
  00137	e8 00 00 00 00	 call	 __EH_epilog3
  0013c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 f8 10 00
	00		 add	 ecx, 4344		; 000010f8H
  00020	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 28 11 00
	00		 add	 ecx, 4392		; 00001128H
  0002e	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$4:
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 58 11 00
	00		 add	 ecx, 4440		; 00001158H
  0003c	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$5:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	81 c1 88 11 00
	00		 add	 ecx, 4488		; 00001188H
  0004a	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$6:
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	81 c1 b8 11 00
	00		 add	 ecx, 4536		; 000011b8H
  00058	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$7:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 e8 11 00
	00		 add	 ecx, 4584		; 000011e8H
  00066	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$8:
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	81 c1 18 12 00
	00		 add	 ecx, 4632		; 00001218H
  00074	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$9:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	81 c1 48 12 00
	00		 add	 ecx, 4680		; 00001248H
  00082	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$10:
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	81 c1 78 12 00
	00		 add	 ecx, 4728		; 00001278H
  00090	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$11:
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 a8 12 00
	00		 add	 ecx, 4776		; 000012a8H
  0009e	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$12:
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	81 c1 d8 12 00
	00		 add	 ecx, 4824		; 000012d8H
  000ac	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$13:
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	81 c1 08 13 00
	00		 add	 ecx, 4872		; 00001308H
  000ba	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$14:
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	81 c1 38 13 00
	00		 add	 ecx, 4920		; 00001338H
  000c8	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$15:
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	81 c1 68 13 00
	00		 add	 ecx, 4968		; 00001368H
  000d6	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$16:
  000db	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	81 c1 98 13 00
	00		 add	 ecx, 5016		; 00001398H
  000e4	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$17:
  000e9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	81 c1 c8 13 00
	00		 add	 ecx, 5064		; 000013c8H
  000f2	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioAngleFire3Skill@@QAE@XZ$18:
  000f8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	81 c1 ec 13 00
	00		 add	 ecx, 5100		; 000013ecH
  00101	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__ehhandler$??0ioAngleFire3Skill@@QAE@XZ:
  00106	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0010a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0010d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00110	33 c8		 xor	 ecx, eax
  00112	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00117	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAngleFire3Skill@@QAE@XZ
  0011c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAngleFire3Skill@@QAE@XZ ENDP			; ioAngleFire3Skill::ioAngleFire3Skill
PUBLIC	??0ioAngleFire3Skill@@QAE@ABV0@@Z		; ioAngleFire3Skill::ioAngleFire3Skill
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioAttackSkill@@QAE@ABV0@@Z:PROC		; ioAttackSkill::ioAttackSkill
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
xdata$x	SEGMENT
__ehfuncinfo$??0ioAngleFire3Skill@@QAE@ABV0@@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$??0ioAngleFire3Skill@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioAngleFire3Skill@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$18
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
xdata$x	ENDS
;	COMDAT ??0ioAngleFire3Skill@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioAngleFire3Skill@@QAE@ABV0@@Z PROC			; ioAngleFire3Skill::ioAngleFire3Skill, COMDAT
; _this$ = ecx

; 30   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAngleFire3Skill@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioAttackSkill@@QAE@ABV0@@Z ; ioAttackSkill::ioAttackSkill
  0001a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	8d 87 e8 10 00
	00		 lea	 eax, DWORD PTR [edi+4328]
  0002a	50		 push	 eax
  0002b	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAngleFire3Skill@@6B@
  00037	ff d3		 call	 ebx
  00039	8d 87 f8 10 00
	00		 lea	 eax, DWORD PTR [edi+4344]
  0003f	50		 push	 eax
  00040	8d 8e f8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4344]
  00046	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004a	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@ABV0@@Z ; CEncrypt<float>::CEncrypt<float>
  0004f	8d 87 28 11 00
	00		 lea	 eax, DWORD PTR [edi+4392]
  00055	50		 push	 eax
  00056	8d 8e 28 11 00
	00		 lea	 ecx, DWORD PTR [esi+4392]
  0005c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00060	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00065	8d 87 58 11 00
	00		 lea	 eax, DWORD PTR [edi+4440]
  0006b	50		 push	 eax
  0006c	8d 8e 58 11 00
	00		 lea	 ecx, DWORD PTR [esi+4440]
  00072	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00076	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0007b	8d 8e 88 11 00
	00		 lea	 ecx, DWORD PTR [esi+4488]
  00081	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00085	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0008a	8d 8e b8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4536]
  00090	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00094	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00099	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  0009f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000a3	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000a8	8d 87 18 12 00
	00		 lea	 eax, DWORD PTR [edi+4632]
  000ae	50		 push	 eax
  000af	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  000b5	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000b9	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000be	8d 87 48 12 00
	00		 lea	 eax, DWORD PTR [edi+4680]
  000c4	50		 push	 eax
  000c5	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  000cb	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000cf	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@ABV0@@Z ; CEncrypt<float>::CEncrypt<float>
  000d4	8d 87 78 12 00
	00		 lea	 eax, DWORD PTR [edi+4728]
  000da	50		 push	 eax
  000db	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  000e1	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000e5	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@ABV0@@Z ; CEncrypt<float>::CEncrypt<float>
  000ea	8d 87 a8 12 00
	00		 lea	 eax, DWORD PTR [edi+4776]
  000f0	50		 push	 eax
  000f1	8d 8e a8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4776]
  000f7	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  000fb	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@ABV0@@Z ; CEncrypt<float>::CEncrypt<float>
  00100	8d 87 d8 12 00
	00		 lea	 eax, DWORD PTR [edi+4824]
  00106	50		 push	 eax
  00107	8d 8e d8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4824]
  0010d	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00111	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@ABV0@@Z ; CEncrypt<float>::CEncrypt<float>
  00116	8d 8e 08 13 00
	00		 lea	 ecx, DWORD PTR [esi+4872]
  0011c	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00120	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  00125	8d 8e 38 13 00
	00		 lea	 ecx, DWORD PTR [esi+4920]
  0012b	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0012f	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  00134	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00138	8d 8e 68 13 00
	00		 lea	 ecx, DWORD PTR [esi+4968]
  0013e	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  00143	8d 8e 98 13 00
	00		 lea	 ecx, DWORD PTR [esi+5016]
  00149	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  0014d	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  00152	8d 87 c8 13 00
	00		 lea	 eax, DWORD PTR [edi+5064]
  00158	50		 push	 eax
  00159	8d 8e c8 13 00
	00		 lea	 ecx, DWORD PTR [esi+5064]
  0015f	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00163	ff d3		 call	 ebx
  00165	81 c7 ec 13 00
	00		 add	 edi, 5100		; 000013ecH
  0016b	57		 push	 edi
  0016c	8d 8e ec 13 00
	00		 lea	 ecx, DWORD PTR [esi+5100]
  00172	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00176	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>

; 31   : 	ClearData();

  0017b	8b ce		 mov	 ecx, esi
  0017d	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00181	e8 00 00 00 00	 call	 ?ClearData@ioAngleFire3Skill@@IAEXXZ ; ioAngleFire3Skill::ClearData

; 32   : }

  00186	8b c6		 mov	 eax, esi
  00188	e8 00 00 00 00	 call	 __EH_epilog3
  0018d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 f8 10 00
	00		 add	 ecx, 4344		; 000010f8H
  00020	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 28 11 00
	00		 add	 ecx, 4392		; 00001128H
  0002e	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$4:
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 58 11 00
	00		 add	 ecx, 4440		; 00001158H
  0003c	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$5:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	81 c1 88 11 00
	00		 add	 ecx, 4488		; 00001188H
  0004a	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$6:
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	81 c1 b8 11 00
	00		 add	 ecx, 4536		; 000011b8H
  00058	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$7:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 e8 11 00
	00		 add	 ecx, 4584		; 000011e8H
  00066	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$8:
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	81 c1 18 12 00
	00		 add	 ecx, 4632		; 00001218H
  00074	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$9:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	81 c1 48 12 00
	00		 add	 ecx, 4680		; 00001248H
  00082	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$10:
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	81 c1 78 12 00
	00		 add	 ecx, 4728		; 00001278H
  00090	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$11:
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 a8 12 00
	00		 add	 ecx, 4776		; 000012a8H
  0009e	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$12:
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	81 c1 d8 12 00
	00		 add	 ecx, 4824		; 000012d8H
  000ac	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$13:
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	81 c1 08 13 00
	00		 add	 ecx, 4872		; 00001308H
  000ba	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$14:
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	81 c1 38 13 00
	00		 add	 ecx, 4920		; 00001338H
  000c8	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$15:
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	81 c1 68 13 00
	00		 add	 ecx, 4968		; 00001368H
  000d6	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$16:
  000db	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	81 c1 98 13 00
	00		 add	 ecx, 5016		; 00001398H
  000e4	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$17:
  000e9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	81 c1 c8 13 00
	00		 add	 ecx, 5064		; 000013c8H
  000f2	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioAngleFire3Skill@@QAE@ABV0@@Z$18:
  000f8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	81 c1 ec 13 00
	00		 add	 ecx, 5100		; 000013ecH
  00101	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__ehhandler$??0ioAngleFire3Skill@@QAE@ABV0@@Z:
  00106	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0010a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0010d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00110	33 c8		 xor	 ecx, eax
  00112	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00117	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAngleFire3Skill@@QAE@ABV0@@Z
  0011c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAngleFire3Skill@@QAE@ABV0@@Z ENDP			; ioAngleFire3Skill::ioAngleFire3Skill
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ$0
__ehfuncinfo$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ
_TEXT	SEGMENT
$T553044 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ PROC	; ioAngleFire3Skill::Clone, COMDAT
; _this$ = ecx

; 87   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 88   : 	return new ioAngleFire3Skill( *this );

  0000e	68 20 14 00 00	 push	 5152			; 00001420H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T553044[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioAngleFire3Skill@@QAE@ABV0@@Z ; ioAngleFire3Skill::ioAngleFire3Skill
$LN3@Clone:

; 89   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T553044[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioAngleFire3Skill@@UAEPAVioSkill@@XZ ENDP	; ioAngleFire3Skill::Clone
PUBLIC	__real@3f800000
PUBLIC	_pStage$GSCopy$
PUBLIC	_pChar$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetLoopState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::SetLoopState
EXTRN	?GetUniqueID@ioMapEffect@@QBEKXZ:PROC		; ioMapEffect::GetUniqueID
EXTRN	?CreateMapEffectBySkill@ioBaseChar@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@AAU4@@Z:PROC ; ioBaseChar::CreateMapEffectBySkill
EXTRN	?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z:PROC ; ioPlayStage::GetMapHeight
EXTRN	__imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
;	COMDAT __real@3f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioanglefire3skill.cpp
CONST	ENDS
;	COMDAT ?SetLoopState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_fAniRate$ = -52					; size = 4
_pStage$GSCopy$ = -48					; size = 4
_pChar$GSCopy$ = -44					; size = 4
_pGrp$ = -40						; size = 4
tv423 = -36						; size = 4
tv415 = -36						; size = 4
tv410 = -36						; size = 4
tv403 = -36						; size = 4
tv400 = -36						; size = 4
tv398 = -36						; size = 4
tv395 = -36						; size = 4
_value$553075 = -36					; size = 4
_value$553079 = -36					; size = 4
tv357 = -32						; size = 4
tv353 = -32						; size = 4
_value$553115 = -32					; size = 4
tv268 = -32						; size = 4
_value$553107 = -32					; size = 4
_value$553103 = -32					; size = 4
_value$553111 = -32					; size = 4
_value$553119 = -32					; size = 4
$T553059 = -32						; size = 4
$T553058 = -32						; size = 4
_iAniID$ = -32						; size = 4
$T553060 = -28						; size = 12
$T548224 = -28						; size = 12
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?SetLoopState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioAngleFire3Skill::SetLoopState, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  00018	8b d9		 mov	 ebx, ecx

; 217  : 	{
; 218  : 		m_dwAngleGuidEffect = pMapEffect->GetUniqueID();

  0001a	89 7d d4	 mov	 DWORD PTR _pChar$GSCopy$[ebp], edi
  0001d	89 45 d0	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00020	85 ff		 test	 edi, edi
  00022	0f 84 e6 02 00
	00		 je	 $LN1@SetLoopSta

; 170  : 	if( !pChar )
; 171  : 		return;
; 172  : 
; 173  : 	if( !pStage )

  00028	85 c0		 test	 eax, eax
  0002a	0f 84 de 02 00
	00		 je	 $LN1@SetLoopSta

; 174  : 		return;
; 175  : 
; 176  : 	DWORD dwCurTime = FRAMEGETTIME();

  00030	56		 push	 esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 177  : 	m_State = SS_LOOP;

  0003f	c7 83 e4 10 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4324], 1

; 178  : 
; 179  : 	ioEntityGroup *pGrp = pChar->GetGroup();

  00049	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0004c	8b f0		 mov	 esi, eax
  0004e	89 4d d8	 mov	 DWORD PTR _pGrp$[ebp], ecx

; 180  : 	if( !pGrp ) return;

  00051	85 c9		 test	 ecx, ecx
  00053	0f 84 b4 02 00
	00		 je	 $LN49@SetLoopSta

; 181  : 
; 182  : 	int iAniID = pGrp->GetAnimationIdx( m_SkillLoopMotion );

  00059	8d 83 e8 10 00
	00		 lea	 eax, DWORD PTR [ebx+4328]
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00066	89 45 e0	 mov	 DWORD PTR _iAniID$[ebp], eax

; 183  : 	float fAniRate = FLOAT1;

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	89 45 dc	 mov	 DWORD PTR tv423[ebp], eax
  00071	db 45 dc	 fild	 DWORD PTR tv423[ebp]
  00074	85 c0		 test	 eax, eax
  00076	79 06		 jns	 SHORT $LN50@SetLoopSta
  00078	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN50@SetLoopSta:

; 184  : 	if( m_fSkillLoopMotionRate > 0.0f )

  0007e	8d 45 dc	 lea	 eax, DWORD PTR _value$553075[ebp]
  00081	d9 5d cc	 fstp	 DWORD PTR _fAniRate$[ebp]
  00084	8d 8b f8 10 00
	00		 lea	 ecx, DWORD PTR [ebx+4344]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00090	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _value$553075[ebp]
  00095	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0009c	76 19		 jbe	 SHORT $LN4@SetLoopSta

; 185  : 		fAniRate = m_fSkillLoopMotionRate;

  0009e	8d 45 dc	 lea	 eax, DWORD PTR _value$553079[ebp]
  000a1	50		 push	 eax
  000a2	8d 8b f8 10 00
	00		 lea	 ecx, DWORD PTR [ebx+4344]
  000a8	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _value$553079[ebp]
  000b2	f3 0f 11 45 cc	 movss	 DWORD PTR _fAniRate$[ebp], xmm0
$LN4@SetLoopSta:

; 186  : 
; 187  : 	pGrp->ClearAllLoopAni( FLOAT100, true );

  000b7	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000bc	89 45 dc	 mov	 DWORD PTR tv415[ebp], eax
  000bf	db 45 dc	 fild	 DWORD PTR tv415[ebp]
  000c2	6a 01		 push	 1
  000c4	85 c0		 test	 eax, eax
  000c6	79 06		 jns	 SHORT $LN51@SetLoopSta
  000c8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN51@SetLoopSta:
  000ce	51		 push	 ecx
  000cf	8b 4d d8	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000d2	d9 1c 24	 fstp	 DWORD PTR [esp]
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 188  : 	pGrp->ClearAllActionAni( FLOAT100, true );

  000db	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000e0	89 45 dc	 mov	 DWORD PTR tv410[ebp], eax
  000e3	db 45 dc	 fild	 DWORD PTR tv410[ebp]
  000e6	6a 01		 push	 1
  000e8	85 c0		 test	 eax, eax
  000ea	79 06		 jns	 SHORT $LN52@SetLoopSta
  000ec	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN52@SetLoopSta:
  000f2	51		 push	 ecx
  000f3	8b 4d d8	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000f6	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 189  : 	pGrp->SetLoopAni( iAniID, FLOAT100, FLOAT1, FLOAT1/fAniRate );

  000ff	b8 01 00 00 00	 mov	 eax, 1
  00104	8b c8		 mov	 ecx, eax
  00106	b8 01 00 00 00	 mov	 eax, 1
  0010b	8b d0		 mov	 edx, eax
  0010d	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00112	0f 57 c0	 xorps	 xmm0, xmm0
  00115	83 ec 10	 sub	 esp, 16			; 00000010H
  00118	89 4d dc	 mov	 DWORD PTR tv403[ebp], ecx
  0011b	db 45 dc	 fild	 DWORD PTR tv403[ebp]
  0011e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00124	85 c9		 test	 ecx, ecx
  00126	79 06		 jns	 SHORT $LN53@SetLoopSta
  00128	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN53@SetLoopSta:
  0012e	d8 75 cc	 fdiv	 DWORD PTR _fAniRate$[ebp]
  00131	d9 5d dc	 fstp	 DWORD PTR tv400[ebp]
  00134	d9 45 dc	 fld	 DWORD PTR tv400[ebp]
  00137	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  0013b	89 55 dc	 mov	 DWORD PTR tv398[ebp], edx
  0013e	db 45 dc	 fild	 DWORD PTR tv398[ebp]
  00141	85 d2		 test	 edx, edx
  00143	79 06		 jns	 SHORT $LN54@SetLoopSta
  00145	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN54@SetLoopSta:
  0014b	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0014f	89 45 dc	 mov	 DWORD PTR tv395[ebp], eax
  00152	db 45 dc	 fild	 DWORD PTR tv395[ebp]
  00155	85 c0		 test	 eax, eax
  00157	79 06		 jns	 SHORT $LN55@SetLoopSta
  00159	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN55@SetLoopSta:
  0015f	8b 4d d8	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00162	d9 1c 24	 fstp	 DWORD PTR [esp]
  00165	ff 75 e0	 push	 DWORD PTR _iAniID$[ebp]
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z

; 190  : 
; 191  : 	m_dwLoopStartTime = dwCurTime;

  0016e	8d 45 e0	 lea	 eax, DWORD PTR _value$553103[ebp]
  00171	50		 push	 eax
  00172	8d 8b b8 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4536]
  00178	89 75 e0	 mov	 DWORD PTR _value$553103[ebp], esi
  0017b	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 192  : 	m_dwLoopEndTime = dwCurTime;

  00180	8d 45 e0	 lea	 eax, DWORD PTR _value$553107[ebp]
  00183	8d 8b e8 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4584]
  00189	50		 push	 eax
  0018a	89 75 e0	 mov	 DWORD PTR _value$553107[ebp], esi
  0018d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 193  : 	m_dwLoopEndTime += m_dwSkillLoopDuration;

  00192	8d 45 e0	 lea	 eax, DWORD PTR _value$553111[ebp]
  00195	50		 push	 eax
  00196	8d 8b 28 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4392]
  0019c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  001a1	8b 45 e0	 mov	 eax, DWORD PTR _value$553111[ebp]
  001a4	89 45 e0	 mov	 DWORD PTR $T553058[ebp], eax
  001a7	8d 45 e0	 lea	 eax, DWORD PTR $T553058[ebp]
  001aa	50		 push	 eax
  001ab	8d 8b e8 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4584]
  001b1	e8 00 00 00 00	 call	 ??Y?$CEncrypt@K@@QAEAAKABK@Z ; CEncrypt<unsigned long>::operator+=

; 194  : 
; 195  : 	m_dwSkillLoopProtectEndTime = dwCurTime;

  001b6	8d 45 e0	 lea	 eax, DWORD PTR _value$553115[ebp]
  001b9	50		 push	 eax
  001ba	8d 8b 88 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4488]
  001c0	89 75 e0	 mov	 DWORD PTR _value$553115[ebp], esi
  001c3	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 196  : 	m_dwSkillLoopProtectEndTime += m_dwSkillLoopProtectTime;

  001c8	8d 45 e0	 lea	 eax, DWORD PTR _value$553119[ebp]
  001cb	50		 push	 eax
  001cc	8d 8b 58 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4440]
  001d2	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  001d7	8b 45 e0	 mov	 eax, DWORD PTR _value$553119[ebp]
  001da	89 45 e0	 mov	 DWORD PTR $T553059[ebp], eax
  001dd	8d 45 e0	 lea	 eax, DWORD PTR $T553059[ebp]
  001e0	50		 push	 eax
  001e1	8d 8b 88 11 00
	00		 lea	 ecx, DWORD PTR [ebx+4488]
  001e7	e8 00 00 00 00	 call	 ??Y?$CEncrypt@K@@QAEAAKABK@Z ; CEncrypt<unsigned long>::operator+=

; 197  : 
; 198  : 	D3DXVECTOR3 vPos = pChar->GetWorldPosition();

  001ec	8b 07		 mov	 eax, DWORD PTR [edi]
  001ee	8b cf		 mov	 ecx, edi
  001f0	ff 50 70	 call	 DWORD PTR [eax+112]

; 199  : 	float fHieght = pStage->GetMapHeight( vPos.x, vPos.z );

  001f3	0f 57 c0	 xorps	 xmm0, xmm0
  001f6	6a 00		 push	 0
  001f8	51		 push	 ecx
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	8b f0		 mov	 esi, eax
  00200	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00203	a5		 movsd
  00204	6a 01		 push	 1
  00206	a5		 movsd
  00207	6a 00		 push	 0
  00209	51		 push	 ecx
  0020a	51		 push	 ecx
  0020b	8b 4d d0	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  0020e	a5		 movsd
  0020f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  00214	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0021a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  0021f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00224	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight
  00229	dd d8		 fstp	 ST(0)

; 200  : 
; 201  : 	if( GetSkillUseType() == SUT_JUMP )

  0022b	83 7b 74 01	 cmp	 DWORD PTR [ebx+116], 1

; 202  : 	{
; 203  : 		m_fCurAngle = m_fJumpMinAngle;

  0022f	8d 8b 38 13 00
	00		 lea	 ecx, DWORD PTR [ebx+4920]
  00235	75 14		 jne	 SHORT $LN3@SetLoopSta
  00237	8d b3 d8 12 00
	00		 lea	 esi, DWORD PTR [ebx+4824]
  0023d	56		 push	 esi
  0023e	e8 00 00 00 00	 call	 ??4?$CEncrypt@M@@QAE_NAAV0@@Z ; CEncrypt<float>::operator=

; 204  : 		m_fCurMaxAngle = m_fJumpMaxAngle;

  00243	8d 83 a8 12 00
	00		 lea	 eax, DWORD PTR [ebx+4776]

; 205  : 		m_fCurMinAngle = m_fJumpMinAngle;
; 206  : 	}
; 207  : 	else

  00249	eb 12		 jmp	 SHORT $LN58@SetLoopSta
$LN3@SetLoopSta:

; 208  : 	{
; 209  : 		m_fCurAngle = m_fNormalMinAngle;

  0024b	8d b3 78 12 00
	00		 lea	 esi, DWORD PTR [ebx+4728]
  00251	56		 push	 esi
  00252	e8 00 00 00 00	 call	 ??4?$CEncrypt@M@@QAE_NAAV0@@Z ; CEncrypt<float>::operator=

; 210  : 		m_fCurMaxAngle = m_fNormalMaxAngle;

  00257	8d 83 48 12 00
	00		 lea	 eax, DWORD PTR [ebx+4680]
$LN58@SetLoopSta:
  0025d	50		 push	 eax
  0025e	8d 8b 68 13 00
	00		 lea	 ecx, DWORD PTR [ebx+4968]
  00264	e8 00 00 00 00	 call	 ??4?$CEncrypt@M@@QAE_NAAV0@@Z ; CEncrypt<float>::operator=

; 211  : 		m_fCurMinAngle = m_fNormalMinAngle;

  00269	56		 push	 esi
  0026a	8d 8b 98 13 00
	00		 lea	 ecx, DWORD PTR [ebx+5016]
  00270	e8 00 00 00 00	 call	 ??4?$CEncrypt@M@@QAE_NAAV0@@Z ; CEncrypt<float>::operator=

; 212  : 	}
; 213  : 
; 214  : 	vPos = pChar->GetMidPositionByRate();

  00275	b8 05 00 00 00	 mov	 eax, 5
  0027a	8b c8		 mov	 ecx, eax
  0027c	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00281	89 4d e0	 mov	 DWORD PTR tv357[ebp], ecx
  00284	db 45 e0	 fild	 DWORD PTR tv357[ebp]
  00287	85 c9		 test	 ecx, ecx
  00289	79 06		 jns	 SHORT $LN56@SetLoopSta
  0028b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN56@SetLoopSta:
  00291	89 45 e0	 mov	 DWORD PTR tv353[ebp], eax
  00294	db 45 e0	 fild	 DWORD PTR tv353[ebp]
  00297	85 c0		 test	 eax, eax
  00299	79 06		 jns	 SHORT $LN57@SetLoopSta
  0029b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN57@SetLoopSta:
  002a1	de f9		 fdivp	 ST(1), ST(0)
  002a3	51		 push	 ecx
  002a4	8b 4d d4	 mov	 ecx, DWORD PTR _pChar$GSCopy$[ebp]
  002a7	8d 45 e4	 lea	 eax, DWORD PTR $T548224[ebp]
  002aa	d9 5d e0	 fstp	 DWORD PTR tv268[ebp]
  002ad	d9 45 e0	 fld	 DWORD PTR tv268[ebp]
  002b0	d9 1c 24	 fstp	 DWORD PTR [esp]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 215  : 	ioMapEffect *pMapEffect = pChar->CreateMapEffectBySkill( m_AngleGuidEffect, vPos );

  002b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002c1	8b 4d d4	 mov	 ecx, DWORD PTR _pChar$GSCopy$[ebp]
  002c4	8b f0		 mov	 esi, eax
  002c6	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  002c9	a5		 movsd
  002ca	a5		 movsd
  002cb	8d 45 e4	 lea	 eax, DWORD PTR $T553060[ebp]
  002ce	50		 push	 eax
  002cf	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  002d2	50		 push	 eax
  002d3	a5		 movsd
  002d4	8d 83 c8 13 00
	00		 lea	 eax, DWORD PTR [ebx+5064]
  002da	50		 push	 eax
  002db	f3 0f 11 45 e4	 movss	 DWORD PTR $T553060[ebp], xmm0
  002e0	f3 0f 11 45 e8	 movss	 DWORD PTR $T553060[ebp+4], xmm0
  002e5	f3 0f 11 45 ec	 movss	 DWORD PTR $T553060[ebp+8], xmm0
  002ea	e8 00 00 00 00	 call	 ?CreateMapEffectBySkill@ioBaseChar@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@AAU4@@Z ; ioBaseChar::CreateMapEffectBySkill

; 216  : 	if( pMapEffect )

  002ef	85 c0		 test	 eax, eax
  002f1	74 1a		 je	 SHORT $LN49@SetLoopSta

; 217  : 	{
; 218  : 		m_dwAngleGuidEffect = pMapEffect->GetUniqueID();

  002f3	8b c8		 mov	 ecx, eax
  002f5	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID

; 219  : 
; 220  : 		UpdateAngleGuidEffect( pChar, pStage );

  002fa	ff 75 d0	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  002fd	8b cb		 mov	 ecx, ebx
  002ff	ff 75 d4	 push	 DWORD PTR _pChar$GSCopy$[ebp]
  00302	89 83 d8 13 00
	00		 mov	 DWORD PTR [ebx+5080], eax
  00308	e8 00 00 00 00	 call	 ?UpdateAngleGuidEffect@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::UpdateAngleGuidEffect
$LN49@SetLoopSta:
  0030d	5e		 pop	 esi
$LN1@SetLoopSta:

; 221  : 	}
; 222  : }

  0030e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00311	5f		 pop	 edi
  00312	33 cd		 xor	 ecx, ebp
  00314	5b		 pop	 ebx
  00315	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031a	c9		 leave
  0031b	c2 08 00	 ret	 8
?SetLoopState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioAngleFire3Skill::SetLoopState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?OnProcessState@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_value$553161 = -12					; size = 4
_value$553156 = -8					; size = 4
_dwCurTime$ = -4					; size = 4
tv252 = 8						; size = 4
_value$553173 = 8					; size = 4
_value$553169 = 8					; size = 4
_value$553165 = 8					; size = 4
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?OnProcessState@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioAngleFire3Skill::OnProcessState, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 120  : 	DWORD dwCurTime = FRAMEGETTIME();

  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00011	8b c8		 mov	 ecx, eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00019	89 45 fc	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 121  : 
; 122  : 	switch( m_State )

  0001c	8b 86 e4 10 00
	00		 mov	 eax, DWORD PTR [esi+4324]
  00022	83 e8 00	 sub	 eax, 0
  00025	0f 84 11 01 00
	00		 je	 $LN7@OnProcessS
  0002b	48		 dec	 eax
  0002c	74 30		 je	 SHORT $LN5@OnProcessS
  0002e	48		 dec	 eax
  0002f	0f 85 3f 01 00
	00		 jne	 $LN6@OnProcessS

; 157  : 	case SS_ACTION:
; 158  : 		{
; 159  : 			if( 0 < m_dwMotionEndTime && m_dwMotionEndTime < dwCurTime )

  00035	8b 86 d8 02 00
	00		 mov	 eax, DWORD PTR [esi+728]
  0003b	85 c0		 test	 eax, eax
  0003d	0f 84 31 01 00
	00		 je	 $LN6@OnProcessS
  00043	3b 45 fc	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00046	0f 83 28 01 00
	00		 jae	 $LN6@OnProcessS

; 160  : 			{
; 161  : 				SetEndState( pChar, pStage );

  0004c	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  0004f	8b ce		 mov	 ecx, esi
  00051	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00054	e8 00 00 00 00	 call	 ?SetEndState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::SetEndState

; 162  : 			}
; 163  : 		}
; 164  : 		break;

  00059	e9 16 01 00 00	 jmp	 $LN6@OnProcessS
$LN5@OnProcessS:

; 132  : 			}
; 133  : 		}
; 134  : 		break;
; 135  : 	case SS_LOOP:
; 136  : 		{
; 137  : 
; 138  : 			CheckAngle( pChar, m_fCurMinAngle, m_fCurMaxAngle );

  0005e	8d 45 f8	 lea	 eax, DWORD PTR _value$553156[ebp]
  00061	50		 push	 eax
  00062	8d 8e 68 13 00
	00		 lea	 ecx, DWORD PTR [esi+4968]
  00068	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0006d	8d 45 f4	 lea	 eax, DWORD PTR _value$553161[ebp]
  00070	50		 push	 eax
  00071	8d 8e 98 13 00
	00		 lea	 ecx, DWORD PTR [esi+5016]
  00077	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0007c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _value$553156[ebp]
  00081	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  00084	51		 push	 ecx
  00085	51		 push	 ecx
  00086	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _value$553161[ebp]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	57		 push	 edi
  00097	8b ce		 mov	 ecx, esi
  00099	e8 00 00 00 00	 call	 ?CheckAngle@ioAngleFire3Skill@@IAEXPAVioBaseChar@@MM@Z ; ioAngleFire3Skill::CheckAngle

; 139  : 			CheckKeyInput( pChar );

  0009e	57		 push	 edi
  0009f	8b ce		 mov	 ecx, esi
  000a1	e8 00 00 00 00	 call	 ?CheckKeyInput@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z ; ioAngleFire3Skill::CheckKeyInput

; 140  : 			ProcessRotate( pChar, m_dwSkillLoopRotateSpeed );

  000a6	8d 45 08	 lea	 eax, DWORD PTR _value$553165[ebp]
  000a9	50		 push	 eax
  000aa	8d 8e ec 13 00
	00		 lea	 ecx, DWORD PTR [esi+5100]
  000b0	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000b5	db 45 08	 fild	 DWORD PTR _value$553165[ebp]
  000b8	8b 45 08	 mov	 eax, DWORD PTR _value$553165[ebp]
  000bb	85 c0		 test	 eax, eax
  000bd	79 06		 jns	 SHORT $LN22@OnProcessS
  000bf	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN22@OnProcessS:
  000c5	51		 push	 ecx
  000c6	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c9	57		 push	 edi
  000ca	8b ce		 mov	 ecx, esi
  000cc	e8 00 00 00 00	 call	 ?ProcessRotate@ioAngleFire3Skill@@IAEXPAVioBaseChar@@M@Z ; ioAngleFire3Skill::ProcessRotate

; 141  : 
; 142  : 			CheckDir( pChar );

  000d1	57		 push	 edi
  000d2	8b ce		 mov	 ecx, esi
  000d4	e8 00 00 00 00	 call	 ?CheckDir@ioAngleFire3Skill@@IAEXPAVioBaseChar@@@Z ; ioAngleFire3Skill::CheckDir

; 143  : 			UpdateAngleGuidEffect( pChar, pStage );

  000d9	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  000dc	8b ce		 mov	 ecx, esi
  000de	57		 push	 edi
  000df	e8 00 00 00 00	 call	 ?UpdateAngleGuidEffect@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::UpdateAngleGuidEffect

; 144  : 
; 145  : 			if( CheckLoopState( pChar, pStage ) )

  000e4	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  000e7	8b ce		 mov	 ecx, esi
  000e9	57		 push	 edi
  000ea	e8 00 00 00 00	 call	 ?CheckLoopState@ioAngleFire3Skill@@IAE_NPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::CheckLoopState
  000ef	84 c0		 test	 al, al

; 146  : 			{
; 147  : 				SetActionState( pChar, pStage );
; 148  : 				return;

  000f1	75 3a		 jne	 SHORT $LN23@OnProcessS

; 149  : 			}
; 150  : 
; 151  : 			if( 0 < m_dwLoopEndTime && m_dwLoopEndTime < dwCurTime && pChar->IsNeedProcess() )

  000f3	8d 45 08	 lea	 eax, DWORD PTR _value$553169[ebp]
  000f6	50		 push	 eax
  000f7	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  000fd	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00102	83 7d 08 00	 cmp	 DWORD PTR _value$553169[ebp], 0
  00106	76 6c		 jbe	 SHORT $LN6@OnProcessS
  00108	8d 45 08	 lea	 eax, DWORD PTR _value$553173[ebp]
  0010b	50		 push	 eax
  0010c	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  00112	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00117	8b 45 fc	 mov	 eax, DWORD PTR _dwCurTime$[ebp]
  0011a	39 45 08	 cmp	 DWORD PTR _value$553173[ebp], eax
  0011d	73 55		 jae	 SHORT $LN6@OnProcessS
  0011f	8b 07		 mov	 eax, DWORD PTR [edi]
  00121	8b cf		 mov	 ecx, edi
  00123	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00129	84 c0		 test	 al, al
  0012b	74 47		 je	 SHORT $LN6@OnProcessS
$LN23@OnProcessS:

; 152  : 			{
; 153  : 				SetActionState( pChar, pStage );

  0012d	6a 01		 push	 1
  0012f	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  00132	8b ce		 mov	 ecx, esi
  00134	57		 push	 edi
  00135	e8 00 00 00 00	 call	 ?SetActionState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@_N@Z ; ioAngleFire3Skill::SetActionState

; 154  : 			}
; 155  : 		}
; 156  : 		break;

  0013a	eb 38		 jmp	 SHORT $LN6@OnProcessS
$LN7@OnProcessS:

; 123  : 	{
; 124  : 	case SS_PRE:
; 125  : 		{
; 126  : 			DWORD dwPreDelay = GetPreDelayTime();

  0013c	8b 06		 mov	 eax, DWORD PTR [esi]
  0013e	8b ce		 mov	 ecx, esi
  00140	ff 90 34 01 00
	00		 call	 DWORD PTR [eax+308]

; 127  : 			if( m_dwPreDelayStartTime + dwPreDelay < dwCurTime )

  00146	8b 96 20 02 00
	00		 mov	 edx, DWORD PTR [esi+544]
  0014c	03 d0		 add	 edx, eax
  0014e	3b 55 fc	 cmp	 edx, DWORD PTR _dwCurTime$[ebp]
  00151	73 21		 jae	 SHORT $LN6@OnProcessS

; 128  : 			{
; 129  : 				m_dwPreDelayStartTime = 0;
; 130  : 				EndPreDelayEffect( pChar );

  00153	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00156	8b 06		 mov	 eax, DWORD PTR [esi]
  00158	83 a6 20 02 00
	00 00		 and	 DWORD PTR [esi+544], 0
  0015f	8b ce		 mov	 ecx, esi
  00161	ff 90 dc 00 00
	00		 call	 DWORD PTR [eax+220]

; 131  : 				SetLoopState( pChar, pStage );

  00167	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  0016a	8b ce		 mov	 ecx, esi
  0016c	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  0016f	e8 00 00 00 00	 call	 ?SetLoopState@ioAngleFire3Skill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioAngleFire3Skill::SetLoopState
$LN6@OnProcessS:
  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx

; 165  : 	}
; 166  : }

  00177	c9		 leave
  00178	c2 08 00	 ret	 8
?OnProcessState@ioAngleFire3Skill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioAngleFire3Skill::OnProcessState
_TEXT	ENDS
END
