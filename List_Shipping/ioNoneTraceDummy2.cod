; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioNoneTraceDummy2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	_fabsf
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogsp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsqrt
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?fabs@@YAMM@Z					; fabs
; Function compile flags: /Ogsp
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 518  :         {return (fabsf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv131[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv131[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R0?AVioZoneEffectWeapon@@@8			; ioZoneEffectWeapon `RTTI Type Descriptor'
PUBLIC	?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
EXTRN	___RTDynamicCast:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVioWeapon@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iozoneeffectweapon.h
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioZoneEffectWeapon@@@8
_DATA	SEGMENT
??_R0?AVioZoneEffectWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioZoneEffectWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioZoneEffectWeapon@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z PROC ; ToZoneEffectWeapon, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 218  : 	if( !pWeapon || pWeapon->GetType() != ioWeapon::WT_ZONE_EFFECT )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 28		 je	 SHORT $LN1@ToZoneEffe
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 90 10 01 00
	00		 call	 DWORD PTR [eax+272]
  00015	83 f8 08	 cmp	 eax, 8
  00018	75 19		 jne	 SHORT $LN1@ToZoneEffe

; 220  : 
; 221  : 	return dynamic_cast< ioZoneEffectWeapon* >( pWeapon );

  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioZoneEffectWeapon@@@8
  00021	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeapon@@@8
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 02		 jmp	 SHORT $LN3@ToZoneEffe
$LN1@ToZoneEffe:

; 219  : 		return NULL;

  00033	33 c0		 xor	 eax, eax
$LN3@ToZoneEffe:
  00035	5e		 pop	 esi

; 222  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ENDP ; ToZoneEffectWeapon
_TEXT	ENDS
PUBLIC	??_R0?AVioFloatThrowWeapon@@@8			; ioFloatThrowWeapon `RTTI Type Descriptor'
PUBLIC	?ToFloatThrowWeapon@@YAPAVioFloatThrowWeapon@@PAVioWeapon@@@Z ; ToFloatThrowWeapon
;	COMDAT ??_R0?AVioFloatThrowWeapon@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofloatthrowweapon.h
_DATA	SEGMENT
??_R0?AVioFloatThrowWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioFloatThrowWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioFloatThrowWeapon@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToFloatThrowWeapon@@YAPAVioFloatThrowWeapon@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ToFloatThrowWeapon@@YAPAVioFloatThrowWeapon@@PAVioWeapon@@@Z PROC ; ToFloatThrowWeapon, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 86   : 	if( !pWeapon || pWeapon->GetType() != ioWeapon::WT_FLOAT_THROW )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 28		 je	 SHORT $LN1@ToFloatThr
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 90 10 01 00
	00		 call	 DWORD PTR [eax+272]
  00015	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00018	75 19		 jne	 SHORT $LN1@ToFloatThr

; 88   : 
; 89   : 	return dynamic_cast< ioFloatThrowWeapon* >( pWeapon );

  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioFloatThrowWeapon@@@8
  00021	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeapon@@@8
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 02		 jmp	 SHORT $LN3@ToFloatThr
$LN1@ToFloatThr:

; 87   : 		return NULL;

  00033	33 c0		 xor	 eax, eax
$LN3@ToFloatThr:
  00035	5e		 pop	 esi

; 90   : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?ToFloatThrowWeapon@@YAPAVioFloatThrowWeapon@@PAVioWeapon@@@Z ENDP ; ToFloatThrowWeapon
_TEXT	ENDS
PUBLIC	??_7ioNoneTraceDummy2@@6BioWorldEventReceiver@@@ ; ioNoneTraceDummy2::`vftable'
PUBLIC	??_7ioNoneTraceDummy2@@6BioPlayEntity@@@	; ioNoneTraceDummy2::`vftable'
PUBLIC	??1ioNoneTraceDummy2@@UAE@XZ			; ioNoneTraceDummy2::~ioNoneTraceDummy2
PUBLIC	??_R4ioNoneTraceDummy2@@6BioPlayEntity@@@	; ioNoneTraceDummy2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioNoneTraceDummy2@@@8			; ioNoneTraceDummy2 `RTTI Type Descriptor'
PUBLIC	??_R3ioNoneTraceDummy2@@8			; ioNoneTraceDummy2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioNoneTraceDummy2@@8			; ioNoneTraceDummy2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioNoneTraceDummy2@@8		; ioNoneTraceDummy2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioDummyChar@@8			; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioDummyChar@@@8				; ioDummyChar `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyChar@@8				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyChar@@8				; ioDummyChar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	??_R1BMI@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
PUBLIC	??_R0?AVioWorldEventReceiver@@@8		; ioWorldEventReceiver `RTTI Type Descriptor'
PUBLIC	??_R3ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?LoadProperty@ioNoneTraceDummy2@@UAEXAAVioINILoader@@@Z ; ioNoneTraceDummy2::LoadProperty
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
PUBLIC	?ProcessState@ioNoneTraceDummy2@@MAEXMK@Z	; ioNoneTraceDummy2::ProcessState
PUBLIC	?ProcessDelayState@ioNoneTraceDummy2@@MAEXM@Z	; ioNoneTraceDummy2::ProcessDelayState
PUBLIC	?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z	; ioNoneTraceDummy2::ProcessAttackState
PUBLIC	?SetAttackState@ioNoneTraceDummy2@@UAEXXZ	; ioNoneTraceDummy2::SetAttackState
PUBLIC	?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ	; ioDummyChar::IsDummyCharMidSync
PUBLIC	?SetAttackState@ioNoneTraceDummy2@@UAEXH@Z	; ioNoneTraceDummy2::SetAttackState
PUBLIC	??_R4ioNoneTraceDummy2@@6BioWorldEventReceiver@@@ ; ioNoneTraceDummy2::`RTTI Complete Object Locator'
PUBLIC	??_EioNoneTraceDummy2@@WBMI@AEPAXI@Z		; [thunk]:ioNoneTraceDummy2::`vector deleting destructor'
EXTRN	??1ioDummyChar@@UAE@XZ:PROC			; ioDummyChar::~ioDummyChar
EXTRN	?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z:PROC ; ioDummyChar::AddEntityEvent
EXTRN	??_EioNoneTraceDummy2@@UAEPAXI@Z:PROC		; ioNoneTraceDummy2::`vector deleting destructor'
EXTRN	?Update@ioDummyChar@@UAEXMKK@Z:PROC		; ioDummyChar::Update
EXTRN	?UpdateAfter@ioDummyChar@@UAEXM@Z:PROC		; ioDummyChar::UpdateAfter
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ:PROC ; ioDummyChar::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountAvailable
EXTRN	?IsMountingAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountingAvailable
EXTRN	?IsNowMountEnable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?UpdateBottomHeight@ioDummyChar@@MBEXXZ:PROC	; ioDummyChar::UpdateBottomHeight
EXTRN	?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ:PROC ; ioDummyChar::NeedUpdateBottomHeight
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::Translate
EXTRN	?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByConveyer
EXTRN	?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z:PROC ; ioDummyChar::ApplyWeapon
EXTRN	?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z:PROC ; ioDummyChar::IsCollisionAvailableWeapon
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z:PROC ; ioDummyChar::IsEntityCollisionSkipState
EXTRN	?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z:PROC ; ioDummyChar::IsCharCollisionSkipState
EXTRN	?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z:PROC ; ioPlayEntity::IsWoundedCollision
EXTRN	?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioDummyChar::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ:PROC ; ioDummyChar::GetSubType
EXTRN	?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ:PROC ; ioDummyChar::GetArmorType
EXTRN	?DontMoveEntityLevel@ioDummyChar@@UBEHXZ:PROC	; ioDummyChar::DontMoveEntityLevel
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioDummyChar::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::UpdateGauge
EXTRN	?RenderGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
EXTRN	?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z:PROC ; ioDummyChar::InitDummyCharInfo
EXTRN	?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioDummyChar::TestMapCollision
EXTRN	?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z:PROC ; ioDummyChar::CheckEntityCollision
EXTRN	?GetDummyGrassType@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetDummyGrassType
EXTRN	?IsActivateWeapon@ioDummyChar@@UAE_NXZ:PROC	; ioDummyChar::IsActivateWeapon
EXTRN	?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z:PROC ; ioDummyChar::IsDummyVsDummyCollisionSkipState
EXTRN	?ProcessPos@ioDummyChar@@MAEXM@Z:PROC		; ioDummyChar::ProcessPos
EXTRN	?ProcessMoveState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessMoveState
EXTRN	?ProcessDashState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDashState
EXTRN	?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharSync
EXTRN	?SetDelayState@ioDummyChar@@UAEX_N@Z:PROC	; ioDummyChar::SetDelayState
EXTRN	?SetMoveState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetMoveState
EXTRN	?SetDieState@ioDummyChar@@UAEX_N0@Z:PROC	; ioDummyChar::SetDieState
EXTRN	?SetDashState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetDashState
EXTRN	?DropZoneCheck@ioDummyChar@@MAEXXZ:PROC		; ioDummyChar::DropZoneCheck
EXTRN	?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::SendAttackInfoToSkill
EXTRN	?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z:PROC ; ioDummyChar::CheckCollisionWeapon
EXTRN	?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateMountEntity
EXTRN	?ClearMountEntity@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::ClearMountEntity
EXTRN	?UpdateMountedEntityList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedEntityList
EXTRN	?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedWeaponList
EXTRN	?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z:PROC ; ioDummyChar::SetWorldPositionMountEntity
EXTRN	?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::DummyDieClearMountEntity
EXTRN	?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::FillDummyCharMidSync
EXTRN	?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharMidSync
EXTRN	?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillMaxActiveCnt
EXTRN	?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillCurActiveCnt
EXTRN	?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::OnTelepotation
EXTRN	?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z:PROC ; ioDummyChar::OnFireZoneDamage
EXTRN	?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::OnPoisonZoneDamage
;	COMDAT ??_R4ioNoneTraceDummy2@@6BioWorldEventReceiver@@@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iononetracedummy2.cpp
rdata$r	SEGMENT
??_R4ioNoneTraceDummy2@@6BioWorldEventReceiver@@@ DD 00H ; ioNoneTraceDummy2::`RTTI Complete Object Locator'
	DD	01c8H
	DD	00H
	DD	FLAT:??_R0?AVioNoneTraceDummy2@@@8
	DD	FLAT:??_R3ioNoneTraceDummy2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R2ioWorldEventReceiver@@8 DD FLAT:??_R1A@?0A@EA@ioWorldEventReceiver@@8 ; ioWorldEventReceiver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R3ioWorldEventReceiver@@8 DD 00H			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWorldEventReceiver@@@8
_DATA	SEGMENT
??_R0?AVioWorldEventReceiver@@@8 DD FLAT:??_7type_info@@6B@ ; ioWorldEventReceiver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWorldEventReceiver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1BMI@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
	DD	00H
	DD	01c8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEntityEvent@@8
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyChar@@8
rdata$r	SEGMENT
??_R2ioDummyChar@@8 DD FLAT:??_R1A@?0A@EA@ioDummyChar@@8 ; ioDummyChar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyChar@@8
rdata$r	SEGMENT
??_R3ioDummyChar@@8 DD 00H				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyChar@@@8
_DATA	SEGMENT
??_R0?AVioDummyChar@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyChar@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyChar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyChar@@8 DD FLAT:??_R0?AVioDummyChar@@@8 ; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioNoneTraceDummy2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioNoneTraceDummy2@@8 DD FLAT:??_R0?AVioNoneTraceDummy2@@@8 ; ioNoneTraceDummy2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioNoneTraceDummy2@@8
rdata$r	ENDS
;	COMDAT ??_R2ioNoneTraceDummy2@@8
rdata$r	SEGMENT
??_R2ioNoneTraceDummy2@@8 DD FLAT:??_R1A@?0A@EA@ioNoneTraceDummy2@@8 ; ioNoneTraceDummy2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioDummyChar@@8
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioNoneTraceDummy2@@8
rdata$r	SEGMENT
??_R3ioNoneTraceDummy2@@8 DD 00H			; ioNoneTraceDummy2::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ioNoneTraceDummy2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioNoneTraceDummy2@@@8
_DATA	SEGMENT
??_R0?AVioNoneTraceDummy2@@@8 DD FLAT:??_7type_info@@6B@ ; ioNoneTraceDummy2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNoneTraceDummy2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioNoneTraceDummy2@@6BioPlayEntity@@@
rdata$r	SEGMENT
??_R4ioNoneTraceDummy2@@6BioPlayEntity@@@ DD 00H	; ioNoneTraceDummy2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioNoneTraceDummy2@@@8
	DD	FLAT:??_R3ioNoneTraceDummy2@@8
rdata$r	ENDS
;	COMDAT ??_7ioNoneTraceDummy2@@6BioWorldEventReceiver@@@
CONST	SEGMENT
??_7ioNoneTraceDummy2@@6BioWorldEventReceiver@@@ DD FLAT:??_R4ioNoneTraceDummy2@@6BioWorldEventReceiver@@@ ; ioNoneTraceDummy2::`vftable'
	DD	FLAT:?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z
	DD	FLAT:?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ
	DD	FLAT:??_EioNoneTraceDummy2@@WBMI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ioNoneTraceDummy2@@6BioPlayEntity@@@
CONST	SEGMENT
??_7ioNoneTraceDummy2@@6BioPlayEntity@@@ DD FLAT:??_R4ioNoneTraceDummy2@@6BioPlayEntity@@@ ; ioNoneTraceDummy2::`vftable'
	DD	FLAT:?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioNoneTraceDummy2@@UAEPAXI@Z
	DD	FLAT:?Update@ioDummyChar@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioDummyChar@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioDummyChar@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioDummyChar@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioNoneTraceDummy2@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?RenderGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
	DD	FLAT:?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z
	DD	FLAT:?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?GetDummyGrassType@ioDummyChar@@UAEHXZ
	DD	FLAT:?IsActivateWeapon@ioDummyChar@@UAE_NXZ
	DD	FLAT:?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z
	DD	FLAT:?ProcessState@ioNoneTraceDummy2@@MAEXMK@Z
	DD	FLAT:?ProcessPos@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDelayState@ioNoneTraceDummy2@@MAEXM@Z
	DD	FLAT:?ProcessMoveState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDashState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z
	DD	FLAT:?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDelayState@ioDummyChar@@UAEX_N@Z
	DD	FLAT:?SetMoveState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetDieState@ioDummyChar@@UAEX_N0@Z
	DD	FLAT:?SetDashState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetAttackState@ioNoneTraceDummy2@@UAEXXZ
	DD	FLAT:?DropZoneCheck@ioDummyChar@@MAEXXZ
	DD	FLAT:?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ
	DD	FLAT:?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?ClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedEntityList@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ
	DD	FLAT:?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z
	DD	FLAT:?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
	DD	FLAT:?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?SetAttackState@ioNoneTraceDummy2@@UAEXH@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1ioNoneTraceDummy2@@UAE@XZ
_TEXT	SEGMENT
??1ioNoneTraceDummy2@@UAE@XZ PROC			; ioNoneTraceDummy2::~ioNoneTraceDummy2, COMDAT
; _this$ = ecx

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioNoneTraceDummy2@@6BioPlayEntity@@@
  00006	c7 81 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+456], OFFSET ??_7ioNoneTraceDummy2@@6BioWorldEventReceiver@@@

; 17   : }

  00010	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
??1ioNoneTraceDummy2@@UAE@XZ ENDP			; ioNoneTraceDummy2::~ioNoneTraceDummy2
_TEXT	ENDS
EXTRN	?SendDieState@ioDummyChar@@QAEX_N@Z:PROC	; ioDummyChar::SendDieState
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?ProcessStartState@ioDummyChar@@IAEXM@Z:PROC	; ioDummyChar::ProcessStartState
EXTRN	?CheckExtraAniJump@ioDummyChar@@IAEXXZ:PROC	; ioDummyChar::CheckExtraAniJump
EXTRN	?CheckReservedSliding@ioDummyChar@@QAEXXZ:PROC	; ioDummyChar::CheckReservedSliding
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioNoneTraceDummy2@@MAEXMK@Z
_TEXT	SEGMENT
_fTimerPerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessState@ioNoneTraceDummy2@@MAEXMK@Z PROC		; ioNoneTraceDummy2::ProcessState, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 	switch( m_State )

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimerPerSec$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 86 30 02 00
	00		 mov	 eax, DWORD PTR [esi+560]
  00011	48		 dec	 eax
  00012	57		 push	 edi
  00013	74 3e		 je	 SHORT $LN4@ProcessSta
  00015	48		 dec	 eax
  00016	74 2b		 je	 SHORT $LN3@ProcessSta
  00018	83 e8 03	 sub	 eax, 3
  0001b	75 41		 jne	 SHORT $LN5@ProcessSta

; 52   : 	case DCS_ATTACK:
; 53   : 		CheckReservedSliding();

  0001d	e8 00 00 00 00	 call	 ?CheckReservedSliding@ioDummyChar@@QAEXXZ ; ioDummyChar::CheckReservedSliding

; 54   : 		CheckExtraAniJump();

  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?CheckExtraAniJump@ioDummyChar@@IAEXXZ ; ioDummyChar::CheckExtraAniJump

; 55   : 		ProcessAttackState( fTimerPerSec, dwPreTime );

  00029	ff 75 0c	 push	 DWORD PTR _dwPreTime$[ebp]
  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimerPerSec$[ebp]
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	51		 push	 ecx
  00034	8b ce		 mov	 ecx, esi
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	ff 90 0c 01 00
	00		 call	 DWORD PTR [eax+268]

; 56   : 		break;

  00041	eb 1b		 jmp	 SHORT $LN5@ProcessSta
$LN3@ProcessSta:

; 48   : 		break;
; 49   : 	case DCS_DELAY:
; 50   : 		ProcessDelayState( fTimerPerSec );

  00043	8b 06		 mov	 eax, DWORD PTR [esi]
  00045	51		 push	 ecx
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]

; 51   : 		break;

  00051	eb 0b		 jmp	 SHORT $LN5@ProcessSta
$LN4@ProcessSta:

; 45   : 	{
; 46   : 	case DCS_START:
; 47   : 		ProcessStartState( fTimerPerSec );

  00053	51		 push	 ecx
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	e8 00 00 00 00	 call	 ?ProcessStartState@ioDummyChar@@IAEXM@Z ; ioDummyChar::ProcessStartState
$LN5@ProcessSta:

; 57   : 	}
; 58   : 
; 59   : 	if( m_dwLifeTime && (DWORD)(m_dwStartTime + m_dwLifeTime) < FRAMEGETTIME() && m_State != DCS_ATTACK )

  0005e	83 be 10 0b 00
	00 00		 cmp	 DWORD PTR [esi+2832], 0
  00065	74 30		 je	 SHORT $LN9@ProcessSta
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0006d	8b c8		 mov	 ecx, eax
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00075	8b 8e 14 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2836]
  0007b	03 8e 10 0b 00
	00		 add	 ecx, DWORD PTR [esi+2832]
  00081	3b c8		 cmp	 ecx, eax
  00083	73 12		 jae	 SHORT $LN9@ProcessSta
  00085	83 be 30 02 00
	00 05		 cmp	 DWORD PTR [esi+560], 5
  0008c	74 09		 je	 SHORT $LN9@ProcessSta

; 60   : 		SendDieState( true );

  0008e	6a 01		 push	 1
  00090	8b ce		 mov	 ecx, esi
  00092	e8 00 00 00 00	 call	 ?SendDieState@ioDummyChar@@QAEX_N@Z ; ioDummyChar::SendDieState
$LN9@ProcessSta:

; 61   : 
; 62   : 	ProcessPos( fTimerPerSec );

  00097	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimerPerSec$[ebp]
  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	51		 push	 ecx
  0009f	8b ce		 mov	 ecx, esi
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	ff 90 fc 00 00
	00		 call	 DWORD PTR [eax+252]
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi

; 63   : }

  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?ProcessState@ioNoneTraceDummy2@@MAEXMK@Z ENDP		; ioNoneTraceDummy2::ProcessState
_TEXT	ENDS
EXTRN	?CheckEnableAttackState@ioDummyChar@@QAE_NXZ:PROC ; ioDummyChar::CheckEnableAttackState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessDelayState@ioNoneTraceDummy2@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessDelayState@ioNoneTraceDummy2@@MAEXM@Z PROC	; ioNoneTraceDummy2::ProcessDelayState, COMDAT
; _this$ = ecx

; 66   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 67   : 	if( CheckEnableAttackState() )

  00003	e8 00 00 00 00	 call	 ?CheckEnableAttackState@ioDummyChar@@QAE_NXZ ; ioDummyChar::CheckEnableAttackState
  00008	84 c0		 test	 al, al
  0000a	74 0a		 je	 SHORT $LN1@ProcessDel

; 68   : 	{
; 69   : 		SetAttackState();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	ff 90 24 01 00
	00		 call	 DWORD PTR [eax+292]
$LN1@ProcessDel:
  00016	5e		 pop	 esi

; 70   : 	}
; 71   : }

  00017	c2 04 00	 ret	 4
?ProcessDelayState@ioNoneTraceDummy2@@MAEXM@Z ENDP	; ioNoneTraceDummy2::ProcessDelayState
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__mask@@AbsDouble@
PUBLIC	__real@3f847ae140000000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@0000000000000000
PUBLIC	__mask@@NegFloat@
PUBLIC	?GetFlightDuration@ioNoneTraceDummy2@@IAEMMMM@Z	; ioNoneTraceDummy2::GetFlightDuration
;	COMDAT __real@408f400000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __mask@@AbsDouble@
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f847ae140000000
CONST	SEGMENT
__real@3f847ae140000000 DQ 03f847ae140000000r	; 0.01
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iononetracedummy2.cpp
CONST	ENDS
;	COMDAT ?GetFlightDuration@ioNoneTraceDummy2@@IAEMMMM@Z
_TEXT	SEGMENT
_fTopTime$ = -8						; size = 4
_fGapTime$ = -4						; size = 4
_fCurGravity$ = 8					; size = 4
_fCurWeaponFloatPower$ = 12				; size = 4
tv216 = 16						; size = 4
tv213 = 16						; size = 4
_fGapHeight$ = 16					; size = 4
?GetFlightDuration@ioNoneTraceDummy2@@IAEMMMM@Z PROC	; ioNoneTraceDummy2::GetFlightDuration, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 238  : 	float fTopTime, fTopHeight, fGapTime;
; 239  : 	fTopTime = fTopHeight = fGapTime = 0.0f;

  00005	0f 57 c0	 xorps	 xmm0, xmm0

; 240  : 
; 241  : 	float fNewGravity = fCurGravity;
; 242  : 	if( fNewGravity > 0.0f )

  00008	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fCurGravity$[ebp]
  0000d	0f 2f d0	 comiss	 xmm2, xmm0
  00010	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fCurWeaponFloatPower$[ebp]
  00015	f3 0f 11 45 fc	 movss	 DWORD PTR _fGapTime$[ebp], xmm0
  0001a	f3 0f 11 45 f8	 movss	 DWORD PTR _fTopTime$[ebp], xmm0
  0001f	76 13		 jbe	 SHORT $LN3@GetFlightD

; 243  : 	{
; 244  : 		fTopTime = fCurWeaponFloatPower / fNewGravity;

  00021	0f 5a d9	 cvtps2pd xmm3, xmm1
  00024	0f 5a e2	 cvtps2pd xmm4, xmm2
  00027	f2 0f 5e dc	 divsd	 xmm3, xmm4
  0002b	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  0002f	f3 0f 11 5d f8	 movss	 DWORD PTR _fTopTime$[ebp], xmm3
$LN3@GetFlightD:

; 245  : 		//fTopHeight = (fCurWeaponFloatPower*fTopTime) - (0.5f*fNewGravity*fTopTime*fTopTime);
; 246  : 	}
; 247  : 
; 248  : 	float fCurFloatPower = -fCurWeaponFloatPower;

  00034	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __mask@@NegFloat@
  0003b	0f 28 d9	 movaps	 xmm3, xmm1

; 249  : 	float fCurGapHeight = 0.0f;
; 250  : 	while( fCurGapHeight < fGapHeight )

  0003e	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fGapHeight$[ebp]
  00043	0f 5a c9	 cvtps2pd xmm1, xmm1
  00046	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@0000000000000000
  0004e	76 76		 jbe	 SHORT $LN1@GetFlightD
  00050	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f847ae147ae147b
  00058	0f 5a d2	 cvtps2pd xmm2, xmm2
  0005b	f2 0f 59 d1	 mulsd	 xmm2, xmm1
$LL2@GetFlightD:

; 251  : 	{
; 252  : 		fCurGapHeight += fabs(fCurFloatPower * 0.01f);

  0005f	0f 57 e4	 xorps	 xmm4, xmm4
  00062	f3 0f 5a e3	 cvtss2sd xmm4, xmm3
  00066	f2 0f 59 25 00
	00 00 00	 mulsd	 xmm4, QWORD PTR __real@3f847ae140000000
  0006e	f3 0f 10 6d 10	 movss	 xmm5, DWORD PTR _fGapHeight$[ebp]
  00073	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  00077	f3 0f 5a e4	 cvtss2sd xmm4, xmm4
  0007b	66 0f 54 25 00
	00 00 00	 andpd	 xmm4, QWORD PTR __mask@@AbsDouble@
  00083	f2 0f 5a e4	 cvtsd2ss xmm4, xmm4
  00087	f3 0f 5a e4	 cvtss2sd xmm4, xmm4
  0008b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008e	f2 0f 58 e0	 addsd	 xmm4, xmm0
  00092	0f 57 c0	 xorps	 xmm0, xmm0
  00095	f2 0f 5a c4	 cvtsd2ss xmm0, xmm4

; 253  : 		fCurFloatPower -= fNewGravity * 0.01;
; 254  : 		fGapTime += 0.01;

  00099	f3 0f 10 65 fc	 movss	 xmm4, DWORD PTR _fGapTime$[ebp]
  0009e	0f 5a e4	 cvtps2pd xmm4, xmm4
  000a1	f2 0f 58 e1	 addsd	 xmm4, xmm1
  000a5	f2 0f 5a e4	 cvtsd2ss xmm4, xmm4
  000a9	f3 0f 5a db	 cvtss2sd xmm3, xmm3
  000ad	f3 0f 11 65 fc	 movss	 DWORD PTR _fGapTime$[ebp], xmm4
  000b2	0f 5a ed	 cvtps2pd xmm5, xmm5
  000b5	f2 0f 5c da	 subsd	 xmm3, xmm2
  000b9	f2 0f 5a db	 cvtsd2ss xmm3, xmm3
  000bd	0f 5a e0	 cvtps2pd xmm4, xmm0
  000c0	66 0f 2f ec	 comisd	 xmm5, xmm4
  000c4	77 99		 ja	 SHORT $LL2@GetFlightD
$LN1@GetFlightD:

; 255  : 	}
; 256  : 
; 257  : 	float fResult = 2 * fTopTime * 1000.0f;
; 258  : 	fResult += fGapTime * 1000.0f;
; 259  : 	return fResult;

  000c6	d9 45 f8	 fld	 DWORD PTR _fTopTime$[ebp]
  000c9	dc c0		 fadd	 ST(0), ST(0)
  000cb	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@408f400000000000
  000d1	dc c9		 fmul	 ST(1), ST(0)
  000d3	d9 c9		 fxch	 ST(1)
  000d5	d9 5d 10	 fstp	 DWORD PTR tv216[ebp]
  000d8	d9 45 10	 fld	 DWORD PTR tv216[ebp]
  000db	d9 45 fc	 fld	 DWORD PTR _fGapTime$[ebp]
  000de	de ca		 fmulp	 ST(2), ST(0)
  000e0	de c1		 faddp	 ST(1), ST(0)
  000e2	d9 5d 10	 fstp	 DWORD PTR tv213[ebp]
  000e5	d9 45 10	 fld	 DWORD PTR tv213[ebp]

; 260  : }

  000e8	c9		 leave
  000e9	c2 0c 00	 ret	 12			; 0000000cH
?GetFlightDuration@ioNoneTraceDummy2@@IAEMMMM@Z ENDP	; ioNoneTraceDummy2::GetFlightDuration
_TEXT	ENDS
PUBLIC	__real@3fc70a3d80000000
PUBLIC	__real@4059000000000000
PUBLIC	?GetTargetTime@ioNoneTraceDummy2@@IAEMMMAAM@Z	; ioNoneTraceDummy2::GetTargetTime
;	COMDAT __real@3fc70a3d80000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@3fc70a3d80000000 DQ 03fc70a3d80000000r	; 0.18
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iononetracedummy2.cpp
CONST	ENDS
;	COMDAT ?GetTargetTime@ioNoneTraceDummy2@@IAEMMMAAM@Z
_TEXT	SEGMENT
_fCurGravity$ = 8					; size = 4
tv164 = 12						; size = 4
tv161 = 12						; size = 4
_fTopTime$ = 12						; size = 4
_fGapHeight$ = 12					; size = 4
_fFloatPower$ = 16					; size = 4
?GetTargetTime@ioNoneTraceDummy2@@IAEMMMAAM@Z PROC	; ioNoneTraceDummy2::GetTargetTime, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 264  : 	float fGapTime = 0.0f;
; 265  : 	float fCurFloatPower = 0;
; 266  : 	float fCurGapHeight = 0.0f;
; 267  : 
; 268  : 	float fRevisionH = 100.0f;
; 269  : 	float fTopHeight = fGapHeight + fRevisionH;

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fGapHeight$[ebp]
  00008	0f 57 c0	 xorps	 xmm0, xmm0

; 280  : 	} while( fCurGapHeight < fTopHeight );

  0000b	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3f847ae147ae147b
  00013	0f 5a c9	 cvtps2pd xmm1, xmm1
  00016	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@4059000000000000
  0001e	0f 57 ed	 xorps	 xmm5, xmm5
  00021	66 0f 5a e9	 cvtpd2ps xmm5, xmm1
  00025	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fCurGravity$[ebp]
  0002a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002d	0f 28 d8	 movaps	 xmm3, xmm0
  00030	0f 28 e0	 movaps	 xmm4, xmm0
  00033	f2 0f 59 ca	 mulsd	 xmm1, xmm2
$LL3@GetTargetT:

; 270  : 
; 271  : 	// Top Check
; 272  : 	float fTopTime = 0.0f;
; 273  : 	do
; 274  : 	{
; 275  : 		fTopTime = fGapTime;
; 276  : 
; 277  : 		fCurGapHeight += fabs(fCurFloatPower * 0.01f);

  00037	0f 57 f6	 xorps	 xmm6, xmm6
  0003a	f3 0f 5a f4	 cvtss2sd xmm6, xmm4
  0003e	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@3f847ae140000000
  00046	66 0f 5a f6	 cvtpd2ps xmm6, xmm6
  0004a	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  0004e	66 0f 54 35 00
	00 00 00	 andpd	 xmm6, QWORD PTR __mask@@AbsDouble@
  00056	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  0005a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0005d	f3 0f 5a f6	 cvtss2sd xmm6, xmm6
  00061	f2 0f 58 f0	 addsd	 xmm6, xmm0
  00065	f3 0f 11 5d 0c	 movss	 DWORD PTR _fTopTime$[ebp], xmm3
  0006a	0f 57 c0	 xorps	 xmm0, xmm0
  0006d	f2 0f 5a c6	 cvtsd2ss xmm0, xmm6

; 278  : 		fCurFloatPower += fCurGravity * 0.01;

  00071	f3 0f 5a e4	 cvtss2sd xmm4, xmm4

; 279  : 		fGapTime += 0.01;

  00075	f3 0f 5a db	 cvtss2sd xmm3, xmm3

; 280  : 	} while( fCurGapHeight < fTopHeight );

  00079	0f 57 ff	 xorps	 xmm7, xmm7
  0007c	0f 5a f0	 cvtps2pd xmm6, xmm0
  0007f	f3 0f 5a fd	 cvtss2sd xmm7, xmm5
  00083	66 0f 2f fe	 comisd	 xmm7, xmm6
  00087	f2 0f 58 e1	 addsd	 xmm4, xmm1
  0008b	f2 0f 58 da	 addsd	 xmm3, xmm2
  0008f	f2 0f 5a e4	 cvtsd2ss xmm4, xmm4
  00093	f2 0f 5a db	 cvtsd2ss xmm3, xmm3
  00097	77 9e		 ja	 SHORT $LL3@GetTargetT

; 281  : 
; 282  : 	fFloatPower = fCurFloatPower;
; 283  : 
; 284  : 
; 285  : 	// Target Check
; 286  : 	fGapTime = 0.0f;
; 287  : 	fCurFloatPower = 0;
; 288  : 	fCurGapHeight = 0.0f;
; 289  : 
; 290  : 	float fTargetTime = 0.18f;
; 291  : 
; 292  : 	fTargetTime += fTopTime;
; 293  : 	fTargetTime *= 1000.0f;
; 294  : 	return fTargetTime;

  00099	d9 45 0c	 fld	 DWORD PTR _fTopTime$[ebp]
  0009c	8b 45 10	 mov	 eax, DWORD PTR _fFloatPower$[ebp]
  0009f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fc70a3d80000000
  000a5	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  000a9	d9 5d 0c	 fstp	 DWORD PTR tv164[ebp]
  000ac	d9 45 0c	 fld	 DWORD PTR tv164[ebp]
  000af	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@408f400000000000
  000b5	d9 5d 0c	 fstp	 DWORD PTR tv161[ebp]
  000b8	d9 45 0c	 fld	 DWORD PTR tv161[ebp]

; 295  : }

  000bb	5d		 pop	 ebp
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?GetTargetTime@ioNoneTraceDummy2@@IAEMMMAAM@Z ENDP	; ioNoneTraceDummy2::GetTargetTime
_TEXT	ENDS
EXTRN	?SetAttackState@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::SetAttackState
; Function compile flags: /Ogsp
;	COMDAT ?SetAttackState@ioNoneTraceDummy2@@UAEXXZ
_TEXT	SEGMENT
?SetAttackState@ioNoneTraceDummy2@@UAEXXZ PROC		; ioNoneTraceDummy2::SetAttackState, COMDAT
; _this$ = ecx

; 299  : 	m_iReserveAttackCode = m_iNormalAttackCode;

  00000	8b 81 cc 14 00
	00		 mov	 eax, DWORD PTR [ecx+5324]
  00006	89 81 74 05 00
	00		 mov	 DWORD PTR [ecx+1396], eax

; 300  : 	ioDummyChar::SetAttackState();

  0000c	e9 00 00 00 00	 jmp	 ?SetAttackState@ioDummyChar@@UAEXXZ ; ioDummyChar::SetAttackState
?SetAttackState@ioNoneTraceDummy2@@UAEXXZ ENDP		; ioNoneTraceDummy2::SetAttackState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetAttackState@ioNoneTraceDummy2@@UAEXH@Z
_TEXT	SEGMENT
_iCode$ = 8						; size = 4
?SetAttackState@ioNoneTraceDummy2@@UAEXH@Z PROC		; ioNoneTraceDummy2::SetAttackState, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 305  : 	m_iReserveAttackCode = iCode;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iCode$[ebp]
  00006	89 81 74 05 00
	00		 mov	 DWORD PTR [ecx+1396], eax

; 306  : 	ioDummyChar::SetAttackState();

  0000c	e8 00 00 00 00	 call	 ?SetAttackState@ioDummyChar@@UAEXXZ ; ioDummyChar::SetAttackState

; 307  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetAttackState@ioNoneTraceDummy2@@UAEXH@Z ENDP		; ioNoneTraceDummy2::SetAttackState
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ; std::_List_val<FireTime,std::allocator<FireTime> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z PROC ; std::_List_val<FireTime,std::allocator<FireTime> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<FireTime,std::allocator<FireTime> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ; std::_List_val<FireTime,std::allocator<FireTime> >::_Prevnode
; Function compile flags: /Ogsp
;	COMDAT ?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z PROC ; std::_List_val<FireTime,std::allocator<FireTime> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 567  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<FireTime,std::allocator<FireTime> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++, COMDAT
; _this$ = ecx

; 242  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 244  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 245  : 		return (_Tmp);
; 246  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogsp
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 93   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 94   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ; std::_List_val<FireTime,std::allocator<FireTime> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z PROC ; std::_List_val<FireTime,std::allocator<FireTime> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ENDP ; std::_List_val<FireTime,std::allocator<FireTime> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
; Function compile flags: /Odsp
;	COMDAT ??_EioNoneTraceDummy2@@WBMI@AEPAXI@Z
_TEXT	SEGMENT
??_EioNoneTraceDummy2@@WBMI@AEPAXI@Z PROC		; [thunk]:ioNoneTraceDummy2::`vector deleting destructor', COMDAT
  00000	81 e9 c8 01 00
	00		 sub	 ecx, 456		; 000001c8H
  00006	e9 00 00 00 00	 jmp	 ??_EioNoneTraceDummy2@@UAEPAXI@Z
??_EioNoneTraceDummy2@@WBMI@AEPAXI@Z ENDP		; [thunk]:ioNoneTraceDummy2::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 328  :     x += v.x;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00010	0f 5a c0	 cvtps2pd xmm0, xmm0
  00013	0f 5a c9	 cvtps2pd xmm1, xmm1
  00016	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 329  :     y += v.y;

  0001a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0001f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00032	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 330  :     z += v.z;

  00036	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0003b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00044	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00049	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00053	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00057	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 331  :     return *this;
; 332  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00012	0f 5a c9	 cvtps2pd xmm1, xmm1
  00015	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00019	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0001e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00022	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00043	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00048	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00052	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00056	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 394  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
PUBLIC	??8D3DXVECTOR3@@QBEHABU0@@Z			; D3DXVECTOR3::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8D3DXVECTOR3@@QBEHABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??8D3DXVECTOR3@@QBEHABU0@@Z PROC			; D3DXVECTOR3::operator==, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 414  :     return x == v.x && y == v.y && z == v.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	0f 5a c9	 cvtps2pd xmm1, xmm1
  00014	66 0f 2e c1	 ucomisd xmm0, xmm1
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 39		 jp	 SHORT $LN3@operator
  0001e	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00023	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00028	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002e	66 0f 2e c1	 ucomisd xmm0, xmm1
  00032	9f		 lahf
  00033	f6 c4 44	 test	 ah, 68			; 00000044H
  00036	7a 1f		 jp	 SHORT $LN3@operator
  00038	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0003d	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00042	0f 5a c0	 cvtps2pd xmm0, xmm0
  00045	0f 5a c9	 cvtps2pd xmm1, xmm1
  00048	66 0f 2e c1	 ucomisd xmm0, xmm1
  0004c	9f		 lahf
  0004d	f6 c4 44	 test	 ah, 68			; 00000044H
  00050	7a 05		 jp	 SHORT $LN3@operator
  00052	33 c0		 xor	 eax, eax
  00054	40		 inc	 eax
  00055	eb 02		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00057	33 c0		 xor	 eax, eax
$LN4@operator:

; 415  : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??8D3DXVECTOR3@@QBEHABU0@@Z ENDP			; D3DXVECTOR3::operator==
_TEXT	ENDS
PUBLIC	??9D3DXVECTOR3@@QBEHABU0@@Z			; D3DXVECTOR3::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9D3DXVECTOR3@@QBEHABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??9D3DXVECTOR3@@QBEHABU0@@Z PROC			; D3DXVECTOR3::operator!=, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 420  :     return x != v.x || y != v.y || z != v.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	0f 5a c9	 cvtps2pd xmm1, xmm1
  00014	66 0f 2e c1	 ucomisd xmm0, xmm1
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 38		 jp	 SHORT $LN3@operator@2
  0001e	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00023	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00028	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002e	66 0f 2e c1	 ucomisd xmm0, xmm1
  00032	9f		 lahf
  00033	f6 c4 44	 test	 ah, 68			; 00000044H
  00036	7a 1e		 jp	 SHORT $LN3@operator@2
  00038	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0003d	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00042	0f 5a c0	 cvtps2pd xmm0, xmm0
  00045	0f 5a c9	 cvtps2pd xmm1, xmm1
  00048	66 0f 2e c1	 ucomisd xmm0, xmm1
  0004c	9f		 lahf
  0004d	f6 c4 44	 test	 ah, 68			; 00000044H
  00050	7a 04		 jp	 SHORT $LN3@operator@2
  00052	33 c0		 xor	 eax, eax
  00054	eb 03		 jmp	 SHORT $LN4@operator@2
$LN3@operator@2:
  00056	33 c0		 xor	 eax, eax
  00058	40		 inc	 eax
$LN4@operator@2:

; 421  : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??9D3DXVECTOR3@@QBEHABU0@@Z ENDP			; D3DXVECTOR3::operator!=
_TEXT	ENDS
PUBLIC	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z		; D3DXVec3Length
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv169 = 8						; size = 4
tv160 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3Length, COMDAT

; 1710 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1711 : #ifdef D3DX_DEBUG
; 1712 :     if(!pV)
; 1713 :         return 0.0f;
; 1714 : #endif
; 1715 : 
; 1716 : #ifdef __cplusplus
; 1717 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  00006	d9 40 04	 fld	 DWORD PTR [eax+4]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0000e	d9 c1		 fld	 ST(1)
  00010	de ca		 fmulp	 ST(2), ST(0)
  00012	d9 c2		 fld	 ST(2)
  00014	de cb		 fmulp	 ST(3), ST(0)
  00016	d9 c9		 fxch	 ST(1)
  00018	de c2		 faddp	 ST(2), ST(0)
  0001a	d9 c0		 fld	 ST(0)
  0001c	de c9		 fmulp	 ST(1), ST(0)
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 5d 08	 fstp	 DWORD PTR tv169[ebp]
  00023	d9 45 08	 fld	 DWORD PTR tv169[ebp]
  00026	e8 00 00 00 00	 call	 __CIsqrt
  0002b	d9 5d 08	 fstp	 DWORD PTR tv160[ebp]
  0002e	d9 45 08	 fld	 DWORD PTR tv160[ebp]

; 1718 : #else
; 1719 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
; 1720 : #endif
; 1721 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3Length
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummychar.h
_TEXT	ENDS
;	COMDAT ?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
_TEXT	SEGMENT
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ PROC		; ioDummyChar::IsDummyCharMidSync, COMDAT
; _this$ = ecx

; 742  : 	virtual bool IsDummyCharMidSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ ENDP		; ioDummyChar::IsDummyCharMidSync
_TEXT	ENDS
PUBLIC	??0WeaponMoveInfo@@QAE@XZ			; WeaponMoveInfo::WeaponMoveInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionormalskill.h
;	COMDAT ??0WeaponMoveInfo@@QAE@XZ
_TEXT	SEGMENT
$T411550 = -12						; size = 12
??0WeaponMoveInfo@@QAE@XZ PROC				; WeaponMoveInfo::WeaponMoveInfo, COMDAT
; _this$ = ecx

; 16   : 	WeaponMoveInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 17   : 	{
; 18   : 		m_vMoveDir = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );

  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b c1		 mov	 eax, ecx
  0000d	f3 0f 11 45 f4	 movss	 DWORD PTR $T411550[ebp], xmm0
  00012	f3 0f 11 45 f8	 movss	 DWORD PTR $T411550[ebp+4], xmm0
  00017	f3 0f 11 45 fc	 movss	 DWORD PTR $T411550[ebp+8], xmm0
  0001c	8d 75 f4	 lea	 esi, DWORD PTR $T411550[ebp]
  0001f	8b f8		 mov	 edi, eax
  00021	a5		 movsd
  00022	a5		 movsd
  00023	a5		 movsd
  00024	5f		 pop	 edi

; 19   : 		m_fMoveSpeed = 0.0f;

  00025	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 20   : 		m_fFloatPower = 0.0f;

  0002a	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0
  0002f	5e		 pop	 esi

; 21   : 	}

  00030	c9		 leave
  00031	c3		 ret	 0
??0WeaponMoveInfo@@QAE@XZ ENDP				; WeaponMoveInfo::WeaponMoveInfo
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	??0ioNoneTraceDummy2@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioNoneTraceDummy2::ioNoneTraceDummy2
EXTRN	__imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioDummyChar::ioDummyChar
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iononetracedummy2.cpp
;	COMDAT ??0ioNoneTraceDummy2@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
$T533335 = -12						; size = 12
_pGrp$ = 8						; size = 4
_pMode$ = 12						; size = 4
??0ioNoneTraceDummy2@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z PROC ; ioNoneTraceDummy2::ioNoneTraceDummy2, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  00011	e8 00 00 00 00	 call	 ??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyChar::ioDummyChar
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7ioNoneTraceDummy2@@6BioPlayEntity@@@
  0001f	c7 83 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+456], OFFSET ??_7ioNoneTraceDummy2@@6BioWorldEventReceiver@@@
  00029	f3 0f 11 45 f4	 movss	 DWORD PTR $T533335[ebp], xmm0
  0002e	f3 0f 11 45 f8	 movss	 DWORD PTR $T533335[ebp+4], xmm0
  00033	f3 0f 11 45 fc	 movss	 DWORD PTR $T533335[ebp+8], xmm0
  00038	8d bb 8c 14 00
	00		 lea	 edi, DWORD PTR [ebx+5260]
  0003e	8d 75 f4	 lea	 esi, DWORD PTR $T533335[ebp]
  00041	a5		 movsd
  00042	a5		 movsd
  00043	a5		 movsd
  00044	f3 0f 11 83 98
	14 00 00	 movss	 DWORD PTR [ebx+5272], xmm0
  0004c	f3 0f 11 83 9c
	14 00 00	 movss	 DWORD PTR [ebx+5276], xmm0

; 12   : 	m_vCirclePos = ioMath::VEC3_ZERO;

  00054	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  0005a	8d bb 80 14 00
	00		 lea	 edi, DWORD PTR [ebx+5248]
  00060	a5		 movsd
  00061	a5		 movsd
  00062	a5		 movsd
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 13   : }

  00065	8b c3		 mov	 eax, ebx
  00067	5b		 pop	 ebx
  00068	c9		 leave
  00069	c2 08 00	 ret	 8
??0ioNoneTraceDummy2@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ENDP ; ioNoneTraceDummy2::ioNoneTraceDummy2
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioNoneTraceDummy2@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioNoneTraceDummy2@@UAEPAXI@Z PROC			; ioNoneTraceDummy2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioNoneTraceDummy2@@UAE@XZ ; ioNoneTraceDummy2::~ioNoneTraceDummy2
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioNoneTraceDummy2@@UAEPAXI@Z ENDP			; ioNoneTraceDummy2::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4041800000000000
PUBLIC	__real@c1a00000
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?CheckWeaponFloatInfo@ioNoneTraceDummy2@@IAEXXZ	; ioNoneTraceDummy2::CheckWeaponFloatInfo
EXTRN	?GetMidHeightByRate@ioGameEntity@@QBEMM@Z:PROC	; ioGameEntity::GetMidHeightByRate
EXTRN	?GetRoomGravity@ioPlayStage@@QAEMXZ:PROC	; ioPlayStage::GetRoomGravity
EXTRN	?GetPlayStage@ioSkillMaker@@QAEPAVioPlayStage@@XZ:PROC ; ioSkillMaker::GetPlayStage
EXTRN	?GetSingleton@ioSkillMaker@@SAAAV1@XZ:PROC	; ioSkillMaker::GetSingleton
EXTRN	__imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __real@4041800000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@4041800000000000 DQ 04041800000000000r	; 35
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iononetracedummy2.cpp
CONST	ENDS
;	COMDAT ?CheckWeaponFloatInfo@ioNoneTraceDummy2@@IAEXXZ
_TEXT	SEGMENT
_qtRot$ = -92						; size = 16
_vdummyPos$ = -76					; size = 12
_fWeaponMoveSpeed$531148 = -64				; size = 4
_fGapHeight$531152 = -60				; size = 4
_fGapDistance$ = -56					; size = 4
_fRange$ = -52						; size = 4
_fCurWeaponFloatPower$ = -48				; size = 4
_fFlightDuration$531151 = -44				; size = 4
_fCurGravity$531147 = -44				; size = 4
_vDir$ = -40						; size = 12
_vCharDir$ = -28					; size = 12
_vTargetPos$ = -16					; size = 12
$T531134 = -16						; size = 12
tv937 = -12						; size = 8
_fCurWeaponMoveSpeed$ = -8				; size = 4
__$ArrayPad$ = -4					; size = 4
?CheckWeaponFloatInfo@ioNoneTraceDummy2@@IAEXXZ PROC	; ioNoneTraceDummy2::CheckWeaponFloatInfo, COMDAT
; _this$ = ecx

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 152  : 	m_vWeaponMoveInfo.m_vMoveDir = ioMath::VEC3_ZERO;
; 153  : 	m_vWeaponMoveInfo.m_fMoveSpeed = 0.0f;

  00010	0f 57 c0	 xorps	 xmm0, xmm0
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  0001b	8b d9		 mov	 ebx, ecx
  0001d	57		 push	 edi
  0001e	8d bb 8c 14 00
	00		 lea	 edi, DWORD PTR [ebx+5260]
  00024	a5		 movsd
  00025	a5		 movsd
  00026	a5		 movsd
  00027	f3 0f 11 83 98
	14 00 00	 movss	 DWORD PTR [ebx+5272], xmm0

; 154  : 	m_vWeaponMoveInfo.m_fFloatPower = 0.0f;

  0002f	f3 0f 11 83 9c
	14 00 00	 movss	 DWORD PTR [ebx+5276], xmm0

; 155  : 
; 156  : 	if ( m_vCirclePos == ioMath::VEC3_ZERO )

  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  0003d	f3 0f 10 83 80
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5248]
  00045	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00049	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	66 0f 2e c1	 ucomisd xmm0, xmm1
  00053	9f		 lahf
  00054	f6 c4 44	 test	 ah, 68			; 00000044H
  00057	7a 3e		 jp	 SHORT $LN21@CheckWeapo
  00059	f3 0f 10 83 84
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5252]
  00061	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00066	0f 5a c0	 cvtps2pd xmm0, xmm0
  00069	0f 5a c9	 cvtps2pd xmm1, xmm1
  0006c	66 0f 2e c1	 ucomisd xmm0, xmm1
  00070	9f		 lahf
  00071	f6 c4 44	 test	 ah, 68			; 00000044H
  00074	7a 21		 jp	 SHORT $LN21@CheckWeapo
  00076	f3 0f 10 83 88
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5256]
  0007e	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00083	0f 5a c0	 cvtps2pd xmm0, xmm0
  00086	0f 5a c9	 cvtps2pd xmm1, xmm1
  00089	66 0f 2e c1	 ucomisd xmm0, xmm1
  0008d	9f		 lahf
  0008e	f6 c4 44	 test	 ah, 68			; 00000044H
  00091	0f 8b 24 04 00
	00		 jnp	 $LN9@CheckWeapo
$LN21@CheckWeapo:

; 157  : 		return;
; 158  : 	// CharDir
; 159  : 	D3DXVECTOR3 vdummyPos = GetWorldPosition();

  00097	8b 03		 mov	 eax, DWORD PTR [ebx]
  00099	8b cb		 mov	 ecx, ebx
  0009b	ff 50 70	 call	 DWORD PTR [eax+112]
  0009e	8b f0		 mov	 esi, eax
  000a0	8d 7d b4	 lea	 edi, DWORD PTR _vdummyPos$[ebp]
  000a3	a5		 movsd
  000a4	a5		 movsd
  000a5	a5		 movsd

; 160  : 	D3DXVECTOR3 vCharDir = m_vCirclePos - vdummyPos;

  000a6	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _vdummyPos$[ebp]
  000ab	8d b3 80 14 00
	00		 lea	 esi, DWORD PTR [ebx+5248]
  000b1	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000b5	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b8	0f 5a c9	 cvtps2pd xmm1, xmm1
  000bb	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000bf	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _vdummyPos$[ebp+8]
  000c4	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000c8	f3 0f 11 45 e4	 movss	 DWORD PTR _vCharDir$[ebp], xmm0
  000cd	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000d2	0f 5a c0	 cvtps2pd xmm0, xmm0

; 161  : 	vCharDir.y = 0.0f;
; 162  : 
; 163  : 	float fFirstRange = D3DXVec3Length( &vCharDir );
; 164  : 	D3DXVec3Normalize( &vCharDir, &vCharDir );

  000d5	8d 45 e4	 lea	 eax, DWORD PTR _vCharDir$[ebp]
  000d8	0f 5a c9	 cvtps2pd xmm1, xmm1
  000db	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000df	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000e3	50		 push	 eax
  000e4	f3 0f 11 45 ec	 movss	 DWORD PTR _vCharDir$[ebp+8], xmm0
  000e9	0f 57 c0	 xorps	 xmm0, xmm0
  000ec	50		 push	 eax
  000ed	f3 0f 11 45 e8	 movss	 DWORD PTR _vCharDir$[ebp+4], xmm0
  000f2	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 165  : 
; 166  : 	D3DXQUATERNION qtRot;
; 167  : 	ioMath::CalcDirectionQuaternion( qtRot, -vCharDir );

  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  000ff	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vCharDir$[ebp]
  00104	0f 57 c8	 xorps	 xmm1, xmm0
  00107	f3 0f 11 4d f0	 movss	 DWORD PTR $T531134[ebp], xmm1
  0010c	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vCharDir$[ebp+4]
  00111	0f 57 c8	 xorps	 xmm1, xmm0
  00114	8d 45 f0	 lea	 eax, DWORD PTR $T531134[ebp]
  00117	50		 push	 eax
  00118	f3 0f 11 4d f4	 movss	 DWORD PTR $T531134[ebp+4], xmm1
  0011d	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vCharDir$[ebp+8]
  00122	8d 45 a4	 lea	 eax, DWORD PTR _qtRot$[ebp]
  00125	0f 57 c8	 xorps	 xmm1, xmm0
  00128	50		 push	 eax
  00129	f3 0f 11 4d f8	 movss	 DWORD PTR $T531134[ebp+8], xmm1
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z

; 168  : 	SetWorldOrientation( qtRot );

  00134	8b 03		 mov	 eax, DWORD PTR [ebx]
  00136	59		 pop	 ecx
  00137	59		 pop	 ecx
  00138	8d 4d a4	 lea	 ecx, DWORD PTR _qtRot$[ebp]
  0013b	51		 push	 ecx
  0013c	8b cb		 mov	 ecx, ebx
  0013e	ff 50 48	 call	 DWORD PTR [eax+72]

; 169  : 
; 170  : 	D3DXVECTOR3 vTargetPos = m_vCirclePos;
; 171  : 
; 172  : 	float fGapDistance = m_fWeaponGapDistance;

  00141	f3 0f 10 83 b0
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5296]

; 173  : 	D3DXVECTOR3 vPos = vTargetPos + (vCharDir * fGapDistance);

  00149	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vCharDir$[ebp]
  0014e	0f 5a d0	 cvtps2pd xmm2, xmm0
  00151	8d 7d f0	 lea	 edi, DWORD PTR _vTargetPos$[ebp]
  00154	a5		 movsd
  00155	0f 5a c9	 cvtps2pd xmm1, xmm1
  00158	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0015c	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _vCharDir$[ebp+8]
  00161	f3 0f 11 45 c8	 movss	 DWORD PTR _fGapDistance$[ebp], xmm0
  00166	0f 5a d2	 cvtps2pd xmm2, xmm2
  00169	0f 5a c0	 cvtps2pd xmm0, xmm0
  0016c	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00170	a5		 movsd
  00171	0f 57 c0	 xorps	 xmm0, xmm0
  00174	66 0f 5a c2	 cvtpd2ps xmm0, xmm2
  00178	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0017c	a5		 movsd
  0017d	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _vTargetPos$[ebp]
  00182	0f 5a d2	 cvtps2pd xmm2, xmm2
  00185	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00189	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0018d	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _vTargetPos$[ebp+8]
  00192	0f 5a c0	 cvtps2pd xmm0, xmm0
  00195	0f 5a d2	 cvtps2pd xmm2, xmm2
  00198	f2 0f 58 d0	 addsd	 xmm2, xmm0
  0019c	0f 57 c0	 xorps	 xmm0, xmm0
  0019f	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001a3	66 0f 5a c2	 cvtpd2ps xmm0, xmm2

; 174  : 	D3DXVECTOR3 vDir = vPos - vdummyPos;

  001a7	f3 0f 10 55 b4	 movss	 xmm2, DWORD PTR _vdummyPos$[ebp]
  001ac	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001b0	0f 5a c0	 cvtps2pd xmm0, xmm0
  001b3	0f 5a d2	 cvtps2pd xmm2, xmm2
  001b6	f2 0f 5c ca	 subsd	 xmm1, xmm2
  001ba	f3 0f 10 55 bc	 movss	 xmm2, DWORD PTR _vdummyPos$[ebp+8]
  001bf	0f 5a d2	 cvtps2pd xmm2, xmm2
  001c2	f2 0f 5c c2	 subsd	 xmm0, xmm2
  001c6	0f 57 d2	 xorps	 xmm2, xmm2
  001c9	66 0f 5a d0	 cvtpd2ps xmm2, xmm0

; 175  : 	vDir.y = 0.0f;

  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	f3 0f 11 45 dc	 movss	 DWORD PTR _vDir$[ebp+4], xmm0
  001d5	0f 57 c0	 xorps	 xmm0, xmm0
  001d8	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001dc	f3 0f 5a c1	 cvtss2sd xmm0, xmm1

; 176  : 
; 177  : 	float fRate = 1.0f;
; 178  : 	float fRange = D3DXVec3Length( &vDir );

  001e0	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  001e4	f2 0f 11 45 f4	 movsd	 QWORD PTR tv937[ebp], xmm0
  001e9	0f 57 c0	 xorps	 xmm0, xmm0
  001ec	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  001f0	f3 0f 11 4d d8	 movss	 DWORD PTR _vDir$[ebp], xmm1
  001f5	0f 5a ca	 cvtps2pd xmm1, xmm2
  001f8	f3 0f 11 55 e0	 movss	 DWORD PTR _vDir$[ebp+8], xmm2
  001fd	f2 0f 10 55 f4	 movsd	 xmm2, QWORD PTR tv937[ebp]
  00202	f2 0f 58 d0	 addsd	 xmm2, xmm0
  00206	0f 57 c0	 xorps	 xmm0, xmm0
  00209	f2 0f 59 c9	 mulsd	 xmm1, xmm1

; 179  : 	D3DXVec3Normalize( &vDir, &vDir );

  0020d	8d 45 d8	 lea	 eax, DWORD PTR _vDir$[ebp]
  00210	f2 0f 58 d1	 addsd	 xmm2, xmm1
  00214	66 0f 5a c2	 cvtpd2ps xmm0, xmm2
  00218	0f 5a c0	 cvtps2pd xmm0, xmm0
  0021b	50		 push	 eax
  0021c	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00220	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00224	50		 push	 eax
  00225	f3 0f 11 45 cc	 movss	 DWORD PTR _fRange$[ebp], xmm0
  0022a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 180  : 
; 181  : 	float fCurWeaponFloatPower = 0.0f;
; 182  : 	float fCurWeaponMoveSpeed = 0.0f;

  0022f	0f 57 c0	 xorps	 xmm0, xmm0

; 183  : 	if( fRange > 0.0f )

  00232	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _fRange$[ebp]
  00237	0f 2f c8	 comiss	 xmm1, xmm0
  0023a	f3 0f 11 45 f8	 movss	 DWORD PTR _fCurWeaponMoveSpeed$[ebp], xmm0
  0023f	0f 86 76 02 00
	00		 jbe	 $LN9@CheckWeapo

; 184  : 	{
; 185  : 		fRate = fRange / (m_fCircleRange+fGapDistance);
; 186  : 
; 187  : 		// CurFloat
; 188  : 		fCurWeaponFloatPower = m_fWeaponFloatPower * fRate;

  00245	f3 0f 10 93 c0
	14 00 00	 movss	 xmm2, DWORD PTR [ebx+5312]
  0024d	f3 0f 10 5d c8	 movss	 xmm3, DWORD PTR _fGapDistance$[ebp]
  00252	0f 5a d2	 cvtps2pd xmm2, xmm2
  00255	0f 5a c9	 cvtps2pd xmm1, xmm1
  00258	0f 5a db	 cvtps2pd xmm3, xmm3
  0025b	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0025f	f2 0f 5e ca	 divsd	 xmm1, xmm2
  00263	f3 0f 10 93 a4
	14 00 00	 movss	 xmm2, DWORD PTR [ebx+5284]
  0026b	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0026f	0f 5a d2	 cvtps2pd xmm2, xmm2
  00272	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00276	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0027a	0f 57 d2	 xorps	 xmm2, xmm2
  0027d	66 0f 5a d1	 cvtpd2ps xmm2, xmm1

; 189  : 		fCurWeaponFloatPower = max( fCurWeaponFloatPower, m_fWeaponFloatMinPower );

  00281	f3 0f 10 8b a8
	14 00 00	 movss	 xmm1, DWORD PTR [ebx+5288]
  00289	f3 0f 11 55 d0	 movss	 DWORD PTR _fCurWeaponFloatPower$[ebp], xmm2
  0028e	0f 5a d2	 cvtps2pd xmm2, xmm2
  00291	0f 5a d9	 cvtps2pd xmm3, xmm1
  00294	66 0f 2f d3	 comisd	 xmm2, xmm3
  00298	77 05		 ja	 SHORT $LN14@CheckWeapo
  0029a	f3 0f 11 4d d0	 movss	 DWORD PTR _fCurWeaponFloatPower$[ebp], xmm1
$LN14@CheckWeapo:

; 190  : 
; 191  : 		float fCurGravity = 0.0f;

  0029f	f3 0f 11 45 d4	 movss	 DWORD PTR _fCurGravity$531147[ebp], xmm0

; 192  : 		float fWeaponMoveSpeed = 0.0f;

  002a4	f3 0f 11 45 c0	 movss	 DWORD PTR _fWeaponMoveSpeed$531148[ebp], xmm0

; 193  : 		ioPlayStage *pStage = g_SkillMaker.GetPlayStage();

  002a9	e8 00 00 00 00	 call	 ?GetSingleton@ioSkillMaker@@SAAAV1@XZ ; ioSkillMaker::GetSingleton
  002ae	8b c8		 mov	 ecx, eax
  002b0	e8 00 00 00 00	 call	 ?GetPlayStage@ioSkillMaker@@QAEPAVioPlayStage@@XZ ; ioSkillMaker::GetPlayStage

; 194  : 		if( pStage )

  002b5	85 c0		 test	 eax, eax
  002b7	74 10		 je	 SHORT $LN8@CheckWeapo

; 195  : 			fCurGravity = pStage->GetRoomGravity() * m_fWeaponGravityRate;

  002b9	8b c8		 mov	 ecx, eax
  002bb	e8 00 00 00 00	 call	 ?GetRoomGravity@ioPlayStage@@QAEMXZ ; ioPlayStage::GetRoomGravity
  002c0	d8 8b a0 14 00
	00		 fmul	 DWORD PTR [ebx+5280]
  002c6	d9 5d d4	 fstp	 DWORD PTR _fCurGravity$531147[ebp]
$LN8@CheckWeapo:

; 196  : 
; 197  : 		float fFlightDuration = 0.0f;
; 198  : 		float fGapHeight = GetMidHeightByRate(m_fRevisionRate) - vdummyPos.y;

  002c9	f3 0f 10 83 b4
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5300]
  002d1	51		 push	 ecx
  002d2	8b cb		 mov	 ecx, ebx
  002d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d9	e8 00 00 00 00	 call	 ?GetMidHeightByRate@ioGameEntity@@QBEMM@Z ; ioGameEntity::GetMidHeightByRate
  002de	d8 65 b8	 fsub	 DWORD PTR _vdummyPos$[ebp+4]

; 199  : 		float fGapHeight2 = vdummyPos.y - m_vCirclePos.y;

  002e1	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vdummyPos$[ebp+4]
  002e6	f3 0f 10 8b 84
	14 00 00	 movss	 xmm1, DWORD PTR [ebx+5252]
  002ee	0f 5a c0	 cvtps2pd xmm0, xmm0
  002f1	d9 5d c4	 fstp	 DWORD PTR _fGapHeight$531152[ebp]
  002f4	0f 5a c9	 cvtps2pd xmm1, xmm1
  002f7	f2 0f 5c c1	 subsd	 xmm0, xmm1
  002fb	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 200  : 		if( fGapHeight2 > 0.0f )

  002ff	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00306	0f 86 9d 00 00
	00		 jbe	 $LN7@CheckWeapo

; 201  : 		{
; 202  : 			fGapHeight += fGapHeight2;
; 203  : 			fFlightDuration = GetFlightDuration( fCurGravity, fCurWeaponFloatPower, fGapHeight );

  0030c	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _fGapHeight$531152[ebp]
  00311	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00315	0f 5a c9	 cvtps2pd xmm1, xmm1
  00318	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0031c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
$LN62@CheckWeapo:
  00320	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00323	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00329	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _fCurWeaponFloatPower$[ebp]
  0032e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00334	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fCurGravity$531147[ebp]
  00339	8b cb		 mov	 ecx, ebx
  0033b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00340	e8 00 00 00 00	 call	 ?GetFlightDuration@ioNoneTraceDummy2@@IAEMMMM@Z ; ioNoneTraceDummy2::GetFlightDuration
  00345	d9 5d d4	 fstp	 DWORD PTR _fFlightDuration$531151[ebp]

; 204  : 
; 205  : 			if( fFlightDuration > 0.0f )

  00348	d9 ee		 fldz
  0034a	d9 45 d4	 fld	 DWORD PTR _fFlightDuration$531151[ebp]
  0034d	df f1		 fcomip	 ST(1)
  0034f	dd d8		 fstp	 ST(0)
  00351	76 31		 jbe	 SHORT $LN58@CheckWeapo

; 206  : 				fWeaponMoveSpeed = (fRange+fGapDistance) / (fFlightDuration / 1000.0f);

  00353	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _fGapDistance$[ebp]
  00358	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  0035d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00360	0f 5a c0	 cvtps2pd xmm0, xmm0
  00363	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00367	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _fFlightDuration$531151[ebp]
  0036c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0036f	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@408f400000000000
  00377	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0037b	0f 57 c9	 xorps	 xmm1, xmm1
  0037e	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  00382	eb 05		 jmp	 SHORT $LN6@CheckWeapo
$LN58@CheckWeapo:
  00384	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _fWeaponMoveSpeed$531148[ebp]
$LN6@CheckWeapo:

; 207  : 
; 208  : 			fCurWeaponMoveSpeed = max( m_fWeaponMinSpeed, fWeaponMoveSpeed );

  00389	f3 0f 10 83 ac
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5292]
  00391	0f 5a d0	 cvtps2pd xmm2, xmm0
  00394	0f 5a d9	 cvtps2pd xmm3, xmm1
  00397	66 0f 2f d3	 comisd	 xmm2, xmm3
  0039b	0f 87 f9 00 00
	00		 ja	 $LN18@CheckWeapo
  003a1	0f 28 c1	 movaps	 xmm0, xmm1
  003a4	e9 f1 00 00 00	 jmp	 $LN18@CheckWeapo
$LN7@CheckWeapo:

; 209  : 		}
; 210  : 		else if( COMPARE(fGapHeight2, -m_fUpLimitHeight, -20.0f) && fRange > m_fUpLimitRange )

  003a9	f3 0f 10 93 bc
	14 00 00	 movss	 xmm2, DWORD PTR [ebx+5308]
  003b1	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __mask@@NegFloat@
  003b8	0f 57 c9	 xorps	 xmm1, xmm1
  003bb	f3 0f 5a c8	 cvtss2sd xmm1, xmm0
  003bf	0f 5a d2	 cvtps2pd xmm2, xmm2
  003c2	66 0f 2f ca	 comisd	 xmm1, xmm2
  003c6	0f 82 bf 00 00
	00		 jb	 $LN59@CheckWeapo
  003cc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c1a00000
  003d4	0f 2f c8	 comiss	 xmm1, xmm0
  003d7	0f 86 ae 00 00
	00		 jbe	 $LN59@CheckWeapo
  003dd	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _fRange$[ebp]
  003e2	f3 0f 10 93 b8
	14 00 00	 movss	 xmm2, DWORD PTR [ebx+5304]
  003ea	0f 5a c9	 cvtps2pd xmm1, xmm1
  003ed	0f 5a d2	 cvtps2pd xmm2, xmm2
  003f0	66 0f 2f ca	 comisd	 xmm1, xmm2
  003f4	0f 86 91 00 00
	00		 jbe	 $LN59@CheckWeapo

; 211  : 		{
; 212  : 			float fNewGap = fabs( fGapHeight2 ) - fGapHeight;

  003fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __mask@@AbsDouble@

; 213  : 			fFlightDuration = GetTargetTime( fCurGravity, fNewGap, fCurWeaponFloatPower );

  00402	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00406	66 0f 54 c1	 andpd	 xmm0, xmm1
  0040a	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _fGapHeight$531152[ebp]
  0040f	8d 45 d0	 lea	 eax, DWORD PTR _fCurWeaponFloatPower$[ebp]
  00412	50		 push	 eax
  00413	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00417	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0041b	51		 push	 ecx
  0041c	51		 push	 ecx
  0041d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00420	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00424	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00428	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0042e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fCurGravity$531147[ebp]
  00433	8b cb		 mov	 ecx, ebx
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	e8 00 00 00 00	 call	 ?GetTargetTime@ioNoneTraceDummy2@@IAEMMMAAM@Z ; ioNoneTraceDummy2::GetTargetTime
  0043f	d9 5d d4	 fstp	 DWORD PTR _fFlightDuration$531151[ebp]

; 214  : 			fRange -= 35.0f;
; 215  : 
; 216  : 			if( fFlightDuration > 0.0f )

  00442	d9 ee		 fldz
  00444	d9 45 d4	 fld	 DWORD PTR _fFlightDuration$531151[ebp]
  00447	df f1		 fcomip	 ST(1)
  00449	dd d8		 fstp	 ST(0)
  0044b	76 48		 jbe	 SHORT $LN57@CheckWeapo

; 217  : 				fCurWeaponMoveSpeed = (fRange+fGapDistance) / (fFlightDuration / 1000.0f);

  0044d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  00452	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _fGapDistance$[ebp]
  00457	0f 5a c0	 cvtps2pd xmm0, xmm0
  0045a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4041800000000000
  00462	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00466	0f 5a c9	 cvtps2pd xmm1, xmm1
  00469	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0046d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00471	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _fFlightDuration$531151[ebp]
  00476	0f 5a c9	 cvtps2pd xmm1, xmm1
  00479	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@408f400000000000
  00481	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00485	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 218  : 		}
; 219  : 		else

  00489	eb 0f		 jmp	 SHORT $LN18@CheckWeapo
$LN59@CheckWeapo:

; 220  : 		{
; 221  : 			fFlightDuration = GetFlightDuration( fCurGravity, fCurWeaponFloatPower, fGapHeight );

  0048b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _fGapHeight$531152[ebp]

; 222  : 
; 223  : 			if( fFlightDuration > 0.0f )
; 224  : 				fWeaponMoveSpeed = (fRange+fGapDistance) / (fFlightDuration / 1000.0f);

  00490	e9 8b fe ff ff	 jmp	 $LN62@CheckWeapo
$LN57@CheckWeapo:

; 218  : 		}
; 219  : 		else

  00495	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fCurWeaponMoveSpeed$[ebp]
$LN18@CheckWeapo:

; 225  : 
; 226  : 			fCurWeaponMoveSpeed = max( m_fWeaponMinSpeed, fWeaponMoveSpeed );
; 227  : 		}
; 228  : 
; 229  : 
; 230  : 		m_vWeaponMoveInfo.m_vMoveDir = vDir;

  0049a	8d 75 d8	 lea	 esi, DWORD PTR _vDir$[ebp]
  0049d	8d bb 8c 14 00
	00		 lea	 edi, DWORD PTR [ebx+5260]
  004a3	a5		 movsd
  004a4	a5		 movsd

; 231  : 		m_vWeaponMoveInfo.m_fMoveSpeed = fCurWeaponMoveSpeed;

  004a5	f3 0f 11 83 98
	14 00 00	 movss	 DWORD PTR [ebx+5272], xmm0

; 232  : 		m_vWeaponMoveInfo.m_fFloatPower = fCurWeaponFloatPower;

  004ad	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _fCurWeaponFloatPower$[ebp]
  004b2	a5		 movsd
  004b3	f3 0f 11 83 9c
	14 00 00	 movss	 DWORD PTR [ebx+5276], xmm0
$LN9@CheckWeapo:

; 233  : 	}
; 234  : }

  004bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004be	5f		 pop	 edi
  004bf	5e		 pop	 esi
  004c0	33 cd		 xor	 ecx, ebp
  004c2	5b		 pop	 ebx
  004c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c8	c9		 leave
  004c9	c3		 ret	 0
?CheckWeaponFloatInfo@ioNoneTraceDummy2@@IAEXXZ ENDP	; ioNoneTraceDummy2::CheckWeaponFloatInfo
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 370  : 		++(*(_Mybase *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 		return (*this);
; 372  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator!=
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ; ioINILoader::LoadFloat_e<20>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<20>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadFloat_
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadFloat_
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadFloat_
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadFloat_
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadFloat_
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadFloat_
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadFloat_
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadFloat_
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadFloat_
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN73@LoadFloat_:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadFloat_:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadFloat_:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadFloat_
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadFloat_:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00238	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0023d	51		 push	 ecx
  0023e	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	50		 push	 eax
  00247	8b ce		 mov	 ecx, esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0024f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	5e		 pop	 esi
  00253	33 cd		 xor	 ecx, ebp
  00255	5b		 pop	 ebx
  00256	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025b	c9		 leave
  0025c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ; ioINILoader::LoadFloat_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<19>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadFloat_@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadFloat_@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadFloat_@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadFloat_@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadFloat_@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadFloat_@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadFloat_@2
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadFloat_@2
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadFloat_@2
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@2
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadFloat_@2
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadFloat_@2
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadFloat_@2
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadFloat_@2
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadFloat_@2:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadFloat_@2:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadFloat_@2:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00229	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0022e	51		 push	 ecx
  0022f	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	50		 push	 eax
  00238	8b ce		 mov	 ecx, esi
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00240	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	5e		 pop	 esi
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	c9		 leave
  0024c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ; ioINILoader::LoadFloat_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<23>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadFloat_@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadFloat_@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadFloat_@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadFloat_@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadFloat_@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadFloat_@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadFloat_@3
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadFloat_@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadFloat_@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadFloat_@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadFloat_@3
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadFloat_@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadFloat_@3
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadFloat_@3
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadFloat_@3
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadFloat_@3
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadFloat_@3
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadFloat_@3
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadFloat_@3
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN70@LoadFloat_@3:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN71@LoadFloat_@3:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN72@LoadFloat_@3:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadFloat_@3:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadFloat_@3:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadFloat_@3:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  00288	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0028d	51		 push	 ecx
  0028e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	50		 push	 eax
  00297	8b ce		 mov	 ecx, esi
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0029f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a2	5e		 pop	 esi
  002a3	33 cd		 xor	 ecx, ebp
  002a5	5b		 pop	 ebx
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	c9		 leave
  002ac	c2 08 00	 ret	 8
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_@4
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_@4
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_@4
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_@4
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_@4
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_@4
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_@4
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_@4
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_@4
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_@4
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_@4
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_@4
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_@4
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_@4:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ; ioINILoader::LoadFloat_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<21>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadFloat_@5
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadFloat_@5
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadFloat_@5
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadFloat_@5
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadFloat_@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadFloat_@5
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadFloat_@5
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadFloat_@5
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadFloat_@5
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadFloat_@5
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadFloat_@5
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadFloat_@5
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadFloat_@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadFloat_@5
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadFloat_@5
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadFloat_@5
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadFloat_@5
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadFloat_@5
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadFloat_@5
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadFloat_@5
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadFloat_@5
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadFloat_@5
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadFloat_@5
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadFloat_@5
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadFloat_@5
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN72@LoadFloat_@5:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN73@LoadFloat_@5:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadFloat_@5
$LN74@LoadFloat_@5:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadFloat_@5
$LN75@LoadFloat_@5:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN77@LoadFloat_@5:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadFloat_@5
$LN78@LoadFloat_@5:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadFloat_@5
$LN79@LoadFloat_@5:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN80@LoadFloat_@5:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadFloat_@5
$LN81@LoadFloat_@5:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadFloat_@5
$LN82@LoadFloat_@5:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@5
$LN83@LoadFloat_@5:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadFloat_@5
$LN84@LoadFloat_@5:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadFloat_@5
$LN85@LoadFloat_@5:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN86@LoadFloat_@5:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadFloat_@5
$LN87@LoadFloat_@5:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadFloat_@5
$LN88@LoadFloat_@5:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN89@LoadFloat_@5:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadFloat_@5
$LN90@LoadFloat_@5:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadFloat_@5
$LN91@LoadFloat_@5:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN92@LoadFloat_@5:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadFloat_@5
$LN93@LoadFloat_@5:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadFloat_@5
$LN94@LoadFloat_@5:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@5
$LN95@LoadFloat_@5:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadFloat_@5
$LN96@LoadFloat_@5:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@5:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadFloat_@5:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadFloat_@5

; 137  : 		return LoadFloat(_k, f);

  00232	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00237	51		 push	 ecx
  00238	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	50		 push	 eax
  00241	8b ce		 mov	 ecx, esi
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00249	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024c	5e		 pop	 esi
  0024d	33 cd		 xor	 ecx, ebp
  0024f	5b		 pop	 ebx
  00250	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00255	c9		 leave
  00256	c2 08 00	 ret	 8
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ; ioINILoader::LoadFloat_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<16>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadFloat_@6
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadFloat_@6
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadFloat_@6
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadFloat_@6
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadFloat_@6
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadFloat_@6
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadFloat_@6
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadFloat_@6
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadFloat_@6
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadFloat_@6
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadFloat_@6
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadFloat_@6
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadFloat_@6
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadFloat_@6
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadFloat_@6
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadFloat_@6
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadFloat_@6
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadFloat_@6
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadFloat_@6
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadFloat_@6
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN77@LoadFloat_@6:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadFloat_@6
$LN78@LoadFloat_@6:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadFloat_@6
$LN79@LoadFloat_@6:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@6
$LN80@LoadFloat_@6:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadFloat_@6
$LN82@LoadFloat_@6:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadFloat_@6
$LN83@LoadFloat_@6:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@6
$LN84@LoadFloat_@6:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadFloat_@6
$LN85@LoadFloat_@6:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN86@LoadFloat_@6:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadFloat_@6
$LN87@LoadFloat_@6:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadFloat_@6
$LN88@LoadFloat_@6:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@6
$LN89@LoadFloat_@6:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadFloat_@6
$LN90@LoadFloat_@6:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadFloat_@6
$LN91@LoadFloat_@6:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN92@LoadFloat_@6:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadFloat_@6
$LN93@LoadFloat_@6:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadFloat_@6
$LN94@LoadFloat_@6:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@6
$LN95@LoadFloat_@6:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadFloat_@6
$LN96@LoadFloat_@6:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@6:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadFloat_@6:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadFloat_@6
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadFloat_@6:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadFloat_@6
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadFloat_@6:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadFloat_@6

; 137  : 		return LoadFloat(_k, f);

  001e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001eb	51		 push	 ecx
  001ec	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	50		 push	 eax
  001f5	8b ce		 mov	 ecx, esi
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	5e		 pop	 esi
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	c9		 leave
  00209	c2 08 00	 ret	 8
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_@7
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_@7
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_@7
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_@7
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_@7
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_@7
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_@7
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_@7
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_@7
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_@7
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_@7
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_@7
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_@7
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_@7
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_@7
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_@7
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_@7
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_@7
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_@7
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_@7
$LN78@LoadFloat_@7:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_@7
$LN79@LoadFloat_@7:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@7
$LN80@LoadFloat_@7:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_@7
$LN81@LoadFloat_@7:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@7
$LN83@LoadFloat_@7:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@7
$LN84@LoadFloat_@7:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_@7
$LN85@LoadFloat_@7:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@7
$LN86@LoadFloat_@7:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_@7
$LN87@LoadFloat_@7:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_@7
$LN88@LoadFloat_@7:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@7
$LN89@LoadFloat_@7:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_@7
$LN90@LoadFloat_@7:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_@7
$LN91@LoadFloat_@7:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@7
$LN92@LoadFloat_@7:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_@7
$LN93@LoadFloat_@7:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_@7
$LN94@LoadFloat_@7:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@7
$LN95@LoadFloat_@7:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_@7
$LN96@LoadFloat_@7:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@7:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_@7:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_@7
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_@7:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_@7
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_@7:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_@7

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ; ioINILoader::LoadFloat_e<18>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<18>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadFloat_@8
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadFloat_@8
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadFloat_@8
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadFloat_@8
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadFloat_@8
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadFloat_@8
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadFloat_@8
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadFloat_@8
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadFloat_@8
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadFloat_@8
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadFloat_@8
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadFloat_@8
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadFloat_@8
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadFloat_@8
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadFloat_@8
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadFloat_@8
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadFloat_@8
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadFloat_@8
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadFloat_@8
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadFloat_@8
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadFloat_@8
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadFloat_@8
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadFloat_@8
$LN75@LoadFloat_@8:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadFloat_@8
$LN76@LoadFloat_@8:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@8
$LN77@LoadFloat_@8:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadFloat_@8
$LN78@LoadFloat_@8:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadFloat_@8
$LN80@LoadFloat_@8:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@8
$LN81@LoadFloat_@8:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadFloat_@8
$LN82@LoadFloat_@8:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadFloat_@8
$LN83@LoadFloat_@8:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@8
$LN84@LoadFloat_@8:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadFloat_@8
$LN85@LoadFloat_@8:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@8
$LN86@LoadFloat_@8:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadFloat_@8
$LN87@LoadFloat_@8:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadFloat_@8
$LN88@LoadFloat_@8:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@8
$LN89@LoadFloat_@8:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadFloat_@8
$LN90@LoadFloat_@8:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadFloat_@8
$LN91@LoadFloat_@8:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@8
$LN92@LoadFloat_@8:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadFloat_@8
$LN93@LoadFloat_@8:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@8
$LN94@LoadFloat_@8:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@8
$LN95@LoadFloat_@8:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@8
$LN96@LoadFloat_@8:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@8:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadFloat_@8:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadFloat_@8

; 137  : 		return LoadFloat(_k, f);

  001f8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001fd	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00201	51		 push	 ecx
  00202	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	50		 push	 eax
  0020b	8b ce		 mov	 ecx, esi
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00213	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00216	33 cd		 xor	 ecx, ebp
  00218	5e		 pop	 esi
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	c9		 leave
  0021f	c2 08 00	 ret	 8
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<19>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<19>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadInt_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadInt_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadInt_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadInt_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadInt_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadInt_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadInt_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadInt_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadInt_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadInt_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadInt_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadInt_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00229	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<19>
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::~_Node
; Function compile flags: /Ogsp
;	COMDAT ??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
_TEXT	ENDS
PUBLIC	__real@41f00000
PUBLIC	__real@3f800000
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z:PROC ; ioDummyChar::LoadProperty
;	COMDAT __real@41f00000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iononetracedummy2.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioNoneTraceDummy2@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$534330 = -32					; size = 21
__k$534270 = -32					; size = 20
__k$533955 = -32					; size = 23
__k$533770 = -32					; size = 20
__k$535080 = -28					; size = 19
__k$535046 = -28					; size = 18
__k$534830 = -28					; size = 19
__k$534705 = -28					; size = 19
__k$534455 = -28					; size = 16
__k$534080 = -28					; size = 17
__k$533830 = -28					; size = 19
__k$534593 = -24					; size = 15
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioNoneTraceDummy2@@UAEXAAVioINILoader@@@Z PROC ; ioNoneTraceDummy2::LoadProperty, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 21   : 	ioDummyChar::LoadProperty( rkLoader );

  00016	57		 push	 edi
  00017	8b f1		 mov	 esi, ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z ; ioDummyChar::LoadProperty

; 22   : 
; 23   : 	// Weapon
; 24   : 	m_fWeaponGravityRate = rkLoader.LoadFloat_e( "weapon_gravity_rate", 1.0f );

  0001e	6a 04		 push	 4
  00020	c7 45 e0 9a 89
	8a 9a		 mov	 DWORD PTR __k$533770[ebp], -1702196838 ; 9a8a899aH
  00027	c7 45 e4 82 82
	b4 8d		 mov	 DWORD PTR __k$533770[ebp+4], -1917549950 ; 8db48282H
  0002e	c7 45 e8 9f 8d
	9d 83		 mov	 DWORD PTR __k$533770[ebp+8], -2086826593 ; 839d8d9fH
  00035	c7 45 ec 99 95
	b4 98		 mov	 DWORD PTR __k$533770[ebp+12], -1732995687 ; 98b49599H
  0003c	8d 45 e0	 lea	 eax, DWORD PTR __k$533770[ebp]
  0003f	33 db		 xor	 ebx, ebx
  00041	c7 45 f0 8c 98
	8e 00		 mov	 DWORD PTR __k$533770[ebp+16], 9345164 ; 008e988cH
  00048	59		 pop	 ecx
$LL106@LoadProper:
  00049	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004f	83 c0 04	 add	 eax, 4
  00052	49		 dec	 ecx
  00053	75 f4		 jne	 SHORT $LL106@LoadProper
  00055	6a 10		 push	 16			; 00000010H
  00057	58		 pop	 eax
$LL103@LoadProper:
  00058	8b c8		 mov	 ecx, eax
  0005a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00060	79 05		 jns	 SHORT $LN1323@LoadProper
  00062	49		 dec	 ecx
  00063	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00066	41		 inc	 ecx
$LN1323@LoadProper:
  00067	b2 ed		 mov	 dl, -19			; ffffffedH
  00069	2a d1		 sub	 dl, cl
  0006b	30 54 05 e0	 xor	 BYTE PTR __k$533770[ebp+eax], dl
  0006f	40		 inc	 eax
  00070	83 f8 13	 cmp	 eax, 19			; 00000013H
  00073	7c e3		 jl	 SHORT $LL103@LoadProper
  00075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0007d	51		 push	 ecx
  0007e	8d 45 e0	 lea	 eax, DWORD PTR __k$533770[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	50		 push	 eax
  00087	8b cf		 mov	 ecx, edi
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0008f	d9 9e a0 14 00
	00		 fstp	 DWORD PTR [esi+5280]
  00095	6a 04		 push	 4

; 25   : 	m_fWeaponFloatPower = rkLoader.LoadFloat_e( "weapon_float_power", 0.0f );

  00097	c7 45 e4 9a 89
	8a 9a		 mov	 DWORD PTR __k$533830[ebp], -1702196838 ; 9a8a899aH
  0009e	c7 45 e8 82 82
	b4 8c		 mov	 DWORD PTR __k$533830[ebp+4], -1934327166 ; 8cb48282H
  000a5	c7 45 ec 81 83
	8a 9e		 mov	 DWORD PTR __k$533830[ebp+8], -1635089535 ; 9e8a8381H
  000ac	c7 45 f0 b2 9c
	84 9d		 mov	 DWORD PTR __k$533830[ebp+12], -1652253518 ; 9d849cb2H
  000b3	66 c7 45 f4 88
	9e		 mov	 WORD PTR __k$533830[ebp+16], 40584 ; 00009e88H
  000b9	8d 45 e4	 lea	 eax, DWORD PTR __k$533830[ebp]
  000bc	88 5d f6	 mov	 BYTE PTR __k$533830[ebp+18], bl
  000bf	59		 pop	 ecx
$LL212@LoadProper:
  000c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c6	83 c0 04	 add	 eax, 4
  000c9	49		 dec	 ecx
  000ca	75 f4		 jne	 SHORT $LL212@LoadProper
  000cc	6a 10		 push	 16			; 00000010H
  000ce	58		 pop	 eax
$LL209@LoadProper:
  000cf	8b c8		 mov	 ecx, eax
  000d1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d7	79 05		 jns	 SHORT $LN1324@LoadProper
  000d9	49		 dec	 ecx
  000da	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000dd	41		 inc	 ecx
$LN1324@LoadProper:
  000de	b2 ed		 mov	 dl, -19			; ffffffedH
  000e0	2a d1		 sub	 dl, cl
  000e2	30 54 05 e4	 xor	 BYTE PTR __k$533830[ebp+eax], dl
  000e6	40		 inc	 eax
  000e7	83 f8 12	 cmp	 eax, 18			; 00000012H
  000ea	7c e3		 jl	 SHORT $LL209@LoadProper
  000ec	0f 57 c0	 xorps	 xmm0, xmm0
  000ef	51		 push	 ecx
  000f0	8d 45 e4	 lea	 eax, DWORD PTR __k$533830[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	50		 push	 eax
  000f9	8b cf		 mov	 ecx, edi
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00101	d9 9e a4 14 00
	00		 fstp	 DWORD PTR [esi+5284]
  00107	6a 05		 push	 5

; 26   : 	m_fWeaponFloatMinPower = rkLoader.LoadFloat_e( "weapon_float_min_power", 0.0f );

  00109	c7 45 e0 9a 89
	8a 9a		 mov	 DWORD PTR __k$533955[ebp], -1702196838 ; 9a8a899aH
  00110	c7 45 e4 82 82
	b4 8c		 mov	 DWORD PTR __k$533955[ebp+4], -1934327166 ; 8cb48282H
  00117	c7 45 e8 81 83
	8a 9e		 mov	 DWORD PTR __k$533955[ebp+8], -1635089535 ; 9e8a8381H
  0011e	c7 45 ec b2 81
	82 84		 mov	 DWORD PTR __k$533955[ebp+12], -2071821902 ; 848281b2H
  00125	c7 45 f0 b2 9c
	84 9d		 mov	 DWORD PTR __k$533955[ebp+16], -1652253518 ; 9d849cb2H
  0012c	66 c7 45 f4 88
	9e		 mov	 WORD PTR __k$533955[ebp+20], 40584 ; 00009e88H
  00132	8d 45 e0	 lea	 eax, DWORD PTR __k$533955[ebp]
  00135	88 5d f6	 mov	 BYTE PTR __k$533955[ebp+22], bl
  00138	59		 pop	 ecx
$LL318@LoadProper:
  00139	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013f	83 c0 04	 add	 eax, 4
  00142	49		 dec	 ecx
  00143	75 f4		 jne	 SHORT $LL318@LoadProper
  00145	6a 14		 push	 20			; 00000014H
  00147	58		 pop	 eax
$LL315@LoadProper:
  00148	8b c8		 mov	 ecx, eax
  0014a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00150	79 05		 jns	 SHORT $LN1325@LoadProper
  00152	49		 dec	 ecx
  00153	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00156	41		 inc	 ecx
$LN1325@LoadProper:
  00157	b2 ed		 mov	 dl, -19			; ffffffedH
  00159	2a d1		 sub	 dl, cl
  0015b	30 54 05 e0	 xor	 BYTE PTR __k$533955[ebp+eax], dl
  0015f	40		 inc	 eax
  00160	83 f8 16	 cmp	 eax, 22			; 00000016H
  00163	7c e3		 jl	 SHORT $LL315@LoadProper
  00165	0f 57 c0	 xorps	 xmm0, xmm0
  00168	51		 push	 ecx
  00169	8d 45 e0	 lea	 eax, DWORD PTR __k$533955[ebp]
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	50		 push	 eax
  00172	8b cf		 mov	 ecx, edi
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0017a	d9 9e a8 14 00
	00		 fstp	 DWORD PTR [esi+5288]
  00180	6a 04		 push	 4

; 27   : 	m_fWeaponMinSpeed = rkLoader.LoadFloat_e( "weapon_min_speed", 0.0f );

  00182	c7 45 e4 9a 89
	8a 9a		 mov	 DWORD PTR __k$534080[ebp], -1702196838 ; 9a8a899aH
  00189	c7 45 e8 82 82
	b4 87		 mov	 DWORD PTR __k$534080[ebp+4], -2018213246 ; 87b48282H
  00190	c7 45 ec 84 82
	b4 99		 mov	 DWORD PTR __k$534080[ebp+8], -1716223356 ; 99b48284H
  00197	c7 45 f0 9d 89
	8e 8e		 mov	 DWORD PTR __k$534080[ebp+12], -1903261283 ; 8e8e899dH
  0019e	8d 45 e4	 lea	 eax, DWORD PTR __k$534080[ebp]
  001a1	88 5d f4	 mov	 BYTE PTR __k$534080[ebp+16], bl
  001a4	59		 pop	 ecx
$LL424@LoadProper:
  001a5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ab	83 c0 04	 add	 eax, 4
  001ae	49		 dec	 ecx
  001af	75 f4		 jne	 SHORT $LL424@LoadProper
  001b1	0f 57 c0	 xorps	 xmm0, xmm0
  001b4	51		 push	 ecx
  001b5	8d 45 e4	 lea	 eax, DWORD PTR __k$534080[ebp]
  001b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bd	50		 push	 eax
  001be	8b cf		 mov	 ecx, edi
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001c6	d9 9e ac 14 00
	00		 fstp	 DWORD PTR [esi+5292]
  001cc	6a 04		 push	 4

; 28   : 	m_fWeaponGapDistance = rkLoader.LoadFloat_e( "weapon_gap_distance", 0.0f );

  001ce	c7 45 e0 9a 89
	8a 9a		 mov	 DWORD PTR __k$534270[ebp], -1702196838 ; 9a8a899aH
  001d5	c7 45 e4 82 82
	b4 8d		 mov	 DWORD PTR __k$534270[ebp+4], -1917549950 ; 8db48282H
  001dc	c7 45 e8 8c 9c
	b4 8e		 mov	 DWORD PTR __k$534270[ebp+8], -1900766068 ; 8eb49c8cH
  001e3	c7 45 ec 84 9f
	9f 8b		 mov	 DWORD PTR __k$534270[ebp+12], -1952473212 ; 8b9f9f84H
  001ea	8d 45 e0	 lea	 eax, DWORD PTR __k$534270[ebp]
  001ed	c7 45 f0 83 8f
	8e 00		 mov	 DWORD PTR __k$534270[ebp+16], 9342851 ; 008e8f83H
  001f4	59		 pop	 ecx
$LL530@LoadProper:
  001f5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fb	83 c0 04	 add	 eax, 4
  001fe	49		 dec	 ecx
  001ff	75 f4		 jne	 SHORT $LL530@LoadProper
  00201	6a 10		 push	 16			; 00000010H
  00203	58		 pop	 eax
$LL527@LoadProper:
  00204	8b c8		 mov	 ecx, eax
  00206	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0020c	79 05		 jns	 SHORT $LN1326@LoadProper
  0020e	49		 dec	 ecx
  0020f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00212	41		 inc	 ecx
$LN1326@LoadProper:
  00213	b2 ed		 mov	 dl, -19			; ffffffedH
  00215	2a d1		 sub	 dl, cl
  00217	30 54 05 e0	 xor	 BYTE PTR __k$534270[ebp+eax], dl
  0021b	40		 inc	 eax
  0021c	83 f8 13	 cmp	 eax, 19			; 00000013H
  0021f	7c e3		 jl	 SHORT $LL527@LoadProper
  00221	0f 57 c0	 xorps	 xmm0, xmm0
  00224	51		 push	 ecx
  00225	8d 45 e0	 lea	 eax, DWORD PTR __k$534270[ebp]
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	50		 push	 eax
  0022e	8b cf		 mov	 ecx, edi
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00236	d9 9e b0 14 00
	00		 fstp	 DWORD PTR [esi+5296]
  0023c	6a 05		 push	 5

; 29   : 	m_fRevisionRate = rkLoader.LoadFloat_e( "weapon_revision_rate", 0.0f );

  0023e	c7 45 e0 9a 89
	8a 9a		 mov	 DWORD PTR __k$534330[ebp], -1702196838 ; 9a8a899aH
  00245	c7 45 e4 82 82
	b4 98		 mov	 DWORD PTR __k$534330[ebp+4], -1733000574 ; 98b48282H
  0024c	c7 45 e8 88 9a
	82 99		 mov	 DWORD PTR __k$534330[ebp+8], -1719494008 ; 99829a88H
  00253	c7 45 ec 84 83
	85 b5		 mov	 DWORD PTR __k$534330[ebp+12], -1249541244 ; b5858384H
  0025a	c7 45 f0 9f 8d
	9f 8f		 mov	 DWORD PTR __k$534330[ebp+16], -1885368929 ; 8f9f8d9fH
  00261	8d 45 e0	 lea	 eax, DWORD PTR __k$534330[ebp]
  00264	88 5d f4	 mov	 BYTE PTR __k$534330[ebp+20], bl
  00267	59		 pop	 ecx
$LL636@LoadProper:
  00268	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0026e	83 c0 04	 add	 eax, 4
  00271	49		 dec	 ecx
  00272	75 f4		 jne	 SHORT $LL636@LoadProper
  00274	0f 57 c0	 xorps	 xmm0, xmm0
  00277	51		 push	 ecx
  00278	8d 45 e0	 lea	 eax, DWORD PTR __k$534330[ebp]
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	50		 push	 eax
  00281	8b cf		 mov	 ecx, edi
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00289	d9 9e b4 14 00
	00		 fstp	 DWORD PTR [esi+5300]
  0028f	6a 03		 push	 3

; 30   : 
; 31   : 	m_fUpLimitHeight = rkLoader.LoadFloat_e( "up_limit_height", 30.0f );

  00291	c7 45 e4 98 9c
	b4 86		 mov	 DWORD PTR __k$534455[ebp], -2034983784 ; 86b49c98H
  00298	c7 45 e8 84 81
	82 9e		 mov	 DWORD PTR __k$534455[ebp+4], -1635614332 ; 9e828184H
  0029f	c7 45 ec b2 84
	8e 83		 mov	 DWORD PTR __k$534455[ebp+8], -2087811918 ; 838e84b2H
  002a6	8d 45 e4	 lea	 eax, DWORD PTR __k$534455[ebp]
  002a9	c7 45 f0 8a 84
	9f 00		 mov	 DWORD PTR __k$534455[ebp+12], 10454154 ; 009f848aH
  002b0	59		 pop	 ecx
$LL742@LoadProper:
  002b1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002b7	83 c0 04	 add	 eax, 4
  002ba	49		 dec	 ecx
  002bb	75 f4		 jne	 SHORT $LL742@LoadProper
  002bd	6a 0c		 push	 12			; 0000000cH
  002bf	58		 pop	 eax
$LL739@LoadProper:
  002c0	8b c8		 mov	 ecx, eax
  002c2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002c8	79 05		 jns	 SHORT $LN1327@LoadProper
  002ca	49		 dec	 ecx
  002cb	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002ce	41		 inc	 ecx
$LN1327@LoadProper:
  002cf	b2 ed		 mov	 dl, -19			; ffffffedH
  002d1	2a d1		 sub	 dl, cl
  002d3	30 54 05 e4	 xor	 BYTE PTR __k$534455[ebp+eax], dl
  002d7	40		 inc	 eax
  002d8	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  002db	7c e3		 jl	 SHORT $LL739@LoadProper
  002dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41f00000
  002e5	51		 push	 ecx
  002e6	8d 45 e4	 lea	 eax, DWORD PTR __k$534455[ebp]
  002e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ee	50		 push	 eax
  002ef	8b cf		 mov	 ecx, edi
  002f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002f7	d9 9e bc 14 00
	00		 fstp	 DWORD PTR [esi+5308]
  002fd	6a 03		 push	 3

; 32   : 	m_fUpLimitRange = rkLoader.LoadFloat_e( "up_limit_range", 0.0f );

  002ff	c7 45 e8 98 9c
	b4 86		 mov	 DWORD PTR __k$534593[ebp], -2034983784 ; 86b49c98H
  00306	c7 45 ec 84 81
	82 9e		 mov	 DWORD PTR __k$534593[ebp+4], -1635614332 ; 9e828184H
  0030d	c7 45 f0 b2 9e
	8a 84		 mov	 DWORD PTR __k$534593[ebp+8], -2071290190 ; 848a9eb2H
  00314	66 c7 45 f4 8a
	89		 mov	 WORD PTR __k$534593[ebp+12], 35210 ; 0000898aH
  0031a	8d 45 e8	 lea	 eax, DWORD PTR __k$534593[ebp]
  0031d	88 5d f6	 mov	 BYTE PTR __k$534593[ebp+14], bl
  00320	59		 pop	 ecx
$LL848@LoadProper:
  00321	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00327	83 c0 04	 add	 eax, 4
  0032a	49		 dec	 ecx
  0032b	75 f4		 jne	 SHORT $LL848@LoadProper
  0032d	6a 0c		 push	 12			; 0000000cH
  0032f	58		 pop	 eax
$LL845@LoadProper:
  00330	8b c8		 mov	 ecx, eax
  00332	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00338	79 05		 jns	 SHORT $LN1328@LoadProper
  0033a	49		 dec	 ecx
  0033b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0033e	41		 inc	 ecx
$LN1328@LoadProper:
  0033f	b2 ed		 mov	 dl, -19			; ffffffedH
  00341	2a d1		 sub	 dl, cl
  00343	30 54 05 e8	 xor	 BYTE PTR __k$534593[ebp+eax], dl
  00347	40		 inc	 eax
  00348	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0034b	7c e3		 jl	 SHORT $LL845@LoadProper
  0034d	0f 57 c0	 xorps	 xmm0, xmm0
  00350	51		 push	 ecx
  00351	8d 45 e8	 lea	 eax, DWORD PTR __k$534593[ebp]
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	50		 push	 eax
  0035a	8b cf		 mov	 ecx, edi
  0035c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00362	d9 9e b8 14 00
	00		 fstp	 DWORD PTR [esi+5304]
  00368	6a 04		 push	 4

; 33   : 
; 34   : 	m_fCircleRange		= rkLoader.LoadFloat_e( "magic_circle_range", 0.0f );

  0036a	c7 45 e4 80 8d
	8c 83		 mov	 DWORD PTR __k$534705[ebp], -2087940736 ; 838c8d80H
  00371	c7 45 e8 8e b3
	88 83		 mov	 DWORD PTR __k$534705[ebp+4], -2088193138 ; 8388b38eH
  00378	c7 45 ec 9f 8f
	87 8f		 mov	 DWORD PTR __k$534705[ebp+8], -1886941281 ; 8f878f9fH
  0037f	c7 45 f0 b2 9e
	8a 84		 mov	 DWORD PTR __k$534705[ebp+12], -2071290190 ; 848a9eb2H
  00386	66 c7 45 f4 8a
	89		 mov	 WORD PTR __k$534705[ebp+16], 35210 ; 0000898aH
  0038c	8d 45 e4	 lea	 eax, DWORD PTR __k$534705[ebp]
  0038f	88 5d f6	 mov	 BYTE PTR __k$534705[ebp+18], bl
  00392	59		 pop	 ecx
$LL954@LoadProper:
  00393	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00399	83 c0 04	 add	 eax, 4
  0039c	49		 dec	 ecx
  0039d	75 f4		 jne	 SHORT $LL954@LoadProper
  0039f	6a 10		 push	 16			; 00000010H
  003a1	58		 pop	 eax
$LL951@LoadProper:
  003a2	8b c8		 mov	 ecx, eax
  003a4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003aa	79 05		 jns	 SHORT $LN1329@LoadProper
  003ac	49		 dec	 ecx
  003ad	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003b0	41		 inc	 ecx
$LN1329@LoadProper:
  003b1	b2 ed		 mov	 dl, -19			; ffffffedH
  003b3	2a d1		 sub	 dl, cl
  003b5	30 54 05 e4	 xor	 BYTE PTR __k$534705[ebp+eax], dl
  003b9	40		 inc	 eax
  003ba	83 f8 12	 cmp	 eax, 18			; 00000012H
  003bd	7c e3		 jl	 SHORT $LL951@LoadProper
  003bf	0f 57 c0	 xorps	 xmm0, xmm0
  003c2	51		 push	 ecx
  003c3	8d 45 e4	 lea	 eax, DWORD PTR __k$534705[ebp]
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	50		 push	 eax
  003cc	8b cf		 mov	 ecx, edi
  003ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  003d4	d9 9e c0 14 00
	00		 fstp	 DWORD PTR [esi+5312]
  003da	6a 04		 push	 4

; 35   : 
; 36   : 	m_fFireHightOffset	= rkLoader.LoadFloat_e( "fire_height_offset", 0.0f );

  003dc	c7 45 e4 8b 85
	99 8f		 mov	 DWORD PTR __k$534830[ebp], -1885764213 ; 8f99858bH
  003e3	c7 45 e8 b2 84
	8e 83		 mov	 DWORD PTR __k$534830[ebp+4], -2087811918 ; 838e84b2H
  003ea	c7 45 ec 8a 84
	9f b5		 mov	 DWORD PTR __k$534830[ebp+8], -1247837046 ; b59f848aH
  003f1	c7 45 f0 82 8a
	8d 99		 mov	 DWORD PTR __k$534830[ebp+12], -1718777214 ; 998d8a82H
  003f8	66 c7 45 f4 88
	98		 mov	 WORD PTR __k$534830[ebp+16], 39048 ; 00009888H
  003fe	8d 45 e4	 lea	 eax, DWORD PTR __k$534830[ebp]
  00401	88 5d f6	 mov	 BYTE PTR __k$534830[ebp+18], bl
  00404	59		 pop	 ecx
$LL1060@LoadProper:
  00405	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0040b	83 c0 04	 add	 eax, 4
  0040e	49		 dec	 ecx
  0040f	75 f4		 jne	 SHORT $LL1060@LoadProper
  00411	6a 10		 push	 16			; 00000010H
  00413	58		 pop	 eax
$LL1057@LoadProper:
  00414	8b c8		 mov	 ecx, eax
  00416	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0041c	79 05		 jns	 SHORT $LN1330@LoadProper
  0041e	49		 dec	 ecx
  0041f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00422	41		 inc	 ecx
$LN1330@LoadProper:
  00423	b2 ed		 mov	 dl, -19			; ffffffedH
  00425	2a d1		 sub	 dl, cl
  00427	30 54 05 e4	 xor	 BYTE PTR __k$534830[ebp+eax], dl
  0042b	40		 inc	 eax
  0042c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0042f	7c e3		 jl	 SHORT $LL1057@LoadProper
  00431	0f 57 c0	 xorps	 xmm0, xmm0
  00434	51		 push	 ecx
  00435	8d 45 e4	 lea	 eax, DWORD PTR __k$534830[ebp]
  00438	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043d	50		 push	 eax
  0043e	8b cf		 mov	 ecx, edi
  00440	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00446	d9 9e c4 14 00
	00		 fstp	 DWORD PTR [esi+5316]
  0044c	6a 04		 push	 4

; 37   : 	m_fFireFrontOffset	= rkLoader.LoadFloat_e( "fire_front_offset", 0.0f );

  0044e	c7 45 e4 8b 85
	99 8f		 mov	 DWORD PTR __k$535046[ebp], -1885764213 ; 8f99858bH
  00455	c7 45 e8 b2 8a
	99 85		 mov	 DWORD PTR __k$535046[ebp+4], -2053535054 ; 85998ab2H
  0045c	c7 45 ec 83 98
	b4 85		 mov	 DWORD PTR __k$535046[ebp+8], -2051762045 ; 85b49883H
  00463	c7 45 f0 8b 8a
	98 8f		 mov	 DWORD PTR __k$535046[ebp+12], -1885828469 ; 8f988a8bH
  0046a	8d 45 e4	 lea	 eax, DWORD PTR __k$535046[ebp]
  0046d	66 c7 45 f4 99
	00		 mov	 WORD PTR __k$535046[ebp+16], 153 ; 00000099H
  00473	59		 pop	 ecx
$LL1166@LoadProper:
  00474	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0047a	83 c0 04	 add	 eax, 4
  0047d	49		 dec	 ecx
  0047e	75 f4		 jne	 SHORT $LL1166@LoadProper
  00480	0f 57 c0	 xorps	 xmm0, xmm0
  00483	80 75 f4 ed	 xor	 BYTE PTR __k$535046[ebp+16], -19 ; ffffffedH
  00487	51		 push	 ecx
  00488	8d 45 e4	 lea	 eax, DWORD PTR __k$535046[ebp]
  0048b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00490	50		 push	 eax
  00491	8b cf		 mov	 ecx, edi
  00493	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00499	d9 9e c8 14 00
	00		 fstp	 DWORD PTR [esi+5320]
  0049f	6a 04		 push	 4

; 38   : 
; 39   : 	m_iNormalAttackCode = rkLoader.LoadInt_e( "normal_attack_code", 0 );

  004a1	c7 45 e4 83 83
	99 87		 mov	 DWORD PTR __k$535080[ebp], -2019982461 ; 87998383H
  004a8	c7 45 e8 8c 80
	b4 8b		 mov	 DWORD PTR __k$535080[ebp+4], -1951104884 ; 8bb4808cH
  004af	c7 45 ec 99 98
	8a 89		 mov	 DWORD PTR __k$535080[ebp+8], -1987405671 ; 898a9899H
  004b6	c7 45 f0 86 b3
	88 85		 mov	 DWORD PTR __k$535080[ebp+12], -2054638714 ; 8588b386H
  004bd	66 c7 45 f4 89
	89		 mov	 WORD PTR __k$535080[ebp+16], 35209 ; 00008989H
  004c3	8d 45 e4	 lea	 eax, DWORD PTR __k$535080[ebp]
  004c6	88 5d f6	 mov	 BYTE PTR __k$535080[ebp+18], bl
  004c9	59		 pop	 ecx
$LL1272@LoadProper:
  004ca	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004d0	83 c0 04	 add	 eax, 4
  004d3	49		 dec	 ecx
  004d4	75 f4		 jne	 SHORT $LL1272@LoadProper
  004d6	6a 10		 push	 16			; 00000010H
  004d8	58		 pop	 eax
$LL1269@LoadProper:
  004d9	8b c8		 mov	 ecx, eax
  004db	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004e1	79 05		 jns	 SHORT $LN1331@LoadProper
  004e3	49		 dec	 ecx
  004e4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004e7	41		 inc	 ecx
$LN1331@LoadProper:
  004e8	b2 ed		 mov	 dl, -19			; ffffffedH
  004ea	2a d1		 sub	 dl, cl
  004ec	30 54 05 e4	 xor	 BYTE PTR __k$535080[ebp+eax], dl
  004f0	40		 inc	 eax
  004f1	83 f8 12	 cmp	 eax, 18			; 00000012H
  004f4	7c e3		 jl	 SHORT $LL1269@LoadProper
  004f6	53		 push	 ebx
  004f7	8d 45 e4	 lea	 eax, DWORD PTR __k$535080[ebp]
  004fa	50		 push	 eax
  004fb	8b cf		 mov	 ecx, edi
  004fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 40   : }

  00503	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00506	5f		 pop	 edi
  00507	89 86 cc 14 00
	00		 mov	 DWORD PTR [esi+5324], eax
  0050d	5e		 pop	 esi
  0050e	33 cd		 xor	 ecx, ebp
  00510	5b		 pop	 ebx
  00511	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00516	c9		 leave
  00517	c2 04 00	 ret	 4
?LoadProperty@ioNoneTraceDummy2@@UAEXAAVioINILoader@@@Z ENDP ; ioNoneTraceDummy2::LoadProperty
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ PROC ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*, COMDAT
; _this$ = ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ ENDP ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 07		 je	 SHORT $LN1@scalar@2
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	59		 pop	 ecx
$LN1@scalar@2:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$535292 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$535292[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$535292[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
_TEXT	ENDS
PUBLIC	?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ; std::list<FireTime,std::allocator<FireTime> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ PROC ; std::list<FireTime,std::allocator<FireTime> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ENDP ; std::list<FireTime,std::allocator<FireTime> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ; std::list<FireTime,std::allocator<FireTime> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ PROC ; std::list<FireTime,std::allocator<FireTime> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ENDP ; std::list<FireTime,std::allocator<FireTime> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ; std::list<FireTime,std::allocator<FireTime> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z PROC ; std::list<FireTime,std::allocator<FireTime> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ENDP ; std::list<FireTime,std::allocator<FireTime> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ

; 214  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>,std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>,std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>,std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
_TEXT	ENDS
PUBLIC	?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ; std::list<FireTime,std::allocator<FireTime> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z PROC ; std::list<FireTime,std::allocator<FireTime> >::erase, COMDAT
; _this$ = ecx

; 1054 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1055 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1056 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1057 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1058 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1059 : 		_Orphan_ptr(*this, _Pnode);
; 1060 : 
; 1061 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1062 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 45 0c	 mov	 DWORD PTR __Where$[ebp], eax

; 1063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1064 : 
; 1065 : 		if (_Pnode != this->_Myhead)

  0000f	3b 37		 cmp	 esi, DWORD PTR [edi]
  00011	74 21		 je	 SHORT $LN1@erase

; 1066 : 			{	// not list head, safe to erase
; 1067 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1068 : 				this->_Nextnode(_Pnode);

  00013	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 1069 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1070 : 				this->_Prevnode(_Pnode);

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1071 : 
; 1072 : 			_Dest_val(this->_Alnod, _Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ

; 1073 : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1074 : 
; 1075 : 			--this->_Mysize;

  00030	ff 4f 04	 dec	 DWORD PTR [edi+4]
  00033	59		 pop	 ecx
$LN1@erase:

; 1076 : 			}
; 1077 : 		return (_Make_iter(_Where));

  00034	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0003a	5f		 pop	 edi
  0003b	89 08		 mov	 DWORD PTR [eax], ecx
  0003d	5e		 pop	 esi

; 1078 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ENDP ; std::list<FireTime,std::allocator<FireTime> >::erase
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__real@bf800000
EXTRN	?SetGravityRate@ioFloatThrowWeapon@@QAEXM@Z:PROC ; ioFloatThrowWeapon::SetGravityRate
EXTRN	?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z:PROC ; ioZoneEffectWeapon::SetZoneValue
EXTRN	?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z:PROC ; ioZoneEffectWeapon::SetCollisionDir
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ:PROC ; ioDummyChar::GetOwner
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z$0
__ehfuncinfo$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iononetracedummy2.cpp
xdata$x	ENDS
;	COMDAT ?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z
_TEXT	SEGMENT
$T535567 = -112						; size = 16
$T535569 = -96						; size = 4
_pOwner$ = -92						; size = 4
_dwCurTime$ = -88					; size = 4
tv784 = -84						; size = 4
tv780 = -84						; size = 4
tv776 = -84						; size = 4
_iter$ = -80						; size = 4
_vDir$531113 = -76					; size = 12
$T531114 = -64						; size = 12
$T531110 = -52						; size = 12
$T530938 = -52						; size = 12
_vCurDir$ = -40						; size = 12
_vCurPos$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z PROC	; ioNoneTraceDummy2::ProcessAttackState, COMDAT
; _this$ = ecx

; 74   : {

  00000	6a 64		 push	 100			; 00000064H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b d9		 mov	 ebx, ecx

; 75   : 	ioBaseChar *pOwner = GetOwner();

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00013	89 45 a4	 mov	 DWORD PTR _pOwner$[ebp], eax

; 76   : 	if ( !pOwner )

  00016	85 c0		 test	 eax, eax
  00018	0f 84 37 03 00
	00		 je	 $LN2@ProcessAtt

; 77   : 		return;
; 78   : 	DWORD dwCurTime = FRAMEGETTIME();

  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00024	8b c8		 mov	 ecx, eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 79   : 
; 80   : 	D3DXVECTOR3 vCurDir = GetWorldOrientation() * D3DXVECTOR3( 0.0f, 0.0f, -1.0f );

  0002c	0f 57 c0	 xorps	 xmm0, xmm0
  0002f	89 45 a8	 mov	 DWORD PTR _dwCurTime$[ebp], eax
  00032	8d 45 cc	 lea	 eax, DWORD PTR $T530938[ebp]
  00035	f3 0f 11 45 cc	 movss	 DWORD PTR $T530938[ebp], xmm0
  0003a	f3 0f 11 45 d0	 movss	 DWORD PTR $T530938[ebp+4], xmm0
  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00047	50		 push	 eax
  00048	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004a	8b cb		 mov	 ecx, ebx
  0004c	f3 0f 11 45 d4	 movss	 DWORD PTR $T530938[ebp+8], xmm0
  00051	ff 50 74	 call	 DWORD PTR [eax+116]
  00054	50		 push	 eax
  00055	8d 45 d8	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 81   : 	D3DXVec3Normalize( &vCurDir, &vCurDir );

  00062	8d 45 d8	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  00065	50		 push	 eax
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 82   : 
; 83   : 	D3DXVECTOR3 vCurPos = GetWorldPosition();

  0006c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006e	8b cb		 mov	 ecx, ebx
  00070	ff 50 70	 call	 DWORD PTR [eax+112]

; 84   : 	vCurPos.y += m_fFireHightOffset;

  00073	f3 0f 10 83 c4
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5316]

; 85   : 	vCurPos += ( vCurDir * m_fFireFrontOffset );

  0007b	f3 0f 10 5d d8	 movss	 xmm3, DWORD PTR _vCurDir$[ebp]
  00080	8b f0		 mov	 esi, eax
  00082	8d 7d e4	 lea	 edi, DWORD PTR _vCurPos$[ebp]
  00085	a5		 movsd
  00086	a5		 movsd
  00087	a5		 movsd
  00088	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vCurPos$[ebp+4]
  0008d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00090	0f 5a c0	 cvtps2pd xmm0, xmm0
  00093	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00097	0f 57 c9	 xorps	 xmm1, xmm1
  0009a	66 0f 5a c8	 cvtpd2ps xmm1, xmm0
  0009e	f3 0f 10 83 c8
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5320]
  000a6	0f 5a d0	 cvtps2pd xmm2, xmm0
  000a9	0f 5a e0	 cvtps2pd xmm4, xmm0
  000ac	0f 5a db	 cvtps2pd xmm3, xmm3
  000af	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  000b3	f3 0f 10 5d dc	 movss	 xmm3, DWORD PTR _vCurDir$[ebp+4]
  000b8	0f 5a c0	 cvtps2pd xmm0, xmm0
  000bb	0f 5a db	 cvtps2pd xmm3, xmm3
  000be	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  000c2	f3 0f 10 65 e0	 movss	 xmm4, DWORD PTR _vCurDir$[ebp+8]
  000c7	0f 5a e4	 cvtps2pd xmm4, xmm4
  000ca	f2 0f 59 e0	 mulsd	 xmm4, xmm0
  000ce	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  000d2	0f 57 c0	 xorps	 xmm0, xmm0
  000d5	66 0f 5a c4	 cvtpd2ps xmm0, xmm4
  000d9	f3 0f 10 65 e4	 movss	 xmm4, DWORD PTR _vCurPos$[ebp]
  000de	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  000e2	0f 5a e4	 cvtps2pd xmm4, xmm4
  000e5	f2 0f 58 d4	 addsd	 xmm2, xmm4
  000e9	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  000ed	f3 0f 11 55 e4	 movss	 DWORD PTR _vCurPos$[ebp], xmm2
  000f2	0f 5a c9	 cvtps2pd xmm1, xmm1
  000f5	0f 57 d2	 xorps	 xmm2, xmm2
  000f8	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  000fc	f3 0f 5a d3	 cvtss2sd xmm2, xmm3
  00100	f2 0f 58 d1	 addsd	 xmm2, xmm1
  00104	0f 57 c9	 xorps	 xmm1, xmm1
  00107	66 0f 5a ca	 cvtpd2ps xmm1, xmm2
  0010b	f3 0f 11 4d e8	 movss	 DWORD PTR _vCurPos$[ebp+4], xmm1
  00110	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vCurPos$[ebp+8]
  00115	0f 5a c0	 cvtps2pd xmm0, xmm0
  00118	0f 5a c9	 cvtps2pd xmm1, xmm1
  0011b	f2 0f 58 c8	 addsd	 xmm1, xmm0

; 86   : 
; 87   : 	DWORD dwLastFireTime = dwPreTime;
; 88   : 	FireTimeList::iterator iter = m_vAttackFireTimeList.begin();

  0011f	8d bb 78 05 00
	00		 lea	 edi, DWORD PTR [ebx+1400]
  00125	8b 07		 mov	 eax, DWORD PTR [edi]
  00127	0f 57 c0	 xorps	 xmm0, xmm0
  0012a	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0012e	f3 0f 11 45 ec	 movss	 DWORD PTR _vCurPos$[ebp+8], xmm0
  00133	8b 08		 mov	 ecx, DWORD PTR [eax]
  00135	89 4d b0	 mov	 DWORD PTR _iter$[ebp], ecx

; 89   : 	while( iter != m_vAttackFireTimeList.end() )

  00138	3b c8		 cmp	 ecx, eax
  0013a	0f 84 fa 01 00
	00		 je	 $LN12@ProcessAtt
$LN13@ProcessAtt:

; 90   : 	{
; 91   : 		const FireTime &rkFire = *iter;

  00140	8b 4d b0	 mov	 ecx, DWORD PTR _iter$[ebp]
  00143	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]

; 92   : 
; 93   : 		DWORD dwFireTime = rkFire.dwStart;

  00146	8b 06		 mov	 eax, DWORD PTR [esi]

; 94   : 		if( COMPARE( dwFireTime, dwPreTime, dwCurTime ) )

  00148	3b 45 0c	 cmp	 eax, DWORD PTR _dwPreTime$[ebp]
  0014b	0f 82 dc 01 00
	00		 jb	 $LN11@ProcessAtt
  00151	3b 45 a8	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00154	0f 83 d3 01 00
	00		 jae	 $LN11@ProcessAtt

; 95   : 		{
; 96   : 			if( rkFire.iAttributeIdx != NO_WEAPON_ATTRIBUTE )

  0015a	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0015e	0f 84 b1 01 00
	00		 je	 $LN4@ProcessAtt

; 97   : 			{
; 98   : 				ioWeapon *pWeapon = NULL;
; 99   : 				pWeapon = pOwner->ExtendFireExplicit( rkFire, vCurPos, vCurDir, "" );

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00169	8d 4d 90	 lea	 ecx, DWORD PTR $T535567[ebp]
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00172	8b 4d a4	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00175	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00179	8d 45 90	 lea	 eax, DWORD PTR $T535567[ebp]
  0017c	50		 push	 eax
  0017d	8d 45 d8	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  00180	50		 push	 eax
  00181	8d 45 e4	 lea	 eax, DWORD PTR _vCurPos$[ebp]
  00184	50		 push	 eax
  00185	56		 push	 esi
  00186	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  0018b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0018f	8d 4d 90	 lea	 ecx, DWORD PTR $T535567[ebp]
  00192	8b f0		 mov	 esi, eax
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 100  : 
; 101  : 				if( pWeapon )

  0019a	85 f6		 test	 esi, esi
  0019c	0f 84 73 01 00
	00		 je	 $LN4@ProcessAtt

; 102  : 				{
; 103  : 					ioZoneEffectWeapon *pZone = ToZoneEffectWeapon( pWeapon );

  001a2	56		 push	 esi
  001a3	e8 00 00 00 00	 call	 ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
  001a8	8b f8		 mov	 edi, eax
  001aa	59		 pop	 ecx

; 104  : 					if( pZone )

  001ab	85 ff		 test	 edi, edi
  001ad	0f 84 a8 00 00
	00		 je	 $LN8@ProcessAtt

; 105  : 					{
; 106  : 						pZone->SetPosition( GetMidPositionByRate() );

  001b3	b8 05 00 00 00	 mov	 eax, 5
  001b8	8b c8		 mov	 ecx, eax
  001ba	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  001bf	89 4d ac	 mov	 DWORD PTR tv784[ebp], ecx
  001c2	db 45 ac	 fild	 DWORD PTR tv784[ebp]
  001c5	85 c9		 test	 ecx, ecx
  001c7	79 06		 jns	 SHORT $LN79@ProcessAtt
  001c9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN79@ProcessAtt:
  001cf	89 45 ac	 mov	 DWORD PTR tv780[ebp], eax
  001d2	db 45 ac	 fild	 DWORD PTR tv780[ebp]
  001d5	85 c0		 test	 eax, eax
  001d7	79 06		 jns	 SHORT $LN80@ProcessAtt
  001d9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN80@ProcessAtt:
  001df	de f9		 fdivp	 ST(1), ST(0)
  001e1	51		 push	 ecx
  001e2	8d 45 cc	 lea	 eax, DWORD PTR $T531110[ebp]
  001e5	8b cb		 mov	 ecx, ebx
  001e7	d9 5d ac	 fstp	 DWORD PTR tv776[ebp]
  001ea	d9 45 ac	 fld	 DWORD PTR tv776[ebp]
  001ed	d9 1c 24	 fstp	 DWORD PTR [esp]
  001f0	50		 push	 eax
  001f1	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  001f6	50		 push	 eax
  001f7	8b cf		 mov	 ecx, edi
  001f9	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 107  : 						ioBaseChar *pChar = pZone->GetOwner();

  001fe	8b cf		 mov	 ecx, edi
  00200	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner

; 108  : 						if( pChar )

  00205	85 c0		 test	 eax, eax
  00207	0f 84 08 01 00
	00		 je	 $LN4@ProcessAtt

; 109  : 						{
; 110  : 							D3DXVECTOR3 vDir = GetWorldOrientation() * D3DXVECTOR3( 0.0f, 0.0f, -1.0f );

  0020d	0f 57 c0	 xorps	 xmm0, xmm0
  00210	8d 45 c0	 lea	 eax, DWORD PTR $T531114[ebp]
  00213	f3 0f 11 45 c0	 movss	 DWORD PTR $T531114[ebp], xmm0
  00218	f3 0f 11 45 c4	 movss	 DWORD PTR $T531114[ebp+4], xmm0
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00225	50		 push	 eax
  00226	8b 03		 mov	 eax, DWORD PTR [ebx]
  00228	8b cb		 mov	 ecx, ebx
  0022a	f3 0f 11 45 c8	 movss	 DWORD PTR $T531114[ebp+8], xmm0
  0022f	ff 50 74	 call	 DWORD PTR [eax+116]
  00232	50		 push	 eax
  00233	8d 45 b4	 lea	 eax, DWORD PTR _vDir$531113[ebp]
  00236	50		 push	 eax
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0023d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : 							pZone->SetCollisionDir( vDir );

  00240	8d 45 b4	 lea	 eax, DWORD PTR _vDir$531113[ebp]
  00243	50		 push	 eax
  00244	8b cf		 mov	 ecx, edi
  00246	e8 00 00 00 00	 call	 ?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z ; ioZoneEffectWeapon::SetCollisionDir

; 112  : 							pZone->SetZoneValue( true, false );

  0024b	6a 00		 push	 0
  0024d	6a 01		 push	 1
  0024f	8b cf		 mov	 ecx, edi
  00251	e8 00 00 00 00	 call	 ?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z ; ioZoneEffectWeapon::SetZoneValue

; 113  : 						}
; 114  : 					}
; 115  : 					else

  00256	e9 ba 00 00 00	 jmp	 $LN4@ProcessAtt
$LN8@ProcessAtt:

; 116  : 					{
; 117  : 						CheckWeaponFloatInfo();

  0025b	8b cb		 mov	 ecx, ebx
  0025d	e8 00 00 00 00	 call	 ?CheckWeaponFloatInfo@ioNoneTraceDummy2@@IAEXXZ ; ioNoneTraceDummy2::CheckWeaponFloatInfo

; 118  : 						if ( m_vWeaponMoveInfo.m_vMoveDir != ioMath::VEC3_ZERO )

  00262	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  00268	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0026c	8d 93 8c 14 00
	00		 lea	 edx, DWORD PTR [ebx+5260]
  00272	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00276	0f 5a c0	 cvtps2pd xmm0, xmm0
  00279	0f 5a c9	 cvtps2pd xmm1, xmm1
  0027c	66 0f 2e c1	 ucomisd xmm0, xmm1
  00280	9f		 lahf
  00281	f6 c4 44	 test	 ah, 68			; 00000044H
  00284	7a 34		 jp	 SHORT $LN66@ProcessAtt
  00286	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0028b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00290	0f 5a c0	 cvtps2pd xmm0, xmm0
  00293	0f 5a c9	 cvtps2pd xmm1, xmm1
  00296	66 0f 2e c1	 ucomisd xmm0, xmm1
  0029a	9f		 lahf
  0029b	f6 c4 44	 test	 ah, 68			; 00000044H
  0029e	7a 1a		 jp	 SHORT $LN66@ProcessAtt
  002a0	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  002a5	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  002aa	0f 5a c0	 cvtps2pd xmm0, xmm0
  002ad	0f 5a c9	 cvtps2pd xmm1, xmm1
  002b0	66 0f 2e c1	 ucomisd xmm0, xmm1
  002b4	9f		 lahf
  002b5	f6 c4 44	 test	 ah, 68			; 00000044H
  002b8	7b 3b		 jnp	 SHORT $LN5@ProcessAtt
$LN66@ProcessAtt:

; 119  : 						{
; 120  : 							pWeapon->SetMoveDir( m_vWeaponMoveInfo.m_vMoveDir );

  002ba	8b 06		 mov	 eax, DWORD PTR [esi]
  002bc	52		 push	 edx
  002bd	8b ce		 mov	 ecx, esi
  002bf	ff 90 b0 00 00
	00		 call	 DWORD PTR [eax+176]

; 121  : 							pWeapon->SetMoveSpeed( m_vWeaponMoveInfo.m_fMoveSpeed );

  002c5	f3 0f 10 83 98
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5272]
  002cd	8b 06		 mov	 eax, DWORD PTR [esi]
  002cf	51		 push	 ecx
  002d0	8b ce		 mov	 ecx, esi
  002d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d7	ff 90 b4 00 00
	00		 call	 DWORD PTR [eax+180]

; 122  : 							pWeapon->SetFloatPower( m_vWeaponMoveInfo.m_fFloatPower );

  002dd	f3 0f 10 83 9c
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5276]
  002e5	8b 06		 mov	 eax, DWORD PTR [esi]
  002e7	51		 push	 ecx
  002e8	8b ce		 mov	 ecx, esi
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]
$LN5@ProcessAtt:

; 123  : 						}
; 124  : 
; 125  : 						ioFloatThrowWeapon *pFloatWeapon = ToFloatThrowWeapon(pWeapon);

  002f5	56		 push	 esi
  002f6	e8 00 00 00 00	 call	 ?ToFloatThrowWeapon@@YAPAVioFloatThrowWeapon@@PAVioWeapon@@@Z ; ToFloatThrowWeapon
  002fb	59		 pop	 ecx

; 126  : 						if( pFloatWeapon )

  002fc	85 c0		 test	 eax, eax
  002fe	74 15		 je	 SHORT $LN4@ProcessAtt

; 127  : 						{
; 128  : 							pFloatWeapon->SetGravityRate( m_fWeaponGravityRate );

  00300	f3 0f 10 83 a0
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5280]
  00308	51		 push	 ecx
  00309	8b c8		 mov	 ecx, eax
  0030b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00310	e8 00 00 00 00	 call	 ?SetGravityRate@ioFloatThrowWeapon@@QAEXM@Z ; ioFloatThrowWeapon::SetGravityRate
$LN4@ProcessAtt:

; 129  : 						}
; 130  : 					}
; 131  : 				}
; 132  : 			}
; 133  : 
; 134  : 			iter = m_vAttackFireTimeList.erase( iter );

  00315	ff 75 b0	 push	 DWORD PTR _iter$[ebp]
  00318	8d 45 a0	 lea	 eax, DWORD PTR $T535569[ebp]
  0031b	8d bb 78 05 00
	00		 lea	 edi, DWORD PTR [ebx+1400]
  00321	50		 push	 eax
  00322	8b cf		 mov	 ecx, edi
  00324	e8 00 00 00 00	 call	 ?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ; std::list<FireTime,std::allocator<FireTime> >::erase
  00329	8b 00		 mov	 eax, DWORD PTR [eax]

; 135  : 		}
; 136  : 		else

  0032b	eb 02		 jmp	 SHORT $LN81@ProcessAtt
$LN11@ProcessAtt:

; 137  : 		{
; 138  : 			++iter;

  0032d	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN81@ProcessAtt:
  0032f	89 45 b0	 mov	 DWORD PTR _iter$[ebp], eax
  00332	3b 07		 cmp	 eax, DWORD PTR [edi]
  00334	0f 85 06 fe ff
	ff		 jne	 $LN13@ProcessAtt
$LN12@ProcessAtt:

; 139  : 		}
; 140  : 	}
; 141  : 
; 142  : 	//
; 143  : 	if( m_dwAttackAniEndTime == 0 || m_dwAttackAniEndTime < dwCurTime )

  0033a	8b 83 e8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1768]
  00340	85 c0		 test	 eax, eax
  00342	74 05		 je	 SHORT $LN1@ProcessAtt
  00344	3b 45 a8	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00347	73 0c		 jae	 SHORT $LN2@ProcessAtt
$LN1@ProcessAtt:

; 144  : 	{
; 145  : 		SetDelayState( false );

  00349	8b 03		 mov	 eax, DWORD PTR [ebx]
  0034b	6a 00		 push	 0
  0034d	8b cb		 mov	 ecx, ebx
  0034f	ff 90 14 01 00
	00		 call	 DWORD PTR [eax+276]
$LN2@ProcessAtt:

; 146  : 		return;
; 147  : 	}
; 148  : }

  00355	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0035a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR $T535567[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessAttackState@ioNoneTraceDummy2@@MAEXMK@Z ENDP	; ioNoneTraceDummy2::ProcessAttackState
END
