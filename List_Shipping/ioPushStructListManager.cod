; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioPushStructListManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
PUBLIC	?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A ; Singleton<ioPushStructListManager>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A DD 01H DUP (?) ; Singleton<ioPushStructListManager>::ms_Singleton
_BSS	ENDS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?GetBlockCreateLoopAni@ioPushStructListManager@@QAEABVioHashString@@XZ ; ioPushStructListManager::GetBlockCreateLoopAni
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
;	COMDAT ?GetBlockCreateLoopAni@ioPushStructListManager@@QAEABVioHashString@@XZ
_TEXT	SEGMENT
?GetBlockCreateLoopAni@ioPushStructListManager@@QAEABVioHashString@@XZ PROC ; ioPushStructListManager::GetBlockCreateLoopAni, COMDAT
; _this$ = ecx

; 355  : 	return m_szBlockCreateLoopAni;

  00000	8d 81 38 03 00
	00		 lea	 eax, DWORD PTR [ecx+824]

; 356  : }

  00006	c3		 ret	 0
?GetBlockCreateLoopAni@ioPushStructListManager@@QAEABVioHashString@@XZ ENDP ; ioPushStructListManager::GetBlockCreateLoopAni
_TEXT	ENDS
PUBLIC	?GetBlockCreateActionAni@ioPushStructListManager@@QAEABVioHashString@@XZ ; ioPushStructListManager::GetBlockCreateActionAni
; Function compile flags: /Ogsp
;	COMDAT ?GetBlockCreateActionAni@ioPushStructListManager@@QAEABVioHashString@@XZ
_TEXT	SEGMENT
?GetBlockCreateActionAni@ioPushStructListManager@@QAEABVioHashString@@XZ PROC ; ioPushStructListManager::GetBlockCreateActionAni, COMDAT
; _this$ = ecx

; 360  : 	return m_szBlockCreateActionAni;

  00000	8d 81 48 03 00
	00		 lea	 eax, DWORD PTR [ecx+840]

; 361  : }

  00006	c3		 ret	 0
?GetBlockCreateActionAni@ioPushStructListManager@@QAEABVioHashString@@XZ ENDP ; ioPushStructListManager::GetBlockCreateActionAni
_TEXT	ENDS
PUBLIC	?GetBlockCreateActionAniRate@ioPushStructListManager@@QAEMXZ ; ioPushStructListManager::GetBlockCreateActionAniRate
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?GetBlockCreateActionAniRate@ioPushStructListManager@@QAEMXZ
_TEXT	SEGMENT
?GetBlockCreateActionAniRate@ioPushStructListManager@@QAEMXZ PROC ; ioPushStructListManager::GetBlockCreateActionAniRate, COMDAT
; _this$ = ecx

; 365  : 	return m_fBlockCreateActionAniRate;

  00000	d9 81 58 03 00
	00		 fld	 DWORD PTR [ecx+856]

; 366  : }

  00006	c3		 ret	 0
?GetBlockCreateActionAniRate@ioPushStructListManager@@QAEMXZ ENDP ; ioPushStructListManager::GetBlockCreateActionAniRate
_TEXT	ENDS
PUBLIC	?GetBlockGuidSpeed@ioPushStructListManager@@QAEMXZ ; ioPushStructListManager::GetBlockGuidSpeed
; Function compile flags: /Ogsp
;	COMDAT ?GetBlockGuidSpeed@ioPushStructListManager@@QAEMXZ
_TEXT	SEGMENT
?GetBlockGuidSpeed@ioPushStructListManager@@QAEMXZ PROC	; ioPushStructListManager::GetBlockGuidSpeed, COMDAT
; _this$ = ecx

; 370  : 	return m_fBlockGuidSpeed;

  00000	d9 81 5c 03 00
	00		 fld	 DWORD PTR [ecx+860]

; 371  : }

  00006	c3		 ret	 0
?GetBlockGuidSpeed@ioPushStructListManager@@QAEMXZ ENDP	; ioPushStructListManager::GetBlockGuidSpeed
_TEXT	ENDS
PUBLIC	?GetBlockCreateDelayTime@ioPushStructListManager@@QAEKXZ ; ioPushStructListManager::GetBlockCreateDelayTime
; Function compile flags: /Ogsp
;	COMDAT ?GetBlockCreateDelayTime@ioPushStructListManager@@QAEKXZ
_TEXT	SEGMENT
?GetBlockCreateDelayTime@ioPushStructListManager@@QAEKXZ PROC ; ioPushStructListManager::GetBlockCreateDelayTime, COMDAT
; _this$ = ecx

; 375  : 	return m_dwBlockCreateDelayTime;

  00000	8b 81 60 03 00
	00		 mov	 eax, DWORD PTR [ecx+864]

; 376  : }

  00006	c3		 ret	 0
?GetBlockCreateDelayTime@ioPushStructListManager@@QAEKXZ ENDP ; ioPushStructListManager::GetBlockCreateDelayTime
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioPushStructListManager@@@@QAE@XZ ; Singleton<ioPushStructListManager>::Singleton<ioPushStructListManager>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioPushStructListManager@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioPushStructListManager@@@@QAE@XZ PROC	; Singleton<ioPushStructListManager>::Singleton<ioPushStructListManager>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A, ecx ; Singleton<ioPushStructListManager>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VioPushStructListManager@@@@QAE@XZ ENDP	; Singleton<ioPushStructListManager>::Singleton<ioPushStructListManager>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioPushStructListManager@@@@QAE@XZ ; Singleton<ioPushStructListManager>::~Singleton<ioPushStructListManager>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioPushStructListManager@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioPushStructListManager@@@@QAE@XZ PROC	; Singleton<ioPushStructListManager>::~Singleton<ioPushStructListManager>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A, 0 ; Singleton<ioPushStructListManager>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioPushStructListManager@@@@QAE@XZ ENDP	; Singleton<ioPushStructListManager>::~Singleton<ioPushStructListManager>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioPushStructListManager@@@@SAAAVioPushStructListManager@@XZ ; Singleton<ioPushStructListManager>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioPushStructListManager@@@@SAAAVioPushStructListManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioPushStructListManager@@@@SAAAVioPushStructListManager@@XZ PROC ; Singleton<ioPushStructListManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A ; Singleton<ioPushStructListManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioPushStructListManager@@@@SAAAVioPushStructListManager@@XZ ENDP ; Singleton<ioPushStructListManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?empty@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE_NXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?empty@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@I@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@I@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@I@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBE_NPBQAVioPushStruct@@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBE_NPBQAVioPushStruct@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBE_NPBQAVioPushStruct@@@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBE_NPBQAVioPushStruct@@@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXPAPAVioPushStruct@@0@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXPAPAVioPushStruct@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXPAPAVioPushStruct@@0@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXPAPAVioPushStruct@@0@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >::~_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >::~_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >::~_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioPushStruct@@@std@@QAE@XZ	; std::allocator<ioPushStruct *>::allocator<ioPushStruct *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioPushStruct@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVioPushStruct@@@std@@QAE@XZ PROC	; std::allocator<ioPushStruct *>::allocator<ioPushStruct *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVioPushStruct@@@std@@QAE@XZ ENDP	; std::allocator<ioPushStruct *>::allocator<ioPushStruct *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEABQAVioPushStruct@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEABQAVioPushStruct@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEABQAVioPushStruct@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEABQAVioPushStruct@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXXZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioPushStruct@@@std@@QAE@ABV01@@Z ; std::allocator<ioPushStruct *>::allocator<ioPushStruct *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioPushStruct@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVioPushStruct@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioPushStruct *>::allocator<ioPushStruct *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVioPushStruct@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioPushStruct *>::allocator<ioPushStruct *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@I@Z ; std::allocator<ioPushStruct *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@I@Z PROC ; std::allocator<ioPushStruct *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@I@Z ENDP ; std::allocator<ioPushStruct *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVioPushStruct@@@std@@QBEIXZ ; std::allocator<ioPushStruct *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVioPushStruct@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVioPushStruct@@@std@@QBEIXZ PROC ; std::allocator<ioPushStruct *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVioPushStruct@@@std@@QBEIXZ ENDP ; std::allocator<ioPushStruct *>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@QAVioPushStruct@@@std@@YAPBQAVioPushStruct@@ABQAV1@@Z ; std::addressof<ioPushStruct * const>
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@QAVioPushStruct@@@std@@YAPBQAVioPushStruct@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVioPushStruct@@@std@@YAPBQAVioPushStruct@@ABQAV1@@Z PROC ; std::addressof<ioPushStruct * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVioPushStruct@@@std@@YAPBQAVioPushStruct@@ABQAV1@@Z ENDP ; std::addressof<ioPushStruct * const>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVioPushStruct@@@std@@YAPAPAVioPushStruct@@IPAPAV1@@Z ; std::_Allocate<ioPushStruct *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVioPushStruct@@@std@@YAPAPAVioPushStruct@@IPAPAV1@@Z
_TEXT	SEGMENT
$T533958 = -12						; size = 12
$T533963 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVioPushStruct@@@std@@YAPAPAVioPushStruct@@IPAPAV1@@Z PROC ; std::_Allocate<ioPushStruct *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T533963[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T533963[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T533958[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T533958[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T533958[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAVioPushStruct@@@std@@YAPAPAVioPushStruct@@IPAPAV1@@Z ENDP ; std::_Allocate<ioPushStruct *>
_TEXT	ENDS
PUBLIC	??$forward@AAPAVioPushStruct@@@std@@YAAAPAVioPushStruct@@AAPAV1@@Z ; std::forward<ioPushStruct * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAVioPushStruct@@@std@@YAAAPAVioPushStruct@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVioPushStruct@@@std@@YAAAPAVioPushStruct@@AAPAV1@@Z PROC ; std::forward<ioPushStruct * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVioPushStruct@@@std@@YAAAPAVioPushStruct@@AAPAV1@@Z ENDP ; std::forward<ioPushStruct * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVioPushStruct@@@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@AAPAV2@@Z ; std::allocator<ioPushStruct *>::construct<ioPushStruct * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAVioPushStruct@@@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVioPushStruct@@@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@AAPAV2@@Z PROC ; std::allocator<ioPushStruct *>::construct<ioPushStruct * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAVioPushStruct@@@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@AAPAV2@@Z ENDP ; std::allocator<ioPushStruct *>::construct<ioPushStruct * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVioPushStruct@@@std@@YAABQAVioPushStruct@@ABQAV1@@Z ; std::forward<ioPushStruct * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAVioPushStruct@@@std@@YAABQAVioPushStruct@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVioPushStruct@@@std@@YAABQAVioPushStruct@@ABQAV1@@Z PROC ; std::forward<ioPushStruct * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVioPushStruct@@@std@@YAABQAVioPushStruct@@ABQAV1@@Z ENDP ; std::forward<ioPushStruct * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVioPushStruct@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioPushStruct@@0@Z ; std::_Ptr_cat<ioPushStruct *,ioPushStruct *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVioPushStruct@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioPushStruct@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVioPushStruct@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioPushStruct@@0@Z PROC ; std::_Ptr_cat<ioPushStruct *,ioPushStruct *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAVioPushStruct@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioPushStruct@@0@Z ENDP ; std::_Ptr_cat<ioPushStruct *,ioPushStruct *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioPushStruct * *,ioPushStruct * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioPushStruct * *,ioPushStruct * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioPushStruct * *,ioPushStruct * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioPushStruct *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioPushStruct *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioPushStruct *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVioPushStruct@@ABQAV1@@std@@YAXPAPAVioPushStruct@@ABQAV1@@Z ; std::_Construct<ioPushStruct *,ioPushStruct * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@PAVioPushStruct@@ABQAV1@@std@@YAXPAPAVioPushStruct@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVioPushStruct@@ABQAV1@@std@@YAXPAPAVioPushStruct@@ABQAV1@@Z PROC ; std::_Construct<ioPushStruct *,ioPushStruct * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAVioPushStruct@@ABQAV1@@std@@YAXPAPAVioPushStruct@@ABQAV1@@Z ENDP ; std::_Construct<ioPushStruct *,ioPushStruct * const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVioPushStruct@@@std@@YAPAPAVioPushStruct@@PAPAV1@@Z ; std::_Val_type<ioPushStruct * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVioPushStruct@@@std@@YAPAPAVioPushStruct@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVioPushStruct@@@std@@YAPAPAVioPushStruct@@PAPAV1@@Z PROC ; std::_Val_type<ioPushStruct * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVioPushStruct@@@std@@YAPAPAVioPushStruct@@PAPAV1@@Z ENDP ; std::_Val_type<ioPushStruct * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVioPushStruct@@PAV1@PAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioPushStruct *,ioPushStruct *,ioPushStruct *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVioPushStruct@@PAV1@PAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioPushStruct@@PAV1@PAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioPushStruct *,ioPushStruct *,ioPushStruct *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAVioPushStruct@@PAV1@PAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioPushStruct *,ioPushStruct *,ioPushStruct *>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetHP@ioPlayEntity@@QAEAAUStatusValue@@XZ	; ioPlayEntity::GetHP
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
;	COMDAT ?GetHP@ioPlayEntity@@QAEAAUStatusValue@@XZ
_TEXT	SEGMENT
?GetHP@ioPlayEntity@@QAEAAUStatusValue@@XZ PROC		; ioPlayEntity::GetHP, COMDAT
; _this$ = ecx

; 96   : 	inline StatusValue& GetHP() { return m_HP; }

  00000	8d 81 c0 00 00
	00		 lea	 eax, DWORD PTR [ecx+192]
  00006	c3		 ret	 0
?GetHP@ioPlayEntity@@QAEAAUStatusValue@@XZ ENDP		; ioPlayEntity::GetHP
_TEXT	ENDS
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z PROC ; ToPlayEntity, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 122  : 	if( !pObj || pObj->GetTypeID() != ioGameEntity::GET_PLAY_ENTITY )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN1@ToPlayEnti
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 50 10	 call	 DWORD PTR [eax+16]
  00012	83 f8 01	 cmp	 eax, 1
  00015	75 19		 jne	 SHORT $LN1@ToPlayEnti

; 124  : 
; 125  : 	return dynamic_cast< ioPlayEntity* >( pObj );

  00017	6a 00		 push	 0
  00019	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0001e	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGameEntity@@@8
  00023	6a 00		 push	 0
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	eb 02		 jmp	 SHORT $LN3@ToPlayEnti
$LN1@ToPlayEnti:

; 123  : 		return NULL;

  00030	33 c0		 xor	 eax, eax
$LN3@ToPlayEnti:
  00032	5e		 pop	 esi

; 126  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ENDP ; ToPlayEntity
_TEXT	ENDS
PUBLIC	?GetState@ioPushStruct@@QBE?AW4PushStructState@1@XZ ; ioPushStruct::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstruct.h
;	COMDAT ?GetState@ioPushStruct@@QBE?AW4PushStructState@1@XZ
_TEXT	SEGMENT
?GetState@ioPushStruct@@QBE?AW4PushStructState@1@XZ PROC ; ioPushStruct::GetState, COMDAT
; _this$ = ecx

; 357  : 	inline PushStructState GetState() const { return m_State; }

  00000	8b 81 e4 01 00
	00		 mov	 eax, DWORD PTR [ecx+484]
  00006	c3		 ret	 0
?GetState@ioPushStruct@@QBE?AW4PushStructState@1@XZ ENDP ; ioPushStruct::GetState
_TEXT	ENDS
PUBLIC	?GetPushArrayIdx@ioPushStruct@@QBEHXZ		; ioPushStruct::GetPushArrayIdx
; Function compile flags: /Ogsp
;	COMDAT ?GetPushArrayIdx@ioPushStruct@@QBEHXZ
_TEXT	SEGMENT
?GetPushArrayIdx@ioPushStruct@@QBEHXZ PROC		; ioPushStruct::GetPushArrayIdx, COMDAT
; _this$ = ecx

; 358  : 	inline int GetPushArrayIdx() const { return m_iArrayIndex; }

  00000	8b 81 d0 01 00
	00		 mov	 eax, DWORD PTR [ecx+464]
  00006	c3		 ret	 0
?GetPushArrayIdx@ioPushStruct@@QBEHXZ ENDP		; ioPushStruct::GetPushArrayIdx
_TEXT	ENDS
PUBLIC	?GetOwnerName@ioPushStruct@@QAEABVioHashString@@XZ ; ioPushStruct::GetOwnerName
; Function compile flags: /Ogsp
;	COMDAT ?GetOwnerName@ioPushStruct@@QAEABVioHashString@@XZ
_TEXT	SEGMENT
?GetOwnerName@ioPushStruct@@QAEABVioHashString@@XZ PROC	; ioPushStruct::GetOwnerName, COMDAT
; _this$ = ecx

; 361  : 	inline const ioHashString& GetOwnerName() { return m_OwnerCharName; }

  00000	8d 81 94 03 00
	00		 lea	 eax, DWORD PTR [ecx+916]
  00006	c3		 ret	 0
?GetOwnerName@ioPushStruct@@QAEABVioHashString@@XZ ENDP	; ioPushStruct::GetOwnerName
_TEXT	ENDS
PUBLIC	?GetCreateTime@ioPushStruct@@QBEKXZ		; ioPushStruct::GetCreateTime
; Function compile flags: /Ogsp
;	COMDAT ?GetCreateTime@ioPushStruct@@QBEKXZ
_TEXT	SEGMENT
?GetCreateTime@ioPushStruct@@QBEKXZ PROC		; ioPushStruct::GetCreateTime, COMDAT
; _this$ = ecx

; 362  : 	inline DWORD GetCreateTime() const { return m_dwCreateTime; }

  00000	8b 81 d4 01 00
	00		 mov	 eax, DWORD PTR [ecx+468]
  00006	c3		 ret	 0
?GetCreateTime@ioPushStruct@@QBEKXZ ENDP		; ioPushStruct::GetCreateTime
_TEXT	ENDS
PUBLIC	?SetKillerChar@ioPushStruct@@QAEXABVioHashString@@@Z ; ioPushStruct::SetKillerChar
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetKillerChar@ioPushStruct@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
_szKiller$ = 8						; size = 4
?SetKillerChar@ioPushStruct@@QAEXABVioHashString@@@Z PROC ; ioPushStruct::SetKillerChar, COMDAT
; _this$ = ecx

; 370  : 	inline void SetKillerChar( const ioHashString& szKiller ) { m_KillerChar = szKiller; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 c1 b4 02 00
	00		 add	 ecx, 692		; 000002b4H
  00009	5d		 pop	 ebp
  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
?SetKillerChar@ioPushStruct@@QAEXABVioHashString@@@Z ENDP ; ioPushStruct::SetKillerChar
_TEXT	ENDS
PUBLIC	?GetStructNum@ioPushStruct@@QBEHXZ		; ioPushStruct::GetStructNum
; Function compile flags: /Ogsp
;	COMDAT ?GetStructNum@ioPushStruct@@QBEHXZ
_TEXT	SEGMENT
?GetStructNum@ioPushStruct@@QBEHXZ PROC			; ioPushStruct::GetStructNum, COMDAT
; _this$ = ecx

; 372  : 	inline int GetStructNum() const { return m_iStructNum; }

  00000	8b 81 cc 01 00
	00		 mov	 eax, DWORD PTR [ecx+460]
  00006	c3		 ret	 0
?GetStructNum@ioPushStruct@@QBEHXZ ENDP			; ioPushStruct::GetStructNum
_TEXT	ENDS
PUBLIC	?GetStructType@ioPushStruct@@QBE?AW4PushStructType@@XZ ; ioPushStruct::GetStructType
; Function compile flags: /Ogsp
;	COMDAT ?GetStructType@ioPushStruct@@QBE?AW4PushStructType@@XZ
_TEXT	SEGMENT
?GetStructType@ioPushStruct@@QBE?AW4PushStructType@@XZ PROC ; ioPushStruct::GetStructType, COMDAT
; _this$ = ecx

; 373  : 	inline PushStructType GetStructType() const { return m_iStructType; }

  00000	8b 81 e0 01 00
	00		 mov	 eax, DWORD PTR [ecx+480]
  00006	c3		 ret	 0
?GetStructType@ioPushStruct@@QBE?AW4PushStructType@@XZ ENDP ; ioPushStruct::GetStructType
_TEXT	ENDS
PUBLIC	?GetCreateEtcCode@ioPushStruct@@QBEKXZ		; ioPushStruct::GetCreateEtcCode
; Function compile flags: /Ogsp
;	COMDAT ?GetCreateEtcCode@ioPushStruct@@QBEKXZ
_TEXT	SEGMENT
?GetCreateEtcCode@ioPushStruct@@QBEKXZ PROC		; ioPushStruct::GetCreateEtcCode, COMDAT
; _this$ = ecx

; 375  : 	inline DWORD GetCreateEtcCode() const { return m_dwCreateEtcItemCode; }

  00000	8b 81 d8 01 00
	00		 mov	 eax, DWORD PTR [ecx+472]
  00006	c3		 ret	 0
?GetCreateEtcCode@ioPushStruct@@QBEKXZ ENDP		; ioPushStruct::GetCreateEtcCode
_TEXT	ENDS
PUBLIC	??_R0?AVioPushStruct@@@8			; ioPushStruct `RTTI Type Descriptor'
PUBLIC	?ToPushStruct@@YAPAVioPushStruct@@PAVioGameEntity@@@Z ; ToPushStruct
;	COMDAT ??_R0?AVioPushStruct@@@8
_DATA	SEGMENT
??_R0?AVioPushStruct@@@8 DD FLAT:??_7type_info@@6B@	; ioPushStruct `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPushStruct@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToPushStruct@@YAPAVioPushStruct@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToPushStruct@@YAPAVioPushStruct@@PAVioGameEntity@@@Z PROC ; ToPushStruct, COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 441  : 	ioPlayEntity *pPlay = ToPlayEntity( pObj );

  00004	ff 75 08	 push	 DWORD PTR _pObj$[ebp]
  00007	e8 00 00 00 00	 call	 ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
  0000c	8b f0		 mov	 esi, eax
  0000e	59		 pop	 ecx

; 442  : 	if( !pPlay || pPlay->GetSubType() != ioPlayEntity::PST_PUSHSTRUCT )

  0000f	85 f6		 test	 esi, esi
  00011	74 28		 je	 SHORT $LN1@ToPushStru
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b ce		 mov	 ecx, esi
  00017	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  0001d	83 f8 02	 cmp	 eax, 2
  00020	75 19		 jne	 SHORT $LN1@ToPushStru

; 444  : 
; 445  : 	return dynamic_cast< ioPushStruct* >( pPlay );

  00022	6a 00		 push	 0
  00024	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPushStruct@@@8
  00029	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0002e	6a 00		 push	 0
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ___RTDynamicCast
  00036	83 c4 14	 add	 esp, 20			; 00000014H
  00039	eb 02		 jmp	 SHORT $LN3@ToPushStru
$LN1@ToPushStru:

; 443  : 		return NULL;

  0003b	33 c0		 xor	 eax, eax
$LN3@ToPushStru:
  0003d	5e		 pop	 esi

; 446  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?ToPushStruct@@YAPAVioPushStruct@@PAVioGameEntity@@@Z ENDP ; ToPushStruct
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::size
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?GetSingleton@ioPushStructListManager@@SAAAV1@XZ ; ioPushStructListManager::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
;	COMDAT ?GetSingleton@ioPushStructListManager@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@ioPushStructListManager@@SAAAV1@XZ PROC	; ioPushStructListManager::GetSingleton, COMDAT

; 30   : 	return Singleton< ioPushStructListManager >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A ; Singleton<ioPushStructListManager>::ms_Singleton

; 31   : }

  00005	c3		 ret	 0
?GetSingleton@ioPushStructListManager@@SAAAV1@XZ ENDP	; ioPushStructListManager::GetSingleton
_TEXT	ENDS
PUBLIC	?GetPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z ; ioPushStructListManager::GetPushStructInfo
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@M@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
; Function compile flags: /Ogsp
;	COMDAT ?GetPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_i$530560 = -4						; size = 4
_rkPacket$ = 8						; size = 4
?GetPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z PROC ; ioPushStructListManager::GetPushStructInfo, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 87   : 	int iPushCnt = m_vPushStructList.size();

  00008	8b be 18 03 00
	00		 mov	 edi, DWORD PTR [esi+792]
  0000e	2b be 14 03 00
	00		 sub	 edi, DWORD PTR [esi+788]

; 88   : 	rkPacket << iPushCnt;

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00017	c1 ff 02	 sar	 edi, 2
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 89   : 	for( int i=0 ; i<iPushCnt ; i++ )

  00020	83 65 fc 00	 and	 DWORD PTR _i$530560[ebp], 0
  00024	85 ff		 test	 edi, edi
  00026	7e 6b		 jle	 SHORT $LN1@GetPushStr
  00028	53		 push	 ebx
$LL24@GetPushStr:

; 90   : 	{
; 91   : 		rkPacket << m_vPushStructList[i]->GetPushArrayIdx();

  00029	8b 86 14 03 00
	00		 mov	 eax, DWORD PTR [esi+788]
  0002f	8b 5d fc	 mov	 ebx, DWORD PTR _i$530560[ebp]
  00032	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  00035	ff b0 d0 01 00
	00		 push	 DWORD PTR [eax+464]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0003e	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 92   : 		rkPacket << m_vPushStructList[i]->GetHP().m_fCurValue;

  00043	8b 86 14 03 00
	00		 mov	 eax, DWORD PTR [esi+788]
  00049	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0004f	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@M@@@Z ; SP2Packet::operator<<

; 93   : 		rkPacket << m_vPushStructList[i]->GetHP().m_fMaxValue;

  0005a	8b 86 14 03 00
	00		 mov	 eax, DWORD PTR [esi+788]
  00060	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00066	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@M@@@Z ; SP2Packet::operator<<

; 94   : 		rkPacket << m_vPushStructList[i]->GetWorldPosition();

  00071	8b 86 14 03 00
	00		 mov	 eax, DWORD PTR [esi+788]
  00077	8b 1c 98	 mov	 ebx, DWORD PTR [eax+ebx*4]
  0007a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007c	8b cb		 mov	 ecx, ebx
  0007e	ff 50 70	 call	 DWORD PTR [eax+112]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<
  0008a	ff 45 fc	 inc	 DWORD PTR _i$530560[ebp]
  0008d	39 7d fc	 cmp	 DWORD PTR _i$530560[ebp], edi
  00090	7c 97		 jl	 SHORT $LL24@GetPushStr
  00092	5b		 pop	 ebx
$LN1@GetPushStr:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 95   : 	}
; 96   : }

  00095	c9		 leave
  00096	c2 04 00	 ret	 4
?GetPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z ENDP ; ioPushStructListManager::GetPushStructInfo
_TEXT	ENDS
PUBLIC	?FindUserPushStruct@ioPushStructListManager@@QAEHPAVioBaseChar@@@Z ; ioPushStructListManager::FindUserPushStruct
EXTRN	?IsCanPushed@ioPushStruct@@QAE_NPAVioPlayEntity@@@Z:PROC ; ioPushStruct::IsCanPushed
; Function compile flags: /Ogsp
;	COMDAT ?FindUserPushStruct@ioPushStructListManager@@QAEHPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pPush$530573 = -4					; size = 4
_pOwner$ = 8						; size = 4
?FindUserPushStruct@ioPushStructListManager@@QAEHPAVioBaseChar@@@Z PROC ; ioPushStructListManager::FindUserPushStruct, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 100  : 	int iPushCnt = m_vPushStructList.size();

  00009	8b b7 18 03 00
	00		 mov	 esi, DWORD PTR [edi+792]
  0000f	2b b7 14 03 00
	00		 sub	 esi, DWORD PTR [edi+788]

; 101  : 	for( int i=0 ; i<iPushCnt ; i++ )

  00015	33 db		 xor	 ebx, ebx
  00017	c1 fe 02	 sar	 esi, 2
  0001a	85 f6		 test	 esi, esi
  0001c	7e 1d		 jle	 SHORT $LN2@FindUserPu
$LL4@FindUserPu:

; 102  : 	{
; 103  : 		ioPushStruct *pPush = m_vPushStructList[i];

  0001e	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00024	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]

; 104  : 
; 105  : 		if( pPush->IsCanPushed( pOwner ) )

  00027	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0002a	89 4d fc	 mov	 DWORD PTR _pPush$530573[ebp], ecx
  0002d	e8 00 00 00 00	 call	 ?IsCanPushed@ioPushStruct@@QAE_NPAVioPlayEntity@@@Z ; ioPushStruct::IsCanPushed
  00032	84 c0		 test	 al, al
  00034	75 0f		 jne	 SHORT $LN14@FindUserPu

; 101  : 	for( int i=0 ; i<iPushCnt ; i++ )

  00036	43		 inc	 ebx
  00037	3b de		 cmp	 ebx, esi
  00039	7c e3		 jl	 SHORT $LL4@FindUserPu
$LN2@FindUserPu:

; 107  : 	}
; 108  : 
; 109  : 	return -1;

  0003b	83 c8 ff	 or	 eax, -1
$LN5@FindUserPu:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx

; 110  : }

  00041	c9		 leave
  00042	c2 04 00	 ret	 4
$LN14@FindUserPu:

; 106  : 			return pPush->GetPushArrayIdx();

  00045	8b 45 fc	 mov	 eax, DWORD PTR _pPush$530573[ebp]
  00048	8b 80 d0 01 00
	00		 mov	 eax, DWORD PTR [eax+464]
  0004e	eb ee		 jmp	 SHORT $LN5@FindUserPu
?FindUserPushStruct@ioPushStructListManager@@QAEHPAVioBaseChar@@@Z ENDP ; ioPushStructListManager::FindUserPushStruct
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ApplyPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z ; ioPushStructListManager::ApplyPushStructInfo
EXTRN	?ClearMountEntity@ioPushStruct@@QAEXXZ:PROC	; ioPushStruct::ClearMountEntity
EXTRN	?SetHP@ioPushStruct@@QAEXMM@Z:PROC		; ioPushStruct::SetHP
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAM@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ApplyPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_fMaxHP$530586 = -40					; size = 4
_fCurHP$530585 = -36					; size = 4
_iIndex$530584 = -32					; size = 4
_iPushCnt$ = -28					; size = 4
_j$530589 = -24						; size = 4
_i$530580 = -20						; size = 4
_vPos$530587 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rkPacket$ = 8						; size = 4
?ApplyPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z PROC ; ioPushStructListManager::ApplyPushStructInfo, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkPacket$[ebp]
  00014	56		 push	 esi

; 114  : 	int iPushCnt;
; 115  : 	rkPacket >> iPushCnt;

  00015	8d 45 e4	 lea	 eax, DWORD PTR _iPushCnt$[ebp]
  00018	8b f1		 mov	 esi, ecx
  0001a	50		 push	 eax
  0001b	8b cb		 mov	 ecx, ebx
  0001d	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 116  : 
; 117  : 	for( int i=0 ; i<iPushCnt ; i++ )

  00022	83 65 ec 00	 and	 DWORD PTR _i$530580[ebp], 0
  00026	83 7d e4 00	 cmp	 DWORD PTR _iPushCnt$[ebp], 0
  0002a	0f 8e a4 00 00
	00		 jle	 $LN5@ApplyPushS
  00030	57		 push	 edi
$LL23@ApplyPushS:

; 118  : 	{
; 119  : 		int iIndex;
; 120  : 		float fCurHP, fMaxHP;
; 121  : 		D3DXVECTOR3 vPos;
; 122  : 		rkPacket >> iIndex >> fCurHP >> fMaxHP >> vPos;

  00031	8d 45 f0	 lea	 eax, DWORD PTR _vPos$530587[ebp]
  00034	50		 push	 eax
  00035	8d 45 d8	 lea	 eax, DWORD PTR _fMaxHP$530586[ebp]
  00038	50		 push	 eax
  00039	8d 45 dc	 lea	 eax, DWORD PTR _fCurHP$530585[ebp]
  0003c	50		 push	 eax
  0003d	8d 45 e0	 lea	 eax, DWORD PTR _iIndex$530584[ebp]
  00040	50		 push	 eax
  00041	8b cb		 mov	 ecx, ebx
  00043	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAM@Z ; SP2Packet::operator>>
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAM@Z ; SP2Packet::operator>>
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 123  : 
; 124  : 		int iListSize = m_vPushStructList.size();

  0005d	8b 86 18 03 00
	00		 mov	 eax, DWORD PTR [esi+792]
  00063	2b 86 14 03 00
	00		 sub	 eax, DWORD PTR [esi+788]

; 125  : 		for( int j=0; j<iListSize; j++ )

  00069	83 65 e8 00	 and	 DWORD PTR _j$530589[ebp], 0
  0006d	c1 f8 02	 sar	 eax, 2
  00070	85 c0		 test	 eax, eax
  00072	7e 50		 jle	 SHORT $LN6@ApplyPushS

; 118  : 	{
; 119  : 		int iIndex;
; 120  : 		float fCurHP, fMaxHP;
; 121  : 		D3DXVECTOR3 vPos;
; 122  : 		rkPacket >> iIndex >> fCurHP >> fMaxHP >> vPos;

  00074	8b 8e 14 03 00
	00		 mov	 ecx, DWORD PTR [esi+788]
$LL4@ApplyPushS:

; 126  : 		{
; 127  : 			ioPushStruct *pPush = m_vPushStructList[j];

  0007a	8b 39		 mov	 edi, DWORD PTR [ecx]

; 128  : 			if( pPush->GetPushArrayIdx() == iIndex )

  0007c	8b 97 d0 01 00
	00		 mov	 edx, DWORD PTR [edi+464]
  00082	3b 55 e0	 cmp	 edx, DWORD PTR _iIndex$530584[ebp]
  00085	74 0d		 je	 SHORT $LN20@ApplyPushS

; 125  : 		for( int j=0; j<iListSize; j++ )

  00087	ff 45 e8	 inc	 DWORD PTR _j$530589[ebp]
  0008a	83 c1 04	 add	 ecx, 4
  0008d	39 45 e8	 cmp	 DWORD PTR _j$530589[ebp], eax
  00090	7c e8		 jl	 SHORT $LL4@ApplyPushS

; 128  : 			if( pPush->GetPushArrayIdx() == iIndex )

  00092	eb 30		 jmp	 SHORT $LN6@ApplyPushS
$LN20@ApplyPushS:

; 129  : 			{
; 130  : 				pPush->SetHP( fCurHP, fMaxHP );

  00094	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _fMaxHP$530586[ebp]
  00099	51		 push	 ecx
  0009a	51		 push	 ecx
  0009b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000a1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _fCurHP$530585[ebp]
  000a6	8b cf		 mov	 ecx, edi
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	e8 00 00 00 00	 call	 ?SetHP@ioPushStruct@@QAEXMM@Z ; ioPushStruct::SetHP

; 131  : 
; 132  : 				pPush->ClearMountEntity();

  000b2	8b cf		 mov	 ecx, edi
  000b4	e8 00 00 00 00	 call	 ?ClearMountEntity@ioPushStruct@@QAEXXZ ; ioPushStruct::ClearMountEntity

; 133  : 				pPush->SetWorldPosition( vPos );

  000b9	8b 07		 mov	 eax, DWORD PTR [edi]
  000bb	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$530587[ebp]
  000be	51		 push	 ecx
  000bf	8b cf		 mov	 ecx, edi
  000c1	ff 50 44	 call	 DWORD PTR [eax+68]
$LN6@ApplyPushS:

; 116  : 
; 117  : 	for( int i=0 ; i<iPushCnt ; i++ )

  000c4	ff 45 ec	 inc	 DWORD PTR _i$530580[ebp]
  000c7	8b 45 ec	 mov	 eax, DWORD PTR _i$530580[ebp]
  000ca	3b 45 e4	 cmp	 eax, DWORD PTR _iPushCnt$[ebp]
  000cd	0f 8c 5e ff ff
	ff		 jl	 $LL23@ApplyPushS
  000d3	5f		 pop	 edi
$LN5@ApplyPushS:

; 134  : 				break;
; 135  : 			}
; 136  : 		}
; 137  : 	}
; 138  : }

  000d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d7	5e		 pop	 esi
  000d8	33 cd		 xor	 ecx, ebp
  000da	5b		 pop	 ebx
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	c9		 leave
  000e1	c2 04 00	 ret	 4
?ApplyPushStructInfo@ioPushStructListManager@@QAEXAAVSP2Packet@@@Z ENDP ; ioPushStructListManager::ApplyPushStructInfo
_TEXT	ENDS
PUBLIC	_pChar$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z ; ioPushStructListManager::ClearStructListByOwner
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z:PROC ; TCPNetwork::SendToServer
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?SetStructDieByOwnerClear@ioPushStruct@@QAEXPAVioBaseChar@@_N@Z:PROC ; ioPushStruct::SetStructDieByOwnerClear
EXTRN	__imp_??8ioHashString@@QBE_NABV0@@Z:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$GSCopy$ = -32824					; size = 4
tv209 = -32820						; size = 4
_i$530758 = -32816					; size = 4
_bExist$ = -32809					; size = 1
_kPacket$530764 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z PROC ; ioPushStructListManager::ClearStructListByOwner, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 2c 80 00 00	 mov	 eax, 32812		; 0000802cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 45 08	 mov	 eax, DWORD PTR _pChar$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 161  : 	for( int i=0; i<iPushCnt; i++ )

  00037	89 85 c8 7f ff
	ff		 mov	 DWORD PTR _pChar$GSCopy$[ebp], eax
  0003d	85 c0		 test	 eax, eax
  0003f	0f 84 f7 00 00
	00		 je	 $LN1@ClearStruc

; 157  : 	if( !pChar ) return;
; 158  : 
; 159  : 	bool bExist = false;
; 160  : 	int iPushCnt = m_vPushStructList.size();

  00045	8b 9e 18 03 00
	00		 mov	 ebx, DWORD PTR [esi+792]
  0004b	2b 9e 14 03 00
	00		 sub	 ebx, DWORD PTR [esi+788]

; 161  : 	for( int i=0; i<iPushCnt; i++ )

  00051	83 a5 d0 7f ff
	ff 00		 and	 DWORD PTR _i$530758[ebp], 0
  00058	c1 fb 02	 sar	 ebx, 2
  0005b	c6 85 d7 7f ff
	ff 00		 mov	 BYTE PTR _bExist$[ebp], 0
  00062	85 db		 test	 ebx, ebx
  00064	0f 8e d2 00 00
	00		 jle	 $LN1@ClearStruc

; 162  : 	{
; 163  : 		if( m_vPushStructList[i]->GetOwnerName() == pChar->GetCharName() )

  0006a	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  0006f	89 85 cc 7f ff
	ff		 mov	 DWORD PTR tv209[ebp], eax
$LN5@ClearStruc:

; 161  : 	for( int i=0; i<iPushCnt; i++ )

  00075	8b 86 14 03 00
	00		 mov	 eax, DWORD PTR [esi+788]
  0007b	8b bd d0 7f ff
	ff		 mov	 edi, DWORD PTR _i$530758[ebp]

; 162  : 	{
; 163  : 		if( m_vPushStructList[i]->GetOwnerName() == pChar->GetCharName() )

  00081	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  00084	ff b5 cc 7f ff
	ff		 push	 DWORD PTR tv209[ebp]
  0008a	8d 89 94 03 00
	00		 lea	 ecx, DWORD PTR [ecx+916]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??8ioHashString@@QBE_NABV0@@Z
  00096	84 c0		 test	 al, al
  00098	74 38		 je	 SHORT $LN4@ClearStruc

; 164  : 		{
; 165  : 			m_vPushStructList[i]->SetKillerChar( pChar->GetCharName() );

  0009a	8b 86 14 03 00
	00		 mov	 eax, DWORD PTR [esi+788]
  000a0	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  000a3	ff b5 cc 7f ff
	ff		 push	 DWORD PTR tv209[ebp]
  000a9	8d 89 b4 02 00
	00		 lea	 ecx, DWORD PTR [ecx+692]
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 166  : 			m_vPushStructList[i]->SetStructDieByOwnerClear( pChar, true );

  000b5	8b 86 14 03 00
	00		 mov	 eax, DWORD PTR [esi+788]
  000bb	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  000be	6a 01		 push	 1
  000c0	ff b5 c8 7f ff
	ff		 push	 DWORD PTR _pChar$GSCopy$[ebp]
  000c6	e8 00 00 00 00	 call	 ?SetStructDieByOwnerClear@ioPushStruct@@QAEXPAVioBaseChar@@_N@Z ; ioPushStruct::SetStructDieByOwnerClear

; 167  : 
; 168  : 			bExist = true;

  000cb	c6 85 d7 7f ff
	ff 01		 mov	 BYTE PTR _bExist$[ebp], 1
$LN4@ClearStruc:

; 161  : 	for( int i=0; i<iPushCnt; i++ )

  000d2	ff 85 d0 7f ff
	ff		 inc	 DWORD PTR _i$530758[ebp]
  000d8	39 9d d0 7f ff
	ff		 cmp	 DWORD PTR _i$530758[ebp], ebx
  000de	7c 95		 jl	 SHORT $LN5@ClearStruc

; 169  : 		}
; 170  : 	}
; 171  : 
; 172  : 	if( bExist && pChar->IsNeedSendNetwork() )

  000e0	80 bd d7 7f ff
	ff 00		 cmp	 BYTE PTR _bExist$[ebp], 0
  000e7	74 53		 je	 SHORT $LN1@ClearStruc
  000e9	8b 8d c8 7f ff
	ff		 mov	 ecx, DWORD PTR _pChar$GSCopy$[ebp]
  000ef	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f1	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  000f7	84 c0		 test	 al, al
  000f9	74 41		 je	 SHORT $LN1@ClearStruc

; 173  : 	{
; 174  : 		SP2Packet kPacket( CTPK_PUSHSTRUCT_OWNER_CLEAR );

  000fb	68 30 02 00 00	 push	 560			; 00000230H
  00100	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530764[ebp]
  00106	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 175  : 		kPacket << pChar->GetCharName();

  0010b	ff b5 cc 7f ff
	ff		 push	 DWORD PTR tv209[ebp]
  00111	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00115	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530764[ebp]
  0011b	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 176  : 		TCPNetwork::SendToServer( kPacket );

  00120	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$530764[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 177  : 	}

  0012c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00130	59		 pop	 ecx
  00131	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530764[ebp]
  00137	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ClearStruc:

; 178  : }

  0013c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00146	59		 pop	 ecx
  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	5b		 pop	 ebx
  0014a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014d	33 cd		 xor	 ecx, ebp
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	c9		 leave
  00155	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530764[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c4 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32828]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ClearStructListByOwner@ioPushStructListManager@@QAEXPAVioBaseChar@@@Z ENDP ; ioPushStructListManager::ClearStructListByOwner
PUBLIC	?FindPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z ; ioPushStructListManager::FindPushStruct
; Function compile flags: /Ogsp
;	COMDAT ?FindPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z
_TEXT	SEGMENT
_iArray$ = 8						; size = 4
?FindPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z PROC ; ioPushStructListManager::FindPushStruct, COMDAT
; _this$ = ecx

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 270  : 	int iPushCnt = m_vPushStructList.size();

  00003	8b 81 18 03 00
	00		 mov	 eax, DWORD PTR [ecx+792]
  00009	2b 81 14 03 00
	00		 sub	 eax, DWORD PTR [ecx+788]
  0000f	56		 push	 esi
  00010	c1 f8 02	 sar	 eax, 2

; 271  : 	for( int i=0; i<iPushCnt; i++ )

  00013	33 d2		 xor	 edx, edx
  00015	57		 push	 edi
  00016	85 c0		 test	 eax, eax
  00018	7e 1d		 jle	 SHORT $LN2@FindPushSt

; 270  : 	int iPushCnt = m_vPushStructList.size();

  0001a	8b 89 14 03 00
	00		 mov	 ecx, DWORD PTR [ecx+788]
  00020	8b f1		 mov	 esi, ecx
$LL4@FindPushSt:

; 272  : 	{
; 273  : 		if( m_vPushStructList[i]->GetPushArrayIdx() == iArray )

  00022	8b 3e		 mov	 edi, DWORD PTR [esi]
  00024	8b bf d0 01 00
	00		 mov	 edi, DWORD PTR [edi+464]
  0002a	3b 7d 08	 cmp	 edi, DWORD PTR _iArray$[ebp]
  0002d	74 10		 je	 SHORT $LN16@FindPushSt

; 271  : 	for( int i=0; i<iPushCnt; i++ )

  0002f	42		 inc	 edx
  00030	83 c6 04	 add	 esi, 4
  00033	3b d0		 cmp	 edx, eax
  00035	7c eb		 jl	 SHORT $LL4@FindPushSt
$LN2@FindPushSt:

; 275  : 	}
; 276  : 
; 277  : 	return NULL;

  00037	33 c0		 xor	 eax, eax
$LN5@FindPushSt:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 278  : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
$LN16@FindPushSt:

; 274  : 			return m_vPushStructList[i];

  0003f	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00042	eb f5		 jmp	 SHORT $LN5@FindPushSt
?FindPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z ENDP ; ioPushStructListManager::FindPushStruct
_TEXT	ENDS
PUBLIC	?GetPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z ; ioPushStructListManager::GetPushStruct
; Function compile flags: /Ogsp
;	COMDAT ?GetPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z PROC ; ioPushStructListManager::GetPushStruct, COMDAT
; _this$ = ecx

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  : 	if( (int)m_vPushStructList.size() > iIndex )

  00003	8d 81 14 03 00
	00		 lea	 eax, DWORD PTR [ecx+788]
  00009	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000c	2b 10		 sub	 edx, DWORD PTR [eax]
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00011	c1 fa 02	 sar	 edx, 2
  00014	3b d1		 cmp	 edx, ecx
  00016	7e 07		 jle	 SHORT $LN1@GetPushStr@2

; 283  : 		return m_vPushStructList[iIndex];

  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0001d	eb 02		 jmp	 SHORT $LN2@GetPushStr@2
$LN1@GetPushStr@2:

; 284  : 
; 285  : 	return NULL;

  0001f	33 c0		 xor	 eax, eax
$LN2@GetPushStr@2:

; 286  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetPushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@H@Z ENDP ; ioPushStructListManager::GetPushStruct
_TEXT	ENDS
PUBLIC	?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z ; ioPushStructListManager::GetCurPushStructCntByEtcCode
EXTRN	__imp_??9ioHashString@@QBE_NABV0@@Z:PROC
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstruct.h
xdata$x	SEGMENT
__unwindtable$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z$0
__ehfuncinfo$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z
_TEXT	SEGMENT
_szOwnerName$ = -32					; size = 16
_iCurCnt$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$531025 = 8						; size = 4
_pChar$ = 8						; size = 4
_dwEtcCode$ = 12					; size = 4
?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z PROC ; ioPushStructListManager::GetCurPushStructCntByEtcCode, COMDAT
; _this$ = ecx

; 311  : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 312  : 	if( !pChar ) return 0;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _pChar$[ebp]
  00011	33 db		 xor	 ebx, ebx
  00013	3b c3		 cmp	 eax, ebx
  00015	75 0a		 jne	 SHORT $LN7@GetCurPush
  00017	33 c0		 xor	 eax, eax
$LN8@GetCurPush:

; 328  : 	}
; 329  : 
; 330  : 	return iCurCnt;
; 331  : }

  00019	e8 00 00 00 00	 call	 __EH_epilog3
  0001e	c2 08 00	 ret	 8
$LN7@GetCurPush:

; 313  : 
; 314  : 	ioHashString szOwnerName = pChar->GetCharName();

  00021	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  00026	50		 push	 eax
  00027	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 315  : 	if( szOwnerName.IsEmpty() )

  00030	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  00033	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0003c	84 c0		 test	 al, al
  0003e	74 13		 je	 SHORT $LN6@GetCurPush
  00040	33 f6		 xor	 esi, esi
$LN25@GetCurPush:

; 316  : 		return 0;

  00042	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00046	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0004f	8b c6		 mov	 eax, esi
  00051	eb c6		 jmp	 SHORT $LN8@GetCurPush
$LN6@GetCurPush:

; 317  : 
; 318  : 	int iCurCnt = 0;
; 319  : 
; 320  : 	int iPushCnt = m_vPushStructList.size();

  00053	8b b7 18 03 00
	00		 mov	 esi, DWORD PTR [edi+792]
  00059	2b b7 14 03 00
	00		 sub	 esi, DWORD PTR [edi+788]
  0005f	89 5d f0	 mov	 DWORD PTR _iCurCnt$[ebp], ebx
  00062	c1 fe 02	 sar	 esi, 2

; 321  : 	for( int i=0; i<iPushCnt; i++ )

  00065	89 5d 08	 mov	 DWORD PTR _i$531025[ebp], ebx
  00068	3b f3		 cmp	 esi, ebx
  0006a	7e 3f		 jle	 SHORT $LN3@GetCurPush
$LN5@GetCurPush:
  0006c	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00072	8b 5d 08	 mov	 ebx, DWORD PTR _i$531025[ebp]

; 322  : 	{
; 323  : 		if( m_vPushStructList[i]->GetOwnerName() != szOwnerName )

  00075	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  00078	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  0007b	51		 push	 ecx
  0007c	8d 88 94 03 00
	00		 lea	 ecx, DWORD PTR [eax+916]
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??9ioHashString@@QBE_NABV0@@Z
  00088	84 c0		 test	 al, al
  0008a	75 17		 jne	 SHORT $LN4@GetCurPush

; 324  : 			continue;
; 325  : 
; 326  : 		if( m_vPushStructList[i]->GetCreateEtcCode() == dwEtcCode )

  0008c	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00092	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  00095	8b 80 d8 01 00
	00		 mov	 eax, DWORD PTR [eax+472]
  0009b	3b 45 0c	 cmp	 eax, DWORD PTR _dwEtcCode$[ebp]
  0009e	75 03		 jne	 SHORT $LN4@GetCurPush

; 327  : 			++iCurCnt;

  000a0	ff 45 f0	 inc	 DWORD PTR _iCurCnt$[ebp]
$LN4@GetCurPush:

; 321  : 	for( int i=0; i<iPushCnt; i++ )

  000a3	ff 45 08	 inc	 DWORD PTR _i$531025[ebp]
  000a6	39 75 08	 cmp	 DWORD PTR _i$531025[ebp], esi
  000a9	7c c1		 jl	 SHORT $LN5@GetCurPush
$LN3@GetCurPush:
  000ab	8b 75 f0	 mov	 esi, DWORD PTR _iCurCnt$[ebp]
  000ae	eb 92		 jmp	 SHORT $LN25@GetCurPush
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetCurPushStructCntByEtcCode@ioPushStructListManager@@QAEHPAVioBaseChar@@K@Z ENDP ; ioPushStructListManager::GetCurPushStructCntByEtcCode
PUBLIC	?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z ; ioPushStructListManager::CheckMaxStructCntForEtcCode
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstruct.h
xdata$x	SEGMENT
__unwindtable$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z$0
__ehfuncinfo$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z
_TEXT	SEGMENT
_szOwnerName$ = -32					; size = 16
_iCurCnt$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$531068 = 8						; size = 4
_pChar$ = 8						; size = 4
_dwEtcCode$ = 12					; size = 4
?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z PROC ; ioPushStructListManager::CheckMaxStructCntForEtcCode, COMDAT
; _this$ = ecx

; 379  : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 380  : 	if( !pChar ) return false;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _pChar$[ebp]
  00011	33 db		 xor	 ebx, ebx
  00013	3b c3		 cmp	 eax, ebx
  00015	75 0a		 jne	 SHORT $LN8@CheckMaxSt
  00017	32 c0		 xor	 al, al
$LN9@CheckMaxSt:

; 399  : 		return true;
; 400  : 
; 401  : 	return false;
; 402  : }

  00019	e8 00 00 00 00	 call	 __EH_epilog3
  0001e	c2 08 00	 ret	 8
$LN8@CheckMaxSt:

; 381  : 
; 382  : 	ioHashString szOwnerName = pChar->GetCharName();

  00021	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  00026	50		 push	 eax
  00027	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 383  : 	if( szOwnerName.IsEmpty() )

  00030	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  00033	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0003c	84 c0		 test	 al, al
  0003e	74 13		 je	 SHORT $LN7@CheckMaxSt
$LN1@CheckMaxSt:
  00040	32 db		 xor	 bl, bl
$LN26@CheckMaxSt:

; 384  : 		return false;

  00042	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00046	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0004f	8a c3		 mov	 al, bl
  00051	eb c6		 jmp	 SHORT $LN9@CheckMaxSt
$LN7@CheckMaxSt:

; 385  : 
; 386  : 	int iCurCnt = 0;
; 387  : 
; 388  : 	int iPushCnt = m_vPushStructList.size();

  00053	8b b7 18 03 00
	00		 mov	 esi, DWORD PTR [edi+792]
  00059	2b b7 14 03 00
	00		 sub	 esi, DWORD PTR [edi+788]
  0005f	89 5d f0	 mov	 DWORD PTR _iCurCnt$[ebp], ebx
  00062	c1 fe 02	 sar	 esi, 2

; 389  : 	for( int i=0; i<iPushCnt; i++ )

  00065	89 5d 08	 mov	 DWORD PTR _i$531068[ebp], ebx
  00068	3b f3		 cmp	 esi, ebx
  0006a	7e 42		 jle	 SHORT $LN4@CheckMaxSt
$LN6@CheckMaxSt:
  0006c	8b 5d 08	 mov	 ebx, DWORD PTR _i$531068[ebp]
  0006f	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00075	c1 e3 02	 shl	 ebx, 2

; 390  : 	{
; 391  : 		if( m_vPushStructList[i]->GetOwnerName() != szOwnerName )

  00078	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  0007b	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 88 94 03 00
	00		 lea	 ecx, DWORD PTR [eax+916]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??9ioHashString@@QBE_NABV0@@Z
  0008b	84 c0		 test	 al, al
  0008d	75 17		 jne	 SHORT $LN5@CheckMaxSt

; 392  : 			continue;
; 393  : 
; 394  : 		if( m_vPushStructList[i]->GetCreateEtcCode() == dwEtcCode )

  0008f	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00095	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  00098	8b 80 d8 01 00
	00		 mov	 eax, DWORD PTR [eax+472]
  0009e	3b 45 0c	 cmp	 eax, DWORD PTR _dwEtcCode$[ebp]
  000a1	75 03		 jne	 SHORT $LN5@CheckMaxSt

; 395  : 			++iCurCnt;

  000a3	ff 45 f0	 inc	 DWORD PTR _iCurCnt$[ebp]
$LN5@CheckMaxSt:

; 389  : 	for( int i=0; i<iPushCnt; i++ )

  000a6	ff 45 08	 inc	 DWORD PTR _i$531068[ebp]
  000a9	39 75 08	 cmp	 DWORD PTR _i$531068[ebp], esi
  000ac	7c be		 jl	 SHORT $LN6@CheckMaxSt
$LN4@CheckMaxSt:

; 396  : 	}
; 397  : 
; 398  : 	if( iCurCnt < m_iBlockEtcMaxCnt )

  000ae	8b 45 f0	 mov	 eax, DWORD PTR _iCurCnt$[ebp]
  000b1	3b 87 34 03 00
	00		 cmp	 eax, DWORD PTR [edi+820]
  000b7	7d 87		 jge	 SHORT $LN1@CheckMaxSt
  000b9	b3 01		 mov	 bl, 1
  000bb	eb 85		 jmp	 SHORT $LN26@CheckMaxSt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _szOwnerName$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckMaxStructCntForEtcCode@ioPushStructListManager@@QAE_NPAVioBaseChar@@K@Z ENDP ; ioPushStructListManager::CheckMaxStructCntForEtcCode
PUBLIC	?ApplyStructListByOwner@ioPushStructListManager@@QAEXABVioHashString@@@Z ; ioPushStructListManager::ApplyStructListByOwner
EXTRN	?StructDie@ioPushStruct@@QAEX_N0@Z:PROC		; ioPushStruct::StructDie
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStructListByOwner@ioPushStructListManager@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
_szName$ = 8						; size = 4
?ApplyStructListByOwner@ioPushStructListManager@@QAEXABVioHashString@@@Z PROC ; ioPushStructListManager::ApplyStructListByOwner, COMDAT
; _this$ = ecx

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 406  : 	if( szName.IsEmpty() ) return;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _szName$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0000f	84 c0		 test	 al, al
  00011	75 4c		 jne	 SHORT $LN2@ApplyStruc

; 407  : 
; 408  : 	int iPushCnt = m_vPushStructList.size();

  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b b7 18 03 00
	00		 mov	 esi, DWORD PTR [edi+792]
  0001b	2b b7 14 03 00
	00		 sub	 esi, DWORD PTR [edi+788]

; 409  : 	for( int i=0; i<iPushCnt; i++ )

  00021	33 db		 xor	 ebx, ebx
  00023	c1 fe 02	 sar	 esi, 2
  00026	85 f6		 test	 esi, esi
  00028	7e 33		 jle	 SHORT $LN18@ApplyStruc
$LL4@ApplyStruc:

; 410  : 	{
; 411  : 		if( m_vPushStructList[i]->GetOwnerName() == szName )

  0002a	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00030	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]
  00033	ff 75 08	 push	 DWORD PTR _szName$[ebp]
  00036	81 c1 94 03 00
	00		 add	 ecx, 916		; 00000394H
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??8ioHashString@@QBE_NABV0@@Z
  00042	84 c0		 test	 al, al
  00044	74 12		 je	 SHORT $LN3@ApplyStruc

; 412  : 		{
; 413  : 			m_vPushStructList[i]->StructDie( true, false );

  00046	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  0004c	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]
  0004f	6a 00		 push	 0
  00051	6a 01		 push	 1
  00053	e8 00 00 00 00	 call	 ?StructDie@ioPushStruct@@QAEX_N0@Z ; ioPushStruct::StructDie
$LN3@ApplyStruc:

; 409  : 	for( int i=0; i<iPushCnt; i++ )

  00058	43		 inc	 ebx
  00059	3b de		 cmp	 ebx, esi
  0005b	7c cd		 jl	 SHORT $LL4@ApplyStruc
$LN18@ApplyStruc:
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
$LN2@ApplyStruc:
  0005f	5f		 pop	 edi

; 414  : 		}
; 415  : 	}
; 416  : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?ApplyStructListByOwner@ioPushStructListManager@@QAEXABVioHashString@@@Z ENDP ; ioPushStructListManager::ApplyStructListByOwner
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GeDisablePosition@ioPushStructListManager@@QAE_NUD3DXVECTOR3@@M@Z ; ioPushStructListManager::GeDisablePosition
; Function compile flags: /Ogsp
;	COMDAT ?GeDisablePosition@ioPushStructListManager@@QAE_NUD3DXVECTOR3@@M@Z
_TEXT	SEGMENT
_vPoint$531100 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_vPos$ = 8						; size = 12
_fRadius$ = 20						; size = 4
?GeDisablePosition@ioPushStructListManager@@QAE_NUD3DXVECTOR3@@M@Z PROC ; ioPushStructListManager::GeDisablePosition, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b f9		 mov	 edi, ecx

; 420  : 	int iPushCnt = m_vPushStructList.size();

  00015	8b b7 18 03 00
	00		 mov	 esi, DWORD PTR [edi+792]
  0001b	2b b7 14 03 00
	00		 sub	 esi, DWORD PTR [edi+788]

; 421  : 	for( int i=0 ; i<iPushCnt ; i++ )

  00021	33 db		 xor	 ebx, ebx
  00023	c1 fe 02	 sar	 esi, 2
  00026	85 f6		 test	 esi, esi
  00028	7e 31		 jle	 SHORT $LN3@GeDisableP
$LL17@GeDisableP:

; 422  : 	{
; 423  : 		ioPushStruct *pPush = m_vPushStructList[i];

  0002a	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00030	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]

; 424  : 		if( !pPush )

  00033	85 c9		 test	 ecx, ecx
  00035	74 1f		 je	 SHORT $LN4@GeDisableP

; 425  : 			continue;
; 426  : 
; 427  : 		D3DXVECTOR3 vPoint;
; 428  : 		if( pPush->CheckSpherePoint( vPos, fRadius, vPoint ) )		

  00037	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	8d 55 f0	 lea	 edx, DWORD PTR _vPoint$531100[ebp]
  00041	52		 push	 edx
  00042	51		 push	 ecx
  00043	8d 55 08	 lea	 edx, DWORD PTR _vPos$[ebp]
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	52		 push	 edx
  0004c	ff 90 9c 00 00
	00		 call	 DWORD PTR [eax+156]
  00052	84 c0		 test	 al, al
  00054	75 18		 jne	 SHORT $LN15@GeDisableP
$LN4@GeDisableP:

; 421  : 	for( int i=0 ; i<iPushCnt ; i++ )

  00056	43		 inc	 ebx
  00057	3b de		 cmp	 ebx, esi
  00059	7c cf		 jl	 SHORT $LL17@GeDisableP
$LN3@GeDisableP:

; 430  : 	}
; 431  : 
; 432  : 	return false;

  0005b	32 c0		 xor	 al, al
$LN6@GeDisableP:

; 433  : }

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	33 cd		 xor	 ecx, ebp
  00064	5b		 pop	 ebx
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	c9		 leave
  0006b	c2 10 00	 ret	 16			; 00000010H
$LN15@GeDisableP:

; 429  : 			return true;

  0006e	b0 01		 mov	 al, 1
  00070	eb eb		 jmp	 SHORT $LN6@GeDisableP
?GeDisablePosition@ioPushStructListManager@@QAE_NUD3DXVECTOR3@@M@Z ENDP ; ioPushStructListManager::GeDisablePosition
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEAAPAVioPushStruct@@XZ ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEAAPAVioPushStruct@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEAAPAVioPushStruct@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBEAAPAVioPushStruct@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@V?$allocator@PAVioPushStruct@@@1@@Z ; std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@V?$allocator@PAVioPushStruct@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@V?$allocator@PAVioPushStruct@@@1@@Z PROC ; std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@V?$allocator@PAVioPushStruct@@@1@@Z ENDP ; std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QAE@PAPAVioPushStruct@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::_Vector_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEII@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEII@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVioPushStruct@@@std@@QAEPAPAVioPushStruct@@I@Z ; std::allocator<ioPushStruct *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVioPushStruct@@@std@@QAEPAPAVioPushStruct@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVioPushStruct@@@std@@QAEPAPAVioPushStruct@@I@Z PROC ; std::allocator<ioPushStruct *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAVioPushStruct@@@std@@YAPAPAVioPushStruct@@IPAPAV1@@Z ; std::_Allocate<ioPushStruct *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAVioPushStruct@@@std@@QAEPAPAVioPushStruct@@I@Z ENDP ; std::allocator<ioPushStruct *>::allocate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetFileName_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBD_N@Z ; ioINILoader::SetFileName_e<27>
EXTRN	__imp_?SetFileName@ioINILoader@@QAEXPBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$SetFileName_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBD_N@Z
_TEXT	SEGMENT
__f$ = -36						; size = 27
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 4
_b$ = 12						; size = 1
??$SetFileName_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBD_N@Z PROC ; ioINILoader::SetFileName_e<27>, COMDAT
; _this$ = ecx

; 196  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _f$[ebp]

; 197  : 		_ENCSTR(f, _f);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 91 02 00
	00		 je	 $LN96@SetFileNam
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __f$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 7a 02 00
	00		 je	 $LN95@SetFileNam
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __f$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 62 02 00
	00		 je	 $LN94@SetFileNam
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 de	 mov	 BYTE PTR __f$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 4b 02 00
	00		 je	 $LN93@SetFileNam
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __f$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 33 02 00
	00		 je	 $LN92@SetFileNam
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __f$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 1d 02 00
	00		 je	 $LN91@SetFileNam
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __f$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 07 02 00
	00		 je	 $LN90@SetFileNam
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e2	 mov	 BYTE PTR __f$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 f1 01 00
	00		 je	 $LN89@SetFileNam
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __f$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 db 01 00
	00		 je	 $LN88@SetFileNam
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __f$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 c5 01 00
	00		 je	 $LN87@SetFileNam
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __f$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 af 01 00
	00		 je	 $LN86@SetFileNam
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e6	 mov	 BYTE PTR __f$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 99 01 00
	00		 je	 $LN85@SetFileNam
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __f$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 83 01 00
	00		 je	 $LN84@SetFileNam
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __f$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 6d 01 00
	00		 je	 $LN83@SetFileNam
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __f$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 57 01 00
	00		 je	 $LN82@SetFileNam
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ea	 mov	 BYTE PTR __f$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 41 01 00
	00		 je	 $LN81@SetFileNam
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __f$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 2b 01 00
	00		 je	 $LN80@SetFileNam
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __f$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 15 01 00
	00		 je	 $LN79@SetFileNam
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __f$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ff 00 00
	00		 je	 $LN78@SetFileNam
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ee	 mov	 BYTE PTR __f$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 e9 00 00
	00		 je	 $LN77@SetFileNam
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __f$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 d3 00 00
	00		 je	 $LN76@SetFileNam
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __f$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 bd 00 00
	00		 je	 $LN75@SetFileNam
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __f$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 a7 00 00
	00		 je	 $LN74@SetFileNam
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 f2	 mov	 BYTE PTR __f$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 91 00 00
	00		 je	 $LN73@SetFileNam
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 f3	 mov	 BYTE PTR __f$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	74 7c		 je	 SHORT $LN72@SetFileNam
  001ad	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b0	88 55 f4	 mov	 BYTE PTR __f$[ebp+24], dl
  001b3	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b6	84 d2		 test	 dl, dl
  001b8	74 67		 je	 SHORT $LN71@SetFileNam
  001ba	32 d1		 xor	 dl, cl
  001bc	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  001c0	88 55 f5	 mov	 BYTE PTR __f$[ebp+25], dl
  001c3	0f 84 ed 00 00
	00		 je	 $LN1@SetFileNam
  001c9	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cc	84 d2		 test	 dl, dl
  001ce	74 49		 je	 SHORT $LN69@SetFileNam
  001d0	32 d3		 xor	 dl, bl
  001d2	88 55 f7	 mov	 BYTE PTR __f$[ebp+27], dl
  001d5	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d8	84 d2		 test	 dl, dl
  001da	74 34		 je	 SHORT $LN68@SetFileNam
  001dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001df	88 55 f8	 mov	 BYTE PTR __f$[ebp+28], dl
  001e2	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e5	84 d2		 test	 dl, dl
  001e7	74 1f		 je	 SHORT $LN67@SetFileNam
  001e9	8a 40 1e	 mov	 al, BYTE PTR [eax+30]
  001ec	32 d1		 xor	 dl, cl
  001ee	88 55 f9	 mov	 BYTE PTR __f$[ebp+29], dl
  001f1	84 c0		 test	 al, al
  001f3	74 0a		 je	 SHORT $LN66@SetFileNam
  001f5	34 eb		 xor	 al, -21			; ffffffebH
  001f7	88 45 fa	 mov	 BYTE PTR __f$[ebp+30], al
  001fa	e9 b7 00 00 00	 jmp	 $LN1@SetFileNam
$LN66@SetFileNam:
  001ff	c6 45 fa eb	 mov	 BYTE PTR __f$[ebp+30], -21 ; ffffffebH
  00203	e9 ae 00 00 00	 jmp	 $LN1@SetFileNam
$LN67@SetFileNam:
  00208	88 4d f9	 mov	 BYTE PTR __f$[ebp+29], cl
  0020b	e9 a6 00 00 00	 jmp	 $LN1@SetFileNam
$LN68@SetFileNam:
  00210	c6 45 f8 ed	 mov	 BYTE PTR __f$[ebp+28], -19 ; ffffffedH
  00214	e9 9d 00 00 00	 jmp	 $LN1@SetFileNam
$LN69@SetFileNam:
  00219	88 5d f7	 mov	 BYTE PTR __f$[ebp+27], bl
  0021c	e9 95 00 00 00	 jmp	 $LN1@SetFileNam
$LN71@SetFileNam:
  00221	88 4d f5	 mov	 BYTE PTR __f$[ebp+25], cl
  00224	e9 8d 00 00 00	 jmp	 $LN1@SetFileNam
$LN72@SetFileNam:
  00229	c6 45 f4 ed	 mov	 BYTE PTR __f$[ebp+24], -19 ; ffffffedH
  0022d	e9 84 00 00 00	 jmp	 $LN1@SetFileNam
$LN73@SetFileNam:
  00232	88 5d f3	 mov	 BYTE PTR __f$[ebp+23], bl
  00235	eb 7f		 jmp	 SHORT $LN1@SetFileNam
$LN74@SetFileNam:
  00237	c6 45 f2 eb	 mov	 BYTE PTR __f$[ebp+22], -21 ; ffffffebH
  0023b	eb 79		 jmp	 SHORT $LN1@SetFileNam
$LN75@SetFileNam:
  0023d	88 4d f1	 mov	 BYTE PTR __f$[ebp+21], cl
  00240	eb 74		 jmp	 SHORT $LN1@SetFileNam
$LN76@SetFileNam:
  00242	c6 45 f0 ed	 mov	 BYTE PTR __f$[ebp+20], -19 ; ffffffedH
  00246	eb 6e		 jmp	 SHORT $LN1@SetFileNam
$LN77@SetFileNam:
  00248	88 5d ef	 mov	 BYTE PTR __f$[ebp+19], bl
  0024b	eb 69		 jmp	 SHORT $LN1@SetFileNam
$LN78@SetFileNam:
  0024d	c6 45 ee eb	 mov	 BYTE PTR __f$[ebp+18], -21 ; ffffffebH
  00251	eb 63		 jmp	 SHORT $LN1@SetFileNam
$LN79@SetFileNam:
  00253	88 4d ed	 mov	 BYTE PTR __f$[ebp+17], cl
  00256	eb 5e		 jmp	 SHORT $LN1@SetFileNam
$LN80@SetFileNam:
  00258	c6 45 ec ed	 mov	 BYTE PTR __f$[ebp+16], -19 ; ffffffedH
  0025c	eb 58		 jmp	 SHORT $LN1@SetFileNam
$LN81@SetFileNam:
  0025e	88 5d eb	 mov	 BYTE PTR __f$[ebp+15], bl
  00261	eb 53		 jmp	 SHORT $LN1@SetFileNam
$LN82@SetFileNam:
  00263	c6 45 ea eb	 mov	 BYTE PTR __f$[ebp+14], -21 ; ffffffebH
  00267	eb 4d		 jmp	 SHORT $LN1@SetFileNam
$LN83@SetFileNam:
  00269	88 4d e9	 mov	 BYTE PTR __f$[ebp+13], cl
  0026c	eb 48		 jmp	 SHORT $LN1@SetFileNam
$LN84@SetFileNam:
  0026e	c6 45 e8 ed	 mov	 BYTE PTR __f$[ebp+12], -19 ; ffffffedH
  00272	eb 42		 jmp	 SHORT $LN1@SetFileNam
$LN85@SetFileNam:
  00274	88 5d e7	 mov	 BYTE PTR __f$[ebp+11], bl
  00277	eb 3d		 jmp	 SHORT $LN1@SetFileNam
$LN86@SetFileNam:
  00279	c6 45 e6 eb	 mov	 BYTE PTR __f$[ebp+10], -21 ; ffffffebH
  0027d	eb 37		 jmp	 SHORT $LN1@SetFileNam
$LN87@SetFileNam:
  0027f	88 4d e5	 mov	 BYTE PTR __f$[ebp+9], cl
  00282	eb 32		 jmp	 SHORT $LN1@SetFileNam
$LN88@SetFileNam:
  00284	c6 45 e4 ed	 mov	 BYTE PTR __f$[ebp+8], -19 ; ffffffedH
  00288	eb 2c		 jmp	 SHORT $LN1@SetFileNam
$LN89@SetFileNam:
  0028a	88 5d e3	 mov	 BYTE PTR __f$[ebp+7], bl
  0028d	eb 27		 jmp	 SHORT $LN1@SetFileNam
$LN90@SetFileNam:
  0028f	c6 45 e2 eb	 mov	 BYTE PTR __f$[ebp+6], -21 ; ffffffebH
  00293	eb 21		 jmp	 SHORT $LN1@SetFileNam
$LN91@SetFileNam:
  00295	88 4d e1	 mov	 BYTE PTR __f$[ebp+5], cl
  00298	eb 1c		 jmp	 SHORT $LN1@SetFileNam
$LN92@SetFileNam:
  0029a	c6 45 e0 ed	 mov	 BYTE PTR __f$[ebp+4], -19 ; ffffffedH
  0029e	eb 16		 jmp	 SHORT $LN1@SetFileNam
$LN93@SetFileNam:
  002a0	c6 45 df ea	 mov	 BYTE PTR __f$[ebp+3], -22 ; ffffffeaH
  002a4	eb 10		 jmp	 SHORT $LN1@SetFileNam
$LN94@SetFileNam:
  002a6	c6 45 de eb	 mov	 BYTE PTR __f$[ebp+2], -21 ; ffffffebH
  002aa	eb 0a		 jmp	 SHORT $LN1@SetFileNam
$LN95@SetFileNam:
  002ac	c6 45 dd ec	 mov	 BYTE PTR __f$[ebp+1], -20 ; ffffffecH
  002b0	eb 04		 jmp	 SHORT $LN1@SetFileNam
$LN96@SetFileNam:
  002b2	c6 45 dc ed	 mov	 BYTE PTR __f$[ebp], -19	; ffffffedH
$LN1@SetFileNam:
  002b6	6a 06		 push	 6
  002b8	8d 45 dc	 lea	 eax, DWORD PTR __f$[ebp]
  002bb	c6 45 f6 00	 mov	 BYTE PTR __f$[ebp+26], 0
  002bf	5a		 pop	 edx
$LL104@SetFileNam:
  002c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c6	83 c0 04	 add	 eax, 4
  002c9	4a		 dec	 edx
  002ca	75 f4		 jne	 SHORT $LL104@SetFileNam
  002cc	6a 18		 push	 24			; 00000018H
  002ce	58		 pop	 eax
$LL101@SetFileNam:
  002cf	8b c8		 mov	 ecx, eax
  002d1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002d7	79 05		 jns	 SHORT $LN111@SetFileNam
  002d9	49		 dec	 ecx
  002da	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002dd	41		 inc	 ecx
$LN111@SetFileNam:
  002de	b2 ed		 mov	 dl, -19			; ffffffedH
  002e0	2a d1		 sub	 dl, cl
  002e2	30 54 05 dc	 xor	 BYTE PTR __f$[ebp+eax], dl
  002e6	40		 inc	 eax
  002e7	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002ea	7c e3		 jl	 SHORT $LL101@SetFileNam

; 198  : 		SetFileName(_f, b);

  002ec	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  002ef	8d 45 dc	 lea	 eax, DWORD PTR __f$[ebp]
  002f2	50		 push	 eax
  002f3	8b ce		 mov	 ecx, esi
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetFileName@ioINILoader@@QAEXPBD_N@Z

; 199  : 	}

  002fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fe	5e		 pop	 esi
  002ff	33 cd		 xor	 ecx, ebp
  00301	5b		 pop	 ebx
  00302	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00307	c9		 leave
  00308	c2 08 00	 ret	 8
??$SetFileName_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBD_N@Z ENDP ; ioINILoader::SetFileName_e<27>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBD@Z ; ioINILoader::SetTitle_e<11>
EXTRN	__imp_?SetTitle@ioINILoader@@QAEXPBD@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$SetTitle_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBD@Z PROC	; ioINILoader::SetTitle_e<11>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@SetTitle_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@SetTitle_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@SetTitle_e
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@SetTitle_e
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@SetTitle_e
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@SetTitle_e
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@SetTitle_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@SetTitle_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@SetTitle_e
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@SetTitle_e
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@SetTitle_e
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@SetTitle_e
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@SetTitle_e
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@SetTitle_e
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@SetTitle_e
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __t$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@SetTitle_e
$LN82@SetTitle_e:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@SetTitle_e
$LN83@SetTitle_e:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@SetTitle_e
$LN84@SetTitle_e:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@SetTitle_e
$LN85@SetTitle_e:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@SetTitle_e
$LN87@SetTitle_e:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@SetTitle_e
$LN88@SetTitle_e:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@SetTitle_e
$LN89@SetTitle_e:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@SetTitle_e
$LN90@SetTitle_e:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@SetTitle_e
$LN91@SetTitle_e:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@SetTitle_e
$LN92@SetTitle_e:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@SetTitle_e
$LN93@SetTitle_e:
  00132	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@SetTitle_e
$LN94@SetTitle_e:
  00138	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@SetTitle_e
$LN95@SetTitle_e:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@SetTitle_e
$LN96@SetTitle_e:
  00144	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@SetTitle_e:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@SetTitle_e
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@SetTitle_e:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@SetTitle_e
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@SetTitle_e:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@SetTitle_e

; 190  : 		SetTitle(_t);

  0017e	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00181	50		 push	 eax
  00182	8b ce		 mov	 ecx, esi
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	33 cd		 xor	 ecx, ebp
  0018f	5e		 pop	 esi
  00190	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00195	c9		 leave
  00196	c2 04 00	 ret	 4
??$SetTitle_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBD@Z ENDP	; ioINILoader::SetTitle_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ; ioINILoader::LoadInt_e<14>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<14>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadInt_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadInt_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadInt_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadInt_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadInt_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadInt_e
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadInt_e
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadInt_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadInt_e
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadInt_e
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadInt_e:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  0019e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001a1	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a8	50		 push	 eax
  001a9	8b ce		 mov	 ecx, esi
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	5e		 pop	 esi
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	c9		 leave
  001bd	c2 08 00	 ret	 8
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z ; ioINILoader::LoadInt_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<21>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadInt_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadInt_e@2
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadInt_e@2
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadInt_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadInt_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadInt_e@2
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadInt_e@2
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadInt_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadInt_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadInt_e@2
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadInt_e@2
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadInt_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadInt_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadInt_e@2
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadInt_e@2
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadInt_e@2
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadInt_e@2
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadInt_e@2
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadInt_e@2
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadInt_e@2
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadInt_e@2
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN72@LoadInt_e@2:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN73@LoadInt_e@2:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadInt_e@2
$LN75@LoadInt_e@2:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadInt_e@2:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00232	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00235	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00238	50		 push	 eax
  00239	8b ce		 mov	 ecx, esi
  0023b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00241	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00244	5e		 pop	 esi
  00245	33 cd		 xor	 ecx, ebp
  00247	5b		 pop	 ebx
  00248	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024d	c9		 leave
  0024e	c2 08 00	 ret	 8
??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ; ioINILoader::LoadInt_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<22>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadInt_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadInt_e@3
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadInt_e@3
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadInt_e@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadInt_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadInt_e@3
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadInt_e@3
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadInt_e@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadInt_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadInt_e@3
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadInt_e@3
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadInt_e@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadInt_e@3
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadInt_e@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadInt_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadInt_e@3
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadInt_e@3
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadInt_e@3
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadInt_e@3
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadInt_e@3
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadInt_e@3
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadInt_e@3
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadInt_e@3
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadInt_e@3
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN71@LoadInt_e@3:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN72@LoadInt_e@3:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN73@LoadInt_e@3:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadInt_e@3
$LN74@LoadInt_e@3:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadInt_e@3:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  00250	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00253	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00257	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025a	50		 push	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	5e		 pop	 esi
  00267	33 cd		 xor	 ecx, ebp
  00269	5b		 pop	 ebx
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	c9		 leave
  00270	c2 08 00	 ret	 8
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ; ioINILoader::LoadInt_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<24>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadInt_e@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadInt_e@4
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadInt_e@4
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadInt_e@4
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadInt_e@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadInt_e@4
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadInt_e@4
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadInt_e@4
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadInt_e@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadInt_e@4
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadInt_e@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadInt_e@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadInt_e@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadInt_e@4
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadInt_e@4
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadInt_e@4
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadInt_e@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadInt_e@4
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadInt_e@4
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadInt_e@4
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadInt_e@4
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadInt_e@4
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadInt_e@4
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadInt_e@4
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadInt_e@4
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadInt_e@4
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadInt_e@4
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadInt_e@4
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN69@LoadInt_e@4:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN70@LoadInt_e@4:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN71@LoadInt_e@4:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN72@LoadInt_e@4:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN74@LoadInt_e@4:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadInt_e@4
$LN75@LoadInt_e@4:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@4
$LN76@LoadInt_e@4:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN77@LoadInt_e@4:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadInt_e@4
$LN78@LoadInt_e@4:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadInt_e@4
$LN79@LoadInt_e@4:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN83@LoadInt_e@4:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadInt_e@4:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadInt_e@4
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadInt_e@4:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadInt_e@4
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadInt_e@4:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  002a0	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  002a3	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a6	50		 push	 eax
  002a7	8b ce		 mov	 ecx, esi
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	5e		 pop	 esi
  002b3	33 cd		 xor	 ecx, ebp
  002b5	5b		 pop	 ebx
  002b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bb	c9		 leave
  002bc	c2 08 00	 ret	 8
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<24>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<22>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<22>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 15 02 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 fe 01 00
	00		 je	 $LN95@LoadString
  0003a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003d	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 e7 01 00
	00		 je	 $LN94@LoadString
  0004b	b1 eb		 mov	 cl, -21			; ffffffebH
  0004d	32 d1		 xor	 dl, cl
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 cf 01 00
	00		 je	 $LN93@LoadString
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 b7 01 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 a0 01 00
	00		 je	 $LN91@LoadString
  00080	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00083	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00086	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 8a 01 00
	00		 je	 $LN90@LoadString
  00091	32 d1		 xor	 dl, cl
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 75 01 00
	00		 je	 $LN89@LoadString
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 5f 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 48 01 00
	00		 je	 $LN87@LoadString
  000c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c5	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c8	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000cb	84 d2		 test	 dl, dl
  000cd	0f 84 32 01 00
	00		 je	 $LN86@LoadString
  000d3	32 d1		 xor	 dl, cl
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 1d 01 00
	00		 je	 $LN85@LoadString
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 07 01 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 f0 00 00
	00		 je	 $LN83@LoadString
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 da 00 00
	00		 je	 $LN82@LoadString
  00115	32 d1		 xor	 dl, cl
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 c5 00 00
	00		 je	 $LN81@LoadString
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 af 00 00
	00		 je	 $LN80@LoadString
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 98 00 00
	00		 je	 $LN79@LoadString
  00146	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00149	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014c	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014f	84 d2		 test	 dl, dl
  00151	0f 84 82 00 00
	00		 je	 $LN78@LoadString
  00157	32 d1		 xor	 dl, cl
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	74 71		 je	 SHORT $LN77@LoadString
  00163	32 d3		 xor	 dl, bl
  00165	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00168	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016b	84 d2		 test	 dl, dl
  0016d	74 5f		 je	 SHORT $LN76@LoadString
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	0f 84 c3 00 00
	00		 je	 $LN111@LoadString
  0017f	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00182	84 d2		 test	 dl, dl
  00184	74 43		 je	 SHORT $LN74@LoadString
  00186	32 d1		 xor	 dl, cl
  00188	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0018b	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018e	84 d2		 test	 dl, dl
  00190	74 32		 je	 SHORT $LN73@LoadString
  00192	32 d3		 xor	 dl, bl
  00194	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 20		 je	 SHORT $LN72@LoadString
  0019e	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  001a1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a4	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a7	84 c0		 test	 al, al
  001a9	74 0a		 je	 SHORT $LN71@LoadString
  001ab	34 ec		 xor	 al, -20			; ffffffecH
  001ad	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001b0	e9 8d 00 00 00	 jmp	 $LN111@LoadString
$LN71@LoadString:
  001b5	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b9	e9 84 00 00 00	 jmp	 $LN111@LoadString
$LN72@LoadString:
  001be	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001c2	eb 7e		 jmp	 SHORT $LN111@LoadString
$LN73@LoadString:
  001c4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001c7	eb 79		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  001c9	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001cc	eb 74		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  001ce	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001d2	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  001d4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001d7	eb 69		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  001d9	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001dc	eb 64		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  001de	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001e2	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  001e4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e8	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  001ea	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001ed	eb 53		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  001ef	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001f2	eb 4e		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  001f4	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f8	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001fa	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001fe	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  00200	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00203	eb 3d		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00205	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00208	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0020a	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0020e	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  00210	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00214	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00216	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00219	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  0021b	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  0021e	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00220	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00224	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00226	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0022a	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  0022c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00230	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  00232	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00236	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00238	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0023c	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0023e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  00242	6a 05		 push	 5
  00244	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00247	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  0024b	5a		 pop	 edx
$LL104@LoadString:
  0024c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00252	83 c0 04	 add	 eax, 4
  00255	4a		 dec	 edx
  00256	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00258	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0025b	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0025e	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00262	57		 push	 edi
  00263	56		 push	 esi
  00264	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00267	50		 push	 eax
  00268	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0026e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	33 cd		 xor	 ecx, ebp
  00275	5b		 pop	 ebx
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	c9		 leave
  0027c	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<22>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<24>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 45 02 00
	00		 je	 $LN96@LoadString@2
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 2e 02 00
	00		 je	 $LN95@LoadString@2
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 16 02 00
	00		 je	 $LN94@LoadString@2
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 fe 01 00
	00		 je	 $LN93@LoadString@2
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 e7 01 00
	00		 je	 $LN92@LoadString@2
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 d1 01 00
	00		 je	 $LN91@LoadString@2
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 bc 01 00
	00		 je	 $LN90@LoadString@2
  00090	32 d1		 xor	 dl, cl
  00092	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 a6 01 00
	00		 je	 $LN89@LoadString@2
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 8f 01 00
	00		 je	 $LN88@LoadString@2
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 79 01 00
	00		 je	 $LN87@LoadString@2
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 64 01 00
	00		 je	 $LN86@LoadString@2
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 4e 01 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 37 01 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 21 01 00
	00		 je	 $LN83@LoadString@2
  00104	32 d3		 xor	 dl, bl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 0c 01 00
	00		 je	 $LN82@LoadString@2
  00114	32 d1		 xor	 dl, cl
  00116	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 f6 00 00
	00		 je	 $LN81@LoadString@2
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 df 00 00
	00		 je	 $LN80@LoadString@2
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 c9 00 00
	00		 je	 $LN79@LoadString@2
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 b4 00 00
	00		 je	 $LN78@LoadString@2
  00156	32 d1		 xor	 dl, cl
  00158	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015e	84 d2		 test	 dl, dl
  00160	0f 84 9e 00 00
	00		 je	 $LN77@LoadString@2
  00166	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00169	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 87 00 00
	00		 je	 $LN76@LoadString@2
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	74 75		 je	 SHORT $LN75@LoadString@2
  00184	32 d3		 xor	 dl, bl
  00186	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00189	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0018c	84 d2		 test	 dl, dl
  0018e	74 64		 je	 SHORT $LN74@LoadString@2
  00190	32 d1		 xor	 dl, cl
  00192	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  00196	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00199	0f 84 d3 00 00
	00		 je	 $LN111@LoadString@2
  0019f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a2	84 d2		 test	 dl, dl
  001a4	74 48		 je	 SHORT $LN72@LoadString@2
  001a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a9	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001ac	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001af	84 d2		 test	 dl, dl
  001b1	74 33		 je	 SHORT $LN71@LoadString@2
  001b3	32 d3		 xor	 dl, bl
  001b5	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b8	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bb	84 d2		 test	 dl, dl
  001bd	74 1f		 je	 SHORT $LN70@LoadString@2
  001bf	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001c7	84 c0		 test	 al, al
  001c9	74 0a		 je	 SHORT $LN69@LoadString@2
  001cb	34 ea		 xor	 al, -22			; ffffffeaH
  001cd	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001d0	e9 9d 00 00 00	 jmp	 $LN111@LoadString@2
$LN69@LoadString@2:
  001d5	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d9	e9 94 00 00 00	 jmp	 $LN111@LoadString@2
$LN70@LoadString@2:
  001de	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001e1	e9 8c 00 00 00	 jmp	 $LN111@LoadString@2
$LN71@LoadString@2:
  001e6	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e9	e9 84 00 00 00	 jmp	 $LN111@LoadString@2
$LN72@LoadString@2:
  001ee	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001f2	eb 7e		 jmp	 SHORT $LN111@LoadString@2
$LN74@LoadString@2:
  001f4	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001f7	eb 79		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  001f9	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001fc	eb 74		 jmp	 SHORT $LN111@LoadString@2
$LN76@LoadString@2:
  001fe	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00202	eb 6e		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  00204	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00208	eb 68		 jmp	 SHORT $LN111@LoadString@2
$LN78@LoadString@2:
  0020a	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  0020d	eb 63		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  0020f	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  00212	eb 5e		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  00214	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00218	eb 58		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  0021a	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0021e	eb 52		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  00220	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  00223	eb 4d		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  00225	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00228	eb 48		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  0022a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0022e	eb 42		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  00230	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00234	eb 3c		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  00236	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00239	eb 37		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  0023b	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  0023e	eb 32		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  00240	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00244	eb 2c		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  00246	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0024a	eb 26		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  0024c	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  0024f	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  00251	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  00254	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  00256	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0025a	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  0025c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00260	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  00262	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00266	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00268	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0026c	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  0026e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  00272	6a 05		 push	 5
  00274	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00277	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  0027b	5a		 pop	 edx
$LL104@LoadString@2:
  0027c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00282	83 c0 04	 add	 eax, 4
  00285	4a		 dec	 edx
  00286	75 f4		 jne	 SHORT $LL104@LoadString@2
  00288	6a 14		 push	 20			; 00000014H
  0028a	58		 pop	 eax
$LL101@LoadString@2:
  0028b	8b c8		 mov	 ecx, eax
  0028d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00293	79 05		 jns	 SHORT $LN112@LoadString@2
  00295	49		 dec	 ecx
  00296	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00299	41		 inc	 ecx
$LN112@LoadString@2:
  0029a	b2 ed		 mov	 dl, -19			; ffffffedH
  0029c	2a d1		 sub	 dl, cl
  0029e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  002a2	40		 inc	 eax
  002a3	83 f8 17	 cmp	 eax, 23			; 00000017H
  002a6	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  002a8	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002ab	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002ae	57		 push	 edi
  002af	56		 push	 esi
  002b0	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002b3	50		 push	 eax
  002b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	33 cd		 xor	 ecx, ebp
  002c1	5b		 pop	 ebx
  002c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c7	c9		 leave
  002c8	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z ; ioINILoader::LoadFloat_e<29>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -40						; size = 29
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<29>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 c3 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 ac 02 00
	00		 je	 $LN95@LoadFloat_
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 94 02 00
	00		 je	 $LN94@LoadFloat_
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 7c 02 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 65 02 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 4f 02 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 3a 02 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 24 02 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 0d 02 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 f7 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 e2 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 cc 01 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 b5 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 9f 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 8a 01 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 74 01 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 5d 01 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 47 01 00
	00		 je	 $LN79@LoadFloat_
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 32 01 00
	00		 je	 $LN78@LoadFloat_
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 1c 01 00
	00		 je	 $LN77@LoadFloat_
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 05 01 00
	00		 je	 $LN76@LoadFloat_
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 ef 00 00
	00		 je	 $LN75@LoadFloat_
  00180	32 d1		 xor	 dl, cl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 da 00 00
	00		 je	 $LN74@LoadFloat_
  00190	32 d3		 xor	 dl, bl
  00192	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 c4 00 00
	00		 je	 $LN73@LoadFloat_
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 aa 00 00
	00		 je	 $LN72@LoadFloat_
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 91 00 00
	00		 je	 $LN71@LoadFloat_
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	74 7d		 je	 SHORT $LN70@LoadFloat_
  001ce	32 d3		 xor	 dl, bl
  001d0	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001d6	84 d2		 test	 dl, dl
  001d8	74 68		 je	 SHORT $LN69@LoadFloat_
  001da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dd	80 78 1c 00	 cmp	 BYTE PTR [eax+28], 0
  001e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e4	0f 84 fe 00 00
	00		 je	 $LN1@LoadFloat_
  001ea	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001ed	84 d2		 test	 dl, dl
  001ef	74 49		 je	 SHORT $LN67@LoadFloat_
  001f1	32 d1		 xor	 dl, cl
  001f3	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  001f6	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f9	84 d2		 test	 dl, dl
  001fb	74 35		 je	 SHORT $LN66@LoadFloat_
  001fd	32 d3		 xor	 dl, bl
  001ff	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00202	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  00205	84 d2		 test	 dl, dl
  00207	74 20		 je	 SHORT $LN65@LoadFloat_
  00209	8a 40 20	 mov	 al, BYTE PTR [eax+32]
  0020c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0020f	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00212	84 c0		 test	 al, al
  00214	74 0a		 je	 SHORT $LN64@LoadFloat_
  00216	34 ed		 xor	 al, -19			; ffffffedH
  00218	88 45 f8	 mov	 BYTE PTR __k$[ebp+32], al
  0021b	e9 c8 00 00 00	 jmp	 $LN1@LoadFloat_
$LN64@LoadFloat_:
  00220	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  00224	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_
$LN65@LoadFloat_:
  00229	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  0022d	e9 b6 00 00 00	 jmp	 $LN1@LoadFloat_
$LN66@LoadFloat_:
  00232	88 5d f6	 mov	 BYTE PTR __k$[ebp+30], bl
  00235	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_
$LN67@LoadFloat_:
  0023a	88 4d f5	 mov	 BYTE PTR __k$[ebp+29], cl
  0023d	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_
$LN69@LoadFloat_:
  00242	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  00246	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  0024b	88 5d f2	 mov	 BYTE PTR __k$[ebp+26], bl
  0024e	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  00253	88 4d f1	 mov	 BYTE PTR __k$[ebp+25], cl
  00256	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  0025b	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0025f	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN73@LoadFloat_:
  00264	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00268	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  0026a	88 5d ee	 mov	 BYTE PTR __k$[ebp+22], bl
  0026d	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0026f	88 4d ed	 mov	 BYTE PTR __k$[ebp+21], cl
  00272	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00274	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00278	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  0027a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0027e	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00280	88 5d ea	 mov	 BYTE PTR __k$[ebp+18], bl
  00283	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00285	88 4d e9	 mov	 BYTE PTR __k$[ebp+17], cl
  00288	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0028a	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0028e	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00290	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00294	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00296	88 5d e6	 mov	 BYTE PTR __k$[ebp+14], bl
  00299	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0029b	88 4d e5	 mov	 BYTE PTR __k$[ebp+13], cl
  0029e	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  002a0	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002a4	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  002a6	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  002aa	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  002ac	88 5d e2	 mov	 BYTE PTR __k$[ebp+10], bl
  002af	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  002b1	88 4d e1	 mov	 BYTE PTR __k$[ebp+9], cl
  002b4	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  002b6	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002ba	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  002bc	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002c0	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  002c2	88 5d de	 mov	 BYTE PTR __k$[ebp+6], bl
  002c5	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  002c7	88 4d dd	 mov	 BYTE PTR __k$[ebp+5], cl
  002ca	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  002cc	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002d0	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  002d2	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002d6	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  002d8	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002dc	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  002de	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002e2	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  002e4	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  002e8	6a 07		 push	 7
  002ea	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  002ed	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+28], 0
  002f1	5a		 pop	 edx
$LL104@LoadFloat_:
  002f2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002f8	83 c0 04	 add	 eax, 4
  002fb	4a		 dec	 edx
  002fc	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  002fe	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00303	51		 push	 ecx
  00304	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030c	50		 push	 eax
  0030d	8b ce		 mov	 ecx, esi
  0030f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00315	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00318	5e		 pop	 esi
  00319	33 cd		 xor	 ecx, ebp
  0031b	5b		 pop	 ebx
  0031c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00321	c9		 leave
  00322	c2 08 00	 ret	 8
??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<29>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_@2
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_@2
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_@2
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_@2
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_@2
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_@2
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_@2
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_@2:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ; ioINILoader::LoadInt_e<12>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<12>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@LoadInt_e@5
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@LoadInt_e@5
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@LoadInt_e@5
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@LoadInt_e@5
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@LoadInt_e@5
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@LoadInt_e@5
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@LoadInt_e@5
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@LoadInt_e@5
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@LoadInt_e@5
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@LoadInt_e@5
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@LoadInt_e@5
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@LoadInt_e@5
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@LoadInt_e@5
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@LoadInt_e@5
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@LoadInt_e@5
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@LoadInt_e@5
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@LoadInt_e@5
$LN81@LoadInt_e@5:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@5
$LN82@LoadInt_e@5:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@5
$LN83@LoadInt_e@5:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@LoadInt_e@5
$LN84@LoadInt_e@5:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN86@LoadInt_e@5:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@LoadInt_e@5
$LN87@LoadInt_e@5:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@LoadInt_e@5
$LN88@LoadInt_e@5:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@5
$LN89@LoadInt_e@5:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@LoadInt_e@5
$LN90@LoadInt_e@5:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@LoadInt_e@5
$LN91@LoadInt_e@5:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN92@LoadInt_e@5:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@LoadInt_e@5
$LN93@LoadInt_e@5:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@LoadInt_e@5
$LN94@LoadInt_e@5:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@5
$LN95@LoadInt_e@5:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@LoadInt_e@5
$LN96@LoadInt_e@5:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@5:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@LoadInt_e@5:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@LoadInt_e@5
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@LoadInt_e@5:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@LoadInt_e@5
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@LoadInt_e@5:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@LoadInt_e@5

; 120  : 		return LoadInt(_k, i);

  0018c	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018f	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00192	50		 push	 eax
  00193	8b ce		 mov	 ecx, esi
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019e	33 cd		 xor	 ecx, ebp
  001a0	5e		 pop	 esi
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	c9		 leave
  001a7	c2 08 00	 ret	 8
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<12>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@AAPAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@AAPAV2@@Z ; std::_Cons_val<std::allocator<ioPushStruct *>,ioPushStruct *,ioPushStruct * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@AAPAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@AAPAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<ioPushStruct *>,ioPushStruct *,ioPushStruct * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@AAPAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioPushStruct *>,ioPushStruct *,ioPushStruct * &>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00@Z ; std::_Move<ioPushStruct * *,ioPushStruct * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00@Z
_TEXT	SEGMENT
__Cat$534676 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00@Z PROC ; std::_Move<ioPushStruct * *,ioPushStruct * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$534676[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioPushStruct * *,ioPushStruct * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00@Z ENDP ; std::_Move<ioPushStruct * *,ioPushStruct * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@@Z ; std::_Destroy_range<std::allocator<ioPushStruct *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioPushStruct *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioPushStruct@@@std@@@std@@YAXPAPAVioPushStruct@@0AAV?$allocator@PAVioPushStruct@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioPushStruct *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@ABQAV3@@Z ; std::allocator<ioPushStruct *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@ABQAV3@@Z PROC ; std::allocator<ioPushStruct *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@2:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVioPushStruct@@@std@@QAEXPAPAVioPushStruct@@ABQAV3@@Z ENDP ; std::allocator<ioPushStruct *>::construct
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVioPushStruct@@PAPAV1@V?$allocator@PAVioPushStruct@@@std@@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@@Z ; std::_Uninitialized_move<ioPushStruct * *,ioPushStruct * *,std::allocator<ioPushStruct *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVioPushStruct@@PAPAV1@V?$allocator@PAVioPushStruct@@@std@@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVioPushStruct@@PAPAV1@V?$allocator@PAVioPushStruct@@@std@@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@@Z PROC ; std::_Uninitialized_move<ioPushStruct * *,ioPushStruct * *,std::allocator<ioPushStruct *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVioPushStruct@@PAPAV1@V?$allocator@PAVioPushStruct@@@std@@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@@Z ENDP ; std::_Uninitialized_move<ioPushStruct * *,ioPushStruct * *,std::allocator<ioPushStruct *> >
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadBlockInfo@ioPushStructListManager@@IAEXXZ	; ioPushStructListManager::LoadBlockInfo
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	_memset:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
CONST	ENDS
;	COMDAT ?LoadBlockInfo@ioPushStructListManager@@IAEXXZ
_TEXT	SEGMENT
tv8570 = -304						; size = 4
_szBuf$ = -300						; size = 260
__k$535636 = -40					; size = 29
__k$535603 = -36					; size = 24
__k$535382 = -36					; size = 22
__k$535257 = -36					; size = 24
__k$535119 = -36					; size = 22
__k$534994 = -32					; size = 21
__k$535761 = -28					; size = 17
__k$534869 = -28					; size = 14
__t$534744 = -24					; size = 11
__$ArrayPad$ = -4					; size = 4
?LoadBlockInfo@ioPushStructListManager@@IAEXXZ PROC	; ioPushStructListManager::LoadBlockInfo, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi

; 35   : 	//ioINILoader kStructLoader( "config/sp2_push_struct.ini" );
; 36   : 
; 37   : 	char szKey[MAX_PATH] = "";
; 38   : 	char szBuf[MAX_PATH] = "";

  00015	33 db		 xor	 ebx, ebx
  00017	68 03 01 00 00	 push	 259			; 00000103H
  0001c	8d 85 d5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00022	53		 push	 ebx
  00023	50		 push	 eax
  00024	8b f1		 mov	 esi, ecx
  00026	88 9d d4 fe ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  0002c	e8 00 00 00 00	 call	 _memset
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   : 
; 40   : 	m_StructLoader.SetTitle_e( "block_info" );

  00034	6a 02		 push	 2
  00036	c7 45 e8 8f 80
	84 89		 mov	 DWORD PTR __t$534744[ebp], -1987805041 ; 8984808fH
  0003d	c7 45 ec 86 b3
	82 84		 mov	 DWORD PTR __t$534744[ebp+4], -2071809146 ; 8482b386H
  00044	66 c7 45 f0 8b
	83		 mov	 WORD PTR __t$534744[ebp+8], 33675 ; 0000838bH
  0004a	8d 45 e8	 lea	 eax, DWORD PTR __t$534744[ebp]
  0004d	88 5d f2	 mov	 BYTE PTR __t$534744[ebp+10], bl
  00050	59		 pop	 ecx
$LL106@LoadBlockI:
  00051	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00057	83 c0 04	 add	 eax, 4
  0005a	49		 dec	 ecx
  0005b	75 f4		 jne	 SHORT $LL106@LoadBlockI
  0005d	57		 push	 edi
  0005e	6a 08		 push	 8
  00060	5f		 pop	 edi
$LL103@LoadBlockI:
  00061	8b c7		 mov	 eax, edi
  00063	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00068	79 05		 jns	 SHORT $LN995@LoadBlockI
  0006a	48		 dec	 eax
  0006b	83 c8 fc	 or	 eax, -4			; fffffffcH
  0006e	40		 inc	 eax
$LN995@LoadBlockI:
  0006f	b1 ed		 mov	 cl, -19			; ffffffedH
  00071	2a c8		 sub	 cl, al
  00073	30 4c 3d e8	 xor	 BYTE PTR __t$534744[ebp+edi], cl
  00077	47		 inc	 edi
  00078	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0007b	7c e4		 jl	 SHORT $LL103@LoadBlockI
  0007d	8d 45 e8	 lea	 eax, DWORD PTR __t$534744[ebp]
  00080	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00083	50		 push	 eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z
  0008a	6a 03		 push	 3

; 41   : 
; 42   : 	m_iBlockMaxCnt = m_StructLoader.LoadInt_e( "block_max_cnt", 0 );

  0008c	c7 45 e4 8f 80
	84 89		 mov	 DWORD PTR __k$534869[ebp], -1987805041 ; 8984808fH
  00093	c7 45 e8 86 b3
	86 8b		 mov	 DWORD PTR __k$534869[ebp+4], -1954106490 ; 8b86b386H
  0009a	c7 45 ec 95 b3
	88 84		 mov	 DWORD PTR __k$534869[ebp+8], -2071415915 ; 8488b395H
  000a1	8d 45 e4	 lea	 eax, DWORD PTR __k$534869[ebp]
  000a4	66 c7 45 f0 99
	00		 mov	 WORD PTR __k$534869[ebp+12], 153 ; 00000099H
  000aa	59		 pop	 ecx
$LL212@LoadBlockI:
  000ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b1	83 c0 04	 add	 eax, 4
  000b4	49		 dec	 ecx
  000b5	75 f4		 jne	 SHORT $LL212@LoadBlockI
  000b7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  000bd	80 75 f0 ed	 xor	 BYTE PTR __k$534869[ebp+12], -19 ; ffffffedH
  000c1	53		 push	 ebx
  000c2	8d 45 e4	 lea	 eax, DWORD PTR __k$534869[ebp]
  000c5	50		 push	 eax
  000c6	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000c9	ff d7		 call	 edi
  000cb	6a 05		 push	 5
  000cd	89 86 2c 03 00
	00		 mov	 DWORD PTR [esi+812], eax

; 43   : 	m_iBlockMyRoomMaxCnt = m_StructLoader.LoadInt_e( "block_myroom_max_cnt", 0 );

  000d3	c7 45 e0 8f 80
	84 89		 mov	 DWORD PTR __k$534994[ebp], -1987805041 ; 8984808fH
  000da	c7 45 e4 86 b3
	86 93		 mov	 DWORD PTR __k$534994[ebp+4], -1819888762 ; 9386b386H
  000e1	c7 45 e8 9f 83
	84 87		 mov	 DWORD PTR __k$534994[ebp+8], -2021358689 ; 8784839fH
  000e8	c7 45 ec b2 81
	8a 92		 mov	 DWORD PTR __k$534994[ebp+12], -1836416590 ; 928a81b2H
  000ef	c7 45 f0 b2 8f
	85 9e		 mov	 DWORD PTR __k$534994[ebp+16], -1635414094 ; 9e858fb2H
  000f6	8d 45 e0	 lea	 eax, DWORD PTR __k$534994[ebp]
  000f9	88 5d f4	 mov	 BYTE PTR __k$534994[ebp+20], bl
  000fc	59		 pop	 ecx
$LL318@LoadBlockI:
  000fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00103	83 c0 04	 add	 eax, 4
  00106	49		 dec	 ecx
  00107	75 f4		 jne	 SHORT $LL318@LoadBlockI
  00109	53		 push	 ebx
  0010a	8d 45 e0	 lea	 eax, DWORD PTR __k$534994[ebp]
  0010d	50		 push	 eax
  0010e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00111	ff d7		 call	 edi
  00113	6a 05		 push	 5
  00115	89 86 30 03 00
	00		 mov	 DWORD PTR [esi+816], eax

; 44   : 	m_iBlockEtcMaxCnt = m_StructLoader.LoadInt_e( "block_etcitem_max_cnt", 0 );

  0011b	c7 45 dc 8f 80
	84 89		 mov	 DWORD PTR __k$535119[ebp], -1987805041 ; 8984808fH
  00122	c7 45 e0 86 b3
	8e 9e		 mov	 DWORD PTR __k$535119[ebp+4], -1634815098 ; 9e8eb386H
  00129	c7 45 e4 8e 85
	9f 8f		 mov	 DWORD PTR __k$535119[ebp+8], -1885370994 ; 8f9f858eH
  00130	c7 45 e8 80 b3
	86 8b		 mov	 DWORD PTR __k$535119[ebp+12], -1954106496 ; 8b86b380H
  00137	c7 45 ec 95 b3
	88 84		 mov	 DWORD PTR __k$535119[ebp+16], -2071415915 ; 8488b395H
  0013e	8d 45 dc	 lea	 eax, DWORD PTR __k$535119[ebp]
  00141	66 c7 45 f0 99
	00		 mov	 WORD PTR __k$535119[ebp+20], 153 ; 00000099H
  00147	59		 pop	 ecx
$LL424@LoadBlockI:
  00148	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014e	83 c0 04	 add	 eax, 4
  00151	49		 dec	 ecx
  00152	75 f4		 jne	 SHORT $LL424@LoadBlockI
  00154	80 75 f0 ed	 xor	 BYTE PTR __k$535119[ebp+20], -19 ; ffffffedH
  00158	53		 push	 ebx
  00159	8d 45 dc	 lea	 eax, DWORD PTR __k$535119[ebp]
  0015c	50		 push	 eax
  0015d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00160	ff d7		 call	 edi
  00162	6a 05		 push	 5
  00164	89 86 34 03 00
	00		 mov	 DWORD PTR [esi+820], eax

; 45   : 	m_dwBlockCreateDelayTime = m_StructLoader.LoadInt_e( "block_create_delay_time", 0 );

  0016a	c7 45 dc 8f 80
	84 89		 mov	 DWORD PTR __k$535257[ebp], -1987805041 ; 8984808fH
  00171	c7 45 e0 86 b3
	88 98		 mov	 DWORD PTR __k$535257[ebp+4], -1735871610 ; 9888b386H
  00178	c7 45 e4 88 8d
	9f 8f		 mov	 DWORD PTR __k$535257[ebp+8], -1885368952 ; 8f9f8d88H
  0017f	c7 45 e8 b2 88
	8e 86		 mov	 DWORD PTR __k$535257[ebp+12], -2037479246 ; 868e88b2H
  00186	c7 45 ec 8c 95
	b4 9e		 mov	 DWORD PTR __k$535257[ebp+16], -1632332404 ; 9eb4958cH
  0018d	8d 45 dc	 lea	 eax, DWORD PTR __k$535257[ebp]
  00190	c7 45 f0 84 81
	8e 00		 mov	 DWORD PTR __k$535257[ebp+20], 9339268 ; 008e8184H
  00197	59		 pop	 ecx
$LL530@LoadBlockI:
  00198	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0019e	83 c0 04	 add	 eax, 4
  001a1	49		 dec	 ecx
  001a2	75 f4		 jne	 SHORT $LL530@LoadBlockI
  001a4	6a 14		 push	 20			; 00000014H
  001a6	58		 pop	 eax
$LL527@LoadBlockI:
  001a7	8b c8		 mov	 ecx, eax
  001a9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001af	79 05		 jns	 SHORT $LN996@LoadBlockI
  001b1	49		 dec	 ecx
  001b2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001b5	41		 inc	 ecx
$LN996@LoadBlockI:
  001b6	b2 ed		 mov	 dl, -19			; ffffffedH
  001b8	2a d1		 sub	 dl, cl
  001ba	30 54 05 dc	 xor	 BYTE PTR __k$535257[ebp+eax], dl
  001be	40		 inc	 eax
  001bf	83 f8 17	 cmp	 eax, 23			; 00000017H
  001c2	7c e3		 jl	 SHORT $LL527@LoadBlockI
  001c4	53		 push	 ebx
  001c5	8d 45 dc	 lea	 eax, DWORD PTR __k$535257[ebp]
  001c8	50		 push	 eax
  001c9	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  001cc	ff d7		 call	 edi
  001ce	6a 05		 push	 5
  001d0	89 86 60 03 00
	00		 mov	 DWORD PTR [esi+864], eax

; 46   : 
; 47   : 	m_StructLoader.LoadString_e( "block_create_loop_ani", "", szBuf, MAX_PATH );

  001d6	c7 45 dc 8f 80
	84 89		 mov	 DWORD PTR __k$535382[ebp], -1987805041 ; 8984808fH
  001dd	c7 45 e0 86 b3
	88 98		 mov	 DWORD PTR __k$535382[ebp+4], -1735871610 ; 9888b386H
  001e4	c7 45 e4 88 8d
	9f 8f		 mov	 DWORD PTR __k$535382[ebp+8], -1885368952 ; 8f9f8d88H
  001eb	c7 45 e8 b2 80
	84 85		 mov	 DWORD PTR __k$535382[ebp+12], -2054913870 ; 858480b2H
  001f2	c7 45 ec 9d b3
	8a 84		 mov	 DWORD PTR __k$535382[ebp+16], -2071284835 ; 848ab39dH
  001f9	8d 45 dc	 lea	 eax, DWORD PTR __k$535382[ebp]
  001fc	66 c7 45 f0 84
	00		 mov	 WORD PTR __k$535382[ebp+20], 132 ; 00000084H
  00202	59		 pop	 ecx
$LL636@LoadBlockI:
  00203	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00209	83 c0 04	 add	 eax, 4
  0020c	49		 dec	 ecx
  0020d	75 f4		 jne	 SHORT $LL636@LoadBlockI
  0020f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  00215	80 75 f0 ed	 xor	 BYTE PTR __k$535382[ebp+20], -19 ; ffffffedH
  00219	68 04 01 00 00	 push	 260			; 00000104H
  0021e	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00224	50		 push	 eax
  00225	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0022a	8d 45 dc	 lea	 eax, DWORD PTR __k$535382[ebp]
  0022d	50		 push	 eax
  0022e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00231	ff d7		 call	 edi

; 48   : 	m_szBlockCreateLoopAni = szBuf;

  00233	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00239	50		 push	 eax
  0023a	8d 8e 38 03 00
	00		 lea	 ecx, DWORD PTR [esi+824]
  00240	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00246	6a 05		 push	 5

; 49   : 	m_StructLoader.LoadString_e( "block_create_action_ani", "", szBuf, MAX_PATH );

  00248	c7 45 dc 8f 80
	84 89		 mov	 DWORD PTR __k$535603[ebp], -1987805041 ; 8984808fH
  0024f	c7 45 e0 86 b3
	88 98		 mov	 DWORD PTR __k$535603[ebp+4], -1735871610 ; 9888b386H
  00256	c7 45 e4 88 8d
	9f 8f		 mov	 DWORD PTR __k$535603[ebp+8], -1885368952 ; 8f9f8d88H
  0025d	c7 45 e8 b2 8d
	88 9e		 mov	 DWORD PTR __k$535603[ebp+12], -1635217998 ; 9e888db2H
  00264	c7 45 ec 84 83
	85 b5		 mov	 DWORD PTR __k$535603[ebp+16], -1249541244 ; b5858384H
  0026b	8d 45 dc	 lea	 eax, DWORD PTR __k$535603[ebp]
  0026e	c7 45 f0 8c 82
	82 00		 mov	 DWORD PTR __k$535603[ebp+20], 8553100 ; 0082828cH
  00275	59		 pop	 ecx
$LL742@LoadBlockI:
  00276	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027c	83 c0 04	 add	 eax, 4
  0027f	49		 dec	 ecx
  00280	75 f4		 jne	 SHORT $LL742@LoadBlockI
  00282	6a 14		 push	 20			; 00000014H
  00284	58		 pop	 eax
$LL739@LoadBlockI:
  00285	8b c8		 mov	 ecx, eax
  00287	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028d	79 05		 jns	 SHORT $LN997@LoadBlockI
  0028f	49		 dec	 ecx
  00290	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00293	41		 inc	 ecx
$LN997@LoadBlockI:
  00294	b2 ed		 mov	 dl, -19			; ffffffedH
  00296	2a d1		 sub	 dl, cl
  00298	30 54 05 dc	 xor	 BYTE PTR __k$535603[ebp+eax], dl
  0029c	40		 inc	 eax
  0029d	83 f8 17	 cmp	 eax, 23			; 00000017H
  002a0	7c e3		 jl	 SHORT $LL739@LoadBlockI
  002a2	68 04 01 00 00	 push	 260			; 00000104H
  002a7	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002ad	50		 push	 eax
  002ae	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002b3	8d 45 dc	 lea	 eax, DWORD PTR __k$535603[ebp]
  002b6	50		 push	 eax
  002b7	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  002ba	ff d7		 call	 edi

; 50   : 	m_szBlockCreateActionAni = szBuf;

  002bc	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002c2	50		 push	 eax
  002c3	8d 8e 48 03 00
	00		 lea	 ecx, DWORD PTR [esi+840]
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 51   : 	
; 52   : 	m_fBlockCreateActionAniRate = m_StructLoader.LoadFloat_e( "block_create_action_ani_rate", FLOAT1 );

  002cf	b8 01 00 00 00	 mov	 eax, 1
  002d4	6a 07		 push	 7
  002d6	5a		 pop	 edx
  002d7	c7 45 d8 8f 80
	84 89		 mov	 DWORD PTR __k$535636[ebp], -1987805041 ; 8984808fH
  002de	c7 45 dc 86 b3
	88 98		 mov	 DWORD PTR __k$535636[ebp+4], -1735871610 ; 9888b386H
  002e5	c7 45 e0 88 8d
	9f 8f		 mov	 DWORD PTR __k$535636[ebp+8], -1885368952 ; 8f9f8d88H
  002ec	c7 45 e4 b2 8d
	88 9e		 mov	 DWORD PTR __k$535636[ebp+12], -1635217998 ; 9e888db2H
  002f3	c7 45 e8 84 83
	85 b5		 mov	 DWORD PTR __k$535636[ebp+16], -1249541244 ; b5858384H
  002fa	c7 45 ec 8c 82
	82 b5		 mov	 DWORD PTR __k$535636[ebp+20], -1249738100 ; b582828cH
  00301	c7 45 f0 9f 8d
	9f 8f		 mov	 DWORD PTR __k$535636[ebp+24], -1885368929 ; 8f9f8d9fH
  00308	8d 4d d8	 lea	 ecx, DWORD PTR __k$535636[ebp]
  0030b	88 5d f4	 mov	 BYTE PTR __k$535636[ebp+28], bl
  0030e	5f		 pop	 edi
$LL850@LoadBlockI:
  0030f	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00315	83 c1 04	 add	 ecx, 4
  00318	4a		 dec	 edx
  00319	75 f4		 jne	 SHORT $LL850@LoadBlockI
  0031b	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv8570[ebp], eax
  00321	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv8570[ebp]
  00327	85 c0		 test	 eax, eax
  00329	79 06		 jns	 SHORT $LN998@LoadBlockI
  0032b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN998@LoadBlockI:
  00331	51		 push	 ecx
  00332	8d 45 d8	 lea	 eax, DWORD PTR __k$535636[ebp]
  00335	d9 1c 24	 fstp	 DWORD PTR [esp]
  00338	50		 push	 eax
  00339	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0033c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00342	d9 9e 58 03 00
	00		 fstp	 DWORD PTR [esi+856]
  00348	6a 04		 push	 4

; 53   : 	m_fBlockGuidSpeed = m_StructLoader.LoadFloat_e("block_guid_speed", 0.0f );

  0034a	c7 45 e4 8f 80
	84 89		 mov	 DWORD PTR __k$535761[ebp], -1987805041 ; 8984808fH
  00351	c7 45 e8 86 b3
	8c 9f		 mov	 DWORD PTR __k$535761[ebp+4], -1618168954 ; 9f8cb386H
  00358	c7 45 ec 84 88
	b4 99		 mov	 DWORD PTR __k$535761[ebp+8], -1716221820 ; 99b48884H
  0035f	c7 45 f0 9d 89
	8e 8e		 mov	 DWORD PTR __k$535761[ebp+12], -1903261283 ; 8e8e899dH
  00366	8d 45 e4	 lea	 eax, DWORD PTR __k$535761[ebp]
  00369	88 5d f4	 mov	 BYTE PTR __k$535761[ebp+16], bl
  0036c	59		 pop	 ecx
$LL956@LoadBlockI:
  0036d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00373	83 c0 04	 add	 eax, 4
  00376	49		 dec	 ecx
  00377	75 f4		 jne	 SHORT $LL956@LoadBlockI
  00379	0f 57 c0	 xorps	 xmm0, xmm0
  0037c	51		 push	 ecx
  0037d	8d 45 e4	 lea	 eax, DWORD PTR __k$535761[ebp]
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	50		 push	 eax
  00386	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00389	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0038f	d9 9e 5c 03 00
	00		 fstp	 DWORD PTR [esi+860]

; 54   : }

  00395	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00398	5e		 pop	 esi
  00399	33 cd		 xor	 ecx, ebp
  0039b	5b		 pop	 ebx
  0039c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a1	c9		 leave
  003a2	c3		 ret	 0
?LoadBlockInfo@ioPushStructListManager@@IAEXXZ ENDP	; ioPushStructListManager::LoadBlockInfo
_TEXT	ENDS
PUBLIC	??0?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::vector<ioPushStruct *,std::allocator<ioPushStruct *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::vector<ioPushStruct *,std::allocator<ioPushStruct *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::vector<ioPushStruct *,std::allocator<ioPushStruct *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@XZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::end
_TEXT	ENDS
PUBLIC	?front@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::front
; Function compile flags: /Ogsp
;	COMDAT ?front@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@XZ
_TEXT	SEGMENT
?front@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@XZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::front, COMDAT
; _this$ = ecx

; 957  : 		return (*begin());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 958  : 		}

  00002	c3		 ret	 0
?front@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEAAPAVioPushStruct@@XZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::front
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioPushStruct *,std::allocator<ioPushStruct *> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXPAPAVioPushStruct@@0@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXPAPAVioPushStruct@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXPAPAVioPushStruct@@0@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXPAPAVioPushStruct@@0@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@ABQAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@ABQAV2@@Z ; std::_Cons_val<std::allocator<ioPushStruct *>,ioPushStruct *,ioPushStruct * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@ABQAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@ABQAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<ioPushStruct *>,ioPushStruct *,ioPushStruct * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioPushStruct@@@std@@PAVioPushStruct@@ABQAV3@@std@@YAXAAV?$allocator@PAVioPushStruct@@@0@PAPAVioPushStruct@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioPushStruct *>,ioPushStruct *,ioPushStruct * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVioPushStruct@@@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEPAPAVioPushStruct@@PAPAV2@00@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Umove<ioPushStruct * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVioPushStruct@@@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEPAPAVioPushStruct@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVioPushStruct@@@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEPAPAVioPushStruct@@PAPAV2@00@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Umove<ioPushStruct * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioPushStruct@@PAPAV1@V?$allocator@PAVioPushStruct@@@std@@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@@Z ; std::_Uninitialized_move<ioPushStruct * *,ioPushStruct * *,std::allocator<ioPushStruct *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVioPushStruct@@@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEPAPAVioPushStruct@@PAPAV2@00@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Umove<ioPushStruct * *>
_TEXT	ENDS
PUBLIC	?GetCurPushStructCntByType@ioPushStructListManager@@QAEHW4PushStructType@@@Z ; ioPushStructListManager::GetCurPushStructCntByType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
;	COMDAT ?GetCurPushStructCntByType@ioPushStructListManager@@QAEHW4PushStructType@@@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
?GetCurPushStructCntByType@ioPushStructListManager@@QAEHW4PushStructType@@@Z PROC ; ioPushStructListManager::GetCurPushStructCntByType, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 296  : 	int iCurCnt = 0;
; 297  : 	PushList::iterator iter = m_vPushStructList.begin();

  00008	8b b7 14 03 00
	00		 mov	 esi, DWORD PTR [edi+788]
  0000e	33 db		 xor	 ebx, ebx
  00010	eb 1b		 jmp	 SHORT $LN40@GetCurPush@2
$LL3@GetCurPush@2:

; 299  : 	{
; 300  : 		ioPushStruct *pPush = ToPushStruct( *iter );

  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ?ToPushStruct@@YAPAVioPushStruct@@PAVioGameEntity@@@Z ; ToPushStruct
  00019	59		 pop	 ecx

; 301  : 		if( pPush && pPush->GetStructType() == eType )

  0001a	85 c0		 test	 eax, eax
  0001c	74 0c		 je	 SHORT $LN1@GetCurPush@2
  0001e	8b 80 e0 01 00
	00		 mov	 eax, DWORD PTR [eax+480]
  00024	3b 45 08	 cmp	 eax, DWORD PTR _eType$[ebp]
  00027	75 01		 jne	 SHORT $LN1@GetCurPush@2

; 302  : 			++iCurCnt;

  00029	43		 inc	 ebx
$LN1@GetCurPush@2:

; 303  : 
; 304  : 		++iter;

  0002a	83 c6 04	 add	 esi, 4
$LN40@GetCurPush@2:

; 298  : 	while( iter != m_vPushStructList.end() )

  0002d	3b b7 18 03 00
	00		 cmp	 esi, DWORD PTR [edi+792]
  00033	75 dd		 jne	 SHORT $LL3@GetCurPush@2

; 305  : 	}
; 306  : 
; 307  : 	return iCurCnt;

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	8b c3		 mov	 eax, ebx
  00039	5b		 pop	 ebx

; 308  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?GetCurPushStructCntByType@ioPushStructListManager@@QAEHW4PushStructType@@@Z ENDP ; ioPushStructListManager::GetCurPushStructCntByType
_TEXT	ENDS
PUBLIC	?CheckMaxStructCntForRoom@ioPushStructListManager@@QAE_NXZ ; ioPushStructListManager::CheckMaxStructCntForRoom
; Function compile flags: /Ogsp
;	COMDAT ?CheckMaxStructCntForRoom@ioPushStructListManager@@QAE_NXZ
_TEXT	SEGMENT
?CheckMaxStructCntForRoom@ioPushStructListManager@@QAE_NXZ PROC ; ioPushStructListManager::CheckMaxStructCntForRoom, COMDAT
; _this$ = ecx

; 334  : {

  00000	56		 push	 esi

; 335  : 	int iBlockCnt = GetCurPushStructCntByType( PSTT_BLOCK );

  00001	6a 05		 push	 5
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?GetCurPushStructCntByType@ioPushStructListManager@@QAEHW4PushStructType@@@Z ; ioPushStructListManager::GetCurPushStructCntByType

; 336  : 
; 337  : 	if( iBlockCnt < m_iBlockMaxCnt )

  0000a	3b 86 2c 03 00
	00		 cmp	 eax, DWORD PTR [esi+812]
  00010	5e		 pop	 esi
  00011	0f 9c c0	 setl	 al

; 338  : 		return true;
; 339  : 	
; 340  : 	return false;
; 341  : }

  00014	c3		 ret	 0
?CheckMaxStructCntForRoom@ioPushStructListManager@@QAE_NXZ ENDP ; ioPushStructListManager::CheckMaxStructCntForRoom
_TEXT	ENDS
PUBLIC	?CheckMaxStructCntForMyRoom@ioPushStructListManager@@QAE_NXZ ; ioPushStructListManager::CheckMaxStructCntForMyRoom
; Function compile flags: /Ogsp
;	COMDAT ?CheckMaxStructCntForMyRoom@ioPushStructListManager@@QAE_NXZ
_TEXT	SEGMENT
?CheckMaxStructCntForMyRoom@ioPushStructListManager@@QAE_NXZ PROC ; ioPushStructListManager::CheckMaxStructCntForMyRoom, COMDAT
; _this$ = ecx

; 344  : {

  00000	56		 push	 esi

; 345  : 	int iBlockCnt = GetCurPushStructCntByType( PSTT_BLOCK );

  00001	6a 05		 push	 5
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?GetCurPushStructCntByType@ioPushStructListManager@@QAEHW4PushStructType@@@Z ; ioPushStructListManager::GetCurPushStructCntByType

; 346  : 
; 347  : 	if( iBlockCnt < m_iBlockMyRoomMaxCnt )

  0000a	3b 86 30 03 00
	00		 cmp	 eax, DWORD PTR [esi+816]
  00010	5e		 pop	 esi
  00011	0f 9c c0	 setl	 al

; 348  : 		return true;
; 349  : 
; 350  : 	return false;
; 351  : }

  00014	c3		 ret	 0
?CheckMaxStructCntForMyRoom@ioPushStructListManager@@QAE_NXZ ENDP ; ioPushStructListManager::CheckMaxStructCntForMyRoom
_TEXT	ENDS
PUBLIC	??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::~vector<ioPushStruct *,std::allocator<ioPushStruct *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::~vector<ioPushStruct *,std::allocator<ioPushStruct *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::~vector<ioPushStruct *,std::allocator<ioPushStruct *> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$536238 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	ff 75 0c	 push	 DWORD PTR __Cat$536238[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	50		 push	 eax
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	83 c0 04	 add	 eax, 4
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioPushStruct * *,ioPushStruct * *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1183 : 		--this->_Mylast;
; 1184 : 		return (_Make_iter(_Where));

  00019	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	83 46 04 fc	 add	 DWORD PTR [esi+4], -4	; fffffffcH
  00026	89 08		 mov	 DWORD PTR [eax], ecx
  00028	5e		 pop	 esi

; 1185 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@0@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$536368 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@0@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$536368[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAVioPushStruct@@PAPAV1@@std@@YAPAPAVioPushStruct@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioPushStruct * *,ioPushStruct * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXI@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAVioPushStruct@@@std@@YAPAPAVioPushStruct@@IPAPAV1@@Z ; std::_Allocate<ioPushStruct *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioPushStruct@@PAPAV1@V?$allocator@PAVioPushStruct@@@std@@@std@@YAPAPAVioPushStruct@@PAPAV1@00AAV?$allocator@PAVioPushStruct@@@0@@Z ; std::_Uninitialized_move<ioPushStruct * *,ioPushStruct * *,std::allocator<ioPushStruct *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::reserve
_TEXT	ENDS
PUBLIC	?ClearDeadStructList@ioPushStructListManager@@QAEXXZ ; ioPushStructListManager::ClearDeadStructList
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
;	COMDAT ?ClearDeadStructList@ioPushStructListManager@@QAEXXZ
_TEXT	SEGMENT
$T536485 = -4						; size = 4
?ClearDeadStructList@ioPushStructListManager@@QAEXXZ PROC ; ioPushStructListManager::ClearDeadStructList, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 142  : 	PushList::iterator iter = m_vPushStructList.begin();

  00009	8b b7 14 03 00
	00		 mov	 esi, DWORD PTR [edi+788]
  0000f	eb 2c		 jmp	 SHORT $LN40@ClearDeadS
$LL4@ClearDeadS:

; 144  : 	{
; 145  : 		ioPushStruct *pPush = ToPushStruct( *iter );

  00011	ff 36		 push	 DWORD PTR [esi]
  00013	e8 00 00 00 00	 call	 ?ToPushStruct@@YAPAVioPushStruct@@PAVioGameEntity@@@Z ; ToPushStruct
  00018	59		 pop	 ecx

; 146  : 		if( pPush && pPush->GetState() == ioPushStruct::PS_DIE )

  00019	85 c0		 test	 eax, eax
  0001b	74 1d		 je	 SHORT $LN2@ClearDeadS
  0001d	83 b8 e4 01 00
	00 02		 cmp	 DWORD PTR [eax+484], 2
  00024	75 14		 jne	 SHORT $LN2@ClearDeadS

; 147  : 		{
; 148  : 			iter = m_vPushStructList.erase( iter );

  00026	56		 push	 esi
  00027	8d 45 fc	 lea	 eax, DWORD PTR $T536485[ebp]
  0002a	50		 push	 eax
  0002b	8d 8f 14 03 00
	00		 lea	 ecx, DWORD PTR [edi+788]
  00031	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase
  00036	8b 30		 mov	 esi, DWORD PTR [eax]

; 149  : 		}
; 150  : 		else

  00038	eb 03		 jmp	 SHORT $LN40@ClearDeadS
$LN2@ClearDeadS:

; 151  : 			++iter;

  0003a	83 c6 04	 add	 esi, 4
$LN40@ClearDeadS:

; 143  : 	while( iter != m_vPushStructList.end() )

  0003d	3b b7 18 03 00
	00		 cmp	 esi, DWORD PTR [edi+792]
  00043	75 cc		 jne	 SHORT $LL4@ClearDeadS
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 152  : 	}
; 153  : }

  00048	c9		 leave
  00049	c3		 ret	 0
?ClearDeadStructList@ioPushStructListManager@@QAEXXZ ENDP ; ioPushStructListManager::ClearDeadStructList
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T536580 = -4						; size = 4
?clear@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXXZ PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T536580[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@0@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXI@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IBEII@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXI@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioPushStructListManager@@6B@		; ioPushStructListManager::`vftable'
PUBLIC	_this$GSCopy$
PUBLIC	??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z ; ioPushStructListManager::ioPushStructListManager
PUBLIC	??_R4ioPushStructListManager@@6B@		; ioPushStructListManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioPushStructListManager@@@8		; ioPushStructListManager `RTTI Type Descriptor'
PUBLIC	??_R3ioPushStructListManager@@8			; ioPushStructListManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPushStructListManager@@8			; ioPushStructListManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPushStructListManager@@8	; ioPushStructListManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VioPushStructListManager@@@@8 ; Singleton<ioPushStructListManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VioPushStructListManager@@@@@8 ; Singleton<ioPushStructListManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VioPushStructListManager@@@@8	; Singleton<ioPushStructListManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VioPushStructListManager@@@@8	; Singleton<ioPushStructListManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VioPushStructListManager@@@@8 ; Singleton<ioPushStructListManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??1ioINILoader@@QAE@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??0ioINILoader@@QAE@XZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
EXTRN	??_EioPushStructListManager@@UAEPAXI@Z:PROC	; ioPushStructListManager::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VioPushStructListManager@@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VioPushStructListManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioPushStructListManager@@@@@8 ; Singleton<ioPushStructListManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioPushStructListManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VioPushStructListManager@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VioPushStructListManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VioPushStructListManager@@@@8 ; Singleton<ioPushStructListManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VioPushStructListManager@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VioPushStructListManager@@@@8 DD 00H	; Singleton<ioPushStructListManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VioPushStructListManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VioPushStructListManager@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VioPushStructListManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<ioPushStructListManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VioPushStructListManager@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VioPushStructListManager@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VioPushStructListManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioPushStructListManager@@@@@8 ; Singleton<ioPushStructListManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioPushStructListManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPushStructListManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPushStructListManager@@8 DD FLAT:??_R0?AVioPushStructListManager@@@8 ; ioPushStructListManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPushStructListManager@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPushStructListManager@@8
rdata$r	SEGMENT
??_R2ioPushStructListManager@@8 DD FLAT:??_R1A@?0A@EA@ioPushStructListManager@@8 ; ioPushStructListManager::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VioPushStructListManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPushStructListManager@@8
rdata$r	SEGMENT
??_R3ioPushStructListManager@@8 DD 00H			; ioPushStructListManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioPushStructListManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPushStructListManager@@@8
_DATA	SEGMENT
??_R0?AVioPushStructListManager@@@8 DD FLAT:??_7type_info@@6B@ ; ioPushStructListManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPushStructListManager@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioPushStructListManager@@6B@
rdata$r	SEGMENT
??_R4ioPushStructListManager@@6B@ DD 00H		; ioPushStructListManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioPushStructListManager@@@8
	DD	FLAT:??_R3ioPushStructListManager@@8
rdata$r	ENDS
;	COMDAT ??_7ioPushStructListManager@@6B@
CONST	SEGMENT
??_7ioPushStructListManager@@6B@ DD FLAT:??_R4ioPushStructListManager@@6B@ ; ioPushStructListManager::`vftable'
	DD	FLAT:??_EioPushStructListManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$4
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -56					; size = 4
$T536763 = -52						; size = 4
__f$536880 = -48					; size = 27
__$EHRec$ = -12						; size = 12
_pStage$ = 8						; size = 4
??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z PROC	; ioPushStructListManager::ioPushStructListManager, COMDAT
; _this$ = ecx

; 13   : {

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx
  0000e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00011	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00014	89 75 c8	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A, eax ; Singleton<ioPushStructListManager>::ms_Singleton
  0001c	33 db		 xor	 ebx, ebx
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioPushStructListManager@@6B@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@XZ
  0002d	89 9e 14 03 00
	00		 mov	 DWORD PTR [esi+788], ebx
  00033	89 9e 18 03 00
	00		 mov	 DWORD PTR [esi+792], ebx
  00039	89 9e 1c 03 00
	00		 mov	 DWORD PTR [esi+796], ebx
  0003f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00045	8d 8e 38 03 00
	00		 lea	 ecx, DWORD PTR [esi+824]
  0004b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004f	ff d3		 call	 ebx
  00051	8d 8e 48 03 00
	00		 lea	 ecx, DWORD PTR [esi+840]
  00057	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0005b	ff d3		 call	 ebx

; 14   : 	m_iLocalIndex = 0;
; 15   : 	m_pPlayStage = pStage;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _pStage$[ebp]
  00060	83 a6 28 03 00
	00 00		 and	 DWORD PTR [esi+808], 0
  00067	89 86 24 03 00
	00		 mov	 DWORD PTR [esi+804], eax

; 16   : 	m_vPushStructList.clear();

  0006d	8b 86 18 03 00
	00		 mov	 eax, DWORD PTR [esi+792]
  00073	8b 8e 14 03 00
	00		 mov	 ecx, DWORD PTR [esi+788]
  00079	50		 push	 eax
  0007a	51		 push	 ecx
  0007b	8d 45 cc	 lea	 eax, DWORD PTR $T536763[ebp]
  0007e	50		 push	 eax
  0007f	8d 8e 14 03 00
	00		 lea	 ecx, DWORD PTR [esi+788]
  00085	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00089	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@0@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase

; 17   : 
; 18   : 	m_StructLoader.SetFileName_e( "config/sp2_push_struct.ini" );

  0008e	6a 06		 push	 6
  00090	c7 45 d0 8e 83
	85 8c		 mov	 DWORD PTR __f$536880[ebp], -1937407090 ; 8c85838eH
  00097	c7 45 d4 84 8b
	c4 99		 mov	 DWORD PTR __f$536880[ebp+4], -1715172476 ; 99c48b84H
  0009e	c7 45 d8 9d de
	b4 9a		 mov	 DWORD PTR __f$536880[ebp+8], -1699422563 ; 9ab4de9dH
  000a5	c7 45 dc 98 9f
	83 b5		 mov	 DWORD PTR __f$536880[ebp+12], -1249665128 ; b5839f98H
  000ac	c7 45 e0 9e 98
	99 9f		 mov	 DWORD PTR __f$536880[ebp+16], -1617323874 ; 9f99989eH
  000b3	c7 45 e4 8e 98
	c5 83		 mov	 DWORD PTR __f$536880[ebp+20], -2084202354 ; 83c5988eH
  000ba	66 c7 45 e8 83
	85		 mov	 WORD PTR __f$536880[ebp+24], 34179 ; 00008583H
  000c0	8d 45 d0	 lea	 eax, DWORD PTR __f$536880[ebp]
  000c3	c6 45 ea 00	 mov	 BYTE PTR __f$536880[ebp+26], 0
  000c7	59		 pop	 ecx
$LL141@ioPushStru:
  000c8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000ce	83 c0 04	 add	 eax, 4
  000d1	49		 dec	 ecx
  000d2	75 f4		 jne	 SHORT $LL141@ioPushStru
  000d4	6a 18		 push	 24			; 00000018H
  000d6	58		 pop	 eax
$LL138@ioPushStru:
  000d7	8b c8		 mov	 ecx, eax
  000d9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000df	79 05		 jns	 SHORT $LN149@ioPushStru
  000e1	49		 dec	 ecx
  000e2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000e5	41		 inc	 ecx
$LN149@ioPushStru:
  000e6	b2 ed		 mov	 dl, -19			; ffffffedH
  000e8	2a d1		 sub	 dl, cl
  000ea	30 54 05 d0	 xor	 BYTE PTR __f$536880[ebp+eax], dl
  000ee	40		 inc	 eax
  000ef	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  000f2	7c e3		 jl	 SHORT $LL138@ioPushStru
  000f4	6a 01		 push	 1
  000f6	8d 45 d0	 lea	 eax, DWORD PTR __f$536880[ebp]
  000f9	50		 push	 eax
  000fa	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetFileName@ioINILoader@@QAEXPBD_N@Z

; 19   : 
; 20   : 	LoadBlockInfo();

  00103	8b ce		 mov	 ecx, esi
  00105	e8 00 00 00 00	 call	 ?LoadBlockInfo@ioPushStructListManager@@IAEXXZ ; ioPushStructListManager::LoadBlockInfo

; 21   : }

  0010a	8b c6		 mov	 eax, esi
  0010c	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00111	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$0:
  00000	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioPushStructListManager@@@@QAE@XZ ; Singleton<ioPushStructListManager>::~Singleton<ioPushStructListManager>
__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$1:
  0000b	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000e	83 c1 04	 add	 ecx, 4
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$2:
  00017	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0001a	81 c1 14 03 00
	00		 add	 ecx, 788		; 00000314H
  00020	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::~vector<ioPushStruct *,std::allocator<ioPushStruct *> >
__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$3:
  00025	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00028	81 c1 38 03 00
	00		 add	 ecx, 824		; 00000338H
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z$4:
  00034	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00037	81 c1 48 03 00
	00		 add	 ecx, 840		; 00000348H
  0003d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z:
  00043	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00047	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004a	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0004d	33 c8		 xor	 ecx, eax
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00057	33 c8		 xor	 ecx, eax
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z
  00063	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioPushStructListManager@@QAE@PAVioPlayStage@@@Z ENDP	; ioPushStructListManager::ioPushStructListManager
PUBLIC	?DestroyStructList@ioPushStructListManager@@QAEXXZ ; ioPushStructListManager::DestroyStructList
EXTRN	?DestroyAllPushStruct@ioPlayStage@@QAEXXZ:PROC	; ioPlayStage::DestroyAllPushStruct
; Function compile flags: /Ogsp
;	COMDAT ?DestroyStructList@ioPushStructListManager@@QAEXXZ
_TEXT	SEGMENT
$T536984 = -4						; size = 4
?DestroyStructList@ioPushStructListManager@@QAEXXZ PROC	; ioPushStructListManager::DestroyStructList, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 290  : 	m_vPushStructList.clear();

  00007	8d 8e 14 03 00
	00		 lea	 ecx, DWORD PTR [esi+788]
  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	8d 45 fc	 lea	 eax, DWORD PTR $T536984[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@@2@0@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::erase

; 291  : 	m_pPlayStage->DestroyAllPushStruct();

  0001d	8b 8e 24 03 00
	00		 mov	 ecx, DWORD PTR [esi+804]
  00023	e8 00 00 00 00	 call	 ?DestroyAllPushStruct@ioPlayStage@@QAEXXZ ; ioPlayStage::DestroyAllPushStruct
  00028	5e		 pop	 esi

; 292  : }

  00029	c9		 leave
  0002a	c3		 ret	 0
?DestroyStructList@ioPushStructListManager@@QAEXXZ ENDP	; ioPushStructListManager::DestroyStructList
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXABQAVioPushStruct@@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXABQAVioPushStruct@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXABQAVioPushStruct@@@Z PROC ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXI@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXI@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXABQAVioPushStruct@@@Z ENDP ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::push_back
_TEXT	ENDS
PUBLIC	??1ioPushStructListManager@@UAE@XZ		; ioPushStructListManager::~ioPushStructListManager
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__ehfuncinfo$??1ioPushStructListManager@@UAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1ioPushStructListManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioPushStructListManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$4
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ??1ioPushStructListManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioPushStructListManager@@UAE@XZ PROC			; ioPushStructListManager::~ioPushStructListManager, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioPushStructListManager@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioPushStructListManager@@6B@
  00017	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 25   : 	DestroyStructList();

  0001e	e8 00 00 00 00	 call	 ?DestroyStructList@ioPushStructListManager@@QAEXXZ ; ioPushStructListManager::DestroyStructList

; 26   : }

  00023	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00029	8d 8e 48 03 00
	00		 lea	 ecx, DWORD PTR [esi+840]
  0002f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00033	ff d7		 call	 edi
  00035	8d 8e 38 03 00
	00		 lea	 ecx, DWORD PTR [esi+824]
  0003b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0003f	ff d7		 call	 edi
  00041	8d 8e 14 03 00
	00		 lea	 ecx, DWORD PTR [esi+788]
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
  00050	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00053	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
  0005d	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioPushStructListManager@@@@1PAVioPushStructListManager@@A, 0 ; Singleton<ioPushStructListManager>::ms_Singleton
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioPushStructListManager@@@@QAE@XZ ; Singleton<ioPushStructListManager>::~Singleton<ioPushStructListManager>
__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 04	 add	 ecx, 4
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 14 03 00
	00		 add	 ecx, 788		; 00000314H
  00020	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::~vector<ioPushStruct *,std::allocator<ioPushStruct *> >
__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 38 03 00
	00		 add	 ecx, 824		; 00000338H
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioPushStructListManager@@UAE@XZ$4:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 48 03 00
	00		 add	 ecx, 840		; 00000348H
  0003d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioPushStructListManager@@UAE@XZ:
  00043	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00047	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004d	33 c8		 xor	 ecx, eax
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioPushStructListManager@@UAE@XZ
  00059	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioPushStructListManager@@UAE@XZ ENDP			; ioPushStructListManager::~ioPushStructListManager
PUBLIC	??_C@_0BG@IMOHHFBA@FC?5?9?5PushLoad?3?5?$CFs?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0DF@KBADDGAK@ioPushStructListManager?3?3CreateP@ ; `string'
PUBLIC	?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z ; ioPushStructListManager::CreatePushStruct
EXTRN	??0ioPushStruct@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioPushStruct::ioPushStruct
EXTRN	?CheckEnableTimeGapUser@Help@@YA_NH@Z:PROC	; Help::CheckEnableTimeGapUser
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	?CreateEntityGrpAndSceneNode@ioPlayStage@@QAEPAVioEntityGroup@@ABVioHashString@@_N@Z:PROC ; ioPlayStage::CreateEntityGrpAndSceneNode
EXTRN	__imp__timeGetTime@0:PROC
;	COMDAT ??_C@_0BG@IMOHHFBA@FC?5?9?5PushLoad?3?5?$CFs?0?5?$CFd?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
??_C@_0BG@IMOHHFBA@FC?5?9?5PushLoad?3?5?$CFs?0?5?$CFd?$AA@ DB 'FC - PushL'
	DB	'oad: %s, %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@KBADDGAK@ioPushStructListManager?3?3CreateP@
CONST	SEGMENT
??_C@_0DF@KBADDGAK@ioPushStructListManager?3?3CreateP@ DB 'ioPushStructLi'
	DB	'stManager::CreatePushStruct - %s Fail!', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z$1
__ehfuncinfo$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
_pGrp$ = -20						; size = 4
tv178 = -16						; size = 4
tv175 = -16						; size = 4
$T537153 = -16						; size = 4
_dwStart$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szStructName$ = 8					; size = 16
_pPush$ = 24						; size = 4
_pMode$ = 24						; size = 4
?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z PROC ; ioPushStructListManager::CreatePushStruct, COMDAT
; _this$ = ecx

; 57   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 58   : 	DWORD dwStart = timeGetTime();

  0000e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__timeGetTime@0
  00014	33 db		 xor	 ebx, ebx
  00016	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00019	ff d7		 call	 edi

; 59   : 
; 60   : 	ioEntityGroup *pGrp = m_pPlayStage->CreateEntityGrpAndSceneNode( szStructName, true );

  0001b	8b 8e 24 03 00
	00		 mov	 ecx, DWORD PTR [esi+804]
  00021	89 45 f0	 mov	 DWORD PTR _dwStart$[ebp], eax
  00024	6a 01		 push	 1
  00026	8d 45 08	 lea	 eax, DWORD PTR _szStructName$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?CreateEntityGrpAndSceneNode@ioPlayStage@@QAEPAVioEntityGroup@@ABVioHashString@@_N@Z ; ioPlayStage::CreateEntityGrpAndSceneNode
  0002f	89 45 ec	 mov	 DWORD PTR _pGrp$[ebp], eax

; 61   : 	if( !pGrp )

  00032	3b c3		 cmp	 eax, ebx
  00034	75 38		 jne	 SHORT $LN3@CreatePush

; 62   : 	{
; 63   : 		LOG.PrintTimeAndLog( 0, "ioPushStructListManager::CreatePushStruct - %s Fail!", szStructName.c_str() );

  00036	8d 4d 08	 lea	 ecx, DWORD PTR _szStructName$[ebp]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@KBADDGAK@ioPushStructListManager?3?3CreateP@
  00045	53		 push	 ebx
  00046	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	33 f6		 xor	 esi, esi
$LN12@CreatePush:

; 64   : 		return NULL;

  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8d 4d 08	 lea	 ecx, DWORD PTR _szStructName$[ebp]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00064	8b c6		 mov	 eax, esi

; 81   : 
; 82   : 	return pPush;
; 83   : }

  00066	e8 00 00 00 00	 call	 __EH_epilog3
  0006b	c2 14 00	 ret	 20			; 00000014H
$LN3@CreatePush:

; 65   : 	}
; 66   : 
; 67   : 	DWORD dwEnd = timeGetTime();

  0006e	ff d7		 call	 edi

; 68   : 
; 69   : 	if( Help::CheckEnableTimeGapUser() )

  00070	53		 push	 ebx
  00071	8b f8		 mov	 edi, eax
  00073	e8 00 00 00 00	 call	 ?CheckEnableTimeGapUser@Help@@YA_NH@Z ; Help::CheckEnableTimeGapUser
  00078	59		 pop	 ecx
  00079	84 c0		 test	 al, al
  0007b	74 4e		 je	 SHORT $LN1@CreatePush

; 70   : 	{
; 71   : 		DWORD dwGap = dwEnd - dwStart;

  0007d	2b 7d f0	 sub	 edi, DWORD PTR _dwStart$[ebp]

; 72   : 		if( dwGap > FLOAT100 )

  00080	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00085	89 7d f0	 mov	 DWORD PTR tv178[ebp], edi
  00088	db 45 f0	 fild	 DWORD PTR tv178[ebp]
  0008b	79 06		 jns	 SHORT $LN14@CreatePush
  0008d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@CreatePush:
  00093	89 45 f0	 mov	 DWORD PTR tv175[ebp], eax
  00096	db 45 f0	 fild	 DWORD PTR tv175[ebp]
  00099	85 c0		 test	 eax, eax
  0009b	79 06		 jns	 SHORT $LN15@CreatePush
  0009d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN15@CreatePush:
  000a3	d9 c9		 fxch	 ST(1)
  000a5	df f1		 fcomip	 ST(1)
  000a7	dd d8		 fstp	 ST(0)
  000a9	76 20		 jbe	 SHORT $LN1@CreatePush

; 73   : 		{
; 74   : 			LOG.PrintTimeAndLog( 0, "FC - PushLoad: %s, %d", szStructName.c_str(), dwGap );

  000ab	57		 push	 edi
  000ac	8d 4d 08	 lea	 ecx, DWORD PTR _szStructName$[ebp]
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IMOHHFBA@FC?5?9?5PushLoad?3?5?$CFs?0?5?$CFd?$AA@
  000bb	53		 push	 ebx
  000bc	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  000c8	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@CreatePush:

; 75   : 		}
; 76   : 	}
; 77   : 
; 78   : 	ioPushStruct* pPush = new ioPushStruct( pGrp, pMode );

  000cb	68 f0 06 00 00	 push	 1776			; 000006f0H
  000d0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d5	59		 pop	 ecx
  000d6	8b c8		 mov	 ecx, eax
  000d8	89 4d f0	 mov	 DWORD PTR $T537153[ebp], ecx
  000db	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000df	3b cb		 cmp	 ecx, ebx
  000e1	74 0d		 je	 SHORT $LN6@CreatePush
  000e3	ff 75 18	 push	 DWORD PTR _pMode$[ebp]
  000e6	ff 75 ec	 push	 DWORD PTR _pGrp$[ebp]
  000e9	e8 00 00 00 00	 call	 ??0ioPushStruct@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioPushStruct::ioPushStruct
  000ee	eb 02		 jmp	 SHORT $LN7@CreatePush
$LN6@CreatePush:
  000f0	33 c0		 xor	 eax, eax
$LN7@CreatePush:

; 79   : 	m_iLocalIndex++;

  000f2	ff 86 28 03 00
	00		 inc	 DWORD PTR [esi+808]
  000f8	89 45 18	 mov	 DWORD PTR _pPush$[ebp], eax

; 80   : 	m_vPushStructList.push_back( pPush );

  000fb	8d 45 18	 lea	 eax, DWORD PTR _pPush$[ebp]
  000fe	50		 push	 eax
  000ff	8d 8e 14 03 00
	00		 lea	 ecx, DWORD PTR [esi+788]
  00105	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00108	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXABQAVioPushStruct@@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::push_back
  0010d	8b 75 18	 mov	 esi, DWORD PTR _pPush$[ebp]
  00110	e9 42 ff ff ff	 jmp	 $LN12@CreatePush
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _szStructName$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z$1:
  00009	ff 75 f0	 push	 DWORD PTR $T537153[ebp]
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__ehhandler$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreatePushStruct@ioPushStructListManager@@QAEPAVioPushStruct@@VioHashString@@PAVioPlayMode@@@Z ENDP ; ioPushStructListManager::CreatePushStruct
PUBLIC	_pOwner$GSCopy$
PUBLIC	?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z ; ioPushStructListManager::CheckMaxStructCnt
EXTRN	__imp__wsprintfA:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z$0
__ehfuncinfo$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
_TEXT	SEGMENT
_eType$ = -324						; size = 4
_vOwnerStructList$ = -320				; size = 16
tv1802 = -304						; size = 4
_pOwner$GSCopy$ = -304					; size = 4
_i$530936 = -300					; size = 4
_szTitle$ = -296					; size = 260
__k$537206 = -36					; size = 12
___encStr$530777 = -36					; size = 14
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_iStructNum$ = 12					; size = 4
_iMaxCnt$ = 16						; size = 4
?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z PROC ; ioPushStructListManager::CheckMaxStructCnt, COMDAT
; _this$ = ecx

; 181  : {

  00000	68 38 01 00 00	 push	 312			; 00000138H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]

; 182  : 	if( !pOwner->IsNeedProcess() ) return NULL;

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]

; 190  : 
; 191  : 	PushStructType eType = (PushStructType)m_StructLoader.LoadInt_e( "struct_type", PSTT_NOMAL );

  00016	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _pOwner$GSCopy$[ebp], ecx
  0001c	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00022	84 c0		 test	 al, al
  00024	0f 84 cd 01 00
	00		 je	 $LN311@CheckMaxSt@2

; 183  : 	if( iMaxCnt <= 0 ) return NULL;

  0002a	83 7d 10 00	 cmp	 DWORD PTR _iMaxCnt$[ebp], 0
  0002e	0f 8e c3 01 00
	00		 jle	 $LN311@CheckMaxSt@2

; 184  : 
; 185  : 	//ioINILoader_e kLoader( "config/sp2_push_struct.ini" );
; 186  : 
; 187  : 	char szTitle[MAX_PATH];
; 188  : 	wsprintf_e( szTitle, "push_struct%d", iStructNum );

  00034	6a 03		 push	 3
  00036	c7 45 dc 9d 99
	98 82		 mov	 DWORD PTR ___encStr$530777[ebp], -2103928419 ; 8298999dH
  0003d	c7 45 e0 b2 9f
	9f 98		 mov	 DWORD PTR ___encStr$530777[ebp+4], -1734369358 ; 989f9fb2H
  00044	c7 45 e4 98 8f
	9f cf		 mov	 DWORD PTR ___encStr$530777[ebp+8], -811626600 ; cf9f8f98H
  0004b	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$530777[ebp]
  0004e	66 c7 45 e8 89
	00		 mov	 WORD PTR ___encStr$530777[ebp+12], 137 ; 00000089H
  00054	59		 pop	 ecx
  00055	bb ed ec eb ea	 mov	 ebx, -353637139		; eaebecedH
$LL121@CheckMaxSt@2:
  0005a	31 18		 xor	 DWORD PTR [eax], ebx
  0005c	83 c0 04	 add	 eax, 4
  0005f	49		 dec	 ecx
  00060	75 f8		 jne	 SHORT $LL121@CheckMaxSt@2
  00062	ff 75 0c	 push	 DWORD PTR _iStructNum$[ebp]
  00065	80 75 e8 ed	 xor	 BYTE PTR ___encStr$530777[ebp+12], -19 ; ffffffedH
  00069	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$530777[ebp]
  0006c	50		 push	 eax
  0006d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szTitle$[ebp]
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : 	m_StructLoader.SetTitle( szTitle );

  0007d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szTitle$[ebp]
  00083	50		 push	 eax
  00084	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z
  0008d	6a 02		 push	 2

; 190  : 
; 191  : 	PushStructType eType = (PushStructType)m_StructLoader.LoadInt_e( "struct_type", PSTT_NOMAL );

  0008f	c7 45 dc 9e 98
	99 9f		 mov	 DWORD PTR __k$537206[ebp], -1617323874 ; 9f99989eH
  00096	c7 45 e0 8e 98
	b4 9e		 mov	 DWORD PTR __k$537206[ebp+4], -1632331634 ; 9eb4988eH
  0009d	8d 45 dc	 lea	 eax, DWORD PTR __k$537206[ebp]
  000a0	c7 45 e4 94 9c
	8e 00		 mov	 DWORD PTR __k$537206[ebp+8], 9346196 ; 008e9c94H
  000a7	59		 pop	 ecx
$LL227@CheckMaxSt@2:
  000a8	31 18		 xor	 DWORD PTR [eax], ebx
  000aa	83 c0 04	 add	 eax, 4
  000ad	49		 dec	 ecx
  000ae	75 f8		 jne	 SHORT $LL227@CheckMaxSt@2
  000b0	6a 08		 push	 8
  000b2	58		 pop	 eax
$LL224@CheckMaxSt@2:
  000b3	8b c8		 mov	 ecx, eax
  000b5	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000bb	79 05		 jns	 SHORT $LN310@CheckMaxSt@2
  000bd	49		 dec	 ecx
  000be	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000c1	41		 inc	 ecx
$LN310@CheckMaxSt@2:
  000c2	b2 ed		 mov	 dl, -19			; ffffffedH
  000c4	2a d1		 sub	 dl, cl
  000c6	30 54 05 dc	 xor	 BYTE PTR __k$537206[ebp+eax], dl
  000ca	40		 inc	 eax
  000cb	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000ce	7c e3		 jl	 SHORT $LL224@CheckMaxSt@2
  000d0	33 db		 xor	 ebx, ebx
  000d2	53		 push	 ebx
  000d3	8d 45 dc	 lea	 eax, DWORD PTR __k$537206[ebp]
  000d6	50		 push	 eax
  000d7	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  000e0	89 85 bc fe ff
	ff		 mov	 DWORD PTR _eType$[ebp], eax

; 192  : 	//
; 193  : 
; 194  : 	PushList vOwnerStructList;

  000e6	89 9d c0 fe ff
	ff		 mov	 DWORD PTR _vOwnerStructList$[ebp], ebx
  000ec	89 9d c4 fe ff
	ff		 mov	 DWORD PTR _vOwnerStructList$[ebp+4], ebx
  000f2	89 9d c8 fe ff
	ff		 mov	 DWORD PTR _vOwnerStructList$[ebp+8], ebx

; 195  : 
; 196  : 	int iPushCnt = m_vPushStructList.size();

  000f8	8b b7 18 03 00
	00		 mov	 esi, DWORD PTR [edi+792]
  000fe	2b b7 14 03 00
	00		 sub	 esi, DWORD PTR [edi+788]
  00104	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00107	c1 fe 02	 sar	 esi, 2

; 197  : 	for( int i=0; i<iPushCnt; i++ )

  0010a	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _i$530936[ebp], ebx
  00110	3b f3		 cmp	 esi, ebx
  00112	0f 8e d0 00 00
	00		 jle	 $LN6@CheckMaxSt@2
  00118	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _pOwner$GSCopy$[ebp]

; 198  : 	{
; 199  : 		if( (m_vPushStructList[i]->GetOwnerName() == pOwner->GetCharName()) &&
; 200  : 			(m_vPushStructList[i]->GetStructType() == eType ) )

  0011e	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  00123	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv1802[ebp], eax
$LN11@CheckMaxSt@2:

; 197  : 	for( int i=0; i<iPushCnt; i++ )

  00129	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _i$530936[ebp]
  0012f	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]

; 198  : 	{
; 199  : 		if( (m_vPushStructList[i]->GetOwnerName() == pOwner->GetCharName()) &&
; 200  : 			(m_vPushStructList[i]->GetStructType() == eType ) )

  00135	ff b5 d0 fe ff
	ff		 push	 DWORD PTR tv1802[ebp]
  0013b	c1 e3 02	 shl	 ebx, 2
  0013e	8b 0c 18	 mov	 ecx, DWORD PTR [eax+ebx]
  00141	8d 89 94 03 00
	00		 lea	 ecx, DWORD PTR [ecx+916]
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??8ioHashString@@QBE_NABV0@@Z
  0014d	84 c0		 test	 al, al
  0014f	74 24		 je	 SHORT $LN10@CheckMaxSt@2
  00151	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00157	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _eType$[ebp]
  0015d	03 c3		 add	 eax, ebx
  0015f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00161	39 91 e0 01 00
	00		 cmp	 DWORD PTR [ecx+480], edx
  00167	75 0c		 jne	 SHORT $LN10@CheckMaxSt@2

; 201  : 		{
; 202  : 			vOwnerStructList.push_back( m_vPushStructList[i] );

  00169	50		 push	 eax
  0016a	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  00170	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXABQAVioPushStruct@@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::push_back
$LN10@CheckMaxSt@2:

; 197  : 	for( int i=0; i<iPushCnt; i++ )

  00175	ff 85 d4 fe ff
	ff		 inc	 DWORD PTR _i$530936[ebp]
  0017b	39 b5 d4 fe ff
	ff		 cmp	 DWORD PTR _i$530936[ebp], esi
  00181	7c a6		 jl	 SHORT $LN11@CheckMaxSt@2

; 203  : 		}
; 204  : 	}
; 205  : 
; 206  : 	if( vOwnerStructList.empty() || (int)vOwnerStructList.size() < iMaxCnt )

  00183	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  00189	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _vOwnerStructList$[ebp+4]
  0018f	3b c8		 cmp	 ecx, eax
  00191	74 55		 je	 SHORT $LN6@CheckMaxSt@2
  00193	2b c1		 sub	 eax, ecx
  00195	8b d8		 mov	 ebx, eax
  00197	c1 fb 02	 sar	 ebx, 2
  0019a	3b 5d 10	 cmp	 ebx, DWORD PTR _iMaxCnt$[ebp]
  0019d	7c 49		 jl	 SHORT $LN6@CheckMaxSt@2

; 208  : 
; 209  : 	ioPushStruct *pDelete = vOwnerStructList.front();

  0019f	8b 31		 mov	 esi, DWORD PTR [ecx]

; 210  : 
; 211  : 	int iListCnt = vOwnerStructList.size();
; 212  : 	for( i=1; i < iListCnt; i++ )

  001a1	33 d2		 xor	 edx, edx
  001a3	42		 inc	 edx
  001a4	3b da		 cmp	 ebx, edx
  001a6	7e 17		 jle	 SHORT $LN3@CheckMaxSt@2
$LL5@CheckMaxSt@2:

; 213  : 	{
; 214  : 		if( pDelete->GetCreateTime() > vOwnerStructList[i]->GetCreateTime() )

  001a8	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001ab	8b be d4 01 00
	00		 mov	 edi, DWORD PTR [esi+468]
  001b1	3b b8 d4 01 00
	00		 cmp	 edi, DWORD PTR [eax+468]

; 215  : 		{
; 216  : 			pDelete = vOwnerStructList[i];

  001b7	0f 47 f0	 cmova	 esi, eax
  001ba	42		 inc	 edx
  001bb	3b d3		 cmp	 edx, ebx
  001bd	7c e9		 jl	 SHORT $LL5@CheckMaxSt@2
$LN3@CheckMaxSt@2:

; 217  : 		}
; 218  : 	}
; 219  : 
; 220  : 	if( pDelete )

  001bf	85 f6		 test	 esi, esi
  001c1	74 25		 je	 SHORT $LN6@CheckMaxSt@2

; 221  : 	{
; 222  : 		pDelete->SetKillerChar( pOwner->GetCharName() );

  001c3	ff b5 d0 fe ff
	ff		 push	 DWORD PTR tv1802[ebp]
  001c9	8d 8e b4 02 00
	00		 lea	 ecx, DWORD PTR [esi+692]
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 223  : 		return pDelete;

  001d5	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001d9	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  001df	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
  001e4	8b c6		 mov	 eax, esi
  001e6	eb 11		 jmp	 SHORT $LN113@CheckMaxSt@2
$LN6@CheckMaxSt@2:

; 207  : 		return NULL;

  001e8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001ec	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  001f2	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
$LN311@CheckMaxSt@2:
  001f7	33 c0		 xor	 eax, eax
$LN113@CheckMaxSt@2:

; 224  : 	}
; 225  : 
; 226  : 	return NULL;
; 227  : }

  001f9	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001fe	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z$0:
  00000	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::~vector<ioPushStruct *,std::allocator<ioPushStruct *> >
__ehhandler$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckMaxStructCnt@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z ENDP ; ioPushStructListManager::CheckMaxStructCnt
PUBLIC	?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z ; ioPushStructListManager::CheckMaxStructCntByNum
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z$0
__ehfuncinfo$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushstructlistmanager.cpp
xdata$x	ENDS
;	COMDAT ?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
_TEXT	SEGMENT
_vOwnerStructList$ = -32				; size = 16
tv375 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$530964 = 8						; size = 4
_pOwner$ = 8						; size = 4
_iStructNum$ = 12					; size = 4
_iMaxCnt$ = 16						; size = 4
?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z PROC ; ioPushStructListManager::CheckMaxStructCntByNum, COMDAT
; _this$ = ecx

; 230  : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 231  : 	if( !pOwner->IsNeedProcess() ) return NULL;

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00011	8b 03		 mov	 eax, DWORD PTR [ebx]
  00013	8b cb		 mov	 ecx, ebx
  00015	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0001b	84 c0		 test	 al, al
  0001d	0f 84 e7 00 00
	00		 je	 $LN89@CheckMaxSt@3

; 232  : 	if( iMaxCnt <= 0 ) return NULL;

  00023	33 c0		 xor	 eax, eax
  00025	39 45 10	 cmp	 DWORD PTR _iMaxCnt$[ebp], eax
  00028	0f 8e dc 00 00
	00		 jle	 $LN89@CheckMaxSt@3

; 233  : 
; 234  : 	PushList vOwnerStructList;

  0002e	89 45 e0	 mov	 DWORD PTR _vOwnerStructList$[ebp], eax
  00031	89 45 e4	 mov	 DWORD PTR _vOwnerStructList$[ebp+4], eax
  00034	89 45 e8	 mov	 DWORD PTR _vOwnerStructList$[ebp+8], eax

; 235  : 	int iPushCnt = m_vPushStructList.size();

  00037	8b b7 18 03 00
	00		 mov	 esi, DWORD PTR [edi+792]
  0003d	2b b7 14 03 00
	00		 sub	 esi, DWORD PTR [edi+788]
  00043	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00046	c1 fe 02	 sar	 esi, 2

; 236  : 	for( int i=0; i<iPushCnt; i++ )

  00049	89 45 08	 mov	 DWORD PTR _i$530964[ebp], eax
  0004c	3b f0		 cmp	 esi, eax
  0004e	0f 8e aa 00 00
	00		 jle	 $LN6@CheckMaxSt@3
  00054	81 c3 d4 02 00
	00		 add	 ebx, 724		; 000002d4H
  0005a	89 5d f0	 mov	 DWORD PTR tv375[ebp], ebx
$LN11@CheckMaxSt@3:
  0005d	8b 5d 08	 mov	 ebx, DWORD PTR _i$530964[ebp]
  00060	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]

; 237  : 	{
; 238  : 		if( (m_vPushStructList[i]->GetOwnerName() == pOwner->GetCharName()) &&
; 239  : 			(m_vPushStructList[i]->GetStructNum() == iStructNum ) )

  00066	ff 75 f0	 push	 DWORD PTR tv375[ebp]
  00069	c1 e3 02	 shl	 ebx, 2
  0006c	8b 0c 18	 mov	 ecx, DWORD PTR [eax+ebx]
  0006f	8d 89 94 03 00
	00		 lea	 ecx, DWORD PTR [ecx+916]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??8ioHashString@@QBE_NABV0@@Z
  0007b	84 c0		 test	 al, al
  0007d	74 1e		 je	 SHORT $LN10@CheckMaxSt@3

; 236  : 	for( int i=0; i<iPushCnt; i++ )

  0007f	8b 87 14 03 00
	00		 mov	 eax, DWORD PTR [edi+788]
  00085	03 c3		 add	 eax, ebx

; 237  : 	{
; 238  : 		if( (m_vPushStructList[i]->GetOwnerName() == pOwner->GetCharName()) &&
; 239  : 			(m_vPushStructList[i]->GetStructNum() == iStructNum ) )

  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	8b 89 cc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+460]
  0008f	3b 4d 0c	 cmp	 ecx, DWORD PTR _iStructNum$[ebp]
  00092	75 09		 jne	 SHORT $LN10@CheckMaxSt@3

; 240  : 		{
; 241  : 			vOwnerStructList.push_back( m_vPushStructList[i] );

  00094	50		 push	 eax
  00095	8d 4d e0	 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  00098	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAEXABQAVioPushStruct@@@Z ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::push_back
$LN10@CheckMaxSt@3:

; 236  : 	for( int i=0; i<iPushCnt; i++ )

  0009d	ff 45 08	 inc	 DWORD PTR _i$530964[ebp]
  000a0	39 75 08	 cmp	 DWORD PTR _i$530964[ebp], esi
  000a3	7c b8		 jl	 SHORT $LN11@CheckMaxSt@3

; 242  : 		}
; 243  : 	}
; 244  : 
; 245  : 	if( vOwnerStructList.empty() || (int)vOwnerStructList.size() < iMaxCnt )

  000a5	8b 4d e0	 mov	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  000a8	8b 45 e4	 mov	 eax, DWORD PTR _vOwnerStructList$[ebp+4]
  000ab	3b c8		 cmp	 ecx, eax
  000ad	74 4f		 je	 SHORT $LN6@CheckMaxSt@3
  000af	2b c1		 sub	 eax, ecx
  000b1	8b d8		 mov	 ebx, eax
  000b3	c1 fb 02	 sar	 ebx, 2
  000b6	3b 5d 10	 cmp	 ebx, DWORD PTR _iMaxCnt$[ebp]
  000b9	7c 43		 jl	 SHORT $LN6@CheckMaxSt@3

; 247  : 
; 248  : 	ioPushStruct *pDelete = vOwnerStructList.front();

  000bb	8b 31		 mov	 esi, DWORD PTR [ecx]

; 249  : 
; 250  : 	int iListCnt = vOwnerStructList.size();
; 251  : 	for( i=1; i < iListCnt; i++ )

  000bd	33 d2		 xor	 edx, edx
  000bf	42		 inc	 edx
  000c0	3b da		 cmp	 ebx, edx
  000c2	7e 17		 jle	 SHORT $LN3@CheckMaxSt@3
$LL5@CheckMaxSt@3:

; 252  : 	{
; 253  : 		if( pDelete->GetCreateTime() > vOwnerStructList[i]->GetCreateTime() )

  000c4	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000c7	8b be d4 01 00
	00		 mov	 edi, DWORD PTR [esi+468]
  000cd	3b b8 d4 01 00
	00		 cmp	 edi, DWORD PTR [eax+468]

; 254  : 		{
; 255  : 			pDelete = vOwnerStructList[i];

  000d3	0f 47 f0	 cmova	 esi, eax
  000d6	42		 inc	 edx
  000d7	3b d3		 cmp	 edx, ebx
  000d9	7c e9		 jl	 SHORT $LL5@CheckMaxSt@3
$LN3@CheckMaxSt@3:

; 256  : 		}
; 257  : 	}
; 258  : 
; 259  : 	if( pDelete )

  000db	85 f6		 test	 esi, esi
  000dd	74 1f		 je	 SHORT $LN6@CheckMaxSt@3

; 260  : 	{
; 261  : 		pDelete->SetKillerChar( pOwner->GetCharName() );

  000df	ff 75 f0	 push	 DWORD PTR tv375[ebp]
  000e2	8d 8e b4 02 00
	00		 lea	 ecx, DWORD PTR [esi+692]
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 262  : 		return pDelete;

  000ee	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	8d 4d e0	 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  000f5	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
  000fa	8b c6		 mov	 eax, esi
  000fc	eb 0e		 jmp	 SHORT $LN14@CheckMaxSt@3
$LN6@CheckMaxSt@3:

; 246  : 		return NULL;

  000fe	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00102	8d 4d e0	 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  00105	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@IAEXXZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::_Tidy
$LN89@CheckMaxSt@3:
  0010a	33 c0		 xor	 eax, eax
$LN14@CheckMaxSt@3:

; 263  : 	}
; 264  : 
; 265  : 	return NULL;
; 266  : }

  0010c	e8 00 00 00 00	 call	 __EH_epilog3
  00111	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _vOwnerStructList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioPushStruct@@V?$allocator@PAVioPushStruct@@@std@@@std@@QAE@XZ ; std::vector<ioPushStruct *,std::allocator<ioPushStruct *> >::~vector<ioPushStruct *,std::allocator<ioPushStruct *> >
__ehhandler$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckMaxStructCntByNum@ioPushStructListManager@@QAEPAVioPushStruct@@PAVioBaseChar@@HH@Z ENDP ; ioPushStructListManager::CheckMaxStructCntByNum
; Function compile flags: /Ogsp
;	COMDAT ??_GioPushStructListManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioPushStructListManager@@UAEPAXI@Z PROC		; ioPushStructListManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioPushStructListManager@@UAE@XZ ; ioPushStructListManager::~ioPushStructListManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioPushStructListManager@@UAEPAXI@Z ENDP		; ioPushStructListManager::`scalar deleting destructor'
_TEXT	ENDS
END
