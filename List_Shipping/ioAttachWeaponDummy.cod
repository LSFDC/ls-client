; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAttachWeaponDummy.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetFireState@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::SetFireState
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
;	COMDAT ?SetFireState@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?SetFireState@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::SetFireState, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b d9		 mov	 ebx, ecx

; 98   : 	//위치 오프셋 설정
; 99   : 	D3DXVECTOR3 vPos = GetWorldPosition();

  00014	8b 03		 mov	 eax, DWORD PTR [ebx]
  00016	57		 push	 edi
  00017	ff 50 70	 call	 DWORD PTR [eax+112]

; 100  : 	vPos.y += m_fHeightOffset;

  0001a	f3 0f 10 83 2c
	07 00 00	 movss	 xmm0, DWORD PTR [ebx+1836]
  00022	8b f0		 mov	 esi, eax

; 101  : 	SetWorldPosition( vPos );

  00024	8b 03		 mov	 eax, DWORD PTR [ebx]
  00026	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00029	a5		 movsd
  0002a	a5		 movsd
  0002b	a5		 movsd
  0002c	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vPos$[ebp+4]
  00031	0f 5a c0	 cvtps2pd xmm0, xmm0
  00034	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$[ebp]
  00037	0f 5a c9	 cvtps2pd xmm1, xmm1
  0003a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0003e	51		 push	 ecx
  0003f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00043	8b cb		 mov	 ecx, ebx
  00045	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$[ebp+4], xmm0
  0004a	ff 50 44	 call	 DWORD PTR [eax+68]

; 102  : 
; 103  : 	m_AttachState = AS_FIRE;
; 104  : 	m_State = DCS_DELAY;
; 105  : }

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c7 83 80 14 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+5248], 1
  0005c	c7 83 30 02 00
	00 02 00 00 00	 mov	 DWORD PTR [ebx+560], 2
  00066	33 cd		 xor	 ecx, ebp
  00068	5b		 pop	 ebx
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	c9		 leave
  0006f	c3		 ret	 0
?SetFireState@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::SetFireState
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
PUBLIC	?CreateEffect@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::CreateEffect
EXTRN	__imp_?AttachEffect@ioEntityGroup@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@ABUD3DXQUATERNION@@ABUD3DXVECTOR3@@_N@Z:PROC
EXTRN	__imp_?QUAT_IDENTITY@ioMath@@2UD3DXQUATERNION@@A:BYTE
EXTRN	__imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?CreateEffect@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
?CreateEffect@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::CreateEffect, COMDAT
; _this$ = ecx

; 303  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 304  : 	if ( !m_szAttachEffect.IsEmpty() )

  00004	8d be bc 14 00
	00		 lea	 edi, DWORD PTR [esi+5308]
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	75 1a		 jne	 SHORT $LN1@CreateEffe

; 305  : 		m_pGroup->AttachEffect( m_szAttachEffect, NULL );

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00019	6a 01		 push	 1
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  00021	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?QUAT_IDENTITY@ioMath@@2UD3DXQUATERNION@@A
  00027	6a 00		 push	 0
  00029	57		 push	 edi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AttachEffect@ioEntityGroup@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@ABUD3DXQUATERNION@@ABUD3DXVECTOR3@@_N@Z
$LN1@CreateEffe:

; 306  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?CreateEffect@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::CreateEffect
_TEXT	ENDS
PUBLIC	?RemoveEffect@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::RemoveEffect
EXTRN	__imp_?EndEffect@ioEntityGroup@@QAEXABVioHashString@@_N1@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?RemoveEffect@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
?RemoveEffect@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::RemoveEffect, COMDAT
; _this$ = ecx

; 309  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 310  : 	if ( !m_szAttachEffect.IsEmpty() )

  00004	8d be bc 14 00
	00		 lea	 edi, DWORD PTR [esi+5308]
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	75 0e		 jne	 SHORT $LN1@RemoveEffe

; 311  : 		m_pGroup->EndEffect(m_szAttachEffect, false );

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00019	6a 01		 push	 1
  0001b	6a 00		 push	 0
  0001d	57		 push	 edi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EndEffect@ioEntityGroup@@QAEXABVioHashString@@_N1@Z
$LN1@RemoveEffe:

; 312  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
?RemoveEffect@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::RemoveEffect
_TEXT	ENDS
PUBLIC	?TranslateByConveyer@ioAttachWeaponDummy@@UAEXABUD3DXVECTOR3@@@Z ; ioAttachWeaponDummy::TranslateByConveyer
EXTRN	?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByConveyer
; Function compile flags: /Ogsp
;	COMDAT ?TranslateByConveyer@ioAttachWeaponDummy@@UAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_vMove$ = 8						; size = 4
?TranslateByConveyer@ioAttachWeaponDummy@@UAEXABUD3DXVECTOR3@@@Z PROC ; ioAttachWeaponDummy::TranslateByConveyer, COMDAT
; _this$ = ecx

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 316  : 	if ( m_bNotUseTranslateByConveyer )

  00003	80 b9 cc 14 00
	00 00		 cmp	 BYTE PTR [ecx+5324], 0
  0000a	75 06		 jne	 SHORT $LN1@TranslateB

; 320  : }

  0000c	5d		 pop	 ebp

; 317  : 		return;
; 318  : 	else
; 319  : 		ioDummyChar::TranslateByConveyer( vMove );

  0000d	e9 00 00 00 00	 jmp	 ?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z ; ioDummyChar::TranslateByConveyer
$LN1@TranslateB:

; 320  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?TranslateByConveyer@ioAttachWeaponDummy@@UAEXABUD3DXVECTOR3@@@Z ENDP ; ioAttachWeaponDummy::TranslateByConveyer
_TEXT	ENDS
PUBLIC	?size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEAAUCreateInfo@ioAttachWeaponDummy@@I@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEAAUCreateInfo@ioAttachWeaponDummy@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEAAUCreateInfo@ioAttachWeaponDummy@@I@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEAAUCreateInfo@ioAttachWeaponDummy@@I@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::operator[]
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBE_NPBUCreateInfo@ioAttachWeaponDummy@@@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBE_NPBUCreateInfo@ioAttachWeaponDummy@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBE_NPBUCreateInfo@ioAttachWeaponDummy@@@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBE_NPBUCreateInfo@ioAttachWeaponDummy@@@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@XZ ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocator<ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@XZ PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocator<ioAttachWeaponDummy::CreateInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@XZ ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocator<ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXXZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@ABV01@@Z ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocator<ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocator<ioAttachWeaponDummy::CreateInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocator<ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@I@Z ; std::allocator<ioAttachWeaponDummy::CreateInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@I@Z PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@I@Z ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QBEIXZ ; std::allocator<ioAttachWeaponDummy::CreateInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QBEIXZ PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QBEIXZ ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCreateInfo@ioAttachWeaponDummy@@@std@@YAPBUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z ; std::addressof<ioAttachWeaponDummy::CreateInfo const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUCreateInfo@ioAttachWeaponDummy@@@std@@YAPBUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCreateInfo@ioAttachWeaponDummy@@@std@@YAPBUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z PROC ; std::addressof<ioAttachWeaponDummy::CreateInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCreateInfo@ioAttachWeaponDummy@@@std@@YAPBUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z ENDP ; std::addressof<ioAttachWeaponDummy::CreateInfo const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@IPAU12@@Z ; std::_Allocate<ioAttachWeaponDummy::CreateInfo>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@IPAU12@@Z
_TEXT	SEGMENT
$T533495 = -12						; size = 12
$T533500 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@IPAU12@@Z PROC ; std::_Allocate<ioAttachWeaponDummy::CreateInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 03	 shl	 eax, 3
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T533500[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T533500[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T533495[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T533495[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T533495[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@IPAU12@@Z ENDP ; std::_Allocate<ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	??$forward@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YAAAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z ; std::forward<ioAttachWeaponDummy::CreateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YAAAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YAAAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z PROC ; std::forward<ioAttachWeaponDummy::CreateInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YAAAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z ENDP ; std::forward<ioAttachWeaponDummy::CreateInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCreateInfo@ioAttachWeaponDummy@@@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct<ioAttachWeaponDummy::CreateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUCreateInfo@ioAttachWeaponDummy@@@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCreateInfo@ioAttachWeaponDummy@@@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct<ioAttachWeaponDummy::CreateInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUCreateInfo@ioAttachWeaponDummy@@@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct<ioAttachWeaponDummy::CreateInfo &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCreateInfo@ioAttachWeaponDummy@@@std@@YAABUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z ; std::forward<ioAttachWeaponDummy::CreateInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCreateInfo@ioAttachWeaponDummy@@@std@@YAABUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCreateInfo@ioAttachWeaponDummy@@@std@@YAABUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z PROC ; std::forward<ioAttachWeaponDummy::CreateInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCreateInfo@ioAttachWeaponDummy@@@std@@YAABUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z ENDP ; std::forward<ioAttachWeaponDummy::CreateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCreateInfo@ioAttachWeaponDummy@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCreateInfo@ioAttachWeaponDummy@@0@Z ; std::_Ptr_cat<ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UCreateInfo@ioAttachWeaponDummy@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCreateInfo@ioAttachWeaponDummy@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCreateInfo@ioAttachWeaponDummy@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCreateInfo@ioAttachWeaponDummy@@0@Z PROC ; std::_Ptr_cat<ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UCreateInfo@ioAttachWeaponDummy@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCreateInfo@ioAttachWeaponDummy@@0@Z ENDP ; std::_Ptr_cat<ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	??$_Construct@UCreateInfo@ioAttachWeaponDummy@@ABU12@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z ; std::_Construct<ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UCreateInfo@ioAttachWeaponDummy@@ABU12@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCreateInfo@ioAttachWeaponDummy@@ABU12@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z PROC ; std::_Construct<ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UCreateInfo@ioAttachWeaponDummy@@ABU12@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@ABU12@@Z ENDP ; std::_Construct<ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo const &>
_TEXT	ENDS
PUBLIC	??$move@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z ; std::move<ioAttachWeaponDummy::CreateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z PROC ; std::move<ioAttachWeaponDummy::CreateInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z ENDP ; std::move<ioAttachWeaponDummy::CreateInfo &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@@Z ; std::_Val_type<ioAttachWeaponDummy::CreateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@@Z PROC ; std::_Val_type<ioAttachWeaponDummy::CreateInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@@Z ENDP ; std::_Val_type<ioAttachWeaponDummy::CreateInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@@Z ; std::_Destroy<ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@@Z PROC ; std::_Destroy<ioAttachWeaponDummy::CreateInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@@Z ENDP ; std::_Destroy<ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	??$forward@UCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z ; std::forward<ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z PROC ; std::forward<ioAttachWeaponDummy::CreateInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCreateInfo@ioAttachWeaponDummy@@@std@@YA$$QAUCreateInfo@ioAttachWeaponDummy@@AAU12@@Z ENDP ; std::forward<ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3LengthSq
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv165 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3LengthSq, COMDAT

; 1725 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1726 : #ifdef D3DX_DEBUG
; 1727 :     if(!pV)
; 1728 :         return 0.0f;
; 1729 : #endif
; 1730 : 
; 1731 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  00006	d9 40 04	 fld	 DWORD PTR [eax+4]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0000e	d9 c1		 fld	 ST(1)
  00010	de ca		 fmulp	 ST(2), ST(0)
  00012	d9 c2		 fld	 ST(2)
  00014	de cb		 fmulp	 ST(3), ST(0)
  00016	d9 c9		 fxch	 ST(1)
  00018	de c2		 faddp	 ST(2), ST(0)
  0001a	d9 c0		 fld	 ST(0)
  0001c	de c9		 fmulp	 ST(1), ST(0)
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 5d 08	 fstp	 DWORD PTR tv165[ebp]
  00023	d9 45 08	 fld	 DWORD PTR tv165[ebp]

; 1732 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3LengthSq
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??0FireTime@@QAE@XZ				; FireTime::FireTime
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$1
__ehfuncinfo$??0FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FireTime@@QAE@XZ PROC				; FireTime::FireTime, COMDAT
; _this$ = ecx

; 219  : 	FireTime()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi
  00026	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00029	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002d	ff d7		 call	 edi

; 220  : 	{
; 221  : 		dwStart = 0;

  0002f	89 1e		 mov	 DWORD PTR [esi], ebx

; 222  : 		dwDuration = 0;

  00031	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 223  : 
; 224  : 		iAttributeIdx = 0;

  00034	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  : 		iResistanceIdx = 0;

  00037	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 226  : 
; 227  : 		bLoopWoundedAni = false;

  0003a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 228  : 		dwWoundedAniDuration = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 229  : 
; 230  : 		dwWeaponIdx = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 231  : 		eCollisionType = ACT_NONE;

  00043	c7 46 2c 06 00
	00 00		 mov	 DWORD PTR [esi+44], 6

; 232  : 		eFireTimeType = FTT_NORMAL_ATTACK;

  0004a	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 233  : 
; 234  : 		m_iExtraValue = 0;

  0004d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 235  : 	}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FireTime@@QAE@XZ ENDP				; FireTime::FireTime
PUBLIC	?IsLive@ioWeapon@@QBE_NXZ			; ioWeapon::IsLive
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
;	COMDAT ?IsLive@ioWeapon@@QBE_NXZ
_TEXT	SEGMENT
?IsLive@ioWeapon@@QBE_NXZ PROC				; ioWeapon::IsLive, COMDAT
; _this$ = ecx

; 533  : 	inline bool IsLive() const { return m_bLive; }

  00000	8a 81 82 05 00
	00		 mov	 al, BYTE PTR [ecx+1410]
  00006	c3		 ret	 0
?IsLive@ioWeapon@@QBE_NXZ ENDP				; ioWeapon::IsLive
_TEXT	ENDS
PUBLIC	?GetWeaponIndex@ioWeapon@@QBEKXZ		; ioWeapon::GetWeaponIndex
; Function compile flags: /Ogsp
;	COMDAT ?GetWeaponIndex@ioWeapon@@QBEKXZ
_TEXT	SEGMENT
?GetWeaponIndex@ioWeapon@@QBEKXZ PROC			; ioWeapon::GetWeaponIndex, COMDAT
; _this$ = ecx

; 536  : 	inline DWORD GetWeaponIndex() const { return m_dwWeaponIdx; }

  00000	8b 81 b8 04 00
	00		 mov	 eax, DWORD PTR [ecx+1208]
  00006	c3		 ret	 0
?GetWeaponIndex@ioWeapon@@QBEKXZ ENDP			; ioWeapon::GetWeaponIndex
_TEXT	ENDS
PUBLIC	?IsLive@ioAreaWeapon@@QBE_NXZ			; ioAreaWeapon::IsLive
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioareaweapon.h
;	COMDAT ?IsLive@ioAreaWeapon@@QBE_NXZ
_TEXT	SEGMENT
?IsLive@ioAreaWeapon@@QBE_NXZ PROC			; ioAreaWeapon::IsLive, COMDAT
; _this$ = ecx

; 418  : 	inline bool IsLive() const { return m_bLive; }

  00000	8a 81 94 07 00
	00		 mov	 al, BYTE PTR [ecx+1940]
  00006	c3		 ret	 0
?IsLive@ioAreaWeapon@@QBE_NXZ ENDP			; ioAreaWeapon::IsLive
_TEXT	ENDS
PUBLIC	?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ	; ioAreaWeapon::GetAreaWeaponIndex
; Function compile flags: /Ogsp
;	COMDAT ?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ
_TEXT	SEGMENT
?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ PROC		; ioAreaWeapon::GetAreaWeaponIndex, COMDAT
; _this$ = ecx

; 431  : 	inline DWORD GetAreaWeaponIndex() const { return m_dwAreaWeaponIndex; }

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ ENDP		; ioAreaWeapon::GetAreaWeaponIndex
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z ; CEncrypt<enum TeamType>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z PROC ; CEncrypt<enum TeamType>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 2959 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2960 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, sizeof(TeamType) );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 2961 : 		*value = *((TeamType*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 2962 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z ENDP ; CEncrypt<enum TeamType>::DecryptValueToPool
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CheckMove@ioAttachWeaponDummy@@IAEXXZ		; ioAttachWeaponDummy::CheckMove
EXTRN	?SetAreaPosition@ioAreaWeapon@@QAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z:PROC ; ioAreaWeapon::SetAreaPosition
EXTRN	?FindAreaWeaponByIndex@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@K@Z:PROC ; ioAreaWeaponManager::FindAreaWeaponByIndex
EXTRN	?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ:PROC ; ioAreaWeaponManager::GetSingleton
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	?FindWeapon@ioWeaponManager@@QAEPAVioWeapon@@PAVioBaseChar@@K@Z:PROC ; ioWeaponManager::FindWeapon
EXTRN	?GetSingleton@ioWeaponManager@@SAAAV1@XZ:PROC	; ioWeaponManager::GetSingleton
EXTRN	?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ:PROC ; ioDummyChar::GetOwner
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
;	COMDAT ?CheckMove@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
_pOwner$ = -24						; size = 4
_pStage$ = -20						; size = 4
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?CheckMove@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::CheckMove, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 229  : 	ioBaseChar *pOwner = GetOwner();

  00013	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00018	89 45 e8	 mov	 DWORD PTR _pOwner$[ebp], eax

; 230  : 	if ( !pOwner )

  0001b	85 c0		 test	 eax, eax
  0001d	0f 84 f7 00 00
	00		 je	 $LN5@CheckMove

; 231  : 		return;
; 232  : 
; 233  : 	ioPlayStage *pStage = pOwner->GetCreator();

  00023	8b 80 44 03 00
	00		 mov	 eax, DWORD PTR [eax+836]
  00029	89 45 ec	 mov	 DWORD PTR _pStage$[ebp], eax

; 234  : 	if ( !pStage )

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 e6 00 00
	00		 je	 $LN5@CheckMove

; 235  : 		return;
; 236  : 
; 237  : 	D3DXVECTOR3 vPos = GetWorldPosition() + m_vCreateWeaponOffset;

  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	53		 push	 ebx
  00037	57		 push	 edi
  00038	8b ce		 mov	 ecx, esi
  0003a	ff 50 70	 call	 DWORD PTR [eax+112]
  0003d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00042	f3 0f 10 86 9c
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5276]
  0004a	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]

; 238  : 
; 239  : 	//무기 리스트 얻기
; 240  : 	int nWeaponCnt = (int)m_CreateWeaponList.size();

  0004f	8b be a8 14 00
	00		 mov	 edi, DWORD PTR [esi+5288]
  00055	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00059	2b be a4 14 00
	00		 sub	 edi, DWORD PTR [esi+5284]
  0005f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00062	0f 5a c0	 cvtps2pd xmm0, xmm0
  00065	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00069	f3 0f 10 8e a0
	14 00 00	 movss	 xmm1, DWORD PTR [esi+5280]
  00071	0f 5a d2	 cvtps2pd xmm2, xmm2
  00074	0f 5a c9	 cvtps2pd xmm1, xmm1
  00077	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0007b	f3 0f 10 96 98
	14 00 00	 movss	 xmm2, DWORD PTR [esi+5272]
  00083	0f 5a d2	 cvtps2pd xmm2, xmm2
  00086	0f 5a db	 cvtps2pd xmm3, xmm3
  00089	c1 ff 03	 sar	 edi, 3
  0008c	f2 0f 58 d3	 addsd	 xmm2, xmm3

; 241  : 
; 242  : 	for (int i=0; i<nWeaponCnt; ++i)

  00090	33 db		 xor	 ebx, ebx
  00092	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00096	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0009a	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0009e	f3 0f 11 55 f0	 movss	 DWORD PTR _vPos$[ebp], xmm2
  000a3	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$[ebp+4], xmm0
  000a8	f3 0f 11 4d f8	 movss	 DWORD PTR _vPos$[ebp+8], xmm1
  000ad	85 ff		 test	 edi, edi
  000af	7e 67		 jle	 SHORT $LN29@CheckMove
$LL28@CheckMove:

; 243  : 	{
; 244  : 		CreateInfo sCreateInfo = m_CreateWeaponList[i];

  000b1	8b 86 a4 14 00
	00		 mov	 eax, DWORD PTR [esi+5284]
  000b7	8b 0c d8	 mov	 ecx, DWORD PTR [eax+ebx*8]
  000ba	8b 44 d8 04	 mov	 eax, DWORD PTR [eax+ebx*8+4]

; 245  : 		if ( sCreateInfo.wType == Normal_Weapon )
; 246  : 		{
; 247  : 			ioWeapon *pWeapon = g_WeaponMgr.FindWeapon( pOwner, sCreateInfo.dwIndex );

  000be	50		 push	 eax
  000bf	85 c9		 test	 ecx, ecx
  000c1	75 29		 jne	 SHORT $LN4@CheckMove
  000c3	ff 75 e8	 push	 DWORD PTR _pOwner$[ebp]
  000c6	e8 00 00 00 00	 call	 ?GetSingleton@ioWeaponManager@@SAAAV1@XZ ; ioWeaponManager::GetSingleton
  000cb	8b c8		 mov	 ecx, eax
  000cd	e8 00 00 00 00	 call	 ?FindWeapon@ioWeaponManager@@QAEPAVioWeapon@@PAVioBaseChar@@K@Z ; ioWeaponManager::FindWeapon

; 248  : 			if ( pWeapon && pWeapon->IsLive() )

  000d2	85 c0		 test	 eax, eax
  000d4	74 3d		 je	 SHORT $LN6@CheckMove
  000d6	80 b8 82 05 00
	00 00		 cmp	 BYTE PTR [eax+1410], 0
  000dd	74 34		 je	 SHORT $LN6@CheckMove

; 249  : 			{
; 250  : 				pWeapon->SetPosition( vPos );

  000df	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$[ebp]
  000e2	51		 push	 ecx
  000e3	8b c8		 mov	 ecx, eax
  000e5	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 251  : 			}
; 252  : 		}
; 253  : 		else

  000ea	eb 27		 jmp	 SHORT $LN6@CheckMove
$LN4@CheckMove:

; 254  : 		{
; 255  : 			ioAreaWeapon *pAreaWeapon = g_AreaWeaponMgr.FindAreaWeaponByIndex( sCreateInfo.dwIndex );

  000ec	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  000f1	8b c8		 mov	 ecx, eax
  000f3	e8 00 00 00 00	 call	 ?FindAreaWeaponByIndex@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@K@Z ; ioAreaWeaponManager::FindAreaWeaponByIndex

; 256  : 			if ( pAreaWeapon && pAreaWeapon->IsLive() )

  000f8	85 c0		 test	 eax, eax
  000fa	74 17		 je	 SHORT $LN6@CheckMove
  000fc	80 b8 94 07 00
	00 00		 cmp	 BYTE PTR [eax+1940], 0
  00103	74 0e		 je	 SHORT $LN6@CheckMove

; 257  : 			{
; 258  : 				pAreaWeapon->SetAreaPosition( vPos, pStage );

  00105	ff 75 ec	 push	 DWORD PTR _pStage$[ebp]
  00108	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$[ebp]
  0010b	51		 push	 ecx
  0010c	8b c8		 mov	 ecx, eax
  0010e	e8 00 00 00 00	 call	 ?SetAreaPosition@ioAreaWeapon@@QAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ; ioAreaWeapon::SetAreaPosition
$LN6@CheckMove:

; 241  : 
; 242  : 	for (int i=0; i<nWeaponCnt; ++i)

  00113	43		 inc	 ebx
  00114	3b df		 cmp	 ebx, edi
  00116	7c 99		 jl	 SHORT $LL28@CheckMove
$LN29@CheckMove:
  00118	5f		 pop	 edi
  00119	5b		 pop	 ebx
$LN5@CheckMove:

; 259  : 			}
; 260  : 		}
; 261  : 	}
; 262  : }

  0011a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011d	33 cd		 xor	 ecx, ebp
  0011f	5e		 pop	 esi
  00120	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00125	c9		 leave
  00126	c3		 ret	 0
?CheckMove@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::CheckMove
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@1@@Z ; std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@1@@Z PROC ; std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@1@@Z ENDP ; std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEII@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEII@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Vector_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Vector_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QAE@PAUCreateInfo@ioAttachWeaponDummy@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::_Vector_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEPAUCreateInfo@ioAttachWeaponDummy@@I@Z ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEPAUCreateInfo@ioAttachWeaponDummy@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEPAUCreateInfo@ioAttachWeaponDummy@@I@Z PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@IPAU12@@Z ; std::_Allocate<ioAttachWeaponDummy::CreateInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEPAUCreateInfo@ioAttachWeaponDummy@@I@Z ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::operator==
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<17>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<17>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 a7 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 90 01 00
	00		 je	 $LN95@LoadString
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 78 01 00
	00		 je	 $LN94@LoadString
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 61 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 4a 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 34 01 00
	00		 je	 $LN91@LoadString
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 1e 01 00
	00		 je	 $LN90@LoadString
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 07 01 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 f0 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 da 00 00
	00		 je	 $LN87@LoadString
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 c4 00 00
	00		 je	 $LN86@LoadString
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 ad 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 96 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 80 00 00
	00		 je	 $LN83@LoadString
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	74 6e		 je	 SHORT $LN82@LoadString
  00110	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00113	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00116	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00119	84 d2		 test	 dl, dl
  0011b	74 5b		 je	 SHORT $LN81@LoadString
  0011d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00120	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	0f 84 a6 00 00
	00		 je	 $LN111@LoadString
  0012d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00130	84 d2		 test	 dl, dl
  00132	74 3f		 je	 SHORT $LN79@LoadString
  00134	32 d1		 xor	 dl, cl
  00136	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00139	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013c	84 d2		 test	 dl, dl
  0013e	74 2d		 je	 SHORT $LN78@LoadString
  00140	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00143	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00146	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00149	84 d2		 test	 dl, dl
  0014b	74 1a		 je	 SHORT $LN77@LoadString
  0014d	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00150	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00153	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00156	84 c0		 test	 al, al
  00158	74 07		 je	 SHORT $LN76@LoadString
  0015a	34 ed		 xor	 al, -19			; ffffffedH
  0015c	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  0015f	eb 72		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00161	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00165	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  00167	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0016b	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  0016d	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00171	eb 60		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00173	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00176	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00178	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0017c	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0017e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00182	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00184	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  00187	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00189	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0018d	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0018f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00193	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00195	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00199	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0019b	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  0019e	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001a0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001a4	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001a6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001aa	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001ac	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001b0	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001b2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001b5	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001b7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001bb	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001bd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001c1	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001c3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001c7	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001c9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001cd	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001cf	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001d3	6a 04		 push	 4
  001d5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001dc	5a		 pop	 edx
$LL104@LoadString:
  001dd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001e3	83 c0 04	 add	 eax, 4
  001e6	4a		 dec	 edx
  001e7	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001e9	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001ec	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ef	57		 push	 edi
  001f0	56		 push	 esi
  001f1	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f4	50		 push	 eax
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fe	5f		 pop	 edi
  001ff	33 cd		 xor	 ecx, ebp
  00201	5e		 pop	 esi
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	c9		 leave
  00208	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ; ioINILoader::LoadInt_e<12>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<12>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@LoadInt_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@LoadInt_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@LoadInt_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@LoadInt_e
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@LoadInt_e
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@LoadInt_e
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@LoadInt_e
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@LoadInt_e
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@LoadInt_e
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@LoadInt_e
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@LoadInt_e
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@LoadInt_e:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@LoadInt_e
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@LoadInt_e:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@LoadInt_e
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@LoadInt_e:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  0018c	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018f	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00192	50		 push	 eax
  00193	8b ce		 mov	 ecx, esi
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019e	33 cd		 xor	 ecx, ebp
  001a0	5e		 pop	 esi
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	c9		 leave
  001a7	c2 08 00	 ret	 8
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ; ioINILoader::LoadFloat_e<16>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<16>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadFloat_
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadFloat_
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadFloat_
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadFloat_
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadFloat_
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadFloat_
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadFloat_
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadFloat_
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadFloat_:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadFloat_:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadFloat_
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadFloat_:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001eb	51		 push	 ecx
  001ec	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	50		 push	 eax
  001f5	8b ce		 mov	 ecx, esi
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	5e		 pop	 esi
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	c9		 leave
  00209	c2 08 00	 ret	 8
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ; ioINILoader::LoadFloat_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<14>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadFloat_@2
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadFloat_@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadFloat_@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadFloat_@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadFloat_@2
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadFloat_@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadFloat_@2
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadFloat_@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadFloat_@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadFloat_@2
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadFloat_@2
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadFloat_@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadFloat_@2
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadFloat_@2
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  0019e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001a3	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a7	51		 push	 ecx
  001a8	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b0	50		 push	 eax
  001b1	8b ce		 mov	 ecx, esi
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bc	33 cd		 xor	 ecx, ebp
  001be	5e		 pop	 esi
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	c9		 leave
  001c5	c2 08 00	 ret	 8
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ; ioINILoader::LoadBool_e<15>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<15>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadBool_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadBool_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadBool_e
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadBool_e
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadBool_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadBool_e
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadBool_e
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadBool_e
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadBool_e:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadBool_e
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadBool_e:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadBool_e
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadBool_e:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001cf	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<15>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<14>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 64 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 4d 01 00
	00		 je	 $LN95@LoadString@2
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 36 01 00
	00		 je	 $LN94@LoadString@2
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 1e 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 07 01 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 f0 00 00
	00		 je	 $LN91@LoadString@2
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 da 00 00
	00		 je	 $LN90@LoadString@2
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 c4 00 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 ad 00 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 96 00 00
	00		 je	 $LN87@LoadString@2
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 80 00 00
	00		 je	 $LN86@LoadString@2
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 6e		 je	 SHORT $LN85@LoadString@2
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 5b		 je	 SHORT $LN84@LoadString@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	0f 84 95 00 00
	00		 je	 $LN111@LoadString@2
  000fb	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fe	84 d2		 test	 dl, dl
  00100	74 3f		 je	 SHORT $LN82@LoadString@2
  00102	32 d1		 xor	 dl, cl
  00104	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 2d		 je	 SHORT $LN81@LoadString@2
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 1a		 je	 SHORT $LN80@LoadString@2
  0011b	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  0011e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00121	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00124	84 c0		 test	 al, al
  00126	74 07		 je	 SHORT $LN79@LoadString@2
  00128	34 ec		 xor	 al, -20			; ffffffecH
  0012a	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  0012d	eb 61		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  0012f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00133	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  00135	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00139	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  0013b	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0013f	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  00141	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00144	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  00146	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0014a	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  0014c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00150	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  00152	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00155	eb 39		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00157	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0015b	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  0015d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00161	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  00163	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00167	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00169	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0016c	eb 22		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  0016e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00172	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  00174	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00178	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  0017a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0017e	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  00180	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00184	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00186	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0018a	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  0018c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  00190	6a 03		 push	 3
  00192	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00195	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00199	5a		 pop	 edx
$LL104@LoadString@2:
  0019a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a0	83 c0 04	 add	 eax, 4
  001a3	4a		 dec	 edx
  001a4	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  001a6	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ac	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b0	57		 push	 edi
  001b1	56		 push	 esi
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	50		 push	 eax
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bf	5f		 pop	 edi
  001c0	33 cd		 xor	 ecx, ebp
  001c2	5e		 pop	 esi
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	c9		 leave
  001c9	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z ; ioINILoader::LoadBool_e<30>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<30>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 02 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 02 00
	00		 je	 $LN95@LoadBool_e@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 af 02 00
	00		 je	 $LN94@LoadBool_e@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 97 02 00
	00		 je	 $LN93@LoadBool_e@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 02 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 68 02 00
	00		 je	 $LN91@LoadBool_e@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 52 02 00
	00		 je	 $LN90@LoadBool_e@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 3d 02 00
	00		 je	 $LN89@LoadBool_e@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 02 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 10 02 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 fa 01 00
	00		 je	 $LN86@LoadBool_e@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 e5 01 00
	00		 je	 $LN85@LoadBool_e@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 01 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b8 01 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 a2 01 00
	00		 je	 $LN82@LoadBool_e@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 8d 01 00
	00		 je	 $LN81@LoadBool_e@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 77 01 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 60 01 00
	00		 je	 $LN79@LoadBool_e@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 4a 01 00
	00		 je	 $LN78@LoadBool_e@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 35 01 00
	00		 je	 $LN77@LoadBool_e@2
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 1f 01 00
	00		 je	 $LN76@LoadBool_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 08 01 00
	00		 je	 $LN75@LoadBool_e@2
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 f2 00 00
	00		 je	 $LN74@LoadBool_e@2
  00191	32 d1		 xor	 dl, cl
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 dd 00 00
	00		 je	 $LN73@LoadBool_e@2
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 c4 00 00
	00		 je	 $LN72@LoadBool_e@2
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 aa 00 00
	00		 je	 $LN71@LoadBool_e@2
  001c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c5	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c8	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001cb	84 d2		 test	 dl, dl
  001cd	0f 84 91 00 00
	00		 je	 $LN70@LoadBool_e@2
  001d3	32 d1		 xor	 dl, cl
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	74 7d		 je	 SHORT $LN69@LoadBool_e@2
  001df	32 d3		 xor	 dl, bl
  001e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e4	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001e7	84 d2		 test	 dl, dl
  001e9	74 68		 je	 SHORT $LN68@LoadBool_e@2
  001eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ee	80 78 1d 00	 cmp	 BYTE PTR [eax+29], 0
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	0f 84 07 01 00
	00		 je	 $LN1@LoadBool_e@2
  001fb	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001fe	84 d2		 test	 dl, dl
  00200	74 49		 je	 SHORT $LN66@LoadBool_e@2
  00202	32 d1		 xor	 dl, cl
  00204	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00207	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020a	84 d2		 test	 dl, dl
  0020c	74 35		 je	 SHORT $LN65@LoadBool_e@2
  0020e	32 d3		 xor	 dl, bl
  00210	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00213	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  00216	84 d2		 test	 dl, dl
  00218	74 20		 je	 SHORT $LN64@LoadBool_e@2
  0021a	8a 40 21	 mov	 al, BYTE PTR [eax+33]
  0021d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00220	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00223	84 c0		 test	 al, al
  00225	74 0a		 je	 SHORT $LN63@LoadBool_e@2
  00227	34 ec		 xor	 al, -20			; ffffffecH
  00229	88 45 f9	 mov	 BYTE PTR __k$[ebp+33], al
  0022c	e9 d1 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN63@LoadBool_e@2:
  00231	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+33], -20 ; ffffffecH
  00235	e9 c8 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN64@LoadBool_e@2:
  0023a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  0023e	e9 bf 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN65@LoadBool_e@2:
  00243	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  00246	e9 b7 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN66@LoadBool_e@2:
  0024b	88 4d f6	 mov	 BYTE PTR __k$[ebp+30], cl
  0024e	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN68@LoadBool_e@2:
  00253	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00257	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN69@LoadBool_e@2:
  0025c	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  0025f	e9 9e 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN70@LoadBool_e@2:
  00264	88 4d f2	 mov	 BYTE PTR __k$[ebp+26], cl
  00267	e9 96 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN71@LoadBool_e@2:
  0026c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  00270	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN72@LoadBool_e@2:
  00275	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00279	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN73@LoadBool_e@2:
  0027e	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00281	eb 7f		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  00283	88 4d ee	 mov	 BYTE PTR __k$[ebp+22], cl
  00286	eb 7a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  00288	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0028c	eb 74		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  0028e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00292	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  00294	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  00297	eb 69		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  00299	88 4d ea	 mov	 BYTE PTR __k$[ebp+18], cl
  0029c	eb 64		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  0029e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  002a2	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  002a4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002a8	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  002aa	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002ad	eb 53		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  002af	88 4d e6	 mov	 BYTE PTR __k$[ebp+14], cl
  002b2	eb 4e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  002b4	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  002b8	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  002ba	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002be	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  002c0	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002c3	eb 3d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  002c5	88 4d e2	 mov	 BYTE PTR __k$[ebp+10], cl
  002c8	eb 38		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  002ca	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  002ce	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  002d0	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002d4	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  002d6	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002d9	eb 27		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  002db	88 4d de	 mov	 BYTE PTR __k$[ebp+6], cl
  002de	eb 22		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  002e0	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  002e4	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  002e6	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002ea	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  002ec	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002f0	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  002f2	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002f6	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  002f8	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002fc	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  002fe	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  00302	6a 07		 push	 7
  00304	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00307	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+29], 0
  0030b	5a		 pop	 edx
$LL104@LoadBool_e@2:
  0030c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00312	83 c0 04	 add	 eax, 4
  00315	4a		 dec	 edx
  00316	75 f4		 jne	 SHORT $LL104@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00318	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0031b	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0031f	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00322	50		 push	 eax
  00323	8b ce		 mov	 ecx, esi
  00325	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  0032b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032e	5e		 pop	 esi
  0032f	33 cd		 xor	 ecx, ebp
  00331	5b		 pop	 ebx
  00332	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00337	c9		 leave
  00338	c2 08 00	 ret	 8
??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<30>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@AAU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@AAU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@AAU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@AAU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@ABU34@@Z ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@ABU34@@Z PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@2:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@ABU34@@Z ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN11@Move:
  00009	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0000c	74 12		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	83 c0 08	 add	 eax, 8
  0001b	83 c1 08	 add	 ecx, 8
  0001e	eb e9		 jmp	 SHORT $LN11@Move
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@@Z ; std::allocator<ioAttachWeaponDummy::CreateInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@@Z PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@@Z ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@$$QAU34@@Z ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@$$QAU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@$$QAU34@@Z PROC ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@3:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@QAEXPAUCreateInfo@ioAttachWeaponDummy@@$$QAU34@@Z ENDP ; std::allocator<ioAttachWeaponDummy::CreateInfo>::construct
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@W4TeamType@@@@QBE?AW4TeamType@@XZ	; CEncrypt<enum TeamType>::operator enum TeamType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@W4TeamType@@@@QBE?AW4TeamType@@XZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@W4TeamType@@@@QBE?AW4TeamType@@XZ PROC	; CEncrypt<enum TeamType>::operator enum TeamType, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z ; CEncrypt<enum TeamType>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@W4TeamType@@@@QBE?AW4TeamType@@XZ ENDP	; CEncrypt<enum TeamType>::operator enum TeamType
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadInitProperty@ioAttachWeaponDummy@@IAEXAAVioINILoader@@@Z ; ioAttachWeaponDummy::LoadInitProperty
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
CONST	ENDS
;	COMDAT ?LoadInitProperty@ioAttachWeaponDummy@@IAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -300						; size = 260
__k$534991 = -40					; size = 30
__k$534718 = -28					; size = 15
__k$534455 = -28					; size = 16
__k$534330 = -28					; size = 16
__k$534205 = -28					; size = 16
__k$533955 = -28					; size = 17
__k$534843 = -24					; size = 14
__k$534593 = -24					; size = 14
__k$534080 = -24					; size = 12
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadInitProperty@ioAttachWeaponDummy@@IAEXAAVioINILoader@@@Z PROC ; ioAttachWeaponDummy::LoadInitProperty, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 32   : 	char szBuf[MAX_PATH];
; 33   : 
; 34   : 	rkLoader.LoadString_e( "area_weapon_name", "", szBuf, MAX_PATH );

  00019	33 db		 xor	 ebx, ebx
  0001b	6a 04		 push	 4
  0001d	8b f1		 mov	 esi, ecx
  0001f	c7 45 e4 8c 9e
	8e 8b		 mov	 DWORD PTR __k$533955[ebp], -1953587572 ; 8b8e9e8cH
  00026	c7 45 e8 b2 9b
	8e 8b		 mov	 DWORD PTR __k$533955[ebp+4], -1953588302 ; 8b8e9bb2H
  0002d	c7 45 ec 9d 83
	85 b5		 mov	 DWORD PTR __k$533955[ebp+8], -1249541219 ; b585839dH
  00034	c7 45 f0 83 8d
	86 8f		 mov	 DWORD PTR __k$533955[ebp+12], -1887007357 ; 8f868d83H
  0003b	8d 45 e4	 lea	 eax, DWORD PTR __k$533955[ebp]
  0003e	88 5d f4	 mov	 BYTE PTR __k$533955[ebp+16], bl
  00041	59		 pop	 ecx
$LL106@LoadInitPr:
  00042	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00048	83 c0 04	 add	 eax, 4
  0004b	49		 dec	 ecx
  0004c	75 f4		 jne	 SHORT $LL106@LoadInitPr
  0004e	68 04 01 00 00	 push	 260			; 00000104H
  00053	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005f	8d 45 e4	 lea	 eax, DWORD PTR __k$533955[ebp]
  00062	50		 push	 eax
  00063	8b cf		 mov	 ecx, edi
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 35   : 	m_szAreaWeaponName = szBuf;

  0006b	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00071	50		 push	 eax
  00072	8d 8e 88 14 00
	00		 lea	 ecx, DWORD PTR [esi+5256]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0007e	6a 02		 push	 2

; 36   : 
; 37   : 	//무기 인덱스
; 38   : 	m_nCreateWeaponIndex = rkLoader.LoadInt_e( "attack_type", NO_WEAPON_ATTRIBUTE );

  00080	c7 45 e8 8c 98
	9f 8b		 mov	 DWORD PTR __k$534080[ebp], -1952474996 ; 8b9f988cH
  00087	c7 45 ec 8e 87
	b4 9e		 mov	 DWORD PTR __k$534080[ebp+4], -1632335986 ; 9eb4878eH
  0008e	8d 45 e8	 lea	 eax, DWORD PTR __k$534080[ebp]
  00091	c7 45 f0 94 9c
	8e 00		 mov	 DWORD PTR __k$534080[ebp+8], 9346196 ; 008e9c94H
  00098	59		 pop	 ecx
$LL212@LoadInitPr:
  00099	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0009f	83 c0 04	 add	 eax, 4
  000a2	49		 dec	 ecx
  000a3	75 f4		 jne	 SHORT $LL212@LoadInitPr
  000a5	6a 08		 push	 8
  000a7	58		 pop	 eax
$LL209@LoadInitPr:
  000a8	8b c8		 mov	 ecx, eax
  000aa	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000b0	79 05		 jns	 SHORT $LN993@LoadInitPr
  000b2	49		 dec	 ecx
  000b3	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000b6	41		 inc	 ecx
$LN993@LoadInitPr:
  000b7	b2 ed		 mov	 dl, -19			; ffffffedH
  000b9	2a d1		 sub	 dl, cl
  000bb	30 54 05 e8	 xor	 BYTE PTR __k$534080[ebp+eax], dl
  000bf	40		 inc	 eax
  000c0	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000c3	7c e3		 jl	 SHORT $LL209@LoadInitPr
  000c5	53		 push	 ebx
  000c6	8d 45 e8	 lea	 eax, DWORD PTR __k$534080[ebp]
  000c9	50		 push	 eax
  000ca	8b cf		 mov	 ecx, edi
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  000d2	6a 03		 push	 3
  000d4	89 86 84 14 00
	00		 mov	 DWORD PTR [esi+5252], eax

; 39   : 
; 40   : 	//오프셋
; 41   : 	m_vCreateWeaponOffset.x = rkLoader.LoadFloat_e( "attack_offset_x", 0.0f );

  000da	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$534205[ebp], -1952474996 ; 8b9f988cH
  000e1	c7 45 e8 8e 87
	b4 85		 mov	 DWORD PTR __k$534205[ebp+4], -2051766386 ; 85b4878eH
  000e8	c7 45 ec 8b 8a
	98 8f		 mov	 DWORD PTR __k$534205[ebp+8], -1885828469 ; 8f988a8bH
  000ef	8d 45 e4	 lea	 eax, DWORD PTR __k$534205[ebp]
  000f2	c7 45 f0 99 b3
	93 00		 mov	 DWORD PTR __k$534205[ebp+12], 9679769 ; 0093b399H
  000f9	59		 pop	 ecx
$LL318@LoadInitPr:
  000fa	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00100	83 c0 04	 add	 eax, 4
  00103	49		 dec	 ecx
  00104	75 f4		 jne	 SHORT $LL318@LoadInitPr
  00106	6a 0c		 push	 12			; 0000000cH
  00108	58		 pop	 eax
$LL315@LoadInitPr:
  00109	8b c8		 mov	 ecx, eax
  0010b	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00111	79 05		 jns	 SHORT $LN994@LoadInitPr
  00113	49		 dec	 ecx
  00114	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00117	41		 inc	 ecx
$LN994@LoadInitPr:
  00118	b2 ed		 mov	 dl, -19			; ffffffedH
  0011a	2a d1		 sub	 dl, cl
  0011c	30 54 05 e4	 xor	 BYTE PTR __k$534205[ebp+eax], dl
  00120	40		 inc	 eax
  00121	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00124	7c e3		 jl	 SHORT $LL315@LoadInitPr
  00126	0f 57 c0	 xorps	 xmm0, xmm0
  00129	51		 push	 ecx
  0012a	8d 45 e4	 lea	 eax, DWORD PTR __k$534205[ebp]
  0012d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00132	50		 push	 eax
  00133	8b cf		 mov	 ecx, edi
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0013b	d9 9e 98 14 00
	00		 fstp	 DWORD PTR [esi+5272]
  00141	6a 03		 push	 3

; 42   : 	m_vCreateWeaponOffset.y = rkLoader.LoadFloat_e( "attack_offset_y", 0.0f );

  00143	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$534330[ebp], -1952474996 ; 8b9f988cH
  0014a	c7 45 e8 8e 87
	b4 85		 mov	 DWORD PTR __k$534330[ebp+4], -2051766386 ; 85b4878eH
  00151	c7 45 ec 8b 8a
	98 8f		 mov	 DWORD PTR __k$534330[ebp+8], -1885828469 ; 8f988a8bH
  00158	8d 45 e4	 lea	 eax, DWORD PTR __k$534330[ebp]
  0015b	c7 45 f0 99 b3
	92 00		 mov	 DWORD PTR __k$534330[ebp+12], 9614233 ; 0092b399H
  00162	59		 pop	 ecx
$LL424@LoadInitPr:
  00163	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00169	83 c0 04	 add	 eax, 4
  0016c	49		 dec	 ecx
  0016d	75 f4		 jne	 SHORT $LL424@LoadInitPr
  0016f	6a 0c		 push	 12			; 0000000cH
  00171	58		 pop	 eax
$LL421@LoadInitPr:
  00172	8b c8		 mov	 ecx, eax
  00174	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017a	79 05		 jns	 SHORT $LN995@LoadInitPr
  0017c	49		 dec	 ecx
  0017d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00180	41		 inc	 ecx
$LN995@LoadInitPr:
  00181	b2 ed		 mov	 dl, -19			; ffffffedH
  00183	2a d1		 sub	 dl, cl
  00185	30 54 05 e4	 xor	 BYTE PTR __k$534330[ebp+eax], dl
  00189	40		 inc	 eax
  0018a	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0018d	7c e3		 jl	 SHORT $LL421@LoadInitPr
  0018f	0f 57 c0	 xorps	 xmm0, xmm0
  00192	51		 push	 ecx
  00193	8d 45 e4	 lea	 eax, DWORD PTR __k$534330[ebp]
  00196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019b	50		 push	 eax
  0019c	8b cf		 mov	 ecx, edi
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001a4	d9 9e 9c 14 00
	00		 fstp	 DWORD PTR [esi+5276]
  001aa	6a 03		 push	 3

; 43   : 	m_vCreateWeaponOffset.z = rkLoader.LoadFloat_e( "attack_offset_z", 0.0f );

  001ac	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$534455[ebp], -1952474996 ; 8b9f988cH
  001b3	c7 45 e8 8e 87
	b4 85		 mov	 DWORD PTR __k$534455[ebp+4], -2051766386 ; 85b4878eH
  001ba	c7 45 ec 8b 8a
	98 8f		 mov	 DWORD PTR __k$534455[ebp+8], -1885828469 ; 8f988a8bH
  001c1	8d 45 e4	 lea	 eax, DWORD PTR __k$534455[ebp]
  001c4	c7 45 f0 99 b3
	91 00		 mov	 DWORD PTR __k$534455[ebp+12], 9548697 ; 0091b399H
  001cb	59		 pop	 ecx
$LL530@LoadInitPr:
  001cc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d2	83 c0 04	 add	 eax, 4
  001d5	49		 dec	 ecx
  001d6	75 f4		 jne	 SHORT $LL530@LoadInitPr
  001d8	6a 0c		 push	 12			; 0000000cH
  001da	58		 pop	 eax
$LL527@LoadInitPr:
  001db	8b c8		 mov	 ecx, eax
  001dd	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001e3	79 05		 jns	 SHORT $LN996@LoadInitPr
  001e5	49		 dec	 ecx
  001e6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001e9	41		 inc	 ecx
$LN996@LoadInitPr:
  001ea	b2 ed		 mov	 dl, -19			; ffffffedH
  001ec	2a d1		 sub	 dl, cl
  001ee	30 54 05 e4	 xor	 BYTE PTR __k$534455[ebp+eax], dl
  001f2	40		 inc	 eax
  001f3	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001f6	7c e3		 jl	 SHORT $LL527@LoadInitPr
  001f8	0f 57 c0	 xorps	 xmm0, xmm0
  001fb	51		 push	 ecx
  001fc	8d 45 e4	 lea	 eax, DWORD PTR __k$534455[ebp]
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	50		 push	 eax
  00205	8b cf		 mov	 ecx, edi
  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0020d	d9 9e a0 14 00
	00		 fstp	 DWORD PTR [esi+5280]
  00213	6a 03		 push	 3

; 44   : 
; 45   : 	m_fVisibleRange = rkLoader.LoadFloat_e( "visible_range", 0.0f );

  00215	c7 45 e8 9b 85
	98 83		 mov	 DWORD PTR __k$534593[ebp], -2087156325 ; 8398859bH
  0021c	c7 45 ec 8f 80
	8e b5		 mov	 DWORD PTR __k$534593[ebp+4], -1248952177 ; b58e808fH
  00223	c7 45 f0 9f 8d
	85 8d		 mov	 DWORD PTR __k$534593[ebp+8], -1920627297 ; 8d858d9fH
  0022a	8d 45 e8	 lea	 eax, DWORD PTR __k$534593[ebp]
  0022d	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$534593[ebp+12], 136 ; 00000088H
  00233	59		 pop	 ecx
$LL636@LoadInitPr:
  00234	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0023a	83 c0 04	 add	 eax, 4
  0023d	49		 dec	 ecx
  0023e	75 f4		 jne	 SHORT $LL636@LoadInitPr
  00240	0f 57 c0	 xorps	 xmm0, xmm0
  00243	80 75 f4 ed	 xor	 BYTE PTR __k$534593[ebp+12], -19 ; ffffffedH
  00247	51		 push	 ecx
  00248	8d 45 e8	 lea	 eax, DWORD PTR __k$534593[ebp]
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	50		 push	 eax
  00251	8b cf		 mov	 ecx, edi
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00259	d9 9e b4 14 00
	00		 fstp	 DWORD PTR [esi+5300]
  0025f	6a 03		 push	 3

; 46   : 
; 47   : 	m_bAlwaysVisible = rkLoader.LoadBool_e( "always_visible", false );

  00261	c7 45 e4 8c 80
	9c 8b		 mov	 DWORD PTR __k$534718[ebp], -1952677748 ; 8b9c808cH
  00268	c7 45 e8 94 9f
	b4 9c		 mov	 DWORD PTR __k$534718[ebp+4], -1665884268 ; 9cb49f94H
  0026f	c7 45 ec 84 9f
	82 88		 mov	 DWORD PTR __k$534718[ebp+8], -2004705404 ; 88829f84H
  00276	66 c7 45 f0 81
	89		 mov	 WORD PTR __k$534718[ebp+12], 35201 ; 00008981H
  0027c	8d 45 e4	 lea	 eax, DWORD PTR __k$534718[ebp]
  0027f	88 5d f2	 mov	 BYTE PTR __k$534718[ebp+14], bl
  00282	59		 pop	 ecx
$LL742@LoadInitPr:
  00283	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00289	83 c0 04	 add	 eax, 4
  0028c	49		 dec	 ecx
  0028d	75 f4		 jne	 SHORT $LL742@LoadInitPr
  0028f	6a 0c		 push	 12			; 0000000cH
  00291	58		 pop	 eax
$LL739@LoadInitPr:
  00292	8b c8		 mov	 ecx, eax
  00294	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0029a	79 05		 jns	 SHORT $LN997@LoadInitPr
  0029c	49		 dec	 ecx
  0029d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002a0	41		 inc	 ecx
$LN997@LoadInitPr:
  002a1	b2 ed		 mov	 dl, -19			; ffffffedH
  002a3	2a d1		 sub	 dl, cl
  002a5	30 54 05 e4	 xor	 BYTE PTR __k$534718[ebp+eax], dl
  002a9	40		 inc	 eax
  002aa	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  002ad	7c e3		 jl	 SHORT $LL739@LoadInitPr
  002af	53		 push	 ebx
  002b0	8d 45 e4	 lea	 eax, DWORD PTR __k$534718[ebp]
  002b3	50		 push	 eax
  002b4	8b cf		 mov	 ecx, edi
  002b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  002bc	6a 03		 push	 3
  002be	88 86 b8 14 00
	00		 mov	 BYTE PTR [esi+5304], al

; 48   : 
; 49   : 	//추가 yong jun
; 50   : 	rkLoader.LoadString_e( "attach_effect", "", szBuf, MAX_PATH );

  002c4	c7 45 e8 8c 98
	9f 8b		 mov	 DWORD PTR __k$534843[ebp], -1952474996 ; 8b9f988cH
  002cb	c7 45 ec 8e 84
	b4 8f		 mov	 DWORD PTR __k$534843[ebp+4], -1883994994 ; 8fb4848eH
  002d2	c7 45 f0 8b 8a
	8e 89		 mov	 DWORD PTR __k$534843[ebp+8], -1987147125 ; 898e8a8bH
  002d9	8d 45 e8	 lea	 eax, DWORD PTR __k$534843[ebp]
  002dc	66 c7 45 f4 99
	00		 mov	 WORD PTR __k$534843[ebp+12], 153 ; 00000099H
  002e2	59		 pop	 ecx
$LL848@LoadInitPr:
  002e3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002e9	83 c0 04	 add	 eax, 4
  002ec	49		 dec	 ecx
  002ed	75 f4		 jne	 SHORT $LL848@LoadInitPr
  002ef	80 75 f4 ed	 xor	 BYTE PTR __k$534843[ebp+12], -19 ; ffffffedH
  002f3	68 04 01 00 00	 push	 260			; 00000104H
  002f8	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002fe	50		 push	 eax
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00304	8d 45 e8	 lea	 eax, DWORD PTR __k$534843[ebp]
  00307	50		 push	 eax
  00308	8b cf		 mov	 ecx, edi
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 51   : 	m_szAttachEffect = szBuf;

  00310	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00316	50		 push	 eax
  00317	8d 8e bc 14 00
	00		 lea	 ecx, DWORD PTR [esi+5308]
  0031d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00323	6a 07		 push	 7

; 52   : 	m_bNotUseTranslateByConveyer = rkLoader.LoadBool_e( "not_use_translate_by_conveyer", false );

  00325	c7 45 d8 83 83
	9f b5		 mov	 DWORD PTR __k$534991[ebp], -1247837309 ; b59f8383H
  0032c	c7 45 dc 98 9f
	8e b5		 mov	 DWORD PTR __k$534991[ebp+4], -1248944232 ; b58e9f98H
  00333	c7 45 e0 99 9e
	8a 84		 mov	 DWORD PTR __k$534991[ebp+8], -2071290215 ; 848a9e99H
  0033a	c7 45 e4 9e 80
	8a 9e		 mov	 DWORD PTR __k$534991[ebp+12], -1635090274 ; 9e8a809eH
  00341	c7 45 e8 88 b3
	89 93		 mov	 DWORD PTR __k$534991[ebp+16], -1819692152 ; 9389b388H
  00348	c7 45 ec b2 8f
	84 84		 mov	 DWORD PTR __k$534991[ebp+20], -2071687246 ; 84848fb2H
  0034f	c7 45 f0 9b 89
	92 8f		 mov	 DWORD PTR __k$534991[ebp+24], -1886221925 ; 8f92899bH
  00356	8d 45 d8	 lea	 eax, DWORD PTR __k$534991[ebp]
  00359	66 c7 45 f4 9f
	00		 mov	 WORD PTR __k$534991[ebp+28], 159 ; 0000009fH
  0035f	59		 pop	 ecx
$LL954@LoadInitPr:
  00360	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00366	83 c0 04	 add	 eax, 4
  00369	49		 dec	 ecx
  0036a	75 f4		 jne	 SHORT $LL954@LoadInitPr
  0036c	80 75 f4 ed	 xor	 BYTE PTR __k$534991[ebp+28], -19 ; ffffffedH
  00370	53		 push	 ebx
  00371	8d 45 d8	 lea	 eax, DWORD PTR __k$534991[ebp]
  00374	50		 push	 eax
  00375	8b cf		 mov	 ecx, edi
  00377	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 53   : 	//
; 54   : }

  0037d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00380	5f		 pop	 edi
  00381	88 86 cc 14 00
	00		 mov	 BYTE PTR [esi+5324], al
  00387	5e		 pop	 esi
  00388	33 cd		 xor	 ecx, ebp
  0038a	5b		 pop	 ebx
  0038b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00390	c9		 leave
  00391	c2 04 00	 ret	 4
?LoadInitProperty@ioAttachWeaponDummy@@IAEXAAVioINILoader@@@Z ENDP ; ioAttachWeaponDummy::LoadInitProperty
_TEXT	ENDS
PUBLIC	??0?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@XZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@ABU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@ABU23@@Z ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@ABU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@ABU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@ABU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00@Z ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$535236 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00@Z PROC ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$535236[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00@Z ENDP ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@@Z ; std::_Dest_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@@Z PROC ; std::_Dest_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@@Z ENDP ; std::_Dest_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@U34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@U34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@$$QAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@U34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@3:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@U34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	?GetTeam@ioPlayEntity@@QBE?AW4TeamType@@XZ	; ioPlayEntity::GetTeam
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
;	COMDAT ?GetTeam@ioPlayEntity@@QBE?AW4TeamType@@XZ
_TEXT	SEGMENT
_value$535280 = -4					; size = 4
?GetTeam@ioPlayEntity@@QBE?AW4TeamType@@XZ PROC		; ioPlayEntity::GetTeam, COMDAT
; _this$ = ecx

; 107  : 	inline TeamType GetTeam() const { return m_TeamType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$535280[ebp]
  00007	50		 push	 eax
  00008	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z ; CEncrypt<enum TeamType>::DecryptValueToPool
  00013	8b 45 fc	 mov	 eax, DWORD PTR _value$535280[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?GetTeam@ioPlayEntity@@QBE?AW4TeamType@@XZ ENDP		; ioPlayEntity::GetTeam
_TEXT	ENDS
PUBLIC	?LoadProperty@ioAttachWeaponDummy@@UAEXAAVioINILoader@@@Z ; ioAttachWeaponDummy::LoadProperty
EXTRN	?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z:PROC ; ioDummyChar::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
;	COMDAT ?LoadProperty@ioAttachWeaponDummy@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$ = 8						; size = 4
?LoadProperty@ioAttachWeaponDummy@@UAEXAAVioINILoader@@@Z PROC ; ioAttachWeaponDummy::LoadProperty, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 25   : 	ioDummyChar::LoadProperty( rkLoader );

  00004	ff 75 08	 push	 DWORD PTR _rkLoader$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z ; ioDummyChar::LoadProperty

; 26   : 	
; 27   : 	LoadInitProperty( rkLoader );

  0000e	ff 75 08	 push	 DWORD PTR _rkLoader$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?LoadInitProperty@ioAttachWeaponDummy@@IAEXAAVioINILoader@@@Z ; ioAttachWeaponDummy::LoadInitProperty
  00018	5e		 pop	 esi

; 28   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?LoadProperty@ioAttachWeaponDummy@@UAEXAAVioINILoader@@@Z ENDP ; ioAttachWeaponDummy::LoadProperty
_TEXT	ENDS
PUBLIC	?VisibleCheck@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::VisibleCheck
EXTRN	?GetCameraTargetChar@ioPlayStage@@QAEPAVioBaseChar@@XZ:PROC ; ioPlayStage::GetCameraTargetChar
; Function compile flags: /Ogsp
;	COMDAT ?VisibleCheck@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
_value$535312 = -8					; size = 4
_fVisibleRangeSq$531026 = -8				; size = 4
_value$535299 = -4					; size = 4
?VisibleCheck@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::VisibleCheck, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 267  : 	ioBaseChar *pOwner = GetOwner();

  00008	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner

; 268  : 	if( !m_pGroup || !pOwner || m_bAlwaysVisible )	

  0000d	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00011	0f 84 1d 01 00
	00		 je	 $LN8@VisibleChe
  00017	85 c0		 test	 eax, eax
  00019	0f 84 15 01 00
	00		 je	 $LN8@VisibleChe
  0001f	80 be b8 14 00
	00 00		 cmp	 BYTE PTR [esi+5304], 0
  00026	0f 85 08 01 00
	00		 jne	 $LN8@VisibleChe

; 269  : 		return;
; 270  : 
; 271  : 	ioPlayStage *pStage = pOwner->GetCreator();

  0002c	8b 88 44 03 00
	00		 mov	 ecx, DWORD PTR [eax+836]

; 272  : 	if ( !pStage )

  00032	85 c9		 test	 ecx, ecx
  00034	0f 84 fa 00 00
	00		 je	 $LN8@VisibleChe

; 273  : 		return;
; 274  : 
; 275  : 	ioBaseChar *pTarget = pStage->GetCameraTargetChar();

  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 ?GetCameraTargetChar@ioPlayStage@@QAEPAVioBaseChar@@XZ ; ioPlayStage::GetCameraTargetChar
  00040	8b f8		 mov	 edi, eax

; 276  : 	if( pTarget )

  00042	85 ff		 test	 edi, edi
  00044	0f 84 e0 00 00
	00		 je	 $LN6@VisibleChe

; 277  : 	{
; 278  : 		if( GetTeam() == pTarget->GetTeam() )

  0004a	8d 45 fc	 lea	 eax, DWORD PTR _value$535299[ebp]
  0004d	50		 push	 eax
  0004e	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  00054	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z ; CEncrypt<enum TeamType>::DecryptValueToPool
  00059	8d 45 f8	 lea	 eax, DWORD PTR _value$535312[ebp]
  0005c	50		 push	 eax
  0005d	8d 8f 90 00 00
	00		 lea	 ecx, DWORD PTR [edi+144]
  00063	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@W4TeamType@@@@QAEXPAW4TeamType@@@Z ; CEncrypt<enum TeamType>::DecryptValueToPool
  00068	8b 45 fc	 mov	 eax, DWORD PTR _value$535299[ebp]
  0006b	3b 45 f8	 cmp	 eax, DWORD PTR _value$535312[ebp]
  0006e	75 07		 jne	 SHORT $LN5@VisibleChe

; 279  : 		{
; 280  : 			m_pGroup->SetVisible( true );

  00070	6a 01		 push	 1

; 281  : 		}
; 282  : 		else

  00072	e9 b5 00 00 00	 jmp	 $LN29@VisibleChe
$LN5@VisibleChe:

; 283  : 		{
; 284  : 			float fVisibleRangeSq = m_fVisibleRange * m_fVisibleRange;

  00077	f3 0f 10 86 b4
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5300]

; 285  : 
; 286  : 			D3DXVECTOR3 vDiff = GetWorldPosition() - pTarget->GetWorldPosition();

  0007f	8b 07		 mov	 eax, DWORD PTR [edi]
  00081	0f 5a c0	 cvtps2pd xmm0, xmm0
  00084	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00088	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0008c	8b cf		 mov	 ecx, edi
  0008e	f3 0f 11 45 f8	 movss	 DWORD PTR _fVisibleRangeSq$531026[ebp], xmm0
  00093	ff 50 70	 call	 DWORD PTR [eax+112]
  00096	8b f8		 mov	 edi, eax
  00098	8b 06		 mov	 eax, DWORD PTR [esi]
  0009a	8b ce		 mov	 ecx, esi
  0009c	ff 50 70	 call	 DWORD PTR [eax+112]
  0009f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a3	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  000a7	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  000ac	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]

; 287  : 
; 288  : 			if( D3DXVec3LengthSq( &vDiff ) < fVisibleRangeSq )
; 289  : 				m_pGroup->SetVisible( true );	

  000b1	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b4	0f 5a c9	 cvtps2pd xmm1, xmm1
  000b7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ba	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000be	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  000c3	0f 5a c9	 cvtps2pd xmm1, xmm1
  000c6	0f 5a d2	 cvtps2pd xmm2, xmm2
  000c9	f2 0f 5c ca	 subsd	 xmm1, xmm2
  000cd	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  000d2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d4	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000d8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000dc	0f 5a d2	 cvtps2pd xmm2, xmm2
  000df	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000e3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000e7	0f 5a db	 cvtps2pd xmm3, xmm3
  000ea	f2 0f 5c d3	 subsd	 xmm2, xmm3
  000ee	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  000f2	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  000f6	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000fa	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  000fe	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00102	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00106	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00111	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _fVisibleRangeSq$531026[ebp]
  00116	0f 5a c0	 cvtps2pd xmm0, xmm0
  00119	0f 5a c9	 cvtps2pd xmm1, xmm1
  0011c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00120	76 04		 jbe	 SHORT $LN3@VisibleChe
  00122	6a 01		 push	 1

; 290  : 			else

  00124	eb 0b		 jmp	 SHORT $LN30@VisibleChe
$LN3@VisibleChe:

; 291  : 				m_pGroup->SetVisible( false );			

  00126	6a 00		 push	 0

; 292  : 		}
; 293  : 	}
; 294  : 	else

  00128	eb 07		 jmp	 SHORT $LN30@VisibleChe
$LN6@VisibleChe:

; 295  : 	{
; 296  : 		m_pGroup->SetVisible( false );

  0012a	6a 00		 push	 0
$LN29@VisibleChe:
  0012c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012f	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN30@VisibleChe:
  00131	ff 10		 call	 DWORD PTR [eax]
  00133	5f		 pop	 edi
$LN8@VisibleChe:
  00134	5e		 pop	 esi

; 297  : 	}
; 298  : }

  00135	c9		 leave
  00136	c3		 ret	 0
?VisibleCheck@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::VisibleCheck
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioAttachWeaponDummy::CreateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioAttachWeaponDummy::CreateInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioAttachWeaponDummy::CreateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@U12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@U12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@U12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@U34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo>
  00015	83 45 10 08	 add	 DWORD PTR __Dest$[ebp], 8
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 08	 add	 esi, 8
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@U12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z ; std::_Destroy_range<std::allocator<ioAttachWeaponDummy::CreateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioAttachWeaponDummy::CreateInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAXPAUCreateInfo@ioAttachWeaponDummy@@0AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioAttachWeaponDummy::CreateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z ; std::_Uninitialized_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z
_TEXT	SEGMENT
__Cat$535425 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z PROC ; std::_Uninitialized_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$535425[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@U12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z ENDP ; std::_Uninitialized_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXPAUCreateInfo@ioAttachWeaponDummy@@0@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCreateInfo@ioAttachWeaponDummy@@@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEPAUCreateInfo@ioAttachWeaponDummy@@PAU23@00@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Umove<ioAttachWeaponDummy::CreateInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUCreateInfo@ioAttachWeaponDummy@@@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEPAUCreateInfo@ioAttachWeaponDummy@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCreateInfo@ioAttachWeaponDummy@@@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEPAUCreateInfo@ioAttachWeaponDummy@@PAU23@00@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Umove<ioAttachWeaponDummy::CreateInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z ; std::_Uninitialized_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCreateInfo@ioAttachWeaponDummy@@@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEPAUCreateInfo@ioAttachWeaponDummy@@PAU23@00@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Umove<ioAttachWeaponDummy::CreateInfo *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$535563 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$535563[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXXZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::reserve
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$531401 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	c1 f8 03	 sar	 eax, 3
  0002a	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0002d	73 65		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0002f	6a 00		 push	 0
  00031	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00034	e8 00 00 00 00	 call	 ??$_Allocate@UCreateInfo@ioAttachWeaponDummy@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@IPAU12@@Z ; std::_Allocate<ioAttachWeaponDummy::CreateInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003f	8b d8		 mov	 ebx, eax
  00041	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00044	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00047	52		 push	 edx
  00048	53		 push	 ebx
  00049	50		 push	 eax
  0004a	51		 push	 ecx
  0004b	89 5d ec	 mov	 DWORD PTR __Ptr$531401[ebp], ebx
  0004e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCreateInfo@ioAttachWeaponDummy@@PAU12@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@YAPAUCreateInfo@ioAttachWeaponDummy@@PAU12@00AAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@@Z ; std::_Uninitialized_move<ioAttachWeaponDummy::CreateInfo *,ioAttachWeaponDummy::CreateInfo *,std::allocator<ioAttachWeaponDummy::CreateInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00053	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005c	8b f9		 mov	 edi, ecx
  0005e	2b f8		 sub	 edi, eax
  00060	83 c4 18	 add	 esp, 24			; 00000018H
  00063	c1 ff 03	 sar	 edi, 3
  00066	85 c0		 test	 eax, eax
  00068	74 11		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006a	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  0006c	83 c0 08	 add	 eax, 8
$LN55@reserve:
  0006f	3b c1		 cmp	 eax, ecx
  00071	75 f9		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00073	ff 36		 push	 DWORD PTR [esi]
  00075	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007a	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0007b	8b ce		 mov	 ecx, esi
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00083	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00086	8d 04 c3	 lea	 eax, DWORD PTR [ebx+eax*8]
  00089	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	8d 04 fb	 lea	 eax, DWORD PTR [ebx+edi*8]
  0008f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00092	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  00094	e8 00 00 00 00	 call	 __EH_epilog3
  00099	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0009c	ff 75 ec	 push	 DWORD PTR __Ptr$531401[ebp]
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	59		 pop	 ecx

; 757  : 			_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::reserve
PUBLIC	??1?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Tidy
??1?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T535870 = -4						; size = 4
?clear@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXXZ PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T535870[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXI@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 03	 sar	 eax, 3
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 03	 sar	 edx, 3
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IBEII@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXI@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioAttachWeaponDummy@@6BioWorldEventReceiver@@@ ; ioAttachWeaponDummy::`vftable'
PUBLIC	??_7ioAttachWeaponDummy@@6BioPlayEntity@@@	; ioAttachWeaponDummy::`vftable'
PUBLIC	??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioAttachWeaponDummy::ioAttachWeaponDummy
PUBLIC	??_R4ioAttachWeaponDummy@@6BioPlayEntity@@@	; ioAttachWeaponDummy::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAttachWeaponDummy@@@8			; ioAttachWeaponDummy `RTTI Type Descriptor'
PUBLIC	??_R3ioAttachWeaponDummy@@8			; ioAttachWeaponDummy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttachWeaponDummy@@8			; ioAttachWeaponDummy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAttachWeaponDummy@@8		; ioAttachWeaponDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioDummyChar@@8			; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioDummyChar@@@8				; ioDummyChar `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyChar@@8				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyChar@@8				; ioDummyChar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	??_R1BMI@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
PUBLIC	??_R0?AVioWorldEventReceiver@@@8		; ioWorldEventReceiver `RTTI Type Descriptor'
PUBLIC	??_R3ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
PUBLIC	?ProcessState@ioAttachWeaponDummy@@MAEXMK@Z	; ioAttachWeaponDummy::ProcessState
PUBLIC	?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ	; ioDummyChar::IsDummyCharMidSync
PUBLIC	?SetDieState@ioAttachWeaponDummy@@UAEX_N@Z	; ioAttachWeaponDummy::SetDieState
PUBLIC	??_R4ioAttachWeaponDummy@@6BioWorldEventReceiver@@@ ; ioAttachWeaponDummy::`RTTI Complete Object Locator'
PUBLIC	??_EioAttachWeaponDummy@@WBMI@AEPAXI@Z		; [thunk]:ioAttachWeaponDummy::`vector deleting destructor'
EXTRN	??1ioDummyChar@@UAE@XZ:PROC			; ioDummyChar::~ioDummyChar
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
EXTRN	??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioDummyChar::ioDummyChar
EXTRN	?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z:PROC ; ioDummyChar::AddEntityEvent
EXTRN	??_EioAttachWeaponDummy@@UAEPAXI@Z:PROC		; ioAttachWeaponDummy::`vector deleting destructor'
EXTRN	?Update@ioDummyChar@@UAEXMKK@Z:PROC		; ioDummyChar::Update
EXTRN	?UpdateAfter@ioDummyChar@@UAEXM@Z:PROC		; ioDummyChar::UpdateAfter
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ:PROC ; ioDummyChar::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountAvailable
EXTRN	?IsMountingAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountingAvailable
EXTRN	?IsNowMountEnable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?UpdateBottomHeight@ioDummyChar@@MBEXXZ:PROC	; ioDummyChar::UpdateBottomHeight
EXTRN	?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ:PROC ; ioDummyChar::NeedUpdateBottomHeight
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::Translate
EXTRN	?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z:PROC ; ioDummyChar::ApplyWeapon
EXTRN	?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z:PROC ; ioDummyChar::IsCollisionAvailableWeapon
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z:PROC ; ioDummyChar::IsEntityCollisionSkipState
EXTRN	?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z:PROC ; ioDummyChar::IsCharCollisionSkipState
EXTRN	?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z:PROC ; ioPlayEntity::IsWoundedCollision
EXTRN	?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioDummyChar::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ:PROC ; ioDummyChar::GetSubType
EXTRN	?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ:PROC ; ioDummyChar::GetArmorType
EXTRN	?DontMoveEntityLevel@ioDummyChar@@UBEHXZ:PROC	; ioDummyChar::DontMoveEntityLevel
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioDummyChar::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::UpdateGauge
EXTRN	?RenderGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
EXTRN	?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z:PROC ; ioDummyChar::InitDummyCharInfo
EXTRN	?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioDummyChar::TestMapCollision
EXTRN	?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z:PROC ; ioDummyChar::CheckEntityCollision
EXTRN	?GetDummyGrassType@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetDummyGrassType
EXTRN	?IsActivateWeapon@ioDummyChar@@UAE_NXZ:PROC	; ioDummyChar::IsActivateWeapon
EXTRN	?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z:PROC ; ioDummyChar::IsDummyVsDummyCollisionSkipState
EXTRN	?ProcessPos@ioDummyChar@@MAEXM@Z:PROC		; ioDummyChar::ProcessPos
EXTRN	?ProcessDelayState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDelayState
EXTRN	?ProcessMoveState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessMoveState
EXTRN	?ProcessDashState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDashState
EXTRN	?ProcessAttackState@ioDummyChar@@MAEXMK@Z:PROC	; ioDummyChar::ProcessAttackState
EXTRN	?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharSync
EXTRN	?SetDelayState@ioDummyChar@@UAEX_N@Z:PROC	; ioDummyChar::SetDelayState
EXTRN	?SetMoveState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetMoveState
EXTRN	?SetDieState@ioDummyChar@@UAEX_N0@Z:PROC	; ioDummyChar::SetDieState
EXTRN	?SetDashState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetDashState
EXTRN	?SetAttackState@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::SetAttackState
EXTRN	?DropZoneCheck@ioDummyChar@@MAEXXZ:PROC		; ioDummyChar::DropZoneCheck
EXTRN	?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::SendAttackInfoToSkill
EXTRN	?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z:PROC ; ioDummyChar::CheckCollisionWeapon
EXTRN	?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateMountEntity
EXTRN	?ClearMountEntity@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::ClearMountEntity
EXTRN	?UpdateMountedEntityList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedEntityList
EXTRN	?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedWeaponList
EXTRN	?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z:PROC ; ioDummyChar::SetWorldPositionMountEntity
EXTRN	?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::DummyDieClearMountEntity
EXTRN	?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::FillDummyCharMidSync
EXTRN	?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharMidSync
EXTRN	?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillMaxActiveCnt
EXTRN	?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillCurActiveCnt
EXTRN	?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::OnTelepotation
EXTRN	?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z:PROC ; ioDummyChar::OnFireZoneDamage
EXTRN	?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::OnPoisonZoneDamage
;	COMDAT ??_R4ioAttachWeaponDummy@@6BioWorldEventReceiver@@@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
rdata$r	SEGMENT
??_R4ioAttachWeaponDummy@@6BioWorldEventReceiver@@@ DD 00H ; ioAttachWeaponDummy::`RTTI Complete Object Locator'
	DD	01c8H
	DD	00H
	DD	FLAT:??_R0?AVioAttachWeaponDummy@@@8
	DD	FLAT:??_R3ioAttachWeaponDummy@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R2ioWorldEventReceiver@@8 DD FLAT:??_R1A@?0A@EA@ioWorldEventReceiver@@8 ; ioWorldEventReceiver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R3ioWorldEventReceiver@@8 DD 00H			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWorldEventReceiver@@@8
_DATA	SEGMENT
??_R0?AVioWorldEventReceiver@@@8 DD FLAT:??_7type_info@@6B@ ; ioWorldEventReceiver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWorldEventReceiver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1BMI@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
	DD	00H
	DD	01c8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEntityEvent@@8
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyChar@@8
rdata$r	SEGMENT
??_R2ioDummyChar@@8 DD FLAT:??_R1A@?0A@EA@ioDummyChar@@8 ; ioDummyChar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyChar@@8
rdata$r	SEGMENT
??_R3ioDummyChar@@8 DD 00H				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyChar@@@8
_DATA	SEGMENT
??_R0?AVioDummyChar@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyChar@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyChar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyChar@@8 DD FLAT:??_R0?AVioDummyChar@@@8 ; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttachWeaponDummy@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttachWeaponDummy@@8 DD FLAT:??_R0?AVioAttachWeaponDummy@@@8 ; ioAttachWeaponDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttachWeaponDummy@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttachWeaponDummy@@8
rdata$r	SEGMENT
??_R2ioAttachWeaponDummy@@8 DD FLAT:??_R1A@?0A@EA@ioAttachWeaponDummy@@8 ; ioAttachWeaponDummy::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioDummyChar@@8
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttachWeaponDummy@@8
rdata$r	SEGMENT
??_R3ioAttachWeaponDummy@@8 DD 00H			; ioAttachWeaponDummy::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ioAttachWeaponDummy@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttachWeaponDummy@@@8
_DATA	SEGMENT
??_R0?AVioAttachWeaponDummy@@@8 DD FLAT:??_7type_info@@6B@ ; ioAttachWeaponDummy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttachWeaponDummy@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAttachWeaponDummy@@6BioPlayEntity@@@
rdata$r	SEGMENT
??_R4ioAttachWeaponDummy@@6BioPlayEntity@@@ DD 00H	; ioAttachWeaponDummy::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAttachWeaponDummy@@@8
	DD	FLAT:??_R3ioAttachWeaponDummy@@8
rdata$r	ENDS
;	COMDAT ??_7ioAttachWeaponDummy@@6BioWorldEventReceiver@@@
CONST	SEGMENT
??_7ioAttachWeaponDummy@@6BioWorldEventReceiver@@@ DD FLAT:??_R4ioAttachWeaponDummy@@6BioWorldEventReceiver@@@ ; ioAttachWeaponDummy::`vftable'
	DD	FLAT:?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z
	DD	FLAT:?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ
	DD	FLAT:??_EioAttachWeaponDummy@@WBMI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ioAttachWeaponDummy@@6BioPlayEntity@@@
CONST	SEGMENT
??_7ioAttachWeaponDummy@@6BioPlayEntity@@@ DD FLAT:??_R4ioAttachWeaponDummy@@6BioPlayEntity@@@ ; ioAttachWeaponDummy::`vftable'
	DD	FLAT:?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioAttachWeaponDummy@@UAEPAXI@Z
	DD	FLAT:?Update@ioDummyChar@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioDummyChar@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioDummyChar@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioAttachWeaponDummy@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioDummyChar@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioAttachWeaponDummy@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?RenderGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
	DD	FLAT:?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z
	DD	FLAT:?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?GetDummyGrassType@ioDummyChar@@UAEHXZ
	DD	FLAT:?IsActivateWeapon@ioDummyChar@@UAE_NXZ
	DD	FLAT:?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z
	DD	FLAT:?ProcessState@ioAttachWeaponDummy@@MAEXMK@Z
	DD	FLAT:?ProcessPos@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDelayState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessMoveState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDashState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessAttackState@ioDummyChar@@MAEXMK@Z
	DD	FLAT:?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDelayState@ioDummyChar@@UAEX_N@Z
	DD	FLAT:?SetMoveState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetDieState@ioDummyChar@@UAEX_N0@Z
	DD	FLAT:?SetDashState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetAttackState@ioDummyChar@@UAEXXZ
	DD	FLAT:?DropZoneCheck@ioDummyChar@@MAEXXZ
	DD	FLAT:?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ
	DD	FLAT:?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?ClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedEntityList@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ
	DD	FLAT:?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z
	DD	FLAT:?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
	DD	FLAT:?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?SetDieState@ioAttachWeaponDummy@@UAEX_N@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$3
__ehfuncinfo$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
xdata$x	ENDS
;	COMDAT ??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pGrp$ = 8						; size = 4
$T536046 = 12						; size = 4
_pMode$ = 12						; size = 4
??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z PROC ; ioAttachWeaponDummy::ioAttachWeaponDummy, COMDAT
; _this$ = ecx

; 11   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyChar::ioDummyChar
  0001c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	8d 8e 88 14 00
	00		 lea	 ecx, DWORD PTR [esi+5256]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAttachWeaponDummy@@6BioPlayEntity@@@
  00032	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioAttachWeaponDummy@@6BioWorldEventReceiver@@@
  0003c	ff d3		 call	 ebx
  0003e	33 c0		 xor	 eax, eax
  00040	89 86 a4 14 00
	00		 mov	 DWORD PTR [esi+5284], eax
  00046	89 86 a8 14 00
	00		 mov	 DWORD PTR [esi+5288], eax
  0004c	89 86 ac 14 00
	00		 mov	 DWORD PTR [esi+5292], eax
  00052	8d 8e bc 14 00
	00		 lea	 ecx, DWORD PTR [esi+5308]
  00058	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005c	ff d3		 call	 ebx

; 12   : 	m_CreateWeaponList.clear();

  0005e	8b 86 a8 14 00
	00		 mov	 eax, DWORD PTR [esi+5288]
  00064	8b 8e a4 14 00
	00		 mov	 ecx, DWORD PTR [esi+5284]
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	8d 45 0c	 lea	 eax, DWORD PTR $T536046[ebp]
  0006f	50		 push	 eax
  00070	8d 8e a4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5284]
  00076	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007a	e8 00 00 00 00	 call	 ?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::erase

; 13   : 	m_AttachState = AS_START;

  0007f	83 a6 80 14 00
	00 00		 and	 DWORD PTR [esi+5248], 0

; 14   : 	m_szAttachEffect.Clear();

  00086	8d 8e bc 14 00
	00		 lea	 ecx, DWORD PTR [esi+5308]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 15   : 	m_bNotUseTranslateByConveyer = false;

  00092	c6 86 cc 14 00
	00 00		 mov	 BYTE PTR [esi+5324], 0

; 16   : }

  00099	8b c6		 mov	 eax, esi
  0009b	e8 00 00 00 00	 call	 __EH_epilog3
  000a0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 88 14 00
	00		 add	 ecx, 5256		; 00001488H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a4 14 00
	00		 add	 ecx, 5284		; 000014a4H
  00020	e9 00 00 00 00	 jmp	 ??1?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
__unwindfunclet$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 bc 14 00
	00		 add	 ecx, 5308		; 000014bcH
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAttachWeaponDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ENDP ; ioAttachWeaponDummy::ioAttachWeaponDummy
; Function compile flags: /Odsp
;	COMDAT ??_EioAttachWeaponDummy@@WBMI@AEPAXI@Z
_TEXT	SEGMENT
??_EioAttachWeaponDummy@@WBMI@AEPAXI@Z PROC		; [thunk]:ioAttachWeaponDummy::`vector deleting destructor', COMDAT
  00000	81 e9 c8 01 00
	00		 sub	 ecx, 456		; 000001c8H
  00006	e9 00 00 00 00	 jmp	 ??_EioAttachWeaponDummy@@UAEPAXI@Z
??_EioAttachWeaponDummy@@WBMI@AEPAXI@Z ENDP		; [thunk]:ioAttachWeaponDummy::`vector deleting destructor'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummychar.h
_TEXT	ENDS
;	COMDAT ?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
_TEXT	SEGMENT
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ PROC		; ioDummyChar::IsDummyCharMidSync, COMDAT
; _this$ = ecx

; 742  : 	virtual bool IsDummyCharMidSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ ENDP		; ioDummyChar::IsDummyCharMidSync
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$536087 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$536087[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$536087[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
_TEXT	ENDS
PUBLIC	??1ioAttachWeaponDummy@@UAE@XZ			; ioAttachWeaponDummy::~ioAttachWeaponDummy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioAttachWeaponDummy@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioAttachWeaponDummy@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioAttachWeaponDummy@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioAttachWeaponDummy@@UAE@XZ$2
__ehfuncinfo$??1ioAttachWeaponDummy@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1ioAttachWeaponDummy@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
xdata$x	ENDS
;	COMDAT ??1ioAttachWeaponDummy@@UAE@XZ
_TEXT	SEGMENT
$T536155 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioAttachWeaponDummy@@UAE@XZ PROC			; ioAttachWeaponDummy::~ioAttachWeaponDummy, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioAttachWeaponDummy@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAttachWeaponDummy@@6BioPlayEntity@@@
  00017	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioAttachWeaponDummy@@6BioWorldEventReceiver@@@

; 20   : 	m_CreateWeaponList.clear();

  00021	8b 86 a8 14 00
	00		 mov	 eax, DWORD PTR [esi+5288]
  00027	8b 8e a4 14 00
	00		 mov	 ecx, DWORD PTR [esi+5284]
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	8d 45 ec	 lea	 eax, DWORD PTR $T536155[ebp]
  00032	50		 push	 eax
  00033	8d 8e a4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5284]
  00039	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00040	e8 00 00 00 00	 call	 ?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::erase

; 21   : }

  00045	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0004b	8d 8e bc 14 00
	00		 lea	 ecx, DWORD PTR [esi+5308]
  00051	ff d3		 call	 ebx
  00053	8d 8e a4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5284]
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005d	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXXZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Tidy
  00062	8d 8e 88 14 00
	00		 lea	 ecx, DWORD PTR [esi+5256]
  00068	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0006c	ff d3		 call	 ebx
  0006e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b ce		 mov	 ecx, esi
  00074	e8 00 00 00 00	 call	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
  00079	e8 00 00 00 00	 call	 __EH_epilog3
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioAttachWeaponDummy@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??1ioAttachWeaponDummy@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 88 14 00
	00		 add	 ecx, 5256		; 00001488H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioAttachWeaponDummy@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a4 14 00
	00		 add	 ecx, 5284		; 000014a4H
  00020	e9 00 00 00 00	 jmp	 ??1?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE@XZ ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::~vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >
__ehhandler$??1ioAttachWeaponDummy@@UAE@XZ:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioAttachWeaponDummy@@UAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioAttachWeaponDummy@@UAE@XZ ENDP			; ioAttachWeaponDummy::~ioAttachWeaponDummy
PUBLIC	?RemoveWeapon@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::RemoveWeapon
EXTRN	?DestroyAreaWeapon@ioAreaWeapon@@QAEXPAVioPlayStage@@_N@Z:PROC ; ioAreaWeapon::DestroyAreaWeapon
; Function compile flags: /Ogsp
;	COMDAT ?RemoveWeapon@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
$T536270 = -8						; size = 4
_pStage$ = -8						; size = 4
_pOwner$ = -4						; size = 4
?RemoveWeapon@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::RemoveWeapon, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 191  : 	ioBaseChar *pOwner = GetOwner();

  00008	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  0000d	89 45 fc	 mov	 DWORD PTR _pOwner$[ebp], eax

; 192  : 	if ( !pOwner )

  00010	85 c0		 test	 eax, eax
  00012	0f 84 a8 00 00
	00		 je	 $LN22@RemoveWeap

; 193  : 		return;
; 194  : 
; 195  : 	ioPlayStage *pStage = pOwner->GetCreator();

  00018	8b 80 44 03 00
	00		 mov	 eax, DWORD PTR [eax+836]
  0001e	89 45 f8	 mov	 DWORD PTR _pStage$[ebp], eax

; 196  : 	if ( !pStage )

  00021	85 c0		 test	 eax, eax
  00023	0f 84 97 00 00
	00		 je	 $LN22@RemoveWeap

; 197  : 		return;
; 198  : 
; 199  : 	//무기 리스트 얻기
; 200  : 	int nWeaponCnt = (int)m_CreateWeaponList.size();

  00029	53		 push	 ebx
  0002a	57		 push	 edi
  0002b	8b be a8 14 00
	00		 mov	 edi, DWORD PTR [esi+5288]
  00031	2b be a4 14 00
	00		 sub	 edi, DWORD PTR [esi+5284]

; 201  : 
; 202  : 	for (int i=0; i<nWeaponCnt; ++i)

  00037	33 db		 xor	 ebx, ebx
  00039	c1 ff 03	 sar	 edi, 3
  0003c	85 ff		 test	 edi, edi
  0003e	7e 61		 jle	 SHORT $LN5@RemoveWeap
$LL42@RemoveWeap:

; 203  : 	{
; 204  : 		CreateInfo sCreateInfo = m_CreateWeaponList[i];

  00040	8b 86 a4 14 00
	00		 mov	 eax, DWORD PTR [esi+5284]
  00046	8b 0c d8	 mov	 ecx, DWORD PTR [eax+ebx*8]
  00049	8b 44 d8 04	 mov	 eax, DWORD PTR [eax+ebx*8+4]

; 205  : 		if ( sCreateInfo.wType == Normal_Weapon )
; 206  : 		{
; 207  : 			ioWeapon *pWeapon = g_WeaponMgr.FindWeapon( pOwner, sCreateInfo.dwIndex );

  0004d	50		 push	 eax
  0004e	85 c9		 test	 ecx, ecx
  00050	75 25		 jne	 SHORT $LN4@RemoveWeap
  00052	ff 75 fc	 push	 DWORD PTR _pOwner$[ebp]
  00055	e8 00 00 00 00	 call	 ?GetSingleton@ioWeaponManager@@SAAAV1@XZ ; ioWeaponManager::GetSingleton
  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ?FindWeapon@ioWeaponManager@@QAEPAVioWeapon@@PAVioBaseChar@@K@Z ; ioWeaponManager::FindWeapon

; 208  : 			if ( pWeapon && pWeapon->IsLive() )

  00061	85 c0		 test	 eax, eax
  00063	74 37		 je	 SHORT $LN6@RemoveWeap
  00065	80 b8 82 05 00
	00 00		 cmp	 BYTE PTR [eax+1410], 0
  0006c	74 2e		 je	 SHORT $LN6@RemoveWeap

; 209  : 			{
; 210  : 				pWeapon->SetWeaponDead();

  0006e	8b 10		 mov	 edx, DWORD PTR [eax]
  00070	8b c8		 mov	 ecx, eax
  00072	ff 52 4c	 call	 DWORD PTR [edx+76]

; 211  : 			}
; 212  : 		}
; 213  : 		else

  00075	eb 25		 jmp	 SHORT $LN6@RemoveWeap
$LN4@RemoveWeap:

; 214  : 		{
; 215  : 			ioAreaWeapon *pAreaWeapon = g_AreaWeaponMgr.FindAreaWeaponByIndex( sCreateInfo.dwIndex );

  00077	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  0007c	8b c8		 mov	 ecx, eax
  0007e	e8 00 00 00 00	 call	 ?FindAreaWeaponByIndex@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@K@Z ; ioAreaWeaponManager::FindAreaWeaponByIndex

; 216  : 			if ( pAreaWeapon && pAreaWeapon->IsLive() )

  00083	85 c0		 test	 eax, eax
  00085	74 15		 je	 SHORT $LN6@RemoveWeap
  00087	80 b8 94 07 00
	00 00		 cmp	 BYTE PTR [eax+1940], 0
  0008e	74 0c		 je	 SHORT $LN6@RemoveWeap

; 217  : 			{
; 218  : 				pAreaWeapon->DestroyAreaWeapon( pStage );

  00090	6a 01		 push	 1
  00092	ff 75 f8	 push	 DWORD PTR _pStage$[ebp]
  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 ?DestroyAreaWeapon@ioAreaWeapon@@QAEXPAVioPlayStage@@_N@Z ; ioAreaWeapon::DestroyAreaWeapon
$LN6@RemoveWeap:

; 201  : 
; 202  : 	for (int i=0; i<nWeaponCnt; ++i)

  0009c	43		 inc	 ebx
  0009d	3b df		 cmp	 ebx, edi
  0009f	7c 9f		 jl	 SHORT $LL42@RemoveWeap
$LN5@RemoveWeap:

; 219  : 			}
; 220  : 		}
; 221  : 	}
; 222  : 
; 223  : 	//리스트 비움
; 224  : 	m_CreateWeaponList.clear();

  000a1	8b 86 a8 14 00
	00		 mov	 eax, DWORD PTR [esi+5288]
  000a7	8b 8e a4 14 00
	00		 mov	 ecx, DWORD PTR [esi+5284]
  000ad	50		 push	 eax
  000ae	51		 push	 ecx
  000af	8d 45 f8	 lea	 eax, DWORD PTR $T536270[ebp]
  000b2	50		 push	 eax
  000b3	8d 8e a4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5284]
  000b9	e8 00 00 00 00	 call	 ?erase@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@@2@0@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::erase
  000be	5f		 pop	 edi
  000bf	5b		 pop	 ebx
$LN22@RemoveWeap:
  000c0	5e		 pop	 esi

; 225  : }

  000c1	c9		 leave
  000c2	c3		 ret	 0
?RemoveWeapon@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::RemoveWeapon
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXABUCreateInfo@ioAttachWeaponDummy@@@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXABUCreateInfo@ioAttachWeaponDummy@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXABUCreateInfo@ioAttachWeaponDummy@@@Z PROC ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 2d		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 27		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXI@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  0002f	50		 push	 eax
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@AAU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@AAU23@@Z ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  0003c	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003e	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00041	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@IAEXI@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004c	57		 push	 edi
  0004d	ff 76 04	 push	 DWORD PTR [esi+4]
  00050	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@UCreateInfo@ioAttachWeaponDummy@@ABU34@@std@@YAXAAV?$allocator@UCreateInfo@ioAttachWeaponDummy@@@0@PAUCreateInfo@ioAttachWeaponDummy@@ABU23@@Z ; std::_Cons_val<std::allocator<ioAttachWeaponDummy::CreateInfo>,ioAttachWeaponDummy::CreateInfo,ioAttachWeaponDummy::CreateInfo const &>
$LN20@push_back:
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0005c	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?push_back@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXABUCreateInfo@ioAttachWeaponDummy@@@Z ENDP ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioAttachWeaponDummy@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAttachWeaponDummy@@UAEPAXI@Z PROC			; ioAttachWeaponDummy::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioAttachWeaponDummy@@UAE@XZ ; ioAttachWeaponDummy::~ioAttachWeaponDummy
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioAttachWeaponDummy@@UAEPAXI@Z ENDP			; ioAttachWeaponDummy::`scalar deleting destructor'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
_TEXT	ENDS
;	COMDAT ?SetDieState@ioAttachWeaponDummy@@UAEX_N@Z
_TEXT	SEGMENT
_bEffect$ = 8						; size = 1
?SetDieState@ioAttachWeaponDummy@@UAEX_N@Z PROC		; ioAttachWeaponDummy::SetDieState, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 83   : 	ioDummyChar::SetDieState( bEffect );

  00004	6a 00		 push	 0
  00006	ff 75 08	 push	 DWORD PTR _bEffect$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?SetDieState@ioDummyChar@@UAEX_N0@Z ; ioDummyChar::SetDieState

; 84   : 	
; 85   : 	//생성한 무기 제거
; 86   : 	RemoveWeapon();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?RemoveWeapon@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::RemoveWeapon

; 87   : 
; 88   : 	//추가 yong jun
; 89   : 	//생성한 effect 제거
; 90   : 	RemoveEffect();

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?RemoveEffect@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::RemoveEffect
  0001e	5e		 pop	 esi

; 91   : 	//
; 92   : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?SetDieState@ioAttachWeaponDummy@@UAEX_N@Z ENDP		; ioAttachWeaponDummy::SetDieState
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::CreateWeapon
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z:PROC	; ioBaseChar::SetWeaponIndexBase
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetWeaponIndexBase@ioBaseChar@@QBEKXZ:PROC	; ioBaseChar::GetWeaponIndexBase
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ$1
__ehfuncinfo$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
xdata$x	ENDS
;	COMDAT ?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
_kFireTime$ = -156					; size = 88
_sCreateInfo$530955 = -68				; size = 8
tv376 = -64						; size = 4
_pOwner$ = -60						; size = 4
_vDir$ = -56						; size = 12
$T536321 = -44						; size = 16
$T530949 = -40						; size = 12
_vPos$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::CreateWeapon, COMDAT
; _this$ = ecx

; 118  : {

  00000	68 90 00 00 00	 push	 144			; 00000090H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f1		 mov	 esi, ecx

; 119  : 	if ( m_nCreateWeaponIndex == NO_WEAPON_ATTRIBUTE )

  00011	33 db		 xor	 ebx, ebx
  00013	39 9e 84 14 00
	00		 cmp	 DWORD PTR [esi+5252], ebx
  00019	0f 84 9d 01 00
	00		 je	 $LN4@CreateWeap

; 120  : 		return;
; 121  : 
; 122  : 	ioBaseChar *pOwner = GetOwner();

  0001f	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00024	89 45 c4	 mov	 DWORD PTR _pOwner$[ebp], eax

; 123  : 
; 124  : 	if ( !pOwner )

  00027	3b c3		 cmp	 eax, ebx
  00029	0f 84 8d 01 00
	00		 je	 $LN4@CreateWeap

; 125  : 		return;
; 126  : 
; 127  : 	D3DXVECTOR3 vPos = GetWorldPosition() + m_vCreateWeaponOffset;

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b ce		 mov	 ecx, esi
  00033	ff 50 70	 call	 DWORD PTR [eax+112]
  00036	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0003a	f3 0f 10 86 98
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5272]
  00042	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00047	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00052	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00056	f3 0f 10 8e 9c
	14 00 00	 movss	 xmm1, DWORD PTR [esi+5276]
  0005e	0f 5a d2	 cvtps2pd xmm2, xmm2
  00061	0f 5a c9	 cvtps2pd xmm1, xmm1
  00064	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00068	f3 0f 10 96 a0
	14 00 00	 movss	 xmm2, DWORD PTR [esi+5280]
  00070	0f 5a d2	 cvtps2pd xmm2, xmm2
  00073	0f 5a db	 cvtps2pd xmm3, xmm3
  00076	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0007a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0007e	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00082	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00086	f3 0f 11 45 e4	 movss	 DWORD PTR _vPos$[ebp], xmm0
  0008b	f3 0f 11 4d e8	 movss	 DWORD PTR _vPos$[ebp+4], xmm1
  00090	f3 0f 11 55 ec	 movss	 DWORD PTR _vPos$[ebp+8], xmm2

; 128  : 	D3DXVECTOR3 vDir = GetWorldOrientation() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	0f 57 c0	 xorps	 xmm0, xmm0
  0009d	89 45 c0	 mov	 DWORD PTR tv376[ebp], eax
  000a0	db 45 c0	 fild	 DWORD PTR tv376[ebp]
  000a3	f3 0f 11 45 d8	 movss	 DWORD PTR $T530949[ebp], xmm0
  000a8	f3 0f 11 45 dc	 movss	 DWORD PTR $T530949[ebp+4], xmm0
  000ad	85 c0		 test	 eax, eax
  000af	79 06		 jns	 SHORT $LN19@CreateWeap
  000b1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN19@CreateWeap:
  000b7	8d 45 d8	 lea	 eax, DWORD PTR $T530949[ebp]
  000ba	d9 e0		 fchs
  000bc	50		 push	 eax
  000bd	d9 5d e0	 fstp	 DWORD PTR $T530949[ebp+8]
  000c0	8b 06		 mov	 eax, DWORD PTR [esi]
  000c2	8b ce		 mov	 ecx, esi
  000c4	ff 50 74	 call	 DWORD PTR [eax+116]
  000c7	50		 push	 eax
  000c8	8d 45 c8	 lea	 eax, DWORD PTR _vDir$[ebp]
  000cb	50		 push	 eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 129  : 
; 130  : 	m_dwBaseWeaponIndex = pOwner->GetWeaponIndexBase() + 1;

  000d2	8b 4d c4	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	e8 00 00 00 00	 call	 ?GetWeaponIndexBase@ioBaseChar@@QBEKXZ ; ioBaseChar::GetWeaponIndexBase
  000dd	40		 inc	 eax

; 131  : 
; 132  : 	FireTime kFireTime;

  000de	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  000e4	89 86 30 06 00
	00		 mov	 DWORD PTR [esi+1584], eax
  000ea	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  000ef	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 133  : 	kFireTime.dwStart = FRAMEGETTIME();

  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000f8	8b c8		 mov	 ecx, eax
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00100	89 85 64 ff ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp], eax

; 134  : 
; 135  : 	kFireTime.iAttributeIdx = m_nCreateWeaponIndex;

  00106	8b 86 84 14 00
	00		 mov	 eax, DWORD PTR [esi+5252]

; 136  : 	kFireTime.iResistanceIdx = 0;
; 137  : 	kFireTime.szWoundedAni  = "";

  0010c	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00111	57		 push	 edi
  00112	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp+20]
  00118	89 85 6c ff ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+8], eax
  0011e	89 9d 70 ff ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+12], ebx
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 138  : 	kFireTime.dwWoundedAniDuration = 0;
; 139  : 	kFireTime.bLoopWoundedAni = false;
; 140  : 	kFireTime.dwWeaponIdx = m_dwBaseWeaponIndex;

  0012a	8b 86 30 06 00
	00		 mov	 eax, DWORD PTR [esi+1584]

; 141  : 	kFireTime.eFireTimeType = FTT_DUMMY_CHAR_ATTACK;
; 142  : 
; 143  : 	pOwner->SetWeaponIndexBase( m_dwBaseWeaponIndex );

  00130	8b 4d c4	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00133	50		 push	 eax
  00134	89 5d 88	 mov	 DWORD PTR _kFireTime$[ebp+36], ebx
  00137	88 9d 74 ff ff
	ff		 mov	 BYTE PTR _kFireTime$[ebp+16], bl
  0013d	89 45 8c	 mov	 DWORD PTR _kFireTime$[ebp+40], eax
  00140	c7 45 a4 0b 00
	00 00		 mov	 DWORD PTR _kFireTime$[ebp+64], 11 ; 0000000bH
  00147	e8 00 00 00 00	 call	 ?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z ; ioBaseChar::SetWeaponIndexBase

; 144  : 
; 145  : 	ioWeapon *pWeapon = pOwner->ExtendFireExplicit( kFireTime, vPos, vDir, "" );

  0014c	57		 push	 edi
  0014d	8d 4d d4	 lea	 ecx, DWORD PTR $T536321[ebp]
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00156	8b 4d c4	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00159	8d 45 d4	 lea	 eax, DWORD PTR $T536321[ebp]
  0015c	50		 push	 eax
  0015d	8d 45 c8	 lea	 eax, DWORD PTR _vDir$[ebp]
  00160	50		 push	 eax
  00161	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  00164	50		 push	 eax
  00165	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _kFireTime$[ebp]
  0016b	50		 push	 eax
  0016c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00170	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  00175	8d 4d d4	 lea	 ecx, DWORD PTR $T536321[ebp]
  00178	8b f8		 mov	 edi, eax
  0017a	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 146  : 	if ( pWeapon )

  00183	3b fb		 cmp	 edi, ebx
  00185	74 26		 je	 SHORT $LN1@CreateWeap

; 147  : 	{
; 148  : 		pWeapon->SetPosition( vPos );

  00187	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  0018a	50		 push	 eax
  0018b	8b cf		 mov	 ecx, edi
  0018d	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 149  : 
; 150  : 		CreateInfo sCreateInfo;
; 151  : 		sCreateInfo.wType = Normal_Weapon;
; 152  : 		sCreateInfo.dwIndex = pWeapon->GetWeaponIndex();

  00192	8b 87 b8 04 00
	00		 mov	 eax, DWORD PTR [edi+1208]
  00198	89 45 c0	 mov	 DWORD PTR _sCreateInfo$530955[ebp+4], eax

; 153  : 		m_CreateWeaponList.push_back( sCreateInfo );

  0019b	8d 45 bc	 lea	 eax, DWORD PTR _sCreateInfo$530955[ebp]
  0019e	50		 push	 eax
  0019f	8d 8e a4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5284]
  001a5	89 5d bc	 mov	 DWORD PTR _sCreateInfo$530955[ebp], ebx
  001a8	e8 00 00 00 00	 call	 ?push_back@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXABUCreateInfo@ioAttachWeaponDummy@@@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::push_back
$LN1@CreateWeap:

; 154  : 	}	
; 155  : }

  001ad	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001b1	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  001b7	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN4@CreateWeap:
  001bc	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001c1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ$0:
  00000	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ$1:
  0000b	8d 4d d4	 lea	 ecx, DWORD PTR $T536321[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::CreateWeapon
PUBLIC	?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::CreateAreaWeapon
EXTRN	?CreateAreaWeapon@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@000ABUD3DXVECTOR3@@ABUD3DXQUATERNION@@H@Z:PROC ; ioAreaWeaponManager::CreateAreaWeapon
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioareaweapon.h
xdata$x	SEGMENT
__unwindtable$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ$1
__ehfuncinfo$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattachweapondummy.cpp
xdata$x	ENDS
;	COMDAT ?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
_qtRot$ = -84						; size = 16
$T536363 = -68						; size = 16
$T536364 = -52						; size = 16
_sCreateInfo$530971 = -36				; size = 8
_pOwner$ = -32						; size = 4
_vPos$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ PROC	; ioAttachWeaponDummy::CreateAreaWeapon, COMDAT
; _this$ = ecx

; 158  : {

  00000	6a 48		 push	 72			; 00000048H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b d9		 mov	 ebx, ecx

; 159  : 	if ( m_szAreaWeaponName.IsEmpty() )

  0000e	8d 8b 88 14 00
	00		 lea	 ecx, DWORD PTR [ebx+5256]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0001a	84 c0		 test	 al, al
  0001c	0f 85 0f 01 00
	00		 jne	 $LN1@CreateArea

; 160  : 		return;
; 161  : 
; 162  : 	ioBaseChar *pOwner = GetOwner();

  00022	8b cb		 mov	 ecx, ebx
  00024	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00029	89 45 e0	 mov	 DWORD PTR _pOwner$[ebp], eax

; 163  : 	if ( !pOwner )

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 fd 00 00
	00		 je	 $LN1@CreateArea

; 164  : 		return;
; 165  : 
; 166  : 	//각도, 위치
; 167  : 	D3DXVECTOR3 vPos = GetWorldPosition() + m_vCreateWeaponOffset;

  00034	8b 03		 mov	 eax, DWORD PTR [ebx]
  00036	8b cb		 mov	 ecx, ebx
  00038	ff 50 70	 call	 DWORD PTR [eax+112]
  0003b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0003f	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00044	f3 0f 10 83 98
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5272]
  0004c	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 168  : 	D3DXQUATERNION qtRot = GetWorldOrientation();

  00051	8b 03		 mov	 eax, DWORD PTR [ebx]
  00053	0f 5a c9	 cvtps2pd xmm1, xmm1
  00056	0f 5a c0	 cvtps2pd xmm0, xmm0
  00059	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0005d	f3 0f 10 8b 9c
	14 00 00	 movss	 xmm1, DWORD PTR [ebx+5276]
  00065	0f 5a d2	 cvtps2pd xmm2, xmm2
  00068	0f 5a c9	 cvtps2pd xmm1, xmm1
  0006b	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0006f	f3 0f 10 93 a0
	14 00 00	 movss	 xmm2, DWORD PTR [ebx+5280]
  00077	0f 5a d2	 cvtps2pd xmm2, xmm2
  0007a	0f 5a db	 cvtps2pd xmm3, xmm3
  0007d	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00081	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00085	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00089	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0008d	8b cb		 mov	 ecx, ebx
  0008f	f3 0f 11 45 e4	 movss	 DWORD PTR _vPos$[ebp], xmm0
  00094	f3 0f 11 4d e8	 movss	 DWORD PTR _vPos$[ebp+4], xmm1
  00099	f3 0f 11 55 ec	 movss	 DWORD PTR _vPos$[ebp+8], xmm2
  0009e	ff 50 74	 call	 DWORD PTR [eax+116]
  000a1	8b f0		 mov	 esi, eax
  000a3	8d 7d ac	 lea	 edi, DWORD PTR _qtRot$[ebp]
  000a6	a5		 movsd
  000a7	a5		 movsd
  000a8	a5		 movsd
  000a9	a5		 movsd

; 169  : 
; 170  : 	//Area 무기 생성
; 171  : 	ioAreaWeapon *pArea = g_AreaWeaponMgr.CreateAreaWeapon( pOwner->GetCharName(),
; 172  : 		"",
; 173  : 		"",
; 174  : 		m_szAreaWeaponName,
; 175  : 		vPos,
; 176  : 		qtRot,
; 177  : 		ioAreaWeapon::CT_NORMAL );

  000aa	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000b0	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000b5	57		 push	 edi
  000b6	8d 4d bc	 lea	 ecx, DWORD PTR $T536363[ebp]
  000b9	ff d6		 call	 esi
  000bb	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  000bf	57		 push	 edi
  000c0	8d 4d cc	 lea	 ecx, DWORD PTR $T536364[ebp]
  000c3	ff d6		 call	 esi
  000c5	6a 00		 push	 0
  000c7	8d 45 ac	 lea	 eax, DWORD PTR _qtRot$[ebp]
  000ca	50		 push	 eax
  000cb	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  000ce	50		 push	 eax
  000cf	8d 83 88 14 00
	00		 lea	 eax, DWORD PTR [ebx+5256]
  000d5	50		 push	 eax
  000d6	8d 45 bc	 lea	 eax, DWORD PTR $T536363[ebp]
  000d9	50		 push	 eax
  000da	8d 45 cc	 lea	 eax, DWORD PTR $T536364[ebp]
  000dd	50		 push	 eax
  000de	8b 45 e0	 mov	 eax, DWORD PTR _pOwner$[ebp]
  000e1	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  000e6	50		 push	 eax
  000e7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000eb	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  000f0	8b c8		 mov	 ecx, eax
  000f2	e8 00 00 00 00	 call	 ?CreateAreaWeapon@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@000ABUD3DXVECTOR3@@ABUD3DXQUATERNION@@H@Z ; ioAreaWeaponManager::CreateAreaWeapon
  000f7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000fd	8d 4d cc	 lea	 ecx, DWORD PTR $T536364[ebp]
  00100	8b f8		 mov	 edi, eax
  00102	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00106	ff d6		 call	 esi
  00108	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0010c	8d 4d bc	 lea	 ecx, DWORD PTR $T536363[ebp]
  0010f	ff d6		 call	 esi

; 178  : 
; 179  : 	if ( pArea )

  00111	85 ff		 test	 edi, edi
  00113	74 1c		 je	 SHORT $LN1@CreateArea

; 180  : 	{
; 181  : 		CreateInfo sCreateInfo;
; 182  : 		sCreateInfo.wType = Area_Weapon;
; 183  : 		sCreateInfo.dwIndex = pArea->GetAreaWeaponIndex();

  00115	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00118	89 45 e0	 mov	 DWORD PTR _sCreateInfo$530971[ebp+4], eax

; 184  : 		m_CreateWeaponList.push_back( sCreateInfo );

  0011b	8d 45 dc	 lea	 eax, DWORD PTR _sCreateInfo$530971[ebp]
  0011e	50		 push	 eax
  0011f	8d 8b a4 14 00
	00		 lea	 ecx, DWORD PTR [ebx+5284]
  00125	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _sCreateInfo$530971[ebp], 1
  0012c	e8 00 00 00 00	 call	 ?push_back@?$vector@UCreateInfo@ioAttachWeaponDummy@@V?$allocator@UCreateInfo@ioAttachWeaponDummy@@@std@@@std@@QAEXABUCreateInfo@ioAttachWeaponDummy@@@Z ; std::vector<ioAttachWeaponDummy::CreateInfo,std::allocator<ioAttachWeaponDummy::CreateInfo> >::push_back
$LN1@CreateArea:

; 185  : 	}
; 186  : }

  00131	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00136	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR $T536363[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ$1:
  00009	8d 4d cc	 lea	 ecx, DWORD PTR $T536364[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ ENDP	; ioAttachWeaponDummy::CreateAreaWeapon
PUBLIC	?SetWaitState@ioAttachWeaponDummy@@IAEXXZ	; ioAttachWeaponDummy::SetWaitState
; Function compile flags: /Ogsp
;	COMDAT ?SetWaitState@ioAttachWeaponDummy@@IAEXXZ
_TEXT	SEGMENT
?SetWaitState@ioAttachWeaponDummy@@IAEXXZ PROC		; ioAttachWeaponDummy::SetWaitState, COMDAT
; _this$ = ecx

; 108  : {	

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 109  : 	CreateWeapon();

  00003	e8 00 00 00 00	 call	 ?CreateWeapon@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::CreateWeapon

; 110  : 	CreateAreaWeapon();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?CreateAreaWeapon@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::CreateAreaWeapon

; 111  : 	CreateEffect();

  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?CreateEffect@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::CreateEffect

; 112  : 
; 113  : 	m_AttachState = AS_WAIT;

  00016	c7 86 80 14 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5248], 2
  00020	5e		 pop	 esi

; 114  : }

  00021	c3		 ret	 0
?SetWaitState@ioAttachWeaponDummy@@IAEXXZ ENDP		; ioAttachWeaponDummy::SetWaitState
_TEXT	ENDS
EXTRN	?SendDieState@ioDummyChar@@QAEX_N@Z:PROC	; ioDummyChar::SendDieState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioAttachWeaponDummy@@MAEXMK@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessState@ioAttachWeaponDummy@@MAEXMK@Z PROC	; ioAttachWeaponDummy::ProcessState, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 58   : 	VisibleCheck();

  00006	e8 00 00 00 00	 call	 ?VisibleCheck@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::VisibleCheck

; 59   : 
; 60   : 	switch( m_AttachState )

  0000b	8b 86 80 14 00
	00		 mov	 eax, DWORD PTR [esi+5248]
  00011	83 e8 00	 sub	 eax, 0
  00014	74 54		 je	 SHORT $LN4@ProcessSta
  00016	48		 dec	 eax
  00017	74 48		 je	 SHORT $LN3@ProcessSta
  00019	48		 dec	 eax
  0001a	75 55		 jne	 SHORT $LN5@ProcessSta

; 68   : 	case AS_WAIT:
; 69   : 		{
; 70   : 			if( m_dwStartTime + m_dwLifeTime < FRAMEGETTIME() )

  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00022	8b c8		 mov	 ecx, eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0002a	8b 8e 14 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2836]
  00030	03 8e 10 0b 00
	00		 add	 ecx, DWORD PTR [esi+2832]
  00036	3b c8		 cmp	 ecx, eax
  00038	73 09		 jae	 SHORT $LN1@ProcessSta

; 71   : 				SendDieState( true );

  0003a	6a 01		 push	 1
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ?SendDieState@ioDummyChar@@QAEX_N@Z ; ioDummyChar::SendDieState
$LN1@ProcessSta:

; 72   : 
; 73   : 			ProcessPos( fTimePerSec );

  00043	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	51		 push	 ecx
  0004b	8b ce		 mov	 ecx, esi
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	ff 90 fc 00 00
	00		 call	 DWORD PTR [eax+252]

; 74   : 			CheckMove();

  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?CheckMove@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::CheckMove

; 75   : 		}
; 76   : 		break;

  0005f	eb 10		 jmp	 SHORT $LN5@ProcessSta
$LN3@ProcessSta:

; 64   : 		break;
; 65   : 	case AS_FIRE:
; 66   : 		SetWaitState();

  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?SetWaitState@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::SetWaitState

; 67   : 		break;

  00068	eb 07		 jmp	 SHORT $LN5@ProcessSta
$LN4@ProcessSta:

; 61   : 	{
; 62   : 	case AS_START:
; 63   : 		SetFireState();

  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?SetFireState@ioAttachWeaponDummy@@IAEXXZ ; ioAttachWeaponDummy::SetFireState
$LN5@ProcessSta:
  00071	5e		 pop	 esi

; 77   : 	}
; 78   : }

  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?ProcessState@ioAttachWeaponDummy@@MAEXMK@Z ENDP	; ioAttachWeaponDummy::ProcessState
_TEXT	ENDS
END
