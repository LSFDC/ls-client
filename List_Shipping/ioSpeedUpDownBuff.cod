; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioSpeedUpDownBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ	; ioGrowthUpInfo::GetType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogrowthupinfo.h
;	COMDAT ?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ
_TEXT	SEGMENT
?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ PROC	; ioGrowthUpInfo::GetType, COMDAT
; _this$ = ecx

; 23   : 	inline GrowthType GetType() const { return m_GrowthType; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ ENDP	; ioGrowthUpInfo::GetType
_TEXT	ENDS
PUBLIC	??_R0?AVioGrowthUpInfo@@@8			; ioGrowthUpInfo `RTTI Type Descriptor'
PUBLIC	??_R0?AVioGrowthNormalUpInfo@@@8		; ioGrowthNormalUpInfo `RTTI Type Descriptor'
PUBLIC	?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z ; ToNormalUpInfo
EXTRN	___RTDynamicCast:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVioGrowthUpInfo@@@8
_DATA	SEGMENT
??_R0?AVioGrowthUpInfo@@@8 DD FLAT:??_7type_info@@6B@	; ioGrowthUpInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGrowthUpInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioGrowthNormalUpInfo@@@8
_DATA	SEGMENT
??_R0?AVioGrowthNormalUpInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ioGrowthNormalUpInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGrowthNormalUpInfo@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z
_TEXT	SEGMENT
_pUpInfo$ = 8						; size = 4
?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z PROC ; ToNormalUpInfo, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	if( !pUpInfo || pUpInfo->GetType() == GT_NONE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pUpInfo$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 39		 je	 SHORT $LN6@ToNormalUp
  0000a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000d	85 c0		 test	 eax, eax
  0000f	74 32		 je	 SHORT $LN6@ToNormalUp

; 62   : 
; 63   : 	if( pUpInfo->GetType() == GT_CHAR_ATTACK || pUpInfo->GetType() == GT_SKILL_ATTACK )

  00011	83 f8 01	 cmp	 eax, 1
  00014	74 2d		 je	 SHORT $LN6@ToNormalUp
  00016	83 f8 07	 cmp	 eax, 7
  00019	74 28		 je	 SHORT $LN6@ToNormalUp

; 64   : 		return NULL;
; 65   : 	if( pUpInfo->GetType() == GT_BLOW_PUSH )

  0001b	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 66   : 		return NULL;

  0001e	74 23		 je	 SHORT $LN6@ToNormalUp

; 67   : 	if( pUpInfo->GetType() == GT_TELEPORT_ANI_RATE )

  00020	83 f8 20	 cmp	 eax, 32			; 00000020H

; 68   : 		return NULL;

  00023	74 1e		 je	 SHORT $LN6@ToNormalUp

; 69   : 	if( pUpInfo->GetType() == GT_SKILL_ATTACK_FORCE )

  00025	83 f8 1c	 cmp	 eax, 28			; 0000001cH

; 70   : 		return NULL;

  00028	74 19		 je	 SHORT $LN6@ToNormalUp

; 71   : 
; 72   : 	return dynamic_cast< ioGrowthNormalUpInfo* >( pUpInfo );

  0002a	6a 00		 push	 0
  0002c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGrowthNormalUpInfo@@@8
  00031	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGrowthUpInfo@@@8
  00036	6a 00		 push	 0
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ___RTDynamicCast
  0003e	83 c4 14	 add	 esp, 20			; 00000014H

; 73   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN6@ToNormalUp:

; 61   : 		return NULL;

  00043	33 c0		 xor	 eax, eax

; 73   : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z ENDP ; ToNormalUpInfo
_TEXT	ENDS
PUBLIC	??_7ioSpeedUpDownBuff@@6B@			; ioSpeedUpDownBuff::`vftable'
PUBLIC	??0ioSpeedUpDownBuff@@QAE@XZ			; ioSpeedUpDownBuff::ioSpeedUpDownBuff
PUBLIC	??_R4ioSpeedUpDownBuff@@6B@			; ioSpeedUpDownBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioSpeedUpDownBuff@@@8			; ioSpeedUpDownBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioSpeedUpDownBuff@@8			; ioSpeedUpDownBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSpeedUpDownBuff@@8			; ioSpeedUpDownBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSpeedUpDownBuff@@8		; ioSpeedUpDownBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioSpeedUpDownBuff@@UAEXAAVioINILoader@@@Z ; ioSpeedUpDownBuff::LoadProperty
PUBLIC	?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ	; ioSpeedUpDownBuff::Clone
PUBLIC	?StartBuff@ioSpeedUpDownBuff@@UAEXPAVioBaseChar@@@Z ; ioSpeedUpDownBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioSpeedUpDownBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioSpeedUpDownBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioSpeedUpDownBuff@@UAEXM@Z		; ioSpeedUpDownBuff::ProcessBuff
PUBLIC	?EndBuff@ioSpeedUpDownBuff@@UAEXXZ		; ioSpeedUpDownBuff::EndBuff
PUBLIC	?GetBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z ; ioSpeedUpDownBuff::GetBuffInfo
PUBLIC	?ApplyBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z ; ioSpeedUpDownBuff::ApplyBuffInfo
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	__fltused:DWORD
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioSpeedUpDownBuff@@UAEPAXI@Z:PROC		; ioSpeedUpDownBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iospeedupdownbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSpeedUpDownBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSpeedUpDownBuff@@8 DD FLAT:??_R0?AVioSpeedUpDownBuff@@@8 ; ioSpeedUpDownBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSpeedUpDownBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioSpeedUpDownBuff@@8
rdata$r	SEGMENT
??_R2ioSpeedUpDownBuff@@8 DD FLAT:??_R1A@?0A@EA@ioSpeedUpDownBuff@@8 ; ioSpeedUpDownBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioSpeedUpDownBuff@@8
rdata$r	SEGMENT
??_R3ioSpeedUpDownBuff@@8 DD 00H			; ioSpeedUpDownBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioSpeedUpDownBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSpeedUpDownBuff@@@8
_DATA	SEGMENT
??_R0?AVioSpeedUpDownBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioSpeedUpDownBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSpeedUpDownBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioSpeedUpDownBuff@@6B@
rdata$r	SEGMENT
??_R4ioSpeedUpDownBuff@@6B@ DD 00H			; ioSpeedUpDownBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioSpeedUpDownBuff@@@8
	DD	FLAT:??_R3ioSpeedUpDownBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioSpeedUpDownBuff@@6B@
CONST	SEGMENT
??_7ioSpeedUpDownBuff@@6B@ DD FLAT:??_R4ioSpeedUpDownBuff@@6B@ ; ioSpeedUpDownBuff::`vftable'
	DD	FLAT:?LoadProperty@ioSpeedUpDownBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioSpeedUpDownBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioSpeedUpDownBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioSpeedUpDownBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioSpeedUpDownBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioSpeedUpDownBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioSpeedUpDownBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioSpeedUpDownBuff@@QAE@XZ PROC			; ioSpeedUpDownBuff::ioSpeedUpDownBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff

; 11   : 	 m_fCurAddSpeed = 0.0f;

  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSpeedUpDownBuff@@6B@
  00011	f3 0f 11 86 6c
	09 00 00	 movss	 DWORD PTR [esi+2412], xmm0

; 12   : 	 m_fExtraSpeed = 0.0f;

  00019	f3 0f 11 86 78
	09 00 00	 movss	 DWORD PTR [esi+2424], xmm0

; 13   : 	 m_bDisableDownState = false;

  00021	c6 86 7c 09 00
	00 00		 mov	 BYTE PTR [esi+2428], 0

; 14   : }

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??0ioSpeedUpDownBuff@@QAE@XZ ENDP			; ioSpeedUpDownBuff::ioSpeedUpDownBuff
_TEXT	ENDS
PUBLIC	??0ioSpeedUpDownBuff@@QAE@ABV0@@Z		; ioSpeedUpDownBuff::ioSpeedUpDownBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??0ioSpeedUpDownBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioSpeedUpDownBuff@@QAE@ABV0@@Z PROC			; ioSpeedUpDownBuff::ioSpeedUpDownBuff, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff

; 23   : 	m_fCurAddSpeed = 0.0f;

  00010	0f 57 c0	 xorps	 xmm0, xmm0
  00013	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSpeedUpDownBuff@@6B@
  00019	d9 87 70 09 00
	00		 fld	 DWORD PTR [edi+2416]
  0001f	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]
  00025	d9 87 74 09 00
	00		 fld	 DWORD PTR [edi+2420]
  0002b	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]
  00031	8a 87 7c 09 00
	00		 mov	 al, BYTE PTR [edi+2428]
  00037	88 86 7c 09 00
	00		 mov	 BYTE PTR [esi+2428], al
  0003d	8a 87 7d 09 00
	00		 mov	 al, BYTE PTR [edi+2429]
  00043	88 86 7d 09 00
	00		 mov	 BYTE PTR [esi+2429], al
  00049	5f		 pop	 edi
  0004a	f3 0f 11 86 6c
	09 00 00	 movss	 DWORD PTR [esi+2412], xmm0

; 24   : 	m_fExtraSpeed = 0.0f;

  00052	f3 0f 11 86 78
	09 00 00	 movss	 DWORD PTR [esi+2424], xmm0

; 25   : }

  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
??0ioSpeedUpDownBuff@@QAE@ABV0@@Z ENDP			; ioSpeedUpDownBuff::ioSpeedUpDownBuff
_TEXT	ENDS
PUBLIC	??1ioSpeedUpDownBuff@@UAE@XZ			; ioSpeedUpDownBuff::~ioSpeedUpDownBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioSpeedUpDownBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioSpeedUpDownBuff@@UAE@XZ PROC			; ioSpeedUpDownBuff::~ioSpeedUpDownBuff, COMDAT
; _this$ = ecx

; 28   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioSpeedUpDownBuff@@6B@

; 29   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioSpeedUpDownBuff@@UAE@XZ ENDP			; ioSpeedUpDownBuff::~ioSpeedUpDownBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524904 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ PROC		; ioSpeedUpDownBuff::Clone, COMDAT
; _this$ = ecx

; 42   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 43   : 	return new ioSpeedUpDownBuff( *this );

  0000e	68 80 09 00 00	 push	 2432			; 00000980H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524904[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioSpeedUpDownBuff@@QAE@ABV0@@Z ; ioSpeedUpDownBuff::ioSpeedUpDownBuff
$LN3@Clone:

; 44   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524904[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioSpeedUpDownBuff@@UAEPAVioBuff@@XZ ENDP		; ioSpeedUpDownBuff::Clone
EXTRN	?SetExtraMoveSpeed@ioBaseChar@@QAEXMM@Z:PROC	; ioBaseChar::SetExtraMoveSpeed
EXTRN	?GetValue@ioGrowthNormalUpInfo@@QAEMPAVioPlayStage@@@Z:PROC ; ioGrowthNormalUpInfo::GetValue
EXTRN	?GetPlayStage@ioItemMaker@@QAEPAVioPlayStage@@XZ:PROC ; ioItemMaker::GetPlayStage
EXTRN	?GetSingleton@ioItemMaker@@SAAAV1@XZ:PROC	; ioItemMaker::GetSingleton
EXTRN	?GetGrowthUpInfoForItem@ioBuff@@QAEPAVioGrowthUpInfo@@H@Z:PROC ; ioBuff::GetGrowthUpInfoForItem
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioSpeedUpDownBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioSpeedUpDownBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioSpeedUpDownBuff::StartBuff, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 48   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 49   : 
; 50   : 	if( !m_ItemName.IsEmpty() )

  0000e	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0001a	84 c0		 test	 al, al
  0001c	75 32		 jne	 SHORT $LN1@StartBuff

; 51   : 	{
; 52   : 		ioGrowthNormalUpInfo *pUpInfo = ToNormalUpInfo(GetGrowthUpInfoForItem(GT_SPEED_BUFF_UP));

  0001e	57		 push	 edi
  0001f	6a 0b		 push	 11			; 0000000bH
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?GetGrowthUpInfoForItem@ioBuff@@QAEPAVioGrowthUpInfo@@H@Z ; ioBuff::GetGrowthUpInfoForItem
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z ; ToNormalUpInfo
  0002e	8b f8		 mov	 edi, eax
  00030	59		 pop	 ecx

; 53   : 		if( pUpInfo )

  00031	85 ff		 test	 edi, edi
  00033	74 1a		 je	 SHORT $LN5@StartBuff

; 54   : 		{
; 55   : 			ioPlayStage *pStage = g_ItemMaker.GetPlayStage();

  00035	e8 00 00 00 00	 call	 ?GetSingleton@ioItemMaker@@SAAAV1@XZ ; ioItemMaker::GetSingleton
  0003a	8b c8		 mov	 ecx, eax
  0003c	e8 00 00 00 00	 call	 ?GetPlayStage@ioItemMaker@@QAEPAVioPlayStage@@XZ ; ioItemMaker::GetPlayStage

; 56   : 			m_fExtraSpeed = pUpInfo->GetValue(pStage);

  00041	50		 push	 eax
  00042	8b cf		 mov	 ecx, edi
  00044	e8 00 00 00 00	 call	 ?GetValue@ioGrowthNormalUpInfo@@QAEMPAVioPlayStage@@@Z ; ioGrowthNormalUpInfo::GetValue
  00049	d9 9e 78 09 00
	00		 fstp	 DWORD PTR [esi+2424]
$LN5@StartBuff:
  0004f	5f		 pop	 edi
$LN1@StartBuff:

; 57   : 		}
; 58   : 	}
; 59   : 
; 60   : 	m_fCurAddSpeed = m_fAddSpeed+m_fExtraSpeed;

  00050	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  00058	f3 0f 10 8e 70
	09 00 00	 movss	 xmm1, DWORD PTR [esi+2416]

; 61   : 	m_pOwner->SetExtraMoveSpeed( m_fCurAddSpeed, m_fDashSpeedRate );

  00060	51		 push	 ecx
  00061	0f 5a c0	 cvtps2pd xmm0, xmm0
  00064	0f 5a c9	 cvtps2pd xmm1, xmm1
  00067	51		 push	 ecx
  00068	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0006e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00072	f3 0f 10 8e 74
	09 00 00	 movss	 xmm1, DWORD PTR [esi+2420]
  0007a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0007e	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00084	f3 0f 11 86 6c
	09 00 00	 movss	 DWORD PTR [esi+2412], xmm0
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?SetExtraMoveSpeed@ioBaseChar@@QAEXMM@Z ; ioBaseChar::SetExtraMoveSpeed
  00096	5e		 pop	 esi

; 62   : }

  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?StartBuff@ioSpeedUpDownBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioSpeedUpDownBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioSpeedUpDownBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioSpeedUpDownBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioSpeedUpDownBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 66   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 48		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 67   : 		return false;
; 68   : 
; 69   : 	m_fCurAddSpeed = m_fAddSpeed+m_fExtraSpeed;

  00018	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  00020	f3 0f 10 8e 70
	09 00 00	 movss	 xmm1, DWORD PTR [esi+2416]

; 70   : 	m_pOwner->SetExtraMoveSpeed( m_fCurAddSpeed, m_fDashSpeedRate );

  00028	51		 push	 ecx
  00029	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002f	51		 push	 ecx
  00030	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00036	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0003a	f3 0f 10 8e 74
	09 00 00	 movss	 xmm1, DWORD PTR [esi+2420]
  00042	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00046	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0004c	f3 0f 11 86 6c
	09 00 00	 movss	 DWORD PTR [esi+2412], xmm0
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	e8 00 00 00 00	 call	 ?SetExtraMoveSpeed@ioBaseChar@@QAEXMM@Z ; ioBaseChar::SetExtraMoveSpeed

; 71   : 	return true;

  0005e	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  00060	5e		 pop	 esi

; 72   : }

  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioSpeedUpDownBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioSpeedUpDownBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?CheckRefreshExtendDashState@ioBaseChar@@QAEXXZ:PROC ; ioBaseChar::CheckRefreshExtendDashState
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	?RemoveExtraMoveSpeed@ioBaseChar@@QAEXM@Z:PROC	; ioBaseChar::RemoveExtraMoveSpeed
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioSpeedUpDownBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioSpeedUpDownBuff@@UAEXXZ PROC			; ioSpeedUpDownBuff::EndBuff, COMDAT
; _this$ = ecx

; 106  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 107  : 	m_pOwner->RemoveExtraMoveSpeed( m_fCurAddSpeed );

  00004	f3 0f 10 87 6c
	09 00 00	 movss	 xmm0, DWORD PTR [edi+2412]
  0000c	51		 push	 ecx
  0000d	8b 8f 74 02 00
	00		 mov	 ecx, DWORD PTR [edi+628]
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	e8 00 00 00 00	 call	 ?RemoveExtraMoveSpeed@ioBaseChar@@QAEXM@Z ; ioBaseChar::RemoveExtraMoveSpeed

; 108  : 
; 109  : 	if( m_pOwner->GetState() == CS_DELAY )

  0001d	8b 8f 74 02 00
	00		 mov	 ecx, DWORD PTR [edi+628]
  00023	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00029	84 c0		 test	 al, al
  0002b	75 0c		 jne	 SHORT $LN7@EndBuff

; 110  : 	{
; 111  : 		m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  0002d	0f b6 87 f9 08
	00 00		 movzx	 eax, BYTE PTR [edi+2297]
  00034	50		 push	 eax
  00035	6a 00		 push	 0
  00037	eb 12		 jmp	 SHORT $LN20@EndBuff
$LN7@EndBuff:

; 112  : 	}
; 113  : 	else if( m_pOwner->GetState() == CS_RUN )

  00039	33 d2		 xor	 edx, edx
  0003b	42		 inc	 edx
  0003c	3a c2		 cmp	 al, dl
  0003e	75 04		 jne	 SHORT $LN5@EndBuff

; 114  : 	{
; 115  : 		m_pOwner->SetState( CS_RUN );

  00040	52		 push	 edx
  00041	52		 push	 edx
  00042	eb 07		 jmp	 SHORT $LN20@EndBuff
$LN5@EndBuff:

; 116  : 	}
; 117  : 	else if( m_pOwner->GetState() == CS_DASH )

  00044	3c 02		 cmp	 al, 2
  00046	75 0a		 jne	 SHORT $LN3@EndBuff

; 118  : 	{
; 119  : 		m_pOwner->SetState( CS_DASH );

  00048	52		 push	 edx
  00049	6a 02		 push	 2
$LN20@EndBuff:
  0004b	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
  00050	eb 09		 jmp	 SHORT $LN1@EndBuff
$LN3@EndBuff:

; 120  : 	}
; 121  : 	else if( m_pOwner->GetState() == CS_EXTEND_DASH )

  00052	3c 03		 cmp	 al, 3
  00054	75 05		 jne	 SHORT $LN1@EndBuff

; 122  : 	{
; 123  : 		m_pOwner->CheckRefreshExtendDashState();

  00056	e8 00 00 00 00	 call	 ?CheckRefreshExtendDashState@ioBaseChar@@QAEXXZ ; ioBaseChar::CheckRefreshExtendDashState
$LN1@EndBuff:

; 124  : 	}
; 125  : 
; 126  : 	ioBuff::EndBuff();

  0005b	8b cf		 mov	 ecx, edi
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioSpeedUpDownBuff@@UAEXXZ ENDP			; ioSpeedUpDownBuff::EndBuff
_TEXT	ENDS
EXTRN	??6SP2Packet@@QAEAAV0@M@Z:PROC			; SP2Packet::operator<<
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
; Function compile flags: /Ogsp
;	COMDAT ?GetBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?GetBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioSpeedUpDownBuff::GetBuffInfo, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 131  : 	ioBuff::GetBuffInfo( rkPacket );

  00004	ff 75 08	 push	 DWORD PTR _rkPacket$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z ; ioBuff::GetBuffInfo

; 132  : 
; 133  : 	rkPacket << m_fExtraSpeed;

  0000e	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  00016	51		 push	 ecx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@M@Z ; SP2Packet::operator<<
  00024	5e		 pop	 esi

; 134  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioSpeedUpDownBuff::GetBuffInfo
_TEXT	ENDS
EXTRN	??5SP2Packet@@QAEAAV0@AAM@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?ApplyBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioSpeedUpDownBuff::ApplyBuffInfo, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  : 	rkPacket >> m_fExtraSpeed;

  00003	81 c1 78 09 00
	00		 add	 ecx, 2424		; 00000978H
  00009	51		 push	 ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0000d	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAM@Z ; SP2Packet::operator>>

; 139  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?ApplyBuffInfo@ioSpeedUpDownBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioSpeedUpDownBuff::ApplyBuffInfo
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioSpeedUpDownBuff@@IAEXXZ	; ioSpeedUpDownBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioSpeedUpDownBuff@@IAEXXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioSpeedUpDownBuff@@IAEXXZ PROC	; ioSpeedUpDownBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 142  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 143  : 	if( !m_pOwner ) return;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	33 d2		 xor	 edx, edx
  0000b	3b ca		 cmp	 ecx, edx
  0000d	74 57		 je	 SHORT $LN1@CheckOwner

; 144  : 
; 145  : 	CharState eState = m_pOwner->GetState();

  0000f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 146  : 
; 147  : 	if( m_bDisableDownState )

  00015	38 96 7c 09 00
	00		 cmp	 BYTE PTR [esi+2428], dl
  0001b	74 49		 je	 SHORT $LN1@CheckOwner

; 148  : 	{
; 149  : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001d	3c 17		 cmp	 al, 23			; 00000017H
  0001f	75 10		 jne	 SHORT $LN13@CheckOwner
  00021	38 91 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], dl
$LN29@CheckOwner:
  00027	74 3d		 je	 SHORT $LN1@CheckOwner
$LN28@CheckOwner:

; 150  : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
  0002c	e9 00 00 00 00	 jmp	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN13@CheckOwner:

; 151  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00031	3c 0c		 cmp	 al, 12			; 0000000cH
  00033	75 0b		 jne	 SHORT $LN11@CheckOwner
$LN31@CheckOwner:
  00035	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  0003a	84 c0		 test	 al, al
  0003c	75 28		 jne	 SHORT $LN1@CheckOwner

; 152  : 			SetReserveEndBuff();

  0003e	eb e9		 jmp	 SHORT $LN28@CheckOwner
$LN11@CheckOwner:

; 153  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00040	3c 31		 cmp	 al, 49			; 00000031H

; 154  : 			SetReserveEndBuff();

  00042	74 f1		 je	 SHORT $LN31@CheckOwner

; 155  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00044	3c 0f		 cmp	 al, 15			; 0000000fH
  00046	75 0a		 jne	 SHORT $LN7@CheckOwner
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0004e	84 c0		 test	 al, al

; 156  : 			SetReserveEndBuff();

  00050	eb d5		 jmp	 SHORT $LN29@CheckOwner
$LN7@CheckOwner:

; 157  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00052	3c 26		 cmp	 al, 38			; 00000026H
  00054	75 08		 jne	 SHORT $LN5@CheckOwner
$LN30@CheckOwner:
  00056	38 91 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], dl

; 158  : 			SetReserveEndBuff();

  0005c	eb c9		 jmp	 SHORT $LN29@CheckOwner
$LN5@CheckOwner:

; 159  : 		else if( eState == CS_DROP_ZONE_DOWN )

  0005e	3c 10		 cmp	 al, 16			; 00000010H

; 160  : 			SetReserveEndBuff();

  00060	74 c7		 je	 SHORT $LN28@CheckOwner

; 161  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00062	3c 3b		 cmp	 al, 59			; 0000003bH

; 162  : 			SetReserveEndBuff();

  00064	74 f0		 je	 SHORT $LN30@CheckOwner
$LN1@CheckOwner:
  00066	5e		 pop	 esi

; 163  : 	}
; 164  : }

  00067	c3		 ret	 0
?CheckOwnerStateCheck@ioSpeedUpDownBuff@@IAEXXZ ENDP	; ioSpeedUpDownBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioSpeedUpDownBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioSpeedUpDownBuff@@UAEPAXI@Z PROC			; ioSpeedUpDownBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSpeedUpDownBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioSpeedUpDownBuff@@UAEPAXI@Z ENDP			; ioSpeedUpDownBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ; ioINILoader::LoadFloat_e<16>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<16>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadFloat_
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadFloat_
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadFloat_
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadFloat_
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadFloat_
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadFloat_
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadFloat_
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadFloat_
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadFloat_:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadFloat_:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadFloat_
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadFloat_:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001eb	51		 push	 ecx
  001ec	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	50		 push	 eax
  001f5	8b ce		 mov	 ecx, esi
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	5e		 pop	 esi
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	c9		 leave
  00209	c2 08 00	 ret	 8
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0CB@@ioINILoader@@QAE_NAAY0CB@$$CBD_N@Z ; ioINILoader::LoadBool_e<33>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0CB@@ioINILoader@@QAE_NAAY0CB@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -44						; size = 33
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0CB@@ioINILoader@@QAE_NAAY0CB@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<33>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 27 03 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 10 03 00
	00		 je	 $LN95@LoadBool_e@2
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 f8 02 00
	00		 je	 $LN94@LoadBool_e@2
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 d6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 e0 02 00
	00		 je	 $LN93@LoadBool_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 d7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 c9 02 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 d8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b3 02 00
	00		 je	 $LN91@LoadBool_e@2
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 d9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 9e 02 00
	00		 je	 $LN90@LoadBool_e@2
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 da	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 88 02 00
	00		 je	 $LN89@LoadBool_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 db	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 71 02 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 dc	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 5b 02 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 dd	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 46 02 00
	00		 je	 $LN86@LoadBool_e@2
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 de	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 30 02 00
	00		 je	 $LN85@LoadBool_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 df	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 19 02 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 03 02 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 ee 01 00
	00		 je	 $LN82@LoadBool_e@2
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 e2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 d8 01 00
	00		 je	 $LN81@LoadBool_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c1 01 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e4	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 ab 01 00
	00		 je	 $LN79@LoadBool_e@2
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 96 01 00
	00		 je	 $LN78@LoadBool_e@2
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 e6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 80 01 00
	00		 je	 $LN77@LoadBool_e@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 e7	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 69 01 00
	00		 je	 $LN76@LoadBool_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 e8	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 53 01 00
	00		 je	 $LN75@LoadBool_e@2
  00180	32 d1		 xor	 dl, cl
  00182	88 55 e9	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 3e 01 00
	00		 je	 $LN74@LoadBool_e@2
  00190	32 d3		 xor	 dl, bl
  00192	88 55 ea	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 28 01 00
	00		 je	 $LN73@LoadBool_e@2
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 0e 01 00
	00		 je	 $LN72@LoadBool_e@2
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 f5 00 00
	00		 je	 $LN71@LoadBool_e@2
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 dd 00 00
	00		 je	 $LN70@LoadBool_e@2
  001d2	32 d3		 xor	 dl, bl
  001d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+26], dl
  001d7	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001da	84 d2		 test	 dl, dl
  001dc	0f 84 c4 00 00
	00		 je	 $LN69@LoadBool_e@2
  001e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	0f 84 aa 00 00
	00		 je	 $LN68@LoadBool_e@2
  001f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+28], dl
  001f9	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001fc	84 d2		 test	 dl, dl
  001fe	0f 84 91 00 00
	00		 je	 $LN67@LoadBool_e@2
  00204	32 d1		 xor	 dl, cl
  00206	88 55 f1	 mov	 BYTE PTR __k$[ebp+29], dl
  00209	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  0020c	84 d2		 test	 dl, dl
  0020e	74 7d		 je	 SHORT $LN66@LoadBool_e@2
  00210	32 d3		 xor	 dl, bl
  00212	88 55 f2	 mov	 BYTE PTR __k$[ebp+30], dl
  00215	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  00218	84 d2		 test	 dl, dl
  0021a	74 68		 je	 SHORT $LN65@LoadBool_e@2
  0021c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0021f	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  00223	88 55 f3	 mov	 BYTE PTR __k$[ebp+31], dl
  00226	0f 84 20 01 00
	00		 je	 $LN1@LoadBool_e@2
  0022c	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  0022f	84 d2		 test	 dl, dl
  00231	74 49		 je	 SHORT $LN63@LoadBool_e@2
  00233	32 d1		 xor	 dl, cl
  00235	88 55 f5	 mov	 BYTE PTR __k$[ebp+33], dl
  00238	8a 50 22	 mov	 dl, BYTE PTR [eax+34]
  0023b	84 d2		 test	 dl, dl
  0023d	74 35		 je	 SHORT $LN62@LoadBool_e@2
  0023f	32 d3		 xor	 dl, bl
  00241	88 55 f6	 mov	 BYTE PTR __k$[ebp+34], dl
  00244	8a 50 23	 mov	 dl, BYTE PTR [eax+35]
  00247	84 d2		 test	 dl, dl
  00249	74 20		 je	 SHORT $LN61@LoadBool_e@2
  0024b	8a 40 24	 mov	 al, BYTE PTR [eax+36]
  0024e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00251	88 55 f7	 mov	 BYTE PTR __k$[ebp+35], dl
  00254	84 c0		 test	 al, al
  00256	74 0a		 je	 SHORT $LN60@LoadBool_e@2
  00258	34 ed		 xor	 al, -19			; ffffffedH
  0025a	88 45 f8	 mov	 BYTE PTR __k$[ebp+36], al
  0025d	e9 ea 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN60@LoadBool_e@2:
  00262	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+36], -19 ; ffffffedH
  00266	e9 e1 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN61@LoadBool_e@2:
  0026b	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+35], -22 ; ffffffeaH
  0026f	e9 d8 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN62@LoadBool_e@2:
  00274	88 5d f6	 mov	 BYTE PTR __k$[ebp+34], bl
  00277	e9 d0 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN63@LoadBool_e@2:
  0027c	88 4d f5	 mov	 BYTE PTR __k$[ebp+33], cl
  0027f	e9 c8 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN65@LoadBool_e@2:
  00284	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  00288	e9 bf 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN66@LoadBool_e@2:
  0028d	88 5d f2	 mov	 BYTE PTR __k$[ebp+30], bl
  00290	e9 b7 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN67@LoadBool_e@2:
  00295	88 4d f1	 mov	 BYTE PTR __k$[ebp+29], cl
  00298	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN68@LoadBool_e@2:
  0029d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  002a1	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN69@LoadBool_e@2:
  002a6	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  002aa	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN70@LoadBool_e@2:
  002af	88 5d ee	 mov	 BYTE PTR __k$[ebp+26], bl
  002b2	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN71@LoadBool_e@2:
  002b7	88 4d ed	 mov	 BYTE PTR __k$[ebp+25], cl
  002ba	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN72@LoadBool_e@2:
  002bf	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002c3	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN73@LoadBool_e@2:
  002c8	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  002cc	eb 7e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  002ce	88 5d ea	 mov	 BYTE PTR __k$[ebp+22], bl
  002d1	eb 79		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  002d3	88 4d e9	 mov	 BYTE PTR __k$[ebp+21], cl
  002d6	eb 74		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  002d8	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002dc	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  002de	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  002e2	eb 68		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  002e4	88 5d e6	 mov	 BYTE PTR __k$[ebp+18], bl
  002e7	eb 63		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  002e9	88 4d e5	 mov	 BYTE PTR __k$[ebp+17], cl
  002ec	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  002ee	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002f2	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  002f4	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  002f8	eb 52		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  002fa	88 5d e2	 mov	 BYTE PTR __k$[ebp+14], bl
  002fd	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  002ff	88 4d e1	 mov	 BYTE PTR __k$[ebp+13], cl
  00302	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  00304	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00308	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  0030a	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0030e	eb 3c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  00310	88 5d de	 mov	 BYTE PTR __k$[ebp+10], bl
  00313	eb 37		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  00315	88 4d dd	 mov	 BYTE PTR __k$[ebp+9], cl
  00318	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  0031a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0031e	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  00320	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00324	eb 26		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  00326	88 5d da	 mov	 BYTE PTR __k$[ebp+6], bl
  00329	eb 21		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  0032b	88 4d d9	 mov	 BYTE PTR __k$[ebp+5], cl
  0032e	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  00330	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00334	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  00336	c6 45 d7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0033a	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  0033c	c6 45 d6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00340	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  00342	c6 45 d5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00346	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  00348	c6 45 d4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  0034c	6a 08		 push	 8
  0034e	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  00351	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+32], 0
  00355	5a		 pop	 edx
$LL104@LoadBool_e@2:
  00356	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0035c	83 c0 04	 add	 eax, 4
  0035f	4a		 dec	 edx
  00360	75 f4		 jne	 SHORT $LL104@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00362	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00365	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  00368	50		 push	 eax
  00369	8b ce		 mov	 ecx, esi
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00371	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00374	5e		 pop	 esi
  00375	33 cd		 xor	 ecx, ebp
  00377	5b		 pop	 ebx
  00378	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0037d	c9		 leave
  0037e	c2 08 00	 ret	 8
??$LoadBool_e@$0CB@@ioINILoader@@QAE_NAAY0CB@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<33>
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iospeedupdownbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioSpeedUpDownBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv3845 = -48						; size = 4
__k$525471 = -44					; size = 33
__k$525346 = -32					; size = 19
__k$525236 = -28					; size = 16
__k$525111 = -28					; size = 16
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioSpeedUpDownBuff@@UAEXAAVioINILoader@@@Z PROC ; ioSpeedUpDownBuff::LoadProperty, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 33   : 	ioBuff::LoadProperty( rkLoader );

  00016	53		 push	 ebx
  00017	8b f1		 mov	 esi, ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 34   : 
; 35   : 	m_fAddSpeed = rkLoader.LoadFloat_e( "speed_add_value", 0.0f );

  0001e	6a 03		 push	 3
  00020	c7 45 e4 9e 9c
	8e 8f		 mov	 DWORD PTR __k$525111[ebp], -1886479202 ; 8f8e9c9eH
  00027	c7 45 e8 89 b3
	8a 8e		 mov	 DWORD PTR __k$525111[ebp+4], -1903512695 ; 8e8ab389H
  0002e	c7 45 ec 89 b3
	9d 8b		 mov	 DWORD PTR __k$525111[ebp+8], -1952599159 ; 8b9db389H
  00035	8d 45 e4	 lea	 eax, DWORD PTR __k$525111[ebp]
  00038	c7 45 f0 81 99
	8e 00		 mov	 DWORD PTR __k$525111[ebp+12], 9345409 ; 008e9981H
  0003f	59		 pop	 ecx
$LL106@LoadProper:
  00040	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00046	83 c0 04	 add	 eax, 4
  00049	49		 dec	 ecx
  0004a	75 f4		 jne	 SHORT $LL106@LoadProper
  0004c	6a 0c		 push	 12			; 0000000cH
  0004e	5f		 pop	 edi
$LL103@LoadProper:
  0004f	8b c7		 mov	 eax, edi
  00051	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00056	79 05		 jns	 SHORT $LN445@LoadProper
  00058	48		 dec	 eax
  00059	83 c8 fc	 or	 eax, -4			; fffffffcH
  0005c	40		 inc	 eax
$LN445@LoadProper:
  0005d	b1 ed		 mov	 cl, -19			; ffffffedH
  0005f	2a c8		 sub	 cl, al
  00061	30 4c 3d e4	 xor	 BYTE PTR __k$525111[ebp+edi], cl
  00065	47		 inc	 edi
  00066	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00069	7c e4		 jl	 SHORT $LL103@LoadProper
  0006b	0f 57 c0	 xorps	 xmm0, xmm0
  0006e	51		 push	 ecx
  0006f	8d 45 e4	 lea	 eax, DWORD PTR __k$525111[ebp]
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	50		 push	 eax
  00078	8b cb		 mov	 ecx, ebx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00080	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]

; 36   : 	m_fDashSpeedRate = rkLoader.LoadFloat_e( "speed_dash_rate", FLOAT1 );

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	6a 03		 push	 3
  0008d	8b f8		 mov	 edi, eax
  0008f	c7 45 e4 9e 9c
	8e 8f		 mov	 DWORD PTR __k$525236[ebp], -1886479202 ; 8f8e9c9eH
  00096	c7 45 e8 89 b3
	8f 8b		 mov	 DWORD PTR __k$525236[ebp+4], -1953516663 ; 8b8fb389H
  0009d	c7 45 ec 9e 84
	b4 98		 mov	 DWORD PTR __k$525236[ebp+8], -1733000034 ; 98b4849eH
  000a4	8d 4d e4	 lea	 ecx, DWORD PTR __k$525236[ebp]
  000a7	c7 45 f0 8c 98
	8e 00		 mov	 DWORD PTR __k$525236[ebp+12], 9345164 ; 008e988cH
  000ae	58		 pop	 eax
$LL214@LoadProper:
  000af	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  000b5	83 c1 04	 add	 ecx, 4
  000b8	48		 dec	 eax
  000b9	75 f4		 jne	 SHORT $LL214@LoadProper
  000bb	6a 0c		 push	 12			; 0000000cH
  000bd	58		 pop	 eax
$LL211@LoadProper:
  000be	8b c8		 mov	 ecx, eax
  000c0	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000c6	79 05		 jns	 SHORT $LN446@LoadProper
  000c8	49		 dec	 ecx
  000c9	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000cc	41		 inc	 ecx
$LN446@LoadProper:
  000cd	b2 ed		 mov	 dl, -19			; ffffffedH
  000cf	2a d1		 sub	 dl, cl
  000d1	30 54 05 e4	 xor	 BYTE PTR __k$525236[ebp+eax], dl
  000d5	40		 inc	 eax
  000d6	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000d9	7c e3		 jl	 SHORT $LL211@LoadProper
  000db	89 7d d0	 mov	 DWORD PTR tv3845[ebp], edi
  000de	db 45 d0	 fild	 DWORD PTR tv3845[ebp]
  000e1	85 ff		 test	 edi, edi
  000e3	79 06		 jns	 SHORT $LN447@LoadProper
  000e5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN447@LoadProper:
  000eb	51		 push	 ecx
  000ec	8d 45 e4	 lea	 eax, DWORD PTR __k$525236[ebp]
  000ef	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f2	50		 push	 eax
  000f3	8b cb		 mov	 ecx, ebx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000fb	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]
  00101	6a 04		 push	 4

; 37   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  00103	c7 45 e0 89 85
	98 8b		 mov	 DWORD PTR __k$525346[ebp], -1952938615 ; 8b988589H
  0010a	c7 45 e4 8f 80
	8e b5		 mov	 DWORD PTR __k$525346[ebp+4], -1248952177 ; b58e808fH
  00111	c7 45 e8 89 83
	9c 84		 mov	 DWORD PTR __k$525346[ebp+8], -2070117495 ; 849c8389H
  00118	c7 45 ec b2 9f
	9f 8b		 mov	 DWORD PTR __k$525346[ebp+12], -1952473166 ; 8b9f9fb2H
  0011f	66 c7 45 f0 99
	89		 mov	 WORD PTR __k$525346[ebp+16], 35225 ; 00008999H
  00125	8d 45 e0	 lea	 eax, DWORD PTR __k$525346[ebp]
  00128	c6 45 f2 00	 mov	 BYTE PTR __k$525346[ebp+18], 0
  0012c	59		 pop	 ecx
$LL320@LoadProper:
  0012d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00133	83 c0 04	 add	 eax, 4
  00136	49		 dec	 ecx
  00137	75 f4		 jne	 SHORT $LL320@LoadProper
  00139	6a 10		 push	 16			; 00000010H
  0013b	5f		 pop	 edi
$LL317@LoadProper:
  0013c	8b c7		 mov	 eax, edi
  0013e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00143	79 05		 jns	 SHORT $LN448@LoadProper
  00145	48		 dec	 eax
  00146	83 c8 fc	 or	 eax, -4			; fffffffcH
  00149	40		 inc	 eax
$LN448@LoadProper:
  0014a	b1 ed		 mov	 cl, -19			; ffffffedH
  0014c	2a c8		 sub	 cl, al
  0014e	30 4c 3d e0	 xor	 BYTE PTR __k$525346[ebp+edi], cl
  00152	47		 inc	 edi
  00153	83 ff 12	 cmp	 edi, 18			; 00000012H
  00156	7c e4		 jl	 SHORT $LL317@LoadProper
  00158	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  0015e	6a 00		 push	 0
  00160	8d 45 e0	 lea	 eax, DWORD PTR __k$525346[ebp]
  00163	50		 push	 eax
  00164	8b cb		 mov	 ecx, ebx
  00166	ff d7		 call	 edi
  00168	6a 08		 push	 8
  0016a	88 86 7c 09 00
	00		 mov	 BYTE PTR [esi+2428], al

; 38   : 	m_bCheckOwnerDropZoneDownState = rkLoader.LoadBool_e( "check_owner_drop_zone_down_state", false );

  00170	c7 45 d4 8e 84
	8e 89		 mov	 DWORD PTR __k$525471[ebp], -1987148658 ; 898e848eH
  00177	c7 45 d8 86 b3
	84 9d		 mov	 DWORD PTR __k$525471[ebp+4], -1652247674 ; 9d84b386H
  0017e	c7 45 dc 83 89
	99 b5		 mov	 DWORD PTR __k$525471[ebp+8], -1248228989 ; b5998983H
  00185	c7 45 e0 89 9e
	84 9a		 mov	 DWORD PTR __k$525471[ebp+12], -1702584695 ; 9a849e89H
  0018c	c7 45 e4 b2 96
	84 84		 mov	 DWORD PTR __k$525471[ebp+16], -2071685454 ; 848496b2H
  00193	c7 45 e8 88 b3
	8f 85		 mov	 DWORD PTR __k$525471[ebp+20], -2054179960 ; 858fb388H
  0019a	c7 45 ec 9a 82
	b4 99		 mov	 DWORD PTR __k$525471[ebp+24], -1716223334 ; 99b4829aH
  001a1	c7 45 f0 99 8d
	9f 8f		 mov	 DWORD PTR __k$525471[ebp+28], -1885368935 ; 8f9f8d99H
  001a8	8d 45 d4	 lea	 eax, DWORD PTR __k$525471[ebp]
  001ab	c6 45 f4 00	 mov	 BYTE PTR __k$525471[ebp+32], 0
  001af	59		 pop	 ecx
$LL426@LoadProper:
  001b0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b6	83 c0 04	 add	 eax, 4
  001b9	49		 dec	 ecx
  001ba	75 f4		 jne	 SHORT $LL426@LoadProper
  001bc	51		 push	 ecx
  001bd	8d 45 d4	 lea	 eax, DWORD PTR __k$525471[ebp]
  001c0	50		 push	 eax
  001c1	8b cb		 mov	 ecx, ebx
  001c3	ff d7		 call	 edi

; 39   : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	88 86 7d 09 00
	00		 mov	 BYTE PTR [esi+2429], al
  001cf	5e		 pop	 esi
  001d0	33 cd		 xor	 ecx, ebp
  001d2	5b		 pop	 ebx
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	c9		 leave
  001d9	c2 04 00	 ret	 4
?LoadProperty@ioSpeedUpDownBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioSpeedUpDownBuff::LoadProperty
_TEXT	ENDS
PUBLIC	?ProcessDropZoneCheckBuff@ioSpeedUpDownBuff@@IAEXMPAVioBaseChar@@@Z ; ioSpeedUpDownBuff::ProcessDropZoneCheckBuff
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
; Function compile flags: /Ogsp
;	COMDAT ?ProcessDropZoneCheckBuff@ioSpeedUpDownBuff@@IAEXMPAVioBaseChar@@@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_value$525598 = 12					; size = 4
_pOwner$ = 12						; size = 4
?ProcessDropZoneCheckBuff@ioSpeedUpDownBuff@@IAEXMPAVioBaseChar@@@Z PROC ; ioSpeedUpDownBuff::ProcessDropZoneCheckBuff, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 168  : 	if ( !pOwner )

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 46		 je	 SHORT $LN1@ProcessDro

; 169  : 		return;
; 170  : 
; 171  : 	CheckCallingProcess();

  0000e	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 172  : 
; 173  : 	if( GetBuffDuration() == 0 )

  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0001a	85 c0		 test	 eax, eax
  0001c	74 36		 je	 SHORT $LN1@ProcessDro

; 174  : 	{		
; 175  : 		return;
; 176  : 	}
; 177  : 
; 178  : 	if( m_dwBuffEndTime <= FRAMEGETTIME() && pOwner->GetState() != CS_DROP_ZONE_DOWN )

  0001e	57		 push	 edi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00025	8b c8		 mov	 ecx, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0002d	8b f8		 mov	 edi, eax
  0002f	8d 45 0c	 lea	 eax, DWORD PTR _value$525598[ebp]
  00032	50		 push	 eax
  00033	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00039	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0003e	39 7d 0c	 cmp	 DWORD PTR _value$525598[ebp], edi
  00041	5f		 pop	 edi
  00042	77 10		 ja	 SHORT $LN1@ProcessDro
  00044	80 bb 10 03 00
	00 10		 cmp	 BYTE PTR [ebx+784], 16	; 00000010H
  0004b	74 07		 je	 SHORT $LN1@ProcessDro

; 179  : 	{		
; 180  : 		SetReserveEndBuff();

  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessDro:
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 181  : 		return;
; 182  : 	}
; 183  : }

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?ProcessDropZoneCheckBuff@ioSpeedUpDownBuff@@IAEXMPAVioBaseChar@@@Z ENDP ; ioSpeedUpDownBuff::ProcessDropZoneCheckBuff
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioSpeedUpDownBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioSpeedUpDownBuff@@UAEXM@Z PROC		; ioSpeedUpDownBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 76   : 	CheckOwnerStateCheck();

  00006	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioSpeedUpDownBuff@@IAEXXZ ; ioSpeedUpDownBuff::CheckOwnerStateCheck

; 77   : 
; 78   : 	switch( m_iOperationType )

  0000b	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00011	83 e8 00	 sub	 eax, 0
  00014	74 68		 je	 SHORT $LN1@ProcessBuf
  00016	48		 dec	 eax
  00017	74 06		 je	 SHORT $LN4@ProcessBuf
  00019	48		 dec	 eax
  0001a	74 20		 je	 SHORT $LN6@ProcessBuf
  0001c	48		 dec	 eax
  0001d	75 66		 jne	 SHORT $LN7@ProcessBuf
$LN4@ProcessBuf:

; 89   : 	case OT_DELAY:
; 90   : 	case OT_ACTIVE:
; 91   : 		{
; 92   : 			if ( !m_bCheckOwnerDropZoneDownState )

  0001f	80 be 7d 09 00
	00 00		 cmp	 BYTE PTR [esi+2429], 0
  00026	75 3a		 jne	 SHORT $LN3@ProcessBuf

; 93   : 				ioBuff::ProcessBuff( fTimePerSec );

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0002d	51		 push	 ecx
  0002e	8b ce		 mov	 ecx, esi
  00030	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 94   : 			else

  0003a	eb 49		 jmp	 SHORT $LN7@ProcessBuf
$LN6@ProcessBuf:

; 79   : 	{
; 80   : 	case OT_SWITCH:
; 81   : 		if( !CheckSwitchType( fTimePerSec ) )

  0003c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00041	51		 push	 ecx
  00042	8b ce		 mov	 ecx, esi
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 82   : 		{
; 83   : 			SetReserveEndBuff();

  0004e	8b ce		 mov	 ecx, esi
  00050	84 c0		 test	 al, al
  00052	75 07		 jne	 SHORT $LN5@ProcessBuf
  00054	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 84   : 			return;

  00059	eb 2a		 jmp	 SHORT $LN7@ProcessBuf
$LN5@ProcessBuf:

; 85   : 		}
; 86   : 
; 87   : 		CheckCallingProcess();

  0005b	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 88   : 		break;

  00060	eb 23		 jmp	 SHORT $LN7@ProcessBuf
$LN3@ProcessBuf:

; 95   : 				ProcessDropZoneCheckBuff( fTimePerSec, GetOwner() );

  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00069	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	8b ce		 mov	 ecx, esi
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	e8 00 00 00 00	 call	 ?ProcessDropZoneCheckBuff@ioSpeedUpDownBuff@@IAEXMPAVioBaseChar@@@Z ; ioSpeedUpDownBuff::ProcessDropZoneCheckBuff

; 96   : 		}
; 97   : 		
; 98   : 		break;

  0007c	eb 07		 jmp	 SHORT $LN7@ProcessBuf
$LN1@ProcessBuf:

; 99   : 	case OT_PASSIVE:
; 100  : 		CheckCallingAreaWeapon();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN7@ProcessBuf:
  00085	5e		 pop	 esi

; 101  : 		break;
; 102  : 	}
; 103  : }

  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?ProcessBuff@ioSpeedUpDownBuff@@UAEXM@Z ENDP		; ioSpeedUpDownBuff::ProcessBuff
_TEXT	ENDS
END
