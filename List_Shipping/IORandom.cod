; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\IORandom.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7IORandom@@6B@				; IORandom::`vftable'
PUBLIC	??0IORandom@@QAE@XZ				; IORandom::IORandom
PUBLIC	??_R4IORandom@@6B@				; IORandom::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVIORandom@@@8				; IORandom `RTTI Type Descriptor'
PUBLIC	??_R3IORandom@@8				; IORandom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IORandom@@8				; IORandom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IORandom@@8			; IORandom::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EIORandom@@UAEPAXI@Z:PROC			; IORandom::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@IORandom@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iorandom.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@IORandom@@8 DD FLAT:??_R0?AVIORandom@@@8	; IORandom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IORandom@@8
rdata$r	ENDS
;	COMDAT ??_R2IORandom@@8
rdata$r	SEGMENT
??_R2IORandom@@8 DD FLAT:??_R1A@?0A@EA@IORandom@@8	; IORandom::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IORandom@@8
rdata$r	SEGMENT
??_R3IORandom@@8 DD 00H					; IORandom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IORandom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIORandom@@@8
_DATA	SEGMENT
??_R0?AVIORandom@@@8 DD FLAT:??_7type_info@@6B@		; IORandom `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIORandom@@', 00H
_DATA	ENDS
;	COMDAT ??_R4IORandom@@6B@
rdata$r	SEGMENT
??_R4IORandom@@6B@ DD 00H				; IORandom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIORandom@@@8
	DD	FLAT:??_R3IORandom@@8
rdata$r	ENDS
;	COMDAT ??_7IORandom@@6B@
CONST	SEGMENT
??_7IORandom@@6B@ DD FLAT:??_R4IORandom@@6B@		; IORandom::`vftable'
	DD	FLAT:??_EIORandom@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0IORandom@@QAE@XZ
_TEXT	SEGMENT
??0IORandom@@QAE@XZ PROC				; IORandom::IORandom, COMDAT
; _this$ = ecx

; 13   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IORandom@@6B@

; 14   : 	m_rseed = 1;

  00008	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 15   : 	m_mti   = CMATH_N + 1;

  0000f	c7 80 c8 09 00
	00 71 02 00 00	 mov	 DWORD PTR [eax+2504], 625 ; 00000271H

; 16   : }

  00019	c3		 ret	 0
??0IORandom@@QAE@XZ ENDP				; IORandom::IORandom
_TEXT	ENDS
PUBLIC	??1IORandom@@UAE@XZ				; IORandom::~IORandom
; Function compile flags: /Ogsp
;	COMDAT ??1IORandom@@UAE@XZ
_TEXT	SEGMENT
??1IORandom@@UAE@XZ PROC				; IORandom::~IORandom, COMDAT
; _this$ = ecx

; 19   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IORandom@@6B@

; 20   : 
; 21   : }

  00006	c3		 ret	 0
??1IORandom@@UAE@XZ ENDP				; IORandom::~IORandom
_TEXT	ENDS
PUBLIC	?SetRandomSeed@IORandom@@QAEXI@Z		; IORandom::SetRandomSeed
; Function compile flags: /Ogsp
;	COMDAT ?SetRandomSeed@IORandom@@QAEXI@Z
_TEXT	SEGMENT
_seed$ = 8						; size = 4
?SetRandomSeed@IORandom@@QAEXI@Z PROC			; IORandom::SetRandomSeed, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 74   : 	m_mt[0] = seed & 0xffffffff;

  00004	8b 75 08	 mov	 esi, DWORD PTR _seed$[ebp]
  00007	57		 push	 edi
  00008	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 75   : 	for(m_mti = 1;m_mti < CMATH_N;m_mti++)

  0000b	c7 81 c8 09 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+2504], 1
$LL3@SetRandomS:

; 76   : 		m_mt[m_mti] = (69069 * m_mt[m_mti-1]) & 0xffffffff;

  00015	8b 91 c8 09 00
	00		 mov	 edx, DWORD PTR [ecx+2504]
  0001b	8b 7c 91 04	 mov	 edi, DWORD PTR [ecx+edx*4+4]
  0001f	69 ff cd 0d 01
	00		 imul	 edi, 69069		; 00010dcdH
  00025	89 7c 91 08	 mov	 DWORD PTR [ecx+edx*4+8], edi
  00029	ff 81 c8 09 00
	00		 inc	 DWORD PTR [ecx+2504]
  0002f	81 b9 c8 09 00
	00 70 02 00 00	 cmp	 DWORD PTR [ecx+2504], 624 ; 00000270H
  00039	7c da		 jl	 SHORT $LL3@SetRandomS

; 77   : 
; 78   : 	m_rseed = seed;

  0003b	5f		 pop	 edi
  0003c	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  0003f	5e		 pop	 esi

; 79   : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?SetRandomSeed@IORandom@@QAEXI@Z ENDP			; IORandom::SetRandomSeed
_TEXT	ENDS
PUBLIC	?GetRandomSeed@IORandom@@QAEIXZ			; IORandom::GetRandomSeed
; Function compile flags: /Ogsp
;	COMDAT ?GetRandomSeed@IORandom@@QAEIXZ
_TEXT	SEGMENT
?GetRandomSeed@IORandom@@QAEIXZ PROC			; IORandom::GetRandomSeed, COMDAT
; _this$ = ecx

; 83   : 	return m_rseed;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 84   : }

  00003	c3		 ret	 0
?GetRandomSeed@IORandom@@QAEIXZ ENDP			; IORandom::GetRandomSeed
_TEXT	ENDS
PUBLIC	?Randomize@IORandom@@QAEXXZ			; IORandom::Randomize
EXTRN	__imp_?GetTotalSec@ioFrameTimer@@QAEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Randomize@IORandom@@QAEXXZ
_TEXT	SEGMENT
?Randomize@IORandom@@QAEXXZ PROC			; IORandom::Randomize, COMDAT
; _this$ = ecx

; 87   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 88   : 	SetRandomSeed( REALGETTIME() );

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00009	8b c8		 mov	 ecx, eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetTotalSec@ioFrameTimer@@QAEKXZ
  00011	50		 push	 eax
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?SetRandomSeed@IORandom@@QAEXI@Z ; IORandom::SetRandomSeed
  00019	5e		 pop	 esi

; 89   : }

  0001a	c3		 ret	 0
?Randomize@IORandom@@QAEXXZ ENDP			; IORandom::Randomize
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GIORandom@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GIORandom@@UAEPAXI@Z PROC				; IORandom::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7IORandom@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GIORandom@@UAEPAXI@Z ENDP				; IORandom::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Random@IORandom@@QAEII@Z			; IORandom::Random
;	COMDAT ?mag01@?1??Random@IORandom@@QAEII@Z@4PAKA
_DATA	SEGMENT
?mag01@?1??Random@IORandom@@QAEII@Z@4PAKA DD 00H	; `IORandom::Random'::`2'::mag01
	DD	09908b0dfH
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?Random@IORandom@@QAEII@Z
_TEXT	SEGMENT
tv634 = -4						; size = 4
tv195 = -4						; size = 4
_n$ = 8							; size = 4
?Random@IORandom@@QAEII@Z PROC				; IORandom::Random, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 32   : 	unsigned long y;
; 33   : 	static unsigned long mag01[2] = {0x0, CMATH_MATRIX_A};
; 34   : 
; 35   : 	if( n == 0 )

  00004	83 7d 08 00	 cmp	 DWORD PTR _n$[ebp], 0
  00008	75 07		 jne	 SHORT $LN9@Random

; 36   : 		return 0;

  0000a	33 c0		 xor	 eax, eax
  0000c	e9 f8 00 00 00	 jmp	 $LN10@Random
$LN9@Random:

; 37   : 
; 38   : 	if( m_mti >= CMATH_N )

  00011	8b 81 c8 09 00
	00		 mov	 eax, DWORD PTR [ecx+2504]
  00017	3d 70 02 00 00	 cmp	 eax, 624		; 00000270H
  0001c	0f 8c b5 00 00
	00		 jl	 $LN8@Random

; 39   : 	{
; 40   : 		int kk;
; 41   : 
; 42   : 		if( m_mti == CMATH_N+1 )

  00022	3d 71 02 00 00	 cmp	 eax, 625		; 00000271H
  00027	75 0a		 jne	 SHORT $LN7@Random

; 43   : 			SetRandomSeed( 4357 );

  00029	68 05 11 00 00	 push	 4357			; 00001105H
  0002e	e8 00 00 00 00	 call	 ?SetRandomSeed@IORandom@@QAEXI@Z ; IORandom::SetRandomSeed
$LN7@Random:

; 44   : 
; 45   : 		for(kk = 0;kk < CMATH_N - CMATH_M;kk++)

  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  00039	c7 45 fc e3 00
	00 00		 mov	 DWORD PTR tv195[ebp], 227 ; 000000e3H
  00040	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
$LL6@Random:

; 46   : 		{
; 47   : 			y = (m_mt[kk] & CMATH_UPPER_MASK) | (m_mt[kk+1] &CMATH_LOWER_MASK);

  00045	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00048	33 02		 xor	 eax, DWORD PTR [edx]
  0004a	23 c6		 and	 eax, esi
  0004c	33 02		 xor	 eax, DWORD PTR [edx]

; 48   : 			m_mt[kk] = m_mt[kk+CMATH_M] ^ (y >> 1) ^ mag01[y & 0x1];

  0004e	8b d8		 mov	 ebx, eax
  00050	d1 e8		 shr	 eax, 1
  00052	83 e3 01	 and	 ebx, 1
  00055	33 04 9d 00 00
	00 00		 xor	 eax, DWORD PTR ?mag01@?1??Random@IORandom@@QAEII@Z@4PAKA[ebx*4]
  0005c	33 82 34 06 00
	00		 xor	 eax, DWORD PTR [edx+1588]
  00062	89 02		 mov	 DWORD PTR [edx], eax
  00064	83 c2 04	 add	 edx, 4
  00067	ff 4d fc	 dec	 DWORD PTR tv195[ebp]
  0006a	75 d9		 jne	 SHORT $LL6@Random

; 49   : 		}
; 50   : 
; 51   : 		for(;kk < CMATH_N-1;kk++)

  0006c	8d 91 94 03 00
	00		 lea	 edx, DWORD PTR [ecx+916]
  00072	c7 45 fc 8c 01
	00 00		 mov	 DWORD PTR tv634[ebp], 396 ; 0000018cH
$LL3@Random:

; 52   : 		{
; 53   : 			y = (m_mt[kk] & CMATH_UPPER_MASK) | (m_mt[kk+1]&CMATH_LOWER_MASK);

  00079	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007c	33 02		 xor	 eax, DWORD PTR [edx]
  0007e	23 c6		 and	 eax, esi
  00080	33 02		 xor	 eax, DWORD PTR [edx]

; 54   : 			m_mt[kk] = m_mt[kk+(CMATH_M-CMATH_N)] ^ (y >> 1) ^ mag01[y & 0x1];

  00082	8b d8		 mov	 ebx, eax
  00084	d1 e8		 shr	 eax, 1
  00086	83 e3 01	 and	 ebx, 1
  00089	33 04 9d 00 00
	00 00		 xor	 eax, DWORD PTR ?mag01@?1??Random@IORandom@@QAEII@Z@4PAKA[ebx*4]
  00090	33 82 74 fc ff
	ff		 xor	 eax, DWORD PTR [edx-908]
  00096	89 02		 mov	 DWORD PTR [edx], eax
  00098	83 c2 04	 add	 edx, 4
  0009b	ff 4d fc	 dec	 DWORD PTR tv634[ebp]
  0009e	75 d9		 jne	 SHORT $LL3@Random

; 55   : 		}
; 56   : 
; 57   : 		y = (m_mt[CMATH_N-1] & CMATH_UPPER_MASK) | (m_mt[0] & CMATH_LOWER_MASK);

  000a0	8b 81 c4 09 00
	00		 mov	 eax, DWORD PTR [ecx+2500]
  000a6	33 41 08	 xor	 eax, DWORD PTR [ecx+8]
  000a9	5f		 pop	 edi
  000aa	23 c6		 and	 eax, esi
  000ac	33 81 c4 09 00
	00		 xor	 eax, DWORD PTR [ecx+2500]
  000b2	5e		 pop	 esi

; 58   : 		m_mt[CMATH_N-1] = m_mt[CMATH_M-1] ^ (y >> 1) ^ mag01[y & 0x1];

  000b3	8b d0		 mov	 edx, eax
  000b5	83 e2 01	 and	 edx, 1
  000b8	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?mag01@?1??Random@IORandom@@QAEII@Z@4PAKA[edx*4]
  000bf	33 91 38 06 00
	00		 xor	 edx, DWORD PTR [ecx+1592]
  000c5	d1 e8		 shr	 eax, 1
  000c7	33 d0		 xor	 edx, eax

; 59   : 
; 60   : 		m_mti = 0;

  000c9	83 a1 c8 09 00
	00 00		 and	 DWORD PTR [ecx+2504], 0
  000d0	89 91 c4 09 00
	00		 mov	 DWORD PTR [ecx+2500], edx
  000d6	5b		 pop	 ebx
$LN8@Random:

; 61   : 	}
; 62   : 
; 63   : 	y = m_mt[m_mti++];

  000d7	8b 81 c8 09 00
	00		 mov	 eax, DWORD PTR [ecx+2504]
  000dd	8b 54 81 08	 mov	 edx, DWORD PTR [ecx+eax*4+8]
  000e1	40		 inc	 eax
  000e2	89 81 c8 09 00
	00		 mov	 DWORD PTR [ecx+2504], eax

; 64   : 	y ^= CMATH_TEMPERING_SHIFT_U(y);

  000e8	8b c2		 mov	 eax, edx
  000ea	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  000ed	33 d0		 xor	 edx, eax

; 65   : 	y ^= CMATH_TEMPERING_SHIFT_S(y) & CMATH_TEMPERING_MASK_B;

  000ef	8b c2		 mov	 eax, edx
  000f1	c1 e8 07	 shr	 eax, 7
  000f4	25 80 56 2c 01	 and	 eax, 19682944		; 012c5680H
  000f9	33 d0		 xor	 edx, eax

; 66   : 	y ^= CMATH_TEMPERING_SHIFT_T(y) & CMATH_TEMPERING_MASK_C;
; 67   : 	y ^= CMATH_TEMPERING_SHIFT_L(y);

  000fb	8b c2		 mov	 eax, edx
  000fd	c1 e8 12	 shr	 eax, 18			; 00000012H
  00100	33 c2		 xor	 eax, edx

; 68   : 
; 69   : 	return y % n;

  00102	33 d2		 xor	 edx, edx
  00104	f7 75 08	 div	 DWORD PTR _n$[ebp]
  00107	8b c2		 mov	 eax, edx
$LN10@Random:

; 70   : }

  00109	c9		 leave
  0010a	c2 04 00	 ret	 4
?Random@IORandom@@QAEII@Z ENDP				; IORandom::Random
_TEXT	ENDS
PUBLIC	?Random@IORandom@@QAEIII@Z			; IORandom::Random
; Function compile flags: /Ogsp
;	COMDAT ?Random@IORandom@@QAEIII@Z
_TEXT	SEGMENT
_nMin$ = 8						; size = 4
_nMax$ = 12						; size = 4
?Random@IORandom@@QAEIII@Z PROC				; IORandom::Random, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	unsigned int nDiff = max(0, nMax - nMin );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _nMax$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR _nMin$[ebp]

; 26   : 	unsigned int nRnd = Random( nDiff );

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?Random@IORandom@@QAEII@Z ; IORandom::Random

; 27   : 	return nRnd + nMin;

  0000f	03 45 08	 add	 eax, DWORD PTR _nMin$[ebp]

; 28   : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?Random@IORandom@@QAEIII@Z ENDP				; IORandom::Random
_TEXT	ENDS
END
