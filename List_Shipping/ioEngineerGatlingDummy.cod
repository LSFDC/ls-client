; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioEngineerGatlingDummy.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	??_7ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@ ; ioEngineerGatlingDummy::`vftable'
PUBLIC	??_7ioEngineerGatlingDummy@@6BioPlayEntity@@@	; ioEngineerGatlingDummy::`vftable'
PUBLIC	??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioEngineerGatlingDummy::ioEngineerGatlingDummy
PUBLIC	??_R4ioEngineerGatlingDummy@@6BioPlayEntity@@@	; ioEngineerGatlingDummy::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioEngineerGatlingDummy@@@8		; ioEngineerGatlingDummy `RTTI Type Descriptor'
PUBLIC	??_R3ioEngineerGatlingDummy@@8			; ioEngineerGatlingDummy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEngineerGatlingDummy@@8			; ioEngineerGatlingDummy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEngineerGatlingDummy@@8		; ioEngineerGatlingDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioDummyChar@@8			; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioDummyChar@@@8				; ioDummyChar `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyChar@@8				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyChar@@8				; ioDummyChar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	??_R1BMI@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
PUBLIC	??_R0?AVioWorldEventReceiver@@@8		; ioWorldEventReceiver `RTTI Type Descriptor'
PUBLIC	??_R3ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?DontMoveEntityLevel@ioEngineerGatlingDummy@@UBEHXZ ; ioEngineerGatlingDummy::DontMoveEntityLevel
PUBLIC	?LoadProperty@ioEngineerGatlingDummy@@UAEXAAVioINILoader@@@Z ; ioEngineerGatlingDummy::LoadProperty
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
PUBLIC	?ProcessState@ioEngineerGatlingDummy@@MAEXMK@Z	; ioEngineerGatlingDummy::ProcessState
PUBLIC	?ProcessPos@ioEngineerGatlingDummy@@MAEXM@Z	; ioEngineerGatlingDummy::ProcessPos
PUBLIC	?ProcessDelayState@ioEngineerGatlingDummy@@MAEXM@Z ; ioEngineerGatlingDummy::ProcessDelayState
PUBLIC	?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ	; ioDummyChar::IsDummyCharMidSync
PUBLIC	??_R4ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@ ; ioEngineerGatlingDummy::`RTTI Complete Object Locator'
PUBLIC	??_EioEngineerGatlingDummy@@WBMI@AEPAXI@Z	; [thunk]:ioEngineerGatlingDummy::`vector deleting destructor'
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioDummyChar@@UAE@XZ:PROC			; ioDummyChar::~ioDummyChar
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioDummyChar::ioDummyChar
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z:PROC ; ioDummyChar::AddEntityEvent
EXTRN	??_EioEngineerGatlingDummy@@UAEPAXI@Z:PROC	; ioEngineerGatlingDummy::`vector deleting destructor'
EXTRN	?Update@ioDummyChar@@UAEXMKK@Z:PROC		; ioDummyChar::Update
EXTRN	?UpdateAfter@ioDummyChar@@UAEXM@Z:PROC		; ioDummyChar::UpdateAfter
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ:PROC ; ioDummyChar::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountAvailable
EXTRN	?IsMountingAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountingAvailable
EXTRN	?IsNowMountEnable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?UpdateBottomHeight@ioDummyChar@@MBEXXZ:PROC	; ioDummyChar::UpdateBottomHeight
EXTRN	?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ:PROC ; ioDummyChar::NeedUpdateBottomHeight
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::Translate
EXTRN	?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByConveyer
EXTRN	?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z:PROC ; ioDummyChar::ApplyWeapon
EXTRN	?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z:PROC ; ioDummyChar::IsCollisionAvailableWeapon
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z:PROC ; ioDummyChar::IsEntityCollisionSkipState
EXTRN	?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z:PROC ; ioDummyChar::IsCharCollisionSkipState
EXTRN	?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z:PROC ; ioPlayEntity::IsWoundedCollision
EXTRN	?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioDummyChar::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ:PROC ; ioDummyChar::GetSubType
EXTRN	?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ:PROC ; ioDummyChar::GetArmorType
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioDummyChar::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::UpdateGauge
EXTRN	?RenderGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
EXTRN	?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z:PROC ; ioDummyChar::InitDummyCharInfo
EXTRN	?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioDummyChar::TestMapCollision
EXTRN	?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z:PROC ; ioDummyChar::CheckEntityCollision
EXTRN	?GetDummyGrassType@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetDummyGrassType
EXTRN	?IsActivateWeapon@ioDummyChar@@UAE_NXZ:PROC	; ioDummyChar::IsActivateWeapon
EXTRN	?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z:PROC ; ioDummyChar::IsDummyVsDummyCollisionSkipState
EXTRN	?ProcessMoveState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessMoveState
EXTRN	?ProcessDashState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDashState
EXTRN	?ProcessAttackState@ioDummyChar@@MAEXMK@Z:PROC	; ioDummyChar::ProcessAttackState
EXTRN	?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharSync
EXTRN	?SetDelayState@ioDummyChar@@UAEX_N@Z:PROC	; ioDummyChar::SetDelayState
EXTRN	?SetMoveState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetMoveState
EXTRN	?SetDieState@ioDummyChar@@UAEX_N0@Z:PROC	; ioDummyChar::SetDieState
EXTRN	?SetDashState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetDashState
EXTRN	?SetAttackState@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::SetAttackState
EXTRN	?DropZoneCheck@ioDummyChar@@MAEXXZ:PROC		; ioDummyChar::DropZoneCheck
EXTRN	?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::SendAttackInfoToSkill
EXTRN	?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z:PROC ; ioDummyChar::CheckCollisionWeapon
EXTRN	?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateMountEntity
EXTRN	?ClearMountEntity@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::ClearMountEntity
EXTRN	?UpdateMountedEntityList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedEntityList
EXTRN	?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedWeaponList
EXTRN	?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z:PROC ; ioDummyChar::SetWorldPositionMountEntity
EXTRN	?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::DummyDieClearMountEntity
EXTRN	?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::FillDummyCharMidSync
EXTRN	?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharMidSync
EXTRN	?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillMaxActiveCnt
EXTRN	?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillCurActiveCnt
EXTRN	?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::OnTelepotation
EXTRN	?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z:PROC ; ioDummyChar::OnFireZoneDamage
EXTRN	?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::OnPoisonZoneDamage
;	COMDAT ??_R4ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioengineergatlingdummy.cpp
rdata$r	SEGMENT
??_R4ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@ DD 00H ; ioEngineerGatlingDummy::`RTTI Complete Object Locator'
	DD	01c8H
	DD	00H
	DD	FLAT:??_R0?AVioEngineerGatlingDummy@@@8
	DD	FLAT:??_R3ioEngineerGatlingDummy@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R2ioWorldEventReceiver@@8 DD FLAT:??_R1A@?0A@EA@ioWorldEventReceiver@@8 ; ioWorldEventReceiver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R3ioWorldEventReceiver@@8 DD 00H			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWorldEventReceiver@@@8
_DATA	SEGMENT
??_R0?AVioWorldEventReceiver@@@8 DD FLAT:??_7type_info@@6B@ ; ioWorldEventReceiver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWorldEventReceiver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1BMI@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
	DD	00H
	DD	01c8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEntityEvent@@8
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyChar@@8
rdata$r	SEGMENT
??_R2ioDummyChar@@8 DD FLAT:??_R1A@?0A@EA@ioDummyChar@@8 ; ioDummyChar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyChar@@8
rdata$r	SEGMENT
??_R3ioDummyChar@@8 DD 00H				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyChar@@@8
_DATA	SEGMENT
??_R0?AVioDummyChar@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyChar@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyChar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyChar@@8 DD FLAT:??_R0?AVioDummyChar@@@8 ; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEngineerGatlingDummy@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEngineerGatlingDummy@@8 DD FLAT:??_R0?AVioEngineerGatlingDummy@@@8 ; ioEngineerGatlingDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEngineerGatlingDummy@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEngineerGatlingDummy@@8
rdata$r	SEGMENT
??_R2ioEngineerGatlingDummy@@8 DD FLAT:??_R1A@?0A@EA@ioEngineerGatlingDummy@@8 ; ioEngineerGatlingDummy::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioDummyChar@@8
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioEngineerGatlingDummy@@8
rdata$r	SEGMENT
??_R3ioEngineerGatlingDummy@@8 DD 00H			; ioEngineerGatlingDummy::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ioEngineerGatlingDummy@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEngineerGatlingDummy@@@8
_DATA	SEGMENT
??_R0?AVioEngineerGatlingDummy@@@8 DD FLAT:??_7type_info@@6B@ ; ioEngineerGatlingDummy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEngineerGatlingDummy@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioEngineerGatlingDummy@@6BioPlayEntity@@@
rdata$r	SEGMENT
??_R4ioEngineerGatlingDummy@@6BioPlayEntity@@@ DD 00H	; ioEngineerGatlingDummy::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioEngineerGatlingDummy@@@8
	DD	FLAT:??_R3ioEngineerGatlingDummy@@8
rdata$r	ENDS
;	COMDAT ??_7ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@
CONST	SEGMENT
??_7ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@ DD FLAT:??_R4ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@ ; ioEngineerGatlingDummy::`vftable'
	DD	FLAT:?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z
	DD	FLAT:?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ
	DD	FLAT:??_EioEngineerGatlingDummy@@WBMI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ioEngineerGatlingDummy@@6BioPlayEntity@@@
CONST	SEGMENT
??_7ioEngineerGatlingDummy@@6BioPlayEntity@@@ DD FLAT:??_R4ioEngineerGatlingDummy@@6BioPlayEntity@@@ ; ioEngineerGatlingDummy::`vftable'
	DD	FLAT:?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioEngineerGatlingDummy@@UAEPAXI@Z
	DD	FLAT:?Update@ioDummyChar@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioDummyChar@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioDummyChar@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioEngineerGatlingDummy@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioEngineerGatlingDummy@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?RenderGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
	DD	FLAT:?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z
	DD	FLAT:?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?GetDummyGrassType@ioDummyChar@@UAEHXZ
	DD	FLAT:?IsActivateWeapon@ioDummyChar@@UAE_NXZ
	DD	FLAT:?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z
	DD	FLAT:?ProcessState@ioEngineerGatlingDummy@@MAEXMK@Z
	DD	FLAT:?ProcessPos@ioEngineerGatlingDummy@@MAEXM@Z
	DD	FLAT:?ProcessDelayState@ioEngineerGatlingDummy@@MAEXM@Z
	DD	FLAT:?ProcessMoveState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDashState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessAttackState@ioDummyChar@@MAEXMK@Z
	DD	FLAT:?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDelayState@ioDummyChar@@UAEX_N@Z
	DD	FLAT:?SetMoveState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetDieState@ioDummyChar@@UAEX_N0@Z
	DD	FLAT:?SetDashState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetAttackState@ioDummyChar@@UAEXXZ
	DD	FLAT:?DropZoneCheck@ioDummyChar@@MAEXXZ
	DD	FLAT:?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ
	DD	FLAT:?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?ClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedEntityList@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ
	DD	FLAT:?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z
	DD	FLAT:?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
	DD	FLAT:?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$4
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pGrp$ = 8						; size = 4
_pMode$ = 12						; size = 4
??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z PROC ; ioEngineerGatlingDummy::ioEngineerGatlingDummy, COMDAT
; _this$ = ecx

; 14   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyChar::ioDummyChar
  0001c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	8d 8e 84 14 00
	00		 lea	 ecx, DWORD PTR [esi+5252]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioEngineerGatlingDummy@@6BioPlayEntity@@@
  00032	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@
  0003c	ff d7		 call	 edi
  0003e	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00048	ff d7		 call	 edi
  0004a	8d 8e ac 14 00
	00		 lea	 ecx, DWORD PTR [esi+5292]
  00050	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00054	ff d7		 call	 edi
  00056	8d 8e c0 14 00
	00		 lea	 ecx, DWORD PTR [esi+5312]
  0005c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00060	ff d7		 call	 edi
  00062	8d 8e d4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5332]
  00068	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0006c	ff d7		 call	 edi

; 15   : 	m_GatlingState = GS_DEALY;

  0006e	c7 86 80 14 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+5248], 1

; 16   : }

  00078	8b c6		 mov	 eax, esi
  0007a	e8 00 00 00 00	 call	 __EH_epilog3
  0007f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 84 14 00
	00		 add	 ecx, 5252		; 00001484H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 98 14 00
	00		 add	 ecx, 5272		; 00001498H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 ac 14 00
	00		 add	 ecx, 5292		; 000014acH
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 c0 14 00
	00		 add	 ecx, 5312		; 000014c0H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioEngineerGatlingDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ENDP ; ioEngineerGatlingDummy::ioEngineerGatlingDummy
PUBLIC	??1ioEngineerGatlingDummy@@UAE@XZ		; ioEngineerGatlingDummy::~ioEngineerGatlingDummy
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioEngineerGatlingDummy@@UAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1ioEngineerGatlingDummy@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioEngineerGatlingDummy@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$4
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioEngineerGatlingDummy@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioEngineerGatlingDummy@@UAE@XZ PROC			; ioEngineerGatlingDummy::~ioEngineerGatlingDummy, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioEngineerGatlingDummy@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioEngineerGatlingDummy@@6BioPlayEntity@@@
  00017	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioEngineerGatlingDummy@@6BioWorldEventReceiver@@@

; 20   : }

  00021	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	8d 8e d4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5332]
  0002d	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00034	ff d7		 call	 edi
  00036	8d 8e c0 14 00
	00		 lea	 ecx, DWORD PTR [esi+5312]
  0003c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00040	ff d7		 call	 edi
  00042	8d 8e ac 14 00
	00		 lea	 ecx, DWORD PTR [esi+5292]
  00048	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004c	ff d7		 call	 edi
  0004e	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  00054	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00058	ff d7		 call	 edi
  0005a	8d 8e 84 14 00
	00		 lea	 ecx, DWORD PTR [esi+5252]
  00060	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00064	ff d7		 call	 edi
  00066	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
  00071	e8 00 00 00 00	 call	 __EH_epilog3
  00076	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 84 14 00
	00		 add	 ecx, 5252		; 00001484H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 98 14 00
	00		 add	 ecx, 5272		; 00001498H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 ac 14 00
	00		 add	 ecx, 5292		; 000014acH
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioEngineerGatlingDummy@@UAE@XZ$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 c0 14 00
	00		 add	 ecx, 5312		; 000014c0H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioEngineerGatlingDummy@@UAE@XZ:
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioEngineerGatlingDummy@@UAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioEngineerGatlingDummy@@UAE@XZ ENDP			; ioEngineerGatlingDummy::~ioEngineerGatlingDummy
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ:PROC ; ioDummyChar::GetOwner
; Function compile flags: /Ogsp
;	COMDAT ?ProcessPos@ioEngineerGatlingDummy@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessPos@ioEngineerGatlingDummy@@MAEXM@Z PROC	; ioEngineerGatlingDummy::ProcessPos, COMDAT
; _this$ = ecx

; 71   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 72   : 	ioBaseChar *pOwner = GetOwner();

  00004	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00009	8b f8		 mov	 edi, eax

; 73   : 	if( !pOwner )

  0000b	85 ff		 test	 edi, edi
  0000d	74 2d		 je	 SHORT $LN2@ProcessPos

; 74   : 		return;
; 75   : 
; 76   : 	DWORD dwCurTime = FRAMEGETTIME();

  0000f	53		 push	 ebx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00016	8b c8		 mov	 ecx, eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 77   : 	SetWorldPosition( pOwner->GetWorldPosition() );

  0001e	8b 07		 mov	 eax, DWORD PTR [edi]
  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00022	8b cf		 mov	 ecx, edi
  00024	ff 50 70	 call	 DWORD PTR [eax+112]
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	ff 53 44	 call	 DWORD PTR [ebx+68]

; 78   : 	SetWorldOrientation( pOwner->GetTargetRot() );

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	81 c7 a4 06 00
	00		 add	 edi, 1700		; 000006a4H
  00035	57		 push	 edi
  00036	8b ce		 mov	 ecx, esi
  00038	ff 50 48	 call	 DWORD PTR [eax+72]
  0003b	5b		 pop	 ebx
$LN2@ProcessPos:

; 79   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	c2 04 00	 ret	 4
?ProcessPos@ioEngineerGatlingDummy@@MAEXM@Z ENDP	; ioEngineerGatlingDummy::ProcessPos
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41200000
PUBLIC	?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetActionAni
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z$0
__ehfuncinfo$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_szAnimation$ = 8					; size = 16
_fAniRate$ = 24						; size = 4
?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z PROC ; ioEngineerGatlingDummy::SetActionAni, COMDAT
; _this$ = ecx

; 94   : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 95   : 	int iAniID = m_pGroup->GetAnimationIdx( szAnimation );

  0000e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00015	8d 45 08	 lea	 eax, DWORD PTR _szAnimation$[ebp]
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  0001f	8b f8		 mov	 edi, eax

; 96   : 	if( iAniID != -1 )

  00021	83 ff ff	 cmp	 edi, -1
  00024	0f 84 91 00 00
	00		 je	 $LN1@SetActionA

; 97   : 	{
; 98   : 		m_pGroup->ClearAllActionAni( 10.0f, true );

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00032	6a 01		 push	 1
  00034	51		 push	 ecx
  00035	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 99   : 		m_pGroup->ClearAllLoopAni( 10.0f, true );

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0004b	6a 01		 push	 1
  0004d	51		 push	 ecx
  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 100  : 		m_pGroup->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f / fAniRate );

  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00067	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006a	6a 01		 push	 1
  0006c	6a 00		 push	 0
  0006e	83 ec 18	 sub	 esp, 24			; 00000018H
  00071	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00077	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0007d	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fAniRate$[ebp]
  00082	0f 5a c0	 cvtps2pd xmm0, xmm0
  00085	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00089	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0008d	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00093	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000a9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	57		 push	 edi
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetActionA:

; 101  : 	}
; 102  : }

  000bb	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000bf	8d 4d 08	 lea	 ecx, DWORD PTR _szAnimation$[ebp]
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000c8	e8 00 00 00 00	 call	 __EH_epilog3
  000cd	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _szAnimation$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ENDP ; ioEngineerGatlingDummy::SetActionAni
PUBLIC	?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetLoopAni
EXTRN	__imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z$0
__ehfuncinfo$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_szAnimation$ = 8					; size = 16
_fAniRate$ = 24						; size = 4
?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z PROC ; ioEngineerGatlingDummy::SetLoopAni, COMDAT
; _this$ = ecx

; 105  : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 106  : 	int iAniID = m_pGroup->GetAnimationIdx( szAnimation );

  0000e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00015	8d 45 08	 lea	 eax, DWORD PTR _szAnimation$[ebp]
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  0001f	8b f8		 mov	 edi, eax

; 107  : 	if( iAniID != -1 )

  00021	83 ff ff	 cmp	 edi, -1
  00024	0f 84 81 00 00
	00		 je	 $LN1@SetLoopAni

; 108  : 	{
; 109  : 		m_pGroup->ClearAllActionAni( 10.0f, true );

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00032	6a 01		 push	 1
  00034	51		 push	 ecx
  00035	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 110  : 		m_pGroup->ClearAllLoopAni( 10.0f, true );

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0004b	6a 01		 push	 1
  0004d	51		 push	 ecx
  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 111  : 		m_pGroup->SetLoopAni( iAniID, 10.0f, 1.0f, 1.0f/fAniRate );

  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00067	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006a	83 ec 10	 sub	 esp, 16			; 00000010H
  0006d	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00073	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fAniRate$[ebp]
  00078	0f 5a c0	 cvtps2pd xmm0, xmm0
  0007b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0007f	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00083	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00091	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	57		 push	 edi
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z
$LN1@SetLoopAni:

; 112  : 	}
; 113  : }

  000ab	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000af	8d 4d 08	 lea	 ecx, DWORD PTR _szAnimation$[ebp]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000b8	e8 00 00 00 00	 call	 __EH_epilog3
  000bd	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _szAnimation$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ENDP ; ioEngineerGatlingDummy::SetLoopAni
PUBLIC	?SetLoopDelayState@ioEngineerGatlingDummy@@QAEXXZ ; ioEngineerGatlingDummy::SetLoopDelayState
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetLoopDelayState@ioEngineerGatlingDummy@@QAEXXZ
_TEXT	SEGMENT
$T612014 = -4						; size = 4
?SetLoopDelayState@ioEngineerGatlingDummy@@QAEXXZ PROC	; ioEngineerGatlingDummy::SetLoopDelayState, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 117  : 	m_GatlingState = GS_DEALY;
; 118  : 	SetLoopAni( m_DelayAnimation, m_fDelayAniRate );

  00007	d9 86 b8 06 00
	00		 fld	 DWORD PTR [esi+1720]
  0000d	83 ec 14	 sub	 esp, 20			; 00000014H
  00010	8d 86 a8 06 00
	00		 lea	 eax, DWORD PTR [esi+1704]
  00016	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0001a	8b cc		 mov	 ecx, esp
  0001c	89 65 fc	 mov	 DWORD PTR $T612014[ebp], esp
  0001f	50		 push	 eax
  00020	c7 86 80 14 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+5248], 1
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetLoopAni

; 119  : }

  00037	5e		 pop	 esi
  00038	c9		 leave
  00039	c3		 ret	 0
?SetLoopDelayState@ioEngineerGatlingDummy@@QAEXXZ ENDP	; ioEngineerGatlingDummy::SetLoopDelayState
_TEXT	ENDS
PUBLIC	?ProcessChargingState@ioEngineerGatlingDummy@@IAEXM@Z ; ioEngineerGatlingDummy::ProcessChargingState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessChargingState@ioEngineerGatlingDummy@@IAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessChargingState@ioEngineerGatlingDummy@@IAEXM@Z PROC ; ioEngineerGatlingDummy::ProcessChargingState, COMDAT
; _this$ = ecx

; 123  : 
; 124  : }

  00000	c2 04 00	 ret	 4
?ProcessChargingState@ioEngineerGatlingDummy@@IAEXM@Z ENDP ; ioEngineerGatlingDummy::ProcessChargingState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessDelayState@ioEngineerGatlingDummy@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessDelayState@ioEngineerGatlingDummy@@MAEXM@Z PROC	; ioEngineerGatlingDummy::ProcessDelayState, COMDAT
; _this$ = ecx

; 127  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 128  : 	ioBaseChar *pOwner = GetOwner();

  00003	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner

; 129  : 	if( !pOwner )

  00008	85 c0		 test	 eax, eax
  0000a	74 17		 je	 SHORT $LN1@ProcessDel

; 130  : 		return;
; 131  : 
; 132  : 	if( pOwner->GetState() != CS_USING_SKILL )

  0000c	80 b8 10 03 00
	00 07		 cmp	 BYTE PTR [eax+784], 7
  00013	74 0e		 je	 SHORT $LN1@ProcessDel

; 133  : 	{
; 134  : 		SetDieState( true );

  00015	8b 06		 mov	 eax, DWORD PTR [esi]
  00017	6a 00		 push	 0
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	ff 90 1c 01 00
	00		 call	 DWORD PTR [eax+284]
$LN1@ProcessDel:
  00023	5e		 pop	 esi

; 135  : 	}
; 136  : }

  00024	c2 04 00	 ret	 4
?ProcessDelayState@ioEngineerGatlingDummy@@MAEXM@Z ENDP	; ioEngineerGatlingDummy::ProcessDelayState
_TEXT	ENDS
PUBLIC	?SetChargingState@ioEngineerGatlingDummy@@QAEXXZ ; ioEngineerGatlingDummy::SetChargingState
; Function compile flags: /Ogsp
;	COMDAT ?SetChargingState@ioEngineerGatlingDummy@@QAEXXZ
_TEXT	SEGMENT
$T612028 = -4						; size = 4
?SetChargingState@ioEngineerGatlingDummy@@QAEXXZ PROC	; ioEngineerGatlingDummy::SetChargingState, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 140  : 	m_GatlingState = GS_CHARGING;
; 141  : 	SetLoopAni( m_szChargingAnimation, m_fChargingAnimationRate );

  00007	d9 86 94 14 00
	00		 fld	 DWORD PTR [esi+5268]
  0000d	83 ec 14	 sub	 esp, 20			; 00000014H
  00010	8d 86 84 14 00
	00		 lea	 eax, DWORD PTR [esi+5252]
  00016	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0001a	8b cc		 mov	 ecx, esp
  0001c	89 65 fc	 mov	 DWORD PTR $T612028[ebp], esp
  0001f	50		 push	 eax
  00020	c7 86 80 14 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5248], 2
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetLoopAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetLoopAni

; 142  : }

  00037	5e		 pop	 esi
  00038	c9		 leave
  00039	c3		 ret	 0
?SetChargingState@ioEngineerGatlingDummy@@QAEXXZ ENDP	; ioEngineerGatlingDummy::SetChargingState
_TEXT	ENDS
PUBLIC	?SetGatlingAttackState@ioEngineerGatlingDummy@@QAEXXZ ; ioEngineerGatlingDummy::SetGatlingAttackState
; Function compile flags: /Ogsp
;	COMDAT ?SetGatlingAttackState@ioEngineerGatlingDummy@@QAEXXZ
_TEXT	SEGMENT
$T612032 = -4						; size = 4
?SetGatlingAttackState@ioEngineerGatlingDummy@@QAEXXZ PROC ; ioEngineerGatlingDummy::SetGatlingAttackState, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 146  : 	m_GatlingState = GS_GATLING_ATTACK;
; 147  : 	SetActionAni( m_szGatlingAttackAnimation, m_fGatlingAttackAnimationRate );

  00007	d9 86 a8 14 00
	00		 fld	 DWORD PTR [esi+5288]
  0000d	83 ec 14	 sub	 esp, 20			; 00000014H
  00010	8d 86 98 14 00
	00		 lea	 eax, DWORD PTR [esi+5272]
  00016	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0001a	8b cc		 mov	 ecx, esp
  0001c	89 65 fc	 mov	 DWORD PTR $T612032[ebp], esp
  0001f	50		 push	 eax
  00020	c7 86 80 14 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+5248], 3
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetActionAni

; 148  : }

  00037	5e		 pop	 esi
  00038	c9		 leave
  00039	c3		 ret	 0
?SetGatlingAttackState@ioEngineerGatlingDummy@@QAEXXZ ENDP ; ioEngineerGatlingDummy::SetGatlingAttackState
_TEXT	ENDS
PUBLIC	?SetBeamAttackState@ioEngineerGatlingDummy@@QAEXXZ ; ioEngineerGatlingDummy::SetBeamAttackState
; Function compile flags: /Ogsp
;	COMDAT ?SetBeamAttackState@ioEngineerGatlingDummy@@QAEXXZ
_TEXT	SEGMENT
$T612036 = -4						; size = 4
?SetBeamAttackState@ioEngineerGatlingDummy@@QAEXXZ PROC	; ioEngineerGatlingDummy::SetBeamAttackState, COMDAT
; _this$ = ecx

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 152  : 	m_GatlingState = GS_BEAM_ATTACK;
; 153  : 	SetActionAni( m_szBeamAttackAnimation, m_fBeamAttackAnimationRate );

  00007	d9 86 bc 14 00
	00		 fld	 DWORD PTR [esi+5308]
  0000d	83 ec 14	 sub	 esp, 20			; 00000014H
  00010	8d 86 ac 14 00
	00		 lea	 eax, DWORD PTR [esi+5292]
  00016	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0001a	8b cc		 mov	 ecx, esp
  0001c	89 65 fc	 mov	 DWORD PTR $T612036[ebp], esp
  0001f	50		 push	 eax
  00020	c7 86 80 14 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+5248], 4
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetActionAni

; 154  : }

  00037	5e		 pop	 esi
  00038	c9		 leave
  00039	c3		 ret	 0
?SetBeamAttackState@ioEngineerGatlingDummy@@QAEXXZ ENDP	; ioEngineerGatlingDummy::SetBeamAttackState
_TEXT	ENDS
PUBLIC	?SetShockAttackState@ioEngineerGatlingDummy@@QAEXXZ ; ioEngineerGatlingDummy::SetShockAttackState
; Function compile flags: /Ogsp
;	COMDAT ?SetShockAttackState@ioEngineerGatlingDummy@@QAEXXZ
_TEXT	SEGMENT
$T612040 = -4						; size = 4
?SetShockAttackState@ioEngineerGatlingDummy@@QAEXXZ PROC ; ioEngineerGatlingDummy::SetShockAttackState, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 158  : 	m_GatlingState = GS_SHOCK_ATTACK;
; 159  : 	SetActionAni( m_szShockAttackAnimation, m_fShockAttackAnimationRate );

  00007	d9 86 d0 14 00
	00		 fld	 DWORD PTR [esi+5328]
  0000d	83 ec 14	 sub	 esp, 20			; 00000014H
  00010	8d 86 c0 14 00
	00		 lea	 eax, DWORD PTR [esi+5312]
  00016	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0001a	8b cc		 mov	 ecx, esp
  0001c	89 65 fc	 mov	 DWORD PTR $T612040[ebp], esp
  0001f	50		 push	 eax
  00020	c7 86 80 14 00
	00 05 00 00 00	 mov	 DWORD PTR [esi+5248], 5
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetActionAni

; 160  : }

  00037	5e		 pop	 esi
  00038	c9		 leave
  00039	c3		 ret	 0
?SetShockAttackState@ioEngineerGatlingDummy@@QAEXXZ ENDP ; ioEngineerGatlingDummy::SetShockAttackState
_TEXT	ENDS
PUBLIC	?SetAirTraceAttack@ioEngineerGatlingDummy@@QAEXXZ ; ioEngineerGatlingDummy::SetAirTraceAttack
; Function compile flags: /Ogsp
;	COMDAT ?SetAirTraceAttack@ioEngineerGatlingDummy@@QAEXXZ
_TEXT	SEGMENT
$T612044 = -4						; size = 4
?SetAirTraceAttack@ioEngineerGatlingDummy@@QAEXXZ PROC	; ioEngineerGatlingDummy::SetAirTraceAttack, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 164  : 	m_GatlingState = GS_AIR_TRACE_ATTACK;
; 165  : 	SetActionAni( m_szAirTraceAttackAnimation, m_fShockAttackAnimationRate );

  00007	d9 86 d0 14 00
	00		 fld	 DWORD PTR [esi+5328]
  0000d	83 ec 14	 sub	 esp, 20			; 00000014H
  00010	8d 86 d4 14 00
	00		 lea	 eax, DWORD PTR [esi+5332]
  00016	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0001a	8b cc		 mov	 ecx, esp
  0001c	89 65 fc	 mov	 DWORD PTR $T612044[ebp], esp
  0001f	50		 push	 eax
  00020	c7 86 80 14 00
	00 06 00 00 00	 mov	 DWORD PTR [esi+5248], 6
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetActionAni@ioEngineerGatlingDummy@@IAEXVioHashString@@M@Z ; ioEngineerGatlingDummy::SetActionAni

; 166  : }

  00037	5e		 pop	 esi
  00038	c9		 leave
  00039	c3		 ret	 0
?SetAirTraceAttack@ioEngineerGatlingDummy@@QAEXXZ ENDP	; ioEngineerGatlingDummy::SetAirTraceAttack
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?DontMoveEntityLevel@ioEngineerGatlingDummy@@UBEHXZ
_TEXT	SEGMENT
?DontMoveEntityLevel@ioEngineerGatlingDummy@@UBEHXZ PROC ; ioEngineerGatlingDummy::DontMoveEntityLevel, COMDAT
; _this$ = ecx

; 170  : 	return 3;

  00000	6a 03		 push	 3
  00002	58		 pop	 eax

; 171  : }

  00003	c3		 ret	 0
?DontMoveEntityLevel@ioEngineerGatlingDummy@@UBEHXZ ENDP ; ioEngineerGatlingDummy::DontMoveEntityLevel
; Function compile flags: /Odsp
_TEXT	ENDS
;	COMDAT ??_EioEngineerGatlingDummy@@WBMI@AEPAXI@Z
_TEXT	SEGMENT
??_EioEngineerGatlingDummy@@WBMI@AEPAXI@Z PROC		; [thunk]:ioEngineerGatlingDummy::`vector deleting destructor', COMDAT
  00000	81 e9 c8 01 00
	00		 sub	 ecx, 456		; 000001c8H
  00006	e9 00 00 00 00	 jmp	 ??_EioEngineerGatlingDummy@@UAEPAXI@Z
??_EioEngineerGatlingDummy@@WBMI@AEPAXI@Z ENDP		; [thunk]:ioEngineerGatlingDummy::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummychar.h
_TEXT	ENDS
;	COMDAT ?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
_TEXT	SEGMENT
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ PROC		; ioDummyChar::IsDummyCharMidSync, COMDAT
; _this$ = ecx

; 742  : 	virtual bool IsDummyCharMidSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ ENDP		; ioDummyChar::IsDummyCharMidSync
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioEngineerGatlingDummy@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioEngineerGatlingDummy@@UAEPAXI@Z PROC		; ioEngineerGatlingDummy::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioEngineerGatlingDummy@@UAE@XZ ; ioEngineerGatlingDummy::~ioEngineerGatlingDummy
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioEngineerGatlingDummy@@UAEPAXI@Z ENDP		; ioEngineerGatlingDummy::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?ProcessStartState@ioEngineerGatlingDummy@@IAEXM@Z ; ioEngineerGatlingDummy::ProcessStartState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioengineergatlingdummy.cpp
;	COMDAT ?ProcessStartState@ioEngineerGatlingDummy@@IAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessStartState@ioEngineerGatlingDummy@@IAEXM@Z PROC	; ioEngineerGatlingDummy::ProcessStartState, COMDAT
; _this$ = ecx

; 82   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 83   : 	if( m_dwStartAniEndTime < FRAMEGETTIME() )

  00004	8b be e4 06 00
	00		 mov	 edi, DWORD PTR [esi+1764]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00010	8b c8		 mov	 ecx, eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00018	3b f8		 cmp	 edi, eax
  0001a	73 09		 jae	 SHORT $LN3@ProcessSta

; 84   : 	{
; 85   : 		SetLoopDelayState();

  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?SetLoopDelayState@ioEngineerGatlingDummy@@QAEXXZ ; ioEngineerGatlingDummy::SetLoopDelayState
  00023	eb 11		 jmp	 SHORT $LN1@ProcessSta
$LN3@ProcessSta:

; 86   : 	}
; 87   : 	else if( m_dwStartAniEndTime == 0 )

  00025	85 ff		 test	 edi, edi
  00027	75 0d		 jne	 SHORT $LN1@ProcessSta

; 88   : 	{
; 89   : 		SetDieState( true );

  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	57		 push	 edi
  0002c	6a 01		 push	 1
  0002e	8b ce		 mov	 ecx, esi
  00030	ff 90 1c 01 00
	00		 call	 DWORD PTR [eax+284]
$LN1@ProcessSta:

; 90   : 	}
; 91   : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	c2 04 00	 ret	 4
?ProcessStartState@ioEngineerGatlingDummy@@IAEXM@Z ENDP	; ioEngineerGatlingDummy::ProcessStartState
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<19>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<19>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 cf 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 b8 01 00
	00		 je	 $LN95@LoadString
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 a0 01 00
	00		 je	 $LN94@LoadString
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 89 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 72 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 5c 01 00
	00		 je	 $LN91@LoadString
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 46 01 00
	00		 je	 $LN90@LoadString
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 2f 01 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 18 01 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 02 01 00
	00		 je	 $LN87@LoadString
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 ec 00 00
	00		 je	 $LN86@LoadString
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 d5 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 be 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 a8 00 00
	00		 je	 $LN83@LoadString
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 92 00 00
	00		 je	 $LN82@LoadString
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 7f		 je	 SHORT $LN81@LoadString
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 6c		 je	 SHORT $LN80@LoadString
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00134	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00137	84 d2		 test	 dl, dl
  00139	74 5a		 je	 SHORT $LN79@LoadString
  0013b	32 d1		 xor	 dl, cl
  0013d	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00141	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	0f 84 b1 00 00
	00		 je	 $LN111@LoadString
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 3e		 je	 SHORT $LN77@LoadString
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 2b		 je	 SHORT $LN76@LoadString
  0015e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00161	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00164	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00167	84 d2		 test	 dl, dl
  00169	74 19		 je	 SHORT $LN75@LoadString
  0016b	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  0016e	32 d1		 xor	 dl, cl
  00170	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00173	84 c0		 test	 al, al
  00175	74 07		 je	 SHORT $LN74@LoadString
  00177	34 eb		 xor	 al, -21			; ffffffebH
  00179	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  0017c	eb 7d		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  0017e	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00182	eb 77		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00184	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  00187	eb 72		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00189	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0018d	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0018f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00193	eb 66		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00195	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00198	eb 61		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  0019a	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0019e	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  001a0	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001a4	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  001a6	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001aa	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  001ac	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001af	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001b1	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b5	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001b7	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001bb	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001bd	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001c1	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001c3	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001c6	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001c8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001cc	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001ce	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001d2	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001d4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d8	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001da	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001dd	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001df	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001e3	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001e5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e9	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001eb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ef	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001f1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001f5	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001f7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001fb	6a 04		 push	 4
  001fd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00200	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  00204	5a		 pop	 edx
$LL104@LoadString:
  00205	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020b	83 c0 04	 add	 eax, 4
  0020e	4a		 dec	 edx
  0020f	75 f4		 jne	 SHORT $LL104@LoadString
  00211	6a 10		 push	 16			; 00000010H
  00213	58		 pop	 eax
$LL101@LoadString:
  00214	8b c8		 mov	 ecx, eax
  00216	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0021c	79 05		 jns	 SHORT $LN112@LoadString
  0021e	49		 dec	 ecx
  0021f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00222	41		 inc	 ecx
$LN112@LoadString:
  00223	b2 ed		 mov	 dl, -19			; ffffffedH
  00225	2a d1		 sub	 dl, cl
  00227	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0022b	40		 inc	 eax
  0022c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0022f	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00231	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	33 cd		 xor	 ecx, ebp
  00249	5e		 pop	 esi
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	c9		 leave
  00250	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ; ioINILoader::LoadFloat_e<24>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<24>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadFloat_
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadFloat_
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadFloat_
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadFloat_
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadFloat_
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadFloat_
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadFloat_
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadFloat_
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadFloat_
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadFloat_
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadFloat_
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadFloat_
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN69@LoadFloat_:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadFloat_:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadFloat_:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadFloat_
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadFloat_:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  002a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002a5	51		 push	 ecx
  002a6	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	50		 push	 eax
  002af	8b ce		 mov	 ecx, esi
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	5e		 pop	 esi
  002bb	33 cd		 xor	 ecx, ebp
  002bd	5b		 pop	 ebx
  002be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c3	c9		 leave
  002c4	c2 08 00	 ret	 8
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<24>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<25>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<25>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 5f 02 00
	00		 je	 $LN96@LoadString@2
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 48 02 00
	00		 je	 $LN95@LoadString@2
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 30 02 00
	00		 je	 $LN94@LoadString@2
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 18 02 00
	00		 je	 $LN93@LoadString@2
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 01 02 00
	00		 je	 $LN92@LoadString@2
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 eb 01 00
	00		 je	 $LN91@LoadString@2
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 d6 01 00
	00		 je	 $LN90@LoadString@2
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 c0 01 00
	00		 je	 $LN89@LoadString@2
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 a9 01 00
	00		 je	 $LN88@LoadString@2
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 93 01 00
	00		 je	 $LN87@LoadString@2
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 7e 01 00
	00		 je	 $LN86@LoadString@2
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 68 01 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 51 01 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 3b 01 00
	00		 je	 $LN83@LoadString@2
  00104	32 d1		 xor	 dl, cl
  00106	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 26 01 00
	00		 je	 $LN82@LoadString@2
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 10 01 00
	00		 je	 $LN81@LoadString@2
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 f9 00 00
	00		 je	 $LN80@LoadString@2
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 e3 00 00
	00		 je	 $LN79@LoadString@2
  00146	32 d1		 xor	 dl, cl
  00148	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 ce 00 00
	00		 je	 $LN78@LoadString@2
  00156	32 d3		 xor	 dl, bl
  00158	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  0015b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015e	84 d2		 test	 dl, dl
  00160	0f 84 b8 00 00
	00		 je	 $LN77@LoadString@2
  00166	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00169	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 a1 00 00
	00		 je	 $LN76@LoadString@2
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	0f 84 8b 00 00
	00		 je	 $LN75@LoadString@2
  00188	32 d1		 xor	 dl, cl
  0018a	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  0018d	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00190	84 d2		 test	 dl, dl
  00192	74 7a		 je	 SHORT $LN74@LoadString@2
  00194	32 d3		 xor	 dl, bl
  00196	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00199	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0019c	84 d2		 test	 dl, dl
  0019e	74 68		 je	 SHORT $LN73@LoadString@2
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  001a7	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001aa	0f 84 dc 00 00
	00		 je	 $LN111@LoadString@2
  001b0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b3	84 d2		 test	 dl, dl
  001b5	74 49		 je	 SHORT $LN71@LoadString@2
  001b7	32 d1		 xor	 dl, cl
  001b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001bc	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bf	84 d2		 test	 dl, dl
  001c1	74 35		 je	 SHORT $LN70@LoadString@2
  001c3	32 d3		 xor	 dl, bl
  001c5	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cb	84 d2		 test	 dl, dl
  001cd	74 20		 je	 SHORT $LN69@LoadString@2
  001cf	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001d5	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d8	84 c0		 test	 al, al
  001da	74 0a		 je	 SHORT $LN68@LoadString@2
  001dc	34 ed		 xor	 al, -19			; ffffffedH
  001de	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001e1	e9 a6 00 00 00	 jmp	 $LN111@LoadString@2
$LN68@LoadString@2:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001ea	e9 9d 00 00 00	 jmp	 $LN111@LoadString@2
$LN69@LoadString@2:
  001ef	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001f3	e9 94 00 00 00	 jmp	 $LN111@LoadString@2
$LN70@LoadString@2:
  001f8	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001fb	e9 8c 00 00 00	 jmp	 $LN111@LoadString@2
$LN71@LoadString@2:
  00200	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00203	e9 84 00 00 00	 jmp	 $LN111@LoadString@2
$LN73@LoadString@2:
  00208	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0020c	eb 7e		 jmp	 SHORT $LN111@LoadString@2
$LN74@LoadString@2:
  0020e	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00211	eb 79		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  00213	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00216	eb 74		 jmp	 SHORT $LN111@LoadString@2
$LN76@LoadString@2:
  00218	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0021c	eb 6e		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  0021e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00222	eb 68		 jmp	 SHORT $LN111@LoadString@2
$LN78@LoadString@2:
  00224	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  00227	eb 63		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  00229	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  0022c	eb 5e		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  0022e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00232	eb 58		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  00234	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00238	eb 52		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  0023a	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  0023d	eb 4d		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  0023f	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  00242	eb 48		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  00244	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00248	eb 42		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  0024a	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0024e	eb 3c		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  00250	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  00253	eb 37		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00255	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00258	eb 32		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  0025a	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0025e	eb 2c		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  00260	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00264	eb 26		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00266	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00269	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  0026b	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  0026e	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  00270	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00274	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  00276	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0027a	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  0027c	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00280	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00282	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00286	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  00288	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  0028c	6a 06		 push	 6
  0028e	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00291	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  00295	5a		 pop	 edx
$LL104@LoadString@2:
  00296	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0029c	83 c0 04	 add	 eax, 4
  0029f	4a		 dec	 edx
  002a0	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  002a2	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002a5	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002a8	57		 push	 edi
  002a9	56		 push	 esi
  002aa	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002ad	50		 push	 eax
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b7	5f		 pop	 edi
  002b8	5e		 pop	 esi
  002b9	33 cd		 xor	 ecx, ebp
  002bb	5b		 pop	 ebx
  002bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c1	c9		 leave
  002c2	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<25>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z ; ioINILoader::LoadFloat_e<30>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<30>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 02 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 02 00
	00		 je	 $LN95@LoadFloat_@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 af 02 00
	00		 je	 $LN94@LoadFloat_@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 97 02 00
	00		 je	 $LN93@LoadFloat_@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 02 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 68 02 00
	00		 je	 $LN91@LoadFloat_@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 52 02 00
	00		 je	 $LN90@LoadFloat_@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 3d 02 00
	00		 je	 $LN89@LoadFloat_@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 02 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 10 02 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 fa 01 00
	00		 je	 $LN86@LoadFloat_@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 e5 01 00
	00		 je	 $LN85@LoadFloat_@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 01 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b8 01 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 a2 01 00
	00		 je	 $LN82@LoadFloat_@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 8d 01 00
	00		 je	 $LN81@LoadFloat_@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 77 01 00
	00		 je	 $LN80@LoadFloat_@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 60 01 00
	00		 je	 $LN79@LoadFloat_@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 4a 01 00
	00		 je	 $LN78@LoadFloat_@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 35 01 00
	00		 je	 $LN77@LoadFloat_@2
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 1f 01 00
	00		 je	 $LN76@LoadFloat_@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 08 01 00
	00		 je	 $LN75@LoadFloat_@2
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 f2 00 00
	00		 je	 $LN74@LoadFloat_@2
  00191	32 d1		 xor	 dl, cl
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 dd 00 00
	00		 je	 $LN73@LoadFloat_@2
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 c4 00 00
	00		 je	 $LN72@LoadFloat_@2
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 aa 00 00
	00		 je	 $LN71@LoadFloat_@2
  001c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c5	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c8	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001cb	84 d2		 test	 dl, dl
  001cd	0f 84 91 00 00
	00		 je	 $LN70@LoadFloat_@2
  001d3	32 d1		 xor	 dl, cl
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	74 7d		 je	 SHORT $LN69@LoadFloat_@2
  001df	32 d3		 xor	 dl, bl
  001e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e4	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001e7	84 d2		 test	 dl, dl
  001e9	74 68		 je	 SHORT $LN68@LoadFloat_@2
  001eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ee	80 78 1d 00	 cmp	 BYTE PTR [eax+29], 0
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	0f 84 07 01 00
	00		 je	 $LN1@LoadFloat_@2
  001fb	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001fe	84 d2		 test	 dl, dl
  00200	74 49		 je	 SHORT $LN66@LoadFloat_@2
  00202	32 d1		 xor	 dl, cl
  00204	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00207	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020a	84 d2		 test	 dl, dl
  0020c	74 35		 je	 SHORT $LN65@LoadFloat_@2
  0020e	32 d3		 xor	 dl, bl
  00210	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00213	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  00216	84 d2		 test	 dl, dl
  00218	74 20		 je	 SHORT $LN64@LoadFloat_@2
  0021a	8a 40 21	 mov	 al, BYTE PTR [eax+33]
  0021d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00220	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00223	84 c0		 test	 al, al
  00225	74 0a		 je	 SHORT $LN63@LoadFloat_@2
  00227	34 ec		 xor	 al, -20			; ffffffecH
  00229	88 45 f9	 mov	 BYTE PTR __k$[ebp+33], al
  0022c	e9 d1 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN63@LoadFloat_@2:
  00231	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+33], -20 ; ffffffecH
  00235	e9 c8 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN64@LoadFloat_@2:
  0023a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  0023e	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN65@LoadFloat_@2:
  00243	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  00246	e9 b7 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN66@LoadFloat_@2:
  0024b	88 4d f6	 mov	 BYTE PTR __k$[ebp+30], cl
  0024e	e9 af 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN68@LoadFloat_@2:
  00253	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00257	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN69@LoadFloat_@2:
  0025c	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  0025f	e9 9e 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN70@LoadFloat_@2:
  00264	88 4d f2	 mov	 BYTE PTR __k$[ebp+26], cl
  00267	e9 96 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN71@LoadFloat_@2:
  0026c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  00270	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN72@LoadFloat_@2:
  00275	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00279	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  0027e	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00281	eb 7f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  00283	88 4d ee	 mov	 BYTE PTR __k$[ebp+22], cl
  00286	eb 7a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  00288	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0028c	eb 74		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  0028e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00292	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  00294	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  00297	eb 69		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  00299	88 4d ea	 mov	 BYTE PTR __k$[ebp+18], cl
  0029c	eb 64		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0029e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  002a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  002a4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  002aa	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002ad	eb 53		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  002af	88 4d e6	 mov	 BYTE PTR __k$[ebp+14], cl
  002b2	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  002b4	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  002b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  002ba	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002be	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  002c0	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002c3	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  002c5	88 4d e2	 mov	 BYTE PTR __k$[ebp+10], cl
  002c8	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  002ca	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  002ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  002d0	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  002d6	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002d9	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  002db	88 4d de	 mov	 BYTE PTR __k$[ebp+6], cl
  002de	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  002e0	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  002e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  002e6	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  002ec	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  002f2	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  002f8	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  002fe	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00302	6a 07		 push	 7
  00304	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00307	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+29], 0
  0030b	5a		 pop	 edx
$LL104@LoadFloat_@2:
  0030c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00312	83 c0 04	 add	 eax, 4
  00315	4a		 dec	 edx
  00316	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00318	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0031d	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00321	51		 push	 ecx
  00322	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	50		 push	 eax
  0032b	8b ce		 mov	 ecx, esi
  0032d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00333	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00336	5e		 pop	 esi
  00337	33 cd		 xor	 ecx, ebp
  00339	5b		 pop	 ebx
  0033a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0033f	c9		 leave
  00340	c2 08 00	 ret	 8
??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<30>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<22>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 15 02 00
	00		 je	 $LN96@LoadString@3
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 fe 01 00
	00		 je	 $LN95@LoadString@3
  0003a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003d	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 e7 01 00
	00		 je	 $LN94@LoadString@3
  0004b	b1 eb		 mov	 cl, -21			; ffffffebH
  0004d	32 d1		 xor	 dl, cl
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 cf 01 00
	00		 je	 $LN93@LoadString@3
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 b7 01 00
	00		 je	 $LN92@LoadString@3
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 a0 01 00
	00		 je	 $LN91@LoadString@3
  00080	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00083	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00086	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 8a 01 00
	00		 je	 $LN90@LoadString@3
  00091	32 d1		 xor	 dl, cl
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 75 01 00
	00		 je	 $LN89@LoadString@3
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 5f 01 00
	00		 je	 $LN88@LoadString@3
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 48 01 00
	00		 je	 $LN87@LoadString@3
  000c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c5	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c8	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000cb	84 d2		 test	 dl, dl
  000cd	0f 84 32 01 00
	00		 je	 $LN86@LoadString@3
  000d3	32 d1		 xor	 dl, cl
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 1d 01 00
	00		 je	 $LN85@LoadString@3
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 07 01 00
	00		 je	 $LN84@LoadString@3
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 f0 00 00
	00		 je	 $LN83@LoadString@3
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 da 00 00
	00		 je	 $LN82@LoadString@3
  00115	32 d1		 xor	 dl, cl
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 c5 00 00
	00		 je	 $LN81@LoadString@3
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 af 00 00
	00		 je	 $LN80@LoadString@3
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 98 00 00
	00		 je	 $LN79@LoadString@3
  00146	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00149	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014c	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014f	84 d2		 test	 dl, dl
  00151	0f 84 82 00 00
	00		 je	 $LN78@LoadString@3
  00157	32 d1		 xor	 dl, cl
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	74 71		 je	 SHORT $LN77@LoadString@3
  00163	32 d3		 xor	 dl, bl
  00165	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00168	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016b	84 d2		 test	 dl, dl
  0016d	74 5f		 je	 SHORT $LN76@LoadString@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	0f 84 c3 00 00
	00		 je	 $LN111@LoadString@3
  0017f	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00182	84 d2		 test	 dl, dl
  00184	74 43		 je	 SHORT $LN74@LoadString@3
  00186	32 d1		 xor	 dl, cl
  00188	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0018b	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018e	84 d2		 test	 dl, dl
  00190	74 32		 je	 SHORT $LN73@LoadString@3
  00192	32 d3		 xor	 dl, bl
  00194	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 20		 je	 SHORT $LN72@LoadString@3
  0019e	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  001a1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a4	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a7	84 c0		 test	 al, al
  001a9	74 0a		 je	 SHORT $LN71@LoadString@3
  001ab	34 ec		 xor	 al, -20			; ffffffecH
  001ad	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001b0	e9 8d 00 00 00	 jmp	 $LN111@LoadString@3
$LN71@LoadString@3:
  001b5	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b9	e9 84 00 00 00	 jmp	 $LN111@LoadString@3
$LN72@LoadString@3:
  001be	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001c2	eb 7e		 jmp	 SHORT $LN111@LoadString@3
$LN73@LoadString@3:
  001c4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001c7	eb 79		 jmp	 SHORT $LN111@LoadString@3
$LN74@LoadString@3:
  001c9	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001cc	eb 74		 jmp	 SHORT $LN111@LoadString@3
$LN76@LoadString@3:
  001ce	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001d2	eb 6e		 jmp	 SHORT $LN111@LoadString@3
$LN77@LoadString@3:
  001d4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001d7	eb 69		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  001d9	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001dc	eb 64		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  001de	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001e2	eb 5e		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  001e4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e8	eb 58		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  001ea	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001ed	eb 53		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  001ef	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001f2	eb 4e		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  001f4	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f8	eb 48		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  001fa	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001fe	eb 42		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  00200	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00203	eb 3d		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  00205	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00208	eb 38		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  0020a	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0020e	eb 32		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  00210	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00214	eb 2c		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  00216	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00219	eb 27		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  0021b	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  0021e	eb 22		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  00220	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00224	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  00226	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0022a	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  0022c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00230	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  00232	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00236	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  00238	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0023c	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  0023e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  00242	6a 05		 push	 5
  00244	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00247	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  0024b	5a		 pop	 edx
$LL104@LoadString@3:
  0024c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00252	83 c0 04	 add	 eax, 4
  00255	4a		 dec	 edx
  00256	75 f4		 jne	 SHORT $LL104@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  00258	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0025b	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0025e	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00262	57		 push	 edi
  00263	56		 push	 esi
  00264	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00267	50		 push	 eax
  00268	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0026e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	33 cd		 xor	 ecx, ebp
  00275	5b		 pop	 ebx
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	c9		 leave
  0027c	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z ; ioINILoader::LoadFloat_e<27>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 27
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<27>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 91 02 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 7a 02 00
	00		 je	 $LN95@LoadFloat_@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 62 02 00
	00		 je	 $LN94@LoadFloat_@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 4b 02 00
	00		 je	 $LN93@LoadFloat_@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 33 02 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 1d 02 00
	00		 je	 $LN91@LoadFloat_@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 07 02 00
	00		 je	 $LN90@LoadFloat_@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 f1 01 00
	00		 je	 $LN89@LoadFloat_@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 db 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 c5 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 af 01 00
	00		 je	 $LN86@LoadFloat_@3
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 99 01 00
	00		 je	 $LN85@LoadFloat_@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 83 01 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 6d 01 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 57 01 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 41 01 00
	00		 je	 $LN81@LoadFloat_@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 2b 01 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 15 01 00
	00		 je	 $LN79@LoadFloat_@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ff 00 00
	00		 je	 $LN78@LoadFloat_@3
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 e9 00 00
	00		 je	 $LN77@LoadFloat_@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 d3 00 00
	00		 je	 $LN76@LoadFloat_@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 bd 00 00
	00		 je	 $LN75@LoadFloat_@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 a7 00 00
	00		 je	 $LN74@LoadFloat_@3
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 91 00 00
	00		 je	 $LN73@LoadFloat_@3
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	74 7c		 je	 SHORT $LN72@LoadFloat_@3
  001ad	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b6	84 d2		 test	 dl, dl
  001b8	74 67		 je	 SHORT $LN71@LoadFloat_@3
  001ba	32 d1		 xor	 dl, cl
  001bc	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	0f 84 ed 00 00
	00		 je	 $LN1@LoadFloat_@3
  001c9	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cc	84 d2		 test	 dl, dl
  001ce	74 49		 je	 SHORT $LN69@LoadFloat_@3
  001d0	32 d3		 xor	 dl, bl
  001d2	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d5	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d8	84 d2		 test	 dl, dl
  001da	74 34		 je	 SHORT $LN68@LoadFloat_@3
  001dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001df	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e2	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e5	84 d2		 test	 dl, dl
  001e7	74 1f		 je	 SHORT $LN67@LoadFloat_@3
  001e9	8a 40 1e	 mov	 al, BYTE PTR [eax+30]
  001ec	32 d1		 xor	 dl, cl
  001ee	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f1	84 c0		 test	 al, al
  001f3	74 0a		 je	 SHORT $LN66@LoadFloat_@3
  001f5	34 eb		 xor	 al, -21			; ffffffebH
  001f7	88 45 fa	 mov	 BYTE PTR __k$[ebp+30], al
  001fa	e9 b7 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN66@LoadFloat_@3:
  001ff	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+30], -21 ; ffffffebH
  00203	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN67@LoadFloat_@3:
  00208	88 4d f9	 mov	 BYTE PTR __k$[ebp+29], cl
  0020b	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN68@LoadFloat_@3:
  00210	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00214	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN69@LoadFloat_@3:
  00219	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  0021c	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN71@LoadFloat_@3:
  00221	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00224	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN72@LoadFloat_@3:
  00229	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0022d	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  00232	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  00235	eb 7f		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  00237	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0023b	eb 79		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  0023d	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00240	eb 74		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  00242	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00246	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  00248	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  0024b	eb 69		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  0024d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00251	eb 63		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  00253	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00256	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  00258	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0025c	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  0025e	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00261	eb 53		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  00263	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00267	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  00269	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0026c	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  0026e	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00272	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  00274	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  00277	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  00279	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0027d	eb 37		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  0027f	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00282	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  00284	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00288	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  0028a	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  0028d	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  0028f	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00293	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  00295	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00298	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  0029a	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0029e	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  002a0	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002a4	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  002a6	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002aa	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  002ac	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002b0	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  002b2	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  002b6	6a 06		 push	 6
  002b8	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002bb	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+26], 0
  002bf	5a		 pop	 edx
$LL104@LoadFloat_@3:
  002c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c6	83 c0 04	 add	 eax, 4
  002c9	4a		 dec	 edx
  002ca	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  002cc	6a 18		 push	 24			; 00000018H
  002ce	58		 pop	 eax
$LL101@LoadFloat_@3:
  002cf	8b c8		 mov	 ecx, eax
  002d1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002d7	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  002d9	49		 dec	 ecx
  002da	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002dd	41		 inc	 ecx
$LN111@LoadFloat_@3:
  002de	b2 ed		 mov	 dl, -19			; ffffffedH
  002e0	2a d1		 sub	 dl, cl
  002e2	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002e6	40		 inc	 eax
  002e7	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002ea	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  002ec	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002f1	51		 push	 ecx
  002f2	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	50		 push	 eax
  002fb	8b ce		 mov	 ecx, esi
  002fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00303	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00306	5e		 pop	 esi
  00307	33 cd		 xor	 ecx, ebp
  00309	5b		 pop	 ebx
  0030a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030f	c9		 leave
  00310	c2 08 00	 ret	 8
??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<27>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<23>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 2d 02 00
	00		 je	 $LN96@LoadString@4
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 16 02 00
	00		 je	 $LN95@LoadString@4
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 fe 01 00
	00		 je	 $LN94@LoadString@4
  0004c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 e7 01 00
	00		 je	 $LN93@LoadString@4
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 cf 01 00
	00		 je	 $LN92@LoadString@4
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 b9 01 00
	00		 je	 $LN91@LoadString@4
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 a3 01 00
	00		 je	 $LN90@LoadString@4
  00090	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 8d 01 00
	00		 je	 $LN89@LoadString@4
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 77 01 00
	00		 je	 $LN88@LoadString@4
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 61 01 00
	00		 je	 $LN87@LoadString@4
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 4b 01 00
	00		 je	 $LN86@LoadString@4
  000d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 35 01 00
	00		 je	 $LN85@LoadString@4
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 1f 01 00
	00		 je	 $LN84@LoadString@4
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 09 01 00
	00		 je	 $LN83@LoadString@4
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 f3 00 00
	00		 je	 $LN82@LoadString@4
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 dd 00 00
	00		 je	 $LN81@LoadString@4
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 c7 00 00
	00		 je	 $LN80@LoadString@4
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 b1 00 00
	00		 je	 $LN79@LoadString@4
  00146	32 d1		 xor	 dl, cl
  00148	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 9b 00 00
	00		 je	 $LN78@LoadString@4
  00156	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	0f 84 85 00 00
	00		 je	 $LN77@LoadString@4
  00167	32 d3		 xor	 dl, bl
  00169	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	74 73		 je	 SHORT $LN76@LoadString@4
  00173	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0017c	84 d2		 test	 dl, dl
  0017e	74 61		 je	 SHORT $LN75@LoadString@4
  00180	32 d1		 xor	 dl, cl
  00182	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  00186	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00189	0f 84 cb 00 00
	00		 je	 $LN111@LoadString@4
  0018f	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00192	84 d2		 test	 dl, dl
  00194	74 46		 je	 SHORT $LN73@LoadString@4
  00196	32 d3		 xor	 dl, bl
  00198	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0019b	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019e	84 d2		 test	 dl, dl
  001a0	74 34		 je	 SHORT $LN72@LoadString@4
  001a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a5	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 1f		 je	 SHORT $LN71@LoadString@4
  001af	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001b2	32 d1		 xor	 dl, cl
  001b4	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b7	84 c0		 test	 al, al
  001b9	74 0a		 je	 SHORT $LN70@LoadString@4
  001bb	34 eb		 xor	 al, -21			; ffffffebH
  001bd	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001c0	e9 95 00 00 00	 jmp	 $LN111@LoadString@4
$LN70@LoadString@4:
  001c5	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c9	e9 8c 00 00 00	 jmp	 $LN111@LoadString@4
$LN71@LoadString@4:
  001ce	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001d1	e9 84 00 00 00	 jmp	 $LN111@LoadString@4
$LN72@LoadString@4:
  001d6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001da	eb 7e		 jmp	 SHORT $LN111@LoadString@4
$LN73@LoadString@4:
  001dc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001df	eb 79		 jmp	 SHORT $LN111@LoadString@4
$LN75@LoadString@4:
  001e1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001e4	eb 74		 jmp	 SHORT $LN111@LoadString@4
$LN76@LoadString@4:
  001e6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ea	eb 6e		 jmp	 SHORT $LN111@LoadString@4
$LN77@LoadString@4:
  001ec	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001ef	eb 69		 jmp	 SHORT $LN111@LoadString@4
$LN78@LoadString@4:
  001f1	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001f5	eb 63		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  001f7	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001fa	eb 5e		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  001fc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00200	eb 58		 jmp	 SHORT $LN111@LoadString@4
$LN81@LoadString@4:
  00202	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  00205	eb 53		 jmp	 SHORT $LN111@LoadString@4
$LN82@LoadString@4:
  00207	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0020b	eb 4d		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  0020d	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00210	eb 48		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  00212	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00216	eb 42		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  00218	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  0021b	eb 3d		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  0021d	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00221	eb 37		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  00223	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  00226	eb 32		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  00228	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0022c	eb 2c		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  0022e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00231	eb 27		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  00233	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00237	eb 21		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  00239	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  0023c	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  0023e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00242	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  00244	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00248	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  0024a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0024e	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  00250	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00254	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  00256	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  0025a	6a 05		 push	 5
  0025c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  00263	5a		 pop	 edx
$LL104@LoadString@4:
  00264	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0026a	83 c0 04	 add	 eax, 4
  0026d	4a		 dec	 edx
  0026e	75 f4		 jne	 SHORT $LL104@LoadString@4
  00270	6a 14		 push	 20			; 00000014H
  00272	58		 pop	 eax
$LL101@LoadString@4:
  00273	8b c8		 mov	 ecx, eax
  00275	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0027b	79 05		 jns	 SHORT $LN112@LoadString@4
  0027d	49		 dec	 ecx
  0027e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00281	41		 inc	 ecx
$LN112@LoadString@4:
  00282	b2 ed		 mov	 dl, -19			; ffffffedH
  00284	2a d1		 sub	 dl, cl
  00286	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0028a	40		 inc	 eax
  0028b	83 f8 16	 cmp	 eax, 22			; 00000016H
  0028e	7c e3		 jl	 SHORT $LL101@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  00290	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00293	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00296	57		 push	 edi
  00297	56		 push	 esi
  00298	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0029b	50		 push	 eax
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a5	5f		 pop	 edi
  002a6	5e		 pop	 esi
  002a7	33 cd		 xor	 ecx, ebp
  002a9	5b		 pop	 ebx
  002aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002af	c9		 leave
  002b0	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ; ioINILoader::LoadFloat_e<28>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<28>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 a9 02 00
	00		 je	 $LN96@LoadFloat_@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 92 02 00
	00		 je	 $LN95@LoadFloat_@4
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 7a 02 00
	00		 je	 $LN94@LoadFloat_@4
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 62 02 00
	00		 je	 $LN93@LoadFloat_@4
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 4b 02 00
	00		 je	 $LN92@LoadFloat_@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 35 02 00
	00		 je	 $LN91@LoadFloat_@4
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 20 02 00
	00		 je	 $LN90@LoadFloat_@4
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 0a 02 00
	00		 je	 $LN89@LoadFloat_@4
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 f3 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 dd 01 00
	00		 je	 $LN87@LoadFloat_@4
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 c8 01 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 b2 01 00
	00		 je	 $LN85@LoadFloat_@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 9b 01 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 85 01 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 70 01 00
	00		 je	 $LN82@LoadFloat_@4
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 5a 01 00
	00		 je	 $LN81@LoadFloat_@4
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 43 01 00
	00		 je	 $LN80@LoadFloat_@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 2d 01 00
	00		 je	 $LN79@LoadFloat_@4
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 18 01 00
	00		 je	 $LN78@LoadFloat_@4
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 02 01 00
	00		 je	 $LN77@LoadFloat_@4
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 eb 00 00
	00		 je	 $LN76@LoadFloat_@4
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 d5 00 00
	00		 je	 $LN75@LoadFloat_@4
  00180	32 d3		 xor	 dl, bl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 c0 00 00
	00		 je	 $LN74@LoadFloat_@4
  00190	32 d1		 xor	 dl, cl
  00192	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 aa 00 00
	00		 je	 $LN73@LoadFloat_@4
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 90 00 00
	00		 je	 $LN72@LoadFloat_@4
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	74 7b		 je	 SHORT $LN71@LoadFloat_@4
  001be	32 d3		 xor	 dl, bl
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001c6	84 d2		 test	 dl, dl
  001c8	74 67		 je	 SHORT $LN70@LoadFloat_@4
  001ca	32 d1		 xor	 dl, cl
  001cc	80 78 1b 00	 cmp	 BYTE PTR [eax+27], 0
  001d0	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	0f 84 f5 00 00
	00		 je	 $LN1@LoadFloat_@4
  001d9	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001dc	84 d2		 test	 dl, dl
  001de	74 48		 je	 SHORT $LN68@LoadFloat_@4
  001e0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001e3	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e6	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e9	84 d2		 test	 dl, dl
  001eb	74 33		 je	 SHORT $LN67@LoadFloat_@4
  001ed	32 d3		 xor	 dl, bl
  001ef	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f2	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f5	84 d2		 test	 dl, dl
  001f7	74 1f		 je	 SHORT $LN66@LoadFloat_@4
  001f9	8a 40 1f	 mov	 al, BYTE PTR [eax+31]
  001fc	32 d1		 xor	 dl, cl
  001fe	88 55 fa	 mov	 BYTE PTR __k$[ebp+30], dl
  00201	84 c0		 test	 al, al
  00203	74 0a		 je	 SHORT $LN65@LoadFloat_@4
  00205	34 ea		 xor	 al, -22			; ffffffeaH
  00207	88 45 fb	 mov	 BYTE PTR __k$[ebp+31], al
  0020a	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN65@LoadFloat_@4:
  0020f	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  00213	e9 b6 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN66@LoadFloat_@4:
  00218	88 4d fa	 mov	 BYTE PTR __k$[ebp+30], cl
  0021b	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN67@LoadFloat_@4:
  00220	88 5d f9	 mov	 BYTE PTR __k$[ebp+29], bl
  00223	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN68@LoadFloat_@4:
  00228	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0022c	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN70@LoadFloat_@4:
  00231	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  00234	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN71@LoadFloat_@4:
  00239	88 5d f5	 mov	 BYTE PTR __k$[ebp+25], bl
  0023c	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN72@LoadFloat_@4:
  00241	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00245	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN73@LoadFloat_@4:
  0024a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0024e	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN74@LoadFloat_@4:
  00250	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00253	eb 79		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  00255	88 5d f1	 mov	 BYTE PTR __k$[ebp+21], bl
  00258	eb 74		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  0025a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0025e	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  00260	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00264	eb 68		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  00266	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00269	eb 63		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  0026b	88 5d ed	 mov	 BYTE PTR __k$[ebp+17], bl
  0026e	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  00270	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00274	eb 58		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  00276	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0027a	eb 52		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  0027c	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0027f	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  00281	88 5d e9	 mov	 BYTE PTR __k$[ebp+13], bl
  00284	eb 48		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00286	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0028a	eb 42		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  0028c	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00290	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  00292	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00295	eb 37		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  00297	88 5d e5	 mov	 BYTE PTR __k$[ebp+9], bl
  0029a	eb 32		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  0029c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002a0	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  002a2	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002a6	eb 26		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  002a8	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  002ab	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  002ad	88 5d e1	 mov	 BYTE PTR __k$[ebp+5], bl
  002b0	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  002b2	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002b6	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  002b8	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002bc	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  002be	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002c2	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  002c4	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002c8	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  002ca	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  002ce	6a 06		 push	 6
  002d0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002d3	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+27], 0
  002d7	5a		 pop	 edx
$LL104@LoadFloat_@4:
  002d8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002de	83 c0 04	 add	 eax, 4
  002e1	4a		 dec	 edx
  002e2	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  002e4	6a 18		 push	 24			; 00000018H
  002e6	58		 pop	 eax
$LL101@LoadFloat_@4:
  002e7	8b c8		 mov	 ecx, eax
  002e9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002ef	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  002f1	49		 dec	 ecx
  002f2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002f5	41		 inc	 ecx
$LN111@LoadFloat_@4:
  002f6	b2 ed		 mov	 dl, -19			; ffffffedH
  002f8	2a d1		 sub	 dl, cl
  002fa	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002fe	40		 inc	 eax
  002ff	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00302	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  00304	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00309	51		 push	 ecx
  0030a	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	50		 push	 eax
  00313	8b ce		 mov	 ecx, esi
  00315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0031b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031e	5e		 pop	 esi
  0031f	33 cd		 xor	 ecx, ebp
  00321	5b		 pop	 ebx
  00322	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00327	c9		 leave
  00328	c2 08 00	 ret	 8
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<28>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<27>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
__k$ = -36						; size = 27
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<27>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 91 02 00
	00		 je	 $LN96@LoadString@5
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 7a 02 00
	00		 je	 $LN95@LoadString@5
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 62 02 00
	00		 je	 $LN94@LoadString@5
  0004c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004f	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 4b 02 00
	00		 je	 $LN93@LoadString@5
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 33 02 00
	00		 je	 $LN92@LoadString@5
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 1d 02 00
	00		 je	 $LN91@LoadString@5
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 07 02 00
	00		 je	 $LN90@LoadString@5
  00090	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00093	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 f1 01 00
	00		 je	 $LN89@LoadString@5
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 db 01 00
	00		 je	 $LN88@LoadString@5
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 c5 01 00
	00		 je	 $LN87@LoadString@5
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 af 01 00
	00		 je	 $LN86@LoadString@5
  000d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d5	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 99 01 00
	00		 je	 $LN85@LoadString@5
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 83 01 00
	00		 je	 $LN84@LoadString@5
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 6d 01 00
	00		 je	 $LN83@LoadString@5
  00104	32 d1		 xor	 dl, cl
  00106	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 57 01 00
	00		 je	 $LN82@LoadString@5
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 41 01 00
	00		 je	 $LN81@LoadString@5
  00125	32 d3		 xor	 dl, bl
  00127	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 2b 01 00
	00		 je	 $LN80@LoadString@5
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 15 01 00
	00		 je	 $LN79@LoadString@5
  00146	32 d1		 xor	 dl, cl
  00148	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 ff 00 00
	00		 je	 $LN78@LoadString@5
  00156	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00159	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	0f 84 e9 00 00
	00		 je	 $LN77@LoadString@5
  00167	32 d3		 xor	 dl, bl
  00169	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 d3 00 00
	00		 je	 $LN76@LoadString@5
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	0f 84 bd 00 00
	00		 je	 $LN75@LoadString@5
  00188	32 d1		 xor	 dl, cl
  0018a	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  0018d	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00190	84 d2		 test	 dl, dl
  00192	0f 84 a7 00 00
	00		 je	 $LN74@LoadString@5
  00198	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0019b	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  0019e	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  001a1	84 d2		 test	 dl, dl
  001a3	0f 84 91 00 00
	00		 je	 $LN73@LoadString@5
  001a9	32 d3		 xor	 dl, bl
  001ab	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001ae	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001b1	84 d2		 test	 dl, dl
  001b3	74 7c		 je	 SHORT $LN72@LoadString@5
  001b5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b8	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001bb	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001be	84 d2		 test	 dl, dl
  001c0	74 67		 je	 SHORT $LN71@LoadString@5
  001c2	32 d1		 xor	 dl, cl
  001c4	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  001c8	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001cb	0f 84 ed 00 00
	00		 je	 $LN111@LoadString@5
  001d1	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001d4	84 d2		 test	 dl, dl
  001d6	74 49		 je	 SHORT $LN69@LoadString@5
  001d8	32 d3		 xor	 dl, bl
  001da	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001dd	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001e0	84 d2		 test	 dl, dl
  001e2	74 34		 je	 SHORT $LN68@LoadString@5
  001e4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001e7	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001ea	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001ed	84 d2		 test	 dl, dl
  001ef	74 1f		 je	 SHORT $LN67@LoadString@5
  001f1	8a 40 1e	 mov	 al, BYTE PTR [eax+30]
  001f4	32 d1		 xor	 dl, cl
  001f6	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f9	84 c0		 test	 al, al
  001fb	74 0a		 je	 SHORT $LN66@LoadString@5
  001fd	34 eb		 xor	 al, -21			; ffffffebH
  001ff	88 45 fa	 mov	 BYTE PTR __k$[ebp+30], al
  00202	e9 b7 00 00 00	 jmp	 $LN111@LoadString@5
$LN66@LoadString@5:
  00207	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+30], -21 ; ffffffebH
  0020b	e9 ae 00 00 00	 jmp	 $LN111@LoadString@5
$LN67@LoadString@5:
  00210	88 4d f9	 mov	 BYTE PTR __k$[ebp+29], cl
  00213	e9 a6 00 00 00	 jmp	 $LN111@LoadString@5
$LN68@LoadString@5:
  00218	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0021c	e9 9d 00 00 00	 jmp	 $LN111@LoadString@5
$LN69@LoadString@5:
  00221	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  00224	e9 95 00 00 00	 jmp	 $LN111@LoadString@5
$LN71@LoadString@5:
  00229	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  0022c	e9 8d 00 00 00	 jmp	 $LN111@LoadString@5
$LN72@LoadString@5:
  00231	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00235	e9 84 00 00 00	 jmp	 $LN111@LoadString@5
$LN73@LoadString@5:
  0023a	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  0023d	eb 7f		 jmp	 SHORT $LN111@LoadString@5
$LN74@LoadString@5:
  0023f	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00243	eb 79		 jmp	 SHORT $LN111@LoadString@5
$LN75@LoadString@5:
  00245	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00248	eb 74		 jmp	 SHORT $LN111@LoadString@5
$LN76@LoadString@5:
  0024a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0024e	eb 6e		 jmp	 SHORT $LN111@LoadString@5
$LN77@LoadString@5:
  00250	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  00253	eb 69		 jmp	 SHORT $LN111@LoadString@5
$LN78@LoadString@5:
  00255	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00259	eb 63		 jmp	 SHORT $LN111@LoadString@5
$LN79@LoadString@5:
  0025b	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  0025e	eb 5e		 jmp	 SHORT $LN111@LoadString@5
$LN80@LoadString@5:
  00260	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00264	eb 58		 jmp	 SHORT $LN111@LoadString@5
$LN81@LoadString@5:
  00266	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00269	eb 53		 jmp	 SHORT $LN111@LoadString@5
$LN82@LoadString@5:
  0026b	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0026f	eb 4d		 jmp	 SHORT $LN111@LoadString@5
$LN83@LoadString@5:
  00271	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  00274	eb 48		 jmp	 SHORT $LN111@LoadString@5
$LN84@LoadString@5:
  00276	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0027a	eb 42		 jmp	 SHORT $LN111@LoadString@5
$LN85@LoadString@5:
  0027c	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  0027f	eb 3d		 jmp	 SHORT $LN111@LoadString@5
$LN86@LoadString@5:
  00281	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00285	eb 37		 jmp	 SHORT $LN111@LoadString@5
$LN87@LoadString@5:
  00287	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  0028a	eb 32		 jmp	 SHORT $LN111@LoadString@5
$LN88@LoadString@5:
  0028c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00290	eb 2c		 jmp	 SHORT $LN111@LoadString@5
$LN89@LoadString@5:
  00292	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  00295	eb 27		 jmp	 SHORT $LN111@LoadString@5
$LN90@LoadString@5:
  00297	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0029b	eb 21		 jmp	 SHORT $LN111@LoadString@5
$LN91@LoadString@5:
  0029d	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  002a0	eb 1c		 jmp	 SHORT $LN111@LoadString@5
$LN92@LoadString@5:
  002a2	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002a6	eb 16		 jmp	 SHORT $LN111@LoadString@5
$LN93@LoadString@5:
  002a8	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002ac	eb 10		 jmp	 SHORT $LN111@LoadString@5
$LN94@LoadString@5:
  002ae	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002b2	eb 0a		 jmp	 SHORT $LN111@LoadString@5
$LN95@LoadString@5:
  002b4	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002b8	eb 04		 jmp	 SHORT $LN111@LoadString@5
$LN96@LoadString@5:
  002ba	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@5:
  002be	6a 06		 push	 6
  002c0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002c3	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+26], 0
  002c7	5a		 pop	 edx
$LL104@LoadString@5:
  002c8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ce	83 c0 04	 add	 eax, 4
  002d1	4a		 dec	 edx
  002d2	75 f4		 jne	 SHORT $LL104@LoadString@5
  002d4	6a 18		 push	 24			; 00000018H
  002d6	58		 pop	 eax
$LL101@LoadString@5:
  002d7	8b c8		 mov	 ecx, eax
  002d9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002df	79 05		 jns	 SHORT $LN112@LoadString@5
  002e1	49		 dec	 ecx
  002e2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002e5	41		 inc	 ecx
$LN112@LoadString@5:
  002e6	b2 ed		 mov	 dl, -19			; ffffffedH
  002e8	2a d1		 sub	 dl, cl
  002ea	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002ee	40		 inc	 eax
  002ef	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002f2	7c e3		 jl	 SHORT $LL101@LoadString@5

; 163  : 		LoadString(_k, d, b, i);

  002f4	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002f7	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002fa	57		 push	 edi
  002fb	56		 push	 esi
  002fc	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002ff	50		 push	 eax
  00300	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00306	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00309	5f		 pop	 edi
  0030a	5e		 pop	 esi
  0030b	33 cd		 xor	 ecx, ebp
  0030d	5b		 pop	 ebx
  0030e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00313	c9		 leave
  00314	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BL@@ioINILoader@@QAEXAAY0BL@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<27>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0CA@@ioINILoader@@QAEMAAY0CA@$$CBDM@Z ; ioINILoader::LoadFloat_e<32>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0CA@@ioINILoader@@QAEMAAY0CA@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0CA@@ioINILoader@@QAEMAAY0CA@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<32>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 0d 03 00
	00		 je	 $LN96@LoadFloat_@5
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 f6 02 00
	00		 je	 $LN95@LoadFloat_@5
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 de 02 00
	00		 je	 $LN94@LoadFloat_@5
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 c6 02 00
	00		 je	 $LN93@LoadFloat_@5
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 af 02 00
	00		 je	 $LN92@LoadFloat_@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 99 02 00
	00		 je	 $LN91@LoadFloat_@5
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 84 02 00
	00		 je	 $LN90@LoadFloat_@5
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 6e 02 00
	00		 je	 $LN89@LoadFloat_@5
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 57 02 00
	00		 je	 $LN88@LoadFloat_@5
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 41 02 00
	00		 je	 $LN87@LoadFloat_@5
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 2c 02 00
	00		 je	 $LN86@LoadFloat_@5
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 16 02 00
	00		 je	 $LN85@LoadFloat_@5
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ff 01 00
	00		 je	 $LN84@LoadFloat_@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 e9 01 00
	00		 je	 $LN83@LoadFloat_@5
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 d4 01 00
	00		 je	 $LN82@LoadFloat_@5
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 be 01 00
	00		 je	 $LN81@LoadFloat_@5
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 a7 01 00
	00		 je	 $LN80@LoadFloat_@5
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 91 01 00
	00		 je	 $LN79@LoadFloat_@5
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 7c 01 00
	00		 je	 $LN78@LoadFloat_@5
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 66 01 00
	00		 je	 $LN77@LoadFloat_@5
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 4f 01 00
	00		 je	 $LN76@LoadFloat_@5
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 39 01 00
	00		 je	 $LN75@LoadFloat_@5
  00180	32 d3		 xor	 dl, bl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 24 01 00
	00		 je	 $LN74@LoadFloat_@5
  00190	32 d1		 xor	 dl, cl
  00192	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 0e 01 00
	00		 je	 $LN73@LoadFloat_@5
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 f4 00 00
	00		 je	 $LN72@LoadFloat_@5
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 db 00 00
	00		 je	 $LN71@LoadFloat_@5
  001c2	32 d3		 xor	 dl, bl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 c3 00 00
	00		 je	 $LN70@LoadFloat_@5
  001d2	32 d1		 xor	 dl, cl
  001d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d7	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001da	84 d2		 test	 dl, dl
  001dc	0f 84 aa 00 00
	00		 je	 $LN69@LoadFloat_@5
  001e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	0f 84 90 00 00
	00		 je	 $LN68@LoadFloat_@5
  001f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f6	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f9	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001fc	84 d2		 test	 dl, dl
  001fe	74 7b		 je	 SHORT $LN67@LoadFloat_@5
  00200	32 d3		 xor	 dl, bl
  00202	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  00205	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  00208	84 d2		 test	 dl, dl
  0020a	74 67		 je	 SHORT $LN66@LoadFloat_@5
  0020c	32 d1		 xor	 dl, cl
  0020e	80 78 1f 00	 cmp	 BYTE PTR [eax+31], 0
  00212	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00215	0f 84 17 01 00
	00		 je	 $LN1@LoadFloat_@5
  0021b	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0021e	84 d2		 test	 dl, dl
  00220	74 48		 je	 SHORT $LN64@LoadFloat_@5
  00222	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00225	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00228	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  0022b	84 d2		 test	 dl, dl
  0022d	74 33		 je	 SHORT $LN63@LoadFloat_@5
  0022f	32 d3		 xor	 dl, bl
  00231	88 55 f9	 mov	 BYTE PTR __k$[ebp+33], dl
  00234	8a 50 22	 mov	 dl, BYTE PTR [eax+34]
  00237	84 d2		 test	 dl, dl
  00239	74 1f		 je	 SHORT $LN62@LoadFloat_@5
  0023b	8a 40 23	 mov	 al, BYTE PTR [eax+35]
  0023e	32 d1		 xor	 dl, cl
  00240	88 55 fa	 mov	 BYTE PTR __k$[ebp+34], dl
  00243	84 c0		 test	 al, al
  00245	74 0a		 je	 SHORT $LN61@LoadFloat_@5
  00247	34 ea		 xor	 al, -22			; ffffffeaH
  00249	88 45 fb	 mov	 BYTE PTR __k$[ebp+35], al
  0024c	e9 e1 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN61@LoadFloat_@5:
  00251	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+35], -22 ; ffffffeaH
  00255	e9 d8 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN62@LoadFloat_@5:
  0025a	88 4d fa	 mov	 BYTE PTR __k$[ebp+34], cl
  0025d	e9 d0 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN63@LoadFloat_@5:
  00262	88 5d f9	 mov	 BYTE PTR __k$[ebp+33], bl
  00265	e9 c8 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN64@LoadFloat_@5:
  0026a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  0026e	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN66@LoadFloat_@5:
  00273	88 4d f6	 mov	 BYTE PTR __k$[ebp+30], cl
  00276	e9 b7 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN67@LoadFloat_@5:
  0027b	88 5d f5	 mov	 BYTE PTR __k$[ebp+29], bl
  0027e	e9 af 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN68@LoadFloat_@5:
  00283	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00287	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN69@LoadFloat_@5:
  0028c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  00290	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN70@LoadFloat_@5:
  00295	88 4d f2	 mov	 BYTE PTR __k$[ebp+26], cl
  00298	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN71@LoadFloat_@5:
  0029d	88 5d f1	 mov	 BYTE PTR __k$[ebp+25], bl
  002a0	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN72@LoadFloat_@5:
  002a5	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002a9	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN73@LoadFloat_@5:
  002ae	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  002b2	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN74@LoadFloat_@5:
  002b4	88 4d ee	 mov	 BYTE PTR __k$[ebp+22], cl
  002b7	eb 79		 jmp	 SHORT $LN1@LoadFloat_@5
$LN75@LoadFloat_@5:
  002b9	88 5d ed	 mov	 BYTE PTR __k$[ebp+21], bl
  002bc	eb 74		 jmp	 SHORT $LN1@LoadFloat_@5
$LN76@LoadFloat_@5:
  002be	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002c2	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN77@LoadFloat_@5:
  002c4	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  002c8	eb 68		 jmp	 SHORT $LN1@LoadFloat_@5
$LN78@LoadFloat_@5:
  002ca	88 4d ea	 mov	 BYTE PTR __k$[ebp+18], cl
  002cd	eb 63		 jmp	 SHORT $LN1@LoadFloat_@5
$LN79@LoadFloat_@5:
  002cf	88 5d e9	 mov	 BYTE PTR __k$[ebp+17], bl
  002d2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN80@LoadFloat_@5:
  002d4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002d8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@5
$LN81@LoadFloat_@5:
  002da	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  002de	eb 52		 jmp	 SHORT $LN1@LoadFloat_@5
$LN82@LoadFloat_@5:
  002e0	88 4d e6	 mov	 BYTE PTR __k$[ebp+14], cl
  002e3	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@5
$LN83@LoadFloat_@5:
  002e5	88 5d e5	 mov	 BYTE PTR __k$[ebp+13], bl
  002e8	eb 48		 jmp	 SHORT $LN1@LoadFloat_@5
$LN84@LoadFloat_@5:
  002ea	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002ee	eb 42		 jmp	 SHORT $LN1@LoadFloat_@5
$LN85@LoadFloat_@5:
  002f0	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  002f4	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN86@LoadFloat_@5:
  002f6	88 4d e2	 mov	 BYTE PTR __k$[ebp+10], cl
  002f9	eb 37		 jmp	 SHORT $LN1@LoadFloat_@5
$LN87@LoadFloat_@5:
  002fb	88 5d e1	 mov	 BYTE PTR __k$[ebp+9], bl
  002fe	eb 32		 jmp	 SHORT $LN1@LoadFloat_@5
$LN88@LoadFloat_@5:
  00300	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00304	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN89@LoadFloat_@5:
  00306	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0030a	eb 26		 jmp	 SHORT $LN1@LoadFloat_@5
$LN90@LoadFloat_@5:
  0030c	88 4d de	 mov	 BYTE PTR __k$[ebp+6], cl
  0030f	eb 21		 jmp	 SHORT $LN1@LoadFloat_@5
$LN91@LoadFloat_@5:
  00311	88 5d dd	 mov	 BYTE PTR __k$[ebp+5], bl
  00314	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN92@LoadFloat_@5:
  00316	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0031a	eb 16		 jmp	 SHORT $LN1@LoadFloat_@5
$LN93@LoadFloat_@5:
  0031c	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00320	eb 10		 jmp	 SHORT $LN1@LoadFloat_@5
$LN94@LoadFloat_@5:
  00322	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00326	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@5
$LN95@LoadFloat_@5:
  00328	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0032c	eb 04		 jmp	 SHORT $LN1@LoadFloat_@5
$LN96@LoadFloat_@5:
  0032e	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@5:
  00332	6a 07		 push	 7
  00334	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00337	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+31], 0
  0033b	5a		 pop	 edx
$LL104@LoadFloat_@5:
  0033c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00342	83 c0 04	 add	 eax, 4
  00345	4a		 dec	 edx
  00346	75 f4		 jne	 SHORT $LL104@LoadFloat_@5
  00348	6a 1c		 push	 28			; 0000001cH
  0034a	58		 pop	 eax
$LL101@LoadFloat_@5:
  0034b	8b c8		 mov	 ecx, eax
  0034d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00353	79 05		 jns	 SHORT $LN111@LoadFloat_@5
  00355	49		 dec	 ecx
  00356	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00359	41		 inc	 ecx
$LN111@LoadFloat_@5:
  0035a	b2 ed		 mov	 dl, -19			; ffffffedH
  0035c	2a d1		 sub	 dl, cl
  0035e	30 54 05 d8	 xor	 BYTE PTR __k$[ebp+eax], dl
  00362	40		 inc	 eax
  00363	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00366	7c e3		 jl	 SHORT $LL101@LoadFloat_@5

; 137  : 		return LoadFloat(_k, f);

  00368	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0036d	51		 push	 ecx
  0036e	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	50		 push	 eax
  00377	8b ce		 mov	 ecx, esi
  00379	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0037f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00382	5e		 pop	 esi
  00383	33 cd		 xor	 ecx, ebp
  00385	5b		 pop	 ebx
  00386	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038b	c9		 leave
  0038c	c2 08 00	 ret	 8
??$LoadFloat_e@$0CA@@ioINILoader@@QAEMAAY0CA@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<32>
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z:PROC ; ioDummyChar::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioengineergatlingdummy.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioEngineerGatlingDummy@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -304				; size = 4
_szBuf$ = -300						; size = 260
__k$613462 = -40					; size = 32
__k$612712 = -40					; size = 30
__k$613324 = -36					; size = 27
__k$613305 = -36					; size = 28
__k$612962 = -36					; size = 27
__k$612587 = -36					; size = 25
__k$613087 = -32					; size = 23
__k$612837 = -32					; size = 22
__k$612462 = -32					; size = 24
__k$612400 = -28					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioEngineerGatlingDummy@@UAEXAAVioINILoader@@@Z PROC ; ioEngineerGatlingDummy::LoadProperty, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 24   : 	ioDummyChar::LoadProperty( rkLoader );

  00018	57		 push	 edi
  00019	8b f1		 mov	 esi, ecx

; 47   : 
; 48   : 	//Air Trace Attack
; 49   : 	rkLoader.LoadString_e( "air_trace_attack_animation", "", szBuf, MAX_PATH );

  0001b	89 bd d0 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00021	e8 00 00 00 00	 call	 ?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z ; ioDummyChar::LoadProperty
  00026	68 03 01 00 00	 push	 259			; 00000103H
  0002b	8d 85 d5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00031	6a 00		 push	 0
  00033	50		 push	 eax
  00034	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	6a 04		 push	 4
  00045	c7 45 e4 8e 84
	8a 98		 mov	 DWORD PTR __k$612400[ebp], -1735752562 ; 988a848eH
  0004c	c7 45 e8 8a 85
	85 8d		 mov	 DWORD PTR __k$612400[ebp+4], -1920629366 ; 8d85858aH
  00053	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$612400[ebp+8], -2088399438 ; 83858db2H
  0005a	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$612400[ebp+12], -2086695552 ; 839f8d80H
  00061	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$612400[ebp+16], 33410 ; 00008282H
  00067	8d 45 e4	 lea	 eax, DWORD PTR __k$612400[ebp]
  0006a	c6 45 f6 00	 mov	 BYTE PTR __k$612400[ebp+18], 0
  0006e	59		 pop	 ecx
$LL106@LoadProper:

; 25   : 
; 26   : 	char szBuf[MAX_PATH] = "";
; 27   : 
; 28   : 	//Charging
; 29   : 	rkLoader.LoadString_e( "charging_animation", "", szBuf, MAX_PATH );

  0006f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00075	83 c0 04	 add	 eax, 4
  00078	49		 dec	 ecx
  00079	75 f4		 jne	 SHORT $LL106@LoadProper
  0007b	6a 10		 push	 16			; 00000010H
  0007d	58		 pop	 eax
$LL103@LoadProper:
  0007e	8b c8		 mov	 ecx, eax
  00080	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00086	79 05		 jns	 SHORT $LN1103@LoadProper
  00088	49		 dec	 ecx
  00089	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0008c	41		 inc	 ecx
$LN1103@LoadProper:
  0008d	b2 ed		 mov	 dl, -19			; ffffffedH
  0008f	2a d1		 sub	 dl, cl
  00091	30 54 05 e4	 xor	 BYTE PTR __k$612400[ebp+eax], dl
  00095	40		 inc	 eax
  00096	83 f8 12	 cmp	 eax, 18			; 00000012H
  00099	7c e3		 jl	 SHORT $LL103@LoadProper
  0009b	53		 push	 ebx
  0009c	68 04 01 00 00	 push	 260			; 00000104H
  000a1	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000a7	50		 push	 eax
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000ad	8d 45 e4	 lea	 eax, DWORD PTR __k$612400[ebp]
  000b0	8b cf		 mov	 ecx, edi
  000b2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  000b8	50		 push	 eax
  000b9	ff d7		 call	 edi

; 30   : 	m_szChargingAnimation = szBuf;	

  000bb	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000c1	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000c7	50		 push	 eax
  000c8	8d 8e 84 14 00
	00		 lea	 ecx, DWORD PTR [esi+5252]
  000ce	ff d3		 call	 ebx
  000d0	6a 05		 push	 5

; 31   : 	m_fChargingAnimationRate = rkLoader.LoadFloat_e( "charging_animation_rate", 1.0f );

  000d2	c7 45 e0 8e 84
	8a 98		 mov	 DWORD PTR __k$612462[ebp], -1735752562 ; 988a848eH
  000d9	c7 45 e4 8a 85
	85 8d		 mov	 DWORD PTR __k$612462[ebp+4], -1920629366 ; 8d85858aH
  000e0	c7 45 e8 b2 8d
	85 83		 mov	 DWORD PTR __k$612462[ebp+8], -2088399438 ; 83858db2H
  000e7	c7 45 ec 80 8d
	9f 83		 mov	 DWORD PTR __k$612462[ebp+12], -2086695552 ; 839f8d80H
  000ee	c7 45 f0 82 82
	b4 98		 mov	 DWORD PTR __k$612462[ebp+16], -1733000574 ; 98b48282H
  000f5	8d 45 e0	 lea	 eax, DWORD PTR __k$612462[ebp]
  000f8	c7 45 f4 8c 98
	8e 00		 mov	 DWORD PTR __k$612462[ebp+20], 9345164 ; 008e988cH
  000ff	59		 pop	 ecx
$LL212@LoadProper:
  00100	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00106	83 c0 04	 add	 eax, 4
  00109	49		 dec	 ecx
  0010a	75 f4		 jne	 SHORT $LL212@LoadProper
  0010c	6a 14		 push	 20			; 00000014H
  0010e	58		 pop	 eax
$LL209@LoadProper:
  0010f	8b c8		 mov	 ecx, eax
  00111	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00117	79 05		 jns	 SHORT $LN1104@LoadProper
  00119	49		 dec	 ecx
  0011a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0011d	41		 inc	 ecx
$LN1104@LoadProper:
  0011e	b2 ed		 mov	 dl, -19			; ffffffedH
  00120	2a d1		 sub	 dl, cl
  00122	30 54 05 e0	 xor	 BYTE PTR __k$612462[ebp+eax], dl
  00126	40		 inc	 eax
  00127	83 f8 17	 cmp	 eax, 23			; 00000017H
  0012a	7c e3		 jl	 SHORT $LL209@LoadProper
  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00134	51		 push	 ecx
  00135	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0013b	8d 45 e0	 lea	 eax, DWORD PTR __k$612462[ebp]
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	50		 push	 eax
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0014a	d9 9e 94 14 00
	00		 fstp	 DWORD PTR [esi+5268]
  00150	6a 06		 push	 6

; 32   : 
; 33   : 	//Bullet Attack	
; 34   : 	rkLoader.LoadString_e( "gatling_attack_animation", "", szBuf, MAX_PATH );

  00152	c7 45 dc 8a 8d
	9f 86		 mov	 DWORD PTR __k$612587[ebp], -2036363894 ; 869f8d8aH
  00159	c7 45 e0 84 82
	8c b5		 mov	 DWORD PTR __k$612587[ebp+4], -1249082748 ; b58c8284H
  00160	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$612587[ebp+8], -1952474996 ; 8b9f988cH
  00167	c7 45 e8 8e 87
	b4 8b		 mov	 DWORD PTR __k$612587[ebp+12], -1951103090 ; 8bb4878eH
  0016e	c7 45 ec 83 85
	86 8b		 mov	 DWORD PTR __k$612587[ebp+16], -1954118269 ; 8b868583H
  00175	c7 45 f0 99 85
	84 84		 mov	 DWORD PTR __k$612587[ebp+20], -2071689831 ; 84848599H
  0017c	8d 45 dc	 lea	 eax, DWORD PTR __k$612587[ebp]
  0017f	c6 45 f4 00	 mov	 BYTE PTR __k$612587[ebp+24], 0
  00183	59		 pop	 ecx
$LL318@LoadProper:
  00184	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0018a	83 c0 04	 add	 eax, 4
  0018d	49		 dec	 ecx
  0018e	75 f4		 jne	 SHORT $LL318@LoadProper
  00190	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00196	68 04 01 00 00	 push	 260			; 00000104H
  0019b	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001a1	50		 push	 eax
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001a7	8d 45 dc	 lea	 eax, DWORD PTR __k$612587[ebp]
  001aa	50		 push	 eax
  001ab	ff d7		 call	 edi

; 35   : 	m_szGatlingAttackAnimation = szBuf;	

  001ad	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001b3	50		 push	 eax
  001b4	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  001ba	ff d3		 call	 ebx
  001bc	6a 07		 push	 7

; 36   : 	m_fGatlingAttackAnimationRate = rkLoader.LoadFloat_e( "gatling_attack_animation_rate", 1.0f );

  001be	c7 45 d8 8a 8d
	9f 86		 mov	 DWORD PTR __k$612712[ebp], -2036363894 ; 869f8d8aH
  001c5	c7 45 dc 84 82
	8c b5		 mov	 DWORD PTR __k$612712[ebp+4], -1249082748 ; b58c8284H
  001cc	c7 45 e0 8c 98
	9f 8b		 mov	 DWORD PTR __k$612712[ebp+8], -1952474996 ; 8b9f988cH
  001d3	c7 45 e4 8e 87
	b4 8b		 mov	 DWORD PTR __k$612712[ebp+12], -1951103090 ; 8bb4878eH
  001da	c7 45 e8 83 85
	86 8b		 mov	 DWORD PTR __k$612712[ebp+16], -1954118269 ; 8b868583H
  001e1	c7 45 ec 99 85
	84 84		 mov	 DWORD PTR __k$612712[ebp+20], -2071689831 ; 84848599H
  001e8	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$612712[ebp+24], -1635082574 ; 9e8a9eb2H
  001ef	8d 45 d8	 lea	 eax, DWORD PTR __k$612712[ebp]
  001f2	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$612712[ebp+28], 136 ; 00000088H
  001f8	59		 pop	 ecx
$LL424@LoadProper:
  001f9	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ff	83 c0 04	 add	 eax, 4
  00202	49		 dec	 ecx
  00203	75 f4		 jne	 SHORT $LL424@LoadProper
  00205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020d	80 75 f4 ed	 xor	 BYTE PTR __k$612712[ebp+28], -19 ; ffffffedH
  00211	51		 push	 ecx
  00212	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00218	8d 45 d8	 lea	 eax, DWORD PTR __k$612712[ebp]
  0021b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00220	50		 push	 eax
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00227	d9 9e a8 14 00
	00		 fstp	 DWORD PTR [esi+5288]
  0022d	6a 05		 push	 5

; 37   : 
; 38   : 	//Beam Attack
; 39   : 	rkLoader.LoadString_e( "beam_attack_animation", "", szBuf, MAX_PATH );

  0022f	c7 45 e0 8f 89
	8a 87		 mov	 DWORD PTR __k$612837[ebp], -2020963953 ; 878a898fH
  00236	c7 45 e4 b2 8d
	9f 9e		 mov	 DWORD PTR __k$612837[ebp+4], -1633710670 ; 9e9f8db2H
  0023d	c7 45 e8 8c 8f
	80 b5		 mov	 DWORD PTR __k$612837[ebp+8], -1249865844 ; b5808f8cH
  00244	c7 45 ec 8c 82
	82 87		 mov	 DWORD PTR __k$612837[ebp+12], -2021490036 ; 8782828cH
  0024b	c7 45 f0 8c 98
	82 85		 mov	 DWORD PTR __k$612837[ebp+16], -2055038836 ; 8582988cH
  00252	8d 45 e0	 lea	 eax, DWORD PTR __k$612837[ebp]
  00255	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$612837[ebp+20], 131 ; 00000083H
  0025b	59		 pop	 ecx
$LL530@LoadProper:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	49		 dec	 ecx
  00266	75 f4		 jne	 SHORT $LL530@LoadProper
  00268	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0026e	80 75 f4 ed	 xor	 BYTE PTR __k$612837[ebp+20], -19 ; ffffffedH
  00272	68 04 01 00 00	 push	 260			; 00000104H
  00277	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0027d	50		 push	 eax
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00283	8d 45 e0	 lea	 eax, DWORD PTR __k$612837[ebp]
  00286	50		 push	 eax
  00287	ff d7		 call	 edi

; 40   : 	m_szBeamAttackAnimation = szBuf;

  00289	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0028f	50		 push	 eax
  00290	8d 8e ac 14 00
	00		 lea	 ecx, DWORD PTR [esi+5292]
  00296	ff d3		 call	 ebx
  00298	6a 06		 push	 6

; 41   : 	m_fBeamAttackAnimationRate = rkLoader.LoadFloat_e( "beam_attack_animation_rate", 1.0f );

  0029a	c7 45 dc 8f 89
	8a 87		 mov	 DWORD PTR __k$612962[ebp], -2020963953 ; 878a898fH
  002a1	c7 45 e0 b2 8d
	9f 9e		 mov	 DWORD PTR __k$612962[ebp+4], -1633710670 ; 9e9f8db2H
  002a8	c7 45 e4 8c 8f
	80 b5		 mov	 DWORD PTR __k$612962[ebp+8], -1249865844 ; b5808f8cH
  002af	c7 45 e8 8c 82
	82 87		 mov	 DWORD PTR __k$612962[ebp+12], -2021490036 ; 8782828cH
  002b6	c7 45 ec 8c 98
	82 85		 mov	 DWORD PTR __k$612962[ebp+16], -2055038836 ; 8582988cH
  002bd	c7 45 f0 83 b3
	99 8b		 mov	 DWORD PTR __k$612962[ebp+20], -1952861309 ; 8b99b383H
  002c4	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$612962[ebp+24], 35225 ; 00008999H
  002ca	8d 45 dc	 lea	 eax, DWORD PTR __k$612962[ebp]
  002cd	c6 45 f6 00	 mov	 BYTE PTR __k$612962[ebp+26], 0
  002d1	59		 pop	 ecx
$LL636@LoadProper:
  002d2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002d8	83 c0 04	 add	 eax, 4
  002db	49		 dec	 ecx
  002dc	75 f4		 jne	 SHORT $LL636@LoadProper
  002de	6a 18		 push	 24			; 00000018H
  002e0	58		 pop	 eax
$LL633@LoadProper:
  002e1	8b c8		 mov	 ecx, eax
  002e3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002e9	79 05		 jns	 SHORT $LN1105@LoadProper
  002eb	49		 dec	 ecx
  002ec	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002ef	41		 inc	 ecx
$LN1105@LoadProper:
  002f0	b2 ed		 mov	 dl, -19			; ffffffedH
  002f2	2a d1		 sub	 dl, cl
  002f4	30 54 05 dc	 xor	 BYTE PTR __k$612962[ebp+eax], dl
  002f8	40		 inc	 eax
  002f9	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002fc	7c e3		 jl	 SHORT $LL633@LoadProper
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00306	51		 push	 ecx
  00307	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0030d	8d 45 dc	 lea	 eax, DWORD PTR __k$612962[ebp]
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	50		 push	 eax
  00316	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0031c	d9 9e bc 14 00
	00		 fstp	 DWORD PTR [esi+5308]
  00322	6a 05		 push	 5

; 42   : 
; 43   : 	//ShockAttack
; 44   : 	rkLoader.LoadString_e( "shock_attack_animation", "", szBuf, MAX_PATH );

  00324	c7 45 e0 9e 84
	84 89		 mov	 DWORD PTR __k$613087[ebp], -1987804002 ; 8984849eH
  0032b	c7 45 e4 86 b3
	8a 9e		 mov	 DWORD PTR __k$613087[ebp+4], -1635077242 ; 9e8ab386H
  00332	c7 45 e8 99 8d
	88 81		 mov	 DWORD PTR __k$613087[ebp+8], -2121757287 ; 81888d99H
  00339	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$613087[ebp+12], -2088399438 ; 83858db2H
  00340	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$613087[ebp+16], -2086695552 ; 839f8d80H
  00347	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$613087[ebp+20], 33410 ; 00008282H
  0034d	8d 45 e0	 lea	 eax, DWORD PTR __k$613087[ebp]
  00350	c6 45 f6 00	 mov	 BYTE PTR __k$613087[ebp+22], 0
  00354	59		 pop	 ecx
$LL742@LoadProper:
  00355	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0035b	83 c0 04	 add	 eax, 4
  0035e	49		 dec	 ecx
  0035f	75 f4		 jne	 SHORT $LL742@LoadProper
  00361	6a 14		 push	 20			; 00000014H
  00363	58		 pop	 eax
$LL739@LoadProper:
  00364	8b c8		 mov	 ecx, eax
  00366	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0036c	79 05		 jns	 SHORT $LN1106@LoadProper
  0036e	49		 dec	 ecx
  0036f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00372	41		 inc	 ecx
$LN1106@LoadProper:
  00373	b2 ed		 mov	 dl, -19			; ffffffedH
  00375	2a d1		 sub	 dl, cl
  00377	30 54 05 e0	 xor	 BYTE PTR __k$613087[ebp+eax], dl
  0037b	40		 inc	 eax
  0037c	83 f8 16	 cmp	 eax, 22			; 00000016H
  0037f	7c e3		 jl	 SHORT $LL739@LoadProper
  00381	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00387	68 04 01 00 00	 push	 260			; 00000104H
  0038c	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00392	50		 push	 eax
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00398	8d 45 e0	 lea	 eax, DWORD PTR __k$613087[ebp]
  0039b	50		 push	 eax
  0039c	ff d7		 call	 edi

; 45   : 	m_szShockAttackAnimation = szBuf;

  0039e	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003a4	50		 push	 eax
  003a5	8d 8e c0 14 00
	00		 lea	 ecx, DWORD PTR [esi+5312]
  003ab	ff d3		 call	 ebx
  003ad	6a 06		 push	 6

; 46   : 	m_fShockAttackAnimationRate = rkLoader.LoadFloat_e( "shock_attack_animation_rate", 1.0f );

  003af	c7 45 dc 9e 84
	84 89		 mov	 DWORD PTR __k$613305[ebp], -1987804002 ; 8984849eH
  003b6	c7 45 e0 86 b3
	8a 9e		 mov	 DWORD PTR __k$613305[ebp+4], -1635077242 ; 9e8ab386H
  003bd	c7 45 e4 99 8d
	88 81		 mov	 DWORD PTR __k$613305[ebp+8], -2121757287 ; 81888d99H
  003c4	c7 45 e8 b2 8d
	85 83		 mov	 DWORD PTR __k$613305[ebp+12], -2088399438 ; 83858db2H
  003cb	c7 45 ec 80 8d
	9f 83		 mov	 DWORD PTR __k$613305[ebp+16], -2086695552 ; 839f8d80H
  003d2	c7 45 f0 82 82
	b4 98		 mov	 DWORD PTR __k$613305[ebp+20], -1733000574 ; 98b48282H
  003d9	8d 45 dc	 lea	 eax, DWORD PTR __k$613305[ebp]
  003dc	c7 45 f4 8c 98
	8e 00		 mov	 DWORD PTR __k$613305[ebp+24], 9345164 ; 008e988cH
  003e3	59		 pop	 ecx
$LL848@LoadProper:
  003e4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003ea	83 c0 04	 add	 eax, 4
  003ed	49		 dec	 ecx
  003ee	75 f4		 jne	 SHORT $LL848@LoadProper
  003f0	6a 18		 push	 24			; 00000018H
  003f2	58		 pop	 eax
$LL845@LoadProper:
  003f3	8b c8		 mov	 ecx, eax
  003f5	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003fb	79 05		 jns	 SHORT $LN1107@LoadProper
  003fd	49		 dec	 ecx
  003fe	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00401	41		 inc	 ecx
$LN1107@LoadProper:
  00402	b2 ed		 mov	 dl, -19			; ffffffedH
  00404	2a d1		 sub	 dl, cl
  00406	30 54 05 dc	 xor	 BYTE PTR __k$613305[ebp+eax], dl
  0040a	40		 inc	 eax
  0040b	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  0040e	7c e3		 jl	 SHORT $LL845@LoadProper
  00410	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00418	51		 push	 ecx
  00419	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0041f	8d 45 dc	 lea	 eax, DWORD PTR __k$613305[ebp]
  00422	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00427	50		 push	 eax
  00428	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0042e	d9 9e d0 14 00
	00		 fstp	 DWORD PTR [esi+5328]
  00434	6a 06		 push	 6

; 47   : 
; 48   : 	//Air Trace Attack
; 49   : 	rkLoader.LoadString_e( "air_trace_attack_animation", "", szBuf, MAX_PATH );

  00436	c7 45 dc 8c 85
	99 b5		 mov	 DWORD PTR __k$613324[ebp], -1248230004 ; b599858cH
  0043d	c7 45 e0 99 9e
	8a 89		 mov	 DWORD PTR __k$613324[ebp+4], -1987404135 ; 898a9e99H
  00444	c7 45 e4 88 b3
	8a 9e		 mov	 DWORD PTR __k$613324[ebp+8], -1635077240 ; 9e8ab388H
  0044b	c7 45 e8 99 8d
	88 81		 mov	 DWORD PTR __k$613324[ebp+12], -2121757287 ; 81888d99H
  00452	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$613324[ebp+16], -2088399438 ; 83858db2H
  00459	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$613324[ebp+20], -2086695552 ; 839f8d80H
  00460	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$613324[ebp+24], 33410 ; 00008282H
  00466	8d 45 dc	 lea	 eax, DWORD PTR __k$613324[ebp]
  00469	c6 45 f6 00	 mov	 BYTE PTR __k$613324[ebp+26], 0
  0046d	59		 pop	 ecx
$LL954@LoadProper:
  0046e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00474	83 c0 04	 add	 eax, 4
  00477	49		 dec	 ecx
  00478	75 f4		 jne	 SHORT $LL954@LoadProper
  0047a	6a 18		 push	 24			; 00000018H
  0047c	58		 pop	 eax
$LL951@LoadProper:
  0047d	8b c8		 mov	 ecx, eax
  0047f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00485	79 05		 jns	 SHORT $LN1108@LoadProper
  00487	49		 dec	 ecx
  00488	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0048b	41		 inc	 ecx
$LN1108@LoadProper:
  0048c	b2 ed		 mov	 dl, -19			; ffffffedH
  0048e	2a d1		 sub	 dl, cl
  00490	30 54 05 dc	 xor	 BYTE PTR __k$613324[ebp+eax], dl
  00494	40		 inc	 eax
  00495	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00498	7c e3		 jl	 SHORT $LL951@LoadProper
  0049a	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004a0	68 04 01 00 00	 push	 260			; 00000104H
  004a5	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004ab	50		 push	 eax
  004ac	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  004b1	8d 45 dc	 lea	 eax, DWORD PTR __k$613324[ebp]
  004b4	50		 push	 eax
  004b5	ff d7		 call	 edi

; 50   : 	m_szAirTraceAttackAnimation = szBuf;

  004b7	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004bd	50		 push	 eax
  004be	8d 8e d4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5332]
  004c4	ff d3		 call	 ebx
  004c6	6a 07		 push	 7
  004c8	59		 pop	 ecx

; 51   : 	m_fAirTraceAttackAnimationRate = rkLoader.LoadFloat_e( "air_trace_attack_animation_rate", 1.0f );

  004c9	c7 45 d8 8c 85
	99 b5		 mov	 DWORD PTR __k$613462[ebp], -1248230004 ; b599858cH
  004d0	c7 45 dc 99 9e
	8a 89		 mov	 DWORD PTR __k$613462[ebp+4], -1987404135 ; 898a9e99H
  004d7	c7 45 e0 88 b3
	8a 9e		 mov	 DWORD PTR __k$613462[ebp+8], -1635077240 ; 9e8ab388H
  004de	c7 45 e4 99 8d
	88 81		 mov	 DWORD PTR __k$613462[ebp+12], -2121757287 ; 81888d99H
  004e5	c7 45 e8 b2 8d
	85 83		 mov	 DWORD PTR __k$613462[ebp+16], -2088399438 ; 83858db2H
  004ec	c7 45 ec 80 8d
	9f 83		 mov	 DWORD PTR __k$613462[ebp+20], -2086695552 ; 839f8d80H
  004f3	c7 45 f0 82 82
	b4 98		 mov	 DWORD PTR __k$613462[ebp+24], -1733000574 ; 98b48282H
  004fa	8d 45 d8	 lea	 eax, DWORD PTR __k$613462[ebp]
  004fd	c7 45 f4 8c 98
	8e 00		 mov	 DWORD PTR __k$613462[ebp+28], 9345164 ; 008e988cH
  00504	5b		 pop	 ebx
$LL1060@LoadProper:
  00505	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0050b	83 c0 04	 add	 eax, 4
  0050e	49		 dec	 ecx
  0050f	75 f4		 jne	 SHORT $LL1060@LoadProper
  00511	6a 1c		 push	 28			; 0000001cH
  00513	58		 pop	 eax
$LL1057@LoadProper:
  00514	8b c8		 mov	 ecx, eax
  00516	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0051c	79 05		 jns	 SHORT $LN1109@LoadProper
  0051e	49		 dec	 ecx
  0051f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00522	41		 inc	 ecx
$LN1109@LoadProper:
  00523	b2 ed		 mov	 dl, -19			; ffffffedH
  00525	2a d1		 sub	 dl, cl
  00527	30 54 05 d8	 xor	 BYTE PTR __k$613462[ebp+eax], dl
  0052b	40		 inc	 eax
  0052c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0052f	7c e3		 jl	 SHORT $LL1057@LoadProper
  00531	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00539	51		 push	 ecx
  0053a	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00540	8d 45 d8	 lea	 eax, DWORD PTR __k$613462[ebp]
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	50		 push	 eax
  00549	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0054f	d9 9e e4 14 00
	00		 fstp	 DWORD PTR [esi+5348]

; 52   : }

  00555	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00558	5f		 pop	 edi
  00559	33 cd		 xor	 ecx, ebp
  0055b	5e		 pop	 esi
  0055c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00561	c9		 leave
  00562	c2 04 00	 ret	 4
?LoadProperty@ioEngineerGatlingDummy@@UAEXAAVioINILoader@@@Z ENDP ; ioEngineerGatlingDummy::LoadProperty
_TEXT	ENDS
EXTRN	?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z:PROC	; ioDummyChar::ProcessEffectUpdate
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioEngineerGatlingDummy@@MAEXMK@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessState@ioEngineerGatlingDummy@@MAEXMK@Z PROC	; ioEngineerGatlingDummy::ProcessState, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   : 	switch( m_GatlingState )

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 86 80 14 00
	00		 mov	 eax, DWORD PTR [esi+5248]
  00011	83 e8 00	 sub	 eax, 0
  00014	74 13		 je	 SHORT $LN2@ProcessSta@2
  00016	48		 dec	 eax
  00017	75 1b		 jne	 SHORT $LN3@ProcessSta@2

; 60   : 		break;
; 61   : 	case GS_DEALY:
; 62   : 		ProcessDelayState( fTimePerSec );

  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	51		 push	 ecx
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]

; 63   : 		break;

  00027	eb 0b		 jmp	 SHORT $LN3@ProcessSta@2
$LN2@ProcessSta@2:

; 57   : 	{
; 58   : 	case GS_START:
; 59   : 		ProcessStartState( fTimePerSec );

  00029	51		 push	 ecx
  0002a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002f	e8 00 00 00 00	 call	 ?ProcessStartState@ioEngineerGatlingDummy@@IAEXM@Z ; ioEngineerGatlingDummy::ProcessStartState
$LN3@ProcessSta@2:

; 64   : 	}
; 65   : 
; 66   : 	ProcessPos( fTimePerSec );

  00034	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	51		 push	 ecx
  0003c	8b ce		 mov	 ecx, esi
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	ff 90 fc 00 00
	00		 call	 DWORD PTR [eax+252]

; 67   : 	ProcessEffectUpdate( fTimePerSec );

  00049	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0004e	51		 push	 ecx
  0004f	8b ce		 mov	 ecx, esi
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	e8 00 00 00 00	 call	 ?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z ; ioDummyChar::ProcessEffectUpdate
  0005b	5e		 pop	 esi

; 68   : }

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?ProcessState@ioEngineerGatlingDummy@@MAEXMK@Z ENDP	; ioEngineerGatlingDummy::ProcessState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$613616 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$613616[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$613616[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
_TEXT	ENDS
END
