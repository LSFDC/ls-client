; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioTalismanMaker.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
PUBLIC	?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A ; Singleton<ioTalismanMaker>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A DD 01H DUP (?) ; Singleton<ioTalismanMaker>::ms_Singleton
_BSS	ENDS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?GetTalismanNum@ioTalisman@@QBEHXZ		; ioTalisman::GetTalismanNum
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotalisman.h
;	COMDAT ?GetTalismanNum@ioTalisman@@QBEHXZ
_TEXT	SEGMENT
?GetTalismanNum@ioTalisman@@QBEHXZ PROC			; ioTalisman::GetTalismanNum, COMDAT
; _this$ = ecx

; 39   : 	inline int GetTalismanNum() const { return m_iTalismanNum; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetTalismanNum@ioTalisman@@QBEHXZ ENDP			; ioTalisman::GetTalismanNum
_TEXT	ENDS
PUBLIC	??1ioINILoader_e@@QAE@XZ			; ioINILoader_e::~ioINILoader_e
EXTRN	__imp_??1ioINILoader@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1ioINILoader_e@@QAE@XZ
_TEXT	SEGMENT
??1ioINILoader_e@@QAE@XZ PROC				; ioINILoader_e::~ioINILoader_e, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
??1ioINILoader_e@@QAE@XZ ENDP				; ioINILoader_e::~ioINILoader_e
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioTalismanMaker@@@@QAE@XZ	; Singleton<ioTalismanMaker>::Singleton<ioTalismanMaker>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioTalismanMaker@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioTalismanMaker@@@@QAE@XZ PROC		; Singleton<ioTalismanMaker>::Singleton<ioTalismanMaker>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A, ecx ; Singleton<ioTalismanMaker>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VioTalismanMaker@@@@QAE@XZ ENDP		; Singleton<ioTalismanMaker>::Singleton<ioTalismanMaker>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioTalismanMaker@@@@QAE@XZ	; Singleton<ioTalismanMaker>::~Singleton<ioTalismanMaker>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioTalismanMaker@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioTalismanMaker@@@@QAE@XZ PROC		; Singleton<ioTalismanMaker>::~Singleton<ioTalismanMaker>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A, 0 ; Singleton<ioTalismanMaker>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioTalismanMaker@@@@QAE@XZ ENDP		; Singleton<ioTalismanMaker>::~Singleton<ioTalismanMaker>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioTalismanMaker@@@@SAAAVioTalismanMaker@@XZ ; Singleton<ioTalismanMaker>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioTalismanMaker@@@@SAAAVioTalismanMaker@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioTalismanMaker@@@@SAAAVioTalismanMaker@@XZ PROC ; Singleton<ioTalismanMaker>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A ; Singleton<ioTalismanMaker>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioTalismanMaker@@@@SAAAVioTalismanMaker@@XZ ENDP ; Singleton<ioTalismanMaker>::GetSingleton
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBE_NPBQAVioTalisman@@@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBE_NPBQAVioTalisman@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBE_NPBQAVioTalisman@@@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBE_NPBQAVioTalisman@@@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXPAPAVioTalisman@@0@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXPAPAVioTalisman@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXPAPAVioTalisman@@0@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXPAPAVioTalisman@@0@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >::~_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >::~_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >::~_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioTalisman@@@std@@QAE@XZ	; std::allocator<ioTalisman *>::allocator<ioTalisman *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioTalisman@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVioTalisman@@@std@@QAE@XZ PROC		; std::allocator<ioTalisman *>::allocator<ioTalisman *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVioTalisman@@@std@@QAE@XZ ENDP		; std::allocator<ioTalisman *>::allocator<ioTalisman *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEABQAVioTalisman@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEABQAVioTalisman@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEABQAVioTalisman@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEABQAVioTalisman@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXXZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioTalisman@@@std@@QAE@ABV01@@Z ; std::allocator<ioTalisman *>::allocator<ioTalisman *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioTalisman@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVioTalisman@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioTalisman *>::allocator<ioTalisman *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVioTalisman@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioTalisman *>::allocator<ioTalisman *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@I@Z ; std::allocator<ioTalisman *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@I@Z PROC ; std::allocator<ioTalisman *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@I@Z ENDP ; std::allocator<ioTalisman *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVioTalisman@@@std@@QBEIXZ ; std::allocator<ioTalisman *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVioTalisman@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVioTalisman@@@std@@QBEIXZ PROC	; std::allocator<ioTalisman *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVioTalisman@@@std@@QBEIXZ ENDP	; std::allocator<ioTalisman *>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@QAVioTalisman@@@std@@YAPBQAVioTalisman@@ABQAV1@@Z ; std::addressof<ioTalisman * const>
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@QAVioTalisman@@@std@@YAPBQAVioTalisman@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVioTalisman@@@std@@YAPBQAVioTalisman@@ABQAV1@@Z PROC ; std::addressof<ioTalisman * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVioTalisman@@@std@@YAPBQAVioTalisman@@ABQAV1@@Z ENDP ; std::addressof<ioTalisman * const>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVioTalisman@@@std@@YAPAPAVioTalisman@@IPAPAV1@@Z ; std::_Allocate<ioTalisman *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVioTalisman@@@std@@YAPAPAVioTalisman@@IPAPAV1@@Z
_TEXT	SEGMENT
$T532430 = -12						; size = 12
$T532435 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVioTalisman@@@std@@YAPAPAVioTalisman@@IPAPAV1@@Z PROC ; std::_Allocate<ioTalisman *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T532435[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T532435[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T532430[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T532430[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T532430[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAVioTalisman@@@std@@YAPAPAVioTalisman@@IPAPAV1@@Z ENDP ; std::_Allocate<ioTalisman *>
_TEXT	ENDS
PUBLIC	??$forward@AAPAVioTalisman@@@std@@YAAAPAVioTalisman@@AAPAV1@@Z ; std::forward<ioTalisman * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAVioTalisman@@@std@@YAAAPAVioTalisman@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVioTalisman@@@std@@YAAAPAVioTalisman@@AAPAV1@@Z PROC ; std::forward<ioTalisman * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVioTalisman@@@std@@YAAAPAVioTalisman@@AAPAV1@@Z ENDP ; std::forward<ioTalisman * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVioTalisman@@@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@AAPAV2@@Z ; std::allocator<ioTalisman *>::construct<ioTalisman * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAVioTalisman@@@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVioTalisman@@@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@AAPAV2@@Z PROC ; std::allocator<ioTalisman *>::construct<ioTalisman * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAVioTalisman@@@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@AAPAV2@@Z ENDP ; std::allocator<ioTalisman *>::construct<ioTalisman * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVioTalisman@@@std@@YAABQAVioTalisman@@ABQAV1@@Z ; std::forward<ioTalisman * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAVioTalisman@@@std@@YAABQAVioTalisman@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVioTalisman@@@std@@YAABQAVioTalisman@@ABQAV1@@Z PROC ; std::forward<ioTalisman * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVioTalisman@@@std@@YAABQAVioTalisman@@ABQAV1@@Z ENDP ; std::forward<ioTalisman * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVioTalisman@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTalisman@@0@Z ; std::_Ptr_cat<ioTalisman *,ioTalisman *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVioTalisman@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTalisman@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVioTalisman@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTalisman@@0@Z PROC ; std::_Ptr_cat<ioTalisman *,ioTalisman *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAVioTalisman@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTalisman@@0@Z ENDP ; std::_Ptr_cat<ioTalisman *,ioTalisman *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTalisman * *,ioTalisman * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioTalisman * *,ioTalisman * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioTalisman * *,ioTalisman * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioTalisman *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioTalisman *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioTalisman *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVioTalisman@@ABQAV1@@std@@YAXPAPAVioTalisman@@ABQAV1@@Z ; std::_Construct<ioTalisman *,ioTalisman * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@PAVioTalisman@@ABQAV1@@std@@YAXPAPAVioTalisman@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVioTalisman@@ABQAV1@@std@@YAXPAPAVioTalisman@@ABQAV1@@Z PROC ; std::_Construct<ioTalisman *,ioTalisman * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAVioTalisman@@ABQAV1@@std@@YAXPAPAVioTalisman@@ABQAV1@@Z ENDP ; std::_Construct<ioTalisman *,ioTalisman * const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVioTalisman@@@std@@YAPAPAVioTalisman@@PAPAV1@@Z ; std::_Val_type<ioTalisman * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVioTalisman@@@std@@YAPAPAVioTalisman@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVioTalisman@@@std@@YAPAPAVioTalisman@@PAPAV1@@Z PROC ; std::_Val_type<ioTalisman * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVioTalisman@@@std@@YAPAPAVioTalisman@@PAPAV1@@Z ENDP ; std::_Val_type<ioTalisman * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVioTalisman@@PAV1@PAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioTalisman *,ioTalisman *,ioTalisman *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVioTalisman@@PAV1@PAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioTalisman@@PAV1@PAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioTalisman *,ioTalisman *,ioTalisman *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAVioTalisman@@PAV1@PAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioTalisman *,ioTalisman *,ioTalisman *>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?GetSingleton@ioTalismanMaker@@SAAAV1@XZ	; ioTalismanMaker::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotalismanmaker.cpp
;	COMDAT ?GetSingleton@ioTalismanMaker@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@ioTalismanMaker@@SAAAV1@XZ PROC		; ioTalismanMaker::GetSingleton, COMDAT

; 25   : 	return Singleton< ioTalismanMaker >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A ; Singleton<ioTalismanMaker>::ms_Singleton

; 26   : }

  00005	c3		 ret	 0
?GetSingleton@ioTalismanMaker@@SAAAV1@XZ ENDP		; ioTalismanMaker::GetSingleton
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEAAPAVioTalisman@@XZ ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEAAPAVioTalisman@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEAAPAVioTalisman@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBEAAPAVioTalisman@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@V?$allocator@PAVioTalisman@@@1@@Z ; std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@V?$allocator@PAVioTalisman@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@V?$allocator@PAVioTalisman@@@1@@Z PROC ; std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@V?$allocator@PAVioTalisman@@@1@@Z ENDP ; std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QAE@PAPAVioTalisman@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::_Vector_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator==
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEII@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEII@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVioTalisman@@@std@@QAEPAPAVioTalisman@@I@Z ; std::allocator<ioTalisman *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVioTalisman@@@std@@QAEPAPAVioTalisman@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVioTalisman@@@std@@QAEPAPAVioTalisman@@I@Z PROC ; std::allocator<ioTalisman *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAVioTalisman@@@std@@YAPAPAVioTalisman@@IPAPAV1@@Z ; std::_Allocate<ioTalisman *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAVioTalisman@@@std@@QAEPAPAVioTalisman@@I@Z ENDP ; std::allocator<ioTalisman *>::allocate
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0M@$0N@@ioINILoader@@QAEHAAY0M@$$CBDAAY0N@$$CBDH@Z ; ioINILoader::LoadInt_e<12,13>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0M@$0N@@ioINILoader@@QAEHAAY0M@$$CBDAAY0N@$$CBDH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -44					; size = 4
__k$ = -40						; size = 13
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
_k$ = 12						; size = 4
_i$ = 16						; size = 4
??$LoadInt_e@$0M@$0N@@ioINILoader@@QAEHAAY0M@$$CBDAAY0N@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<12,13>, COMDAT
; _this$ = ecx

; 126  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00013	8b 55 0c	 mov	 edx, DWORD PTR _k$[ebp]
  00016	53		 push	 ebx

; 127  : 		_ENCSTR(t, _t);

  00017	8a 18		 mov	 bl, BYTE PTR [eax]
  00019	89 4d d4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001c	32 c9		 xor	 cl, cl
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	3a d9		 cmp	 bl, cl
  00022	0f 84 3a 01 00
	00		 je	 $LN192@LoadInt_e
  00028	80 f3 ed	 xor	 bl, -19			; ffffffedH
  0002b	88 5d ec	 mov	 BYTE PTR __t$[ebp], bl
  0002e	8a 58 01	 mov	 bl, BYTE PTR [eax+1]
  00031	3a d9		 cmp	 bl, cl
  00033	0f 84 23 01 00
	00		 je	 $LN191@LoadInt_e
  00039	80 f3 ec	 xor	 bl, -20			; ffffffecH
  0003c	88 5d ed	 mov	 BYTE PTR __t$[ebp+1], bl
  0003f	8a 58 02	 mov	 bl, BYTE PTR [eax+2]
  00042	3a d9		 cmp	 bl, cl
  00044	0f 84 0c 01 00
	00		 je	 $LN190@LoadInt_e
  0004a	80 f3 eb	 xor	 bl, -21			; ffffffebH
  0004d	88 5d ee	 mov	 BYTE PTR __t$[ebp+2], bl
  00050	8a 58 03	 mov	 bl, BYTE PTR [eax+3]
  00053	3a d9		 cmp	 bl, cl
  00055	0f 84 f5 00 00
	00		 je	 $LN189@LoadInt_e
  0005b	80 f3 ea	 xor	 bl, -22			; ffffffeaH
  0005e	88 5d ef	 mov	 BYTE PTR __t$[ebp+3], bl
  00061	8a 58 04	 mov	 bl, BYTE PTR [eax+4]
  00064	3a d9		 cmp	 bl, cl
  00066	0f 84 de 00 00
	00		 je	 $LN188@LoadInt_e
  0006c	80 f3 ed	 xor	 bl, -19			; ffffffedH
  0006f	88 5d f0	 mov	 BYTE PTR __t$[ebp+4], bl
  00072	8a 58 05	 mov	 bl, BYTE PTR [eax+5]
  00075	3a d9		 cmp	 bl, cl
  00077	0f 84 c7 00 00
	00		 je	 $LN187@LoadInt_e
  0007d	80 f3 ec	 xor	 bl, -20			; ffffffecH
  00080	88 5d f1	 mov	 BYTE PTR __t$[ebp+5], bl
  00083	8a 58 06	 mov	 bl, BYTE PTR [eax+6]
  00086	3a d9		 cmp	 bl, cl
  00088	0f 84 b0 00 00
	00		 je	 $LN186@LoadInt_e
  0008e	80 f3 eb	 xor	 bl, -21			; ffffffebH
  00091	88 5d f2	 mov	 BYTE PTR __t$[ebp+6], bl
  00094	8a 58 07	 mov	 bl, BYTE PTR [eax+7]
  00097	3a d9		 cmp	 bl, cl
  00099	0f 84 99 00 00
	00		 je	 $LN185@LoadInt_e
  0009f	80 f3 ea	 xor	 bl, -22			; ffffffeaH
  000a2	88 5d f3	 mov	 BYTE PTR __t$[ebp+7], bl
  000a5	8a 58 08	 mov	 bl, BYTE PTR [eax+8]
  000a8	3a d9		 cmp	 bl, cl
  000aa	0f 84 82 00 00
	00		 je	 $LN184@LoadInt_e
  000b0	80 f3 ed	 xor	 bl, -19			; ffffffedH
  000b3	88 5d f4	 mov	 BYTE PTR __t$[ebp+8], bl
  000b6	8a 58 09	 mov	 bl, BYTE PTR [eax+9]
  000b9	3a d9		 cmp	 bl, cl
  000bb	74 6f		 je	 SHORT $LN183@LoadInt_e
  000bd	80 f3 ec	 xor	 bl, -20			; ffffffecH
  000c0	88 5d f5	 mov	 BYTE PTR __t$[ebp+9], bl
  000c3	8a 58 0a	 mov	 bl, BYTE PTR [eax+10]
  000c6	3a d9		 cmp	 bl, cl
  000c8	74 5c		 je	 SHORT $LN182@LoadInt_e
  000ca	80 f3 eb	 xor	 bl, -21			; ffffffebH
  000cd	88 5d f6	 mov	 BYTE PTR __t$[ebp+10], bl
  000d0	38 48 0b	 cmp	 BYTE PTR [eax+11], cl
  000d3	0f 84 8d 00 00
	00		 je	 $LN97@LoadInt_e
  000d9	8a 58 0c	 mov	 bl, BYTE PTR [eax+12]
  000dc	3a d9		 cmp	 bl, cl
  000de	74 40		 je	 SHORT $LN180@LoadInt_e
  000e0	80 f3 ed	 xor	 bl, -19			; ffffffedH
  000e3	88 5d f8	 mov	 BYTE PTR __t$[ebp+12], bl
  000e6	8a 58 0d	 mov	 bl, BYTE PTR [eax+13]
  000e9	3a d9		 cmp	 bl, cl
  000eb	74 2d		 je	 SHORT $LN179@LoadInt_e
  000ed	80 f3 ec	 xor	 bl, -20			; ffffffecH
  000f0	88 5d f9	 mov	 BYTE PTR __t$[ebp+13], bl
  000f3	8a 58 0e	 mov	 bl, BYTE PTR [eax+14]
  000f6	3a d9		 cmp	 bl, cl
  000f8	74 1a		 je	 SHORT $LN178@LoadInt_e
  000fa	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000fd	80 f3 eb	 xor	 bl, -21			; ffffffebH
  00100	88 5d fa	 mov	 BYTE PTR __t$[ebp+14], bl
  00103	3a c1		 cmp	 al, cl
  00105	74 07		 je	 SHORT $LN177@LoadInt_e
  00107	34 ea		 xor	 al, -22			; ffffffeaH
  00109	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  0010c	eb 58		 jmp	 SHORT $LN97@LoadInt_e
$LN177@LoadInt_e:
  0010e	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00112	eb 52		 jmp	 SHORT $LN97@LoadInt_e
$LN178@LoadInt_e:
  00114	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  00118	eb 4c		 jmp	 SHORT $LN97@LoadInt_e
$LN179@LoadInt_e:
  0011a	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  0011e	eb 46		 jmp	 SHORT $LN97@LoadInt_e
$LN180@LoadInt_e:
  00120	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00124	eb 40		 jmp	 SHORT $LN97@LoadInt_e
$LN182@LoadInt_e:
  00126	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  0012a	eb 3a		 jmp	 SHORT $LN97@LoadInt_e
$LN183@LoadInt_e:
  0012c	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00130	eb 34		 jmp	 SHORT $LN97@LoadInt_e
$LN184@LoadInt_e:
  00132	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00136	eb 2e		 jmp	 SHORT $LN97@LoadInt_e
$LN185@LoadInt_e:
  00138	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0013c	eb 28		 jmp	 SHORT $LN97@LoadInt_e
$LN186@LoadInt_e:
  0013e	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00142	eb 22		 jmp	 SHORT $LN97@LoadInt_e
$LN187@LoadInt_e:
  00144	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00148	eb 1c		 jmp	 SHORT $LN97@LoadInt_e
$LN188@LoadInt_e:
  0014a	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  0014e	eb 16		 jmp	 SHORT $LN97@LoadInt_e
$LN189@LoadInt_e:
  00150	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00154	eb 10		 jmp	 SHORT $LN97@LoadInt_e
$LN190@LoadInt_e:
  00156	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0015a	eb 0a		 jmp	 SHORT $LN97@LoadInt_e
$LN191@LoadInt_e:
  0015c	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00160	eb 04		 jmp	 SHORT $LN97@LoadInt_e
$LN192@LoadInt_e:
  00162	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN97@LoadInt_e:
  00166	6a 02		 push	 2
  00168	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0016b	88 4d f7	 mov	 BYTE PTR __t$[ebp+11], cl
  0016e	5e		 pop	 esi
  0016f	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL200@LoadInt_e:
  00174	31 38		 xor	 DWORD PTR [eax], edi
  00176	83 c0 04	 add	 eax, 4
  00179	4e		 dec	 esi
  0017a	75 f8		 jne	 SHORT $LL200@LoadInt_e
  0017c	6a 08		 push	 8
  0017e	5e		 pop	 esi
$LL197@LoadInt_e:
  0017f	8b c6		 mov	 eax, esi
  00181	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00186	79 05		 jns	 SHORT $LN219@LoadInt_e
  00188	48		 dec	 eax
  00189	83 c8 fc	 or	 eax, -4			; fffffffcH
  0018c	40		 inc	 eax
$LN219@LoadInt_e:
  0018d	b3 ed		 mov	 bl, -19			; ffffffedH
  0018f	2a d8		 sub	 bl, al
  00191	30 5c 35 ec	 xor	 BYTE PTR __t$[ebp+esi], bl
  00195	46		 inc	 esi
  00196	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00199	7c e4		 jl	 SHORT $LL197@LoadInt_e

; 128  : 		_ENCSTR(k, _k);

  0019b	8a 02		 mov	 al, BYTE PTR [edx]
  0019d	3a c1		 cmp	 al, cl
  0019f	0f 84 3f 01 00
	00		 je	 $LN96@LoadInt_e
  001a5	34 ed		 xor	 al, -19			; ffffffedH
  001a7	88 45 d8	 mov	 BYTE PTR __k$[ebp], al
  001aa	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  001ad	3a c1		 cmp	 al, cl
  001af	0f 84 29 01 00
	00		 je	 $LN95@LoadInt_e
  001b5	34 ec		 xor	 al, -20			; ffffffecH
  001b7	88 45 d9	 mov	 BYTE PTR __k$[ebp+1], al
  001ba	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  001bd	3a c1		 cmp	 al, cl
  001bf	0f 84 13 01 00
	00		 je	 $LN94@LoadInt_e
  001c5	34 eb		 xor	 al, -21			; ffffffebH
  001c7	88 45 da	 mov	 BYTE PTR __k$[ebp+2], al
  001ca	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  001cd	3a c1		 cmp	 al, cl
  001cf	0f 84 fd 00 00
	00		 je	 $LN93@LoadInt_e
  001d5	34 ea		 xor	 al, -22			; ffffffeaH
  001d7	88 45 db	 mov	 BYTE PTR __k$[ebp+3], al
  001da	8a 42 04	 mov	 al, BYTE PTR [edx+4]
  001dd	3a c1		 cmp	 al, cl
  001df	0f 84 e7 00 00
	00		 je	 $LN92@LoadInt_e
  001e5	34 ed		 xor	 al, -19			; ffffffedH
  001e7	88 45 dc	 mov	 BYTE PTR __k$[ebp+4], al
  001ea	8a 42 05	 mov	 al, BYTE PTR [edx+5]
  001ed	3a c1		 cmp	 al, cl
  001ef	0f 84 d1 00 00
	00		 je	 $LN91@LoadInt_e
  001f5	34 ec		 xor	 al, -20			; ffffffecH
  001f7	88 45 dd	 mov	 BYTE PTR __k$[ebp+5], al
  001fa	8a 42 06	 mov	 al, BYTE PTR [edx+6]
  001fd	3a c1		 cmp	 al, cl
  001ff	0f 84 bb 00 00
	00		 je	 $LN90@LoadInt_e
  00205	34 eb		 xor	 al, -21			; ffffffebH
  00207	88 45 de	 mov	 BYTE PTR __k$[ebp+6], al
  0020a	8a 42 07	 mov	 al, BYTE PTR [edx+7]
  0020d	3a c1		 cmp	 al, cl
  0020f	0f 84 a5 00 00
	00		 je	 $LN89@LoadInt_e
  00215	34 ea		 xor	 al, -22			; ffffffeaH
  00217	88 45 df	 mov	 BYTE PTR __k$[ebp+7], al
  0021a	8a 42 08	 mov	 al, BYTE PTR [edx+8]
  0021d	3a c1		 cmp	 al, cl
  0021f	0f 84 8f 00 00
	00		 je	 $LN88@LoadInt_e
  00225	34 ed		 xor	 al, -19			; ffffffedH
  00227	88 45 e0	 mov	 BYTE PTR __k$[ebp+8], al
  0022a	8a 42 09	 mov	 al, BYTE PTR [edx+9]
  0022d	3a c1		 cmp	 al, cl
  0022f	74 7d		 je	 SHORT $LN87@LoadInt_e
  00231	34 ec		 xor	 al, -20			; ffffffecH
  00233	88 45 e1	 mov	 BYTE PTR __k$[ebp+9], al
  00236	8a 42 0a	 mov	 al, BYTE PTR [edx+10]
  00239	3a c1		 cmp	 al, cl
  0023b	74 6b		 je	 SHORT $LN86@LoadInt_e
  0023d	34 eb		 xor	 al, -21			; ffffffebH
  0023f	88 45 e2	 mov	 BYTE PTR __k$[ebp+10], al
  00242	8a 42 0b	 mov	 al, BYTE PTR [edx+11]
  00245	3a c1		 cmp	 al, cl
  00247	74 59		 je	 SHORT $LN85@LoadInt_e
  00249	34 ea		 xor	 al, -22			; ffffffeaH
  0024b	88 45 e3	 mov	 BYTE PTR __k$[ebp+11], al
  0024e	38 4a 0c	 cmp	 BYTE PTR [edx+12], cl
  00251	0f 84 91 00 00
	00		 je	 $LN1@LoadInt_e
  00257	8a 42 0d	 mov	 al, BYTE PTR [edx+13]
  0025a	3a c1		 cmp	 al, cl
  0025c	74 3e		 je	 SHORT $LN83@LoadInt_e
  0025e	34 ec		 xor	 al, -20			; ffffffecH
  00260	88 45 e5	 mov	 BYTE PTR __k$[ebp+13], al
  00263	8a 42 0e	 mov	 al, BYTE PTR [edx+14]
  00266	3a c1		 cmp	 al, cl
  00268	74 2c		 je	 SHORT $LN82@LoadInt_e
  0026a	34 eb		 xor	 al, -21			; ffffffebH
  0026c	88 45 e6	 mov	 BYTE PTR __k$[ebp+14], al
  0026f	8a 42 0f	 mov	 al, BYTE PTR [edx+15]
  00272	3a c1		 cmp	 al, cl
  00274	74 1a		 je	 SHORT $LN81@LoadInt_e
  00276	8a 52 10	 mov	 dl, BYTE PTR [edx+16]
  00279	34 ea		 xor	 al, -22			; ffffffeaH
  0027b	88 45 e7	 mov	 BYTE PTR __k$[ebp+15], al
  0027e	3a d1		 cmp	 dl, cl
  00280	74 08		 je	 SHORT $LN80@LoadInt_e
  00282	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00285	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00288	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0028a	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0028e	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00290	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00294	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00296	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0029a	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0029c	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  002a0	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  002a2	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  002a6	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  002a8	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  002ac	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  002ae	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  002b2	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  002b4	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002b8	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  002ba	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002be	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  002c0	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  002c4	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  002c6	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  002ca	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  002cc	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002d0	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  002d2	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002d6	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  002d8	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002dc	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  002de	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002e2	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  002e4	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  002e8	6a 03		 push	 3
  002ea	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  002ed	88 4d e4	 mov	 BYTE PTR __k$[ebp+12], cl
  002f0	5a		 pop	 edx
$LL208@LoadInt_e:
  002f1	31 38		 xor	 DWORD PTR [eax], edi
  002f3	83 c0 04	 add	 eax, 4
  002f6	4a		 dec	 edx
  002f7	75 f8		 jne	 SHORT $LL208@LoadInt_e

; 129  : 		return LoadInt(_t, _k, i);

  002f9	ff 75 10	 push	 DWORD PTR _i$[ebp]
  002fc	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002ff	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00302	50		 push	 eax
  00303	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00306	50		 push	 eax
  00307	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z

; 130  : 	}

  0030d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	33 cd		 xor	 ecx, ebp
  00314	5b		 pop	 ebx
  00315	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031a	c9		 leave
  0031b	c2 0c 00	 ret	 12			; 0000000cH
??$LoadInt_e@$0M@$0N@@ioINILoader@@QAEHAAY0M@$$CBDAAY0N@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<12,13>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@AAPAV2@@Z ; std::_Cons_val<std::allocator<ioTalisman *>,ioTalisman *,ioTalisman * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<ioTalisman *>,ioTalisman *,ioTalisman * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioTalisman *>,ioTalisman *,ioTalisman * &>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00@Z ; std::_Move<ioTalisman * *,ioTalisman * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00@Z
_TEXT	SEGMENT
__Cat$532657 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00@Z PROC ; std::_Move<ioTalisman * *,ioTalisman * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$532657[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTalisman * *,ioTalisman * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00@Z ENDP ; std::_Move<ioTalisman * *,ioTalisman * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@@Z ; std::_Destroy_range<std::allocator<ioTalisman *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioTalisman *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioTalisman@@@std@@@std@@YAXPAPAVioTalisman@@0AAV?$allocator@PAVioTalisman@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioTalisman *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@ABQAV3@@Z ; std::allocator<ioTalisman *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@ABQAV3@@Z PROC ; std::allocator<ioTalisman *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@2:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVioTalisman@@@std@@QAEXPAPAVioTalisman@@ABQAV3@@Z ENDP ; std::allocator<ioTalisman *>::construct
_TEXT	ENDS
PUBLIC	??$encodeString@$0BI@@ioINILoader_e@@AAEPADAAY0BI@$$CBDPAD@Z ; ioINILoader_e::encodeString<24>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$encodeString@$0BI@@ioINILoader_e@@AAEPADAAY0BI@$$CBDPAD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_e$ = 12						; size = 4
??$encodeString@$0BI@@ioINILoader_e@@AAEPADAAY0BI@$$CBDPAD@Z PROC ; ioINILoader_e::encodeString<24>, COMDAT
; _this$ = ecx

; 215  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  : 		__ENCSTR(s, e);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00006	8a 11		 mov	 dl, BYTE PTR [ecx]
  00008	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  0000b	53		 push	 ebx
  0000c	84 d2		 test	 dl, dl
  0000e	0f 84 6a 04 00
	00		 je	 $LN96@encodeStri
  00014	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00017	88 10		 mov	 BYTE PTR [eax], dl
  00019	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0001c	84 d2		 test	 dl, dl
  0001e	0f 84 54 04 00
	00		 je	 $LN95@encodeStri
  00024	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00027	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0002a	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0002d	84 d2		 test	 dl, dl
  0002f	0f 84 3d 04 00
	00		 je	 $LN94@encodeStri
  00035	b3 eb		 mov	 bl, -21			; ffffffebH
  00037	32 d3		 xor	 dl, bl
  00039	88 50 02	 mov	 BYTE PTR [eax+2], dl
  0003c	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 25 04 00
	00		 je	 $LN93@encodeStri
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	88 50 03	 mov	 BYTE PTR [eax+3], dl
  0004d	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 0e 04 00
	00		 je	 $LN92@encodeStri
  00058	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005b	88 50 04	 mov	 BYTE PTR [eax+4], dl
  0005e	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 f7 03 00
	00		 je	 $LN91@encodeStri
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	88 50 05	 mov	 BYTE PTR [eax+5], dl
  0006f	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 e1 03 00
	00		 je	 $LN90@encodeStri
  0007a	32 d3		 xor	 dl, bl
  0007c	88 50 06	 mov	 BYTE PTR [eax+6], dl
  0007f	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00082	84 d2		 test	 dl, dl
  00084	0f 84 cb 03 00
	00		 je	 $LN89@encodeStri
  0008a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008d	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00090	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  00093	84 d2		 test	 dl, dl
  00095	0f 84 b4 03 00
	00		 je	 $LN88@encodeStri
  0009b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0009e	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a1	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000a4	84 d2		 test	 dl, dl
  000a6	0f 84 9d 03 00
	00		 je	 $LN87@encodeStri
  000ac	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000af	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b2	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000b5	84 d2		 test	 dl, dl
  000b7	0f 84 87 03 00
	00		 je	 $LN86@encodeStri
  000bd	32 d3		 xor	 dl, bl
  000bf	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c2	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000c5	84 d2		 test	 dl, dl
  000c7	0f 84 71 03 00
	00		 je	 $LN85@encodeStri
  000cd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d0	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000d3	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000d6	84 d2		 test	 dl, dl
  000d8	0f 84 5a 03 00
	00		 je	 $LN84@encodeStri
  000de	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e1	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000e4	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000e7	84 d2		 test	 dl, dl
  000e9	0f 84 43 03 00
	00		 je	 $LN83@encodeStri
  000ef	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f2	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000f5	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000f8	84 d2		 test	 dl, dl
  000fa	0f 84 2d 03 00
	00		 je	 $LN82@encodeStri
  00100	32 d3		 xor	 dl, bl
  00102	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  00105	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  00108	84 d2		 test	 dl, dl
  0010a	0f 84 17 03 00
	00		 je	 $LN81@encodeStri
  00110	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00113	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  00116	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00119	84 d2		 test	 dl, dl
  0011b	0f 84 00 03 00
	00		 je	 $LN80@encodeStri
  00121	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00124	88 50 10	 mov	 BYTE PTR [eax+16], dl
  00127	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  0012a	84 d2		 test	 dl, dl
  0012c	0f 84 e9 02 00
	00		 je	 $LN79@encodeStri
  00132	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00135	88 50 11	 mov	 BYTE PTR [eax+17], dl
  00138	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  0013b	84 d2		 test	 dl, dl
  0013d	0f 84 d3 02 00
	00		 je	 $LN78@encodeStri
  00143	32 d3		 xor	 dl, bl
  00145	88 50 12	 mov	 BYTE PTR [eax+18], dl
  00148	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  0014b	84 d2		 test	 dl, dl
  0014d	0f 84 bd 02 00
	00		 je	 $LN77@encodeStri
  00153	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00156	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00159	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  0015c	84 d2		 test	 dl, dl
  0015e	0f 84 a6 02 00
	00		 je	 $LN76@encodeStri
  00164	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00167	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0016a	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0016d	84 d2		 test	 dl, dl
  0016f	0f 84 8f 02 00
	00		 je	 $LN75@encodeStri
  00175	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00178	88 50 15	 mov	 BYTE PTR [eax+21], dl
  0017b	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  0017e	84 d2		 test	 dl, dl
  00180	0f 84 79 02 00
	00		 je	 $LN74@encodeStri
  00186	32 d3		 xor	 dl, bl
  00188	88 50 16	 mov	 BYTE PTR [eax+22], dl
  0018b	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  0018e	84 d2		 test	 dl, dl
  00190	0f 84 60 02 00
	00		 je	 $LN73@encodeStri
  00196	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00199	88 50 17	 mov	 BYTE PTR [eax+23], dl
  0019c	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  0019f	84 d2		 test	 dl, dl
  001a1	0f 84 46 02 00
	00		 je	 $LN72@encodeStri
  001a7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001aa	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001ad	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b0	84 d2		 test	 dl, dl
  001b2	0f 84 2c 02 00
	00		 je	 $LN71@encodeStri
  001b8	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001bb	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001be	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c1	84 d2		 test	 dl, dl
  001c3	0f 84 13 02 00
	00		 je	 $LN70@encodeStri
  001c9	32 d3		 xor	 dl, bl
  001cb	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001ce	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d1	84 d2		 test	 dl, dl
  001d3	0f 84 fa 01 00
	00		 je	 $LN69@encodeStri
  001d9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dc	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001df	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e2	84 d2		 test	 dl, dl
  001e4	0f 84 e0 01 00
	00		 je	 $LN68@encodeStri
  001ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ed	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f0	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001f3	84 d2		 test	 dl, dl
  001f5	0f 84 c6 01 00
	00		 je	 $LN67@encodeStri
  001fb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001fe	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00201	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  00204	84 d2		 test	 dl, dl
  00206	0f 84 ad 01 00
	00		 je	 $LN66@encodeStri
  0020c	32 d3		 xor	 dl, bl
  0020e	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00211	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  00214	84 d2		 test	 dl, dl
  00216	0f 84 94 01 00
	00		 je	 $LN65@encodeStri
  0021c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0021f	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00222	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  00225	84 d2		 test	 dl, dl
  00227	0f 84 7a 01 00
	00		 je	 $LN64@encodeStri
  0022d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00230	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00233	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  00236	84 d2		 test	 dl, dl
  00238	0f 84 60 01 00
	00		 je	 $LN63@encodeStri
  0023e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00241	88 50 21	 mov	 BYTE PTR [eax+33], dl
  00244	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  00247	84 d2		 test	 dl, dl
  00249	0f 84 47 01 00
	00		 je	 $LN62@encodeStri
  0024f	32 d3		 xor	 dl, bl
  00251	88 50 22	 mov	 BYTE PTR [eax+34], dl
  00254	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  00257	84 d2		 test	 dl, dl
  00259	0f 84 2e 01 00
	00		 je	 $LN61@encodeStri
  0025f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00262	88 50 23	 mov	 BYTE PTR [eax+35], dl
  00265	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  00268	84 d2		 test	 dl, dl
  0026a	0f 84 14 01 00
	00		 je	 $LN60@encodeStri
  00270	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00273	88 50 24	 mov	 BYTE PTR [eax+36], dl
  00276	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00279	84 d2		 test	 dl, dl
  0027b	0f 84 fa 00 00
	00		 je	 $LN59@encodeStri
  00281	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00284	88 50 25	 mov	 BYTE PTR [eax+37], dl
  00287	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  0028a	84 d2		 test	 dl, dl
  0028c	0f 84 e1 00 00
	00		 je	 $LN58@encodeStri
  00292	32 d3		 xor	 dl, bl
  00294	88 50 26	 mov	 BYTE PTR [eax+38], dl
  00297	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  0029a	84 d2		 test	 dl, dl
  0029c	0f 84 c8 00 00
	00		 je	 $LN57@encodeStri
  002a2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002a5	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002a8	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002ab	84 d2		 test	 dl, dl
  002ad	0f 84 ae 00 00
	00		 je	 $LN56@encodeStri
  002b3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002b6	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002b9	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002bc	84 d2		 test	 dl, dl
  002be	0f 84 94 00 00
	00		 je	 $LN55@encodeStri
  002c4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002c7	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002ca	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002cd	84 d2		 test	 dl, dl
  002cf	74 7f		 je	 SHORT $LN54@encodeStri
  002d1	32 d3		 xor	 dl, bl
  002d3	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002d6	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002d9	84 d2		 test	 dl, dl
  002db	74 6a		 je	 SHORT $LN53@encodeStri
  002dd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e0	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002e3	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002e6	84 d2		 test	 dl, dl
  002e8	74 54		 je	 SHORT $LN52@encodeStri
  002ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002ed	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f0	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002f3	84 d2		 test	 dl, dl
  002f5	74 3e		 je	 SHORT $LN51@encodeStri
  002f7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002fa	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  002fd	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00300	84 d2		 test	 dl, dl
  00302	74 29		 je	 SHORT $LN50@encodeStri
  00304	32 d3		 xor	 dl, bl
  00306	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00309	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  0030c	84 d2		 test	 dl, dl
  0030e	74 14		 je	 SHORT $LN49@encodeStri
  00310	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00313	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  00316	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00319	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0031c	88 48 30	 mov	 BYTE PTR [eax+48], cl
  0031f	e9 5d 01 00 00	 jmp	 $LN1@encodeStri
$LN49@encodeStri:
  00324	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  00328	e9 54 01 00 00	 jmp	 $LN1@encodeStri
$LN50@encodeStri:
  0032d	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00330	e9 4c 01 00 00	 jmp	 $LN1@encodeStri
$LN51@encodeStri:
  00335	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00339	e9 43 01 00 00	 jmp	 $LN1@encodeStri
$LN52@encodeStri:
  0033e	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00342	e9 3a 01 00 00	 jmp	 $LN1@encodeStri
$LN53@encodeStri:
  00347	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  0034b	e9 31 01 00 00	 jmp	 $LN1@encodeStri
$LN54@encodeStri:
  00350	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  00353	e9 29 01 00 00	 jmp	 $LN1@encodeStri
$LN55@encodeStri:
  00358	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  0035c	e9 20 01 00 00	 jmp	 $LN1@encodeStri
$LN56@encodeStri:
  00361	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  00365	e9 17 01 00 00	 jmp	 $LN1@encodeStri
$LN57@encodeStri:
  0036a	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  0036e	e9 0e 01 00 00	 jmp	 $LN1@encodeStri
$LN58@encodeStri:
  00373	88 58 26	 mov	 BYTE PTR [eax+38], bl
  00376	e9 06 01 00 00	 jmp	 $LN1@encodeStri
$LN59@encodeStri:
  0037b	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  0037f	e9 fd 00 00 00	 jmp	 $LN1@encodeStri
$LN60@encodeStri:
  00384	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  00388	e9 f4 00 00 00	 jmp	 $LN1@encodeStri
$LN61@encodeStri:
  0038d	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00391	e9 eb 00 00 00	 jmp	 $LN1@encodeStri
$LN62@encodeStri:
  00396	88 58 22	 mov	 BYTE PTR [eax+34], bl
  00399	e9 e3 00 00 00	 jmp	 $LN1@encodeStri
$LN63@encodeStri:
  0039e	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a2	e9 da 00 00 00	 jmp	 $LN1@encodeStri
$LN64@encodeStri:
  003a7	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003ab	e9 d1 00 00 00	 jmp	 $LN1@encodeStri
$LN65@encodeStri:
  003b0	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003b4	e9 c8 00 00 00	 jmp	 $LN1@encodeStri
$LN66@encodeStri:
  003b9	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003bc	e9 c0 00 00 00	 jmp	 $LN1@encodeStri
$LN67@encodeStri:
  003c1	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003c5	e9 b7 00 00 00	 jmp	 $LN1@encodeStri
$LN68@encodeStri:
  003ca	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003ce	e9 ae 00 00 00	 jmp	 $LN1@encodeStri
$LN69@encodeStri:
  003d3	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003d7	e9 a5 00 00 00	 jmp	 $LN1@encodeStri
$LN70@encodeStri:
  003dc	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003df	e9 9d 00 00 00	 jmp	 $LN1@encodeStri
$LN71@encodeStri:
  003e4	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003e8	e9 94 00 00 00	 jmp	 $LN1@encodeStri
$LN72@encodeStri:
  003ed	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f1	e9 8b 00 00 00	 jmp	 $LN1@encodeStri
$LN73@encodeStri:
  003f6	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  003fa	e9 82 00 00 00	 jmp	 $LN1@encodeStri
$LN74@encodeStri:
  003ff	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00402	eb 7d		 jmp	 SHORT $LN1@encodeStri
$LN75@encodeStri:
  00404	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  00408	eb 77		 jmp	 SHORT $LN1@encodeStri
$LN76@encodeStri:
  0040a	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  0040e	eb 71		 jmp	 SHORT $LN1@encodeStri
$LN77@encodeStri:
  00410	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  00414	eb 6b		 jmp	 SHORT $LN1@encodeStri
$LN78@encodeStri:
  00416	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00419	eb 66		 jmp	 SHORT $LN1@encodeStri
$LN79@encodeStri:
  0041b	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  0041f	eb 60		 jmp	 SHORT $LN1@encodeStri
$LN80@encodeStri:
  00421	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  00425	eb 5a		 jmp	 SHORT $LN1@encodeStri
$LN81@encodeStri:
  00427	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  0042b	eb 54		 jmp	 SHORT $LN1@encodeStri
$LN82@encodeStri:
  0042d	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00430	eb 4f		 jmp	 SHORT $LN1@encodeStri
$LN83@encodeStri:
  00432	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  00436	eb 49		 jmp	 SHORT $LN1@encodeStri
$LN84@encodeStri:
  00438	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  0043c	eb 43		 jmp	 SHORT $LN1@encodeStri
$LN85@encodeStri:
  0043e	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00442	eb 3d		 jmp	 SHORT $LN1@encodeStri
$LN86@encodeStri:
  00444	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00447	eb 38		 jmp	 SHORT $LN1@encodeStri
$LN87@encodeStri:
  00449	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  0044d	eb 32		 jmp	 SHORT $LN1@encodeStri
$LN88@encodeStri:
  0044f	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  00453	eb 2c		 jmp	 SHORT $LN1@encodeStri
$LN89@encodeStri:
  00455	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00459	eb 26		 jmp	 SHORT $LN1@encodeStri
$LN90@encodeStri:
  0045b	88 58 06	 mov	 BYTE PTR [eax+6], bl
  0045e	eb 21		 jmp	 SHORT $LN1@encodeStri
$LN91@encodeStri:
  00460	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  00464	eb 1b		 jmp	 SHORT $LN1@encodeStri
$LN92@encodeStri:
  00466	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  0046a	eb 15		 jmp	 SHORT $LN1@encodeStri
$LN93@encodeStri:
  0046c	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00470	eb 0f		 jmp	 SHORT $LN1@encodeStri
$LN94@encodeStri:
  00472	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  00476	eb 09		 jmp	 SHORT $LN1@encodeStri
$LN95@encodeStri:
  00478	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  0047c	eb 03		 jmp	 SHORT $LN1@encodeStri
$LN96@encodeStri:
  0047e	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN1@encodeStri:
  00481	6a 05		 push	 5
  00483	5a		 pop	 edx
  00484	8b c8		 mov	 ecx, eax
  00486	c6 40 17 00	 mov	 BYTE PTR [eax+23], 0
  0048a	5b		 pop	 ebx
$LL104@encodeStri:
  0048b	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00491	83 c1 04	 add	 ecx, 4
  00494	4a		 dec	 edx
  00495	75 f4		 jne	 SHORT $LL104@encodeStri
  00497	56		 push	 esi
  00498	6a 14		 push	 20			; 00000014H
  0049a	5e		 pop	 esi
$LL101@encodeStri:
  0049b	8b ce		 mov	 ecx, esi
  0049d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a3	79 05		 jns	 SHORT $LN111@encodeStri
  004a5	49		 dec	 ecx
  004a6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004a9	41		 inc	 ecx
$LN111@encodeStri:
  004aa	b2 ed		 mov	 dl, -19			; ffffffedH
  004ac	2a d1		 sub	 dl, cl
  004ae	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b1	46		 inc	 esi
  004b2	83 fe 17	 cmp	 esi, 23			; 00000017H
  004b5	7c e4		 jl	 SHORT $LL101@encodeStri
  004b7	5e		 pop	 esi

; 217  : 		return e;
; 218  : 	}

  004b8	5d		 pop	 ebp
  004b9	c2 08 00	 ret	 8
??$encodeString@$0BI@@ioINILoader_e@@AAEPADAAY0BI@$$CBDPAD@Z ENDP ; ioINILoader_e::encodeString<24>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVioTalisman@@PAPAV1@V?$allocator@PAVioTalisman@@@std@@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@@Z ; std::_Uninitialized_move<ioTalisman * *,ioTalisman * *,std::allocator<ioTalisman *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVioTalisman@@PAPAV1@V?$allocator@PAVioTalisman@@@std@@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVioTalisman@@PAPAV1@V?$allocator@PAVioTalisman@@@std@@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@@Z PROC ; std::_Uninitialized_move<ioTalisman * *,ioTalisman * *,std::allocator<ioTalisman *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVioTalisman@@PAPAV1@V?$allocator@PAVioTalisman@@@std@@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@@Z ENDP ; std::_Uninitialized_move<ioTalisman * *,ioTalisman * *,std::allocator<ioTalisman *> >
_TEXT	ENDS
PUBLIC	??0?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::vector<ioTalisman *,std::allocator<ioTalisman *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::vector<ioTalisman *,std::allocator<ioTalisman *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::vector<ioTalisman *,std::allocator<ioTalisman *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@XZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTalisman *,std::allocator<ioTalisman *> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXPAPAVioTalisman@@0@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXPAPAVioTalisman@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXPAPAVioTalisman@@0@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXPAPAVioTalisman@@0@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Destroy
_TEXT	ENDS
PUBLIC	??$?0$0BI@@ioINILoader_e@@QAE@AAY0BI@$$CBD_N@Z	; ioINILoader_e::ioINILoader_e<24>
EXTRN	__imp_??0ioINILoader@@QAE@PBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$?0$0BI@@ioINILoader_e@@QAE@AAY0BI@$$CBD_N@Z
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_b$ = 12						; size = 1
??$?0$0BI@@ioINILoader_e@@QAE@AAY0BI@$$CBD_N@Z PROC	; ioINILoader_e::ioINILoader_e<24>, COMDAT
; _this$ = ecx

; 224  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _fn$[ebp]
  0000b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000d	8d 87 50 03 00
	00		 lea	 eax, DWORD PTR [edi+848]
  00013	84 d2		 test	 dl, dl
  00015	0f 84 6a 04 00
	00		 je	 $LN99@ioINILoade
  0001b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0001e	88 10		 mov	 BYTE PTR [eax], dl
  00020	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00023	84 d2		 test	 dl, dl
  00025	0f 84 54 04 00
	00		 je	 $LN98@ioINILoade
  0002b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0002e	88 50 01	 mov	 BYTE PTR [eax+1], dl
  00031	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00034	84 d2		 test	 dl, dl
  00036	0f 84 3d 04 00
	00		 je	 $LN97@ioINILoade
  0003c	b3 eb		 mov	 bl, -21			; ffffffebH
  0003e	32 d3		 xor	 dl, bl
  00040	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00043	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  00046	84 d2		 test	 dl, dl
  00048	0f 84 25 04 00
	00		 je	 $LN96@ioINILoade
  0004e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00051	88 50 03	 mov	 BYTE PTR [eax+3], dl
  00054	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00057	84 d2		 test	 dl, dl
  00059	0f 84 0e 04 00
	00		 je	 $LN95@ioINILoade
  0005f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00062	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00065	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00068	84 d2		 test	 dl, dl
  0006a	0f 84 f7 03 00
	00		 je	 $LN94@ioINILoade
  00070	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00073	88 50 05	 mov	 BYTE PTR [eax+5], dl
  00076	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00079	84 d2		 test	 dl, dl
  0007b	0f 84 e1 03 00
	00		 je	 $LN93@ioINILoade
  00081	32 d3		 xor	 dl, bl
  00083	88 50 06	 mov	 BYTE PTR [eax+6], dl
  00086	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 cb 03 00
	00		 je	 $LN92@ioINILoade
  00091	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00094	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00097	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  0009a	84 d2		 test	 dl, dl
  0009c	0f 84 b4 03 00
	00		 je	 $LN91@ioINILoade
  000a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a5	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a8	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000ab	84 d2		 test	 dl, dl
  000ad	0f 84 9d 03 00
	00		 je	 $LN90@ioINILoade
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b9	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000bc	84 d2		 test	 dl, dl
  000be	0f 84 87 03 00
	00		 je	 $LN89@ioINILoade
  000c4	32 d3		 xor	 dl, bl
  000c6	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c9	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000cc	84 d2		 test	 dl, dl
  000ce	0f 84 71 03 00
	00		 je	 $LN88@ioINILoade
  000d4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d7	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000da	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000dd	84 d2		 test	 dl, dl
  000df	0f 84 5a 03 00
	00		 je	 $LN87@ioINILoade
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000eb	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000ee	84 d2		 test	 dl, dl
  000f0	0f 84 43 03 00
	00		 je	 $LN86@ioINILoade
  000f6	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f9	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000fc	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000ff	84 d2		 test	 dl, dl
  00101	0f 84 2d 03 00
	00		 je	 $LN85@ioINILoade
  00107	32 d3		 xor	 dl, bl
  00109	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  0010c	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  0010f	84 d2		 test	 dl, dl
  00111	0f 84 17 03 00
	00		 je	 $LN84@ioINILoade
  00117	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011a	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  0011d	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00120	84 d2		 test	 dl, dl
  00122	0f 84 00 03 00
	00		 je	 $LN83@ioINILoade
  00128	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012b	88 50 10	 mov	 BYTE PTR [eax+16], dl
  0012e	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00131	84 d2		 test	 dl, dl
  00133	0f 84 e9 02 00
	00		 je	 $LN82@ioINILoade
  00139	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0013c	88 50 11	 mov	 BYTE PTR [eax+17], dl
  0013f	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  00142	84 d2		 test	 dl, dl
  00144	0f 84 d3 02 00
	00		 je	 $LN81@ioINILoade
  0014a	32 d3		 xor	 dl, bl
  0014c	88 50 12	 mov	 BYTE PTR [eax+18], dl
  0014f	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  00152	84 d2		 test	 dl, dl
  00154	0f 84 bd 02 00
	00		 je	 $LN80@ioINILoade
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00160	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  00163	84 d2		 test	 dl, dl
  00165	0f 84 a6 02 00
	00		 je	 $LN79@ioINILoade
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00171	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00174	84 d2		 test	 dl, dl
  00176	0f 84 8f 02 00
	00		 je	 $LN78@ioINILoade
  0017c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0017f	88 50 15	 mov	 BYTE PTR [eax+21], dl
  00182	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  00185	84 d2		 test	 dl, dl
  00187	0f 84 79 02 00
	00		 je	 $LN77@ioINILoade
  0018d	32 d3		 xor	 dl, bl
  0018f	88 50 16	 mov	 BYTE PTR [eax+22], dl
  00192	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  00195	84 d2		 test	 dl, dl
  00197	0f 84 60 02 00
	00		 je	 $LN76@ioINILoade
  0019d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a0	88 50 17	 mov	 BYTE PTR [eax+23], dl
  001a3	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  001a6	84 d2		 test	 dl, dl
  001a8	0f 84 46 02 00
	00		 je	 $LN75@ioINILoade
  001ae	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b1	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001b4	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b7	84 d2		 test	 dl, dl
  001b9	0f 84 2c 02 00
	00		 je	 $LN74@ioINILoade
  001bf	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c2	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001c5	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c8	84 d2		 test	 dl, dl
  001ca	0f 84 13 02 00
	00		 je	 $LN73@ioINILoade
  001d0	32 d3		 xor	 dl, bl
  001d2	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001d5	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d8	84 d2		 test	 dl, dl
  001da	0f 84 fa 01 00
	00		 je	 $LN72@ioINILoade
  001e0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e3	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001e6	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e9	84 d2		 test	 dl, dl
  001eb	0f 84 e0 01 00
	00		 je	 $LN71@ioINILoade
  001f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f4	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f7	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001fa	84 d2		 test	 dl, dl
  001fc	0f 84 c6 01 00
	00		 je	 $LN70@ioINILoade
  00202	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00205	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00208	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  0020b	84 d2		 test	 dl, dl
  0020d	0f 84 ad 01 00
	00		 je	 $LN69@ioINILoade
  00213	32 d3		 xor	 dl, bl
  00215	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00218	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  0021b	84 d2		 test	 dl, dl
  0021d	0f 84 94 01 00
	00		 je	 $LN68@ioINILoade
  00223	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00226	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00229	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  0022c	84 d2		 test	 dl, dl
  0022e	0f 84 7a 01 00
	00		 je	 $LN67@ioINILoade
  00234	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00237	88 50 20	 mov	 BYTE PTR [eax+32], dl
  0023a	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  0023d	84 d2		 test	 dl, dl
  0023f	0f 84 60 01 00
	00		 je	 $LN66@ioINILoade
  00245	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00248	88 50 21	 mov	 BYTE PTR [eax+33], dl
  0024b	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  0024e	84 d2		 test	 dl, dl
  00250	0f 84 47 01 00
	00		 je	 $LN65@ioINILoade
  00256	32 d3		 xor	 dl, bl
  00258	88 50 22	 mov	 BYTE PTR [eax+34], dl
  0025b	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  0025e	84 d2		 test	 dl, dl
  00260	0f 84 2e 01 00
	00		 je	 $LN64@ioINILoade
  00266	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00269	88 50 23	 mov	 BYTE PTR [eax+35], dl
  0026c	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  0026f	84 d2		 test	 dl, dl
  00271	0f 84 14 01 00
	00		 je	 $LN63@ioINILoade
  00277	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0027a	88 50 24	 mov	 BYTE PTR [eax+36], dl
  0027d	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00280	84 d2		 test	 dl, dl
  00282	0f 84 fa 00 00
	00		 je	 $LN62@ioINILoade
  00288	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0028b	88 50 25	 mov	 BYTE PTR [eax+37], dl
  0028e	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  00291	84 d2		 test	 dl, dl
  00293	0f 84 e1 00 00
	00		 je	 $LN61@ioINILoade
  00299	32 d3		 xor	 dl, bl
  0029b	88 50 26	 mov	 BYTE PTR [eax+38], dl
  0029e	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  002a1	84 d2		 test	 dl, dl
  002a3	0f 84 c8 00 00
	00		 je	 $LN60@ioINILoade
  002a9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002ac	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002af	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002b2	84 d2		 test	 dl, dl
  002b4	0f 84 ae 00 00
	00		 je	 $LN59@ioINILoade
  002ba	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002bd	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002c0	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002c3	84 d2		 test	 dl, dl
  002c5	0f 84 94 00 00
	00		 je	 $LN58@ioINILoade
  002cb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002ce	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002d1	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002d4	84 d2		 test	 dl, dl
  002d6	74 7f		 je	 SHORT $LN57@ioINILoade
  002d8	32 d3		 xor	 dl, bl
  002da	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002dd	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002e0	84 d2		 test	 dl, dl
  002e2	74 6a		 je	 SHORT $LN56@ioINILoade
  002e4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e7	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002ea	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002ed	84 d2		 test	 dl, dl
  002ef	74 54		 je	 SHORT $LN55@ioINILoade
  002f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002f4	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f7	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002fa	84 d2		 test	 dl, dl
  002fc	74 3e		 je	 SHORT $LN54@ioINILoade
  002fe	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00301	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  00304	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00307	84 d2		 test	 dl, dl
  00309	74 29		 je	 SHORT $LN53@ioINILoade
  0030b	32 d3		 xor	 dl, bl
  0030d	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00310	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  00313	84 d2		 test	 dl, dl
  00315	74 14		 je	 SHORT $LN52@ioINILoade
  00317	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0031a	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  0031d	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00320	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00323	88 48 30	 mov	 BYTE PTR [eax+48], cl
  00326	e9 5d 01 00 00	 jmp	 $LN4@ioINILoade
$LN52@ioINILoade:
  0032b	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  0032f	e9 54 01 00 00	 jmp	 $LN4@ioINILoade
$LN53@ioINILoade:
  00334	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00337	e9 4c 01 00 00	 jmp	 $LN4@ioINILoade
$LN54@ioINILoade:
  0033c	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00340	e9 43 01 00 00	 jmp	 $LN4@ioINILoade
$LN55@ioINILoade:
  00345	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00349	e9 3a 01 00 00	 jmp	 $LN4@ioINILoade
$LN56@ioINILoade:
  0034e	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  00352	e9 31 01 00 00	 jmp	 $LN4@ioINILoade
$LN57@ioINILoade:
  00357	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  0035a	e9 29 01 00 00	 jmp	 $LN4@ioINILoade
$LN58@ioINILoade:
  0035f	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  00363	e9 20 01 00 00	 jmp	 $LN4@ioINILoade
$LN59@ioINILoade:
  00368	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  0036c	e9 17 01 00 00	 jmp	 $LN4@ioINILoade
$LN60@ioINILoade:
  00371	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  00375	e9 0e 01 00 00	 jmp	 $LN4@ioINILoade
$LN61@ioINILoade:
  0037a	88 58 26	 mov	 BYTE PTR [eax+38], bl
  0037d	e9 06 01 00 00	 jmp	 $LN4@ioINILoade
$LN62@ioINILoade:
  00382	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  00386	e9 fd 00 00 00	 jmp	 $LN4@ioINILoade
$LN63@ioINILoade:
  0038b	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  0038f	e9 f4 00 00 00	 jmp	 $LN4@ioINILoade
$LN64@ioINILoade:
  00394	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00398	e9 eb 00 00 00	 jmp	 $LN4@ioINILoade
$LN65@ioINILoade:
  0039d	88 58 22	 mov	 BYTE PTR [eax+34], bl
  003a0	e9 e3 00 00 00	 jmp	 $LN4@ioINILoade
$LN66@ioINILoade:
  003a5	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a9	e9 da 00 00 00	 jmp	 $LN4@ioINILoade
$LN67@ioINILoade:
  003ae	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003b2	e9 d1 00 00 00	 jmp	 $LN4@ioINILoade
$LN68@ioINILoade:
  003b7	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003bb	e9 c8 00 00 00	 jmp	 $LN4@ioINILoade
$LN69@ioINILoade:
  003c0	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003c3	e9 c0 00 00 00	 jmp	 $LN4@ioINILoade
$LN70@ioINILoade:
  003c8	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003cc	e9 b7 00 00 00	 jmp	 $LN4@ioINILoade
$LN71@ioINILoade:
  003d1	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003d5	e9 ae 00 00 00	 jmp	 $LN4@ioINILoade
$LN72@ioINILoade:
  003da	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003de	e9 a5 00 00 00	 jmp	 $LN4@ioINILoade
$LN73@ioINILoade:
  003e3	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003e6	e9 9d 00 00 00	 jmp	 $LN4@ioINILoade
$LN74@ioINILoade:
  003eb	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003ef	e9 94 00 00 00	 jmp	 $LN4@ioINILoade
$LN75@ioINILoade:
  003f4	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f8	e9 8b 00 00 00	 jmp	 $LN4@ioINILoade
$LN76@ioINILoade:
  003fd	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  00401	e9 82 00 00 00	 jmp	 $LN4@ioINILoade
$LN77@ioINILoade:
  00406	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00409	eb 7d		 jmp	 SHORT $LN4@ioINILoade
$LN78@ioINILoade:
  0040b	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  0040f	eb 77		 jmp	 SHORT $LN4@ioINILoade
$LN79@ioINILoade:
  00411	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  00415	eb 71		 jmp	 SHORT $LN4@ioINILoade
$LN80@ioINILoade:
  00417	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  0041b	eb 6b		 jmp	 SHORT $LN4@ioINILoade
$LN81@ioINILoade:
  0041d	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00420	eb 66		 jmp	 SHORT $LN4@ioINILoade
$LN82@ioINILoade:
  00422	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  00426	eb 60		 jmp	 SHORT $LN4@ioINILoade
$LN83@ioINILoade:
  00428	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  0042c	eb 5a		 jmp	 SHORT $LN4@ioINILoade
$LN84@ioINILoade:
  0042e	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  00432	eb 54		 jmp	 SHORT $LN4@ioINILoade
$LN85@ioINILoade:
  00434	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00437	eb 4f		 jmp	 SHORT $LN4@ioINILoade
$LN86@ioINILoade:
  00439	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  0043d	eb 49		 jmp	 SHORT $LN4@ioINILoade
$LN87@ioINILoade:
  0043f	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  00443	eb 43		 jmp	 SHORT $LN4@ioINILoade
$LN88@ioINILoade:
  00445	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00449	eb 3d		 jmp	 SHORT $LN4@ioINILoade
$LN89@ioINILoade:
  0044b	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  0044e	eb 38		 jmp	 SHORT $LN4@ioINILoade
$LN90@ioINILoade:
  00450	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  00454	eb 32		 jmp	 SHORT $LN4@ioINILoade
$LN91@ioINILoade:
  00456	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  0045a	eb 2c		 jmp	 SHORT $LN4@ioINILoade
$LN92@ioINILoade:
  0045c	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00460	eb 26		 jmp	 SHORT $LN4@ioINILoade
$LN93@ioINILoade:
  00462	88 58 06	 mov	 BYTE PTR [eax+6], bl
  00465	eb 21		 jmp	 SHORT $LN4@ioINILoade
$LN94@ioINILoade:
  00467	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  0046b	eb 1b		 jmp	 SHORT $LN4@ioINILoade
$LN95@ioINILoade:
  0046d	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  00471	eb 15		 jmp	 SHORT $LN4@ioINILoade
$LN96@ioINILoade:
  00473	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00477	eb 0f		 jmp	 SHORT $LN4@ioINILoade
$LN97@ioINILoade:
  00479	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  0047d	eb 09		 jmp	 SHORT $LN4@ioINILoade
$LN98@ioINILoade:
  0047f	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  00483	eb 03		 jmp	 SHORT $LN4@ioINILoade
$LN99@ioINILoade:
  00485	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN4@ioINILoade:
  00488	6a 05		 push	 5
  0048a	8b c8		 mov	 ecx, eax
  0048c	c6 40 17 00	 mov	 BYTE PTR [eax+23], 0
  00490	5a		 pop	 edx
$LL107@ioINILoade:
  00491	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00497	83 c1 04	 add	 ecx, 4
  0049a	4a		 dec	 edx
  0049b	75 f4		 jne	 SHORT $LL107@ioINILoade
  0049d	6a 14		 push	 20			; 00000014H
  0049f	5e		 pop	 esi
$LL104@ioINILoade:
  004a0	8b ce		 mov	 ecx, esi
  004a2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a8	79 05		 jns	 SHORT $LN114@ioINILoade
  004aa	49		 dec	 ecx
  004ab	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004ae	41		 inc	 ecx
$LN114@ioINILoade:
  004af	b2 ed		 mov	 dl, -19			; ffffffedH
  004b1	2a d1		 sub	 dl, cl
  004b3	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b6	46		 inc	 esi
  004b7	83 fe 17	 cmp	 esi, 23			; 00000017H
  004ba	7c e4		 jl	 SHORT $LL104@ioINILoade
  004bc	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  004bf	8b cf		 mov	 ecx, edi
  004c1	50		 push	 eax
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z

; 225  : 	}

  004c8	8b c7		 mov	 eax, edi
  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	5b		 pop	 ebx
  004cd	5d		 pop	 ebp
  004ce	c2 08 00	 ret	 8
??$?0$0BI@@ioINILoader_e@@QAE@AAY0BI@$$CBD_N@Z ENDP	; ioINILoader_e::ioINILoader_e<24>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@ABQAV2@@Z ; std::_Cons_val<std::allocator<ioTalisman *>,ioTalisman *,ioTalisman * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<ioTalisman *>,ioTalisman *,ioTalisman * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioTalisman@@@std@@PAVioTalisman@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTalisman@@@0@PAPAVioTalisman@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioTalisman *>,ioTalisman *,ioTalisman * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVioTalisman@@@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEPAPAVioTalisman@@PAPAV2@00@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Umove<ioTalisman * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVioTalisman@@@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEPAPAVioTalisman@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVioTalisman@@@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEPAPAVioTalisman@@PAPAV2@00@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Umove<ioTalisman * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioTalisman@@PAPAV1@V?$allocator@PAVioTalisman@@@std@@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@@Z ; std::_Uninitialized_move<ioTalisman * *,ioTalisman * *,std::allocator<ioTalisman *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVioTalisman@@@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEPAPAVioTalisman@@PAPAV2@00@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Umove<ioTalisman * *>
_TEXT	ENDS
PUBLIC	?FindTalisman@ioTalismanMaker@@IAEPAVioTalisman@@H@Z ; ioTalismanMaker::FindTalisman
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotalismanmaker.cpp
;	COMDAT ?FindTalisman@ioTalismanMaker@@IAEPAVioTalisman@@H@Z
_TEXT	SEGMENT
_iTalismanNum$ = 8					; size = 4
?FindTalisman@ioTalismanMaker@@IAEPAVioTalisman@@H@Z PROC ; ioTalismanMaker::FindTalisman, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	TalismanList::iterator iter = m_vTalismanList.begin();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 82   : 
; 83   : 	while( iter != m_vTalismanList.end() )

  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	eb 0d		 jmp	 SHORT $LN45@FindTalism
$LL4@FindTalism:

; 84   : 	{
; 85   : 		if( (*iter)->GetTalismanNum() == iTalismanNum )

  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00010	3b 55 08	 cmp	 edx, DWORD PTR _iTalismanNum$[ebp]
  00013	74 0d		 je	 SHORT $LN44@FindTalism

; 87   : 		else
; 88   : 			++iter;

  00015	83 c0 04	 add	 eax, 4
$LN45@FindTalism:

; 82   : 
; 83   : 	while( iter != m_vTalismanList.end() )

  00018	3b c1		 cmp	 eax, ecx
  0001a	75 ef		 jne	 SHORT $LL4@FindTalism

; 89   : 	}
; 90   : 
; 91   : 	return NULL;

  0001c	33 c0		 xor	 eax, eax
$LN5@FindTalism:

; 92   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN44@FindTalism:

; 86   : 			return (*iter);

  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	eb f8		 jmp	 SHORT $LN5@FindTalism
?FindTalisman@ioTalismanMaker@@IAEPAVioTalisman@@H@Z ENDP ; ioTalismanMaker::FindTalisman
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@0@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$533157 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@0@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$533157[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAVioTalisman@@PAPAV1@@std@@YAPAPAVioTalisman@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTalisman * *,ioTalisman * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXXZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXI@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAVioTalisman@@@std@@YAPAPAVioTalisman@@IPAPAV1@@Z ; std::_Allocate<ioTalisman *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioTalisman@@PAPAV1@V?$allocator@PAVioTalisman@@@std@@@std@@YAPAPAVioTalisman@@PAPAV1@00AAV?$allocator@PAVioTalisman@@@0@@Z ; std::_Uninitialized_move<ioTalisman * *,ioTalisman * *,std::allocator<ioTalisman *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::reserve
_TEXT	ENDS
PUBLIC	??_C@_0DI@GEJENBCI@ioTalismanMaker?3?3CreateTalisman?5@ ; `string'
PUBLIC	?CreateTalisman@ioTalismanMaker@@QAEPAVioTalisman@@PAVioBaseChar@@H@Z ; ioTalismanMaker::CreateTalisman
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	?InitTalisman@ioTalisman@@QAEXPAVioBaseChar@@@Z:PROC ; ioTalisman::InitTalisman
EXTRN	?Clone@ioTalisman@@QAEPAV1@XZ:PROC		; ioTalisman::Clone
;	COMDAT ??_C@_0DI@GEJENBCI@ioTalismanMaker?3?3CreateTalisman?5@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotalismanmaker.cpp
CONST	SEGMENT
??_C@_0DI@GEJENBCI@ioTalismanMaker?3?3CreateTalisman?5@ DB 'ioTalismanMak'
	DB	'er::CreateTalisman - Not Find Talisman: %d', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?CreateTalisman@ioTalismanMaker@@QAEPAVioTalisman@@PAVioBaseChar@@H@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_iTalismanNum$ = 12					; size = 4
?CreateTalisman@ioTalismanMaker@@QAEPAVioTalisman@@PAVioBaseChar@@H@Z PROC ; ioTalismanMaker::CreateTalisman, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 64   : 	ioTalisman *pTalisman = FindTalisman( iTalismanNum );

  00004	ff 75 0c	 push	 DWORD PTR _iTalismanNum$[ebp]
  00007	e8 00 00 00 00	 call	 ?FindTalisman@ioTalismanMaker@@IAEPAVioTalisman@@H@Z ; ioTalismanMaker::FindTalisman

; 65   : 	if( pTalisman )

  0000c	85 c0		 test	 eax, eax
  0000e	74 1b		 je	 SHORT $LN1@CreateTali

; 66   : 	{
; 67   : 		ioTalisman *pNewTalisman = pTalisman->Clone();

  00010	8b c8		 mov	 ecx, eax
  00012	e8 00 00 00 00	 call	 ?Clone@ioTalisman@@QAEPAV1@XZ ; ioTalisman::Clone
  00017	8b f0		 mov	 esi, eax

; 68   : 		if( pNewTalisman )

  00019	85 f6		 test	 esi, esi
  0001b	74 0e		 je	 SHORT $LN1@CreateTali

; 69   : 		{
; 70   : 			pNewTalisman->InitTalisman( pOwner );

  0001d	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?InitTalisman@ioTalisman@@QAEXPAVioBaseChar@@@Z ; ioTalisman::InitTalisman

; 71   : 			return pNewTalisman;

  00027	8b c6		 mov	 eax, esi
  00029	eb 1b		 jmp	 SHORT $LN3@CreateTali
$LN1@CreateTali:

; 72   : 		}
; 73   : 	}
; 74   : 
; 75   : 	LOG.PrintTimeAndLog( 0, "ioTalismanMaker::CreateTalisman - Not Find Talisman: %d", iTalismanNum );

  0002b	ff 75 0c	 push	 DWORD PTR _iTalismanNum$[ebp]
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@GEJENBCI@ioTalismanMaker?3?3CreateTalisman?5@
  00033	6a 00		 push	 0
  00035	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 76   : 	return NULL;

  00044	33 c0		 xor	 eax, eax
$LN3@CreateTali:
  00046	5e		 pop	 esi

; 77   : }

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
?CreateTalisman@ioTalismanMaker@@QAEPAVioTalisman@@PAVioBaseChar@@H@Z ENDP ; ioTalismanMaker::CreateTalisman
_TEXT	ENDS
PUBLIC	??1?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::~vector<ioTalisman *,std::allocator<ioTalisman *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::~vector<ioTalisman *,std::allocator<ioTalisman *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Tidy
??1?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::~vector<ioTalisman *,std::allocator<ioTalisman *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T533324 = -4						; size = 4
?clear@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXXZ PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T533324[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@0@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXI@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IBEII@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXI@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioTalismanMaker@@6B@			; ioTalismanMaker::`vftable'
PUBLIC	??0ioTalismanMaker@@QAE@PAVioPlayStage@@@Z	; ioTalismanMaker::ioTalismanMaker
PUBLIC	??_R4ioTalismanMaker@@6B@			; ioTalismanMaker::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioTalismanMaker@@@8			; ioTalismanMaker `RTTI Type Descriptor'
PUBLIC	??_R3ioTalismanMaker@@8				; ioTalismanMaker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioTalismanMaker@@8				; ioTalismanMaker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioTalismanMaker@@8		; ioTalismanMaker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VioTalismanMaker@@@@8	; Singleton<ioTalismanMaker>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VioTalismanMaker@@@@@8	; Singleton<ioTalismanMaker> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VioTalismanMaker@@@@8		; Singleton<ioTalismanMaker>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VioTalismanMaker@@@@8		; Singleton<ioTalismanMaker>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VioTalismanMaker@@@@8	; Singleton<ioTalismanMaker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioTalismanMaker@@UAEPAXI@Z:PROC		; ioTalismanMaker::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VioTalismanMaker@@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VioTalismanMaker@@@@8 DD FLAT:??_R0?AV?$Singleton@VioTalismanMaker@@@@@8 ; Singleton<ioTalismanMaker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioTalismanMaker@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VioTalismanMaker@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VioTalismanMaker@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VioTalismanMaker@@@@8 ; Singleton<ioTalismanMaker>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VioTalismanMaker@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VioTalismanMaker@@@@8 DD 00H		; Singleton<ioTalismanMaker>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VioTalismanMaker@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VioTalismanMaker@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VioTalismanMaker@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<ioTalismanMaker> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VioTalismanMaker@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VioTalismanMaker@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VioTalismanMaker@@@@8 DD FLAT:??_R0?AV?$Singleton@VioTalismanMaker@@@@@8 ; Singleton<ioTalismanMaker>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioTalismanMaker@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioTalismanMaker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioTalismanMaker@@8 DD FLAT:??_R0?AVioTalismanMaker@@@8 ; ioTalismanMaker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioTalismanMaker@@8
rdata$r	ENDS
;	COMDAT ??_R2ioTalismanMaker@@8
rdata$r	SEGMENT
??_R2ioTalismanMaker@@8 DD FLAT:??_R1A@?0A@EA@ioTalismanMaker@@8 ; ioTalismanMaker::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VioTalismanMaker@@@@8
rdata$r	ENDS
;	COMDAT ??_R3ioTalismanMaker@@8
rdata$r	SEGMENT
??_R3ioTalismanMaker@@8 DD 00H				; ioTalismanMaker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioTalismanMaker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioTalismanMaker@@@8
_DATA	SEGMENT
??_R0?AVioTalismanMaker@@@8 DD FLAT:??_7type_info@@6B@	; ioTalismanMaker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioTalismanMaker@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioTalismanMaker@@6B@
rdata$r	SEGMENT
??_R4ioTalismanMaker@@6B@ DD 00H			; ioTalismanMaker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioTalismanMaker@@@8
	DD	FLAT:??_R3ioTalismanMaker@@8
rdata$r	ENDS
;	COMDAT ??_7ioTalismanMaker@@6B@
CONST	SEGMENT
??_7ioTalismanMaker@@6B@ DD FLAT:??_R4ioTalismanMaker@@6B@ ; ioTalismanMaker::`vftable'
	DD	FLAT:??_EioTalismanMaker@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotalismanmaker.cpp
CONST	ENDS
;	COMDAT ??0ioTalismanMaker@@QAE@PAVioPlayStage@@@Z
_TEXT	SEGMENT
$T533505 = 8						; size = 4
_pStage$ = 8						; size = 4
??0ioTalismanMaker@@QAE@PAVioPlayStage@@@Z PROC		; ioTalismanMaker::ioTalismanMaker, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A, esi ; Singleton<ioTalismanMaker>::ms_Singleton
  0000c	33 c0		 xor	 eax, eax
  0000e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioTalismanMaker@@6B@
  00017	89 01		 mov	 DWORD PTR [ecx], eax
  00019	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0001c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 14   : 	m_pPlayStage = pStage;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _pStage$[ebp]
  00022	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 15   : 	m_vTalismanList.clear();

  00025	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	8d 45 08	 lea	 eax, DWORD PTR $T533505[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@0@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::erase

; 16   : }

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??0ioTalismanMaker@@QAE@PAVioPlayStage@@@Z ENDP		; ioTalismanMaker::ioTalismanMaker
_TEXT	ENDS
PUBLIC	?ClearTalismanList@ioTalismanMaker@@QAEXXZ	; ioTalismanMaker::ClearTalismanList
; Function compile flags: /Ogsp
;	COMDAT ?ClearTalismanList@ioTalismanMaker@@QAEXXZ
_TEXT	SEGMENT
$T533672 = -4						; size = 4
?ClearTalismanList@ioTalismanMaker@@QAEXXZ PROC		; ioTalismanMaker::ClearTalismanList, COMDAT
; _this$ = ecx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	57		 push	 edi

; 96   : 	TalismanList::iterator iter = m_vTalismanList.begin();

  00009	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000c	eb 0f		 jmp	 SHORT $LN57@ClearTalis
$LL2@ClearTalis:

; 99   : 	{
; 100  : 		delete (*iter);

  0000e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00010	85 c9		 test	 ecx, ecx
  00012	74 06		 je	 SHORT $LN5@ClearTalis
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	6a 01		 push	 1
  00018	ff 10		 call	 DWORD PTR [eax]
$LN5@ClearTalis:

; 101  : 		++iter;

  0001a	83 c7 04	 add	 edi, 4
$LN57@ClearTalis:

; 97   : 
; 98   : 	while( iter != m_vTalismanList.end() )

  0001d	3b 7b 08	 cmp	 edi, DWORD PTR [ebx+8]
  00020	75 ec		 jne	 SHORT $LL2@ClearTalis

; 102  : 	}
; 103  : 	m_vTalismanList.clear();

  00022	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00025	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	8d 45 fc	 lea	 eax, DWORD PTR $T533672[ebp]
  0002d	50		 push	 eax
  0002e	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00031	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@@2@0@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::erase
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 104  : }

  00039	c9		 leave
  0003a	c3		 ret	 0
?ClearTalismanList@ioTalismanMaker@@QAEXXZ ENDP		; ioTalismanMaker::ClearTalismanList
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXABQAVioTalisman@@@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXABQAVioTalisman@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXABQAVioTalisman@@@Z PROC ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXI@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXI@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXABQAVioTalisman@@@Z ENDP ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::push_back
_TEXT	ENDS
PUBLIC	??1ioTalismanMaker@@UAE@XZ			; ioTalismanMaker::~ioTalismanMaker
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1ioTalismanMaker@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioTalismanMaker@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioTalismanMaker@@UAE@XZ$1
__ehfuncinfo$??1ioTalismanMaker@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioTalismanMaker@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotalismanmaker.cpp
xdata$x	ENDS
;	COMDAT ??1ioTalismanMaker@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioTalismanMaker@@UAE@XZ PROC				; ioTalismanMaker::~ioTalismanMaker, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioTalismanMaker@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioTalismanMaker@@6B@
  00017	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 20   : 	ClearTalismanList();

  0001e	e8 00 00 00 00	 call	 ?ClearTalismanList@ioTalismanMaker@@QAEXXZ ; ioTalismanMaker::ClearTalismanList

; 21   : }

  00023	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@IAEXXZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::_Tidy
  0002f	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioTalismanMaker@@@@1PAVioTalismanMaker@@A, 0 ; Singleton<ioTalismanMaker>::ms_Singleton
  00036	e8 00 00 00 00	 call	 __EH_epilog3
  0003b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioTalismanMaker@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioTalismanMaker@@@@QAE@XZ ; Singleton<ioTalismanMaker>::~Singleton<ioTalismanMaker>
__unwindfunclet$??1ioTalismanMaker@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 04	 add	 ecx, 4
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAE@XZ ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::~vector<ioTalisman *,std::allocator<ioTalisman *> >
__ehhandler$??1ioTalismanMaker@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioTalismanMaker@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioTalismanMaker@@UAE@XZ ENDP				; ioTalismanMaker::~ioTalismanMaker
PUBLIC	??_C@_0DF@LNAIAKN@ioTalismanMaker?3?3LoadTalismanLis@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	?LoadTalismanList@ioTalismanMaker@@QAEXXZ	; ioTalismanMaker::LoadTalismanList
EXTRN	?LoadProperty@ioTalisman@@QAEXAAVioINILoader@@@Z:PROC ; ioTalisman::LoadProperty
EXTRN	??0ioTalisman@@QAE@XZ:PROC			; ioTalisman::ioTalisman
EXTRN	__imp_?SetTitle@ioINILoader@@QAEXPBD@Z:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_0DF@LNAIAKN@ioTalismanMaker?3?3LoadTalismanLis@
CONST	SEGMENT
??_C@_0DF@LNAIAKN@ioTalismanMaker?3?3LoadTalismanLis@ DB 'ioTalismanMaker'
	DB	'::LoadTalismanList - %d Already Exist', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadTalismanList@ioTalismanMaker@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTalismanList@ioTalismanMaker@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadTalismanList@ioTalismanMaker@@QAEXXZ$1
__ehfuncinfo$?LoadTalismanList@ioTalismanMaker@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadTalismanList@ioTalismanMaker@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?LoadTalismanList@ioTalismanMaker@@QAEXXZ
_TEXT	SEGMENT
tv3254 = -1240						; size = 4
_iNum$ = -1236						; size = 4
$T533844 = -1232					; size = 4
_pTalisman$530681 = -1232				; size = 4
_this$GSCopy$ = -1228					; size = 4
_kLoader$ = -1224					; size = 912
_szTitle$ = -312					; size = 260
__k$534251 = -52					; size = 13
__t$534154 = -32					; size = 12
___encStr$530531 = -32					; size = 11
__$EHRec$ = -12						; size = 12
?LoadTalismanList@ioTalismanMaker@@QAEXXZ PROC		; ioTalismanMaker::LoadTalismanList, COMDAT
; _this$ = ecx

; 29   : {

  00000	68 cc 04 00 00	 push	 1228			; 000004ccH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadTalismanList@ioTalismanMaker@@QAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 30   : 	ioINILoader_e kLoader( "config/sp2_talisman.ini" );

  0000f	6a 05		 push	 5
  00011	89 8d 34 fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00017	c7 85 88 fe ff
	ff 8e 83 85 8c	 mov	 DWORD PTR _kLoader$[ebp+848], -1937407090 ; 8c85838eH
  00021	c7 85 8c fe ff
	ff 84 8b c4 99	 mov	 DWORD PTR _kLoader$[ebp+852], -1715172476 ; 99c48b84H
  0002b	c7 85 90 fe ff
	ff 9d de b4 9e	 mov	 DWORD PTR _kLoader$[ebp+856], -1632313699 ; 9eb4de9dH
  00035	c7 85 94 fe ff
	ff 8c 80 82 99	 mov	 DWORD PTR _kLoader$[ebp+860], -1719500660 ; 9982808cH
  0003f	c7 85 98 fe ff
	ff 80 8d 85 c4	 mov	 DWORD PTR _kLoader$[ebp+864], -997880448 ; c4858d80H
  00049	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  0004f	33 db		 xor	 ebx, ebx
  00051	c7 85 9c fe ff
	ff 84 82 82 00	 mov	 DWORD PTR _kLoader$[ebp+868], 8553092 ; 00828284H
  0005b	59		 pop	 ecx
$LL220@LoadTalism:
  0005c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00062	83 c0 04	 add	 eax, 4
  00065	49		 dec	 ecx
  00066	75 f4		 jne	 SHORT $LL220@LoadTalism
  00068	6a 14		 push	 20			; 00000014H
  0006a	5e		 pop	 esi
$LL217@LoadTalism:
  0006b	8b c6		 mov	 eax, esi
  0006d	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00072	79 05		 jns	 SHORT $LN467@LoadTalism
  00074	48		 dec	 eax
  00075	83 c8 fc	 or	 eax, -4			; fffffffcH
  00078	40		 inc	 eax
$LN467@LoadTalism:
  00079	b1 ed		 mov	 cl, -19			; ffffffedH
  0007b	2a c8		 sub	 cl, al
  0007d	30 8c 35 88 fe
	ff ff		 xor	 BYTE PTR _kLoader$[ebp+esi+848], cl
  00084	46		 inc	 esi
  00085	83 fe 17	 cmp	 esi, 23			; 00000017H
  00088	7c e1		 jl	 SHORT $LL217@LoadTalism
  0008a	6a 01		 push	 1
  0008c	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  00092	50		 push	 eax
  00093	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z
  0009f	6a 02		 push	 2
  000a1	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 31   : 
; 32   : 	char szTitle[MAX_PATH];
; 33   : 
; 34   : 	int iNum = kLoader.LoadInt_e( "common_info", "talisman_cnt", 0 );

  000a4	c7 45 e0 8e 83
	86 87		 mov	 DWORD PTR __t$534154[ebp], -2021227634 ; 8786838eH
  000ab	c7 45 e4 82 82
	b4 83		 mov	 DWORD PTR __t$534154[ebp+4], -2085322110 ; 83b48282H
  000b2	8d 45 e0	 lea	 eax, DWORD PTR __t$534154[ebp]
  000b5	c7 45 e8 83 8a
	84 00		 mov	 DWORD PTR __t$534154[ebp+8], 8686211 ; 00848a83H
  000bc	59		 pop	 ecx
$LL422@LoadTalism:
  000bd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c3	83 c0 04	 add	 eax, 4
  000c6	49		 dec	 ecx
  000c7	75 f4		 jne	 SHORT $LL422@LoadTalism
  000c9	6a 08		 push	 8
  000cb	5e		 pop	 esi
$LL419@LoadTalism:
  000cc	8b c6		 mov	 eax, esi
  000ce	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000d3	79 05		 jns	 SHORT $LN468@LoadTalism
  000d5	48		 dec	 eax
  000d6	83 c8 fc	 or	 eax, -4			; fffffffcH
  000d9	40		 inc	 eax
$LN468@LoadTalism:
  000da	b1 ed		 mov	 cl, -19			; ffffffedH
  000dc	2a c8		 sub	 cl, al
  000de	30 4c 35 e0	 xor	 BYTE PTR __t$534154[ebp+esi], cl
  000e2	46		 inc	 esi
  000e3	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  000e6	7c e4		 jl	 SHORT $LL419@LoadTalism
  000e8	6a 03		 push	 3
  000ea	c7 45 cc 99 8d
	87 83		 mov	 DWORD PTR __k$534251[ebp], -2088268391 ; 83878d99H
  000f1	c7 45 d0 9e 81
	8a 84		 mov	 DWORD PTR __k$534251[ebp+4], -2071297634 ; 848a819eH
  000f8	c7 45 d4 b2 8f
	85 9e		 mov	 DWORD PTR __k$534251[ebp+8], -1635414094 ; 9e858fb2H
  000ff	8d 45 cc	 lea	 eax, DWORD PTR __k$534251[ebp]
  00102	88 5d d8	 mov	 BYTE PTR __k$534251[ebp+12], bl
  00105	59		 pop	 ecx
$LL430@LoadTalism:
  00106	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0010c	83 c0 04	 add	 eax, 4
  0010f	49		 dec	 ecx
  00110	75 f4		 jne	 SHORT $LL430@LoadTalism
  00112	53		 push	 ebx
  00113	8d 45 cc	 lea	 eax, DWORD PTR __k$534251[ebp]
  00116	50		 push	 eax
  00117	8d 45 e0	 lea	 eax, DWORD PTR __t$534154[ebp]
  0011a	50		 push	 eax
  0011b	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z

; 35   : 
; 36   : 	for( int i=0 ; i<iNum ; i++ )

  00127	33 ff		 xor	 edi, edi
  00129	89 85 2c fb ff
	ff		 mov	 DWORD PTR _iNum$[ebp], eax
  0012f	3b c3		 cmp	 eax, ebx
  00131	0f 8e 0f 01 00
	00		 jle	 $LN103@LoadTalism
$LL105@LoadTalism:

; 37   : 	{
; 38   : 		wsprintf_e( szTitle, "talisman%d", i+1 );

  00137	6a 02		 push	 2
  00139	c7 45 e0 99 8d
	87 83		 mov	 DWORD PTR ___encStr$530531[ebp], -2088268391 ; 83878d99H
  00140	c7 45 e4 9e 81
	8a 84		 mov	 DWORD PTR ___encStr$530531[ebp+4], -2071297634 ; 848a819eH
  00147	66 c7 45 e8 c8
	88		 mov	 WORD PTR ___encStr$530531[ebp+8], 35016 ; 000088c8H
  0014d	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$530531[ebp]
  00150	88 5d ea	 mov	 BYTE PTR ___encStr$530531[ebp+10], bl
  00153	59		 pop	 ecx
$LL438@LoadTalism:
  00154	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0015a	83 c0 04	 add	 eax, 4
  0015d	49		 dec	 ecx
  0015e	75 f4		 jne	 SHORT $LL438@LoadTalism
  00160	6a 08		 push	 8
  00162	5e		 pop	 esi
$LL435@LoadTalism:
  00163	8b c6		 mov	 eax, esi
  00165	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0016a	79 05		 jns	 SHORT $LN469@LoadTalism
  0016c	48		 dec	 eax
  0016d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00170	40		 inc	 eax
$LN469@LoadTalism:
  00171	b1 ed		 mov	 cl, -19			; ffffffedH
  00173	2a c8		 sub	 cl, al
  00175	30 4c 35 e0	 xor	 BYTE PTR ___encStr$530531[ebp+esi], cl
  00179	46		 inc	 esi
  0017a	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0017d	7c e4		 jl	 SHORT $LL435@LoadTalism
  0017f	47		 inc	 edi
  00180	57		 push	 edi
  00181	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$530531[ebp]
  00184	50		 push	 eax
  00185	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _szTitle$[ebp]
  0018b	50		 push	 eax
  0018c	89 bd 28 fb ff
	ff		 mov	 DWORD PTR tv3254[ebp], edi
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   : 		kLoader.SetTitle( szTitle );

  0019b	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _szTitle$[ebp]
  001a1	50		 push	 eax
  001a2	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 40   : 
; 41   : 		ioTalisman *pTalisman = new ioTalisman;

  001ae	6a 44		 push	 68			; 00000044H
  001b0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001b5	59		 pop	 ecx
  001b6	89 85 30 fb ff
	ff		 mov	 DWORD PTR $T533844[ebp], eax
  001bc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001c0	3b c3		 cmp	 eax, ebx
  001c2	74 0b		 je	 SHORT $LN108@LoadTalism
  001c4	8b c8		 mov	 ecx, eax
  001c6	e8 00 00 00 00	 call	 ??0ioTalisman@@QAE@XZ	; ioTalisman::ioTalisman
  001cb	8b f0		 mov	 esi, eax
  001cd	eb 02		 jmp	 SHORT $LN109@LoadTalism
$LN108@LoadTalism:
  001cf	33 f6		 xor	 esi, esi
$LN109@LoadTalism:
  001d1	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  001d4	89 b5 30 fb ff
	ff		 mov	 DWORD PTR _pTalisman$530681[ebp], esi

; 42   : 
; 43   : 		if( pTalisman )

  001da	3b f3		 cmp	 esi, ebx
  001dc	74 56		 je	 SHORT $LN104@LoadTalism

; 44   : 		{
; 45   : 			pTalisman->LoadProperty( kLoader );

  001de	8d 85 38 fb ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp]
  001e4	50		 push	 eax
  001e5	8b ce		 mov	 ecx, esi
  001e7	e8 00 00 00 00	 call	 ?LoadProperty@ioTalisman@@QAEXAAVioINILoader@@@Z ; ioTalisman::LoadProperty

; 46   : 
; 47   : 			if( FindTalisman( pTalisman->GetTalismanNum() ) )

  001ec	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  001ef	8b 8d 34 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f5	57		 push	 edi
  001f6	e8 00 00 00 00	 call	 ?FindTalisman@ioTalismanMaker@@IAEPAVioTalisman@@H@Z ; ioTalismanMaker::FindTalisman
  001fb	85 c0		 test	 eax, eax
  001fd	74 20		 je	 SHORT $LN2@LoadTalism

; 48   : 			{
; 49   : 				LOG.PrintTimeAndLog( 0, "ioTalismanMaker::LoadTalismanList - %d Already Exist",
; 50   : 										 pTalisman->GetTalismanNum() );

  001ff	57		 push	 edi
  00200	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LNAIAKN@ioTalismanMaker?3?3LoadTalismanLis@
  00205	53		 push	 ebx
  00206	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0020c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ

; 51   : 
; 52   : 				delete pTalisman;

  00212	8b 06		 mov	 eax, DWORD PTR [esi]
  00214	83 c4 10	 add	 esp, 16			; 00000010H
  00217	6a 01		 push	 1
  00219	8b ce		 mov	 ecx, esi
  0021b	ff 10		 call	 DWORD PTR [eax]

; 53   : 			}
; 54   : 			else

  0021d	eb 15		 jmp	 SHORT $LN104@LoadTalism
$LN2@LoadTalism:

; 55   : 			{
; 56   : 				m_vTalismanList.push_back( pTalisman );

  0021f	8b 8d 34 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00225	8d 85 30 fb ff
	ff		 lea	 eax, DWORD PTR _pTalisman$530681[ebp]
  0022b	50		 push	 eax
  0022c	83 c1 04	 add	 ecx, 4
  0022f	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioTalisman@@V?$allocator@PAVioTalisman@@@std@@@std@@QAEXABQAVioTalisman@@@Z ; std::vector<ioTalisman *,std::allocator<ioTalisman *> >::push_back
$LN104@LoadTalism:

; 35   : 
; 36   : 	for( int i=0 ; i<iNum ; i++ )

  00234	8b bd 28 fb ff
	ff		 mov	 edi, DWORD PTR tv3254[ebp]
  0023a	3b bd 2c fb ff
	ff		 cmp	 edi, DWORD PTR _iNum$[ebp]
  00240	0f 8c f1 fe ff
	ff		 jl	 $LL105@LoadTalism
$LN103@LoadTalism:

; 57   : 			}
; 58   : 		}
; 59   : 	}
; 60   : }

  00246	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0024a	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
  00256	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0025b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadTalismanList@ioTalismanMaker@@QAEXXZ$0:
  00000	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ioINILoader_e@@QAE@XZ
__unwindfunclet$?LoadTalismanList@ioTalismanMaker@@QAEXXZ$1:
  0000b	ff b5 30 fb ff
	ff		 push	 DWORD PTR $T533844[ebp]
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
__ehhandler$?LoadTalismanList@ioTalismanMaker@@QAEXXZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 24 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1244]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadTalismanList@ioTalismanMaker@@QAEXXZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadTalismanList@ioTalismanMaker@@QAEXXZ ENDP		; ioTalismanMaker::LoadTalismanList
; Function compile flags: /Ogsp
;	COMDAT ??_GioTalismanMaker@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioTalismanMaker@@UAEPAXI@Z PROC			; ioTalismanMaker::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioTalismanMaker@@UAE@XZ ; ioTalismanMaker::~ioTalismanMaker
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioTalismanMaker@@UAEPAXI@Z ENDP			; ioTalismanMaker::`scalar deleting destructor'
_TEXT	ENDS
END
