; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioDummyCheckBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7ioDummyCheckBuff@@6B@			; ioDummyCheckBuff::`vftable'
PUBLIC	??0ioDummyCheckBuff@@QAE@XZ			; ioDummyCheckBuff::ioDummyCheckBuff
PUBLIC	??_R4ioDummyCheckBuff@@6B@			; ioDummyCheckBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioDummyCheckBuff@@@8			; ioDummyCheckBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyCheckBuff@@8			; ioDummyCheckBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyCheckBuff@@8			; ioDummyCheckBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioDummyCheckBuff@@8		; ioDummyCheckBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioDummyCheckBuff@@UAEXAAVioINILoader@@@Z ; ioDummyCheckBuff::LoadProperty
PUBLIC	?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ	; ioDummyCheckBuff::Clone
PUBLIC	?StartBuff@ioDummyCheckBuff@@UAEXPAVioBaseChar@@@Z ; ioDummyCheckBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioDummyCheckBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioDummyCheckBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioDummyCheckBuff@@UAEXM@Z		; ioDummyCheckBuff::ProcessBuff
PUBLIC	?EndBuff@ioDummyCheckBuff@@UAEXXZ		; ioDummyCheckBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioDummyCheckBuff@@UAEPAXI@Z:PROC		; ioDummyCheckBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummycheckbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyCheckBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyCheckBuff@@8 DD FLAT:??_R0?AVioDummyCheckBuff@@@8 ; ioDummyCheckBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyCheckBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyCheckBuff@@8
rdata$r	SEGMENT
??_R2ioDummyCheckBuff@@8 DD FLAT:??_R1A@?0A@EA@ioDummyCheckBuff@@8 ; ioDummyCheckBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyCheckBuff@@8
rdata$r	SEGMENT
??_R3ioDummyCheckBuff@@8 DD 00H				; ioDummyCheckBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioDummyCheckBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyCheckBuff@@@8
_DATA	SEGMENT
??_R0?AVioDummyCheckBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyCheckBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyCheckBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioDummyCheckBuff@@6B@
rdata$r	SEGMENT
??_R4ioDummyCheckBuff@@6B@ DD 00H			; ioDummyCheckBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioDummyCheckBuff@@@8
	DD	FLAT:??_R3ioDummyCheckBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioDummyCheckBuff@@6B@
CONST	SEGMENT
??_7ioDummyCheckBuff@@6B@ DD FLAT:??_R4ioDummyCheckBuff@@6B@ ; ioDummyCheckBuff::`vftable'
	DD	FLAT:?LoadProperty@ioDummyCheckBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioDummyCheckBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioDummyCheckBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioDummyCheckBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioDummyCheckBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioDummyCheckBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioDummyCheckBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioDummyCheckBuff@@QAE@XZ$0
__ehfuncinfo$??0ioDummyCheckBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioDummyCheckBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioDummyCheckBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioDummyCheckBuff@@QAE@XZ PROC			; ioDummyCheckBuff::ioDummyCheckBuff, COMDAT
; _this$ = ecx

; 9    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioDummyCheckBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDummyCheckBuff@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 10   : }

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioDummyCheckBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioDummyCheckBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioDummyCheckBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioDummyCheckBuff@@QAE@XZ ENDP			; ioDummyCheckBuff::ioDummyCheckBuff
PUBLIC	??0ioDummyCheckBuff@@QAE@ABV0@@Z		; ioDummyCheckBuff::ioDummyCheckBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioDummyCheckBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioDummyCheckBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioDummyCheckBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioDummyCheckBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioDummyCheckBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioDummyCheckBuff@@QAE@ABV0@@Z PROC			; ioDummyCheckBuff::ioDummyCheckBuff, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioDummyCheckBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDummyCheckBuff@@6B@
  00024	8a 87 6c 09 00
	00		 mov	 al, BYTE PTR [edi+2412]
  0002a	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al
  00030	d9 87 70 09 00
	00		 fld	 DWORD PTR [edi+2416]
  00036	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]
  0003c	81 c7 84 09 00
	00		 add	 edi, 2436		; 00000984H
  00042	d9 47 f0	 fld	 DWORD PTR [edi-16]
  00045	57		 push	 edi
  00046	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]
  0004c	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  00052	d9 47 f4	 fld	 DWORD PTR [edi-12]
  00055	d9 9e 78 09 00
	00		 fstp	 DWORD PTR [esi+2424]
  0005b	d9 47 f8	 fld	 DWORD PTR [edi-8]
  0005e	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]
  00064	d9 47 fc	 fld	 DWORD PTR [edi-4]
  00067	d9 9e 80 09 00
	00		 fstp	 DWORD PTR [esi+2432]
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 22   : }

  00073	8b c6		 mov	 eax, esi
  00075	e8 00 00 00 00	 call	 __EH_epilog3
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioDummyCheckBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioDummyCheckBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioDummyCheckBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioDummyCheckBuff@@QAE@ABV0@@Z ENDP			; ioDummyCheckBuff::ioDummyCheckBuff
PUBLIC	??1ioDummyCheckBuff@@UAE@XZ			; ioDummyCheckBuff::~ioDummyCheckBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioDummyCheckBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioDummyCheckBuff@@UAE@XZ$0
__ehfuncinfo$??1ioDummyCheckBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioDummyCheckBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioDummyCheckBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioDummyCheckBuff@@UAE@XZ PROC			; ioDummyCheckBuff::~ioDummyCheckBuff, COMDAT
; _this$ = ecx

; 25   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioDummyCheckBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDummyCheckBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 26   : }

  0001b	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioDummyCheckBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioDummyCheckBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioDummyCheckBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioDummyCheckBuff@@UAE@XZ ENDP			; ioDummyCheckBuff::~ioDummyCheckBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524934 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ PROC		; ioDummyCheckBuff::Clone, COMDAT
; _this$ = ecx

; 45   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 46   : 	return new ioDummyCheckBuff( *this );

  0000e	68 94 09 00 00	 push	 2452			; 00000994H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524934[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioDummyCheckBuff@@QAE@ABV0@@Z ; ioDummyCheckBuff::ioDummyCheckBuff
$LN3@Clone:

; 47   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524934[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioDummyCheckBuff@@UAEPAVioBuff@@XZ ENDP		; ioDummyCheckBuff::Clone
PUBLIC	__$ArrayPad$
EXTRN	?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z:PROC ; ioBaseChar::ApplyOutLineChange
EXTRN	?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z:PROC ; Help::InitColorValue
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioDummyCheckBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_kColor$523810 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?StartBuff@ioDummyCheckBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioDummyCheckBuff::StartBuff, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00013	56		 push	 esi

; 51   : 	ioBuff::StartBuff( pOwner );

  00014	50		 push	 eax
  00015	8b f1		 mov	 esi, ecx
  00017	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 52   : 	
; 53   : 	if( m_bEnableOutLine )

  0001c	80 be 6c 09 00
	00 00		 cmp	 BYTE PTR [esi+2412], 0
  00023	74 64		 je	 SHORT $LN1@StartBuff

; 54   : 	{
; 55   : 		D3DCOLORVALUE kColor;
; 56   : 		Help::InitColorValue( kColor, m_fOutLineR, m_fOutLineG, m_fOutLineB, m_fOutLineAlpha );

  00025	f3 0f 10 86 7c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2428]
  0002d	83 ec 10	 sub	 esp, 16			; 00000010H
  00030	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00036	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  0003e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00044	f3 0f 10 86 74
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2420]
  0004c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00052	f3 0f 10 86 70
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2416]
  0005a	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523810[ebp]
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z ; Help::InitColorValue

; 57   : 		m_pOwner->ApplyOutLineChange( COT_BUFF_PROTECTION, kColor, m_fOutLineThickness );

  00068	f3 0f 10 86 80
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2432]
  00070	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00076	83 c4 10	 add	 esp, 16			; 00000010H
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523810[ebp]
  00081	50		 push	 eax
  00082	6a 01		 push	 1
  00084	e8 00 00 00 00	 call	 ?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z ; ioBaseChar::ApplyOutLineChange
$LN1@StartBuff:

; 58   : 	}
; 59   : }

  00089	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008c	33 cd		 xor	 ecx, ebp
  0008e	5e		 pop	 esi
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	c9		 leave
  00095	c2 04 00	 ret	 4
?StartBuff@ioDummyCheckBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioDummyCheckBuff::StartBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioDummyCheckBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_kColor$523819 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioDummyCheckBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioDummyCheckBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00013	56		 push	 esi

; 63   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00014	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00017	8b f1		 mov	 esi, ecx
  00019	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00022	84 c0		 test	 al, al
  00024	74 6f		 je	 SHORT $LN3@ApplyStart
$LN2@ApplyStart:

; 64   : 		return false;
; 65   : 	
; 66   : 	if( m_bEnableOutLine )

  00026	80 be 6c 09 00
	00 00		 cmp	 BYTE PTR [esi+2412], 0
  0002d	74 64		 je	 SHORT $LN1@ApplyStart

; 67   : 	{
; 68   : 		D3DCOLORVALUE kColor;
; 69   : 		Help::InitColorValue( kColor, m_fOutLineR, m_fOutLineG, m_fOutLineB, m_fOutLineAlpha );

  0002f	f3 0f 10 86 7c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2428]
  00037	83 ec 10	 sub	 esp, 16			; 00000010H
  0003a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00040	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  00048	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0004e	f3 0f 10 86 74
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2420]
  00056	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0005c	f3 0f 10 86 70
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2416]
  00064	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523819[ebp]
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z ; Help::InitColorValue

; 70   : 		m_pOwner->ApplyOutLineChange( COT_BUFF_PROTECTION, kColor, m_fOutLineThickness );

  00072	f3 0f 10 86 80
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2432]
  0007a	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523819[ebp]
  0008b	50		 push	 eax
  0008c	6a 01		 push	 1
  0008e	e8 00 00 00 00	 call	 ?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z ; ioBaseChar::ApplyOutLineChange
$LN1@ApplyStart:

; 71   : 	}
; 72   : 
; 73   : 	return true;

  00093	b0 01		 mov	 al, 1
$LN3@ApplyStart:

; 74   : }

  00095	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	c9		 leave
  000a1	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioDummyCheckBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioDummyCheckBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioDummyCheckBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioDummyCheckBuff@@UAEXXZ PROC			; ioDummyCheckBuff::EndBuff, COMDAT
; _this$ = ecx

; 106  : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioDummyCheckBuff@@UAEXXZ ENDP			; ioDummyCheckBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckLiveState@ioDummyCheckBuff@@IAE_NPAVioBaseChar@@@Z ; ioDummyCheckBuff::CheckLiveState
EXTRN	?FindDummyCharToName@ioDummyCharManager@@QAEPAVioDummyChar@@PAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioDummyCharManager::FindDummyCharToName
EXTRN	?GetSingleton@ioDummyCharManager@@SAAAV1@XZ:PROC ; ioDummyCharManager::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?CheckLiveState@ioDummyCheckBuff@@IAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckLiveState@ioDummyCheckBuff@@IAE_NPAVioBaseChar@@@Z PROC ; ioDummyCheckBuff::CheckLiveState, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	if ( !pOwner )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00007	75 04		 jne	 SHORT $LN2@CheckLiveS

; 112  : 		return false;

  00009	32 c0		 xor	 al, al
  0000b	eb 1b		 jmp	 SHORT $LN1@CheckLiveS
$LN2@CheckLiveS:

; 113  : 
; 114  : 	ioDummyChar *pDummy = g_DummyCharMgr.FindDummyCharToName( pOwner, m_szDummyName );

  0000d	81 c1 84 09 00
	00		 add	 ecx, 2436		; 00000984H
  00013	51		 push	 ecx
  00014	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00017	e8 00 00 00 00	 call	 ?GetSingleton@ioDummyCharManager@@SAAAV1@XZ ; ioDummyCharManager::GetSingleton
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?FindDummyCharToName@ioDummyCharManager@@QAEPAVioDummyChar@@PAVioBaseChar@@ABVioHashString@@@Z ; ioDummyCharManager::FindDummyCharToName

; 115  : 	if ( !pDummy )

  00023	85 c0		 test	 eax, eax
  00025	0f 95 c0	 setne	 al
$LN1@CheckLiveS:

; 116  : 		return false;
; 117  : 
; 118  : 	return true;
; 119  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?CheckLiveState@ioDummyCheckBuff@@IAE_NPAVioBaseChar@@@Z ENDP ; ioDummyCheckBuff::CheckLiveState
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioDummyCheckBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioDummyCheckBuff@@UAEPAXI@Z PROC			; ioDummyCheckBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioDummyCheckBuff@@UAE@XZ ; ioDummyCheckBuff::~ioDummyCheckBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioDummyCheckBuff@@UAEPAXI@Z ENDP			; ioDummyCheckBuff::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummycheckbuff.cpp
;	COMDAT ?ProcessBuff@ioDummyCheckBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioDummyCheckBuff@@UAEXM@Z PROC		; ioDummyCheckBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 77   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 78   : 	if ( !CheckLiveState( GetOwner() ) )

  00006	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  0000b	50		 push	 eax
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?CheckLiveState@ioDummyCheckBuff@@IAE_NPAVioBaseChar@@@Z ; ioDummyCheckBuff::CheckLiveState
  00013	84 c0		 test	 al, al
  00015	75 09		 jne	 SHORT $LN7@ProcessBuf

; 79   : 	{
; 80   : 		SetReserveEndBuff();

  00017	8b ce		 mov	 ecx, esi
$LN10@ProcessBuf:
  00019	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 81   : 		return;

  0001e	eb 4e		 jmp	 SHORT $LN5@ProcessBuf
$LN7@ProcessBuf:

; 82   : 	}
; 83   : 
; 84   : 	switch( m_iOperationType )

  00020	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00026	83 e8 00	 sub	 eax, 0
  00029	74 3c		 je	 SHORT $LN1@ProcessBuf
  0002b	48		 dec	 eax
  0002c	74 06		 je	 SHORT $LN2@ProcessBuf
  0002e	48		 dec	 eax
  0002f	74 17		 je	 SHORT $LN4@ProcessBuf
  00031	48		 dec	 eax
  00032	75 3a		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 94   : 	case OT_DELAY:
; 95   : 	case OT_ACTIVE:
; 96   : 		ioBuff::ProcessBuff( fTimePerSec );

  00034	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00039	51		 push	 ecx
  0003a	8b ce		 mov	 ecx, esi
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 97   : 		break;

  00046	eb 26		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 85   : 	{
; 86   : 	case OT_SWITCH:
; 87   : 		if( !CheckSwitchType( fTimePerSec ) )

  00048	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 88   : 		{
; 89   : 			SetReserveEndBuff();

  0005a	8b ce		 mov	 ecx, esi
  0005c	84 c0		 test	 al, al

; 90   : 			return;

  0005e	74 b9		 je	 SHORT $LN10@ProcessBuf

; 91   : 		}
; 92   : 		CheckCallingProcess();

  00060	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 93   : 		break;

  00065	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 98   : 	case OT_PASSIVE:
; 99   : 		CheckCallingAreaWeapon();

  00067	8b ce		 mov	 ecx, esi
  00069	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  0006e	5e		 pop	 esi

; 100  : 		break;
; 101  : 	}
; 102  : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?ProcessBuff@ioDummyCheckBuff@@UAEXM@Z ENDP		; ioDummyCheckBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ; ioINILoader::LoadBool_e<15>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<15>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadBool_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadBool_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadBool_e
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadBool_e
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadBool_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadBool_e
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadBool_e
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadBool_e
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadBool_e:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadBool_e
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadBool_e:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadBool_e
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadBool_e:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001cf	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ; ioINILoader::LoadFloat_e<18>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<18>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadFloat_
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadFloat_
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadFloat_
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadFloat_
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadFloat_
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadFloat_
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadFloat_
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadFloat_
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadFloat_:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001f8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001fd	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00201	51		 push	 ecx
  00202	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	50		 push	 eax
  0020b	8b ce		 mov	 ecx, esi
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00213	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00216	33 cd		 xor	 ecx, ebp
  00218	5e		 pop	 esi
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	c9		 leave
  0021f	c2 08 00	 ret	 8
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ; ioINILoader::LoadFloat_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<20>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadFloat_@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadFloat_@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadFloat_@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadFloat_@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadFloat_@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadFloat_@2
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadFloat_@2
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadFloat_@2
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@2
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadFloat_@2
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadFloat_@2
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadFloat_@2
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadFloat_@2
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadFloat_@2:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadFloat_@2:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadFloat_@2:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00238	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0023d	51		 push	 ecx
  0023e	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	50		 push	 eax
  00247	8b ce		 mov	 ecx, esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0024f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	5e		 pop	 esi
  00253	33 cd		 xor	 ecx, ebp
  00255	5b		 pop	 ebx
  00256	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025b	c9		 leave
  0025c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ; ioINILoader::LoadFloat_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<19>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadFloat_@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadFloat_@3
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadFloat_@3
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadFloat_@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadFloat_@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadFloat_@3
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadFloat_@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadFloat_@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadFloat_@3
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadFloat_@3
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadFloat_@3
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadFloat_@3
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadFloat_@3
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@3
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadFloat_@3
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadFloat_@3
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadFloat_@3
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadFloat_@3
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadFloat_@3:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadFloat_@3:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadFloat_@3:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  00229	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0022e	51		 push	 ecx
  0022f	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	50		 push	 eax
  00238	8b ce		 mov	 ecx, esi
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00240	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	5e		 pop	 esi
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	c9		 leave
  0024c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<11>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<11>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	84 d2		 test	 dl, dl
  00020	0f 84 1b 01 00
	00		 je	 $LN96@LoadString
  00026	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00029	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002f	84 d2		 test	 dl, dl
  00031	0f 84 04 01 00
	00		 je	 $LN95@LoadString
  00037	b3 ec		 mov	 bl, -20			; ffffffecH
  00039	32 d3		 xor	 dl, bl
  0003b	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003e	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00041	84 d2		 test	 dl, dl
  00043	0f 84 ec 00 00
	00		 je	 $LN94@LoadString
  00049	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004c	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004f	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00052	84 d2		 test	 dl, dl
  00054	0f 84 d5 00 00
	00		 je	 $LN93@LoadString
  0005a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005d	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00060	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00063	84 d2		 test	 dl, dl
  00065	0f 84 be 00 00
	00		 je	 $LN92@LoadString
  0006b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006e	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00071	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00074	84 d2		 test	 dl, dl
  00076	0f 84 a8 00 00
	00		 je	 $LN91@LoadString
  0007c	32 d3		 xor	 dl, bl
  0007e	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00081	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00084	84 d2		 test	 dl, dl
  00086	0f 84 92 00 00
	00		 je	 $LN90@LoadString
  0008c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008f	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00092	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00095	84 d2		 test	 dl, dl
  00097	74 7f		 je	 SHORT $LN89@LoadString
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 6c		 je	 SHORT $LN88@LoadString
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5a		 je	 SHORT $LN87@LoadString
  000b3	32 d3		 xor	 dl, bl
  000b5	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bc	0f 84 83 00 00
	00		 je	 $LN1@LoadString
  000c2	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c5	84 d2		 test	 dl, dl
  000c7	74 3e		 je	 SHORT $LN85@LoadString
  000c9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cc	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 2b		 je	 SHORT $LN84@LoadString
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 19		 je	 SHORT $LN83@LoadString
  000e3	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e6	32 d3		 xor	 dl, bl
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadString
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 4f		 jmp	 SHORT $LN1@LoadString
$LN82@LoadString:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 49		 jmp	 SHORT $LN1@LoadString
$LN83@LoadString:
  000fc	88 5d f9	 mov	 BYTE PTR __k$[ebp+13], bl
  000ff	eb 44		 jmp	 SHORT $LN1@LoadString
$LN84@LoadString:
  00101	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00105	eb 3e		 jmp	 SHORT $LN1@LoadString
$LN85@LoadString:
  00107	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010b	eb 38		 jmp	 SHORT $LN1@LoadString
$LN87@LoadString:
  0010d	88 5d f5	 mov	 BYTE PTR __k$[ebp+9], bl
  00110	eb 33		 jmp	 SHORT $LN1@LoadString
$LN88@LoadString:
  00112	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00116	eb 2d		 jmp	 SHORT $LN1@LoadString
$LN89@LoadString:
  00118	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011c	eb 27		 jmp	 SHORT $LN1@LoadString
$LN90@LoadString:
  0011e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00122	eb 21		 jmp	 SHORT $LN1@LoadString
$LN91@LoadString:
  00124	88 5d f1	 mov	 BYTE PTR __k$[ebp+5], bl
  00127	eb 1c		 jmp	 SHORT $LN1@LoadString
$LN92@LoadString:
  00129	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0012d	eb 16		 jmp	 SHORT $LN1@LoadString
$LN93@LoadString:
  0012f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00133	eb 10		 jmp	 SHORT $LN1@LoadString
$LN94@LoadString:
  00135	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00139	eb 0a		 jmp	 SHORT $LN1@LoadString
$LN95@LoadString:
  0013b	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0013f	eb 04		 jmp	 SHORT $LN1@LoadString
$LN96@LoadString:
  00141	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString:
  00145	6a 02		 push	 2
  00147	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014a	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  0014e	5a		 pop	 edx
$LL104@LoadString:
  0014f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00155	83 c0 04	 add	 eax, 4
  00158	4a		 dec	 edx
  00159	75 f4		 jne	 SHORT $LL104@LoadString
  0015b	6a 08		 push	 8
  0015d	58		 pop	 eax
$LL101@LoadString:
  0015e	8b d0		 mov	 edx, eax
  00160	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  00166	79 05		 jns	 SHORT $LN111@LoadString
  00168	4a		 dec	 edx
  00169	83 ca fc	 or	 edx, -4			; fffffffcH
  0016c	42		 inc	 edx
$LN111@LoadString:
  0016d	b3 ed		 mov	 bl, -19			; ffffffedH
  0016f	2a da		 sub	 bl, dl
  00171	30 5c 05 ec	 xor	 BYTE PTR __k$[ebp+eax], bl
  00175	40		 inc	 eax
  00176	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00179	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  0017b	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0017e	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00181	57		 push	 edi
  00182	56		 push	 esi
  00183	50		 push	 eax
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	33 cd		 xor	 ecx, ebp
  00191	5b		 pop	 ebx
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	c9		 leave
  00198	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<11>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__real@40000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummycheckbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioDummyCheckBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -288						; size = 260
__k$525744 = -28					; size = 18
__k$525674 = -28					; size = 20
__k$525481 = -28					; size = 19
__k$525424 = -28					; size = 20
__k$525231 = -28					; size = 18
__k$525106 = -24					; size = 15
__k$525856 = -20					; size = 11
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioDummyCheckBuff@@UAEXAAVioINILoader@@@Z PROC ; ioDummyCheckBuff::LoadProperty, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 30   : 	char szBuf[MAX_PATH];
; 31   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 32   : 	
; 33   : 	m_bEnableOutLine = rkLoader.LoadBool_e( "outline_enable", false );

  00021	33 db		 xor	 ebx, ebx
  00023	6a 03		 push	 3
  00025	c7 45 e8 82 99
	9f 86		 mov	 DWORD PTR __k$525106[ebp], -2036360830 ; 869f9982H
  0002c	c7 45 ec 84 82
	8e b5		 mov	 DWORD PTR __k$525106[ebp+4], -1248951676 ; b58e8284H
  00033	c7 45 f0 88 82
	8a 88		 mov	 DWORD PTR __k$525106[ebp+8], -2004188536 ; 888a8288H
  0003a	66 c7 45 f4 81
	89		 mov	 WORD PTR __k$525106[ebp+12], 35201 ; 00008981H
  00040	8d 45 e8	 lea	 eax, DWORD PTR __k$525106[ebp]
  00043	88 5d f6	 mov	 BYTE PTR __k$525106[ebp+14], bl
  00046	59		 pop	 ecx
$LL106@LoadProper:
  00047	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004d	83 c0 04	 add	 eax, 4
  00050	49		 dec	 ecx
  00051	75 f4		 jne	 SHORT $LL106@LoadProper
  00053	6a 0c		 push	 12			; 0000000cH
  00055	58		 pop	 eax
$LL103@LoadProper:
  00056	8b c8		 mov	 ecx, eax
  00058	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0005e	79 05		 jns	 SHORT $LN773@LoadProper
  00060	49		 dec	 ecx
  00061	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00064	41		 inc	 ecx
$LN773@LoadProper:
  00065	b2 ed		 mov	 dl, -19			; ffffffedH
  00067	2a d1		 sub	 dl, cl
  00069	30 54 05 e8	 xor	 BYTE PTR __k$525106[ebp+eax], dl
  0006d	40		 inc	 eax
  0006e	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00071	7c e3		 jl	 SHORT $LL103@LoadProper
  00073	53		 push	 ebx
  00074	8d 45 e8	 lea	 eax, DWORD PTR __k$525106[ebp]
  00077	50		 push	 eax
  00078	8b cf		 mov	 ecx, edi
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00080	6a 04		 push	 4
  00082	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al

; 34   : 	m_fOutLineR = rkLoader.LoadFloat_e( "outline_color_red", 1.0f );

  00088	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525231[ebp], -2036360830 ; 869f9982H
  0008f	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525231[ebp+4], -1248951676 ; b58e8284H
  00096	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525231[ebp+8], -2054716530 ; 8587838eH
  0009d	c7 45 f0 9f b3
	99 8f		 mov	 DWORD PTR __k$525231[ebp+12], -1885752417 ; 8f99b39fH
  000a4	8d 45 e4	 lea	 eax, DWORD PTR __k$525231[ebp]
  000a7	66 c7 45 f4 89
	00		 mov	 WORD PTR __k$525231[ebp+16], 137 ; 00000089H
  000ad	59		 pop	 ecx
$LL212@LoadProper:
  000ae	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b4	83 c0 04	 add	 eax, 4
  000b7	49		 dec	 ecx
  000b8	75 f4		 jne	 SHORT $LL212@LoadProper
  000ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c2	80 75 f4 ed	 xor	 BYTE PTR __k$525231[ebp+16], -19 ; ffffffedH
  000c6	51		 push	 ecx
  000c7	8d 45 e4	 lea	 eax, DWORD PTR __k$525231[ebp]
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	50		 push	 eax
  000d0	8b cf		 mov	 ecx, edi
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000d8	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]
  000de	6a 04		 push	 4

; 35   : 	m_fOutLineG = rkLoader.LoadFloat_e( "outline_color_green", 1.0f );

  000e0	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525424[ebp], -2036360830 ; 869f9982H
  000e7	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525424[ebp+4], -1248951676 ; b58e8284H
  000ee	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525424[ebp+8], -2054716530 ; 8587838eH
  000f5	c7 45 f0 9f b3
	8c 98		 mov	 DWORD PTR __k$525424[ebp+12], -1735609441 ; 988cb39fH
  000fc	8d 45 e4	 lea	 eax, DWORD PTR __k$525424[ebp]
  000ff	c7 45 f4 88 89
	85 00		 mov	 DWORD PTR __k$525424[ebp+16], 8751496 ; 00858988H
  00106	59		 pop	 ecx
$LL318@LoadProper:
  00107	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0010d	83 c0 04	 add	 eax, 4
  00110	49		 dec	 ecx
  00111	75 f4		 jne	 SHORT $LL318@LoadProper
  00113	6a 10		 push	 16			; 00000010H
  00115	58		 pop	 eax
$LL315@LoadProper:
  00116	8b c8		 mov	 ecx, eax
  00118	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0011e	79 05		 jns	 SHORT $LN774@LoadProper
  00120	49		 dec	 ecx
  00121	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00124	41		 inc	 ecx
$LN774@LoadProper:
  00125	b2 ed		 mov	 dl, -19			; ffffffedH
  00127	2a d1		 sub	 dl, cl
  00129	30 54 05 e4	 xor	 BYTE PTR __k$525424[ebp+eax], dl
  0012d	40		 inc	 eax
  0012e	83 f8 13	 cmp	 eax, 19			; 00000013H
  00131	7c e3		 jl	 SHORT $LL315@LoadProper
  00133	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0013b	51		 push	 ecx
  0013c	8d 45 e4	 lea	 eax, DWORD PTR __k$525424[ebp]
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	50		 push	 eax
  00145	8b cf		 mov	 ecx, edi
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0014d	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]
  00153	6a 04		 push	 4

; 36   : 	m_fOutLineB = rkLoader.LoadFloat_e( "outline_color_blue", 0.0f );

  00155	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525481[ebp], -2036360830 ; 869f9982H
  0015c	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525481[ebp+4], -1248951676 ; b58e8284H
  00163	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525481[ebp+8], -2054716530 ; 8587838eH
  0016a	c7 45 f0 9f b3
	89 86		 mov	 DWORD PTR __k$525481[ebp+12], -2037795937 ; 8689b39fH
  00171	66 c7 45 f4 98
	89		 mov	 WORD PTR __k$525481[ebp+16], 35224 ; 00008998H
  00177	8d 45 e4	 lea	 eax, DWORD PTR __k$525481[ebp]
  0017a	88 5d f6	 mov	 BYTE PTR __k$525481[ebp+18], bl
  0017d	59		 pop	 ecx
$LL424@LoadProper:
  0017e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00184	83 c0 04	 add	 eax, 4
  00187	49		 dec	 ecx
  00188	75 f4		 jne	 SHORT $LL424@LoadProper
  0018a	6a 10		 push	 16			; 00000010H
  0018c	58		 pop	 eax
$LL421@LoadProper:
  0018d	8b c8		 mov	 ecx, eax
  0018f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00195	79 05		 jns	 SHORT $LN775@LoadProper
  00197	49		 dec	 ecx
  00198	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0019b	41		 inc	 ecx
$LN775@LoadProper:
  0019c	b2 ed		 mov	 dl, -19			; ffffffedH
  0019e	2a d1		 sub	 dl, cl
  001a0	30 54 05 e4	 xor	 BYTE PTR __k$525481[ebp+eax], dl
  001a4	40		 inc	 eax
  001a5	83 f8 12	 cmp	 eax, 18			; 00000012H
  001a8	7c e3		 jl	 SHORT $LL421@LoadProper
  001aa	0f 57 c0	 xorps	 xmm0, xmm0
  001ad	51		 push	 ecx
  001ae	8d 45 e4	 lea	 eax, DWORD PTR __k$525481[ebp]
  001b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b6	50		 push	 eax
  001b7	8b cf		 mov	 ecx, edi
  001b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001bf	d9 9e 78 09 00
	00		 fstp	 DWORD PTR [esi+2424]
  001c5	6a 04		 push	 4

; 37   : 	m_fOutLineAlpha = rkLoader.LoadFloat_e( "outline_color_alpha", 0.5f );

  001c7	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525674[ebp], -2036360830 ; 869f9982H
  001ce	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525674[ebp+4], -1248951676 ; b58e8284H
  001d5	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525674[ebp+8], -2054716530 ; 8587838eH
  001dc	c7 45 f0 9f b3
	8a 86		 mov	 DWORD PTR __k$525674[ebp+12], -2037730401 ; 868ab39fH
  001e3	8d 45 e4	 lea	 eax, DWORD PTR __k$525674[ebp]
  001e6	c7 45 f4 9d 84
	8a 00		 mov	 DWORD PTR __k$525674[ebp+16], 9077917 ; 008a849dH
  001ed	59		 pop	 ecx
$LL530@LoadProper:
  001ee	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f4	83 c0 04	 add	 eax, 4
  001f7	49		 dec	 ecx
  001f8	75 f4		 jne	 SHORT $LL530@LoadProper
  001fa	6a 10		 push	 16			; 00000010H
  001fc	58		 pop	 eax
$LL527@LoadProper:
  001fd	8b c8		 mov	 ecx, eax
  001ff	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00205	79 05		 jns	 SHORT $LN776@LoadProper
  00207	49		 dec	 ecx
  00208	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0020b	41		 inc	 ecx
$LN776@LoadProper:
  0020c	b2 ed		 mov	 dl, -19			; ffffffedH
  0020e	2a d1		 sub	 dl, cl
  00210	30 54 05 e4	 xor	 BYTE PTR __k$525674[ebp+eax], dl
  00214	40		 inc	 eax
  00215	83 f8 13	 cmp	 eax, 19			; 00000013H
  00218	7c e3		 jl	 SHORT $LL527@LoadProper
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00222	51		 push	 ecx
  00223	8d 45 e4	 lea	 eax, DWORD PTR __k$525674[ebp]
  00226	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022b	50		 push	 eax
  0022c	8b cf		 mov	 ecx, edi
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00234	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]
  0023a	6a 04		 push	 4

; 38   : 	m_fOutLineThickness = rkLoader.LoadFloat_e( "outline_thickness", 2.0f );

  0023c	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525744[ebp], -2036360830 ; 869f9982H
  00243	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525744[ebp+4], -1248951676 ; b58e8284H
  0024a	c7 45 ec 99 84
	82 89		 mov	 DWORD PTR __k$525744[ebp+8], -1987935079 ; 89828499H
  00251	c7 45 f0 86 82
	8e 99		 mov	 DWORD PTR __k$525744[ebp+12], -1718713722 ; 998e8286H
  00258	8d 45 e4	 lea	 eax, DWORD PTR __k$525744[ebp]
  0025b	66 c7 45 f4 9e
	00		 mov	 WORD PTR __k$525744[ebp+16], 158 ; 0000009eH
  00261	59		 pop	 ecx
$LL636@LoadProper:
  00262	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00268	83 c0 04	 add	 eax, 4
  0026b	49		 dec	 ecx
  0026c	75 f4		 jne	 SHORT $LL636@LoadProper
  0026e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00276	80 75 f4 ed	 xor	 BYTE PTR __k$525744[ebp+16], -19 ; ffffffedH
  0027a	51		 push	 ecx
  0027b	8d 45 e4	 lea	 eax, DWORD PTR __k$525744[ebp]
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	50		 push	 eax
  00284	8b cf		 mov	 ecx, edi
  00286	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0028c	d9 9e 80 09 00
	00		 fstp	 DWORD PTR [esi+2432]
  00292	6a 02		 push	 2

; 39   : 
; 40   : 	rkLoader.LoadString_e( "dummy_name", "", szBuf, MAX_PATH );

  00294	c7 45 ec 89 99
	86 87		 mov	 DWORD PTR __k$525856[ebp], -2021222007 ; 87869989H
  0029b	c7 45 f0 94 b3
	85 8b		 mov	 DWORD PTR __k$525856[ebp+4], -1954172012 ; 8b85b394H
  002a2	66 c7 45 f4 80
	89		 mov	 WORD PTR __k$525856[ebp+8], 35200 ; 00008980H
  002a8	8d 45 ec	 lea	 eax, DWORD PTR __k$525856[ebp]
  002ab	88 5d f6	 mov	 BYTE PTR __k$525856[ebp+10], bl
  002ae	59		 pop	 ecx
$LL742@LoadProper:
  002af	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002b5	83 c0 04	 add	 eax, 4
  002b8	49		 dec	 ecx
  002b9	75 f4		 jne	 SHORT $LL742@LoadProper
  002bb	6a 08		 push	 8
  002bd	58		 pop	 eax
$LL739@LoadProper:
  002be	8b c8		 mov	 ecx, eax
  002c0	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002c6	79 05		 jns	 SHORT $LN777@LoadProper
  002c8	49		 dec	 ecx
  002c9	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002cc	41		 inc	 ecx
$LN777@LoadProper:
  002cd	b2 ed		 mov	 dl, -19			; ffffffedH
  002cf	2a d1		 sub	 dl, cl
  002d1	30 54 05 ec	 xor	 BYTE PTR __k$525856[ebp+eax], dl
  002d5	40		 inc	 eax
  002d6	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002d9	7c e3		 jl	 SHORT $LL739@LoadProper
  002db	68 04 01 00 00	 push	 260			; 00000104H
  002e0	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002e6	50		 push	 eax
  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002ec	8d 45 ec	 lea	 eax, DWORD PTR __k$525856[ebp]
  002ef	50		 push	 eax
  002f0	8b cf		 mov	 ecx, edi
  002f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 41   : 	m_szDummyName = szBuf;

  002f8	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002fe	50		 push	 eax
  002ff	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 42   : }

  0030b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030e	5f		 pop	 edi
  0030f	5e		 pop	 esi
  00310	33 cd		 xor	 ecx, ebp
  00312	5b		 pop	 ebx
  00313	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00318	c9		 leave
  00319	c2 04 00	 ret	 4
?LoadProperty@ioDummyCheckBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioDummyCheckBuff::LoadProperty
_TEXT	ENDS
END
