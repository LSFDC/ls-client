; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioKingScaleBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_7ioKingScaleBuff@@6B@			; ioKingScaleBuff::`vftable'
PUBLIC	??0ioKingScaleBuff@@QAE@XZ			; ioKingScaleBuff::ioKingScaleBuff
PUBLIC	??_R4ioKingScaleBuff@@6B@			; ioKingScaleBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioKingScaleBuff@@@8			; ioKingScaleBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioKingScaleBuff@@8				; ioKingScaleBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioKingScaleBuff@@8				; ioKingScaleBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioKingScaleBuff@@8		; ioKingScaleBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioKingScaleBuff@@UAEXAAVioINILoader@@@Z ; ioKingScaleBuff::LoadProperty
PUBLIC	?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ	; ioKingScaleBuff::Clone
PUBLIC	?StartBuff@ioKingScaleBuff@@UAEXPAVioBaseChar@@@Z ; ioKingScaleBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioKingScaleBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioKingScaleBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioKingScaleBuff@@UAEXM@Z		; ioKingScaleBuff::ProcessBuff
PUBLIC	?EndBuff@ioKingScaleBuff@@UAEXXZ		; ioKingScaleBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioKingScaleBuff@@UAEPAXI@Z:PROC		; ioKingScaleBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioKingScaleBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioKingScaleBuff@@8 DD FLAT:??_R0?AVioKingScaleBuff@@@8 ; ioKingScaleBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioKingScaleBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioKingScaleBuff@@8
rdata$r	SEGMENT
??_R2ioKingScaleBuff@@8 DD FLAT:??_R1A@?0A@EA@ioKingScaleBuff@@8 ; ioKingScaleBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioKingScaleBuff@@8
rdata$r	SEGMENT
??_R3ioKingScaleBuff@@8 DD 00H				; ioKingScaleBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioKingScaleBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioKingScaleBuff@@@8
_DATA	SEGMENT
??_R0?AVioKingScaleBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioKingScaleBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioKingScaleBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioKingScaleBuff@@6B@
rdata$r	SEGMENT
??_R4ioKingScaleBuff@@6B@ DD 00H			; ioKingScaleBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioKingScaleBuff@@@8
	DD	FLAT:??_R3ioKingScaleBuff@@8
rdata$r	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_7ioKingScaleBuff@@6B@
CONST	SEGMENT
??_7ioKingScaleBuff@@6B@ DD FLAT:??_R4ioKingScaleBuff@@6B@ ; ioKingScaleBuff::`vftable'
	DD	FLAT:?LoadProperty@ioKingScaleBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioKingScaleBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioKingScaleBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioKingScaleBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioKingScaleBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioKingScaleBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioKingScaleBuff@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioKingScaleBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioKingScaleBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iokingscalebuff.cpp
xdata$x	ENDS
;	COMDAT ??0ioKingScaleBuff@@QAE@XZ
_TEXT	SEGMENT
tv206 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioKingScaleBuff@@QAE@XZ PROC				; ioKingScaleBuff::ioKingScaleBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioKingScaleBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioKingScaleBuff@@6B@
  0002c	ff d7		 call	 edi
  0002e	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00034	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00038	ff d7		 call	 edi
  0003a	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  00040	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00044	ff d7		 call	 edi
  00046	8d 8e 9c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2460]
  0004c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00050	ff d7		 call	 edi
  00052	8d 8e ac 09 00
	00		 lea	 ecx, DWORD PTR [esi+2476]
  00058	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0005c	ff d7		 call	 edi
  0005e	8d 8e bc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2492]
  00064	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00068	ff d7		 call	 edi
  0006a	8d 8e d4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2516]
  00070	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00074	ff d7		 call	 edi

; 11   : 	m_fCurScaleRate = FLOAT1;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	89 45 f0	 mov	 DWORD PTR tv206[ebp], eax
  0007e	db 45 f0	 fild	 DWORD PTR tv206[ebp]
  00081	85 c0		 test	 eax, eax
  00083	79 06		 jns	 SHORT $LN14@ioKingScal
  00085	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@ioKingScal:
  0008b	d9 9e e4 09 00
	00		 fstp	 DWORD PTR [esi+2532]

; 12   : 	m_bRemoveBuffByDrop = false;

  00091	c6 86 d0 09 00
	00 00		 mov	 BYTE PTR [esi+2512], 0

; 13   : }

  00098	8b c6		 mov	 eax, esi
  0009a	e8 00 00 00 00	 call	 __EH_epilog3
  0009f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 8c 09 00
	00		 add	 ecx, 2444		; 0000098cH
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 9c 09 00
	00		 add	 ecx, 2460		; 0000099cH
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$5:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 ac 09 00
	00		 add	 ecx, 2476		; 000009acH
  0004d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@XZ$6:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 bc 09 00
	00		 add	 ecx, 2492		; 000009bcH
  0005c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioKingScaleBuff@@QAE@XZ:
  00062	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00066	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00069	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioKingScaleBuff@@QAE@XZ
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioKingScaleBuff@@QAE@XZ ENDP				; ioKingScaleBuff::ioKingScaleBuff
PUBLIC	??0ioKingScaleBuff@@QAE@ABV0@@Z			; ioKingScaleBuff::ioKingScaleBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
xdata$x	SEGMENT
__ehfuncinfo$??0ioKingScaleBuff@@QAE@ABV0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioKingScaleBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioKingScaleBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iokingscalebuff.cpp
xdata$x	ENDS
;	COMDAT ??0ioKingScaleBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv225 = 8						; size = 4
_rhs$ = 8						; size = 4
??0ioKingScaleBuff@@QAE@ABV0@@Z PROC			; ioKingScaleBuff::ioKingScaleBuff, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioKingScaleBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  0002a	50		 push	 eax
  0002b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioKingScaleBuff@@6B@
  00037	ff d3		 call	 ebx
  00039	8d 87 7c 09 00
	00		 lea	 eax, DWORD PTR [edi+2428]
  0003f	50		 push	 eax
  00040	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00046	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004a	ff d3		 call	 ebx
  0004c	8d 87 8c 09 00
	00		 lea	 eax, DWORD PTR [edi+2444]
  00052	50		 push	 eax
  00053	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  00059	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005d	ff d3		 call	 ebx
  0005f	8d 87 9c 09 00
	00		 lea	 eax, DWORD PTR [edi+2460]
  00065	50		 push	 eax
  00066	8d 8e 9c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2460]
  0006c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00070	ff d3		 call	 ebx
  00072	8d 87 ac 09 00
	00		 lea	 eax, DWORD PTR [edi+2476]
  00078	50		 push	 eax
  00079	8d 8e ac 09 00
	00		 lea	 ecx, DWORD PTR [esi+2476]
  0007f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00083	ff d3		 call	 ebx
  00085	8d 87 bc 09 00
	00		 lea	 eax, DWORD PTR [edi+2492]
  0008b	50		 push	 eax
  0008c	8d 8e bc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2492]
  00092	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00096	ff d3		 call	 ebx
  00098	8a 87 d1 09 00
	00		 mov	 al, BYTE PTR [edi+2513]
  0009e	8d 8e d4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2516]
  000a4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000a8	88 86 d1 09 00
	00		 mov	 BYTE PTR [esi+2513], al
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 25   : 	m_fScaleRate = rhs.m_fScaleRate;

  000b4	d9 87 cc 09 00
	00		 fld	 DWORD PTR [edi+2508]
  000ba	d9 9e cc 09 00
	00		 fstp	 DWORD PTR [esi+2508]

; 26   : 	m_bRemoveBuffByDrop = rhs.m_bRemoveBuffByDrop;

  000c0	8a 87 d0 09 00
	00		 mov	 al, BYTE PTR [edi+2512]
  000c6	88 86 d0 09 00
	00		 mov	 BYTE PTR [esi+2512], al

; 27   : 
; 28   : 	m_fCurScaleRate = FLOAT1;

  000cc	b8 01 00 00 00	 mov	 eax, 1
  000d1	89 45 08	 mov	 DWORD PTR tv225[ebp], eax
  000d4	db 45 08	 fild	 DWORD PTR tv225[ebp]
  000d7	85 c0		 test	 eax, eax
  000d9	79 06		 jns	 SHORT $LN14@ioKingScal@2
  000db	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@ioKingScal@2:
  000e1	d9 9e e4 09 00
	00		 fstp	 DWORD PTR [esi+2532]

; 29   : }

  000e7	8b c6		 mov	 eax, esi
  000e9	e8 00 00 00 00	 call	 __EH_epilog3
  000ee	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 8c 09 00
	00		 add	 ecx, 2444		; 0000098cH
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 9c 09 00
	00		 add	 ecx, 2460		; 0000099cH
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$5:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 ac 09 00
	00		 add	 ecx, 2476		; 000009acH
  0004d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioKingScaleBuff@@QAE@ABV0@@Z$6:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 bc 09 00
	00		 add	 ecx, 2492		; 000009bcH
  0005c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioKingScaleBuff@@QAE@ABV0@@Z:
  00062	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00066	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00069	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioKingScaleBuff@@QAE@ABV0@@Z
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioKingScaleBuff@@QAE@ABV0@@Z ENDP			; ioKingScaleBuff::ioKingScaleBuff
PUBLIC	??1ioKingScaleBuff@@UAE@XZ			; ioKingScaleBuff::~ioKingScaleBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioKingScaleBuff@@UAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1ioKingScaleBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioKingScaleBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioKingScaleBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioKingScaleBuff@@UAE@XZ PROC				; ioKingScaleBuff::~ioKingScaleBuff, COMDAT
; _this$ = ecx

; 32   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioKingScaleBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ioKingScaleBuff@@6B@

; 33   : }

  00017	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8f d4 09 00
	00		 lea	 ecx, DWORD PTR [edi+2516]
  00023	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0002a	ff d6		 call	 esi
  0002c	8d 8f bc 09 00
	00		 lea	 ecx, DWORD PTR [edi+2492]
  00032	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00036	ff d6		 call	 esi
  00038	8d 8f ac 09 00
	00		 lea	 ecx, DWORD PTR [edi+2476]
  0003e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00042	ff d6		 call	 esi
  00044	8d 8f 9c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2460]
  0004a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0004e	ff d6		 call	 esi
  00050	8d 8f 8c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2444]
  00056	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005a	ff d6		 call	 esi
  0005c	8d 8f 7c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2428]
  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00066	ff d6		 call	 esi
  00068	8d 8f 6c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2412]
  0006e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00072	ff d6		 call	 esi
  00074	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00078	8b cf		 mov	 ecx, edi
  0007a	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  0007f	e8 00 00 00 00	 call	 __EH_epilog3
  00084	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 8c 09 00
	00		 add	 ecx, 2444		; 0000098cH
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 9c 09 00
	00		 add	 ecx, 2460		; 0000099cH
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$5:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 ac 09 00
	00		 add	 ecx, 2476		; 000009acH
  0004d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioKingScaleBuff@@UAE@XZ$6:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 bc 09 00
	00		 add	 ecx, 2492		; 000009bcH
  0005c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioKingScaleBuff@@UAE@XZ:
  00062	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00066	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00069	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioKingScaleBuff@@UAE@XZ
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioKingScaleBuff@@UAE@XZ ENDP				; ioKingScaleBuff::~ioKingScaleBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524858 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ PROC		; ioKingScaleBuff::Clone, COMDAT
; _this$ = ecx

; 61   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 62   : 	return new ioKingScaleBuff( *this );

  0000e	68 e8 09 00 00	 push	 2536			; 000009e8H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524858[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioKingScaleBuff@@QAE@ABV0@@Z ; ioKingScaleBuff::ioKingScaleBuff
$LN3@Clone:

; 63   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524858[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioKingScaleBuff@@UAEPAVioBuff@@XZ ENDP		; ioKingScaleBuff::Clone
EXTRN	?SetKingScaleSkeleton@ioBaseChar@@QAEXAAVioHashString@@@Z:PROC ; ioBaseChar::SetKingScaleSkeleton
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?GetRaceDetailType@ioBaseChar@@QBE?AW4RaceDetailType@@XZ:PROC ; ioBaseChar::GetRaceDetailType
EXTRN	?SetKingScaleRate@ioBaseChar@@QAEXAAM@Z:PROC	; ioBaseChar::SetKingScaleRate
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioKingScaleBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioKingScaleBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioKingScaleBuff::StartBuff, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 67   : 	ioBuff::StartBuff( pOwner );

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 68   : 
; 69   : 	m_fCurScaleRate = m_fScaleRate;

  00010	d9 86 cc 09 00
	00		 fld	 DWORD PTR [esi+2508]
  00016	8d 86 e4 09 00
	00		 lea	 eax, DWORD PTR [esi+2532]

; 70   : 	pOwner->SetKingScaleRate( m_fCurScaleRate );

  0001c	50		 push	 eax
  0001d	d9 18		 fstp	 DWORD PTR [eax]
  0001f	8b cf		 mov	 ecx, edi
  00021	e8 00 00 00 00	 call	 ?SetKingScaleRate@ioBaseChar@@QAEXAAM@Z ; ioBaseChar::SetKingScaleRate

; 71   : 
; 72   : 	int iRaceType = pOwner->GetRaceDetailType();

  00026	8b cf		 mov	 ecx, edi
  00028	e8 00 00 00 00	 call	 ?GetRaceDetailType@ioBaseChar@@QBE?AW4RaceDetailType@@XZ ; ioBaseChar::GetRaceDetailType

; 73   : 
; 74   : 	switch( iRaceType )

  0002d	83 e8 00	 sub	 eax, 0
  00030	74 37		 je	 SHORT $LN6@StartBuff
  00032	48		 dec	 eax
  00033	74 2c		 je	 SHORT $LN5@StartBuff
  00035	48		 dec	 eax
  00036	74 21		 je	 SHORT $LN4@StartBuff
  00038	48		 dec	 eax
  00039	74 16		 je	 SHORT $LN3@StartBuff
  0003b	48		 dec	 eax
  0003c	74 0b		 je	 SHORT $LN2@StartBuff
  0003e	48		 dec	 eax
  0003f	75 3b		 jne	 SHORT $LN7@StartBuff

; 91   : 	case RDT_DWARF_WOMAN:
; 92   : 		m_CurSkeleton = m_ChangeSkeletonDw;

  00041	8d 86 bc 09 00
	00		 lea	 eax, DWORD PTR [esi+2492]

; 93   : 		break;

  00047	eb 26		 jmp	 SHORT $LN11@StartBuff
$LN2@StartBuff:

; 88   : 	case RDT_DWARF_MAN:
; 89   : 		m_CurSkeleton = m_ChangeSkeletonDm;

  00049	8d 86 ac 09 00
	00		 lea	 eax, DWORD PTR [esi+2476]

; 90   : 		break;

  0004f	eb 1e		 jmp	 SHORT $LN11@StartBuff
$LN3@StartBuff:

; 85   : 	case RDT_ELF_WOMAN:
; 86   : 		m_CurSkeleton = m_ChangeSkeletonEw;

  00051	8d 86 9c 09 00
	00		 lea	 eax, DWORD PTR [esi+2460]

; 87   : 		break;

  00057	eb 16		 jmp	 SHORT $LN11@StartBuff
$LN4@StartBuff:

; 82   : 	case RDT_ELF_MAN:
; 83   : 		m_CurSkeleton = m_ChangeSkeletonEm;

  00059	8d 86 8c 09 00
	00		 lea	 eax, DWORD PTR [esi+2444]

; 84   : 		break;

  0005f	eb 0e		 jmp	 SHORT $LN11@StartBuff
$LN5@StartBuff:

; 78   : 		break;
; 79   : 	case RDT_HUMAN_WOMAN:
; 80   : 		m_CurSkeleton = m_ChangeSkeletonHw;

  00061	8d 86 7c 09 00
	00		 lea	 eax, DWORD PTR [esi+2428]

; 81   : 		break;

  00067	eb 06		 jmp	 SHORT $LN11@StartBuff
$LN6@StartBuff:

; 75   : 	{
; 76   : 	case RDT_HUMAN_MAN:
; 77   : 		m_CurSkeleton = m_ChangeSkeletonHm;

  00069	8d 86 6c 09 00
	00		 lea	 eax, DWORD PTR [esi+2412]
$LN11@StartBuff:
  0006f	50		 push	 eax
  00070	8d 8e d4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2516]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
$LN7@StartBuff:

; 94   : 	}
; 95   : 
; 96   : 	pOwner->SetKingScaleSkeleton( m_CurSkeleton );

  0007c	81 c6 d4 09 00
	00		 add	 esi, 2516		; 000009d4H
  00082	56		 push	 esi
  00083	8b cf		 mov	 ecx, edi
  00085	e8 00 00 00 00	 call	 ?SetKingScaleSkeleton@ioBaseChar@@QAEXAAVioHashString@@@Z ; ioBaseChar::SetKingScaleSkeleton
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi

; 97   : }

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
?StartBuff@ioKingScaleBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioKingScaleBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioKingScaleBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioKingScaleBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioKingScaleBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 101  : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00005	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00008	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00016	84 c0		 test	 al, al
  00018	74 7c		 je	 SHORT $LN10@ApplyStart
$LN9@ApplyStart:

; 102  : 		return false;
; 103  : 
; 104  : 	m_fCurScaleRate = m_fScaleRate;

  0001a	d9 86 cc 09 00
	00		 fld	 DWORD PTR [esi+2508]
  00020	8d 86 e4 09 00
	00		 lea	 eax, DWORD PTR [esi+2532]

; 105  : 	pOwner->SetKingScaleRate( m_fCurScaleRate );

  00026	50		 push	 eax
  00027	d9 18		 fstp	 DWORD PTR [eax]
  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ?SetKingScaleRate@ioBaseChar@@QAEXAAM@Z ; ioBaseChar::SetKingScaleRate

; 106  : 
; 107  : 	int iRaceType = pOwner->GetRaceDetailType();

  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 ?GetRaceDetailType@ioBaseChar@@QBE?AW4RaceDetailType@@XZ ; ioBaseChar::GetRaceDetailType

; 108  : 
; 109  : 	switch( iRaceType )

  00037	83 e8 00	 sub	 eax, 0
  0003a	74 37		 je	 SHORT $LN6@ApplyStart
  0003c	48		 dec	 eax
  0003d	74 2c		 je	 SHORT $LN5@ApplyStart
  0003f	48		 dec	 eax
  00040	74 21		 je	 SHORT $LN4@ApplyStart
  00042	48		 dec	 eax
  00043	74 16		 je	 SHORT $LN3@ApplyStart
  00045	48		 dec	 eax
  00046	74 0b		 je	 SHORT $LN2@ApplyStart
  00048	48		 dec	 eax
  00049	75 3b		 jne	 SHORT $LN7@ApplyStart

; 126  : 	case RDT_DWARF_WOMAN:
; 127  : 		m_CurSkeleton = m_ChangeSkeletonDw;

  0004b	8d 86 bc 09 00
	00		 lea	 eax, DWORD PTR [esi+2492]

; 128  : 		break;

  00051	eb 26		 jmp	 SHORT $LN12@ApplyStart
$LN2@ApplyStart:

; 123  : 	case RDT_DWARF_MAN:
; 124  : 		m_CurSkeleton = m_ChangeSkeletonDm;

  00053	8d 86 ac 09 00
	00		 lea	 eax, DWORD PTR [esi+2476]

; 125  : 		break;

  00059	eb 1e		 jmp	 SHORT $LN12@ApplyStart
$LN3@ApplyStart:

; 120  : 	case RDT_ELF_WOMAN:
; 121  : 		m_CurSkeleton = m_ChangeSkeletonEw;

  0005b	8d 86 9c 09 00
	00		 lea	 eax, DWORD PTR [esi+2460]

; 122  : 		break;

  00061	eb 16		 jmp	 SHORT $LN12@ApplyStart
$LN4@ApplyStart:

; 117  : 	case RDT_ELF_MAN:
; 118  : 		m_CurSkeleton = m_ChangeSkeletonEm;

  00063	8d 86 8c 09 00
	00		 lea	 eax, DWORD PTR [esi+2444]

; 119  : 		break;

  00069	eb 0e		 jmp	 SHORT $LN12@ApplyStart
$LN5@ApplyStart:

; 113  : 		break;
; 114  : 	case RDT_HUMAN_WOMAN:
; 115  : 		m_CurSkeleton = m_ChangeSkeletonHw;

  0006b	8d 86 7c 09 00
	00		 lea	 eax, DWORD PTR [esi+2428]

; 116  : 		break;

  00071	eb 06		 jmp	 SHORT $LN12@ApplyStart
$LN6@ApplyStart:

; 110  : 	{
; 111  : 	case RDT_HUMAN_MAN:
; 112  : 		m_CurSkeleton = m_ChangeSkeletonHm;

  00073	8d 86 6c 09 00
	00		 lea	 eax, DWORD PTR [esi+2412]
$LN12@ApplyStart:
  00079	50		 push	 eax
  0007a	8d 8e d4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2516]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
$LN7@ApplyStart:

; 129  : 	}
; 130  : 
; 131  : 	pOwner->SetKingScaleSkeleton( m_CurSkeleton );

  00086	81 c6 d4 09 00
	00		 add	 esi, 2516		; 000009d4H
  0008c	56		 push	 esi
  0008d	8b cf		 mov	 ecx, edi
  0008f	e8 00 00 00 00	 call	 ?SetKingScaleSkeleton@ioBaseChar@@QAEXAAVioHashString@@@Z ; ioBaseChar::SetKingScaleSkeleton

; 132  : 
; 133  : 	return true;

  00094	b0 01		 mov	 al, 1
$LN10@ApplyStart:
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi

; 134  : }

  00098	5d		 pop	 ebp
  00099	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioKingScaleBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioKingScaleBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?RemoveKingScaleRate@ioBaseChar@@QAEXM@Z:PROC	; ioBaseChar::RemoveKingScaleRate
EXTRN	?RemoveKingScaleSkeleton@ioBaseChar@@QAEXABVioHashString@@@Z:PROC ; ioBaseChar::RemoveKingScaleSkeleton
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioKingScaleBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioKingScaleBuff@@UAEXXZ PROC			; ioKingScaleBuff::EndBuff, COMDAT
; _this$ = ecx

; 168  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 169  : 	m_pOwner->RemoveKingScaleSkeleton( m_CurSkeleton );

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	57		 push	 edi
  0000a	8d 86 d4 09 00
	00		 lea	 eax, DWORD PTR [esi+2516]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?RemoveKingScaleSkeleton@ioBaseChar@@QAEXABVioHashString@@@Z ; ioBaseChar::RemoveKingScaleSkeleton

; 170  : 	m_pOwner->RemoveKingScaleRate( m_fCurScaleRate );

  00016	f3 0f 10 86 e4
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2532]
  0001e	51		 push	 ecx
  0001f	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00025	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002a	e8 00 00 00 00	 call	 ?RemoveKingScaleRate@ioBaseChar@@QAEXM@Z ; ioBaseChar::RemoveKingScaleRate
  0002f	5f		 pop	 edi

; 171  : 
; 172  : 	ioBuff::EndBuff();

  00030	8b ce		 mov	 ecx, esi
  00032	5e		 pop	 esi
  00033	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioKingScaleBuff@@UAEXXZ ENDP			; ioKingScaleBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioKingScaleBuff@@IAEXXZ	; ioKingScaleBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioKingScaleBuff@@IAEXXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioKingScaleBuff@@IAEXXZ PROC	; ioKingScaleBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 176  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 177  : 	if( !m_pOwner ) return;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	33 d2		 xor	 edx, edx
  0000b	3b ca		 cmp	 ecx, edx
  0000d	74 57		 je	 SHORT $LN1@CheckOwner

; 178  : 
; 179  : 	CharState eState = m_pOwner->GetState();

  0000f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 180  : 
; 181  : 	if( m_bDisableDownState )

  00015	38 96 d1 09 00
	00		 cmp	 BYTE PTR [esi+2513], dl
  0001b	74 49		 je	 SHORT $LN1@CheckOwner

; 182  : 	{
; 183  : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001d	3c 17		 cmp	 al, 23			; 00000017H
  0001f	75 10		 jne	 SHORT $LN13@CheckOwner
  00021	38 91 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], dl
$LN29@CheckOwner:
  00027	74 3d		 je	 SHORT $LN1@CheckOwner
$LN28@CheckOwner:

; 184  : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
  0002c	e9 00 00 00 00	 jmp	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN13@CheckOwner:

; 185  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00031	3c 0c		 cmp	 al, 12			; 0000000cH
  00033	75 0b		 jne	 SHORT $LN11@CheckOwner
$LN31@CheckOwner:
  00035	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  0003a	84 c0		 test	 al, al
  0003c	75 28		 jne	 SHORT $LN1@CheckOwner

; 186  : 			SetReserveEndBuff();

  0003e	eb e9		 jmp	 SHORT $LN28@CheckOwner
$LN11@CheckOwner:

; 187  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00040	3c 31		 cmp	 al, 49			; 00000031H

; 188  : 			SetReserveEndBuff();

  00042	74 f1		 je	 SHORT $LN31@CheckOwner

; 189  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00044	3c 0f		 cmp	 al, 15			; 0000000fH
  00046	75 0a		 jne	 SHORT $LN7@CheckOwner
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0004e	84 c0		 test	 al, al

; 190  : 			SetReserveEndBuff();

  00050	eb d5		 jmp	 SHORT $LN29@CheckOwner
$LN7@CheckOwner:

; 191  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00052	3c 26		 cmp	 al, 38			; 00000026H
  00054	75 08		 jne	 SHORT $LN5@CheckOwner
$LN30@CheckOwner:
  00056	38 91 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], dl

; 192  : 			SetReserveEndBuff();

  0005c	eb c9		 jmp	 SHORT $LN29@CheckOwner
$LN5@CheckOwner:

; 193  : 		else if( eState == CS_DROP_ZONE_DOWN )

  0005e	3c 10		 cmp	 al, 16			; 00000010H

; 194  : 			SetReserveEndBuff();

  00060	74 c7		 je	 SHORT $LN28@CheckOwner

; 195  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00062	3c 3b		 cmp	 al, 59			; 0000003bH

; 196  : 			SetReserveEndBuff();

  00064	74 f0		 je	 SHORT $LN30@CheckOwner
$LN1@CheckOwner:
  00066	5e		 pop	 esi

; 197  : 	}
; 198  : }

  00067	c3		 ret	 0
?CheckOwnerStateCheck@ioKingScaleBuff@@IAEXXZ ENDP	; ioKingScaleBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioKingScaleBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioKingScaleBuff@@UAEPAXI@Z PROC			; ioKingScaleBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioKingScaleBuff@@UAE@XZ ; ioKingScaleBuff::~ioKingScaleBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioKingScaleBuff@@UAEPAXI@Z ENDP			; ioKingScaleBuff::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iokingscalebuff.cpp
;	COMDAT ?ProcessBuff@ioKingScaleBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioKingScaleBuff@@UAEXM@Z PROC		; ioKingScaleBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 138  : 	if( m_bRemoveBuffByDrop && m_pOwner->GetState() == CS_DROP_ZONE_DOWN  )

  00006	80 be d0 09 00
	00 00		 cmp	 BYTE PTR [esi+2512], 0
  0000d	74 16		 je	 SHORT $LN7@ProcessBuf
  0000f	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00015	80 b8 10 03 00
	00 10		 cmp	 BYTE PTR [eax+784], 16	; 00000010H
  0001c	75 07		 jne	 SHORT $LN7@ProcessBuf
$LN12@ProcessBuf:

; 139  : 	{
; 140  : 		SetReserveEndBuff();

  0001e	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 141  : 		return;

  00023	eb 53		 jmp	 SHORT $LN5@ProcessBuf
$LN7@ProcessBuf:

; 142  : 	}
; 143  : 
; 144  : 	CheckOwnerStateCheck();

  00025	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioKingScaleBuff@@IAEXXZ ; ioKingScaleBuff::CheckOwnerStateCheck

; 145  : 
; 146  : 	switch( m_iOperationType )

  0002a	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00030	83 e8 00	 sub	 eax, 0
  00033	74 3c		 je	 SHORT $LN1@ProcessBuf
  00035	48		 dec	 eax
  00036	74 06		 je	 SHORT $LN2@ProcessBuf
  00038	48		 dec	 eax
  00039	74 17		 je	 SHORT $LN4@ProcessBuf
  0003b	48		 dec	 eax
  0003c	75 3a		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 157  : 	case OT_DELAY:
; 158  : 	case OT_ACTIVE:
; 159  : 		ioBuff::ProcessBuff( fTimePerSec );

  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00043	51		 push	 ecx
  00044	8b ce		 mov	 ecx, esi
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 160  : 		break;

  00050	eb 26		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 147  : 	{
; 148  : 	case OT_SWITCH:
; 149  : 		if( !CheckSwitchType( fTimePerSec ) )

  00052	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00057	51		 push	 ecx
  00058	8b ce		 mov	 ecx, esi
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 150  : 		{
; 151  : 			SetReserveEndBuff();

  00064	8b ce		 mov	 ecx, esi
  00066	84 c0		 test	 al, al

; 152  : 			return;

  00068	74 b4		 je	 SHORT $LN12@ProcessBuf

; 153  : 		}
; 154  : 
; 155  : 		CheckCallingProcess();

  0006a	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 156  : 		break;

  0006f	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 161  : 	case OT_PASSIVE:
; 162  : 		CheckCallingAreaWeapon();

  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  00078	5e		 pop	 esi

; 163  : 		break;
; 164  : 	}
; 165  : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?ProcessBuff@ioKingScaleBuff@@UAEXM@Z ENDP		; ioKingScaleBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<18>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<18>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 be 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 a7 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 90 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 78 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 61 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 4a 01 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 34 01 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 1e 01 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 07 01 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 f0 00 00
	00		 je	 $LN87@LoadString
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 da 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 c4 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 ad 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 96 00 00
	00		 je	 $LN83@LoadString
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 80 00 00
	00		 je	 $LN82@LoadString
  00115	32 d1		 xor	 dl, cl
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 6e		 je	 SHORT $LN81@LoadString
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 5b		 je	 SHORT $LN80@LoadString
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00135	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00138	0f 84 ac 00 00
	00		 je	 $LN111@LoadString
  0013e	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00141	84 d2		 test	 dl, dl
  00143	74 3f		 je	 SHORT $LN78@LoadString
  00145	32 d1		 xor	 dl, cl
  00147	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 2d		 je	 SHORT $LN77@LoadString
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 1a		 je	 SHORT $LN76@LoadString
  0015e	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00161	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00164	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00167	84 c0		 test	 al, al
  00169	74 07		 je	 SHORT $LN75@LoadString
  0016b	34 ec		 xor	 al, -20			; ffffffecH
  0016d	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00170	eb 78		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00172	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00176	eb 72		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00178	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0017c	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0017e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00182	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  00184	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  00187	eb 61		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  00189	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0018d	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  0018f	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00193	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00195	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00198	eb 50		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  0019a	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0019e	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001a0	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a4	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001a6	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001aa	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001ac	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001af	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001b1	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001b5	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001b7	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001bb	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001bd	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001c1	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001c3	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001c6	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001c8	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001cc	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001ce	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001d2	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001d4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d8	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001da	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001de	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001e0	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001e4	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001e6	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001ea	6a 04		 push	 4
  001ec	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001f3	5a		 pop	 edx
$LL104@LoadString:
  001f4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fa	83 c0 04	 add	 eax, 4
  001fd	4a		 dec	 edx
  001fe	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00200	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00203	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00206	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0020a	57		 push	 edi
  0020b	56		 push	 esi
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	50		 push	 eax
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00216	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00219	5f		 pop	 edi
  0021a	33 cd		 xor	 ecx, ebp
  0021c	5e		 pop	 esi
  0021d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00222	c9		 leave
  00223	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ; ioINILoader::LoadFloat_e<11>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<11>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadFloat_
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadFloat_
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadFloat_
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadFloat_
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadFloat_
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadFloat_
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadFloat_
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadFloat_
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadFloat_
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadFloat_
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadFloat_
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadFloat_:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadFloat_
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadFloat_:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadFloat_
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadFloat_:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00183	51		 push	 ecx
  00184	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	33 cd		 xor	 ecx, ebp
  0019a	5e		 pop	 esi
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	c9		 leave
  001a1	c2 08 00	 ret	 8
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z ; ioINILoader::LoadBool_e<17>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<17>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadBool_e
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadBool_e
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadBool_e
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadBool_e
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadBool_e
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadBool_e
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadBool_e
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadBool_e:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001e1	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e@2
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e@2
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e@2
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e@2
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e@2
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e@2
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e@2
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e@2
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e@2:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e@2
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e@2:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e@2
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e@2:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT __real@0000000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iokingscalebuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioKingScaleBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -296				; size = 4
tv8376 = -292						; size = 4
tv3708 = -292						; size = 4
_this$GSCopy$ = -292					; size = 4
_szSkeleton$ = -288					; size = 260
__k$526037 = -28					; size = 19
__k$526006 = -28					; size = 17
__k$525671 = -28					; size = 18
__k$525546 = -28					; size = 18
__k$525421 = -28					; size = 18
__k$525283 = -28					; size = 18
__k$525158 = -28					; size = 18
__k$525033 = -28					; size = 18
__k$525800 = -20					; size = 11
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioKingScaleBuff@@UAEXAAVioINILoader@@@Z PROC ; ioKingScaleBuff::LoadProperty, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 37   : 	ioBuff::LoadProperty( rkLoader );

  0001a	56		 push	 esi

; 50   : 	rkLoader.LoadString_e( "scale_skeleton_dw", "", szSkeleton, MAX_PATH );

  0001b	89 bd dc fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00021	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], esi
  00027	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  0002c	6a 04		 push	 4
  0002e	c7 45 e4 9e 8f
	8a 86		 mov	 DWORD PTR __k$525033[ebp], -2037739618 ; 868a8f9eH
  00035	c7 45 e8 88 b3
	98 81		 mov	 DWORD PTR __k$525033[ebp+4], -2120699000 ; 8198b388H
  0003c	c7 45 ec 88 80
	8e 9e		 mov	 DWORD PTR __k$525033[ebp+8], -1634828152 ; 9e8e8088H
  00043	c7 45 f0 82 82
	b4 82		 mov	 DWORD PTR __k$525033[ebp+12], -2102099326 ; 82b48282H
  0004a	8d 45 e4	 lea	 eax, DWORD PTR __k$525033[ebp]
  0004d	66 c7 45 f4 80
	00		 mov	 WORD PTR __k$525033[ebp+16], 128 ; 00000080H
  00053	59		 pop	 ecx
$LL108@LoadProper:

; 38   : 
; 39   : 	char szSkeleton[MAX_PATH];
; 40   : 	rkLoader.LoadString_e( "scale_skeleton_hm", "", szSkeleton, MAX_PATH );

  00054	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0005a	83 c0 04	 add	 eax, 4
  0005d	49		 dec	 ecx
  0005e	75 f4		 jne	 SHORT $LL108@LoadProper
  00060	80 75 f4 ed	 xor	 BYTE PTR __k$525033[ebp+16], -19 ; ffffffedH
  00064	53		 push	 ebx
  00065	68 04 01 00 00	 push	 260			; 00000104H
  0006a	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  00070	50		 push	 eax
  00071	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00076	53		 push	 ebx
  00077	8d 45 e4	 lea	 eax, DWORD PTR __k$525033[ebp]
  0007a	8b ce		 mov	 ecx, esi
  0007c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  00082	50		 push	 eax
  00083	ff d6		 call	 esi

; 41   : 	m_ChangeSkeletonHm = szSkeleton;

  00085	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  0008b	8d 8f 6c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2412]
  00091	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00097	50		 push	 eax
  00098	ff d7		 call	 edi
  0009a	6a 04		 push	 4

; 42   : 	rkLoader.LoadString_e( "scale_skeleton_hw", "", szSkeleton, MAX_PATH );

  0009c	c7 45 e4 9e 8f
	8a 86		 mov	 DWORD PTR __k$525158[ebp], -2037739618 ; 868a8f9eH
  000a3	c7 45 e8 88 b3
	98 81		 mov	 DWORD PTR __k$525158[ebp+4], -2120699000 ; 8198b388H
  000aa	c7 45 ec 88 80
	8e 9e		 mov	 DWORD PTR __k$525158[ebp+8], -1634828152 ; 9e8e8088H
  000b1	c7 45 f0 82 82
	b4 82		 mov	 DWORD PTR __k$525158[ebp+12], -2102099326 ; 82b48282H
  000b8	8d 45 e4	 lea	 eax, DWORD PTR __k$525158[ebp]
  000bb	66 c7 45 f4 9a
	00		 mov	 WORD PTR __k$525158[ebp+16], 154 ; 0000009aH
  000c1	59		 pop	 ecx
$LL214@LoadProper:
  000c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c8	83 c0 04	 add	 eax, 4
  000cb	49		 dec	 ecx
  000cc	75 f4		 jne	 SHORT $LL214@LoadProper
  000ce	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000d4	80 75 f4 ed	 xor	 BYTE PTR __k$525158[ebp+16], -19 ; ffffffedH
  000d8	68 04 01 00 00	 push	 260			; 00000104H
  000dd	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  000e3	50		 push	 eax
  000e4	53		 push	 ebx
  000e5	8d 45 e4	 lea	 eax, DWORD PTR __k$525158[ebp]
  000e8	50		 push	 eax
  000e9	ff d6		 call	 esi

; 43   : 	m_ChangeSkeletonHw = szSkeleton;

  000eb	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000f1	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  000f7	50		 push	 eax
  000f8	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  000fe	ff d7		 call	 edi
  00100	6a 04		 push	 4

; 44   : 	rkLoader.LoadString_e( "scale_skeleton_em", "", szSkeleton, MAX_PATH );

  00102	c7 45 e4 9e 8f
	8a 86		 mov	 DWORD PTR __k$525283[ebp], -2037739618 ; 868a8f9eH
  00109	c7 45 e8 88 b3
	98 81		 mov	 DWORD PTR __k$525283[ebp+4], -2120699000 ; 8198b388H
  00110	c7 45 ec 88 80
	8e 9e		 mov	 DWORD PTR __k$525283[ebp+8], -1634828152 ; 9e8e8088H
  00117	c7 45 f0 82 82
	b4 8f		 mov	 DWORD PTR __k$525283[ebp+12], -1883995518 ; 8fb48282H
  0011e	8d 45 e4	 lea	 eax, DWORD PTR __k$525283[ebp]
  00121	66 c7 45 f4 80
	00		 mov	 WORD PTR __k$525283[ebp+16], 128 ; 00000080H
  00127	59		 pop	 ecx
$LL320@LoadProper:
  00128	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0012e	83 c0 04	 add	 eax, 4
  00131	49		 dec	 ecx
  00132	75 f4		 jne	 SHORT $LL320@LoadProper
  00134	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0013a	80 75 f4 ed	 xor	 BYTE PTR __k$525283[ebp+16], -19 ; ffffffedH
  0013e	68 04 01 00 00	 push	 260			; 00000104H
  00143	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  00149	50		 push	 eax
  0014a	53		 push	 ebx
  0014b	8d 45 e4	 lea	 eax, DWORD PTR __k$525283[ebp]
  0014e	50		 push	 eax
  0014f	ff d6		 call	 esi

; 45   : 	m_ChangeSkeletonEm = szSkeleton;

  00151	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00157	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  0015d	50		 push	 eax
  0015e	81 c1 8c 09 00
	00		 add	 ecx, 2444		; 0000098cH
  00164	ff d7		 call	 edi
  00166	6a 04		 push	 4

; 46   : 	rkLoader.LoadString_e( "scale_skeleton_ew", "", szSkeleton, MAX_PATH );

  00168	c7 45 e4 9e 8f
	8a 86		 mov	 DWORD PTR __k$525421[ebp], -2037739618 ; 868a8f9eH
  0016f	c7 45 e8 88 b3
	98 81		 mov	 DWORD PTR __k$525421[ebp+4], -2120699000 ; 8198b388H
  00176	c7 45 ec 88 80
	8e 9e		 mov	 DWORD PTR __k$525421[ebp+8], -1634828152 ; 9e8e8088H
  0017d	c7 45 f0 82 82
	b4 8f		 mov	 DWORD PTR __k$525421[ebp+12], -1883995518 ; 8fb48282H
  00184	8d 45 e4	 lea	 eax, DWORD PTR __k$525421[ebp]
  00187	66 c7 45 f4 9a
	00		 mov	 WORD PTR __k$525421[ebp+16], 154 ; 0000009aH
  0018d	59		 pop	 ecx
$LL426@LoadProper:
  0018e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00194	83 c0 04	 add	 eax, 4
  00197	49		 dec	 ecx
  00198	75 f4		 jne	 SHORT $LL426@LoadProper
  0019a	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001a0	80 75 f4 ed	 xor	 BYTE PTR __k$525421[ebp+16], -19 ; ffffffedH
  001a4	68 04 01 00 00	 push	 260			; 00000104H
  001a9	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  001af	50		 push	 eax
  001b0	53		 push	 ebx
  001b1	8d 45 e4	 lea	 eax, DWORD PTR __k$525421[ebp]
  001b4	50		 push	 eax
  001b5	ff d6		 call	 esi

; 47   : 	m_ChangeSkeletonEw = szSkeleton;

  001b7	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001bd	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  001c3	50		 push	 eax
  001c4	81 c1 9c 09 00
	00		 add	 ecx, 2460		; 0000099cH
  001ca	ff d7		 call	 edi
  001cc	6a 04		 push	 4

; 48   : 	rkLoader.LoadString_e( "scale_skeleton_dm", "", szSkeleton, MAX_PATH );

  001ce	c7 45 e4 9e 8f
	8a 86		 mov	 DWORD PTR __k$525546[ebp], -2037739618 ; 868a8f9eH
  001d5	c7 45 e8 88 b3
	98 81		 mov	 DWORD PTR __k$525546[ebp+4], -2120699000 ; 8198b388H
  001dc	c7 45 ec 88 80
	8e 9e		 mov	 DWORD PTR __k$525546[ebp+8], -1634828152 ; 9e8e8088H
  001e3	c7 45 f0 82 82
	b4 8e		 mov	 DWORD PTR __k$525546[ebp+12], -1900772734 ; 8eb48282H
  001ea	8d 45 e4	 lea	 eax, DWORD PTR __k$525546[ebp]
  001ed	66 c7 45 f4 80
	00		 mov	 WORD PTR __k$525546[ebp+16], 128 ; 00000080H
  001f3	59		 pop	 ecx
$LL532@LoadProper:
  001f4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fa	83 c0 04	 add	 eax, 4
  001fd	49		 dec	 ecx
  001fe	75 f4		 jne	 SHORT $LL532@LoadProper
  00200	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00206	80 75 f4 ed	 xor	 BYTE PTR __k$525546[ebp+16], -19 ; ffffffedH
  0020a	68 04 01 00 00	 push	 260			; 00000104H
  0020f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  00215	50		 push	 eax
  00216	53		 push	 ebx
  00217	8d 45 e4	 lea	 eax, DWORD PTR __k$525546[ebp]
  0021a	50		 push	 eax
  0021b	ff d6		 call	 esi

; 49   : 	m_ChangeSkeletonDm = szSkeleton;

  0021d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00223	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  00229	50		 push	 eax
  0022a	81 c1 ac 09 00
	00		 add	 ecx, 2476		; 000009acH
  00230	ff d7		 call	 edi
  00232	6a 04		 push	 4

; 50   : 	rkLoader.LoadString_e( "scale_skeleton_dw", "", szSkeleton, MAX_PATH );

  00234	c7 45 e4 9e 8f
	8a 86		 mov	 DWORD PTR __k$525671[ebp], -2037739618 ; 868a8f9eH
  0023b	c7 45 e8 88 b3
	98 81		 mov	 DWORD PTR __k$525671[ebp+4], -2120699000 ; 8198b388H
  00242	c7 45 ec 88 80
	8e 9e		 mov	 DWORD PTR __k$525671[ebp+8], -1634828152 ; 9e8e8088H
  00249	c7 45 f0 82 82
	b4 8e		 mov	 DWORD PTR __k$525671[ebp+12], -1900772734 ; 8eb48282H
  00250	8d 45 e4	 lea	 eax, DWORD PTR __k$525671[ebp]
  00253	66 c7 45 f4 9a
	00		 mov	 WORD PTR __k$525671[ebp+16], 154 ; 0000009aH
  00259	59		 pop	 ecx
$LL638@LoadProper:
  0025a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00260	83 c0 04	 add	 eax, 4
  00263	49		 dec	 ecx
  00264	75 f4		 jne	 SHORT $LL638@LoadProper
  00266	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0026c	80 75 f4 ed	 xor	 BYTE PTR __k$525671[ebp+16], -19 ; ffffffedH
  00270	68 04 01 00 00	 push	 260			; 00000104H
  00275	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  0027b	50		 push	 eax
  0027c	53		 push	 ebx
  0027d	8d 45 e4	 lea	 eax, DWORD PTR __k$525671[ebp]
  00280	50		 push	 eax
  00281	ff d6		 call	 esi

; 51   : 	m_ChangeSkeletonDw = szSkeleton;

  00283	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00289	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szSkeleton$[ebp]
  0028f	50		 push	 eax
  00290	8d 8e bc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2492]
  00296	ff d7		 call	 edi

; 52   : 
; 53   : 	m_fScaleRate = rkLoader.LoadFloat_e( "scale_rate", FLOAT1 );

  00298	b8 01 00 00 00	 mov	 eax, 1
  0029d	6a 02		 push	 2
  0029f	8b f8		 mov	 edi, eax
  002a1	c7 45 ec 9e 8f
	8a 86		 mov	 DWORD PTR __k$525800[ebp], -2037739618 ; 868a8f9eH
  002a8	c7 45 f0 88 b3
	99 8b		 mov	 DWORD PTR __k$525800[ebp+4], -1952861304 ; 8b99b388H
  002af	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$525800[ebp+8], 35225 ; 00008999H
  002b5	8d 4d ec	 lea	 ecx, DWORD PTR __k$525800[ebp]
  002b8	c6 45 f6 00	 mov	 BYTE PTR __k$525800[ebp+10], 0
  002bc	5a		 pop	 edx
$LL746@LoadProper:
  002bd	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  002c3	83 c1 04	 add	 ecx, 4
  002c6	4a		 dec	 edx
  002c7	75 f4		 jne	 SHORT $LL746@LoadProper
  002c9	6a 08		 push	 8
  002cb	59		 pop	 ecx
$LL743@LoadProper:
  002cc	8b c1		 mov	 eax, ecx
  002ce	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  002d3	79 05		 jns	 SHORT $LN997@LoadProper
  002d5	48		 dec	 eax
  002d6	83 c8 fc	 or	 eax, -4			; fffffffcH
  002d9	40		 inc	 eax
$LN997@LoadProper:
  002da	b2 ed		 mov	 dl, -19			; ffffffedH
  002dc	2a d0		 sub	 dl, al
  002de	30 54 0d ec	 xor	 BYTE PTR __k$525800[ebp+ecx], dl
  002e2	41		 inc	 ecx
  002e3	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  002e6	7c e4		 jl	 SHORT $LL743@LoadProper
  002e8	89 bd dc fe ff
	ff		 mov	 DWORD PTR tv8376[ebp], edi
  002ee	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv8376[ebp]
  002f4	85 ff		 test	 edi, edi
  002f6	79 06		 jns	 SHORT $LN998@LoadProper
  002f8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN998@LoadProper:
  002fe	51		 push	 ecx
  002ff	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00305	d9 1c 24	 fstp	 DWORD PTR [esp]
  00308	8d 45 ec	 lea	 eax, DWORD PTR __k$525800[ebp]
  0030b	50		 push	 eax
  0030c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00312	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv3708[ebp]
  00318	d9 85 dc fe ff
	ff		 fld	 DWORD PTR tv3708[ebp]
  0031e	d9 9e cc 09 00
	00		 fstp	 DWORD PTR [esi+2508]

; 54   : 	m_fScaleRate = max( 0.0f, m_fScaleRate );

  00324	d9 85 dc fe ff
	ff		 fld	 DWORD PTR tv3708[ebp]
  0032a	d9 ee		 fldz
  0032c	df f1		 fcomip	 ST(1)
  0032e	dd d8		 fstp	 ST(0)
  00330	76 05		 jbe	 SHORT $LN3@LoadProper
  00332	0f 57 c0	 xorps	 xmm0, xmm0
  00335	eb 08		 jmp	 SHORT $LN4@LoadProper
$LN3@LoadProper:
  00337	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR tv3708[ebp]
$LN4@LoadProper:
  0033f	6a 04		 push	 4
  00341	5b		 pop	 ebx
  00342	f3 0f 11 86 cc
	09 00 00	 movss	 DWORD PTR [esi+2508], xmm0

; 55   : 
; 56   : 	m_bRemoveBuffByDrop = rkLoader.LoadBool_e( "remove_buff_drop", false );

  0034a	c7 45 e4 9f 89
	86 85		 mov	 DWORD PTR __k$526006[ebp], -2054780513 ; 8586899fH
  00351	c7 45 e8 9b 89
	b4 88		 mov	 DWORD PTR __k$526006[ebp+4], -2001434213 ; 88b4899bH
  00358	c7 45 ec 98 8a
	8d b5		 mov	 DWORD PTR __k$526006[ebp+8], -1249015144 ; b58d8a98H
  0035f	c7 45 f0 89 9e
	84 9a		 mov	 DWORD PTR __k$526006[ebp+12], -1702584695 ; 9a849e89H
  00366	8d 45 e4	 lea	 eax, DWORD PTR __k$526006[ebp]
  00369	c6 45 f4 00	 mov	 BYTE PTR __k$526006[ebp+16], 0
  0036d	8b cb		 mov	 ecx, ebx
$LL852@LoadProper:
  0036f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00375	03 c3		 add	 eax, ebx
  00377	49		 dec	 ecx
  00378	75 f5		 jne	 SHORT $LL852@LoadProper
  0037a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00380	51		 push	 ecx
  00381	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00387	8d 45 e4	 lea	 eax, DWORD PTR __k$526006[ebp]
  0038a	50		 push	 eax
  0038b	ff d7		 call	 edi
  0038d	88 86 d0 09 00
	00		 mov	 BYTE PTR [esi+2512], al

; 57   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  00393	c7 45 e4 89 85
	98 8b		 mov	 DWORD PTR __k$526037[ebp], -1952938615 ; 8b988589H
  0039a	c7 45 e8 8f 80
	8e b5		 mov	 DWORD PTR __k$526037[ebp+4], -1248952177 ; b58e808fH
  003a1	c7 45 ec 89 83
	9c 84		 mov	 DWORD PTR __k$526037[ebp+8], -2070117495 ; 849c8389H
  003a8	c7 45 f0 b2 9f
	9f 8b		 mov	 DWORD PTR __k$526037[ebp+12], -1952473166 ; 8b9f9fb2H
  003af	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$526037[ebp+16], 35225 ; 00008999H
  003b5	8d 45 e4	 lea	 eax, DWORD PTR __k$526037[ebp]
  003b8	c6 45 f6 00	 mov	 BYTE PTR __k$526037[ebp+18], 0
  003bc	8b cb		 mov	 ecx, ebx
$LL958@LoadProper:
  003be	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003c4	03 c3		 add	 eax, ebx
  003c6	49		 dec	 ecx
  003c7	75 f5		 jne	 SHORT $LL958@LoadProper
  003c9	6a 10		 push	 16			; 00000010H
  003cb	58		 pop	 eax
  003cc	5b		 pop	 ebx
$LL955@LoadProper:
  003cd	8b c8		 mov	 ecx, eax
  003cf	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003d5	79 05		 jns	 SHORT $LN999@LoadProper
  003d7	49		 dec	 ecx
  003d8	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003db	41		 inc	 ecx
$LN999@LoadProper:
  003dc	b2 ed		 mov	 dl, -19			; ffffffedH
  003de	2a d1		 sub	 dl, cl
  003e0	30 54 05 e4	 xor	 BYTE PTR __k$526037[ebp+eax], dl
  003e4	40		 inc	 eax
  003e5	83 f8 12	 cmp	 eax, 18			; 00000012H
  003e8	7c e3		 jl	 SHORT $LL955@LoadProper
  003ea	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  003f0	6a 00		 push	 0
  003f2	8d 45 e4	 lea	 eax, DWORD PTR __k$526037[ebp]
  003f5	50		 push	 eax
  003f6	ff d7		 call	 edi

; 58   : }

  003f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fb	5f		 pop	 edi
  003fc	88 86 d1 09 00
	00		 mov	 BYTE PTR [esi+2513], al
  00402	33 cd		 xor	 ecx, ebp
  00404	5e		 pop	 esi
  00405	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0040a	c9		 leave
  0040b	c2 04 00	 ret	 4
?LoadProperty@ioKingScaleBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioKingScaleBuff::LoadProperty
_TEXT	ENDS
END
