; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioPlayEntityHelp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
EXTRN	__fltused:DWORD
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	_acosf
EXTRN	__CIacos:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIacos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
PUBLIC	?acos@@YAMM@Z					; acos
; Function compile flags: /Ogsp
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 502  :         {return (acosf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIacos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 328  :     x += v.x;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00010	0f 5a c0	 cvtps2pd xmm0, xmm0
  00013	0f 5a c9	 cvtps2pd xmm1, xmm1
  00016	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 329  :     y += v.y;

  0001a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0001f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00032	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 330  :     z += v.z;

  00036	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0003b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00044	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00049	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00053	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00057	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 331  :     return *this;
; 332  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00012	0f 5a c9	 cvtps2pd xmm1, xmm1
  00015	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00019	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0001e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00022	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00043	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00048	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00052	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00056	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 394  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC		; D3DXVec3Dot, COMDAT

; 1736 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1737 : #ifdef D3DX_DEBUG
; 1738 :     if(!pV1 || !pV2)
; 1739 :         return 0.0f;
; 1740 : #endif
; 1741 : 
; 1742 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00009	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0000f	d9 00		 fld	 DWORD PTR [eax]
  00011	d8 09		 fmul	 DWORD PTR [ecx]
  00013	de c1		 faddp	 ST(1), ST(0)
  00015	d9 40 08	 fld	 DWORD PTR [eax+8]
  00018	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0001b	de c1		 faddp	 ST(1), ST(0)
  0001d	d9 5d 08	 fstp	 DWORD PTR tv188[ebp]
  00020	d9 45 08	 fld	 DWORD PTR tv188[ebp]

; 1743 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00006	56		 push	 esi
  00007	57		 push	 edi

; 1748 :     D3DXVECTOR3 v;
; 1749 : 
; 1750 : #ifdef D3DX_DEBUG
; 1751 :     if(!pOut || !pV1 || !pV2)
; 1752 :         return NULL;
; 1753 : #endif
; 1754 : 
; 1755 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00008	8b 45 0c	 mov	 eax, DWORD PTR _pV1$[ebp]
  0000b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00010	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00018	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0001d	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00022	0f 5a e8	 cvtps2pd xmm5, xmm0
  00025	0f 5a e1	 cvtps2pd xmm4, xmm1
  00028	0f 5a f2	 cvtps2pd xmm6, xmm2
  0002b	f2 0f 59 e5	 mulsd	 xmm4, xmm5

; 1756 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0002f	0f 5a d2	 cvtps2pd xmm2, xmm2
  00032	0f 5a c9	 cvtps2pd xmm1, xmm1
  00035	0f 5a eb	 cvtps2pd xmm5, xmm3
  00038	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  0003c	f2 0f 5c e5	 subsd	 xmm4, xmm5
  00040	f3 0f 10 28	 movss	 xmm5, DWORD PTR [eax]

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00044	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00047	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  0004b	f3 0f 11 65 f4	 movss	 DWORD PTR _v$[ebp], xmm4
  00050	f3 0f 10 21	 movss	 xmm4, DWORD PTR [ecx]
  00054	0f 5a f4	 cvtps2pd xmm6, xmm4
  00057	f2 0f 59 f2	 mulsd	 xmm6, xmm2
  0005b	0f 5a d5	 cvtps2pd xmm2, xmm5
  0005e	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00062	f2 0f 5c f2	 subsd	 xmm6, xmm2
  00066	66 0f 5a ce	 cvtpd2ps xmm1, xmm6
  0006a	f3 0f 11 4d f8	 movss	 DWORD PTR _v$[ebp+4], xmm1
  0006f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00072	0f 5a d3	 cvtps2pd xmm2, xmm3
  00075	0f 5a cd	 cvtps2pd xmm1, xmm5
  00078	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0007c	8d 75 f4	 lea	 esi, DWORD PTR _v$[ebp]
  0007f	8b f8		 mov	 edi, eax
  00081	0f 5a d4	 cvtps2pd xmm2, xmm4
  00084	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00088	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0008c	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00090	f3 0f 11 45 fc	 movss	 DWORD PTR _v$[ebp+8], xmm0
  00095	a5		 movsd
  00096	a5		 movsd
  00097	a5		 movsd
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi

; 1760 :     return pOut;
; 1761 : }

  0009a	c9		 leave
  0009b	c3		 ret	 0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bf800000
PUBLIC	__real@3f800000
PUBLIC	_qtRot$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CheckOrientation@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z ; ioPlayEntityHelp::CheckOrientation
EXTRN	_D3DXQuaternionRotationYawPitchRoll@16:PROC
EXTRN	__imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC
EXTRN	__imp_?UNIT_X@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?UNIT_Z@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	__imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@bff0000000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentityhelp.cpp
CONST	ENDS
;	COMDAT ?CheckOrientation@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_fCheckPitch$ = -60					; size = 4
_qtRot$GSCopy$ = -56					; size = 4
tv771 = -52						; size = 4
_fCheckYaw$ = -52					; size = 4
tv803 = -48						; size = 4
_fPitchAngle$505092 = -48				; size = 4
_fPitch$ = -48						; size = 4
tv796 = -44						; size = 4
tv782 = -44						; size = 4
_fYawAngle$505088 = -44					; size = 4
_fYaw$ = -44						; size = 4
_vSide$ = -40						; size = 12
_v$505230 = -28						; size = 12
_v$505219 = -28						; size = 12
$T505082 = -28						; size = 12
_vFront$ = -16						; size = 12
_vUp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_vDir$ = 8						; size = 4
_qtRot$ = 12						; size = 4
?CheckOrientation@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z PROC ; ioPlayEntityHelp::CheckOrientation, COMDAT

; 7    : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _vDir$[ebp]

; 8    : 		D3DXVECTOR3 vUp = ioMath::UNIT_Y;
; 9    : 		D3DXVECTOR3 vSide, vFront;
; 10   : 
; 11   : 		D3DXVec3Cross( &vSide, &vUp, &vDir );

  00014	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  00019	f3 0f 10 4b 04	 movss	 xmm1, DWORD PTR [ebx+4]
  0001e	56		 push	 esi
  0001f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  00025	57		 push	 edi
  00026	8d 7d f0	 lea	 edi, DWORD PTR _vUp$[ebp]
  00029	a5		 movsd
  0002a	a5		 movsd
  0002b	a5		 movsd
  0002c	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _vUp$[ebp+4]
  00031	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _vUp$[ebp+8]
  00036	0f 5a dc	 cvtps2pd xmm3, xmm4
  00039	0f 5a d0	 cvtps2pd xmm2, xmm0
  0003c	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00040	0f 5a f5	 cvtps2pd xmm6, xmm5
  00043	0f 5a fd	 cvtps2pd xmm7, xmm5
  00046	0f 5a c0	 cvtps2pd xmm0, xmm0
  00049	0f 5a d9	 cvtps2pd xmm3, xmm1
  0004c	f2 0f 59 de	 mulsd	 xmm3, xmm6
  00050	f2 0f 5c d3	 subsd	 xmm2, xmm3
  00054	f3 0f 10 1b	 movss	 xmm3, DWORD PTR [ebx]
  00058	0f 5a f3	 cvtps2pd xmm6, xmm3
  0005b	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0005f	f3 0f 10 7d f0	 movss	 xmm7, DWORD PTR _vUp$[ebp]
  00064	0f 5a ff	 cvtps2pd xmm7, xmm7
  00067	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  0006b	f2 0f 5c f0	 subsd	 xmm6, xmm0
  0006f	0f 57 c0	 xorps	 xmm0, xmm0
  00072	66 0f 5a c6	 cvtpd2ps xmm0, xmm6
  00076	f3 0f 10 75 f0	 movss	 xmm6, DWORD PTR _vUp$[ebp]
  0007b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0007e	0f 5a f6	 cvtps2pd xmm6, xmm6
  00081	f2 0f 59 ce	 mulsd	 xmm1, xmm6
  00085	0f 5a db	 cvtps2pd xmm3, xmm3
  00088	f3 0f 11 45 e8	 movss	 DWORD PTR _v$505219[ebp+4], xmm0
  0008d	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00091	f3 0f 11 55 e4	 movss	 DWORD PTR _v$505219[ebp], xmm2
  00096	0f 5a f4	 cvtps2pd xmm6, xmm4
  00099	f2 0f 59 de	 mulsd	 xmm3, xmm6
  0009d	f2 0f 5c cb	 subsd	 xmm1, xmm3
  000a1	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000a5	f3 0f 11 4d ec	 movss	 DWORD PTR _v$505219[ebp+8], xmm1
  000aa	8d 75 e4	 lea	 esi, DWORD PTR _v$505219[ebp]

; 12   : 		D3DXVec3Cross( &vFront, &vSide, &vUp );

  000ad	0f 5a f0	 cvtps2pd xmm6, xmm0
  000b0	0f 5a dd	 cvtps2pd xmm3, xmm5
  000b3	8d 7d d8	 lea	 edi, DWORD PTR _vSide$[ebp]
  000b6	a5		 movsd
  000b7	f2 0f 59 de	 mulsd	 xmm3, xmm6
  000bb	a5		 movsd
  000bc	8b 45 0c	 mov	 eax, DWORD PTR _qtRot$[ebp]
  000bf	0f 57 ff	 xorps	 xmm7, xmm7
  000c2	f3 0f 5a f9	 cvtss2sd xmm7, xmm1
  000c6	0f 5a f4	 cvtps2pd xmm6, xmm4
  000c9	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  000cd	f2 0f 5c de	 subsd	 xmm3, xmm6
  000d1	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  000d5	a5		 movsd
  000d6	f3 0f 11 5d e4	 movss	 DWORD PTR _v$505230[ebp], xmm3
  000db	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _vUp$[ebp]
  000e0	0f 5a db	 cvtps2pd xmm3, xmm3
  000e3	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000e7	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  000eb	0f 5a c0	 cvtps2pd xmm0, xmm0

; 22   : 		{
; 23   : 			ioMath::CalcDirectionQuaternion( qtRot, -vDir );

  000ee	89 45 c8	 mov	 DWORD PTR _qtRot$GSCopy$[ebp], eax
  000f1	0f 5a dd	 cvtps2pd xmm3, xmm5
  000f4	0f 57 ed	 xorps	 xmm5, xmm5
  000f7	f3 0f 5a ea	 cvtss2sd xmm5, xmm2
  000fb	f2 0f 59 dd	 mulsd	 xmm3, xmm5
  000ff	f2 0f 5c cb	 subsd	 xmm1, xmm3
  00103	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00107	f3 0f 11 4d e8	 movss	 DWORD PTR _v$505230[ebp+4], xmm1
  0010c	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00110	0f 5a cc	 cvtps2pd xmm1, xmm4
  00113	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00117	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _vUp$[ebp]
  0011c	0f 5a d2	 cvtps2pd xmm2, xmm2
  0011f	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00123	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00127	0f 57 c0	 xorps	 xmm0, xmm0

; 12   : 		D3DXVec3Cross( &vFront, &vSide, &vUp );

  0012a	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0012e	f3 0f 11 45 ec	 movss	 DWORD PTR _v$505230[ebp+8], xmm0
  00133	8d 75 e4	 lea	 esi, DWORD PTR _v$505230[ebp]
  00136	8d 7d f0	 lea	 edi, DWORD PTR _vFront$[ebp]
  00139	a5		 movsd

; 13   : 		D3DXVec3Normalize( &vSide, &vSide );

  0013a	8d 45 d8	 lea	 eax, DWORD PTR _vSide$[ebp]
  0013d	a5		 movsd
  0013e	50		 push	 eax
  0013f	50		 push	 eax
  00140	a5		 movsd
  00141	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 14   : 		D3DXVec3Normalize( &vFront, &vFront );

  00146	8d 45 f0	 lea	 eax, DWORD PTR _vFront$[ebp]
  00149	50		 push	 eax
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 15   : 
; 16   : 		float fYaw = D3DXVec3Dot( &vFront, &-ioMath::UNIT_Z );

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_Z@ioMath@@2UD3DXVECTOR3@@A
  00155	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  00162	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00166	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _vFront$[ebp+4]
  0016b	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 17   : 		float fPitch = D3DXVec3Dot( &vFront, &vDir );

  00170	f3 0f 10 6d f4	 movss	 xmm5, DWORD PTR _vFront$[ebp+4]
  00175	f3 0f 10 75 f0	 movss	 xmm6, DWORD PTR _vFront$[ebp]
  0017a	0f 57 d0	 xorps	 xmm2, xmm0
  0017d	0f 5a e4	 cvtps2pd xmm4, xmm4
  00180	0f 5a d2	 cvtps2pd xmm2, xmm2
  00183	f2 0f 59 e2	 mulsd	 xmm4, xmm2
  00187	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _vFront$[ebp]
  0018c	0f 57 c8	 xorps	 xmm1, xmm0
  0018f	0f 5a c9	 cvtps2pd xmm1, xmm1

; 18   : 		float fCheckYaw = D3DXVec3Dot( &vDir, &ioMath::UNIT_X );

  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_X@ioMath@@2UD3DXVECTOR3@@A
  00197	0f 5a d2	 cvtps2pd xmm2, xmm2
  0019a	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  0019e	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vFront$[ebp+8]
  001a3	f3 0f 10 38	 movss	 xmm7, DWORD PTR [eax]
  001a7	f2 0f 58 e2	 addsd	 xmm4, xmm2
  001ab	0f 5a ed	 cvtps2pd xmm5, xmm5
  001ae	0f 5a c9	 cvtps2pd xmm1, xmm1
  001b1	0f 57 d8	 xorps	 xmm3, xmm0
  001b4	0f 5a d3	 cvtps2pd xmm2, xmm3
  001b7	f3 0f 10 5b 08	 movss	 xmm3, DWORD PTR [ebx+8]
  001bc	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001c0	f3 0f 10 53 04	 movss	 xmm2, DWORD PTR [ebx+4]
  001c5	f2 0f 58 e1	 addsd	 xmm4, xmm1
  001c9	0f 5a f6	 cvtps2pd xmm6, xmm6
  001cc	0f 57 c9	 xorps	 xmm1, xmm1
  001cf	f2 0f 5a cc	 cvtsd2ss xmm1, xmm4
  001d3	f3 0f 11 4d d4	 movss	 DWORD PTR _fYaw$[ebp], xmm1
  001d8	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  001dc	0f 5a e2	 cvtps2pd xmm4, xmm2
  001df	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  001e3	0f 5a e9	 cvtps2pd xmm5, xmm1
  001e6	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  001ea	f3 0f 10 75 f8	 movss	 xmm6, DWORD PTR _vFront$[ebp+8]
  001ef	f2 0f 58 e5	 addsd	 xmm4, xmm5
  001f3	0f 5a f6	 cvtps2pd xmm6, xmm6
  001f6	0f 5a ff	 cvtps2pd xmm7, xmm7
  001f9	0f 5a eb	 cvtps2pd xmm5, xmm3
  001fc	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  00200	f2 0f 58 e5	 addsd	 xmm4, xmm5
  00204	f3 0f 10 68 04	 movss	 xmm5, DWORD PTR [eax+4]
  00209	0f 5a f2	 cvtps2pd xmm6, xmm2
  0020c	0f 5a ed	 cvtps2pd xmm5, xmm5
  0020f	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  00213	66 0f 5a e4	 cvtpd2ps xmm4, xmm4

; 19   : 		float fCheckPitch = D3DXVec3Dot( &vDir, &ioMath::UNIT_Y );

  00217	0f 5a d2	 cvtps2pd xmm2, xmm2
  0021a	f3 0f 11 65 d0	 movss	 DWORD PTR _fPitch$[ebp], xmm4
  0021f	0f 5a f1	 cvtps2pd xmm6, xmm1
  00222	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00226	f2 0f 58 ee	 addsd	 xmm5, xmm6
  0022a	f3 0f 10 70 08	 movss	 xmm6, DWORD PTR [eax+8]
  0022f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  00234	0f 5a f6	 cvtps2pd xmm6, xmm6
  00237	0f 5a fb	 cvtps2pd xmm7, xmm3
  0023a	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0023e	f2 0f 58 ee	 addsd	 xmm5, xmm6
  00242	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  00246	f3 0f 11 6d cc	 movss	 DWORD PTR _fCheckYaw$[ebp], xmm5
  0024b	f3 0f 10 68 04	 movss	 xmm5, DWORD PTR [eax+4]
  00250	0f 5a ed	 cvtps2pd xmm5, xmm5
  00253	f2 0f 59 ea	 mulsd	 xmm5, xmm2
  00257	f3 0f 10 30	 movss	 xmm6, DWORD PTR [eax]
  0025b	0f 5a d1	 cvtps2pd xmm2, xmm1
  0025e	0f 5a f6	 cvtps2pd xmm6, xmm6
  00261	f2 0f 59 d6	 mulsd	 xmm2, xmm6
  00265	f2 0f 58 ea	 addsd	 xmm5, xmm2
  00269	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0026e	0f 5a d2	 cvtps2pd xmm2, xmm2
  00271	0f 5a db	 cvtps2pd xmm3, xmm3
  00274	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00278	f2 0f 58 ea	 addsd	 xmm5, xmm2
  0027c	0f 57 d2	 xorps	 xmm2, xmm2
  0027f	66 0f 5a d5	 cvtpd2ps xmm2, xmm5
  00283	f3 0f 11 55 c4	 movss	 DWORD PTR _fCheckPitch$[ebp], xmm2

; 20   : 
; 21   : 		if( fPitch >= 1.0f )

  00288	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00290	0f 2f e2	 comiss	 xmm4, xmm2
  00293	72 36		 jb	 SHORT $LN10@CheckOrien

; 22   : 		{
; 23   : 			ioMath::CalcDirectionQuaternion( qtRot, -vDir );

  00295	0f 57 c8	 xorps	 xmm1, xmm0
  00298	f3 0f 11 4d e4	 movss	 DWORD PTR $T505082[ebp], xmm1
  0029d	f3 0f 10 4b 04	 movss	 xmm1, DWORD PTR [ebx+4]
  002a2	0f 57 c8	 xorps	 xmm1, xmm0
  002a5	8d 45 e4	 lea	 eax, DWORD PTR $T505082[ebp]
  002a8	f3 0f 11 4d e8	 movss	 DWORD PTR $T505082[ebp+4], xmm1
  002ad	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR [ebx+8]
  002b2	50		 push	 eax
  002b3	ff 75 c8	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  002b6	0f 57 c8	 xorps	 xmm1, xmm0
  002b9	f3 0f 11 4d ec	 movss	 DWORD PTR $T505082[ebp+8], xmm1
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z
  002c4	59		 pop	 ecx
  002c5	59		 pop	 ecx
  002c6	e9 ec 00 00 00	 jmp	 $LN7@CheckOrien
$LN10@CheckOrien:

; 24   : 		}
; 25   : 		else if( fPitch <= -1.0f )

  002cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002d3	0f 2f c4	 comiss	 xmm0, xmm4
  002d6	72 32		 jb	 SHORT $LN8@CheckOrien

; 26   : 		{
; 27   : 			float fYawAngle = acos(fYaw);
; 28   : 			float fPitchAngle = acos(fPitch);
; 29   : 			D3DXQuaternionRotationYawPitchRoll( &qtRot, fYawAngle, fPitchAngle, 0.0f );

  002d8	0f 57 c0	 xorps	 xmm0, xmm0
  002db	d9 45 d0	 fld	 DWORD PTR _fPitch$[ebp]
  002de	51		 push	 ecx
  002df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e4	e8 00 00 00 00	 call	 __CIacos
  002e9	d9 5d d0	 fstp	 DWORD PTR tv803[ebp]
  002ec	d9 45 d0	 fld	 DWORD PTR tv803[ebp]
  002ef	51		 push	 ecx
  002f0	d9 1c 24	 fstp	 DWORD PTR [esp]
  002f3	d9 45 d4	 fld	 DWORD PTR _fYaw$[ebp]
  002f6	e8 00 00 00 00	 call	 __CIacos
  002fb	d9 5d d4	 fstp	 DWORD PTR tv796[ebp]
  002fe	d9 45 d4	 fld	 DWORD PTR tv796[ebp]
  00301	51		 push	 ecx
  00302	d9 1c 24	 fstp	 DWORD PTR [esp]

; 30   : 		}
; 31   : 		else

  00305	e9 a5 00 00 00	 jmp	 $LN63@CheckOrien
$LN8@CheckOrien:

; 32   : 		{
; 33   : 			float fYawAngle;
; 34   : 			if( fYaw >= 1.0f )

  0030a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fYaw$[ebp]
  0030f	0f 2f c2	 comiss	 xmm0, xmm2
  00312	72 0a		 jb	 SHORT $LN6@CheckOrien

; 35   : 			{
; 36   : 				fYawAngle = 0.0f;

  00314	0f 57 c0	 xorps	 xmm0, xmm0
  00317	f3 0f 11 45 d4	 movss	 DWORD PTR _fYawAngle$505088[ebp], xmm0

; 37   : 			}
; 38   : 			else

  0031c	eb 3c		 jmp	 SHORT $LN4@CheckOrien
$LN6@CheckOrien:

; 39   : 			{
; 40   : 				fYawAngle = acos(fYaw);

  0031e	d9 45 d4	 fld	 DWORD PTR _fYaw$[ebp]
  00321	e8 00 00 00 00	 call	 __CIacos
  00326	d9 5d d4	 fstp	 DWORD PTR tv782[ebp]
  00329	d9 45 d4	 fld	 DWORD PTR tv782[ebp]

; 41   : 				if( fCheckYaw > 0.0f )

  0032c	0f 57 c0	 xorps	 xmm0, xmm0
  0032f	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _fCheckYaw$[ebp]
  00334	d9 5d d4	 fstp	 DWORD PTR _fYawAngle$505088[ebp]
  00337	0f 2f c8	 comiss	 xmm1, xmm0

; 42   : 					fYawAngle *= -1;

  0033a	f3 0f 10 65 d0	 movss	 xmm4, DWORD PTR _fPitch$[ebp]
  0033f	76 19		 jbe	 SHORT $LN4@CheckOrien
  00341	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _fYawAngle$505088[ebp]
  00346	0f 5a c9	 cvtps2pd xmm1, xmm1
  00349	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bff0000000000000
  00351	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00355	f3 0f 11 4d d4	 movss	 DWORD PTR _fYawAngle$505088[ebp], xmm1
$LN4@CheckOrien:

; 43   : 			}
; 44   : 
; 45   : 			float fPitchAngle = acos(fPitch);
; 46   : 			if( fPitch >= 1.0f )

  0035a	0f 2f 25 00 00
	00 00		 comiss	 xmm4, DWORD PTR __real@3f800000
  00361	72 05		 jb	 SHORT $LN3@CheckOrien

; 47   : 			{
; 48   : 				fPitchAngle = 0.0f;

  00363	0f 28 c8	 movaps	 xmm1, xmm0

; 49   : 			}
; 50   : 			else

  00366	eb 2e		 jmp	 SHORT $LN1@CheckOrien
$LN3@CheckOrien:

; 51   : 			{
; 52   : 				fPitchAngle = acos(fPitch);

  00368	d9 45 d0	 fld	 DWORD PTR _fPitch$[ebp]
  0036b	e8 00 00 00 00	 call	 __CIacos
  00370	d9 5d cc	 fstp	 DWORD PTR tv771[ebp]
  00373	d9 45 cc	 fld	 DWORD PTR tv771[ebp]

; 53   : 				if( fCheckPitch < 0.0f )

  00376	0f 57 c0	 xorps	 xmm0, xmm0
  00379	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR _fCheckPitch$[ebp]
  0037d	d9 5d d0	 fstp	 DWORD PTR _fPitchAngle$505092[ebp]

; 54   : 					fPitchAngle *= -1;

  00380	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _fPitchAngle$505092[ebp]
  00385	76 0f		 jbe	 SHORT $LN1@CheckOrien
  00387	0f 5a c9	 cvtps2pd xmm1, xmm1
  0038a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bff0000000000000
  00392	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
$LN1@CheckOrien:

; 55   : 			}
; 56   : 
; 57   : 			D3DXQuaternionRotationYawPitchRoll( &qtRot, fYawAngle, fPitchAngle, 0.0f );

  00396	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00399	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0039f	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fYawAngle$505088[ebp]
  003a4	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
$LN63@CheckOrien:
  003af	ff 75 c8	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  003b2	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16
$LN7@CheckOrien:

; 58   : 		}
; 59   : 	}

  003b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ba	5f		 pop	 edi
  003bb	5e		 pop	 esi
  003bc	33 cd		 xor	 ecx, ebp
  003be	5b		 pop	 ebx
  003bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c4	c9		 leave
  003c5	c3		 ret	 0
?CheckOrientation@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z ENDP ; ioPlayEntityHelp::CheckOrientation
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	_qtRot$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RotateMoveDir@ioPlayEntityHelp@@YAXMMAAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z ; ioPlayEntityHelp::RotateMoveDir
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp_?ArrangeHead@ioMath@@SAMM@Z:PROC
;	COMDAT __real@00000000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentityhelp.cpp
CONST	ENDS
;	COMDAT ?RotateMoveDir@ioPlayEntityHelp@@YAXMMAAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_qtRot$GSCopy$ = -32					; size = 4
$T505113 = -28						; size = 12
_vAxis$505105 = -28					; size = 12
_v$505357 = -16						; size = 12
$T505114 = -16						; size = 12
$T505111 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fAngleH$ = 8						; size = 4
_fAngleV$ = 12						; size = 4
_vDir$ = 16						; size = 4
_qtRot$ = 20						; size = 4
?RotateMoveDir@ioPlayEntityHelp@@YAXMMAAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z PROC ; ioPlayEntityHelp::RotateMoveDir, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 83   : 		}
; 84   : 		ioMath::CalcDirectionQuaternion( qtRot, -vDir );

  00010	8b 45 14	 mov	 eax, DWORD PTR _qtRot$[ebp]
  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fAngleV$[ebp]
  00018	53		 push	 ebx
  00019	8b 5d 10	 mov	 ebx, DWORD PTR _vDir$[ebp]
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	89 45 e0	 mov	 DWORD PTR _qtRot$GSCopy$[ebp], eax
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z
  0002d	d9 5d 0c	 fstp	 DWORD PTR _fAngleV$[ebp]
  00030	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAngleH$[ebp]
  00035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z
  00040	d9 5d 08	 fstp	 DWORD PTR _fAngleH$[ebp]
  00043	d9 ee		 fldz
  00045	59		 pop	 ecx
  00046	d9 45 0c	 fld	 DWORD PTR _fAngleV$[ebp]
  00049	df e9		 fucomip ST(1)
  0004b	dd d8		 fstp	 ST(0)
  0004d	9f		 lahf
  0004e	f6 c4 44	 test	 ah, 68			; 00000044H
  00051	0f 8b b1 00 00
	00		 jnp	 $LN2@RotateMove

; 63   : 		fAngleV = ioMath::ArrangeHead( fAngleV );
; 64   : 		fAngleH = ioMath::ArrangeHead( fAngleH );		
; 65   : 
; 66   : 		D3DXVECTOR3 vAxis;
; 67   : 		D3DXVec3Cross( &vAxis, &vDir, &D3DXVECTOR3( 0.0f, -1.0f, 0.0f ) );
; 68   : 
; 69   : 		//Vertical
; 70   : 		if( fAngleV != 0.0f )
; 71   : 		{
; 72   : 			D3DXVECTOR3 vAxis;
; 73   : 			D3DXVec3Cross( &vAxis, &vDir, &D3DXVECTOR3( 0.0f, -1.0f, 0.0f ) );

  00057	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  0005c	f3 0f 10 5b 08	 movss	 xmm3, DWORD PTR [ebx+8]
  00061	0f 5a c8	 cvtps2pd xmm1, xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0006b	0f 5a e3	 cvtps2pd xmm4, xmm3
  0006e	f2 0f 59 25 00
	00 00 00	 mulsd	 xmm4, QWORD PTR __real@bff0000000000000
  00076	66 0f 28 e9	 movapd	 xmm5, xmm1
  0007a	f2 0f 5c ec	 subsd	 xmm5, xmm4
  0007e	0f 57 e4	 xorps	 xmm4, xmm4
  00081	f2 0f 5a e5	 cvtsd2ss xmm4, xmm5
  00085	f3 0f 11 65 f0	 movss	 DWORD PTR _v$505357[ebp], xmm4
  0008a	f3 0f 10 23	 movss	 xmm4, DWORD PTR [ebx]
  0008e	0f 5a db	 cvtps2pd xmm3, xmm3
  00091	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  00095	0f 5a ec	 cvtps2pd xmm5, xmm4
  00098	f2 0f 59 e8	 mulsd	 xmm5, xmm0
  0009c	f2 0f 5c dd	 subsd	 xmm3, xmm5
  000a0	66 0f 5a c3	 cvtpd2ps xmm0, xmm3
  000a4	f3 0f 11 45 f4	 movss	 DWORD PTR _v$505357[ebp+4], xmm0
  000a9	8d 75 f0	 lea	 esi, DWORD PTR _v$505357[ebp]
  000ac	8d 7d e4	 lea	 edi, DWORD PTR _vAxis$505105[ebp]

; 74   : 			D3DXQuaternionRotationAxis( &qtRot, &vAxis, DEGtoRAD(fAngleV) );

  000af	51		 push	 ecx
  000b0	8d 45 e4	 lea	 eax, DWORD PTR _vAxis$505105[ebp]
  000b3	0f 5a c4	 cvtps2pd xmm0, xmm4
  000b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  000be	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000c2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000c6	f3 0f 11 45 f8	 movss	 DWORD PTR _v$505357[ebp+8], xmm0
  000cb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fAngleV$[ebp]
  000d0	a5		 movsd
  000d1	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  000dc	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e5	a5		 movsd
  000e6	50		 push	 eax
  000e7	ff 75 e0	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  000ea	a5		 movsd
  000eb	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 75   : 			vDir = qtRot * vDir;			

  000f0	53		 push	 ebx
  000f1	ff 75 e0	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  000f4	8d 45 f0	 lea	 eax, DWORD PTR $T505111[ebp]
  000f7	50		 push	 eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000fe	8b f0		 mov	 esi, eax
  00100	8b fb		 mov	 edi, ebx
  00102	a5		 movsd
  00103	a5		 movsd
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	a5		 movsd
$LN2@RotateMove:

; 76   : 		}
; 77   : 
; 78   : 		//Horizon
; 79   : 		if( fAngleH != 0.0f )

  00108	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAngleH$[ebp]
  0010d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00114	9f		 lahf
  00115	f6 c4 44	 test	 ah, 68			; 00000044H
  00118	7b 3b		 jnp	 SHORT $LN1@RotateMove

; 80   : 		{
; 81   : 			D3DXQuaternionRotationAxis( &qtRot, &ioMath::UNIT_Y, DEGtoRAD(fAngleH) );

  0011a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  00125	51		 push	 ecx
  00126	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  00135	ff 75 e0	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  00138	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 82   : 			vDir = qtRot * vDir;

  0013d	53		 push	 ebx
  0013e	ff 75 e0	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  00141	8d 45 e4	 lea	 eax, DWORD PTR $T505113[ebp]
  00144	50		 push	 eax
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0014b	8b f0		 mov	 esi, eax
  0014d	8b fb		 mov	 edi, ebx
  0014f	a5		 movsd
  00150	a5		 movsd
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
  00154	a5		 movsd
$LN1@RotateMove:

; 83   : 		}
; 84   : 		ioMath::CalcDirectionQuaternion( qtRot, -vDir );

  00155	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0015d	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  00161	0f 57 c8	 xorps	 xmm1, xmm0
  00164	f3 0f 11 4d f0	 movss	 DWORD PTR $T505114[ebp], xmm1
  00169	f3 0f 10 4b 04	 movss	 xmm1, DWORD PTR [ebx+4]
  0016e	0f 57 c8	 xorps	 xmm1, xmm0
  00171	8d 45 f0	 lea	 eax, DWORD PTR $T505114[ebp]
  00174	f3 0f 11 4d f4	 movss	 DWORD PTR $T505114[ebp+4], xmm1
  00179	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR [ebx+8]
  0017e	50		 push	 eax
  0017f	ff 75 e0	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  00182	0f 57 c8	 xorps	 xmm1, xmm0
  00185	f3 0f 11 4d f8	 movss	 DWORD PTR $T505114[ebp+8], xmm1
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z
  00190	59		 pop	 ecx
  00191	59		 pop	 ecx

; 85   : 	}

  00192	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00195	5f		 pop	 edi
  00196	5e		 pop	 esi
  00197	33 cd		 xor	 ecx, ebp
  00199	5b		 pop	 ebx
  0019a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019f	c9		 leave
  001a0	c3		 ret	 0
?RotateMoveDir@ioPlayEntityHelp@@YAXMMAAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z ENDP ; ioPlayEntityHelp::RotateMoveDir
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MoveOffset@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@ABUD3DXQUATERNION@@AAU2@@Z ; ioPlayEntityHelp::MoveOffset
; Function compile flags: /Ogsp
;	COMDAT ?MoveOffset@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@ABUD3DXQUATERNION@@AAU2@@Z
_TEXT	SEGMENT
$T505121 = -28						; size = 12
_vDir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_vOffset$ = 8						; size = 4
_qtTargetDir$ = 12					; size = 4
_vOutOffset$ = 16					; size = 4
?MoveOffset@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@ABUD3DXQUATERNION@@AAU2@@Z PROC ; ioPlayEntityHelp::MoveOffset, COMDAT

; 88   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _qtTargetDir$[ebp]

; 89   : 		D3DXVECTOR3 vDir = qtTargetDir * D3DXVECTOR3( 0.0f, 0.0f, -1.0f );

  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	56		 push	 esi
  00017	8b 75 10	 mov	 esi, DWORD PTR _vOutOffset$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _vOffset$[ebp]
  0001e	8d 4d e4	 lea	 ecx, DWORD PTR $T505121[ebp]
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	8d 45 f0	 lea	 eax, DWORD PTR _vDir$[ebp]
  00026	f3 0f 11 45 e4	 movss	 DWORD PTR $T505121[ebp], xmm0
  0002b	f3 0f 11 45 e8	 movss	 DWORD PTR $T505121[ebp+4], xmm0
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00038	50		 push	 eax
  00039	f3 0f 11 45 ec	 movss	 DWORD PTR $T505121[ebp+8], xmm0
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   : 		D3DXVec3Normalize( &vDir, &vDir );

  00047	8d 45 f0	 lea	 eax, DWORD PTR _vDir$[ebp]
  0004a	50		 push	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 91   : 
; 92   : 		D3DXVECTOR3 vSide;
; 93   : 		D3DXVec3Cross( &vSide, &vDir, &ioMath::UNIT_Y );

  00051	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _vDir$[ebp+4]
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  0005b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00060	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00065	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _vDir$[ebp+8]
  0006a	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _vDir$[ebp+8]
  0006f	0f 5a d0	 cvtps2pd xmm2, xmm0
  00072	0f 5a db	 cvtps2pd xmm3, xmm3
  00075	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00079	0f 5a e4	 cvtps2pd xmm4, xmm4
  0007c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0007f	0f 5a ed	 cvtps2pd xmm5, xmm5
  00082	0f 5a d9	 cvtps2pd xmm3, xmm1
  00085	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  00089	f2 0f 5c d3	 subsd	 xmm2, xmm3
  0008d	0f 57 db	 xorps	 xmm3, xmm3
  00090	66 0f 5a da	 cvtpd2ps xmm3, xmm2
  00094	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  00098	0f 5a e2	 cvtps2pd xmm4, xmm2
  0009b	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  0009f	f3 0f 10 6d f0	 movss	 xmm5, DWORD PTR _vDir$[ebp]
  000a4	0f 5a ed	 cvtps2pd xmm5, xmm5
  000a7	f2 0f 59 c5	 mulsd	 xmm0, xmm5
  000ab	f2 0f 5c e0	 subsd	 xmm4, xmm0
  000af	0f 57 ed	 xorps	 xmm5, xmm5
  000b2	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  000b6	0f 5a c1	 cvtps2pd xmm0, xmm1
  000b9	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vDir$[ebp]
  000be	0f 5a c9	 cvtps2pd xmm1, xmm1
  000c1	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000c5	0f 5a ca	 cvtps2pd xmm1, xmm2
  000c8	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vDir$[ebp+4]
  000cd	0f 5a d2	 cvtps2pd xmm2, xmm2
  000d0	f2 0f 59 ca	 mulsd	 xmm1, xmm2

; 94   : 		vOutOffset		+= vDir * vOffset.z;

  000d4	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _vDir$[ebp]
  000d9	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000dd	66 0f 5a e8	 cvtpd2ps xmm5, xmm0
  000e1	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  000e6	0f 5a f0	 cvtps2pd xmm6, xmm0
  000e9	0f 5a c8	 cvtps2pd xmm1, xmm0
  000ec	0f 5a d2	 cvtps2pd xmm2, xmm2
  000ef	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000f3	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vDir$[ebp+4]
  000f8	0f 5a d2	 cvtps2pd xmm2, xmm2
  000fb	f2 0f 59 d6	 mulsd	 xmm2, xmm6
  000ff	f3 0f 10 75 f8	 movss	 xmm6, DWORD PTR _vDir$[ebp+8]
  00104	0f 5a c0	 cvtps2pd xmm0, xmm0
  00107	0f 5a f6	 cvtps2pd xmm6, xmm6
  0010a	f2 0f 59 f0	 mulsd	 xmm6, xmm0
  0010e	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00112	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00116	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0011a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0011d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00121	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00126	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0012a	f2 0f 5a d2	 cvtsd2ss xmm2, xmm2
  0012e	f2 0f 5a f6	 cvtsd2ss xmm6, xmm6
  00132	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00136	0f 5a c9	 cvtps2pd xmm1, xmm1
  00139	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  0013d	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00141	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00146	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0014a	f3 0f 11 4e 04	 movss	 DWORD PTR [esi+4], xmm1
  0014f	f3 0f 5a f6	 cvtss2sd xmm6, xmm6

; 95   : 		vOutOffset.y	+= vOffset.y;
; 96   : 		vOutOffset		+= vSide * vOffset.x;
; 97   : 	}

  00153	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00156	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0015a	0f 5a d2	 cvtps2pd xmm2, xmm2
  0015d	f2 0f 58 d6	 addsd	 xmm2, xmm6
  00161	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00165	f3 0f 11 56 08	 movss	 DWORD PTR [esi+8], xmm2
  0016a	f3 0f 10 77 04	 movss	 xmm6, DWORD PTR [edi+4]
  0016f	0f 5a f6	 cvtps2pd xmm6, xmm6
  00172	f2 0f 58 f1	 addsd	 xmm6, xmm1
  00176	0f 57 c9	 xorps	 xmm1, xmm1
  00179	66 0f 5a ce	 cvtpd2ps xmm1, xmm6
  0017d	f3 0f 11 4e 04	 movss	 DWORD PTR [esi+4], xmm1
  00182	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00186	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0018a	0f 5a f1	 cvtps2pd xmm6, xmm1
  0018d	0f 5a db	 cvtps2pd xmm3, xmm3
  00190	f2 0f 59 de	 mulsd	 xmm3, xmm6
  00194	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  00198	f3 0f 5a db	 cvtss2sd xmm3, xmm3
  0019c	f2 0f 58 c3	 addsd	 xmm0, xmm3
  001a0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001a4	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001a8	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  001ad	0f 5a f1	 cvtps2pd xmm6, xmm1
  001b0	0f 5a c0	 cvtps2pd xmm0, xmm0
  001b3	f3 0f 5a e4	 cvtss2sd xmm4, xmm4
  001b7	f2 0f 59 e6	 mulsd	 xmm4, xmm6
  001bb	0f 5a c9	 cvtps2pd xmm1, xmm1
  001be	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  001c2	0f 57 db	 xorps	 xmm3, xmm3
  001c5	f3 0f 5a dc	 cvtss2sd xmm3, xmm4
  001c9	f2 0f 58 c3	 addsd	 xmm0, xmm3
  001cd	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001d1	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001d6	0f 5a ed	 cvtps2pd xmm5, xmm5
  001d9	f2 0f 59 e9	 mulsd	 xmm5, xmm1
  001dd	0f 57 c9	 xorps	 xmm1, xmm1
  001e0	0f 57 c0	 xorps	 xmm0, xmm0
  001e3	66 0f 5a cd	 cvtpd2ps xmm1, xmm5
  001e7	f3 0f 5a c2	 cvtss2sd xmm0, xmm2
  001eb	0f 5a c9	 cvtps2pd xmm1, xmm1
  001ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001f6	5f		 pop	 edi
  001f7	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  001fc	33 cd		 xor	 ecx, ebp
  001fe	5e		 pop	 esi
  001ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00204	c9		 leave
  00205	c3		 ret	 0
?MoveOffset@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@ABUD3DXQUATERNION@@AAU2@@Z ENDP ; ioPlayEntityHelp::MoveOffset
_TEXT	ENDS
END
