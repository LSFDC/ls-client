; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ioPullDownItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0PullDownInnerImage@@QAE@XZ			; PullDownInnerImage::PullDownInnerImage
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitemfactory.h
;	COMDAT ??0PullDownInnerImage@@QAE@XZ
_TEXT	SEGMENT
??0PullDownInnerImage@@QAE@XZ PROC			; PullDownInnerImage::PullDownInnerImage, COMDAT
; _this$ = ecx

; 35   : 	PullDownInnerImage()

  00000	8b c1		 mov	 eax, ecx

; 36   : 	{
; 37   : 		m_pImage				= NULL;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 38   : 		m_dwColor				= 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 39   : 		m_dwOverColor			= 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 40   : 		m_bManagedImageByItem	= false;

  0000c	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 41   : 		m_iXPos					= 0;

  0000f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 42   : 		m_iYPos					= 0;

  00012	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 43   : 		m_eRenderType			= UI_RENDER_NORMAL;

  00015	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 44   : 	}

  00018	c3		 ret	 0
??0PullDownInnerImage@@QAE@XZ ENDP			; PullDownInnerImage::PullDownInnerImage
_TEXT	ENDS
PUBLIC	__real@4034000000000000
PUBLIC	?GetFontTextPixel@ioPullDownItemFactory@@QAEMM@Z ; ioPullDownItemFactory::GetFontTextPixel
EXTRN	__fltused:DWORD
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetFontTextPixel@ioPullDownItemFactory@@QAEMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_fScale$ = 8						; size = 4
?GetFontTextPixel@ioPullDownItemFactory@@QAEMM@Z PROC	; ioPullDownItemFactory::GetFontTextPixel, COMDAT
; _this$ = ecx

; 62   : 	__forceinline float GetFontTextPixel( float fScale ){ return 20.0f * fScale; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _fScale$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4034000000000000
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetFontTextPixel@ioPullDownItemFactory@@QAEMM@Z ENDP	; ioPullDownItemFactory::GetFontTextPixel
_TEXT	ENDS
PUBLIC	?IsEnableIamgeRender@ioPullDownItem@@QAE_NXZ	; ioPullDownItem::IsEnableIamgeRender
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.h
;	COMDAT ?IsEnableIamgeRender@ioPullDownItem@@QAE_NXZ
_TEXT	SEGMENT
?IsEnableIamgeRender@ioPullDownItem@@QAE_NXZ PROC	; ioPullDownItem::IsEnableIamgeRender, COMDAT
; _this$ = ecx

; 43   : 	__forceinline bool IsEnableIamgeRender(){ return m_bImageRender; }

  00000	8a 41 44	 mov	 al, BYTE PTR [ecx+68]
  00003	c3		 ret	 0
?IsEnableIamgeRender@ioPullDownItem@@QAE_NXZ ENDP	; ioPullDownItem::IsEnableIamgeRender
_TEXT	ENDS
PUBLIC	?SetBlank@ioPullDownItem@@QAEXHH@Z		; ioPullDownItem::SetBlank
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.cpp
;	COMDAT ?SetBlank@ioPullDownItem@@QAEXHH@Z
_TEXT	SEGMENT
_iBlankWidth$ = 8					; size = 4
_iBlankHeight$ = 12					; size = 4
?SetBlank@ioPullDownItem@@QAEXHH@Z PROC			; ioPullDownItem::SetBlank, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 	m_iBlankWidth	= iBlankWidth;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iBlankWidth$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 45   : 	m_iBlankHeight	= iBlankHeight;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _iBlankHeight$[ebp]
  0000c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 46   : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?SetBlank@ioPullDownItem@@QAEXHH@Z ENDP			; ioPullDownItem::SetBlank
_TEXT	ENDS
PUBLIC	?ReSize@ioPullDownItem@@QAEXXZ			; ioPullDownItem::ReSize
EXTRN	__imp_?SetVertFormatting@ioUIRenderImage@@QAEXW4VertFormatting@1@@Z:PROC
EXTRN	__imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ReSize@ioPullDownItem@@QAEXXZ
_TEXT	SEGMENT
?ReSize@ioPullDownItem@@QAEXXZ PROC			; ioPullDownItem::ReSize, COMDAT
; _this$ = ecx

; 49   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 50   : 	if( m_pOverLine )

  00004	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00007	6a 03		 push	 3
  00009	5f		 pop	 edi
  0000a	85 c9		 test	 ecx, ecx
  0000c	74 27		 je	 SHORT $LN3@ReSize

; 51   : 	{
; 52   : 		m_pOverLine->SetHorzFormatting( ioUIRenderImage::HF_STRETCH );

  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z

; 53   : 		m_pOverLine->SetVertFormatting( ioUIRenderImage::VF_STRETCH );

  00015	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetVertFormatting@ioUIRenderImage@@QAEXW4VertFormatting@1@@Z

; 54   : 		m_pOverLine->SetSize( m_SelectRect.right - m_SelectRect.left, m_SelectRect.bottom - m_SelectRect.top );

  0001f	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00022	2b 56 1c	 sub	 edx, DWORD PTR [esi+28]
  00025	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	52		 push	 edx
  0002b	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0002e	2b 56 18	 sub	 edx, DWORD PTR [esi+24]
  00031	52		 push	 edx
  00032	ff 50 10	 call	 DWORD PTR [eax+16]
$LN3@ReSize:

; 55   : 	}
; 56   : 
; 57   : 	if( m_pDarkLine )

  00035	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00038	85 c9		 test	 ecx, ecx
  0003a	74 27		 je	 SHORT $LN2@ReSize

; 58   : 	{
; 59   : 		m_pDarkLine->SetHorzFormatting( ioUIRenderImage::HF_STRETCH );

  0003c	57		 push	 edi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z

; 60   : 		m_pDarkLine->SetVertFormatting( ioUIRenderImage::VF_STRETCH );

  00043	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00046	57		 push	 edi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetVertFormatting@ioUIRenderImage@@QAEXW4VertFormatting@1@@Z

; 61   : 		m_pDarkLine->SetSize( m_SelectRect.right - m_SelectRect.left, m_SelectRect.bottom - m_SelectRect.top );

  0004d	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00050	2b 56 1c	 sub	 edx, DWORD PTR [esi+28]
  00053	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00056	8b 01		 mov	 eax, DWORD PTR [ecx]
  00058	52		 push	 edx
  00059	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005c	2b 56 18	 sub	 edx, DWORD PTR [esi+24]
  0005f	52		 push	 edx
  00060	ff 50 10	 call	 DWORD PTR [eax+16]
$LN2@ReSize:

; 62   : 	}
; 63   : 
; 64   : 	if( m_pLightLine )

  00063	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00066	85 c9		 test	 ecx, ecx
  00068	74 27		 je	 SHORT $LN1@ReSize

; 65   : 	{
; 66   : 		m_pLightLine->SetHorzFormatting( ioUIRenderImage::HF_STRETCH );

  0006a	57		 push	 edi
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetHorzFormatting@ioUIRenderImage@@QAEXW4HorzFormatting@1@@Z

; 67   : 		m_pLightLine->SetVertFormatting( ioUIRenderImage::VF_STRETCH );

  00071	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00074	57		 push	 edi
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetVertFormatting@ioUIRenderImage@@QAEXW4VertFormatting@1@@Z

; 68   : 		m_pLightLine->SetSize( m_SelectRect.right - m_SelectRect.left, m_SelectRect.bottom - m_SelectRect.top );

  0007b	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0007e	2b 56 1c	 sub	 edx, DWORD PTR [esi+28]
  00081	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00084	8b 01		 mov	 eax, DWORD PTR [ecx]
  00086	52		 push	 edx
  00087	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0008a	2b 56 18	 sub	 edx, DWORD PTR [esi+24]
  0008d	52		 push	 edx
  0008e	ff 50 10	 call	 DWORD PTR [eax+16]
$LN1@ReSize:

; 69   : 	}	
; 70   : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	c3		 ret	 0
?ReSize@ioPullDownItem@@QAEXXZ ENDP			; ioPullDownItem::ReSize
_TEXT	ENDS
PUBLIC	?MakeImageRect@ioPullDownItem@@QAE?AUtagRECT@@AAUPullDownInnerImage@@@Z ; ioPullDownItem::MakeImageRect
EXTRN	__imp_?GetHeight@ioUIRenderElement@@QBEHXZ:PROC
EXTRN	__imp_?GetWidth@ioUIRenderElement@@QBEHXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?MakeImageRect@ioPullDownItem@@QAE?AUtagRECT@@AAUPullDownInnerImage@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_rkImage$ = 12						; size = 4
?MakeImageRect@ioPullDownItem@@QAE?AUtagRECT@@AAUPullDownInnerImage@@@Z PROC ; ioPullDownItem::MakeImageRect, COMDAT
; _this$ = ecx

; 100  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 101  : 	RECT rect;
; 102  : 	if( rkImage.m_pImage )

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _rkImage$[ebp]
  0000b	8b c1		 mov	 eax, ecx
  0000d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 2a		 je	 SHORT $LN1@MakeImageR

; 103  : 	{
; 104  : 		rect.left   = m_SelectRect.left + rkImage.m_iXPos;

  00013	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00016	03 50 18	 add	 edx, DWORD PTR [eax+24]
  00019	89 16		 mov	 DWORD PTR [esi], edx

; 105  : 		rect.top    = m_SelectRect.top  + rkImage.m_iYPos;

  0001b	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0001e	03 50 1c	 add	 edx, DWORD PTR [eax+28]
  00021	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 106  : 		rect.right  = rect.left + rkImage.m_pImage->GetWidth();

  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  0002a	03 06		 add	 eax, DWORD PTR [esi]

; 107  : 		rect.bottom = rect.top  + rkImage.m_pImage->GetHeight();

  0002c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0002e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioUIRenderElement@@QBEHXZ
  00037	03 46 04	 add	 eax, DWORD PTR [esi+4]
  0003a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN1@MakeImageR:

; 108  : 	}
; 109  : 
; 110  : 	return rect;

  0003d	5f		 pop	 edi
  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi

; 111  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?MakeImageRect@ioPullDownItem@@QAE?AUtagRECT@@AAUPullDownInnerImage@@@Z ENDP ; ioPullDownItem::MakeImageRect
_TEXT	ENDS
PUBLIC	?OnSelectOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z ; ioPullDownItem::OnSelectOver
EXTRN	__imp__PtInRect@12:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnSelectOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z
_TEXT	SEGMENT
_mousepos$ = 8						; size = 4
?OnSelectOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z PROC	; ioPullDownItem::OnSelectOver, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	if( ::PtInRect( &m_SelectRect, mousepos ) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _mousepos$[ebp]
  00006	56		 push	 esi
  00007	ff 70 04	 push	 DWORD PTR [eax+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 30		 push	 DWORD PTR [eax]
  0000e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12
  00018	85 c0		 test	 eax, eax
  0001a	74 05		 je	 SHORT $LN1@OnSelectOv

; 116  : 		return m_iIndex;

  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	eb 03		 jmp	 SHORT $LN2@OnSelectOv
$LN1@OnSelectOv:

; 117  : 
; 118  : 	return PullDownEvent::NONE_SELECT;

  00021	83 c8 ff	 or	 eax, -1
$LN2@OnSelectOv:
  00024	5e		 pop	 esi

; 119  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?OnSelectOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z ENDP	; ioPullDownItem::OnSelectOver
_TEXT	ENDS
PUBLIC	?OnRender@ioPullDownItem@@UAEXHH@Z		; ioPullDownItem::OnRender
; Function compile flags: /Ogsp
;	COMDAT ?OnRender@ioPullDownItem@@UAEXHH@Z
_TEXT	SEGMENT
_iOverIdx$ = 8						; size = 4
_iOverImageIdx$ = 12					; size = 4
?OnRender@ioPullDownItem@@UAEXHH@Z PROC			; ioPullDownItem::OnRender, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 142  : 	if( m_iIndex == iOverIdx && PullDownEvent::NONE_SELECT == iOverImageIdx )

  00005	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00008	56		 push	 esi
  00009	3b 4d 08	 cmp	 ecx, DWORD PTR _iOverIdx$[ebp]
  0000c	75 12		 jne	 SHORT $LN7@OnRender
  0000e	83 7d 0c ff	 cmp	 DWORD PTR _iOverImageIdx$[ebp], -1
  00012	75 0c		 jne	 SHORT $LN7@OnRender

; 143  : 	{
; 144  : 		if( m_pOverLine )

  00014	33 d2		 xor	 edx, edx
  00016	39 50 28	 cmp	 DWORD PTR [eax+40], edx
  00019	74 4f		 je	 SHORT $LN1@OnRender

; 145  : 			m_pOverLine->Render( m_SelectRect.left, m_SelectRect.top );

  0001b	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]

; 146  : 	}
; 147  : 	else

  0001e	eb 25		 jmp	 SHORT $LN11@OnRender
$LN7@OnRender:

; 148  : 	{
; 149  : 		if( m_iIndex % 2 == 0 )

  00020	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  00026	79 05		 jns	 SHORT $LN10@OnRender
  00028	49		 dec	 ecx
  00029	83 c9 fe	 or	 ecx, -2			; fffffffeH
  0002c	41		 inc	 ecx
$LN10@OnRender:
  0002d	75 0c		 jne	 SHORT $LN4@OnRender

; 150  : 		{
; 151  : 			if( m_pDarkLine )

  0002f	33 d2		 xor	 edx, edx
  00031	39 50 2c	 cmp	 DWORD PTR [eax+44], edx
  00034	74 34		 je	 SHORT $LN1@OnRender

; 152  : 				m_pDarkLine->Render( m_SelectRect.left, m_SelectRect.top );

  00036	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]

; 153  : 		}
; 154  : 		else

  00039	eb 0a		 jmp	 SHORT $LN11@OnRender
$LN4@OnRender:

; 155  : 		{
; 156  : 			if( m_pLightLine )

  0003b	33 d2		 xor	 edx, edx
  0003d	39 50 30	 cmp	 DWORD PTR [eax+48], edx
  00040	74 28		 je	 SHORT $LN1@OnRender

; 157  : 				m_pLightLine->Render( m_SelectRect.left, m_SelectRect.top );

  00042	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
$LN11@OnRender:
  00045	66 0f 6e 40 1c	 movd	 xmm0, DWORD PTR [eax+28]
  0004a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0004c	52		 push	 edx
  0004d	52		 push	 edx
  0004e	52		 push	 edx
  0004f	52		 push	 edx
  00050	51		 push	 ecx
  00051	51		 push	 ecx
  00052	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00055	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0005b	66 0f 6e 40 18	 movd	 xmm0, DWORD PTR [eax+24]
  00060	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	ff 16		 call	 DWORD PTR [esi]
$LN1@OnRender:
  0006a	5e		 pop	 esi

; 158  : 		}
; 159  : 	}
; 160  : }

  0006b	5d		 pop	 ebp
  0006c	c2 08 00	 ret	 8
?OnRender@ioPullDownItem@@UAEXHH@Z ENDP			; ioPullDownItem::OnRender
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::size
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBE_NPBUPullDownInnerImage@@@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBE_NPBUPullDownInnerImage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBE_NPBUPullDownInnerImage@@@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBE_NPBUPullDownInnerImage@@@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXPAUPullDownInnerImage@@0@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXPAUPullDownInnerImage@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXPAUPullDownInnerImage@@0@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXPAUPullDownInnerImage@@0@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ ; std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >::~_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >::~_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >::~_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UPullDownInnerImage@@@std@@QAE@XZ ; std::allocator<PullDownInnerImage>::allocator<PullDownInnerImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UPullDownInnerImage@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UPullDownInnerImage@@@std@@QAE@XZ PROC	; std::allocator<PullDownInnerImage>::allocator<PullDownInnerImage>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UPullDownInnerImage@@@std@@QAE@XZ ENDP	; std::allocator<PullDownInnerImage>::allocator<PullDownInnerImage>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@I@Z ; std::allocator<PullDownInnerImage>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@I@Z PROC ; std::allocator<PullDownInnerImage>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@I@Z ENDP ; std::allocator<PullDownInnerImage>::deallocate
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEABUPullDownInnerImage@@XZ ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEABUPullDownInnerImage@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEABUPullDownInnerImage@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEABUPullDownInnerImage@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator++
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXXZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEXXZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UPullDownInnerImage@@@std@@QAE@ABV01@@Z ; std::allocator<PullDownInnerImage>::allocator<PullDownInnerImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UPullDownInnerImage@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UPullDownInnerImage@@@std@@QAE@ABV01@@Z PROC ; std::allocator<PullDownInnerImage>::allocator<PullDownInnerImage>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UPullDownInnerImage@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<PullDownInnerImage>::allocator<PullDownInnerImage>
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UPullDownInnerImage@@@std@@QBEIXZ ; std::allocator<PullDownInnerImage>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UPullDownInnerImage@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UPullDownInnerImage@@@std@@QBEIXZ PROC ; std::allocator<PullDownInnerImage>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UPullDownInnerImage@@@std@@QBEIXZ ENDP ; std::allocator<PullDownInnerImage>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUPullDownInnerImage@@@std@@YAPBUPullDownInnerImage@@ABU1@@Z ; std::addressof<PullDownInnerImage const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUPullDownInnerImage@@@std@@YAPBUPullDownInnerImage@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUPullDownInnerImage@@@std@@YAPBUPullDownInnerImage@@ABU1@@Z PROC ; std::addressof<PullDownInnerImage const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUPullDownInnerImage@@@std@@YAPBUPullDownInnerImage@@ABU1@@Z ENDP ; std::addressof<PullDownInnerImage const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@IPAU1@@Z ; std::_Allocate<PullDownInnerImage>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@IPAU1@@Z
_TEXT	SEGMENT
$T507781 = -12						; size = 12
$T507786 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@IPAU1@@Z PROC ; std::_Allocate<PullDownInnerImage>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T507786[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T507786[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T507781[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T507781[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T507781[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@IPAU1@@Z ENDP ; std::_Allocate<PullDownInnerImage>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UPullDownInnerImage@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPullDownInnerImage@@0@Z ; std::_Ptr_cat<PullDownInnerImage,PullDownInnerImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UPullDownInnerImage@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPullDownInnerImage@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UPullDownInnerImage@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPullDownInnerImage@@0@Z PROC ; std::_Ptr_cat<PullDownInnerImage,PullDownInnerImage>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UPullDownInnerImage@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPullDownInnerImage@@0@Z ENDP ; std::_Ptr_cat<PullDownInnerImage,PullDownInnerImage>
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 1a		 je	 SHORT $LN8@Copy_impl
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Copy_impl:

; 2144 : 		*_Dest = *_First;

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  00014	8b f0		 mov	 esi, eax
  00016	6a 07		 push	 7
  00018	83 c0 1c	 add	 eax, 28			; 0000001cH
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	75 ea		 jne	 SHORT $LL3@Copy_impl
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN8@Copy_impl:

; 2145 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2146 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>
_TEXT	ENDS
PUBLIC	??$forward@AAUPullDownInnerImage@@@std@@YAAAUPullDownInnerImage@@AAU1@@Z ; std::forward<PullDownInnerImage &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUPullDownInnerImage@@@std@@YAAAUPullDownInnerImage@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUPullDownInnerImage@@@std@@YAAAUPullDownInnerImage@@AAU1@@Z PROC ; std::forward<PullDownInnerImage &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUPullDownInnerImage@@@std@@YAAAUPullDownInnerImage@@AAU1@@Z ENDP ; std::forward<PullDownInnerImage &>
_TEXT	ENDS
PUBLIC	??$construct@AAUPullDownInnerImage@@@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@AAU2@@Z ; std::allocator<PullDownInnerImage>::construct<PullDownInnerImage &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUPullDownInnerImage@@@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUPullDownInnerImage@@@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@AAU2@@Z PROC ; std::allocator<PullDownInnerImage>::construct<PullDownInnerImage &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 07		 push	 7
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct:
  00015	5f		 pop	 edi

; 209  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
??$construct@AAUPullDownInnerImage@@@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@AAU2@@Z ENDP ; std::allocator<PullDownInnerImage>::construct<PullDownInnerImage &>
_TEXT	ENDS
PUBLIC	??$forward@ABUPullDownInnerImage@@@std@@YAABUPullDownInnerImage@@ABU1@@Z ; std::forward<PullDownInnerImage const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUPullDownInnerImage@@@std@@YAABUPullDownInnerImage@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUPullDownInnerImage@@@std@@YAABUPullDownInnerImage@@ABU1@@Z PROC ; std::forward<PullDownInnerImage const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUPullDownInnerImage@@@std@@YAABUPullDownInnerImage@@ABU1@@Z ENDP ; std::forward<PullDownInnerImage const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UPullDownInnerImage@@ABU1@@std@@YAXPAUPullDownInnerImage@@ABU1@@Z ; std::_Construct<PullDownInnerImage,PullDownInnerImage const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UPullDownInnerImage@@ABU1@@std@@YAXPAUPullDownInnerImage@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UPullDownInnerImage@@ABU1@@std@@YAXPAUPullDownInnerImage@@ABU1@@Z PROC ; std::_Construct<PullDownInnerImage,PullDownInnerImage const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 07		 push	 7
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@Construct:
  00015	5f		 pop	 edi

; 49   : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Construct@UPullDownInnerImage@@ABU1@@std@@YAXPAUPullDownInnerImage@@ABU1@@Z ENDP ; std::_Construct<PullDownInnerImage,PullDownInnerImage const &>
_TEXT	ENDS
PUBLIC	??$move@AAUPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z ; std::move<PullDownInnerImage &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z PROC ; std::move<PullDownInnerImage &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z ENDP ; std::move<PullDownInnerImage &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@PAU1@@Z ; std::_Val_type<PullDownInnerImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@PAU1@@Z PROC ; std::_Val_type<PullDownInnerImage *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@PAU1@@Z ENDP ; std::_Val_type<PullDownInnerImage *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UPullDownInnerImage@@@std@@YAXPAUPullDownInnerImage@@@Z ; std::_Destroy<PullDownInnerImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UPullDownInnerImage@@@std@@YAXPAUPullDownInnerImage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UPullDownInnerImage@@@std@@YAXPAUPullDownInnerImage@@@Z PROC ; std::_Destroy<PullDownInnerImage>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UPullDownInnerImage@@@std@@YAXPAUPullDownInnerImage@@@Z ENDP ; std::_Destroy<PullDownInnerImage>
_TEXT	ENDS
PUBLIC	??$forward@UPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z ; std::forward<PullDownInnerImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z PROC ; std::forward<PullDownInnerImage>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UPullDownInnerImage@@@std@@YA$$QAUPullDownInnerImage@@AAU1@@Z ENDP ; std::forward<PullDownInnerImage>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEAAUPullDownInnerImage@@XZ ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEAAUPullDownInnerImage@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEAAUPullDownInnerImage@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBEAAUPullDownInnerImage@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@V?$allocator@UPullDownInnerImage@@@1@@Z ; std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@V?$allocator@UPullDownInnerImage@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@V?$allocator@UPullDownInnerImage@@@1@@Z PROC ; std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@V?$allocator@UPullDownInnerImage@@@1@@Z ENDP ; std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEII@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEII@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 1c		 push	 28			; 0000001cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEII@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UPullDownInnerImage@@@std@@QAEPAUPullDownInnerImage@@I@Z ; std::allocator<PullDownInnerImage>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UPullDownInnerImage@@@std@@QAEPAUPullDownInnerImage@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UPullDownInnerImage@@@std@@QAEPAUPullDownInnerImage@@I@Z PROC ; std::allocator<PullDownInnerImage>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@IPAU1@@Z ; std::_Allocate<PullDownInnerImage>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UPullDownInnerImage@@@std@@QAEPAUPullDownInnerImage@@I@Z ENDP ; std::allocator<PullDownInnerImage>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$507918 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z PROC ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507918[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z ENDP ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@AAU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@AAU2@@Z ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@AAU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@AAU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 07		 push	 7
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@AAU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@ABU3@@Z ; std::allocator<PullDownInnerImage>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@ABU3@@Z PROC ; std::allocator<PullDownInnerImage>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 07		 push	 7
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN5@construct@2:
  00015	5f		 pop	 edi

; 198  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@ABU3@@Z ENDP ; std::allocator<PullDownInnerImage>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 1a		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  00014	8b f0		 mov	 esi, eax
  00016	6a 07		 push	 7
  00018	83 c0 1c	 add	 eax, 28			; 0000001cH
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	75 ea		 jne	 SHORT $LL3@Move
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@@Z ; std::allocator<PullDownInnerImage>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@@Z PROC ; std::allocator<PullDownInnerImage>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@@Z ENDP ; std::allocator<PullDownInnerImage>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@$$QAU3@@Z ; std::allocator<PullDownInnerImage>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@$$QAU3@@Z PROC ; std::allocator<PullDownInnerImage>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 07		 push	 7
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct@3:
  00015	5f		 pop	 edi

; 203  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UPullDownInnerImage@@@std@@QAEXPAUPullDownInnerImage@@$$QAU3@@Z ENDP ; std::allocator<PullDownInnerImage>::construct
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	__real@3f19999a
PUBLIC	?OnRender@SinglePullDownItem@@UAEXHH@Z		; SinglePullDownItem::OnRender
EXTRN	__imp_?PrintTextWidthCut@ioFontManager@@QAAXMMMMPBDZZ:PROC
EXTRN	?GetSingleton@ioPullDownItemFactory@@SAAAV1@XZ:PROC ; ioPullDownItemFactory::GetSingleton
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.cpp
CONST	ENDS
;	COMDAT ?OnRender@SinglePullDownItem@@UAEXHH@Z
_TEXT	SEGMENT
_iOverIdx$ = 8						; size = 4
_iOverImageIdx$ = 12					; size = 4
?OnRender@SinglePullDownItem@@UAEXHH@Z PROC		; SinglePullDownItem::OnRender, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 187  : 	ioPullDownItem::OnRender( iOverIdx, iOverImageIdx );

  00006	ff 75 0c	 push	 DWORD PTR _iOverImageIdx$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 75 08	 push	 DWORD PTR _iOverIdx$[ebp]
  0000e	e8 00 00 00 00	 call	 ?OnRender@ioPullDownItem@@UAEXHH@Z ; ioPullDownItem::OnRender

; 188  : 
; 189  : 	g_FontMgr.SetAlignType( TAT_LEFT );	

  00013	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00019	33 db		 xor	 ebx, ebx
  0001b	53		 push	 ebx
  0001c	ff d7		 call	 edi
  0001e	8b c8		 mov	 ecx, eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 190  : 	g_FontMgr.SetTextStyle( TS_NORMAL );

  00026	53		 push	 ebx
  00027	ff d7		 call	 edi
  00029	8b c8		 mov	 ecx, eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 191  : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  00031	53		 push	 ebx
  00032	53		 push	 ebx
  00033	53		 push	 ebx
  00034	ff d7		 call	 edi
  00036	8b c8		 mov	 ecx, eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 192  : 
; 193  : 	if( m_iIndex == iOverIdx && PullDownEvent::NONE_SELECT == iOverImageIdx )

  0003e	8b 45 08	 mov	 eax, DWORD PTR _iOverIdx$[ebp]
  00041	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00044	75 0b		 jne	 SHORT $LN2@OnRender@2
  00046	83 7d 0c ff	 cmp	 DWORD PTR _iOverImageIdx$[ebp], -1
  0004a	75 05		 jne	 SHORT $LN2@OnRender@2

; 194  : 		g_FontMgr.SetTextColor( m_dwTitleOverColor );

  0004c	ff 76 68	 push	 DWORD PTR [esi+104]

; 195  : 	else

  0004f	eb 03		 jmp	 SHORT $LN13@OnRender@2
$LN2@OnRender@2:

; 196  : 		g_FontMgr.SetTextColor( m_dwTitleColor );

  00051	ff 76 64	 push	 DWORD PTR [esi+100]
$LN13@OnRender@2:
  00054	ff d7		 call	 edi
  00056	8b c8		 mov	 ecx, eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 197  : 
; 198  : 	int iHeight = m_SelectRect.bottom - m_SelectRect.top;

  0005e	8b 5e 24	 mov	 ebx, DWORD PTR [esi+36]
  00061	2b 5e 1c	 sub	 ebx, DWORD PTR [esi+28]

; 199  : 	int iYPos = m_SelectRect.top + ( iHeight / 2 ) - static_cast<int>( g_PullDownFactory.GetFontTextPixel( FONT_SIZE_12 ) / 2.0f );

  00064	e8 00 00 00 00	 call	 ?GetSingleton@ioPullDownItemFactory@@SAAAV1@XZ ; ioPullDownItemFactory::GetSingleton
  00069	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0006c	8b c3		 mov	 eax, ebx
  0006e	99		 cdq
  0006f	2b c2		 sub	 eax, edx
  00071	d1 f8		 sar	 eax, 1

; 200  : 	g_FontMgr.PrintTextWidthCut( m_SelectRect.left + 3, iYPos, FONT_SIZE_12, m_SelectRect.right - m_SelectRect.left, m_szTitle.c_str() );

  00073	83 7e 5c 10	 cmp	 DWORD PTR [esi+92], 16	; 00000010H
  00077	8d 54 08 fa	 lea	 edx, DWORD PTR [eax+ecx-6]
  0007b	72 05		 jb	 SHORT $LN11@OnRender@2
  0007d	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00080	eb 03		 jmp	 SHORT $LN12@OnRender@2
$LN11@OnRender@2:
  00082	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
$LN12@OnRender@2:
  00085	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00088	51		 push	 ecx
  00089	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	83 ec 10	 sub	 esp, 16			; 00000010H
  00092	2b c8		 sub	 ecx, eax
  00094	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00098	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0009e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000a6	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000b3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b9	83 c0 03	 add	 eax, 3
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	ff d7		 call	 edi
  000ca	50		 push	 eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTextWidthCut@ioFontManager@@QAAXMMMMPBDZZ
  000d1	83 c4 18	 add	 esp, 24			; 00000018H
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx

; 201  : }

  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
?OnRender@SinglePullDownItem@@UAEXHH@Z ENDP		; SinglePullDownItem::OnRender
_TEXT	ENDS
PUBLIC	?OnRender@DoublePullDownItem@@UAEXHH@Z		; DoublePullDownItem::OnRender
; Function compile flags: /Ogsp
;	COMDAT ?OnRender@DoublePullDownItem@@UAEXHH@Z
_TEXT	SEGMENT
_iOverIdx$ = 8						; size = 4
_iOverImageIdx$ = 12					; size = 4
?OnRender@DoublePullDownItem@@UAEXHH@Z PROC		; DoublePullDownItem::OnRender, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 207  : 	ioPullDownItem::OnRender( iOverIdx, iOverImageIdx );

  00006	ff 75 0c	 push	 DWORD PTR _iOverImageIdx$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 75 08	 push	 DWORD PTR _iOverIdx$[ebp]
  0000e	e8 00 00 00 00	 call	 ?OnRender@ioPullDownItem@@UAEXHH@Z ; ioPullDownItem::OnRender

; 208  : 
; 209  : 	g_FontMgr.SetAlignType( TAT_LEFT );

  00013	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00019	33 db		 xor	 ebx, ebx
  0001b	53		 push	 ebx
  0001c	ff d7		 call	 edi
  0001e	8b c8		 mov	 ecx, eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 210  : 	g_FontMgr.SetTextStyle( TS_NORMAL );

  00026	53		 push	 ebx
  00027	ff d7		 call	 edi
  00029	8b c8		 mov	 ecx, eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 211  : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  00031	53		 push	 ebx
  00032	53		 push	 ebx
  00033	53		 push	 ebx
  00034	ff d7		 call	 edi
  00036	8b c8		 mov	 ecx, eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 212  : 
; 213  : 	if( m_iIndex == iOverIdx && PullDownEvent::NONE_SELECT == iOverImageIdx )	

  0003e	8b 45 08	 mov	 eax, DWORD PTR _iOverIdx$[ebp]
  00041	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00044	75 0e		 jne	 SHORT $LN4@OnRender@3
  00046	83 7d 0c ff	 cmp	 DWORD PTR _iOverImageIdx$[ebp], -1
  0004a	75 08		 jne	 SHORT $LN4@OnRender@3

; 214  : 		g_FontMgr.SetTextColor( m_dwTitleOverColor );	

  0004c	ff b6 84 00 00
	00		 push	 DWORD PTR [esi+132]

; 215  : 	else	

  00052	eb 06		 jmp	 SHORT $LN21@OnRender@3
$LN4@OnRender@3:

; 216  : 		g_FontMgr.SetTextColor( m_dwTitleColor );

  00054	ff b6 80 00 00
	00		 push	 DWORD PTR [esi+128]
$LN21@OnRender@3:
  0005a	ff d7		 call	 edi
  0005c	8b c8		 mov	 ecx, eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 217  : 	
; 218  : 	int iFontPixel	= static_cast<int>( g_PullDownFactory.GetFontTextPixel( FONT_SIZE_12 ) );

  00064	e8 00 00 00 00	 call	 ?GetSingleton@ioPullDownItemFactory@@SAAAV1@XZ ; ioPullDownItemFactory::GetSingleton

; 219  : 	int iHeight		= m_SelectRect.bottom - m_SelectRect.top;

  00069	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0006c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0006f	2b c1		 sub	 eax, ecx

; 220  : 	int iYPos		= m_SelectRect.top + ( iHeight / 2 );

  00071	99		 cdq
  00072	2b c2		 sub	 eax, edx
  00074	8b d8		 mov	 ebx, eax
  00076	d1 fb		 sar	 ebx, 1
  00078	03 d9		 add	 ebx, ecx

; 221  : 
; 222  : 	g_FontMgr.PrintTextWidthCut( m_SelectRect.left + 3, iYPos - iFontPixel - 2, FONT_SIZE_12, m_SelectRect.right - m_SelectRect.left, m_szTitle.c_str() );

  0007a	83 7e 5c 10	 cmp	 DWORD PTR [esi+92], 16	; 00000010H
  0007e	72 05		 jb	 SHORT $LN13@OnRender@3
  00080	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00083	eb 03		 jmp	 SHORT $LN14@OnRender@3
$LN13@OnRender@3:
  00085	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
$LN14@OnRender@3:
  00088	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008b	51		 push	 ecx
  0008c	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0008f	0f 57 c0	 xorps	 xmm0, xmm0
  00092	2b c8		 sub	 ecx, eax
  00094	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00098	83 ec 10	 sub	 esp, 16			; 00000010H
  0009b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000a9	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000af	0f 57 c0	 xorps	 xmm0, xmm0
  000b2	8d 4b f2	 lea	 ecx, DWORD PTR [ebx-14]
  000b5	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000b9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000bf	83 c0 03	 add	 eax, 3
  000c2	0f 57 c0	 xorps	 xmm0, xmm0
  000c5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	ff d7		 call	 edi
  000d0	50		 push	 eax
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTextWidthCut@ioFontManager@@QAAXMMMMPBDZZ

; 223  : 
; 224  : 	if( m_iIndex == iOverIdx && PullDownEvent::NONE_SELECT == iOverImageIdx )	

  000d7	8b 45 08	 mov	 eax, DWORD PTR _iOverIdx$[ebp]
  000da	83 c4 18	 add	 esp, 24			; 00000018H
  000dd	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  000e0	75 0e		 jne	 SHORT $LN2@OnRender@3
  000e2	83 7d 0c ff	 cmp	 DWORD PTR _iOverImageIdx$[ebp], -1
  000e6	75 08		 jne	 SHORT $LN2@OnRender@3

; 225  : 		g_FontMgr.SetTextColor( m_dwTitleSubOverColor );

  000e8	ff b6 8c 00 00
	00		 push	 DWORD PTR [esi+140]

; 226  : 	else	

  000ee	eb 06		 jmp	 SHORT $LN22@OnRender@3
$LN2@OnRender@3:

; 227  : 		g_FontMgr.SetTextColor( m_dwTitleSubColor );

  000f0	ff b6 88 00 00
	00		 push	 DWORD PTR [esi+136]
$LN22@OnRender@3:
  000f6	ff d7		 call	 edi
  000f8	8b c8		 mov	 ecx, eax
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 228  : 	
; 229  : 	g_FontMgr.PrintTextWidthCut( m_SelectRect.left + 3, iYPos, FONT_SIZE_12, m_SelectRect.right - m_SelectRect.left, m_szSubTitle.c_str() );

  00100	83 7e 78 10	 cmp	 DWORD PTR [esi+120], 16	; 00000010H
  00104	72 05		 jb	 SHORT $LN19@OnRender@3
  00106	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00109	eb 03		 jmp	 SHORT $LN20@OnRender@3
$LN19@OnRender@3:
  0010b	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
$LN20@OnRender@3:
  0010e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00111	51		 push	 ecx
  00112	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00115	0f 57 c0	 xorps	 xmm0, xmm0
  00118	83 ec 10	 sub	 esp, 16			; 00000010H
  0011b	2b c8		 sub	 ecx, eax
  0011d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00121	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00127	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0012f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00135	0f 57 c0	 xorps	 xmm0, xmm0
  00138	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  0013c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00142	83 c0 03	 add	 eax, 3
  00145	0f 57 c0	 xorps	 xmm0, xmm0
  00148	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	ff d7		 call	 edi
  00153	50		 push	 eax
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTextWidthCut@ioFontManager@@QAAXMMMMPBDZZ
  0015a	83 c4 18	 add	 esp, 24			; 00000018H
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx

; 230  : }

  00160	5d		 pop	 ebp
  00161	c2 08 00	 ret	 8
?OnRender@DoublePullDownItem@@UAEXHH@Z ENDP		; DoublePullDownItem::OnRender
_TEXT	ENDS
PUBLIC	??0?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAE_NI@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAE_NI@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 49 92 24
	09		 cmp	 edi, 153391689		; 09249249H
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@IPAU1@@Z ; std::_Allocate<PullDownInnerImage>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 1c	 imul	 edi, 28			; 0000001cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Buy
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@std@@QAE@PAUPullDownInnerImage@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >::_Vector_iterator<std::_Vector_val<PullDownInnerImage,std::allocator<PullDownInnerImage> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@ABU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@ABU2@@Z ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@ABU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@ABU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 07		 push	 7
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN9@Cons_val@2:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@ABU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$508194 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z PROC ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508194[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00@Z ENDP ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@@Z ; std::_Dest_val<std::allocator<PullDownInnerImage>,PullDownInnerImage>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@@Z PROC ; std::_Dest_val<std::allocator<PullDownInnerImage>,PullDownInnerImage>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@@Z ENDP ; std::_Dest_val<std::allocator<PullDownInnerImage>,PullDownInnerImage>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@U3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@$$QAU2@@Z ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@U3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@U3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 07		 push	 7
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val@3:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@U3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@XZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::end
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<PullDownInnerImage> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_cop
$LL6@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@AAU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@AAU2@@Z ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage &>
  00015	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN24@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 383  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@U1@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage>,PullDownInnerImage>
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninit_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@U1@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@U1@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage>,PullDownInnerImage>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@U3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@$$QAU2@@Z ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage>
  00015	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@U1@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage>,PullDownInnerImage>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?OnImageOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z ; ioPullDownItem::OnImageOver
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.cpp
;	COMDAT ?OnImageOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z
_TEXT	SEGMENT
_iIdx$506673 = -24					; size = 4
_rect$506680 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_mousepos$ = 8						; size = 4
?OnImageOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z PROC	; ioPullDownItem::OnImageOver, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 123  : 	vPullDownInnerImage::iterator iter = m_vImageList.begin();
; 124  : 	for( int iIdx = 0; iter != m_vImageList.end(); ++iter, ++iIdx )

  00010	83 65 e8 00	 and	 DWORD PTR _iIdx$506673[ebp], 0
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _mousepos$[ebp]
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx
  0001c	8b 77 34	 mov	 esi, DWORD PTR [edi+52]
  0001f	eb 2a		 jmp	 SHORT $LN42@OnImageOve
$LL41@OnImageOve:

; 125  : 	{
; 126  : 		PullDownInnerImage& rkImage = *iter;
; 127  : 		if( !rkImage.m_pImage )

  00021	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00024	74 1f		 je	 SHORT $LN4@OnImageOve

; 128  : 			continue;
; 129  : 
; 130  : 		RECT rect = MakeImageRect( rkImage );

  00026	56		 push	 esi
  00027	8d 45 ec	 lea	 eax, DWORD PTR _rect$506680[ebp]
  0002a	50		 push	 eax
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?MakeImageRect@ioPullDownItem@@QAE?AUtagRECT@@AAUPullDownInnerImage@@@Z ; ioPullDownItem::MakeImageRect

; 131  : 		if( ::PtInRect( &rect, mousepos ) )

  00032	ff 73 04	 push	 DWORD PTR [ebx+4]
  00035	8d 45 ec	 lea	 eax, DWORD PTR _rect$506680[ebp]
  00038	ff 33		 push	 DWORD PTR [ebx]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12
  00041	85 c0		 test	 eax, eax
  00043	75 1f		 jne	 SHORT $LN39@OnImageOve
$LN4@OnImageOve:

; 123  : 	vPullDownInnerImage::iterator iter = m_vImageList.begin();
; 124  : 	for( int iIdx = 0; iter != m_vImageList.end(); ++iter, ++iIdx )

  00045	83 c6 1c	 add	 esi, 28			; 0000001cH
  00048	ff 45 e8	 inc	 DWORD PTR _iIdx$506673[ebp]
$LN42@OnImageOve:
  0004b	3b 77 38	 cmp	 esi, DWORD PTR [edi+56]
  0004e	75 d1		 jne	 SHORT $LL41@OnImageOve

; 134  : 		}
; 135  : 	}
; 136  : 
; 137  : 	return PullDownEvent::NONE_SELECT;

  00050	83 c8 ff	 or	 eax, -1
$LN6@OnImageOve:

; 138  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	33 cd		 xor	 ecx, ebp
  0005a	5b		 pop	 ebx
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	c9		 leave
  00061	c2 04 00	 ret	 4
$LN39@OnImageOve:

; 132  : 		{
; 133  : 			return iIdx;

  00064	8b 45 e8	 mov	 eax, DWORD PTR _iIdx$506673[ebp]
  00067	eb ea		 jmp	 SHORT $LN6@OnImageOve
?OnImageOver@ioPullDownItem@@QAEHABUtagPOINT@@@Z ENDP	; ioPullDownItem::OnImageOver
_TEXT	ENDS
PUBLIC	?OnImageListRender@ioPullDownItem@@UAEXHH@Z	; ioPullDownItem::OnImageListRender
; Function compile flags: /Ogsp
;	COMDAT ?OnImageListRender@ioPullDownItem@@UAEXHH@Z
_TEXT	SEGMENT
_Idx$506703 = -4					; size = 4
_iOverIdx$ = 8						; size = 4
_iOverImageIdx$ = 12					; size = 4
?OnImageListRender@ioPullDownItem@@UAEXHH@Z PROC	; ioPullDownItem::OnImageListRender, COMDAT
; _this$ = ecx

; 163  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 164  : 	if( IsEnableIamgeRender() )

  00008	33 db		 xor	 ebx, ebx
  0000a	38 5f 44	 cmp	 BYTE PTR [edi+68], bl
  0000d	74 6b		 je	 SHORT $LN4@OnImageLis

; 165  : 	{
; 166  : 		vPullDownInnerImage::iterator iter = m_vImageList.begin();

  0000f	56		 push	 esi
  00010	8b 77 34	 mov	 esi, DWORD PTR [edi+52]

; 167  : 		for( int Idx = 0; iter != m_vImageList.end(); ++iter, ++Idx )

  00013	89 5d fc	 mov	 DWORD PTR _Idx$506703[ebp], ebx
  00016	eb 5c		 jmp	 SHORT $LN45@OnImageLis
$LL6@OnImageLis:

; 168  : 		{
; 169  : 			PullDownInnerImage& rkImage = *iter;
; 170  : 			if( !rkImage.m_pImage )

  00018	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001a	3b cb		 cmp	 ecx, ebx
  0001c	74 50		 je	 SHORT $LN5@OnImageLis

; 171  : 				continue;
; 172  : 
; 173  : 			if( m_iIndex == iOverIdx && iOverImageIdx == Idx )

  0001e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00021	3b 45 08	 cmp	 eax, DWORD PTR _iOverIdx$[ebp]
  00024	75 0d		 jne	 SHORT $LN2@OnImageLis
  00026	8b 45 fc	 mov	 eax, DWORD PTR _Idx$506703[ebp]
  00029	39 45 0c	 cmp	 DWORD PTR _iOverImageIdx$[ebp], eax
  0002c	75 05		 jne	 SHORT $LN2@OnImageLis

; 174  : 				rkImage.m_pImage->SetColor( rkImage.m_dwOverColor );

  0002e	ff 76 08	 push	 DWORD PTR [esi+8]

; 175  : 			else

  00031	eb 03		 jmp	 SHORT $LN46@OnImageLis
$LN2@OnImageLis:

; 176  : 				rkImage.m_pImage->SetColor( rkImage.m_dwColor );

  00033	ff 76 04	 push	 DWORD PTR [esi+4]
$LN46@OnImageLis:
  00036	8b 01		 mov	 eax, DWORD PTR [ecx]
  00038	ff 50 2c	 call	 DWORD PTR [eax+44]

; 177  : 
; 178  : 			rkImage.m_pImage->Render( m_SelectRect.left + rkImage.m_iXPos, m_SelectRect.top + rkImage.m_iYPos, rkImage.m_eRenderType );

  0003b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0003e	03 57 1c	 add	 edx, DWORD PTR [edi+28]
  00041	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00043	8b 01		 mov	 eax, DWORD PTR [ecx]
  00045	53		 push	 ebx
  00046	53		 push	 ebx
  00047	53		 push	 ebx
  00048	ff 76 10	 push	 DWORD PTR [esi+16]
  0004b	0f 57 c0	 xorps	 xmm0, xmm0
  0004e	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00052	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00055	03 57 18	 add	 edx, DWORD PTR [edi+24]
  00058	51		 push	 ecx
  00059	51		 push	 ecx
  0005a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00060	0f 57 c0	 xorps	 xmm0, xmm0
  00063	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	ff 10		 call	 DWORD PTR [eax]
$LN5@OnImageLis:

; 167  : 		for( int Idx = 0; iter != m_vImageList.end(); ++iter, ++Idx )

  0006e	83 c6 1c	 add	 esi, 28			; 0000001cH
  00071	ff 45 fc	 inc	 DWORD PTR _Idx$506703[ebp]
$LN45@OnImageLis:
  00074	3b 77 38	 cmp	 esi, DWORD PTR [edi+56]
  00077	75 9f		 jne	 SHORT $LL6@OnImageLis
  00079	5e		 pop	 esi
$LN4@OnImageLis:
  0007a	5f		 pop	 edi
  0007b	5b		 pop	 ebx

; 179  : 		}
; 180  : 	}
; 181  : }

  0007c	c9		 leave
  0007d	c2 08 00	 ret	 8
?OnImageListRender@ioPullDownItem@@UAEXHH@Z ENDP	; ioPullDownItem::OnImageListRender
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@@Z ; std::_Destroy_range<std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@@Z PROC ; std::_Destroy_range<std::allocator<PullDownInnerImage> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAXPAUPullDownInnerImage@@0AAV?$allocator@UPullDownInnerImage@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z ; std::_Uninitialized_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z
_TEXT	SEGMENT
__Cat$508576 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z PROC ; std::_Uninitialized_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508576[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z ENDP ; std::_Uninitialized_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z ; std::_Uninitialized_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z
_TEXT	SEGMENT
__Cat$508583 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z PROC ; std::_Uninitialized_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508583[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@U1@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage>,PullDownInnerImage>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z ENDP ; std::_Uninitialized_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXPAUPullDownInnerImage@@0@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXPAUPullDownInnerImage@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXPAUPullDownInnerImage@@0@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXPAUPullDownInnerImage@@0@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXXZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXXZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Ucopy<PullDownInnerImage *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$508737 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Ucopy<PullDownInnerImage *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$508737[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Ucopy<PullDownInnerImage *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Umove<PullDownInnerImage *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Umove<PullDownInnerImage *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z ; std::_Uninitialized_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUPullDownInnerImage@@@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEPAUPullDownInnerImage@@PAU2@00@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Umove<PullDownInnerImage *>
_TEXT	ENDS
PUBLIC	??1?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::~vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::~vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Tidy
??1?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::~vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@0@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$508823 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@0@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$508823[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<PullDownInnerImage *,PullDownInnerImage *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@0@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::reserve
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$506908 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 1c		 push	 28			; 0000001cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UPullDownInnerImage@@@std@@YAPAUPullDownInnerImage@@IPAU1@@Z ; std::_Allocate<PullDownInnerImage>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$506908[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$506908[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@@Z ; std::_Uninitialized_move<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 1c	 add	 ecx, 28			; 0000001cH
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 1c	 imul	 ebx, 28			; 0000001cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 1c	 imul	 edi, 28			; 0000001cH
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$506908[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$506908[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::reserve
PUBLIC	??_7ioPullDownItem@@6B@				; ioPullDownItem::`vftable'
PUBLIC	??0ioPullDownItem@@QAE@XZ			; ioPullDownItem::ioPullDownItem
PUBLIC	??_R4ioPullDownItem@@6B@			; ioPullDownItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioPullDownItem@@@8			; ioPullDownItem `RTTI Type Descriptor'
PUBLIC	??_R3ioPullDownItem@@8				; ioPullDownItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPullDownItem@@8				; ioPullDownItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPullDownItem@@8			; ioPullDownItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioPullDownItem@@UAEPAXI@Z:PROC		; ioPullDownItem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioPullDownItem@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPullDownItem@@8 DD FLAT:??_R0?AVioPullDownItem@@@8 ; ioPullDownItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPullDownItem@@8
rdata$r	SEGMENT
??_R2ioPullDownItem@@8 DD FLAT:??_R1A@?0A@EA@ioPullDownItem@@8 ; ioPullDownItem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioPullDownItem@@8
rdata$r	SEGMENT
??_R3ioPullDownItem@@8 DD 00H				; ioPullDownItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioPullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPullDownItem@@@8
_DATA	SEGMENT
??_R0?AVioPullDownItem@@@8 DD FLAT:??_7type_info@@6B@	; ioPullDownItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPullDownItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioPullDownItem@@6B@
rdata$r	SEGMENT
??_R4ioPullDownItem@@6B@ DD 00H				; ioPullDownItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioPullDownItem@@@8
	DD	FLAT:??_R3ioPullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_7ioPullDownItem@@6B@
CONST	SEGMENT
??_7ioPullDownItem@@6B@ DD FLAT:??_R4ioPullDownItem@@6B@ ; ioPullDownItem::`vftable'
	DD	FLAT:?OnRender@ioPullDownItem@@UAEXHH@Z
	DD	FLAT:?OnImageListRender@ioPullDownItem@@UAEXHH@Z
	DD	FLAT:??_EioPullDownItem@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.cpp
CONST	ENDS
;	COMDAT ??0ioPullDownItem@@QAE@XZ
_TEXT	SEGMENT
??0ioPullDownItem@@QAE@XZ PROC				; ioPullDownItem::ioPullDownItem, COMDAT
; _this$ = ecx

; 11   : {

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioPullDownItem@@6B@
  00008	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  0000b	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  0000e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
  00011	57		 push	 edi

; 12   : 	m_iIndex		= 0;

  00012	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 13   : 	m_iHeight		= 0;

  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 14   : 	m_iBlankWidth	= 0;

  00018	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 15   : 	m_iBlankHeight	= 0;

  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 16   : 
; 17   : 	m_pOverLine		= NULL;

  0001e	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 18   : 	m_pDarkLine		= NULL;

  00021	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 19   : 	m_pLightLine	= NULL;

  00024	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 20   : 
; 21   : 	m_bImageRender	= true;

  00027	c6 41 44 01	 mov	 BYTE PTR [ecx+68], 1

; 22   : 
; 23   : 	memset( &m_SelectRect, 0x00, sizeof( m_SelectRect ) );

  0002b	8d 79 18	 lea	 edi, DWORD PTR [ecx+24]
  0002e	ab		 stosd
  0002f	ab		 stosd
  00030	ab		 stosd
  00031	ab		 stosd

; 24   : }

  00032	8b c1		 mov	 eax, ecx
  00034	5f		 pop	 edi
  00035	c3		 ret	 0
??0ioPullDownItem@@QAE@XZ ENDP				; ioPullDownItem::ioPullDownItem
_TEXT	ENDS
PUBLIC	?clear@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?clear@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T509073 = -4						; size = 4
?clear@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXXZ PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T509073[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@0@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXXZ ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXI@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXI@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 1c		 push	 28			; 0000001cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IBEII@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXI@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXI@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Reserve
_TEXT	ENDS
PUBLIC	??1ioPullDownItem@@UAE@XZ			; ioPullDownItem::~ioPullDownItem
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioPullDownItem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioPullDownItem@@UAE@XZ$0
__ehfuncinfo$??1ioPullDownItem@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioPullDownItem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.cpp
xdata$x	ENDS
;	COMDAT ??1ioPullDownItem@@UAE@XZ
_TEXT	SEGMENT
$T509304 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioPullDownItem@@UAE@XZ PROC				; ioPullDownItem::~ioPullDownItem, COMDAT
; _this$ = ecx

; 27   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioPullDownItem@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioPullDownItem@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 28   : 	for( vPullDownInnerImage::iterator iter = m_vImageList.begin(); iter != m_vImageList.end(); ++iter )

  0001b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0001e	eb 19		 jmp	 SHORT $LN68@ioPullDown
$LN22@ioPullDown:

; 29   : 	{
; 30   : 		PullDownInnerImage& rkImage = *iter;
; 31   : 		if( !rkImage.m_pImage )

  00020	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00022	85 c9		 test	 ecx, ecx
  00024	74 10		 je	 SHORT $LN5@ioPullDown

; 32   : 			continue;
; 33   : 
; 34   : 		if( rkImage.m_bManagedImageByItem )

  00026	80 7f 0c 00	 cmp	 BYTE PTR [edi+12], 0
  0002a	74 0a		 je	 SHORT $LN5@ioPullDown

; 35   : 		{
; 36   : 			SAFEDELETE( rkImage.m_pImage );			

  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	6a 01		 push	 1
  00030	ff 50 40	 call	 DWORD PTR [eax+64]
  00033	83 27 00	 and	 DWORD PTR [edi], 0
$LN5@ioPullDown:

; 28   : 	for( vPullDownInnerImage::iterator iter = m_vImageList.begin(); iter != m_vImageList.end(); ++iter )

  00036	83 c7 1c	 add	 edi, 28			; 0000001cH
$LN68@ioPullDown:
  00039	3b 7e 38	 cmp	 edi, DWORD PTR [esi+56]
  0003c	75 e2		 jne	 SHORT $LN22@ioPullDown

; 37   : 		}
; 38   : 	}	
; 39   : 	m_vImageList.clear();

  0003e	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00041	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00044	50		 push	 eax
  00045	51		 push	 ecx
  00046	8d 45 f0	 lea	 eax, DWORD PTR $T509304[ebp]
  00049	50		 push	 eax
  0004a	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  0004d	e8 00 00 00 00	 call	 ?erase@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@0@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::erase

; 40   : }

  00052	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00056	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00059	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXXZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Tidy
  0005e	e8 00 00 00 00	 call	 __EH_epilog3
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioPullDownItem@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 34	 add	 ecx, 52			; 00000034H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE@XZ ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::~vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >
__ehhandler$??1ioPullDownItem@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioPullDownItem@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioPullDownItem@@UAE@XZ ENDP				; ioPullDownItem::~ioPullDownItem
PUBLIC	??4?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??4?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv551 = 8						; size = 4
__Cat$509666 = 8					; size = 1
__Cat$509563 = 8					; size = 1
__Cat$509540 = 8					; size = 1
__Cat$509442 = 8					; size = 1
$T509408 = 8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 710  : 		if (this != &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	0f 84 e2 00 00
	00		 je	 $LN1@operator

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00012	53		 push	 ebx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00019	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0001c	8b c3		 mov	 eax, ebx
  0001e	2b 07		 sub	 eax, DWORD PTR [edi]
  00020	6a 1c		 push	 28			; 0000001cH
  00022	99		 cdq
  00023	59		 pop	 ecx
  00024	f7 f9		 idiv	 ecx
  00026	89 45 08	 mov	 DWORD PTR tv551[ebp], eax
  00029	85 c0		 test	 eax, eax

; 715  : 				clear();	// new sequence empty, erase existing sequence

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	75 14		 jne	 SHORT $LN8@operator
  00030	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00032	50		 push	 eax
  00033	51		 push	 ecx
  00034	8d 45 08	 lea	 eax, DWORD PTR $T509408[ebp]
  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?erase@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@2@0@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::erase

; 716  : 			else if (_Right.size() <= size())

  0003f	e9 af 00 00 00	 jmp	 $LN106@operator
$LN8@operator:
  00044	2b 06		 sub	 eax, DWORD PTR [esi]
  00046	6a 1c		 push	 28			; 0000001cH
  00048	99		 cdq
  00049	59		 pop	 ecx
  0004a	f7 f9		 idiv	 ecx
  0004c	8b c8		 mov	 ecx, eax
  0004e	39 4d 08	 cmp	 DWORD PTR tv551[ebp], ecx
  00051	77 22		 ja	 SHORT $LN6@operator

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  00053	ff 75 08	 push	 DWORD PTR __Cat$509442[ebp]
  00056	ff 36		 push	 DWORD PTR [esi]
  00058	53		 push	 ebx
  00059	ff 37		 push	 DWORD PTR [edi]
  0005b	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00060	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00063	2b 07		 sub	 eax, DWORD PTR [edi]
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	99		 cdq
  00069	6a 1c		 push	 28			; 0000001cH
  0006b	59		 pop	 ecx
  0006c	f7 f9		 idiv	 ecx
  0006e	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00071	03 06		 add	 eax, DWORD PTR [esi]

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  00073	eb 7b		 jmp	 SHORT $LN107@operator
$LN6@operator:
  00075	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00078	2b 06		 sub	 eax, DWORD PTR [esi]
  0007a	6a 1c		 push	 28			; 0000001cH
  0007c	99		 cdq
  0007d	5b		 pop	 ebx
  0007e	f7 fb		 idiv	 ebx
  00080	39 45 08	 cmp	 DWORD PTR tv551[ebp], eax
  00083	77 2e		 ja	 SHORT $LN4@operator

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();
; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  00085	ff 75 08	 push	 DWORD PTR __Cat$509540[ebp]
  00088	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  00092	53		 push	 ebx
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUPullDownInnerImage@@PAU1@@std@@YAPAUPullDownInnerImage@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<PullDownInnerImage *,PullDownInnerImage *>

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  00099	ff 75 08	 push	 DWORD PTR __Cat$509563[ebp]
  0009c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009f	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000a2	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000a5	51		 push	 ecx
  000a6	50		 push	 eax
  000a7	57		 push	 edi
  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
  000ae	83 c4 24	 add	 esp, 36			; 00000024H

; 728  : 				}
; 729  : 			else

  000b1	eb 3d		 jmp	 SHORT $LN107@operator
$LN4@operator:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000b3	8b 06		 mov	 eax, DWORD PTR [esi]
  000b5	85 c0		 test	 eax, eax
  000b7	74 07		 je	 SHORT $LN92@operator

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000bf	59		 pop	 ecx
$LN92@operator:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  000c0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c3	2b 07		 sub	 eax, DWORD PTR [edi]
  000c5	6a 1c		 push	 28			; 0000001cH
  000c7	59		 pop	 ecx
  000c8	99		 cdq
  000c9	f7 f9		 idiv	 ecx
  000cb	8b ce		 mov	 ecx, esi
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?_Buy@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAE_NI@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Buy
  000d3	84 c0		 test	 al, al
  000d5	74 1c		 je	 SHORT $LN106@operator

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  000d7	ff 75 08	 push	 DWORD PTR __Cat$509666[ebp]
  000da	8b 06		 mov	 eax, DWORD PTR [esi]
  000dc	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000df	8b 3f		 mov	 edi, DWORD PTR [edi]
  000e1	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  000e4	52		 push	 edx
  000e5	50		 push	 eax
  000e6	51		 push	 ecx
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUPullDownInnerImage@@PAU1@V?$allocator@UPullDownInnerImage@@@std@@@std@@YAPAUPullDownInnerImage@@PAU1@00AAV?$allocator@UPullDownInnerImage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<PullDownInnerImage *,PullDownInnerImage *,std::allocator<PullDownInnerImage> >
  000ed	83 c4 14	 add	 esp, 20			; 00000014H
$LN107@operator:
  000f0	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN106@operator:
  000f3	5b		 pop	 ebx
$LN1@operator:
  000f4	5f		 pop	 edi

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  000f5	8b c6		 mov	 eax, esi
  000f7	5e		 pop	 esi

; 743  : 		}

  000f8	5d		 pop	 ebp
  000f9	c2 04 00	 ret	 4
??4?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::operator=
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXABUPullDownInnerImage@@@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXABUPullDownInnerImage@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXABUPullDownInnerImage@@@Z PROC ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 1c		 push	 28			; 0000001cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXI@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 1c	 imul	 edi, 28			; 0000001cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@AAU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@AAU2@@Z ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@IAEXI@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UPullDownInnerImage@@@std@@UPullDownInnerImage@@ABU3@@std@@YAXAAV?$allocator@UPullDownInnerImage@@@0@PAUPullDownInnerImage@@ABU2@@Z ; std::_Cons_val<std::allocator<PullDownInnerImage>,PullDownInnerImage,PullDownInnerImage const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXABUPullDownInnerImage@@@Z ENDP ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioPullDownItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioPullDownItem@@UAEPAXI@Z PROC			; ioPullDownItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioPullDownItem@@UAE@XZ ; ioPullDownItem::~ioPullDownItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioPullDownItem@@UAEPAXI@Z ENDP			; ioPullDownItem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AddImage@ioPullDownItem@@QAEXAAV?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@Z ; ioPullDownItem::AddImage
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.cpp
;	COMDAT ?AddImage@ioPullDownItem@@QAEXAAV?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@Z
_TEXT	SEGMENT
_rkList$ = 8						; size = 4
?AddImage@ioPullDownItem@@QAEXAAV?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@Z PROC ; ioPullDownItem::AddImage, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   : 	m_vImageList = rkList;

  00003	83 c1 34	 add	 ecx, 52			; 00000034H

; 75   : }

  00006	5d		 pop	 ebp

; 74   : 	m_vImageList = rkList;

  00007	e9 00 00 00 00	 jmp	 ??4?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::operator=
?AddImage@ioPullDownItem@@QAEXAAV?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@@Z ENDP ; ioPullDownItem::AddImage
_TEXT	ENDS
PUBLIC	?AddImage@ioPullDownItem@@QAEXPAVioUIRenderImage@@K@Z ; ioPullDownItem::AddImage
; Function compile flags: /Ogsp
;	COMDAT ?AddImage@ioPullDownItem@@QAEXPAVioUIRenderImage@@K@Z
_TEXT	SEGMENT
_ImageSet$ = -28					; size = 28
_pImage$ = 8						; size = 4
_dwOverColor$ = 12					; size = 4
?AddImage@ioPullDownItem@@QAEXPAVioUIRenderImage@@K@Z PROC ; ioPullDownItem::AddImage, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	if( !pImage )	

  00003	8b 55 08	 mov	 edx, DWORD PTR _pImage$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0000b	3b d0		 cmp	 edx, eax
  0000d	74 24		 je	 SHORT $LN2@AddImage

; 80   : 		return;
; 81   : 
; 82   : 	PullDownInnerImage ImageSet;

  0000f	89 45 e8	 mov	 DWORD PTR _ImageSet$[ebp+4], eax
  00012	89 45 f8	 mov	 DWORD PTR _ImageSet$[ebp+20], eax
  00015	89 45 fc	 mov	 DWORD PTR _ImageSet$[ebp+24], eax
  00018	89 45 f4	 mov	 DWORD PTR _ImageSet$[ebp+16], eax

; 83   : 	ImageSet.m_pImage				= pImage;
; 84   : 	ImageSet.m_dwOverColor			= dwOverColor;
; 85   : 	ImageSet.m_bManagedImageByItem	= false;

  0001b	88 45 f0	 mov	 BYTE PTR _ImageSet$[ebp+12], al
  0001e	89 55 e4	 mov	 DWORD PTR _ImageSet$[ebp], edx
  00021	8b 55 0c	 mov	 edx, DWORD PTR _dwOverColor$[ebp]

; 86   : 	m_vImageList.push_back( ImageSet );	

  00024	8d 45 e4	 lea	 eax, DWORD PTR _ImageSet$[ebp]
  00027	50		 push	 eax
  00028	83 c1 34	 add	 ecx, 52			; 00000034H
  0002b	89 55 ec	 mov	 DWORD PTR _ImageSet$[ebp+8], edx
  0002e	e8 00 00 00 00	 call	 ?push_back@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXABUPullDownInnerImage@@@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::push_back
$LN2@AddImage:

; 87   : }

  00033	c9		 leave
  00034	c2 08 00	 ret	 8
?AddImage@ioPullDownItem@@QAEXPAVioUIRenderImage@@K@Z ENDP ; ioPullDownItem::AddImage
_TEXT	ENDS
PUBLIC	?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; ioPullDownItem::AddImage
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z$0
__ehfuncinfo$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.cpp
xdata$x	ENDS
;	COMDAT ?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z
_TEXT	SEGMENT
_ImageSet$ = -56					; size = 28
$T509713 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_szImage$ = 8						; size = 4
_dwOverColor$ = 12					; size = 4
?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z PROC ; ioPullDownItem::AddImage, COMDAT
; _this$ = ecx

; 90   : {

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 91   : 
; 92   : 	PullDownInnerImage ImageSet;
; 93   : 	ImageSet.m_pImage				= g_UIImageSetMgr.CreateImageByFullName( szImage.c_str() );

  0000e	8b 45 08	 mov	 eax, DWORD PTR _szImage$[ebp]
  00011	33 f6		 xor	 esi, esi
  00013	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00017	89 75 cc	 mov	 DWORD PTR _ImageSet$[ebp+4], esi
  0001a	89 75 dc	 mov	 DWORD PTR _ImageSet$[ebp+20], esi
  0001d	89 75 e0	 mov	 DWORD PTR _ImageSet$[ebp+24], esi
  00020	89 75 d8	 mov	 DWORD PTR _ImageSet$[ebp+16], esi
  00023	72 02		 jb	 SHORT $LN10@AddImage@2
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@AddImage@2:
  00027	50		 push	 eax
  00028	8d 4d e4	 lea	 ecx, DWORD PTR $T509713[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00031	8d 45 e4	 lea	 eax, DWORD PTR $T509713[ebp]
  00034	56		 push	 esi
  00035	50		 push	 eax
  00036	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0003f	8b c8		 mov	 ecx, eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z
  00047	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8d 4d e4	 lea	 ecx, DWORD PTR $T509713[ebp]
  0004e	89 45 c8	 mov	 DWORD PTR _ImageSet$[ebp], eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 94   : 	ImageSet.m_dwOverColor			= dwOverColor;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _dwOverColor$[ebp]
  0005a	89 45 d0	 mov	 DWORD PTR _ImageSet$[ebp+8], eax

; 95   : 	ImageSet.m_bManagedImageByItem	= true;
; 96   : 	m_vImageList.push_back( ImageSet );

  0005d	8d 45 c8	 lea	 eax, DWORD PTR _ImageSet$[ebp]
  00060	50		 push	 eax
  00061	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00064	c6 45 d4 01	 mov	 BYTE PTR _ImageSet$[ebp+12], 1
  00068	e8 00 00 00 00	 call	 ?push_back@?$vector@UPullDownInnerImage@@V?$allocator@UPullDownInnerImage@@@std@@@std@@QAEXABUPullDownInnerImage@@@Z ; std::vector<PullDownInnerImage,std::allocator<PullDownInnerImage> >::push_back

; 97   : }

  0006d	e8 00 00 00 00	 call	 __EH_epilog3
  00072	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T509713[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddImage@ioPullDownItem@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ENDP ; ioPullDownItem::AddImage
END
