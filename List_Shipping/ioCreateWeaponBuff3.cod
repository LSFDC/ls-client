; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioCreateWeaponBuff3.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	?EndBuff@ioCreateWeaponBuff3@@UAEXXZ		; ioCreateWeaponBuff3::EndBuff
EXTRN	?RestoreOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@@Z:PROC ; ioBaseChar::RestoreOutLineChange
EXTRN	?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z:PROC ; ioBaseChar::EndEffect
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponbuff3.cpp
;	COMDAT ?EndBuff@ioCreateWeaponBuff3@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioCreateWeaponBuff3@@UAEXXZ PROC		; ioCreateWeaponBuff3::EndBuff, COMDAT
; _this$ = ecx

; 159  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 	ioBuff::EndBuff();

  00003	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff

; 161  : 
; 162  : 	if ( !m_pOwner )

  00008	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 26		 je	 SHORT $LN1@EndBuff

; 163  : 		return;
; 164  : 
; 165  : 	m_pOwner->EndEffect( m_szWaitEffect, false );

  00012	6a 01		 push	 1
  00014	6a 00		 push	 0
  00016	8d 86 84 09 00
	00		 lea	 eax, DWORD PTR [esi+2436]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 166  : 
; 167  : 	if( m_bEnableOutLine )

  00022	80 be 6c 09 00
	00 00		 cmp	 BYTE PTR [esi+2412], 0
  00029	74 0d		 je	 SHORT $LN1@EndBuff

; 168  : 		m_pOwner->RestoreOutLineChange( COT_BUFF_PROTECTION );

  0002b	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00031	6a 01		 push	 1
  00033	e8 00 00 00 00	 call	 ?RestoreOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@@Z ; ioBaseChar::RestoreOutLineChange
$LN1@EndBuff:
  00038	5e		 pop	 esi

; 169  : }

  00039	c3		 ret	 0
?EndBuff@ioCreateWeaponBuff3@@UAEXXZ ENDP		; ioCreateWeaponBuff3::EndBuff
_TEXT	ENDS
PUBLIC	?Init@ioCreateWeaponBuff3@@IAEXXZ		; ioCreateWeaponBuff3::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@ioCreateWeaponBuff3@@IAEXXZ
_TEXT	SEGMENT
?Init@ioCreateWeaponBuff3@@IAEXXZ PROC			; ioCreateWeaponBuff3::Init, COMDAT
; _this$ = ecx

; 263  : 	m_BuffState = BS_NONE;

  00000	83 a1 f0 09 00
	00 00		 and	 DWORD PTR [ecx+2544], 0

; 264  : 	m_dwCheckWaitTime = 0;

  00007	83 a1 f4 09 00
	00 00		 and	 DWORD PTR [ecx+2548], 0

; 265  : }

  0000e	c3		 ret	 0
?Init@ioCreateWeaponBuff3@@IAEXXZ ENDP			; ioCreateWeaponBuff3::Init
_TEXT	ENDS
PUBLIC	?SetWaitState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z ; ioCreateWeaponBuff3::SetWaitState
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetWaitState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetWaitState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z PROC ; ioCreateWeaponBuff3::SetWaitState, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 269  : 	if ( !pOwner )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 37		 je	 SHORT $LN2@SetWaitSta

; 270  : 		return;
; 271  : 
; 272  : 	m_dwCheckWaitTime = FRAMEGETTIME() + m_dwWaitTime;

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00012	8b c8		 mov	 ecx, eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0001a	03 86 94 09 00
	00		 add	 eax, DWORD PTR [esi+2452]

; 273  : 
; 274  : 	pOwner->AttachEffect( m_szWaitEffect );

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00023	6a 01		 push	 1
  00025	89 86 f4 09 00
	00		 mov	 DWORD PTR [esi+2548], eax
  0002b	6a 00		 push	 0
  0002d	8d 86 84 09 00
	00		 lea	 eax, DWORD PTR [esi+2436]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 275  : 
; 276  : 	m_BuffState = BS_WAIT;

  00039	c7 86 f0 09 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+2544], 1
$LN2@SetWaitSta:
  00043	5e		 pop	 esi

; 277  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?SetWaitState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z ENDP ; ioCreateWeaponBuff3::SetWaitState
_TEXT	ENDS
PUBLIC	?SetFireState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z ; ioCreateWeaponBuff3::SetFireState
; Function compile flags: /Ogsp
;	COMDAT ?SetFireState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetFireState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z PROC ; ioCreateWeaponBuff3::SetFireState, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 281  : 	if ( !pOwner )

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 1a		 je	 SHORT $LN2@SetFireSta

; 282  : 		return;
; 283  : 
; 284  : 	pOwner->EndEffect( m_szWaitEffect, false );

  0000d	6a 01		 push	 1
  0000f	6a 00		 push	 0
  00011	8d 86 84 09 00
	00		 lea	 eax, DWORD PTR [esi+2436]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 285  : 
; 286  : 	m_BuffState = BS_FIRE;

  0001d	c7 86 f0 09 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+2544], 2
$LN2@SetFireSta:
  00027	5e		 pop	 esi

; 287  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?SetFireState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z ENDP ; ioCreateWeaponBuff3::SetFireState
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3LengthSq
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv165 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3LengthSq, COMDAT

; 1725 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1726 : #ifdef D3DX_DEBUG
; 1727 :     if(!pV)
; 1728 :         return 0.0f;
; 1729 : #endif
; 1730 : 
; 1731 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  00006	d9 40 04	 fld	 DWORD PTR [eax+4]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0000e	d9 c1		 fld	 ST(1)
  00010	de ca		 fmulp	 ST(2), ST(0)
  00012	d9 c2		 fld	 ST(2)
  00014	de cb		 fmulp	 ST(3), ST(0)
  00016	d9 c9		 fxch	 ST(1)
  00018	de c2		 faddp	 ST(2), ST(0)
  0001a	d9 c0		 fld	 ST(0)
  0001c	de c9		 fmulp	 ST(1), ST(0)
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 5d 08	 fstp	 DWORD PTR tv165[ebp]
  00023	d9 45 08	 fld	 DWORD PTR tv165[ebp]

; 1732 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3LengthSq
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?Init@WeaponInfo@@QAEXXZ			; WeaponInfo::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ?Init@WeaponInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@WeaponInfo@@QAEXXZ PROC				; WeaponInfo::Init, COMDAT
; _this$ = ecx

; 71   : 		m_iWeaponIdx = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 		m_iResistanceIdx = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   : 
; 74   : 		m_dwWoundedDuration = 0;

  00007	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 75   : 		m_dwCallTime = 0;

  0000a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 76   : 
; 77   : 		m_bWoundedLoopAni = false;

  0000d	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 78   : 
; 79   : 		m_dwDuration = 0;

  00010	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 80   : 	}

  00013	c3		 ret	 0
?Init@WeaponInfo@@QAEXXZ ENDP				; WeaponInfo::Init
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?GetName@ioBuff@@QBEABVioHashString@@XZ		; ioBuff::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetName@ioBuff@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioBuff@@QBEABVioHashString@@XZ PROC		; ioBuff::GetName, COMDAT
; _this$ = ecx

; 440  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 81 34 02 00
	00		 lea	 eax, DWORD PTR [ecx+564]
  00006	c3		 ret	 0
?GetName@ioBuff@@QBEABVioHashString@@XZ ENDP		; ioBuff::GetName
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??4WeaponInfo@@QAEAAU0@ABU0@@Z			; WeaponInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4WeaponInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z PROC			; WeaponInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z ENDP			; WeaponInfo::operator=
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??_7ioCreateWeaponBuff3@@6B@			; ioCreateWeaponBuff3::`vftable'
PUBLIC	??1ioCreateWeaponBuff3@@UAE@XZ			; ioCreateWeaponBuff3::~ioCreateWeaponBuff3
PUBLIC	??_R4ioCreateWeaponBuff3@@6B@			; ioCreateWeaponBuff3::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioCreateWeaponBuff3@@@8			; ioCreateWeaponBuff3 `RTTI Type Descriptor'
PUBLIC	??_R3ioCreateWeaponBuff3@@8			; ioCreateWeaponBuff3::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioCreateWeaponBuff3@@8			; ioCreateWeaponBuff3::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioCreateWeaponBuff3@@8		; ioCreateWeaponBuff3::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioCreateWeaponBuff3@@UAEXAAVioINILoader@@@Z ; ioCreateWeaponBuff3::LoadProperty
PUBLIC	?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ	; ioCreateWeaponBuff3::Clone
PUBLIC	?StartBuff@ioCreateWeaponBuff3@@UAEXPAVioBaseChar@@@Z ; ioCreateWeaponBuff3::StartBuff
PUBLIC	?ApplyStartBuff@ioCreateWeaponBuff3@@UAE_NPAVioBaseChar@@KK@Z ; ioCreateWeaponBuff3::ApplyStartBuff
PUBLIC	?ProcessBuff@ioCreateWeaponBuff3@@UAEXM@Z	; ioCreateWeaponBuff3::ProcessBuff
PUBLIC	?ApplyExtraBuffInfo@ioCreateWeaponBuff3@@UAEXAAVSP2Packet@@@Z ; ioCreateWeaponBuff3::ApplyExtraBuffInfo
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioCreateWeaponBuff3@@UAEPAXI@Z:PROC		; ioCreateWeaponBuff3::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioCreateWeaponBuff3@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioCreateWeaponBuff3@@8 DD FLAT:??_R0?AVioCreateWeaponBuff3@@@8 ; ioCreateWeaponBuff3::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioCreateWeaponBuff3@@8
rdata$r	ENDS
;	COMDAT ??_R2ioCreateWeaponBuff3@@8
rdata$r	SEGMENT
??_R2ioCreateWeaponBuff3@@8 DD FLAT:??_R1A@?0A@EA@ioCreateWeaponBuff3@@8 ; ioCreateWeaponBuff3::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioCreateWeaponBuff3@@8
rdata$r	SEGMENT
??_R3ioCreateWeaponBuff3@@8 DD 00H			; ioCreateWeaponBuff3::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioCreateWeaponBuff3@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioCreateWeaponBuff3@@@8
_DATA	SEGMENT
??_R0?AVioCreateWeaponBuff3@@@8 DD FLAT:??_7type_info@@6B@ ; ioCreateWeaponBuff3 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioCreateWeaponBuff3@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioCreateWeaponBuff3@@6B@
rdata$r	SEGMENT
??_R4ioCreateWeaponBuff3@@6B@ DD 00H			; ioCreateWeaponBuff3::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioCreateWeaponBuff3@@@8
	DD	FLAT:??_R3ioCreateWeaponBuff3@@8
rdata$r	ENDS
;	COMDAT ??_7ioCreateWeaponBuff3@@6B@
CONST	SEGMENT
??_7ioCreateWeaponBuff3@@6B@ DD FLAT:??_R4ioCreateWeaponBuff3@@6B@ ; ioCreateWeaponBuff3::`vftable'
	DD	FLAT:?LoadProperty@ioCreateWeaponBuff3@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioCreateWeaponBuff3@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioCreateWeaponBuff3@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioCreateWeaponBuff3@@UAEXM@Z
	DD	FLAT:?EndBuff@ioCreateWeaponBuff3@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioCreateWeaponBuff3@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioCreateWeaponBuff3@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioCreateWeaponBuff3@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$3
__ehfuncinfo$??1ioCreateWeaponBuff3@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1ioCreateWeaponBuff3@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponbuff3.cpp
xdata$x	ENDS
;	COMDAT ??1ioCreateWeaponBuff3@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioCreateWeaponBuff3@@UAE@XZ PROC			; ioCreateWeaponBuff3::~ioCreateWeaponBuff3, COMDAT
; _this$ = ecx

; 32   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioCreateWeaponBuff3@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateWeaponBuff3@@6B@

; 33   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e 00 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2560]
  00023	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0002a	ff d7		 call	 edi
  0002c	8d 8e d0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2512]
  00032	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00036	ff d7		 call	 edi
  00038	8d 8e a8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2472]
  0003e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00042	ff d7		 call	 edi
  00044	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  0004a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0004e	ff d7		 call	 edi
  00050	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  0005b	e8 00 00 00 00	 call	 __EH_epilog3
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 84 09 00
	00		 add	 ecx, 2436		; 00000984H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a0 09 00
	00		 add	 ecx, 2464		; 000009a0H
  00020	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__unwindfunclet$??1ioCreateWeaponBuff3@@UAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 c8 09 00
	00		 add	 ecx, 2504		; 000009c8H
  0002e	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$??1ioCreateWeaponBuff3@@UAE@XZ:
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioCreateWeaponBuff3@@UAE@XZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioCreateWeaponBuff3@@UAE@XZ ENDP			; ioCreateWeaponBuff3::~ioCreateWeaponBuff3
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z:PROC ; ioBaseChar::ApplyOutLineChange
EXTRN	?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z:PROC ; Help::InitColorValue
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponbuff3.cpp
;	COMDAT ?StartBuff@ioCreateWeaponBuff3@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_kColor$523899 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?StartBuff@ioCreateWeaponBuff3@@UAEXPAVioBaseChar@@@Z PROC ; ioCreateWeaponBuff3::StartBuff, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]

; 78   : 	ioBuff::StartBuff( pOwner );

  00015	57		 push	 edi
  00016	8b f1		 mov	 esi, ecx
  00018	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 79   : 	
; 80   : 	if( m_bEnableOutLine )

  0001d	80 be 6c 09 00
	00 00		 cmp	 BYTE PTR [esi+2412], 0
  00024	74 64		 je	 SHORT $LN1@StartBuff

; 81   : 	{
; 82   : 		D3DCOLORVALUE kColor;
; 83   : 		Help::InitColorValue( kColor, m_fOutLineR, m_fOutLineG, m_fOutLineB, m_fOutLineAlpha );

  00026	f3 0f 10 86 7c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2428]
  0002e	83 ec 10	 sub	 esp, 16			; 00000010H
  00031	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00037	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  0003f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00045	f3 0f 10 86 74
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2420]
  0004d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00053	f3 0f 10 86 70
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2416]
  0005b	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523899[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z ; Help::InitColorValue

; 84   : 		m_pOwner->ApplyOutLineChange( COT_BUFF_PROTECTION, kColor, m_fOutLineThickness );

  00069	f3 0f 10 86 80
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2432]
  00071	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00077	83 c4 10	 add	 esp, 16			; 00000010H
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523899[ebp]
  00082	50		 push	 eax
  00083	6a 01		 push	 1
  00085	e8 00 00 00 00	 call	 ?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z ; ioBaseChar::ApplyOutLineChange
$LN1@StartBuff:

; 85   : 	}
; 86   : 	
; 87   : 	Init();

  0008a	83 a6 f0 09 00
	00 00		 and	 DWORD PTR [esi+2544], 0
  00091	83 a6 f4 09 00
	00 00		 and	 DWORD PTR [esi+2548], 0

; 88   : 	SetWaitState( pOwner );

  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?SetWaitState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z ; ioCreateWeaponBuff3::SetWaitState

; 89   : }

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a3	5f		 pop	 edi
  000a4	33 cd		 xor	 ecx, ebp
  000a6	5e		 pop	 esi
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	c9		 leave
  000ad	c2 04 00	 ret	 4
?StartBuff@ioCreateWeaponBuff3@@UAEXPAVioBaseChar@@@Z ENDP ; ioCreateWeaponBuff3::StartBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioCreateWeaponBuff3@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_kColor$523908 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioCreateWeaponBuff3@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioCreateWeaponBuff3::ApplyStartBuff, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi

; 93   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00012	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00015	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00018	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0001b	8b f1		 mov	 esi, ecx
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00023	84 c0		 test	 al, al
  00025	0f 84 85 00 00
	00		 je	 $LN3@ApplyStart
$LN2@ApplyStart:

; 94   : 		return false;
; 95   : 	
; 96   : 	if( m_bEnableOutLine )

  0002b	80 be 6c 09 00
	00 00		 cmp	 BYTE PTR [esi+2412], 0
  00032	74 64		 je	 SHORT $LN1@ApplyStart

; 97   : 	{
; 98   : 		D3DCOLORVALUE kColor;
; 99   : 		Help::InitColorValue( kColor, m_fOutLineR, m_fOutLineG, m_fOutLineB, m_fOutLineAlpha );

  00034	f3 0f 10 86 7c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2428]
  0003c	83 ec 10	 sub	 esp, 16			; 00000010H
  0003f	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00045	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  0004d	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00053	f3 0f 10 86 74
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2420]
  0005b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00061	f3 0f 10 86 70
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2416]
  00069	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523908[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z ; Help::InitColorValue

; 100  : 		m_pOwner->ApplyOutLineChange( COT_BUFF_PROTECTION, kColor, m_fOutLineThickness );

  00077	f3 0f 10 86 80
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2432]
  0007f	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00085	83 c4 10	 add	 esp, 16			; 00000010H
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523908[ebp]
  00090	50		 push	 eax
  00091	6a 01		 push	 1
  00093	e8 00 00 00 00	 call	 ?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z ; ioBaseChar::ApplyOutLineChange
$LN1@ApplyStart:

; 101  : 	}
; 102  : 
; 103  : 	Init();

  00098	83 a6 f0 09 00
	00 00		 and	 DWORD PTR [esi+2544], 0
  0009f	83 a6 f4 09 00
	00 00		 and	 DWORD PTR [esi+2548], 0

; 104  : 	SetWaitState( pOwner );

  000a6	57		 push	 edi
  000a7	8b ce		 mov	 ecx, esi
  000a9	e8 00 00 00 00	 call	 ?SetWaitState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z ; ioCreateWeaponBuff3::SetWaitState

; 105  : 
; 106  : 	return true;

  000ae	b0 01		 mov	 al, 1
$LN3@ApplyStart:

; 107  : }

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	5f		 pop	 edi
  000b4	33 cd		 xor	 ecx, ebp
  000b6	5e		 pop	 esi
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	c9		 leave
  000bd	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioCreateWeaponBuff3@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioCreateWeaponBuff3::ApplyStartBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ; ioINILoader::LoadBool_e<15>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<15>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadBool_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadBool_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadBool_e
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadBool_e
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadBool_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadBool_e
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadBool_e
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadBool_e
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadBool_e:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadBool_e
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadBool_e:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadBool_e
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadBool_e:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001cf	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ; ioINILoader::LoadFloat_e<18>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<18>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadFloat_
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadFloat_
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadFloat_
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadFloat_
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadFloat_
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadFloat_
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadFloat_
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadFloat_
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadFloat_:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001f8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001fd	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00201	51		 push	 ecx
  00202	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	50		 push	 eax
  0020b	8b ce		 mov	 ecx, esi
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00213	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00216	33 cd		 xor	 ecx, ebp
  00218	5e		 pop	 esi
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	c9		 leave
  0021f	c2 08 00	 ret	 8
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ; ioINILoader::LoadFloat_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<20>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadFloat_@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadFloat_@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadFloat_@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadFloat_@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadFloat_@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadFloat_@2
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadFloat_@2
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadFloat_@2
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@2
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadFloat_@2
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadFloat_@2
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadFloat_@2
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadFloat_@2
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadFloat_@2:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadFloat_@2:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadFloat_@2:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00238	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0023d	51		 push	 ecx
  0023e	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	50		 push	 eax
  00247	8b ce		 mov	 ecx, esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0024f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	5e		 pop	 esi
  00253	33 cd		 xor	 ecx, ebp
  00255	5b		 pop	 ebx
  00256	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025b	c9		 leave
  0025c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ; ioINILoader::LoadFloat_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<19>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadFloat_@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadFloat_@3
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadFloat_@3
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadFloat_@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadFloat_@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadFloat_@3
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadFloat_@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadFloat_@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadFloat_@3
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadFloat_@3
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadFloat_@3
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadFloat_@3
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadFloat_@3
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@3
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadFloat_@3
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadFloat_@3
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadFloat_@3
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadFloat_@3
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadFloat_@3:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadFloat_@3:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadFloat_@3:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  00229	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0022e	51		 push	 ecx
  0022f	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	50		 push	 eax
  00238	8b ce		 mov	 ecx, esi
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00240	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	5e		 pop	 esi
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	c9		 leave
  0024c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<19>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<12>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<12>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 32 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 1b 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 04 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 ec 00 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 d5 00 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 be 00 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 a8 00 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 92 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	74 7f		 je	 SHORT $LN88@LoadString
  000ac	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000af	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b2	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b5	84 d2		 test	 dl, dl
  000b7	74 6c		 je	 SHORT $LN87@LoadString
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	74 5a		 je	 SHORT $LN86@LoadString
  000c6	32 d1		 xor	 dl, cl
  000c8	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000cc	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	0f 84 89 00 00
	00		 je	 $LN111@LoadString
  000d5	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d8	84 d2		 test	 dl, dl
  000da	74 3e		 je	 SHORT $LN84@LoadString
  000dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000df	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 2b		 je	 SHORT $LN83@LoadString
  000e9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ec	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000ef	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f2	84 d2		 test	 dl, dl
  000f4	74 19		 je	 SHORT $LN82@LoadString
  000f6	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f9	32 d1		 xor	 dl, cl
  000fb	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000fe	84 c0		 test	 al, al
  00100	74 07		 je	 SHORT $LN81@LoadString
  00102	34 ea		 xor	 al, -22			; ffffffeaH
  00104	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  00107	eb 55		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00109	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0010d	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0010f	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  00112	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00114	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00118	eb 44		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0011a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0011e	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00120	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  00123	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00125	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00129	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0012b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0012f	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00131	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00135	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00137	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  0013a	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  0013c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00140	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00142	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00146	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  00148	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0014c	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  0014e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00152	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00154	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00158	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0015a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0015e	6a 02		 push	 2
  00160	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00163	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  00167	5a		 pop	 edx
$LL104@LoadString:
  00168	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0016e	83 c0 04	 add	 eax, 4
  00171	4a		 dec	 edx
  00172	75 f4		 jne	 SHORT $LL104@LoadString
  00174	6a 08		 push	 8
  00176	58		 pop	 eax
$LL101@LoadString:
  00177	8b c8		 mov	 ecx, eax
  00179	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017f	79 05		 jns	 SHORT $LN112@LoadString
  00181	49		 dec	 ecx
  00182	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00185	41		 inc	 ecx
$LN112@LoadString:
  00186	b2 ed		 mov	 dl, -19			; ffffffedH
  00188	2a d1		 sub	 dl, cl
  0018a	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  0018e	40		 inc	 eax
  0018f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00192	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00194	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00197	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0019a	57		 push	 edi
  0019b	56		 push	 esi
  0019c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0019f	50		 push	 eax
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5e		 pop	 esi
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	c9		 leave
  001b3	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z	; ioINILoader::LoadInt_e<10>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z PROC	; ioINILoader::LoadInt_e<10>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@LoadInt_e
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@LoadInt_e
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@LoadInt_e
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@LoadInt_e
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@LoadInt_e
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@LoadInt_e
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@LoadInt_e
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@LoadInt_e
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@LoadInt_e
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@LoadInt_e:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00144	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00147	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ; ioINILoader::LoadFloat_e<11>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<11>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadFloat_@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadFloat_@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadFloat_@4
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadFloat_@4
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadFloat_@4
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadFloat_@4
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadFloat_@4
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadFloat_@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadFloat_@4
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadFloat_@4
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadFloat_@4
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadFloat_@4
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadFloat_@4
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadFloat_@4
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadFloat_@4
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadFloat_@4:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadFloat_@4:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadFloat_@4:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00183	51		 push	 ecx
  00184	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	33 cd		 xor	 ecx, ebp
  0019a	5e		 pop	 esi
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	c9		 leave
  001a1	c2 08 00	 ret	 8
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<19>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadInt_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadInt_e@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadInt_e@2
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadInt_e@2
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadInt_e@2
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e@2
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadInt_e@2
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadInt_e@2
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadInt_e@2
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadInt_e@2
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadInt_e@2
$LN75@LoadInt_e@2:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadInt_e@2:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadInt_e@2:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00229	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BK@@ioINILoader@@QAEHAAY0BK@$$CBDH@Z ; ioINILoader::LoadInt_e<26>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BK@@ioINILoader@@QAEHAAY0BK@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -36						; size = 26
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BK@@ioINILoader@@QAEHAAY0BK@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<26>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 79 02 00
	00		 je	 $LN96@LoadInt_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 62 02 00
	00		 je	 $LN95@LoadInt_e@3
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 4b 02 00
	00		 je	 $LN94@LoadInt_e@3
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 33 02 00
	00		 je	 $LN93@LoadInt_e@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 1b 02 00
	00		 je	 $LN92@LoadInt_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 04 02 00
	00		 je	 $LN91@LoadInt_e@3
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 ee 01 00
	00		 je	 $LN90@LoadInt_e@3
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 d9 01 00
	00		 je	 $LN89@LoadInt_e@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 c3 01 00
	00		 je	 $LN88@LoadInt_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 ac 01 00
	00		 je	 $LN87@LoadInt_e@3
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 96 01 00
	00		 je	 $LN86@LoadInt_e@3
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 81 01 00
	00		 je	 $LN85@LoadInt_e@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 6b 01 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 54 01 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 3e 01 00
	00		 je	 $LN82@LoadInt_e@3
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 29 01 00
	00		 je	 $LN81@LoadInt_e@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 13 01 00
	00		 je	 $LN80@LoadInt_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 fc 00 00
	00		 je	 $LN79@LoadInt_e@3
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 e6 00 00
	00		 je	 $LN78@LoadInt_e@3
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 d1 00 00
	00		 je	 $LN77@LoadInt_e@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 bb 00 00
	00		 je	 $LN76@LoadInt_e@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 a4 00 00
	00		 je	 $LN75@LoadInt_e@3
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 8e 00 00
	00		 je	 $LN74@LoadInt_e@3
  00191	32 d1		 xor	 dl, cl
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	74 7d		 je	 SHORT $LN73@LoadInt_e@3
  0019d	32 d3		 xor	 dl, bl
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a5	84 d2		 test	 dl, dl
  001a7	74 68		 je	 SHORT $LN72@LoadInt_e@3
  001a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ac	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	0f 84 e5 00 00
	00		 je	 $LN1@LoadInt_e@3
  001b9	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bc	84 d2		 test	 dl, dl
  001be	74 49		 je	 SHORT $LN70@LoadInt_e@3
  001c0	32 d1		 xor	 dl, cl
  001c2	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c5	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c8	84 d2		 test	 dl, dl
  001ca	74 35		 je	 SHORT $LN69@LoadInt_e@3
  001cc	32 d3		 xor	 dl, bl
  001ce	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d1	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d4	84 d2		 test	 dl, dl
  001d6	74 20		 je	 SHORT $LN68@LoadInt_e@3
  001d8	8a 40 1d	 mov	 al, BYTE PTR [eax+29]
  001db	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001de	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e1	84 c0		 test	 al, al
  001e3	74 0a		 je	 SHORT $LN67@LoadInt_e@3
  001e5	34 ec		 xor	 al, -20			; ffffffecH
  001e7	88 45 f9	 mov	 BYTE PTR __k$[ebp+29], al
  001ea	e9 af 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN67@LoadInt_e@3:
  001ef	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+29], -20 ; ffffffecH
  001f3	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN68@LoadInt_e@3:
  001f8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001fc	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN69@LoadInt_e@3:
  00201	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  00204	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN70@LoadInt_e@3:
  00209	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  0020c	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN72@LoadInt_e@3:
  00211	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00215	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN73@LoadInt_e@3:
  0021a	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  0021d	eb 7f		 jmp	 SHORT $LN1@LoadInt_e@3
$LN74@LoadInt_e@3:
  0021f	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00222	eb 7a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  00224	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00228	eb 74		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  0022a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0022e	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  00230	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  00233	eb 69		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  00235	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00238	eb 64		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  0023a	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0023e	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  00240	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00244	eb 58		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  00246	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00249	eb 53		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  0024b	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0024e	eb 4e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  00250	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00254	eb 48		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00256	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0025a	eb 42		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  0025c	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  0025f	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  00261	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00264	eb 38		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  00266	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0026a	eb 32		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  0026c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00270	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  00272	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  00275	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  00277	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  0027a	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  0027c	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00280	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  00282	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00286	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  00288	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0028c	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  0028e	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00292	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  00294	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00298	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  0029a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  0029e	6a 06		 push	 6
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+25], 0
  002a7	5a		 pop	 edx
$LL104@LoadInt_e@3:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	4a		 dec	 edx
  002b2	75 f4		 jne	 SHORT $LL104@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  002b4	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  002b7	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002bb	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002be	50		 push	 eax
  002bf	8b ce		 mov	 ecx, esi
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ca	5e		 pop	 esi
  002cb	33 cd		 xor	 ecx, ebp
  002cd	5b		 pop	 ebx
  002ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d3	c9		 leave
  002d4	c2 08 00	 ret	 8
??$LoadInt_e@$0BK@@ioINILoader@@QAEHAAY0BK@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<26>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<21>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 f7 01 00
	00		 je	 $LN96@LoadString@2
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 e0 01 00
	00		 je	 $LN95@LoadString@2
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 c8 01 00
	00		 je	 $LN94@LoadString@2
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 b0 01 00
	00		 je	 $LN93@LoadString@2
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 99 01 00
	00		 je	 $LN92@LoadString@2
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 83 01 00
	00		 je	 $LN91@LoadString@2
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 6e 01 00
	00		 je	 $LN90@LoadString@2
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 58 01 00
	00		 je	 $LN89@LoadString@2
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 41 01 00
	00		 je	 $LN88@LoadString@2
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 2b 01 00
	00		 je	 $LN87@LoadString@2
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 16 01 00
	00		 je	 $LN86@LoadString@2
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 00 01 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 e9 00 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 d3 00 00
	00		 je	 $LN83@LoadString@2
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 be 00 00
	00		 je	 $LN82@LoadString@2
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 a8 00 00
	00		 je	 $LN81@LoadString@2
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 91 00 00
	00		 je	 $LN80@LoadString@2
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	74 7f		 je	 SHORT $LN79@LoadString@2
  00142	32 d1		 xor	 dl, cl
  00144	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00147	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014a	84 d2		 test	 dl, dl
  0014c	74 6e		 je	 SHORT $LN78@LoadString@2
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	74 5c		 je	 SHORT $LN77@LoadString@2
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	0f 84 ba 00 00
	00		 je	 $LN111@LoadString@2
  0016a	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0016d	84 d2		 test	 dl, dl
  0016f	74 40		 je	 SHORT $LN75@LoadString@2
  00171	32 d1		 xor	 dl, cl
  00173	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00176	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00179	84 d2		 test	 dl, dl
  0017b	74 2f		 je	 SHORT $LN74@LoadString@2
  0017d	32 d3		 xor	 dl, bl
  0017f	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00182	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00185	84 d2		 test	 dl, dl
  00187	74 1d		 je	 SHORT $LN73@LoadString@2
  00189	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  0018c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0018f	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00192	84 c0		 test	 al, al
  00194	74 0a		 je	 SHORT $LN72@LoadString@2
  00196	34 ed		 xor	 al, -19			; ffffffedH
  00198	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  0019b	e9 84 00 00 00	 jmp	 $LN111@LoadString@2
$LN72@LoadString@2:
  001a0	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001a4	eb 7e		 jmp	 SHORT $LN111@LoadString@2
$LN73@LoadString@2:
  001a6	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001aa	eb 78		 jmp	 SHORT $LN111@LoadString@2
$LN74@LoadString@2:
  001ac	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001af	eb 73		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  001b1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001b4	eb 6e		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  001b6	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001ba	eb 68		 jmp	 SHORT $LN111@LoadString@2
$LN78@LoadString@2:
  001bc	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001bf	eb 63		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  001c1	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001c4	eb 5e		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  001c6	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ca	eb 58		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  001cc	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001d0	eb 52		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  001d2	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001d5	eb 4d		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  001d7	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001da	eb 48		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  001dc	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001e0	eb 42		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  001e2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001e6	eb 3c		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  001e8	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001eb	eb 37		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  001ed	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001f0	eb 32		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  001f2	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001f6	eb 2c		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  001f8	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001fc	eb 26		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  001fe	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  00201	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  00203	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00206	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  00208	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0020c	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  0020e	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00212	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  00214	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00218	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  0021a	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0021e	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  00220	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  00224	6a 05		 push	 5
  00226	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00229	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  0022d	5a		 pop	 edx
$LL104@LoadString@2:
  0022e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00234	83 c0 04	 add	 eax, 4
  00237	4a		 dec	 edx
  00238	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  0023a	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0023d	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00240	57		 push	 edi
  00241	56		 push	 esi
  00242	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0024c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024f	5f		 pop	 edi
  00250	5e		 pop	 esi
  00251	33 cd		 xor	 ecx, ebp
  00253	5b		 pop	 ebx
  00254	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00259	c9		 leave
  0025a	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z ; ioINILoader::LoadBool_e<30>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<30>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 02 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 02 00
	00		 je	 $LN95@LoadBool_e@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 af 02 00
	00		 je	 $LN94@LoadBool_e@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 97 02 00
	00		 je	 $LN93@LoadBool_e@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 02 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 68 02 00
	00		 je	 $LN91@LoadBool_e@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 52 02 00
	00		 je	 $LN90@LoadBool_e@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 3d 02 00
	00		 je	 $LN89@LoadBool_e@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 02 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 10 02 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 fa 01 00
	00		 je	 $LN86@LoadBool_e@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 e5 01 00
	00		 je	 $LN85@LoadBool_e@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 01 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b8 01 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 a2 01 00
	00		 je	 $LN82@LoadBool_e@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 8d 01 00
	00		 je	 $LN81@LoadBool_e@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 77 01 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 60 01 00
	00		 je	 $LN79@LoadBool_e@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 4a 01 00
	00		 je	 $LN78@LoadBool_e@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 35 01 00
	00		 je	 $LN77@LoadBool_e@2
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 1f 01 00
	00		 je	 $LN76@LoadBool_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 08 01 00
	00		 je	 $LN75@LoadBool_e@2
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 f2 00 00
	00		 je	 $LN74@LoadBool_e@2
  00191	32 d1		 xor	 dl, cl
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 dd 00 00
	00		 je	 $LN73@LoadBool_e@2
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 c4 00 00
	00		 je	 $LN72@LoadBool_e@2
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 aa 00 00
	00		 je	 $LN71@LoadBool_e@2
  001c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c5	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c8	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001cb	84 d2		 test	 dl, dl
  001cd	0f 84 91 00 00
	00		 je	 $LN70@LoadBool_e@2
  001d3	32 d1		 xor	 dl, cl
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	74 7d		 je	 SHORT $LN69@LoadBool_e@2
  001df	32 d3		 xor	 dl, bl
  001e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e4	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001e7	84 d2		 test	 dl, dl
  001e9	74 68		 je	 SHORT $LN68@LoadBool_e@2
  001eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ee	80 78 1d 00	 cmp	 BYTE PTR [eax+29], 0
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	0f 84 07 01 00
	00		 je	 $LN1@LoadBool_e@2
  001fb	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001fe	84 d2		 test	 dl, dl
  00200	74 49		 je	 SHORT $LN66@LoadBool_e@2
  00202	32 d1		 xor	 dl, cl
  00204	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00207	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020a	84 d2		 test	 dl, dl
  0020c	74 35		 je	 SHORT $LN65@LoadBool_e@2
  0020e	32 d3		 xor	 dl, bl
  00210	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00213	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  00216	84 d2		 test	 dl, dl
  00218	74 20		 je	 SHORT $LN64@LoadBool_e@2
  0021a	8a 40 21	 mov	 al, BYTE PTR [eax+33]
  0021d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00220	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00223	84 c0		 test	 al, al
  00225	74 0a		 je	 SHORT $LN63@LoadBool_e@2
  00227	34 ec		 xor	 al, -20			; ffffffecH
  00229	88 45 f9	 mov	 BYTE PTR __k$[ebp+33], al
  0022c	e9 d1 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN63@LoadBool_e@2:
  00231	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+33], -20 ; ffffffecH
  00235	e9 c8 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN64@LoadBool_e@2:
  0023a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  0023e	e9 bf 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN65@LoadBool_e@2:
  00243	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  00246	e9 b7 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN66@LoadBool_e@2:
  0024b	88 4d f6	 mov	 BYTE PTR __k$[ebp+30], cl
  0024e	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN68@LoadBool_e@2:
  00253	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00257	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN69@LoadBool_e@2:
  0025c	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  0025f	e9 9e 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN70@LoadBool_e@2:
  00264	88 4d f2	 mov	 BYTE PTR __k$[ebp+26], cl
  00267	e9 96 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN71@LoadBool_e@2:
  0026c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  00270	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN72@LoadBool_e@2:
  00275	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00279	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN73@LoadBool_e@2:
  0027e	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00281	eb 7f		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  00283	88 4d ee	 mov	 BYTE PTR __k$[ebp+22], cl
  00286	eb 7a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  00288	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0028c	eb 74		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  0028e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00292	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  00294	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  00297	eb 69		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  00299	88 4d ea	 mov	 BYTE PTR __k$[ebp+18], cl
  0029c	eb 64		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  0029e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  002a2	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  002a4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002a8	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  002aa	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002ad	eb 53		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  002af	88 4d e6	 mov	 BYTE PTR __k$[ebp+14], cl
  002b2	eb 4e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  002b4	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  002b8	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  002ba	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002be	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  002c0	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002c3	eb 3d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  002c5	88 4d e2	 mov	 BYTE PTR __k$[ebp+10], cl
  002c8	eb 38		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  002ca	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  002ce	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  002d0	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002d4	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  002d6	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002d9	eb 27		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  002db	88 4d de	 mov	 BYTE PTR __k$[ebp+6], cl
  002de	eb 22		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  002e0	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  002e4	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  002e6	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002ea	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  002ec	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002f0	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  002f2	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002f6	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  002f8	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002fc	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  002fe	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  00302	6a 07		 push	 7
  00304	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00307	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+29], 0
  0030b	5a		 pop	 edx
$LL104@LoadBool_e@2:
  0030c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00312	83 c0 04	 add	 eax, 4
  00315	4a		 dec	 edx
  00316	75 f4		 jne	 SHORT $LL104@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00318	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0031b	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0031f	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00322	50		 push	 eax
  00323	8b ce		 mov	 ecx, esi
  00325	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  0032b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032e	5e		 pop	 esi
  0032f	33 cd		 xor	 ecx, ebp
  00331	5b		 pop	 ebx
  00332	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00337	c9		 leave
  00338	c2 08 00	 ret	 8
??$LoadBool_e@$0BO@@ioINILoader@@QAE_NAAY0BO@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<30>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z ; ioINILoader::LoadInt_e<18>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<18>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadInt_e@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadInt_e@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadInt_e@4
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadInt_e@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadInt_e@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadInt_e@4
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadInt_e@4
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadInt_e@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadInt_e@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadInt_e@4
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadInt_e@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadInt_e@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadInt_e@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadInt_e@4
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadInt_e@4
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadInt_e@4
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadInt_e@4
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadInt_e@4
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadInt_e@4
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadInt_e@4
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadInt_e@4
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadInt_e@4
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadInt_e@4
$LN75@LoadInt_e@4:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadInt_e@4
$LN76@LoadInt_e@4:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN77@LoadInt_e@4:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadInt_e@4
$LN78@LoadInt_e@4:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadInt_e@4
$LN83@LoadInt_e@4:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadInt_e@4:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  001f8	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001fb	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ff	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00202	50		 push	 eax
  00203	8b ce		 mov	 ecx, esi
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0020b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020e	33 cd		 xor	 ecx, ebp
  00210	5e		 pop	 esi
  00211	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00216	c9		 leave
  00217	c2 08 00	 ret	 8
??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z ; ioINILoader::LoadInt_e<25>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<25>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 5f 02 00
	00		 je	 $LN96@LoadInt_e@5
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 48 02 00
	00		 je	 $LN95@LoadInt_e@5
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 30 02 00
	00		 je	 $LN94@LoadInt_e@5
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 18 02 00
	00		 je	 $LN93@LoadInt_e@5
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 01 02 00
	00		 je	 $LN92@LoadInt_e@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 eb 01 00
	00		 je	 $LN91@LoadInt_e@5
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 d6 01 00
	00		 je	 $LN90@LoadInt_e@5
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 c0 01 00
	00		 je	 $LN89@LoadInt_e@5
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 a9 01 00
	00		 je	 $LN88@LoadInt_e@5
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 93 01 00
	00		 je	 $LN87@LoadInt_e@5
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 7e 01 00
	00		 je	 $LN86@LoadInt_e@5
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 68 01 00
	00		 je	 $LN85@LoadInt_e@5
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 51 01 00
	00		 je	 $LN84@LoadInt_e@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 3b 01 00
	00		 je	 $LN83@LoadInt_e@5
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 26 01 00
	00		 je	 $LN82@LoadInt_e@5
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 10 01 00
	00		 je	 $LN81@LoadInt_e@5
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 f9 00 00
	00		 je	 $LN80@LoadInt_e@5
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 e3 00 00
	00		 je	 $LN79@LoadInt_e@5
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ce 00 00
	00		 je	 $LN78@LoadInt_e@5
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 b8 00 00
	00		 je	 $LN77@LoadInt_e@5
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 a1 00 00
	00		 je	 $LN76@LoadInt_e@5
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 8b 00 00
	00		 je	 $LN75@LoadInt_e@5
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	74 7a		 je	 SHORT $LN74@LoadInt_e@5
  0018c	32 d3		 xor	 dl, bl
  0018e	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00194	84 d2		 test	 dl, dl
  00196	74 68		 je	 SHORT $LN73@LoadInt_e@5
  00198	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0019b	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	0f 84 dc 00 00
	00		 je	 $LN1@LoadInt_e@5
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 49		 je	 SHORT $LN71@LoadInt_e@5
  001af	32 d1		 xor	 dl, cl
  001b1	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001b4	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b7	84 d2		 test	 dl, dl
  001b9	74 35		 je	 SHORT $LN70@LoadInt_e@5
  001bb	32 d3		 xor	 dl, bl
  001bd	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c0	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c3	84 d2		 test	 dl, dl
  001c5	74 20		 je	 SHORT $LN69@LoadInt_e@5
  001c7	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001cd	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d0	84 c0		 test	 al, al
  001d2	74 0a		 je	 SHORT $LN68@LoadInt_e@5
  001d4	34 ed		 xor	 al, -19			; ffffffedH
  001d6	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001d9	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN68@LoadInt_e@5:
  001de	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001e2	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN69@LoadInt_e@5:
  001e7	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001eb	e9 94 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN70@LoadInt_e@5:
  001f0	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001f3	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN71@LoadInt_e@5:
  001f8	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  001fb	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN73@LoadInt_e@5:
  00200	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00204	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN74@LoadInt_e@5:
  00206	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00209	eb 79		 jmp	 SHORT $LN1@LoadInt_e@5
$LN75@LoadInt_e@5:
  0020b	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  0020e	eb 74		 jmp	 SHORT $LN1@LoadInt_e@5
$LN76@LoadInt_e@5:
  00210	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00214	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN77@LoadInt_e@5:
  00216	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0021a	eb 68		 jmp	 SHORT $LN1@LoadInt_e@5
$LN78@LoadInt_e@5:
  0021c	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  0021f	eb 63		 jmp	 SHORT $LN1@LoadInt_e@5
$LN79@LoadInt_e@5:
  00221	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00224	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN80@LoadInt_e@5:
  00226	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0022a	eb 58		 jmp	 SHORT $LN1@LoadInt_e@5
$LN81@LoadInt_e@5:
  0022c	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00230	eb 52		 jmp	 SHORT $LN1@LoadInt_e@5
$LN82@LoadInt_e@5:
  00232	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  00235	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@5
$LN83@LoadInt_e@5:
  00237	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0023a	eb 48		 jmp	 SHORT $LN1@LoadInt_e@5
$LN84@LoadInt_e@5:
  0023c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00240	eb 42		 jmp	 SHORT $LN1@LoadInt_e@5
$LN85@LoadInt_e@5:
  00242	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00246	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN86@LoadInt_e@5:
  00248	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  0024b	eb 37		 jmp	 SHORT $LN1@LoadInt_e@5
$LN87@LoadInt_e@5:
  0024d	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00250	eb 32		 jmp	 SHORT $LN1@LoadInt_e@5
$LN88@LoadInt_e@5:
  00252	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00256	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN89@LoadInt_e@5:
  00258	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0025c	eb 26		 jmp	 SHORT $LN1@LoadInt_e@5
$LN90@LoadInt_e@5:
  0025e	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00261	eb 21		 jmp	 SHORT $LN1@LoadInt_e@5
$LN91@LoadInt_e@5:
  00263	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00266	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN92@LoadInt_e@5:
  00268	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0026c	eb 16		 jmp	 SHORT $LN1@LoadInt_e@5
$LN93@LoadInt_e@5:
  0026e	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00272	eb 10		 jmp	 SHORT $LN1@LoadInt_e@5
$LN94@LoadInt_e@5:
  00274	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00278	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@5
$LN95@LoadInt_e@5:
  0027a	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0027e	eb 04		 jmp	 SHORT $LN1@LoadInt_e@5
$LN96@LoadInt_e@5:
  00280	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@5:
  00284	6a 06		 push	 6
  00286	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00289	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  0028d	5a		 pop	 edx
$LL104@LoadInt_e@5:
  0028e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00294	83 c0 04	 add	 eax, 4
  00297	4a		 dec	 edx
  00298	75 f4		 jne	 SHORT $LL104@LoadInt_e@5

; 120  : 		return LoadInt(_k, i);

  0029a	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0029d	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a0	50		 push	 eax
  002a1	8b ce		 mov	 ecx, esi
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ac	5e		 pop	 esi
  002ad	33 cd		 xor	 ecx, ebp
  002af	5b		 pop	 ebx
  002b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b5	c9		 leave
  002b6	c2 08 00	 ret	 8
??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<25>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString@3
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString@3
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString@3
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString@3
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString@3
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString@3
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString@3
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString@3
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString@3
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString@3
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString@3
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString@3
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString@3
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString@3
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString@3
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString@3
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString@3
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString@3
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString@3
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@3
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString@3
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString@3
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString@3
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString@3
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString@3
$LN73@LoadString@3:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString@3
$LN74@LoadString@3:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString@3
$LN75@LoadString@3:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString@3
$LN76@LoadString@3:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString@3:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString@3
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString@3:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString@3
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString@3:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BN@@ioINILoader@@QAE_NAAY0BN@$$CBD_N@Z ; ioINILoader::LoadBool_e<29>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BN@@ioINILoader@@QAE_NAAY0BN@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -40						; size = 29
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BN@@ioINILoader@@QAE_NAAY0BN@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<29>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 c3 02 00
	00		 je	 $LN96@LoadBool_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 ac 02 00
	00		 je	 $LN95@LoadBool_e@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 94 02 00
	00		 je	 $LN94@LoadBool_e@3
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 7c 02 00
	00		 je	 $LN93@LoadBool_e@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 65 02 00
	00		 je	 $LN92@LoadBool_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 4f 02 00
	00		 je	 $LN91@LoadBool_e@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 3a 02 00
	00		 je	 $LN90@LoadBool_e@3
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 24 02 00
	00		 je	 $LN89@LoadBool_e@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 0d 02 00
	00		 je	 $LN88@LoadBool_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 f7 01 00
	00		 je	 $LN87@LoadBool_e@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 e2 01 00
	00		 je	 $LN86@LoadBool_e@3
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 cc 01 00
	00		 je	 $LN85@LoadBool_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 b5 01 00
	00		 je	 $LN84@LoadBool_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 9f 01 00
	00		 je	 $LN83@LoadBool_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 8a 01 00
	00		 je	 $LN82@LoadBool_e@3
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 74 01 00
	00		 je	 $LN81@LoadBool_e@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 5d 01 00
	00		 je	 $LN80@LoadBool_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 47 01 00
	00		 je	 $LN79@LoadBool_e@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 32 01 00
	00		 je	 $LN78@LoadBool_e@3
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 1c 01 00
	00		 je	 $LN77@LoadBool_e@3
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 05 01 00
	00		 je	 $LN76@LoadBool_e@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 ef 00 00
	00		 je	 $LN75@LoadBool_e@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 da 00 00
	00		 je	 $LN74@LoadBool_e@3
  00190	32 d3		 xor	 dl, bl
  00192	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 c4 00 00
	00		 je	 $LN73@LoadBool_e@3
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 aa 00 00
	00		 je	 $LN72@LoadBool_e@3
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 91 00 00
	00		 je	 $LN71@LoadBool_e@3
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	74 7d		 je	 SHORT $LN70@LoadBool_e@3
  001ce	32 d3		 xor	 dl, bl
  001d0	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001d6	84 d2		 test	 dl, dl
  001d8	74 68		 je	 SHORT $LN69@LoadBool_e@3
  001da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dd	80 78 1c 00	 cmp	 BYTE PTR [eax+28], 0
  001e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e4	0f 84 fe 00 00
	00		 je	 $LN1@LoadBool_e@3
  001ea	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001ed	84 d2		 test	 dl, dl
  001ef	74 49		 je	 SHORT $LN67@LoadBool_e@3
  001f1	32 d1		 xor	 dl, cl
  001f3	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  001f6	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f9	84 d2		 test	 dl, dl
  001fb	74 35		 je	 SHORT $LN66@LoadBool_e@3
  001fd	32 d3		 xor	 dl, bl
  001ff	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00202	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  00205	84 d2		 test	 dl, dl
  00207	74 20		 je	 SHORT $LN65@LoadBool_e@3
  00209	8a 40 20	 mov	 al, BYTE PTR [eax+32]
  0020c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0020f	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00212	84 c0		 test	 al, al
  00214	74 0a		 je	 SHORT $LN64@LoadBool_e@3
  00216	34 ed		 xor	 al, -19			; ffffffedH
  00218	88 45 f8	 mov	 BYTE PTR __k$[ebp+32], al
  0021b	e9 c8 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN64@LoadBool_e@3:
  00220	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  00224	e9 bf 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN65@LoadBool_e@3:
  00229	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  0022d	e9 b6 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN66@LoadBool_e@3:
  00232	88 5d f6	 mov	 BYTE PTR __k$[ebp+30], bl
  00235	e9 ae 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN67@LoadBool_e@3:
  0023a	88 4d f5	 mov	 BYTE PTR __k$[ebp+29], cl
  0023d	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN69@LoadBool_e@3:
  00242	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  00246	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN70@LoadBool_e@3:
  0024b	88 5d f2	 mov	 BYTE PTR __k$[ebp+26], bl
  0024e	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN71@LoadBool_e@3:
  00253	88 4d f1	 mov	 BYTE PTR __k$[ebp+25], cl
  00256	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN72@LoadBool_e@3:
  0025b	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0025f	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN73@LoadBool_e@3:
  00264	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00268	eb 7e		 jmp	 SHORT $LN1@LoadBool_e@3
$LN74@LoadBool_e@3:
  0026a	88 5d ee	 mov	 BYTE PTR __k$[ebp+22], bl
  0026d	eb 79		 jmp	 SHORT $LN1@LoadBool_e@3
$LN75@LoadBool_e@3:
  0026f	88 4d ed	 mov	 BYTE PTR __k$[ebp+21], cl
  00272	eb 74		 jmp	 SHORT $LN1@LoadBool_e@3
$LN76@LoadBool_e@3:
  00274	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00278	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@3
$LN77@LoadBool_e@3:
  0027a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0027e	eb 68		 jmp	 SHORT $LN1@LoadBool_e@3
$LN78@LoadBool_e@3:
  00280	88 5d ea	 mov	 BYTE PTR __k$[ebp+18], bl
  00283	eb 63		 jmp	 SHORT $LN1@LoadBool_e@3
$LN79@LoadBool_e@3:
  00285	88 4d e9	 mov	 BYTE PTR __k$[ebp+17], cl
  00288	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@3
$LN80@LoadBool_e@3:
  0028a	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0028e	eb 58		 jmp	 SHORT $LN1@LoadBool_e@3
$LN81@LoadBool_e@3:
  00290	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00294	eb 52		 jmp	 SHORT $LN1@LoadBool_e@3
$LN82@LoadBool_e@3:
  00296	88 5d e6	 mov	 BYTE PTR __k$[ebp+14], bl
  00299	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@3
$LN83@LoadBool_e@3:
  0029b	88 4d e5	 mov	 BYTE PTR __k$[ebp+13], cl
  0029e	eb 48		 jmp	 SHORT $LN1@LoadBool_e@3
$LN84@LoadBool_e@3:
  002a0	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002a4	eb 42		 jmp	 SHORT $LN1@LoadBool_e@3
$LN85@LoadBool_e@3:
  002a6	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  002aa	eb 3c		 jmp	 SHORT $LN1@LoadBool_e@3
$LN86@LoadBool_e@3:
  002ac	88 5d e2	 mov	 BYTE PTR __k$[ebp+10], bl
  002af	eb 37		 jmp	 SHORT $LN1@LoadBool_e@3
$LN87@LoadBool_e@3:
  002b1	88 4d e1	 mov	 BYTE PTR __k$[ebp+9], cl
  002b4	eb 32		 jmp	 SHORT $LN1@LoadBool_e@3
$LN88@LoadBool_e@3:
  002b6	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002ba	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@3
$LN89@LoadBool_e@3:
  002bc	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002c0	eb 26		 jmp	 SHORT $LN1@LoadBool_e@3
$LN90@LoadBool_e@3:
  002c2	88 5d de	 mov	 BYTE PTR __k$[ebp+6], bl
  002c5	eb 21		 jmp	 SHORT $LN1@LoadBool_e@3
$LN91@LoadBool_e@3:
  002c7	88 4d dd	 mov	 BYTE PTR __k$[ebp+5], cl
  002ca	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@3
$LN92@LoadBool_e@3:
  002cc	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002d0	eb 16		 jmp	 SHORT $LN1@LoadBool_e@3
$LN93@LoadBool_e@3:
  002d2	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002d6	eb 10		 jmp	 SHORT $LN1@LoadBool_e@3
$LN94@LoadBool_e@3:
  002d8	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002dc	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@3
$LN95@LoadBool_e@3:
  002de	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002e2	eb 04		 jmp	 SHORT $LN1@LoadBool_e@3
$LN96@LoadBool_e@3:
  002e4	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@3:
  002e8	6a 07		 push	 7
  002ea	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  002ed	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+28], 0
  002f1	5a		 pop	 edx
$LL104@LoadBool_e@3:
  002f2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002f8	83 c0 04	 add	 eax, 4
  002fb	4a		 dec	 edx
  002fc	75 f4		 jne	 SHORT $LL104@LoadBool_e@3

; 103  : 		return LoadBool(_k, b);

  002fe	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00301	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00304	50		 push	 eax
  00305	8b ce		 mov	 ecx, esi
  00307	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  0030d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00310	5e		 pop	 esi
  00311	33 cd		 xor	 ecx, ebp
  00313	5b		 pop	 ebx
  00314	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00319	c9		 leave
  0031a	c2 08 00	 ret	 8
??$LoadBool_e@$0BN@@ioINILoader@@QAE_NAAY0BN@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<29>
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@XZ				; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??0WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??0WeaponInfo@@QAE@XZ PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx

; 64   : 	WeaponInfo()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 65   : 	{
; 66   : 		Init();

  0000c	33 c0		 xor	 eax, eax
  0000e	89 06		 mov	 DWORD PTR [esi], eax
  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00013	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00016	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00019	88 46 20	 mov	 BYTE PTR [esi+32], al
  0001c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 67   : 	}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??0WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QAE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@_N@@QAE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QAE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QAE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??0ioCreateWeaponBuff3@@QAE@XZ			; ioCreateWeaponBuff3::ioCreateWeaponBuff3
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponbuff3.cpp
xdata$x	SEGMENT
__unwindtable$??0ioCreateWeaponBuff3@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$3
__ehfuncinfo$??0ioCreateWeaponBuff3@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ioCreateWeaponBuff3@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCreateWeaponBuff3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioCreateWeaponBuff3@@QAE@XZ PROC			; ioCreateWeaponBuff3::ioCreateWeaponBuff3, COMDAT
; _this$ = ecx

; 9    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCreateWeaponBuff3@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateWeaponBuff3@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0002c	8d 8e a0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2464]
  00032	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00036	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo
  0003b	8d 8e c8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2504]
  00041	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00045	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo
  0004a	8d 8e f8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2552]
  00050	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00054	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo

; 10   : 	Init();

  00059	83 a6 f0 09 00
	00 00		 and	 DWORD PTR [esi+2544], 0
  00060	83 a6 f4 09 00
	00 00		 and	 DWORD PTR [esi+2548], 0

; 11   : }

  00067	8b c6		 mov	 eax, esi
  00069	e8 00 00 00 00	 call	 __EH_epilog3
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 84 09 00
	00		 add	 ecx, 2436		; 00000984H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a0 09 00
	00		 add	 ecx, 2464		; 000009a0H
  00020	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 c8 09 00
	00		 add	 ecx, 2504		; 000009c8H
  0002e	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$??0ioCreateWeaponBuff3@@QAE@XZ:
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCreateWeaponBuff3@@QAE@XZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCreateWeaponBuff3@@QAE@XZ ENDP			; ioCreateWeaponBuff3::ioCreateWeaponBuff3
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioCreateWeaponBuff3@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioCreateWeaponBuff3@@UAEPAXI@Z PROC			; ioCreateWeaponBuff3::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioCreateWeaponBuff3@@UAE@XZ ; ioCreateWeaponBuff3::~ioCreateWeaponBuff3
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioCreateWeaponBuff3@@UAEPAXI@Z ENDP			; ioCreateWeaponBuff3::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0ioCreateWeaponBuff3@@QAE@ABV0@@Z		; ioCreateWeaponBuff3::ioCreateWeaponBuff3
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$3
__ehfuncinfo$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCreateWeaponBuff3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioCreateWeaponBuff3@@QAE@ABV0@@Z PROC		; ioCreateWeaponBuff3::ioCreateWeaponBuff3, COMDAT
; _this$ = ecx

; 27   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateWeaponBuff3@@6B@
  00024	8a 87 6c 09 00
	00		 mov	 al, BYTE PTR [edi+2412]
  0002a	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al
  00030	d9 87 70 09 00
	00		 fld	 DWORD PTR [edi+2416]
  00036	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]
  0003c	8d 87 84 09 00
	00		 lea	 eax, DWORD PTR [edi+2436]
  00042	d9 87 74 09 00
	00		 fld	 DWORD PTR [edi+2420]
  00048	50		 push	 eax
  00049	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]
  0004f	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  00055	d9 87 78 09 00
	00		 fld	 DWORD PTR [edi+2424]
  0005b	d9 9e 78 09 00
	00		 fstp	 DWORD PTR [esi+2424]
  00061	d9 87 7c 09 00
	00		 fld	 DWORD PTR [edi+2428]
  00067	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]
  0006d	d9 87 80 09 00
	00		 fld	 DWORD PTR [edi+2432]
  00073	d9 9e 80 09 00
	00		 fstp	 DWORD PTR [esi+2432]
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0007f	8b 87 94 09 00
	00		 mov	 eax, DWORD PTR [edi+2452]
  00085	89 86 94 09 00
	00		 mov	 DWORD PTR [esi+2452], eax
  0008b	d9 87 98 09 00
	00		 fld	 DWORD PTR [edi+2456]
  00091	d9 9e 98 09 00
	00		 fstp	 DWORD PTR [esi+2456]
  00097	8d 87 a0 09 00
	00		 lea	 eax, DWORD PTR [edi+2464]
  0009d	d9 87 9c 09 00
	00		 fld	 DWORD PTR [edi+2460]
  000a3	50		 push	 eax
  000a4	8d 8e a0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2464]
  000aa	d9 9e 9c 09 00
	00		 fstp	 DWORD PTR [esi+2460]
  000b0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b4	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
  000b9	81 c7 c8 09 00
	00		 add	 edi, 2504		; 000009c8H
  000bf	57		 push	 edi
  000c0	8d 8e c8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2504]
  000c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ca	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
  000cf	8d 8e f8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2552]
  000d5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000d9	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo

; 28   : 	Init();

  000de	83 a6 f0 09 00
	00 00		 and	 DWORD PTR [esi+2544], 0
  000e5	83 a6 f4 09 00
	00 00		 and	 DWORD PTR [esi+2548], 0

; 29   : }

  000ec	8b c6		 mov	 eax, esi
  000ee	e8 00 00 00 00	 call	 __EH_epilog3
  000f3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 84 09 00
	00		 add	 ecx, 2436		; 00000984H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a0 09 00
	00		 add	 ecx, 2464		; 000009a0H
  00020	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 c8 09 00
	00		 add	 ecx, 2504		; 000009c8H
  0002e	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z:
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCreateWeaponBuff3@@QAE@ABV0@@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCreateWeaponBuff3@@QAE@ABV0@@Z ENDP		; ioCreateWeaponBuff3::ioCreateWeaponBuff3
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__real@40000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponbuff3.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioCreateWeaponBuff3@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -780				; size = 4
_szBuf$ = -776						; size = 260
__k$528616 = -516					; size = 21
__k$529366 = -488					; size = 25
__k$529116 = -456					; size = 25
__k$529508 = -424					; size = 29
__k$528589 = -388					; size = 26
__k$528866 = -356					; size = 30
__k$528241 = -320					; size = 11
__k$528839 = -304					; size = 26
__k$527129 = -272					; size = 15
__k$528116 = -252					; size = 19
__k$527504 = -228					; size = 19
__k$528991 = -204					; size = 18
__k$527813 = -180					; size = 18
__k$527313 = -156					; size = 18
__k$529241 = -132					; size = 20
__k$527866 = -108					; size = 12
__k$527616 = -92					; size = 20
__k$527991 = -68					; size = 10
__k$527371 = -52					; size = 20
__k$528366 = -28					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioCreateWeaponBuff3@@UAEXAAVioINILoader@@@Z PROC ; ioCreateWeaponBuff3::LoadProperty, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 03 00
	00		 sub	 esp, 780		; 0000030cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _rkLoader$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 37   : 	ioBuff::LoadProperty( rkLoader );

  00019	50		 push	 eax
  0001a	8b f1		 mov	 esi, ecx

; 67   : 	m_LongWeaponInfo.m_dwWoundedDuration = rkLoader.LoadInt_e( "long_attack_wounded_time", 0 );

  0001c	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], eax
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  00027	33 db		 xor	 ebx, ebx
  00029	6a 03		 push	 3
  0002b	c7 85 f0 fe ff
	ff 82 99 9f 86	 mov	 DWORD PTR __k$527129[ebp], -2036360830 ; 869f9982H
  00035	c7 85 f4 fe ff
	ff 84 82 8e b5	 mov	 DWORD PTR __k$527129[ebp+4], -1248951676 ; b58e8284H
  0003f	c7 85 f8 fe ff
	ff 88 82 8a 88	 mov	 DWORD PTR __k$527129[ebp+8], -2004188536 ; 888a8288H
  00049	66 c7 85 fc fe
	ff ff 81 89	 mov	 WORD PTR __k$527129[ebp+12], 35201 ; 00008981H
  00052	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR __k$527129[ebp]
  00058	88 9d fe fe ff
	ff		 mov	 BYTE PTR __k$527129[ebp+14], bl
  0005e	59		 pop	 ecx
  0005f	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL106@LoadProper:

; 38   : 
; 39   : 	char szBuf[MAX_PATH];
; 40   : 
; 41   : 	m_bEnableOutLine = rkLoader.LoadBool_e( "outline_enable", false );

  00064	31 38		 xor	 DWORD PTR [eax], edi
  00066	83 c0 04	 add	 eax, 4
  00069	49		 dec	 ecx
  0006a	75 f8		 jne	 SHORT $LL106@LoadProper
  0006c	6a 0c		 push	 12			; 0000000cH
  0006e	58		 pop	 eax
$LL103@LoadProper:
  0006f	8b c8		 mov	 ecx, eax
  00071	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00077	79 05		 jns	 SHORT $LN2203@LoadProper
  00079	49		 dec	 ecx
  0007a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0007d	41		 inc	 ecx
$LN2203@LoadProper:
  0007e	b2 ed		 mov	 dl, -19			; ffffffedH
  00080	2a d1		 sub	 dl, cl
  00082	30 94 05 f0 fe
	ff ff		 xor	 BYTE PTR __k$527129[ebp+eax], dl
  00089	40		 inc	 eax
  0008a	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0008d	7c e0		 jl	 SHORT $LL103@LoadProper
  0008f	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00095	53		 push	 ebx
  00096	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR __k$527129[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  000a3	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al
  000a9	6a 04		 push	 4

; 42   : 	m_fOutLineR = rkLoader.LoadFloat_e( "outline_color_red", 1.0f );

  000ab	c7 85 64 ff ff
	ff 82 99 9f 86	 mov	 DWORD PTR __k$527313[ebp], -2036360830 ; 869f9982H
  000b5	c7 85 68 ff ff
	ff 84 82 8e b5	 mov	 DWORD PTR __k$527313[ebp+4], -1248951676 ; b58e8284H
  000bf	c7 85 6c ff ff
	ff 8e 83 87 85	 mov	 DWORD PTR __k$527313[ebp+8], -2054716530 ; 8587838eH
  000c9	c7 85 70 ff ff
	ff 9f b3 99 8f	 mov	 DWORD PTR __k$527313[ebp+12], -1885752417 ; 8f99b39fH
  000d3	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR __k$527313[ebp]
  000d9	66 c7 85 74 ff
	ff ff 89 00	 mov	 WORD PTR __k$527313[ebp+16], 137 ; 00000089H
  000e2	59		 pop	 ecx
$LL212@LoadProper:
  000e3	31 38		 xor	 DWORD PTR [eax], edi
  000e5	83 c0 04	 add	 eax, 4
  000e8	49		 dec	 ecx
  000e9	75 f8		 jne	 SHORT $LL212@LoadProper
  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f3	80 b5 74 ff ff
	ff ed		 xor	 BYTE PTR __k$527313[ebp+16], -19 ; ffffffedH
  000fa	51		 push	 ecx
  000fb	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00101	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR __k$527313[ebp]
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	50		 push	 eax
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00113	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]
  00119	6a 04		 push	 4

; 43   : 	m_fOutLineG = rkLoader.LoadFloat_e( "outline_color_green", 1.0f );

  0011b	c7 45 cc 82 99
	9f 86		 mov	 DWORD PTR __k$527371[ebp], -2036360830 ; 869f9982H
  00122	c7 45 d0 84 82
	8e b5		 mov	 DWORD PTR __k$527371[ebp+4], -1248951676 ; b58e8284H
  00129	c7 45 d4 8e 83
	87 85		 mov	 DWORD PTR __k$527371[ebp+8], -2054716530 ; 8587838eH
  00130	c7 45 d8 9f b3
	8c 98		 mov	 DWORD PTR __k$527371[ebp+12], -1735609441 ; 988cb39fH
  00137	8d 45 cc	 lea	 eax, DWORD PTR __k$527371[ebp]
  0013a	c7 45 dc 88 89
	85 00		 mov	 DWORD PTR __k$527371[ebp+16], 8751496 ; 00858988H
  00141	59		 pop	 ecx
$LL318@LoadProper:
  00142	31 38		 xor	 DWORD PTR [eax], edi
  00144	83 c0 04	 add	 eax, 4
  00147	49		 dec	 ecx
  00148	75 f8		 jne	 SHORT $LL318@LoadProper
  0014a	6a 10		 push	 16			; 00000010H
  0014c	58		 pop	 eax
$LL315@LoadProper:
  0014d	8b c8		 mov	 ecx, eax
  0014f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00155	79 05		 jns	 SHORT $LN2204@LoadProper
  00157	49		 dec	 ecx
  00158	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0015b	41		 inc	 ecx
$LN2204@LoadProper:
  0015c	b2 ed		 mov	 dl, -19			; ffffffedH
  0015e	2a d1		 sub	 dl, cl
  00160	30 54 05 cc	 xor	 BYTE PTR __k$527371[ebp+eax], dl
  00164	40		 inc	 eax
  00165	83 f8 13	 cmp	 eax, 19			; 00000013H
  00168	7c e3		 jl	 SHORT $LL315@LoadProper
  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00172	51		 push	 ecx
  00173	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00179	8d 45 cc	 lea	 eax, DWORD PTR __k$527371[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	50		 push	 eax
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00188	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]
  0018e	6a 04		 push	 4

; 44   : 	m_fOutLineB = rkLoader.LoadFloat_e( "outline_color_blue", 0.0f );

  00190	c7 85 1c ff ff
	ff 82 99 9f 86	 mov	 DWORD PTR __k$527504[ebp], -2036360830 ; 869f9982H
  0019a	c7 85 20 ff ff
	ff 84 82 8e b5	 mov	 DWORD PTR __k$527504[ebp+4], -1248951676 ; b58e8284H
  001a4	c7 85 24 ff ff
	ff 8e 83 87 85	 mov	 DWORD PTR __k$527504[ebp+8], -2054716530 ; 8587838eH
  001ae	c7 85 28 ff ff
	ff 9f b3 89 86	 mov	 DWORD PTR __k$527504[ebp+12], -2037795937 ; 8689b39fH
  001b8	66 c7 85 2c ff
	ff ff 98 89	 mov	 WORD PTR __k$527504[ebp+16], 35224 ; 00008998H
  001c1	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR __k$527504[ebp]
  001c7	88 9d 2e ff ff
	ff		 mov	 BYTE PTR __k$527504[ebp+18], bl
  001cd	59		 pop	 ecx
$LL424@LoadProper:
  001ce	31 38		 xor	 DWORD PTR [eax], edi
  001d0	83 c0 04	 add	 eax, 4
  001d3	49		 dec	 ecx
  001d4	75 f8		 jne	 SHORT $LL424@LoadProper
  001d6	6a 10		 push	 16			; 00000010H
  001d8	58		 pop	 eax
$LL421@LoadProper:
  001d9	8b c8		 mov	 ecx, eax
  001db	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001e1	79 05		 jns	 SHORT $LN2205@LoadProper
  001e3	49		 dec	 ecx
  001e4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001e7	41		 inc	 ecx
$LN2205@LoadProper:
  001e8	b2 ed		 mov	 dl, -19			; ffffffedH
  001ea	2a d1		 sub	 dl, cl
  001ec	30 94 05 1c ff
	ff ff		 xor	 BYTE PTR __k$527504[ebp+eax], dl
  001f3	40		 inc	 eax
  001f4	83 f8 12	 cmp	 eax, 18			; 00000012H
  001f7	7c e0		 jl	 SHORT $LL421@LoadProper
  001f9	0f 57 c0	 xorps	 xmm0, xmm0
  001fc	51		 push	 ecx
  001fd	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00203	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR __k$527504[ebp]
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	50		 push	 eax
  0020f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00215	d9 9e 78 09 00
	00		 fstp	 DWORD PTR [esi+2424]
  0021b	6a 04		 push	 4

; 45   : 	m_fOutLineAlpha = rkLoader.LoadFloat_e( "outline_color_alpha", 0.5f );

  0021d	c7 45 a4 82 99
	9f 86		 mov	 DWORD PTR __k$527616[ebp], -2036360830 ; 869f9982H
  00224	c7 45 a8 84 82
	8e b5		 mov	 DWORD PTR __k$527616[ebp+4], -1248951676 ; b58e8284H
  0022b	c7 45 ac 8e 83
	87 85		 mov	 DWORD PTR __k$527616[ebp+8], -2054716530 ; 8587838eH
  00232	c7 45 b0 9f b3
	8a 86		 mov	 DWORD PTR __k$527616[ebp+12], -2037730401 ; 868ab39fH
  00239	8d 45 a4	 lea	 eax, DWORD PTR __k$527616[ebp]
  0023c	c7 45 b4 9d 84
	8a 00		 mov	 DWORD PTR __k$527616[ebp+16], 9077917 ; 008a849dH
  00243	59		 pop	 ecx
$LL530@LoadProper:
  00244	31 38		 xor	 DWORD PTR [eax], edi
  00246	83 c0 04	 add	 eax, 4
  00249	49		 dec	 ecx
  0024a	75 f8		 jne	 SHORT $LL530@LoadProper
  0024c	6a 10		 push	 16			; 00000010H
  0024e	58		 pop	 eax
$LL527@LoadProper:
  0024f	8b c8		 mov	 ecx, eax
  00251	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00257	79 05		 jns	 SHORT $LN2206@LoadProper
  00259	49		 dec	 ecx
  0025a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0025d	41		 inc	 ecx
$LN2206@LoadProper:
  0025e	b2 ed		 mov	 dl, -19			; ffffffedH
  00260	2a d1		 sub	 dl, cl
  00262	30 54 05 a4	 xor	 BYTE PTR __k$527616[ebp+eax], dl
  00266	40		 inc	 eax
  00267	83 f8 13	 cmp	 eax, 19			; 00000013H
  0026a	7c e3		 jl	 SHORT $LL527@LoadProper
  0026c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00274	51		 push	 ecx
  00275	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0027b	8d 45 a4	 lea	 eax, DWORD PTR __k$527616[ebp]
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	50		 push	 eax
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0028a	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]
  00290	6a 04		 push	 4

; 46   : 	m_fOutLineThickness = rkLoader.LoadFloat_e( "outline_thickness", 2.0f );

  00292	c7 85 4c ff ff
	ff 82 99 9f 86	 mov	 DWORD PTR __k$527813[ebp], -2036360830 ; 869f9982H
  0029c	c7 85 50 ff ff
	ff 84 82 8e b5	 mov	 DWORD PTR __k$527813[ebp+4], -1248951676 ; b58e8284H
  002a6	c7 85 54 ff ff
	ff 99 84 82 89	 mov	 DWORD PTR __k$527813[ebp+8], -1987935079 ; 89828499H
  002b0	c7 85 58 ff ff
	ff 86 82 8e 99	 mov	 DWORD PTR __k$527813[ebp+12], -1718713722 ; 998e8286H
  002ba	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR __k$527813[ebp]
  002c0	66 c7 85 5c ff
	ff ff 9e 00	 mov	 WORD PTR __k$527813[ebp+16], 158 ; 0000009eH
  002c9	59		 pop	 ecx
$LL636@LoadProper:
  002ca	31 38		 xor	 DWORD PTR [eax], edi
  002cc	83 c0 04	 add	 eax, 4
  002cf	49		 dec	 ecx
  002d0	75 f8		 jne	 SHORT $LL636@LoadProper
  002d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  002da	80 b5 5c ff ff
	ff ed		 xor	 BYTE PTR __k$527813[ebp+16], -19 ; ffffffedH
  002e1	51		 push	 ecx
  002e2	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002e8	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR __k$527813[ebp]
  002ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f3	50		 push	 eax
  002f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002fa	d9 9e 80 09 00
	00		 fstp	 DWORD PTR [esi+2432]
  00300	6a 02		 push	 2

; 47   : 
; 48   : 	rkLoader.LoadString_e( "wait_effect", "", szBuf, MAX_PATH );

  00302	c7 45 94 9a 8d
	82 9e		 mov	 DWORD PTR __k$527866[ebp], -1635611238 ; 9e828d9aH
  00309	c7 45 98 b2 89
	8d 8c		 mov	 DWORD PTR __k$527866[ebp+4], -1936881230 ; 8c8d89b2H
  00310	8d 45 94	 lea	 eax, DWORD PTR __k$527866[ebp]
  00313	c7 45 9c 88 8f
	9f 00		 mov	 DWORD PTR __k$527866[ebp+8], 10456968 ; 009f8f88H
  0031a	59		 pop	 ecx
$LL742@LoadProper:
  0031b	31 38		 xor	 DWORD PTR [eax], edi
  0031d	83 c0 04	 add	 eax, 4
  00320	49		 dec	 ecx
  00321	75 f8		 jne	 SHORT $LL742@LoadProper
  00323	6a 08		 push	 8
  00325	58		 pop	 eax
$LL739@LoadProper:
  00326	8b c8		 mov	 ecx, eax
  00328	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0032e	79 05		 jns	 SHORT $LN2207@LoadProper
  00330	49		 dec	 ecx
  00331	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00334	41		 inc	 ecx
$LN2207@LoadProper:
  00335	b2 ed		 mov	 dl, -19			; ffffffedH
  00337	2a d1		 sub	 dl, cl
  00339	30 54 05 94	 xor	 BYTE PTR __k$527866[ebp+eax], dl
  0033d	40		 inc	 eax
  0033e	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00341	7c e3		 jl	 SHORT $LL739@LoadProper
  00343	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00349	68 04 01 00 00	 push	 260			; 00000104H
  0034e	8d 85 f8 fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00354	50		 push	 eax
  00355	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0035a	8d 45 94	 lea	 eax, DWORD PTR __k$527866[ebp]
  0035d	50		 push	 eax
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 49   : 	m_szWaitEffect = szBuf;

  00364	8d 85 f8 fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0036a	50		 push	 eax
  0036b	8d 8e 84 09 00
	00		 lea	 ecx, DWORD PTR [esi+2436]
  00371	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00377	6a 02		 push	 2

; 50   : 
; 51   : 	m_dwWaitTime = rkLoader.LoadInt_e( "wait_time", 0 );

  00379	c7 45 bc 9a 8d
	82 9e		 mov	 DWORD PTR __k$527991[ebp], -1635611238 ; 9e828d9aH
  00380	c7 45 c0 b2 98
	82 87		 mov	 DWORD PTR __k$527991[ebp+4], -2021484366 ; 878298b2H
  00387	8d 45 bc	 lea	 eax, DWORD PTR __k$527991[ebp]
  0038a	66 c7 45 c4 88
	00		 mov	 WORD PTR __k$527991[ebp+8], 136 ; 00000088H
  00390	59		 pop	 ecx
$LL848@LoadProper:
  00391	31 38		 xor	 DWORD PTR [eax], edi
  00393	83 c0 04	 add	 eax, 4
  00396	49		 dec	 ecx
  00397	75 f8		 jne	 SHORT $LL848@LoadProper
  00399	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0039f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  003a5	80 75 c4 ed	 xor	 BYTE PTR __k$527991[ebp+8], -19 ; ffffffedH
  003a9	53		 push	 ebx
  003aa	8d 45 bc	 lea	 eax, DWORD PTR __k$527991[ebp]
  003ad	50		 push	 eax
  003ae	ff d7		 call	 edi
  003b0	89 86 94 09 00
	00		 mov	 DWORD PTR [esi+2452], eax
  003b6	6a 04		 push	 4

; 52   : 
; 53   : 	m_fFireHeightOffSet = rkLoader.LoadFloat_e( "fire_offset_height", 0.0f );	

  003b8	c7 85 04 ff ff
	ff 8b 85 99 8f	 mov	 DWORD PTR __k$528116[ebp], -1885764213 ; 8f99858bH
  003c2	c7 85 08 ff ff
	ff b2 83 8d 8c	 mov	 DWORD PTR __k$528116[ebp+4], -1936882766 ; 8c8d83b2H
  003cc	c7 85 0c ff ff
	ff 9e 89 9f b5	 mov	 DWORD PTR __k$528116[ebp+8], -1247835746 ; b59f899eH
  003d6	c7 85 10 ff ff
	ff 85 89 82 8d	 mov	 DWORD PTR __k$528116[ebp+12], -1920824955 ; 8d828985H
  003e0	66 c7 85 14 ff
	ff ff 85 98	 mov	 WORD PTR __k$528116[ebp+16], 39045 ; 00009885H
  003e9	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR __k$528116[ebp]
  003ef	88 9d 16 ff ff
	ff		 mov	 BYTE PTR __k$528116[ebp+18], bl
  003f5	59		 pop	 ecx
$LL954@LoadProper:
  003f6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003fc	83 c0 04	 add	 eax, 4
  003ff	49		 dec	 ecx
  00400	75 f4		 jne	 SHORT $LL954@LoadProper
  00402	6a 10		 push	 16			; 00000010H
  00404	58		 pop	 eax
$LL951@LoadProper:
  00405	8b c8		 mov	 ecx, eax
  00407	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0040d	79 05		 jns	 SHORT $LN2208@LoadProper
  0040f	49		 dec	 ecx
  00410	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00413	41		 inc	 ecx
$LN2208@LoadProper:
  00414	b2 ed		 mov	 dl, -19			; ffffffedH
  00416	2a d1		 sub	 dl, cl
  00418	30 94 05 04 ff
	ff ff		 xor	 BYTE PTR __k$528116[ebp+eax], dl
  0041f	40		 inc	 eax
  00420	83 f8 12	 cmp	 eax, 18			; 00000012H
  00423	7c e0		 jl	 SHORT $LL951@LoadProper
  00425	0f 57 c0	 xorps	 xmm0, xmm0
  00428	51		 push	 ecx
  00429	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0042f	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR __k$528116[ebp]
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	50		 push	 eax
  0043b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00441	d9 9e 98 09 00
	00		 fstp	 DWORD PTR [esi+2456]
  00447	6a 02		 push	 2

; 54   : 	m_fCheckDist = rkLoader.LoadFloat_e( "check_dist", 0.0f );	

  00449	c7 85 c0 fe ff
	ff 8e 84 8e 89	 mov	 DWORD PTR __k$528241[ebp], -1987148658 ; 898e848eH
  00453	c7 85 c4 fe ff
	ff 86 b3 8f 83	 mov	 DWORD PTR __k$528241[ebp+4], -2087734394 ; 838fb386H
  0045d	66 c7 85 c8 fe
	ff ff 9e 98	 mov	 WORD PTR __k$528241[ebp+8], 39070 ; 0000989eH
  00466	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __k$528241[ebp]
  0046c	88 9d ca fe ff
	ff		 mov	 BYTE PTR __k$528241[ebp+10], bl
  00472	59		 pop	 ecx
$LL1060@LoadProper:
  00473	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00479	83 c0 04	 add	 eax, 4
  0047c	49		 dec	 ecx
  0047d	75 f4		 jne	 SHORT $LL1060@LoadProper
  0047f	6a 08		 push	 8
  00481	58		 pop	 eax
$LL1057@LoadProper:
  00482	8b c8		 mov	 ecx, eax
  00484	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0048a	79 05		 jns	 SHORT $LN2209@LoadProper
  0048c	49		 dec	 ecx
  0048d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00490	41		 inc	 ecx
$LN2209@LoadProper:
  00491	b2 ed		 mov	 dl, -19			; ffffffedH
  00493	2a d1		 sub	 dl, cl
  00495	30 94 05 c0 fe
	ff ff		 xor	 BYTE PTR __k$528241[ebp+eax], dl
  0049c	40		 inc	 eax
  0049d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  004a0	7c e0		 jl	 SHORT $LL1057@LoadProper
  004a2	0f 57 c0	 xorps	 xmm0, xmm0
  004a5	51		 push	 ecx
  004a6	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004ac	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __k$528241[ebp]
  004b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b7	50		 push	 eax
  004b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004be	d9 9e 9c 09 00
	00		 fstp	 DWORD PTR [esi+2460]
  004c4	6a 04		 push	 4

; 55   : 
; 56   : 	m_ShortWeaponInfo.m_iWeaponIdx = rkLoader.LoadInt_e( "short_attack_index", NO_WEAPON_ATTRIBUTE );

  004c6	c7 45 e4 9e 84
	84 98		 mov	 DWORD PTR __k$528366[ebp], -1736145762 ; 9884849eH
  004cd	c7 45 e8 99 b3
	8a 9e		 mov	 DWORD PTR __k$528366[ebp+4], -1635077223 ; 9e8ab399H
  004d4	c7 45 ec 99 8d
	88 81		 mov	 DWORD PTR __k$528366[ebp+8], -2121757287 ; 81888d99H
  004db	c7 45 f0 b2 85
	85 8e		 mov	 DWORD PTR __k$528366[ebp+12], -1903852110 ; 8e8585b2H
  004e2	66 c7 45 f4 88
	94		 mov	 WORD PTR __k$528366[ebp+16], 38024 ; 00009488H
  004e8	8d 45 e4	 lea	 eax, DWORD PTR __k$528366[ebp]
  004eb	88 5d f6	 mov	 BYTE PTR __k$528366[ebp+18], bl
  004ee	59		 pop	 ecx
$LL1166@LoadProper:
  004ef	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004f5	83 c0 04	 add	 eax, 4
  004f8	49		 dec	 ecx
  004f9	75 f4		 jne	 SHORT $LL1166@LoadProper
  004fb	6a 10		 push	 16			; 00000010H
  004fd	58		 pop	 eax
$LL1163@LoadProper:
  004fe	8b c8		 mov	 ecx, eax
  00500	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00506	79 05		 jns	 SHORT $LN2210@LoadProper
  00508	49		 dec	 ecx
  00509	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0050c	41		 inc	 ecx
$LN2210@LoadProper:
  0050d	b2 ed		 mov	 dl, -19			; ffffffedH
  0050f	2a d1		 sub	 dl, cl
  00511	30 54 05 e4	 xor	 BYTE PTR __k$528366[ebp+eax], dl
  00515	40		 inc	 eax
  00516	83 f8 12	 cmp	 eax, 18			; 00000012H
  00519	7c e3		 jl	 SHORT $LL1163@LoadProper
  0051b	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00521	53		 push	 ebx
  00522	8d 45 e4	 lea	 eax, DWORD PTR __k$528366[ebp]
  00525	50		 push	 eax
  00526	ff d7		 call	 edi
  00528	89 86 a0 09 00
	00		 mov	 DWORD PTR [esi+2464], eax
  0052e	6a 06		 push	 6

; 57   : 	m_ShortWeaponInfo.m_iResistanceIdx = rkLoader.LoadInt_e( "short_attack_index_resist", NO_WEAPON_ATTRIBUTE );

  00530	c7 85 7c fe ff
	ff 9e 84 84 98	 mov	 DWORD PTR __k$528589[ebp], -1736145762 ; 9884849eH
  0053a	c7 85 80 fe ff
	ff 99 b3 8a 9e	 mov	 DWORD PTR __k$528589[ebp+4], -1635077223 ; 9e8ab399H
  00544	c7 85 84 fe ff
	ff 99 8d 88 81	 mov	 DWORD PTR __k$528589[ebp+8], -2121757287 ; 81888d99H
  0054e	c7 85 88 fe ff
	ff b2 85 85 8e	 mov	 DWORD PTR __k$528589[ebp+12], -1903852110 ; 8e8585b2H
  00558	c7 85 8c fe ff
	ff 88 94 b4 98	 mov	 DWORD PTR __k$528589[ebp+16], -1732995960 ; 98b49488H
  00562	c7 85 90 fe ff
	ff 88 9f 82 99	 mov	 DWORD PTR __k$528589[ebp+20], -1719492728 ; 99829f88H
  0056c	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR __k$528589[ebp]
  00572	66 c7 85 94 fe
	ff ff 99 00	 mov	 WORD PTR __k$528589[ebp+24], 153 ; 00000099H
  0057b	59		 pop	 ecx
$LL1272@LoadProper:
  0057c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00582	83 c0 04	 add	 eax, 4
  00585	49		 dec	 ecx
  00586	75 f4		 jne	 SHORT $LL1272@LoadProper
  00588	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0058e	80 b5 94 fe ff
	ff ed		 xor	 BYTE PTR __k$528589[ebp+24], -19 ; ffffffedH
  00595	53		 push	 ebx
  00596	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR __k$528589[ebp]
  0059c	50		 push	 eax
  0059d	ff d7		 call	 edi
  0059f	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax
  005a5	6a 05		 push	 5

; 58   : 	rkLoader.LoadString_e( "short_attack_wounded", "", szBuf, MAX_PATH );

  005a7	c7 85 fc fd ff
	ff 9e 84 84 98	 mov	 DWORD PTR __k$528616[ebp], -1736145762 ; 9884849eH
  005b1	c7 85 00 fe ff
	ff 99 b3 8a 9e	 mov	 DWORD PTR __k$528616[ebp+4], -1635077223 ; 9e8ab399H
  005bb	c7 85 04 fe ff
	ff 99 8d 88 81	 mov	 DWORD PTR __k$528616[ebp+8], -2121757287 ; 81888d99H
  005c5	c7 85 08 fe ff
	ff b2 9b 84 9f	 mov	 DWORD PTR __k$528616[ebp+12], -1618699342 ; 9f849bb2H
  005cf	c7 85 0c fe ff
	ff 83 88 8e 8e	 mov	 DWORD PTR __k$528616[ebp+16], -1903261565 ; 8e8e8883H
  005d9	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR __k$528616[ebp]
  005df	88 9d 10 fe ff
	ff		 mov	 BYTE PTR __k$528616[ebp+20], bl
  005e5	59		 pop	 ecx
$LL1378@LoadProper:
  005e6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  005ec	83 c0 04	 add	 eax, 4
  005ef	49		 dec	 ecx
  005f0	75 f4		 jne	 SHORT $LL1378@LoadProper
  005f2	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  005f8	68 04 01 00 00	 push	 260			; 00000104H
  005fd	8d 85 f8 fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00603	50		 push	 eax
  00604	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00609	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR __k$528616[ebp]
  0060f	50		 push	 eax
  00610	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 59   : 	m_ShortWeaponInfo.m_WoundedAnimation = szBuf;

  00616	8d 85 f8 fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0061c	50		 push	 eax
  0061d	8d 8e a8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2472]
  00623	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00629	6a 06		 push	 6

; 60   : 	m_ShortWeaponInfo.m_dwWoundedDuration = rkLoader.LoadInt_e( "short_attack_wounded_time", 0 );

  0062b	c7 85 d0 fe ff
	ff 9e 84 84 98	 mov	 DWORD PTR __k$528839[ebp], -1736145762 ; 9884849eH
  00635	c7 85 d4 fe ff
	ff 99 b3 8a 9e	 mov	 DWORD PTR __k$528839[ebp+4], -1635077223 ; 9e8ab399H
  0063f	c7 85 d8 fe ff
	ff 99 8d 88 81	 mov	 DWORD PTR __k$528839[ebp+8], -2121757287 ; 81888d99H
  00649	c7 85 dc fe ff
	ff b2 9b 84 9f	 mov	 DWORD PTR __k$528839[ebp+12], -1618699342 ; 9f849bb2H
  00653	c7 85 e0 fe ff
	ff 83 88 8e 8e	 mov	 DWORD PTR __k$528839[ebp+16], -1903261565 ; 8e8e8883H
  0065d	c7 85 e4 fe ff
	ff b2 98 82 87	 mov	 DWORD PTR __k$528839[ebp+20], -2021484366 ; 878298b2H
  00667	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR __k$528839[ebp]
  0066d	66 c7 85 e8 fe
	ff ff 88 00	 mov	 WORD PTR __k$528839[ebp+24], 136 ; 00000088H
  00676	59		 pop	 ecx
$LL1484@LoadProper:
  00677	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0067d	83 c0 04	 add	 eax, 4
  00680	49		 dec	 ecx
  00681	75 f4		 jne	 SHORT $LL1484@LoadProper
  00683	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00689	80 b5 e8 fe ff
	ff ed		 xor	 BYTE PTR __k$528839[ebp+24], -19 ; ffffffedH
  00690	53		 push	 ebx
  00691	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR __k$528839[ebp]
  00697	50		 push	 eax
  00698	ff d7		 call	 edi
  0069a	89 86 b8 09 00
	00		 mov	 DWORD PTR [esi+2488], eax
  006a0	6a 07		 push	 7

; 61   : 	m_ShortWeaponInfo.m_bWoundedLoopAni = rkLoader.LoadBool_e( "short_attack_wounded_loop_ani", false );

  006a2	c7 85 9c fe ff
	ff 9e 84 84 98	 mov	 DWORD PTR __k$528866[ebp], -1736145762 ; 9884849eH
  006ac	c7 85 a0 fe ff
	ff 99 b3 8a 9e	 mov	 DWORD PTR __k$528866[ebp+4], -1635077223 ; 9e8ab399H
  006b6	c7 85 a4 fe ff
	ff 99 8d 88 81	 mov	 DWORD PTR __k$528866[ebp+8], -2121757287 ; 81888d99H
  006c0	c7 85 a8 fe ff
	ff b2 9b 84 9f	 mov	 DWORD PTR __k$528866[ebp+12], -1618699342 ; 9f849bb2H
  006ca	c7 85 ac fe ff
	ff 83 88 8e 8e	 mov	 DWORD PTR __k$528866[ebp+16], -1903261565 ; 8e8e8883H
  006d4	c7 85 b0 fe ff
	ff b2 80 84 85	 mov	 DWORD PTR __k$528866[ebp+20], -2054913870 ; 858480b2H
  006de	c7 85 b4 fe ff
	ff 9d b3 8a 84	 mov	 DWORD PTR __k$528866[ebp+24], -2071284835 ; 848ab39dH
  006e8	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR __k$528866[ebp]
  006ee	66 c7 85 b8 fe
	ff ff 84 00	 mov	 WORD PTR __k$528866[ebp+28], 132 ; 00000084H
  006f7	59		 pop	 ecx
$LL1590@LoadProper:
  006f8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  006fe	83 c0 04	 add	 eax, 4
  00701	49		 dec	 ecx
  00702	75 f4		 jne	 SHORT $LL1590@LoadProper
  00704	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0070a	80 b5 b8 fe ff
	ff ed		 xor	 BYTE PTR __k$528866[ebp+28], -19 ; ffffffedH
  00711	53		 push	 ebx
  00712	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR __k$528866[ebp]
  00718	50		 push	 eax
  00719	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  0071f	88 86 c0 09 00
	00		 mov	 BYTE PTR [esi+2496], al
  00725	6a 04		 push	 4

; 62   : 
; 63   : 	m_LongWeaponInfo.m_iWeaponIdx = rkLoader.LoadInt_e( "long_attack_index", NO_WEAPON_ATTRIBUTE );

  00727	c7 85 34 ff ff
	ff 81 83 85 8d	 mov	 DWORD PTR __k$528991[ebp], -1920629887 ; 8d858381H
  00731	c7 85 38 ff ff
	ff b2 8d 9f 9e	 mov	 DWORD PTR __k$528991[ebp+4], -1633710670 ; 9e9f8db2H
  0073b	c7 85 3c ff ff
	ff 8c 8f 80 b5	 mov	 DWORD PTR __k$528991[ebp+8], -1249865844 ; b5808f8cH
  00745	c7 85 40 ff ff
	ff 84 82 8f 8f	 mov	 DWORD PTR __k$528991[ebp+12], -1886420348 ; 8f8f8284H
  0074f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR __k$528991[ebp]
  00755	66 c7 85 44 ff
	ff ff 95 00	 mov	 WORD PTR __k$528991[ebp+16], 149 ; 00000095H
  0075e	59		 pop	 ecx
$LL1696@LoadProper:
  0075f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00765	83 c0 04	 add	 eax, 4
  00768	49		 dec	 ecx
  00769	75 f4		 jne	 SHORT $LL1696@LoadProper
  0076b	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00771	80 b5 44 ff ff
	ff ed		 xor	 BYTE PTR __k$528991[ebp+16], -19 ; ffffffedH
  00778	53		 push	 ebx
  00779	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR __k$528991[ebp]
  0077f	50		 push	 eax
  00780	ff d7		 call	 edi
  00782	89 86 c8 09 00
	00		 mov	 DWORD PTR [esi+2504], eax
  00788	6a 06		 push	 6

; 64   : 	m_LongWeaponInfo.m_iResistanceIdx = rkLoader.LoadInt_e( "long_attack_index_resist", NO_WEAPON_ATTRIBUTE );

  0078a	c7 85 38 fe ff
	ff 81 83 85 8d	 mov	 DWORD PTR __k$529116[ebp], -1920629887 ; 8d858381H
  00794	c7 85 3c fe ff
	ff b2 8d 9f 9e	 mov	 DWORD PTR __k$529116[ebp+4], -1633710670 ; 9e9f8db2H
  0079e	c7 85 40 fe ff
	ff 8c 8f 80 b5	 mov	 DWORD PTR __k$529116[ebp+8], -1249865844 ; b5808f8cH
  007a8	c7 85 44 fe ff
	ff 84 82 8f 8f	 mov	 DWORD PTR __k$529116[ebp+12], -1886420348 ; 8f8f8284H
  007b2	c7 85 48 fe ff
	ff 95 b3 99 8f	 mov	 DWORD PTR __k$529116[ebp+16], -1885752427 ; 8f99b395H
  007bc	c7 85 4c fe ff
	ff 9e 85 98 9e	 mov	 DWORD PTR __k$529116[ebp+20], -1634171490 ; 9e98859eH
  007c6	8d 85 38 fe ff
	ff		 lea	 eax, DWORD PTR __k$529116[ebp]
  007cc	88 9d 50 fe ff
	ff		 mov	 BYTE PTR __k$529116[ebp+24], bl
  007d2	59		 pop	 ecx
$LL1802@LoadProper:
  007d3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  007d9	83 c0 04	 add	 eax, 4
  007dc	49		 dec	 ecx
  007dd	75 f4		 jne	 SHORT $LL1802@LoadProper
  007df	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  007e5	53		 push	 ebx
  007e6	8d 85 38 fe ff
	ff		 lea	 eax, DWORD PTR __k$529116[ebp]
  007ec	50		 push	 eax
  007ed	ff d7		 call	 edi
  007ef	89 86 cc 09 00
	00		 mov	 DWORD PTR [esi+2508], eax
  007f5	6a 04		 push	 4

; 65   : 	rkLoader.LoadString_e( "long_attack_wounded", "", szBuf, MAX_PATH );

  007f7	c7 85 7c ff ff
	ff 81 83 85 8d	 mov	 DWORD PTR __k$529241[ebp], -1920629887 ; 8d858381H
  00801	c7 45 80 b2 8d
	9f 9e		 mov	 DWORD PTR __k$529241[ebp+4], -1633710670 ; 9e9f8db2H
  00808	c7 45 84 8c 8f
	80 b5		 mov	 DWORD PTR __k$529241[ebp+8], -1249865844 ; b5808f8cH
  0080f	c7 45 88 9a 83
	9e 84		 mov	 DWORD PTR __k$529241[ebp+12], -2069986406 ; 849e839aH
  00816	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR __k$529241[ebp]
  0081c	c7 45 8c 89 89
	8f 00		 mov	 DWORD PTR __k$529241[ebp+16], 9406857 ; 008f8989H
  00823	59		 pop	 ecx
$LL1908@LoadProper:
  00824	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0082a	83 c0 04	 add	 eax, 4
  0082d	49		 dec	 ecx
  0082e	75 f4		 jne	 SHORT $LL1908@LoadProper
  00830	6a 10		 push	 16			; 00000010H
  00832	58		 pop	 eax
$LL1905@LoadProper:
  00833	8b c8		 mov	 ecx, eax
  00835	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0083b	79 05		 jns	 SHORT $LN2211@LoadProper
  0083d	49		 dec	 ecx
  0083e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00841	41		 inc	 ecx
$LN2211@LoadProper:
  00842	b2 ed		 mov	 dl, -19			; ffffffedH
  00844	2a d1		 sub	 dl, cl
  00846	30 94 05 7c ff
	ff ff		 xor	 BYTE PTR __k$529241[ebp+eax], dl
  0084d	40		 inc	 eax
  0084e	83 f8 13	 cmp	 eax, 19			; 00000013H
  00851	7c e0		 jl	 SHORT $LL1905@LoadProper
  00853	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00859	68 04 01 00 00	 push	 260			; 00000104H
  0085e	8d 85 f8 fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00864	50		 push	 eax
  00865	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0086a	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR __k$529241[ebp]
  00870	50		 push	 eax
  00871	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 66   : 	m_LongWeaponInfo.m_WoundedAnimation = szBuf;

  00877	8d 85 f8 fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0087d	50		 push	 eax
  0087e	8d 8e d0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2512]
  00884	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0088a	6a 06		 push	 6

; 67   : 	m_LongWeaponInfo.m_dwWoundedDuration = rkLoader.LoadInt_e( "long_attack_wounded_time", 0 );

  0088c	c7 85 18 fe ff
	ff 81 83 85 8d	 mov	 DWORD PTR __k$529366[ebp], -1920629887 ; 8d858381H
  00896	c7 85 1c fe ff
	ff b2 8d 9f 9e	 mov	 DWORD PTR __k$529366[ebp+4], -1633710670 ; 9e9f8db2H
  008a0	c7 85 20 fe ff
	ff 8c 8f 80 b5	 mov	 DWORD PTR __k$529366[ebp+8], -1249865844 ; b5808f8cH
  008aa	c7 85 24 fe ff
	ff 9a 83 9e 84	 mov	 DWORD PTR __k$529366[ebp+12], -2069986406 ; 849e839aH
  008b4	c7 85 28 fe ff
	ff 89 89 8f b5	 mov	 DWORD PTR __k$529366[ebp+16], -1248884343 ; b58f8989H
  008be	c7 85 2c fe ff
	ff 99 85 86 8f	 mov	 DWORD PTR __k$529366[ebp+20], -1887009383 ; 8f868599H
  008c8	8d 85 18 fe ff
	ff		 lea	 eax, DWORD PTR __k$529366[ebp]
  008ce	88 9d 30 fe ff
	ff		 mov	 BYTE PTR __k$529366[ebp+24], bl
  008d4	59		 pop	 ecx
$LL2014@LoadProper:
  008d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  008db	83 c0 04	 add	 eax, 4
  008de	49		 dec	 ecx
  008df	75 f4		 jne	 SHORT $LL2014@LoadProper
  008e1	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  008e7	53		 push	 ebx
  008e8	8d 85 18 fe ff
	ff		 lea	 eax, DWORD PTR __k$529366[ebp]
  008ee	50		 push	 eax
  008ef	ff d7		 call	 edi
  008f1	89 86 e0 09 00
	00		 mov	 DWORD PTR [esi+2528], eax
  008f7	6a 07		 push	 7

; 68   : 	m_LongWeaponInfo.m_bWoundedLoopAni = rkLoader.LoadBool_e( "long_attack_wounded_loop_ani", false );

  008f9	c7 85 58 fe ff
	ff 81 83 85 8d	 mov	 DWORD PTR __k$529508[ebp], -1920629887 ; 8d858381H
  00903	c7 85 5c fe ff
	ff b2 8d 9f 9e	 mov	 DWORD PTR __k$529508[ebp+4], -1633710670 ; 9e9f8db2H
  0090d	c7 85 60 fe ff
	ff 8c 8f 80 b5	 mov	 DWORD PTR __k$529508[ebp+8], -1249865844 ; b5808f8cH
  00917	c7 85 64 fe ff
	ff 9a 83 9e 84	 mov	 DWORD PTR __k$529508[ebp+12], -2069986406 ; 849e839aH
  00921	c7 85 68 fe ff
	ff 89 89 8f b5	 mov	 DWORD PTR __k$529508[ebp+16], -1248884343 ; b58f8989H
  0092b	c7 85 6c fe ff
	ff 81 83 84 9a	 mov	 DWORD PTR __k$529508[ebp+20], -1702591615 ; 9a848381H
  00935	c7 85 70 fe ff
	ff b2 8d 85 83	 mov	 DWORD PTR __k$529508[ebp+24], -2088399438 ; 83858db2H
  0093f	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR __k$529508[ebp]
  00945	88 9d 74 fe ff
	ff		 mov	 BYTE PTR __k$529508[ebp+28], bl
  0094b	59		 pop	 ecx
$LL2120@LoadProper:
  0094c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00952	83 c0 04	 add	 eax, 4
  00955	49		 dec	 ecx
  00956	75 f4		 jne	 SHORT $LL2120@LoadProper
  00958	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0095e	53		 push	 ebx
  0095f	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR __k$529508[ebp]
  00965	50		 push	 eax
  00966	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 69   : }

  0096c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0096f	5f		 pop	 edi
  00970	88 86 e8 09 00
	00		 mov	 BYTE PTR [esi+2536], al
  00976	5e		 pop	 esi
  00977	33 cd		 xor	 ecx, ebp
  00979	5b		 pop	 ebx
  0097a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0097f	c9		 leave
  00980	c2 04 00	 ret	 4
?LoadProperty@ioCreateWeaponBuff3@@UAEXAAVioINILoader@@@Z ENDP ; ioCreateWeaponBuff3::LoadProperty
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T529703 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ PROC	; ioCreateWeaponBuff3::Clone, COMDAT
; _this$ = ecx

; 72   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 73   : 	return new ioCreateWeaponBuff3( *this );

  0000e	68 20 0a 00 00	 push	 2592			; 00000a20H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T529703[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioCreateWeaponBuff3@@QAE@ABV0@@Z ; ioCreateWeaponBuff3::ioCreateWeaponBuff3
$LN3@Clone:

; 74   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T529703[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioCreateWeaponBuff3@@UAEPAVioBuff@@XZ ENDP	; ioCreateWeaponBuff3::Clone
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	__imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	?DummyExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUWeaponInfo@@ABUD3DXVECTOR3@@K_NABVioHashString@@32@Z:PROC ; ioBaseChar::DummyExplicit
EXTRN	?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ:PROC ; ioBaseChar::IncreaseWeaponIndexBase
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetCreator
EXTRN	??5SP2Packet@@QAEAAV0@AA_N@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponbuff3.cpp
CONST	ENDS
;	COMDAT ?ApplyExtraBuffInfo@ioCreateWeaponBuff3@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
tv330 = -44						; size = 4
tv326 = -44						; size = 4
_dwWeaponIndex$523959 = -44				; size = 4
_value$529730 = -40					; size = 1
tv322 = -40						; size = 4
_nType$ = -36						; size = 4
_bShort$523952 = -29					; size = 1
$T523962 = -28						; size = 12
_vPos$523957 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rkPacket$ = 8						; size = 4
?ApplyExtraBuffInfo@ioCreateWeaponBuff3@@UAEXAAVSP2Packet@@@Z PROC ; ioCreateWeaponBuff3::ApplyExtraBuffInfo, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkPacket$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f1		 mov	 esi, ecx

; 173  : 	ioBaseChar *pOwner = GetOwner();

  00018	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  0001d	8b f8		 mov	 edi, eax

; 174  : 	if( !pOwner )

  0001f	85 ff		 test	 edi, edi
  00021	0f 84 5a 01 00
	00		 je	 $LN6@ApplyExtra

; 175  : 		return;
; 176  : 
; 177  : 	ioPlayStage *pStage = pOwner->GetCreator();
; 178  : 	if( !pStage )

  00027	83 bf 44 03 00
	00 00		 cmp	 DWORD PTR [edi+836], 0
  0002e	0f 84 4d 01 00
	00		 je	 $LN6@ApplyExtra

; 179  : 		return;
; 180  : 
; 181  : 	int nType;
; 182  : 	rkPacket >> nType;

  00034	8d 45 dc	 lea	 eax, DWORD PTR _nType$[ebp]
  00037	50		 push	 eax
  00038	8b cb		 mov	 ecx, ebx
  0003a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 183  : 
; 184  : 	switch ( nType )

  0003f	8b 45 dc	 mov	 eax, DWORD PTR _nType$[ebp]
  00042	48		 dec	 eax
  00043	48		 dec	 eax
  00044	0f 85 37 01 00
	00		 jne	 $LN6@ApplyExtra

; 185  : 	{
; 186  : 	case BS_FIRE:
; 187  : 		{
; 188  : 			bool bShort;
; 189  : 			rkPacket >> bShort;

  0004a	8d 45 e3	 lea	 eax, DWORD PTR _bShort$523952[ebp]
  0004d	50		 push	 eax
  0004e	8b cb		 mov	 ecx, ebx
  00050	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>

; 190  : 
; 191  : 			if ( bShort )

  00055	80 7d e3 00	 cmp	 BYTE PTR _bShort$523952[ebp], 0

; 192  : 				m_CurWeaponInfo = m_ShortWeaponInfo;

  00059	8d 8e f8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2552]
  0005f	8d 86 a0 09 00
	00		 lea	 eax, DWORD PTR [esi+2464]
  00065	75 06		 jne	 SHORT $LN28@ApplyExtra

; 193  : 			else
; 194  : 				m_CurWeaponInfo = m_LongWeaponInfo;

  00067	8d 86 c8 09 00
	00		 lea	 eax, DWORD PTR [esi+2504]
$LN28@ApplyExtra:
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z

; 195  : 
; 196  : 			ioBaseChar *pCreator = GetCreator();

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator
  0007a	8b d8		 mov	 ebx, eax

; 197  : 			if( !pCreator )

  0007c	85 db		 test	 ebx, ebx
  0007e	0f 84 fd 00 00
	00		 je	 $LN6@ApplyExtra

; 198  : 				return;
; 199  : 
; 200  : 			D3DXVECTOR3 vPos = pOwner->GetMidPositionByRate();

  00084	b8 05 00 00 00	 mov	 eax, 5
  00089	8b c8		 mov	 ecx, eax
  0008b	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00090	89 4d d4	 mov	 DWORD PTR tv330[ebp], ecx
  00093	db 45 d4	 fild	 DWORD PTR tv330[ebp]
  00096	85 c9		 test	 ecx, ecx
  00098	79 06		 jns	 SHORT $LN26@ApplyExtra
  0009a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN26@ApplyExtra:
  000a0	89 45 d4	 mov	 DWORD PTR tv326[ebp], eax
  000a3	db 45 d4	 fild	 DWORD PTR tv326[ebp]
  000a6	85 c0		 test	 eax, eax
  000a8	79 06		 jns	 SHORT $LN27@ApplyExtra
  000aa	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN27@ApplyExtra:
  000b0	de f9		 fdivp	 ST(1), ST(0)
  000b2	51		 push	 ecx
  000b3	8d 45 f0	 lea	 eax, DWORD PTR _vPos$523957[ebp]
  000b6	8b cf		 mov	 ecx, edi
  000b8	d9 5d d8	 fstp	 DWORD PTR tv322[ebp]
  000bb	d9 45 d8	 fld	 DWORD PTR tv322[ebp]
  000be	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 201  : 			vPos.y += m_fFireHeightOffSet;

  000c7	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vPos$523957[ebp+4]
  000cc	f3 0f 10 86 98
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2456]
  000d4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d7	0f 5a c9	 cvtps2pd xmm1, xmm1
  000da	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000de	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 202  : 
; 203  : 			DWORD dwWeaponIndex = pCreator->IncreaseWeaponIndexBase();

  000e2	8b cb		 mov	 ecx, ebx
  000e4	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$523957[ebp+4], xmm0
  000e9	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  000ee	89 45 d4	 mov	 DWORD PTR _dwWeaponIndex$523959[ebp], eax

; 204  : 			ioWeapon* pWeapon = pCreator->DummyExplicit( m_CurWeaponInfo, vPos, dwWeaponIndex, false, pOwner->GetCharName(), m_Name, m_bUseCallAttWeaponCol );

  000f1	8d 45 d8	 lea	 eax, DWORD PTR _value$529730[ebp]
  000f4	50		 push	 eax
  000f5	8d 8e 7c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1148]
  000fb	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00100	ff 75 d8	 push	 DWORD PTR _value$529730[ebp]
  00103	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  00109	50		 push	 eax
  0010a	81 c7 d4 02 00
	00		 add	 edi, 724		; 000002d4H
  00110	57		 push	 edi
  00111	6a 00		 push	 0
  00113	ff 75 d4	 push	 DWORD PTR _dwWeaponIndex$523959[ebp]
  00116	8d 45 f0	 lea	 eax, DWORD PTR _vPos$523957[ebp]
  00119	50		 push	 eax
  0011a	8d 86 f8 09 00
	00		 lea	 eax, DWORD PTR [esi+2552]
  00120	50		 push	 eax
  00121	8b cb		 mov	 ecx, ebx
  00123	e8 00 00 00 00	 call	 ?DummyExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUWeaponInfo@@ABUD3DXVECTOR3@@K_NABVioHashString@@32@Z ; ioBaseChar::DummyExplicit
  00128	8b f8		 mov	 edi, eax

; 205  : 			if( pWeapon )

  0012a	85 ff		 test	 edi, edi
  0012c	74 4c		 je	 SHORT $LN1@ApplyExtra

; 206  : 			{
; 207  : 				pWeapon->SetPosition( vPos );

  0012e	8d 45 f0	 lea	 eax, DWORD PTR _vPos$523957[ebp]
  00131	50		 push	 eax
  00132	8b cf		 mov	 ecx, edi
  00134	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 208  : 				pWeapon->SetMoveDir( -ioMath::UNIT_Y );

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  0013e	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00143	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00148	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  00154	8d 4d e4	 lea	 ecx, DWORD PTR $T523962[ebp]
  00157	0f 57 c8	 xorps	 xmm1, xmm0
  0015a	0f 57 d0	 xorps	 xmm2, xmm0
  0015d	0f 57 d8	 xorps	 xmm3, xmm0
  00160	f3 0f 11 5d e4	 movss	 DWORD PTR $T523962[ebp], xmm3
  00165	f3 0f 11 4d e8	 movss	 DWORD PTR $T523962[ebp+4], xmm1
  0016a	f3 0f 11 55 ec	 movss	 DWORD PTR $T523962[ebp+8], xmm2
  0016f	8b 07		 mov	 eax, DWORD PTR [edi]
  00171	51		 push	 ecx
  00172	8b cf		 mov	 ecx, edi
  00174	ff 90 b0 00 00
	00		 call	 DWORD PTR [eax+176]
$LN1@ApplyExtra:

; 209  : 			}
; 210  : 
; 211  : 			SetReserveEndBuff();

  0017a	8b ce		 mov	 ecx, esi
  0017c	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN6@ApplyExtra:

; 212  : 		}
; 213  : 		break;
; 214  : 	}
; 215  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	33 cd		 xor	 ecx, ebp
  00188	5b		 pop	 ebx
  00189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018e	c9		 leave
  0018f	c2 04 00	 ret	 4
?ApplyExtraBuffInfo@ioCreateWeaponBuff3@@UAEXAAVSP2Packet@@@Z ENDP ; ioCreateWeaponBuff3::ApplyExtraBuffInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ	; ioCreateWeaponBuff3::CreateWeapon
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@_N@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
xdata$x	SEGMENT
__unwindtable$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ$0
__ehfuncinfo$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponbuff3.cpp
xdata$x	ENDS
;	COMDAT ?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ
_TEXT	SEGMENT
_value$529792 = -32848					; size = 1
_pCreator$ = -32844					; size = 4
tv614 = -32840						; size = 4
tv609 = -32840						; size = 4
tv597 = -32840						; size = 4
tv593 = -32840						; size = 4
_dwWeaponIndex$ = -32840				; size = 4
tv604 = -32836						; size = 4
tv589 = -32836						; size = 4
_bShort$ = -32836					; size = 1
_kPacket$523983 = -32832				; size = 32792
$T523981 = -40						; size = 12
$T523973 = -40						; size = 12
_vPos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ PROC		; ioCreateWeaponBuff3::CreateWeapon, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 44 80 00 00	 mov	 eax, 32836		; 00008044H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f1		 mov	 esi, ecx

; 219  : 	ioBaseChar *pOwner = GetOwner();

  00034	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00039	8b f8		 mov	 edi, eax

; 220  : 	if( !pOwner )

  0003b	85 ff		 test	 edi, edi
  0003d	0f 84 c7 02 00
	00		 je	 $LN1@CreateWeap

; 221  : 		return;
; 222  : 
; 223  : 	ioBaseChar *pCreator = GetCreator();

  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator
  0004a	8b d8		 mov	 ebx, eax
  0004c	89 9d b4 7f ff
	ff		 mov	 DWORD PTR _pCreator$[ebp], ebx

; 224  : 	if( !pCreator )

  00052	85 db		 test	 ebx, ebx
  00054	0f 84 b0 02 00
	00		 je	 $LN1@CreateWeap

; 225  : 		return;
; 226  : 
; 227  : 	D3DXVECTOR3 vPos = pOwner->GetMidPositionByRate();

  0005a	b8 05 00 00 00	 mov	 eax, 5
  0005f	8b c8		 mov	 ecx, eax
  00061	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00066	89 8d b8 7f ff
	ff		 mov	 DWORD PTR tv614[ebp], ecx
  0006c	db 85 b8 7f ff
	ff		 fild	 DWORD PTR tv614[ebp]
  00072	85 c9		 test	 ecx, ecx
  00074	79 06		 jns	 SHORT $LN37@CreateWeap
  00076	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN37@CreateWeap:
  0007c	89 85 b8 7f ff
	ff		 mov	 DWORD PTR tv609[ebp], eax
  00082	db 85 b8 7f ff
	ff		 fild	 DWORD PTR tv609[ebp]
  00088	85 c0		 test	 eax, eax
  0008a	79 06		 jns	 SHORT $LN38@CreateWeap
  0008c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN38@CreateWeap:
  00092	de f9		 fdivp	 ST(1), ST(0)
  00094	51		 push	 ecx
  00095	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  00098	8b cf		 mov	 ecx, edi
  0009a	d9 9d bc 7f ff
	ff		 fstp	 DWORD PTR tv604[ebp]
  000a0	d9 85 bc 7f ff
	ff		 fld	 DWORD PTR tv604[ebp]
  000a6	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 228  : 	D3DXVECTOR3 vDist = pCreator->GetMidPositionByRate() - vPos;

  000af	b8 05 00 00 00	 mov	 eax, 5
  000b4	8b c8		 mov	 ecx, eax
  000b6	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000bb	89 8d b8 7f ff
	ff		 mov	 DWORD PTR tv597[ebp], ecx
  000c1	db 85 b8 7f ff
	ff		 fild	 DWORD PTR tv597[ebp]
  000c7	85 c9		 test	 ecx, ecx
  000c9	79 06		 jns	 SHORT $LN39@CreateWeap
  000cb	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN39@CreateWeap:
  000d1	89 85 b8 7f ff
	ff		 mov	 DWORD PTR tv593[ebp], eax
  000d7	db 85 b8 7f ff
	ff		 fild	 DWORD PTR tv593[ebp]
  000dd	85 c0		 test	 eax, eax
  000df	79 06		 jns	 SHORT $LN40@CreateWeap
  000e1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN40@CreateWeap:
  000e7	de f9		 fdivp	 ST(1), ST(0)
  000e9	51		 push	 ecx
  000ea	8d 45 d8	 lea	 eax, DWORD PTR $T523973[ebp]
  000ed	8b cb		 mov	 ecx, ebx
  000ef	d9 9d bc 7f ff
	ff		 fstp	 DWORD PTR tv589[ebp]
  000f5	d9 85 bc 7f ff
	ff		 fld	 DWORD PTR tv589[ebp]
  000fb	d9 1c 24	 fstp	 DWORD PTR [esp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  00104	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00108	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vPos$[ebp]
  0010d	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vPos$[ebp+4]
  00112	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _vPos$[ebp+8]
  00117	0f 5a c0	 cvtps2pd xmm0, xmm0
  0011a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0011d	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00121	0f 57 c9	 xorps	 xmm1, xmm1
  00124	66 0f 5a c8	 cvtpd2ps xmm1, xmm0
  00128	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0012d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00130	0f 5a d2	 cvtps2pd xmm2, xmm2
  00133	f2 0f 5c c2	 subsd	 xmm0, xmm2
  00137	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0013c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00140	0f 5a d2	 cvtps2pd xmm2, xmm2
  00143	0f 5a db	 cvtps2pd xmm3, xmm3
  00146	f2 0f 5c d3	 subsd	 xmm2, xmm3

; 229  : 	bool bShort = true;
; 230  : 	if ( D3DXVec3LengthSq( &vDist ) <= m_fCheckDist * m_fCheckDist )

  0014a	f3 0f 10 9e 9c
	09 00 00	 movss	 xmm3, DWORD PTR [esi+2460]
  00152	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00156	0f 5a c9	 cvtps2pd xmm1, xmm1
  00159	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  0015d	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00161	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  00165	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00169	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  0016d	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00171	0f 57 c0	 xorps	 xmm0, xmm0
  00174	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00178	0f 5a db	 cvtps2pd xmm3, xmm3
  0017b	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0017f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00182	f2 0f 59 db	 mulsd	 xmm3, xmm3
  00186	66 0f 2f d8	 comisd	 xmm3, xmm0
  0018a	c6 85 bc 7f ff
	ff 01		 mov	 BYTE PTR _bShort$[ebp], 1

; 231  : 		m_CurWeaponInfo = m_ShortWeaponInfo;

  00191	8d 8e f8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2552]
  00197	72 0e		 jb	 SHORT $LN4@CreateWeap
  00199	8d 86 a0 09 00
	00		 lea	 eax, DWORD PTR [esi+2464]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z

; 232  : 	else

  001a5	eb 13		 jmp	 SHORT $LN3@CreateWeap
$LN4@CreateWeap:

; 233  : 	{
; 234  : 		m_CurWeaponInfo = m_LongWeaponInfo;

  001a7	8d 86 c8 09 00
	00		 lea	 eax, DWORD PTR [esi+2504]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z

; 235  : 		bShort = false;

  001b3	c6 85 bc 7f ff
	ff 00		 mov	 BYTE PTR _bShort$[ebp], 0
$LN3@CreateWeap:

; 236  : 	}
; 237  : 
; 238  : 	vPos.y += m_fFireHeightOffSet;

  001ba	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vPos$[ebp+4]
  001bf	f3 0f 10 86 98
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2456]
  001c7	0f 5a c0	 cvtps2pd xmm0, xmm0
  001ca	0f 5a c9	 cvtps2pd xmm1, xmm1
  001cd	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001d1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 239  : 	DWORD dwWeaponIndex = pCreator->IncreaseWeaponIndexBase();

  001d5	8b cb		 mov	 ecx, ebx
  001d7	f3 0f 11 45 e8	 movss	 DWORD PTR _vPos$[ebp+4], xmm0
  001dc	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  001e1	89 85 b8 7f ff
	ff		 mov	 DWORD PTR _dwWeaponIndex$[ebp], eax

; 240  : 
; 241  : 	ioWeapon* pWeapon = pCreator->DummyExplicit( m_CurWeaponInfo, vPos, dwWeaponIndex, false, pOwner->GetCharName(), m_Name, m_bUseCallAttWeaponCol );

  001e7	8d 85 b0 7f ff
	ff		 lea	 eax, DWORD PTR _value$529792[ebp]
  001ed	50		 push	 eax
  001ee	8d 8e 7c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1148]
  001f4	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  001f9	ff b5 b0 7f ff
	ff		 push	 DWORD PTR _value$529792[ebp]
  001ff	8b 8d b4 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  00205	8d 9e 34 02 00
	00		 lea	 ebx, DWORD PTR [esi+564]
  0020b	53		 push	 ebx
  0020c	81 c7 d4 02 00
	00		 add	 edi, 724		; 000002d4H
  00212	57		 push	 edi
  00213	6a 00		 push	 0
  00215	ff b5 b8 7f ff
	ff		 push	 DWORD PTR _dwWeaponIndex$[ebp]
  0021b	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  0021e	50		 push	 eax
  0021f	8d 86 f8 09 00
	00		 lea	 eax, DWORD PTR [esi+2552]
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?DummyExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUWeaponInfo@@ABUD3DXVECTOR3@@K_NABVioHashString@@32@Z ; ioBaseChar::DummyExplicit
  0022b	8b f8		 mov	 edi, eax

; 242  : 	if( pWeapon )

  0022d	85 ff		 test	 edi, edi
  0022f	74 4c		 je	 SHORT $LN2@CreateWeap

; 243  : 	{
; 244  : 		pWeapon->SetPosition( vPos );

  00231	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  00234	50		 push	 eax
  00235	8b cf		 mov	 ecx, edi
  00237	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 245  : 		pWeapon->SetMoveDir( -ioMath::UNIT_Y );

  0023c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  00241	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00245	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0024a	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  0024f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  00257	8b 07		 mov	 eax, DWORD PTR [edi]
  00259	8d 4d d8	 lea	 ecx, DWORD PTR $T523981[ebp]
  0025c	51		 push	 ecx
  0025d	0f 57 c8	 xorps	 xmm1, xmm0
  00260	0f 57 d0	 xorps	 xmm2, xmm0
  00263	0f 57 d8	 xorps	 xmm3, xmm0
  00266	8b cf		 mov	 ecx, edi
  00268	f3 0f 11 4d d8	 movss	 DWORD PTR $T523981[ebp], xmm1
  0026d	f3 0f 11 55 dc	 movss	 DWORD PTR $T523981[ebp+4], xmm2
  00272	f3 0f 11 5d e0	 movss	 DWORD PTR $T523981[ebp+8], xmm3
  00277	ff 90 b0 00 00
	00		 call	 DWORD PTR [eax+176]
$LN2@CreateWeap:

; 246  : 	}
; 247  : 
; 248  : 	SetReserveEndBuff();

  0027d	8b ce		 mov	 ecx, esi
  0027f	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 249  : 
; 250  : 	if ( m_pOwner->IsNeedSendNetwork() )

  00284	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0028a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028c	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00292	84 c0		 test	 al, al
  00294	74 74		 je	 SHORT $LN1@CreateWeap

; 251  : 	{
; 252  : 		SP2Packet kPacket( CUPK_APPLY_EXTRA_BUFF_INFO );

  00296	68 45 42 00 00	 push	 16965			; 00004245H
  0029b	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$523983[ebp]
  002a1	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 253  : 		kPacket << m_pOwner->GetCharName();

  002a6	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  002ac	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  002b0	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  002b5	50		 push	 eax
  002b6	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$523983[ebp]
  002bc	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 254  : 		kPacket << GetName();

  002c1	53		 push	 ebx
  002c2	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$523983[ebp]
  002c8	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 255  : 		kPacket << BS_FIRE;

  002cd	6a 02		 push	 2
  002cf	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$523983[ebp]
  002d5	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 256  : 		kPacket << bShort;

  002da	ff b5 bc 7f ff
	ff		 push	 DWORD PTR _bShort$[ebp]
  002e0	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$523983[ebp]
  002e6	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 257  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  002eb	8d 85 c0 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$523983[ebp]
  002f1	6a 00		 push	 0
  002f3	50		 push	 eax
  002f4	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 258  : 	}

  002f9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002fd	59		 pop	 ecx
  002fe	59		 pop	 ecx
  002ff	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$523983[ebp]
  00305	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@CreateWeap:

; 259  : }

  0030a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0030d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00314	59		 pop	 ecx
  00315	5f		 pop	 edi
  00316	5e		 pop	 esi
  00317	5b		 pop	 ebx
  00318	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031b	33 cd		 xor	 ecx, ebp
  0031d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00322	c9		 leave
  00323	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ$0:
  00000	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$523983[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a ac 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32852]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ ENDP		; ioCreateWeaponBuff3::CreateWeapon
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioCreateWeaponBuff3@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioCreateWeaponBuff3@@UAEXM@Z PROC		; ioCreateWeaponBuff3::ProcessBuff, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 111  : 	ioBaseChar *pCreator = GetCreator();

  00006	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator

; 112  : 	if( !m_pOwner || !pCreator || pCreator->GetState() == CS_DIE )

  0000b	83 be 74 02 00
	00 00		 cmp	 DWORD PTR [esi+628], 0
  00012	0f 84 af 00 00
	00		 je	 $LN13@ProcessBuf
  00018	85 c0		 test	 eax, eax
  0001a	0f 84 a7 00 00
	00		 je	 $LN13@ProcessBuf
  00020	80 b8 10 03 00
	00 0e		 cmp	 BYTE PTR [eax+784], 14	; 0000000eH
  00027	0f 84 9a 00 00
	00		 je	 $LN13@ProcessBuf

; 115  : 		return;
; 116  : 	}
; 117  : 	
; 118  : 	switch( m_iOperationType )

  0002d	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00033	83 e8 00	 sub	 eax, 0
  00036	74 3c		 je	 SHORT $LN7@ProcessBuf
  00038	48		 dec	 eax
  00039	74 06		 je	 SHORT $LN8@ProcessBuf
  0003b	48		 dec	 eax
  0003c	74 17		 je	 SHORT $LN10@ProcessBuf
  0003e	48		 dec	 eax
  0003f	75 3a		 jne	 SHORT $LN11@ProcessBuf
$LN8@ProcessBuf:

; 128  : 	case OT_DELAY:
; 129  : 	case OT_ACTIVE:
; 130  : 		ioBuff::ProcessBuff( fTimePerSec );

  00041	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00046	51		 push	 ecx
  00047	8b ce		 mov	 ecx, esi
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 131  : 		break;

  00053	eb 26		 jmp	 SHORT $LN11@ProcessBuf
$LN10@ProcessBuf:

; 119  : 	{
; 120  : 	case OT_SWITCH:
; 121  : 		if( !CheckSwitchType( fTimePerSec ) )

  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0005a	51		 push	 ecx
  0005b	8b ce		 mov	 ecx, esi
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 122  : 		{
; 123  : 			SetReserveEndBuff();

  00067	8b ce		 mov	 ecx, esi
  00069	84 c0		 test	 al, al

; 124  : 			return;

  0006b	74 5c		 je	 SHORT $LN19@ProcessBuf

; 125  : 		}
; 126  : 		CheckCallingProcess();

  0006d	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 127  : 		break;

  00072	eb 07		 jmp	 SHORT $LN11@ProcessBuf
$LN7@ProcessBuf:

; 132  : 	case OT_PASSIVE:
; 133  : 		CheckCallingAreaWeapon();

  00074	8b ce		 mov	 ecx, esi
  00076	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN11@ProcessBuf:

; 134  : 		break;
; 135  : 	}
; 136  : 
; 137  : 	DWORD dwCurTime = FRAMEGETTIME();

  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00081	8b c8		 mov	 ecx, eax
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 138  : 	switch( m_BuffState )

  00089	8b 8e f0 09 00
	00		 mov	 ecx, DWORD PTR [esi+2544]
  0008f	49		 dec	 ecx
  00090	74 1e		 je	 SHORT $LN4@ProcessBuf
  00092	49		 dec	 ecx
  00093	75 39		 jne	 SHORT $LN5@ProcessBuf

; 146  : 			}
; 147  : 		}
; 148  : 		break;
; 149  : 	case BS_FIRE:
; 150  : 		{
; 151  : 			if ( m_pOwner->IsNeedProcess() )

  00095	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0009b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009d	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  000a3	84 c0		 test	 al, al
  000a5	74 27		 je	 SHORT $LN5@ProcessBuf

; 152  : 				CreateWeapon();

  000a7	8b ce		 mov	 ecx, esi
  000a9	e8 00 00 00 00	 call	 ?CreateWeapon@ioCreateWeaponBuff3@@IAEXXZ ; ioCreateWeaponBuff3::CreateWeapon

; 153  : 		}
; 154  : 		break;

  000ae	eb 1e		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 139  : 	{
; 140  : 	case BS_WAIT:
; 141  : 		{
; 142  : 			if ( m_dwCheckWaitTime < dwCurTime )

  000b0	39 86 f4 09 00
	00		 cmp	 DWORD PTR [esi+2548], eax
  000b6	73 16		 jae	 SHORT $LN5@ProcessBuf

; 143  : 			{
; 144  : 				SetFireState( m_pOwner );

  000b8	ff b6 74 02 00
	00		 push	 DWORD PTR [esi+628]
  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?SetFireState@ioCreateWeaponBuff3@@IAEXPAVioBaseChar@@@Z ; ioCreateWeaponBuff3::SetFireState

; 145  : 				return;

  000c5	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN13@ProcessBuf:

; 113  : 	{
; 114  : 		SetReserveEndBuff();

  000c7	8b ce		 mov	 ecx, esi
$LN19@ProcessBuf:
  000c9	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN5@ProcessBuf:
  000ce	5e		 pop	 esi

; 155  : 	}
; 156  : }

  000cf	5d		 pop	 ebp
  000d0	c2 04 00	 ret	 4
?ProcessBuff@ioCreateWeaponBuff3@@UAEXM@Z ENDP		; ioCreateWeaponBuff3::ProcessBuff
_TEXT	ENDS
END
