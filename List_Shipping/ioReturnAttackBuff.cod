; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioReturnAttackBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7ioReturnAttackBuff@@6B@			; ioReturnAttackBuff::`vftable'
PUBLIC	??0ioReturnAttackBuff@@QAE@XZ			; ioReturnAttackBuff::ioReturnAttackBuff
PUBLIC	??_R4ioReturnAttackBuff@@6B@			; ioReturnAttackBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioReturnAttackBuff@@@8			; ioReturnAttackBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioReturnAttackBuff@@8			; ioReturnAttackBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioReturnAttackBuff@@8			; ioReturnAttackBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioReturnAttackBuff@@8		; ioReturnAttackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioReturnAttackBuff@@UAEXAAVioINILoader@@@Z ; ioReturnAttackBuff::LoadProperty
PUBLIC	?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ	; ioReturnAttackBuff::Clone
PUBLIC	?StartBuff@ioReturnAttackBuff@@UAEXPAVioBaseChar@@@Z ; ioReturnAttackBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioReturnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioReturnAttackBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioReturnAttackBuff@@UAEXM@Z	; ioReturnAttackBuff::ProcessBuff
PUBLIC	?EndBuff@ioReturnAttackBuff@@UAEXXZ		; ioReturnAttackBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioReturnAttackBuff@@UAEPAXI@Z:PROC		; ioReturnAttackBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreturnattackbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioReturnAttackBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioReturnAttackBuff@@8 DD FLAT:??_R0?AVioReturnAttackBuff@@@8 ; ioReturnAttackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioReturnAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioReturnAttackBuff@@8
rdata$r	SEGMENT
??_R2ioReturnAttackBuff@@8 DD FLAT:??_R1A@?0A@EA@ioReturnAttackBuff@@8 ; ioReturnAttackBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioReturnAttackBuff@@8
rdata$r	SEGMENT
??_R3ioReturnAttackBuff@@8 DD 00H			; ioReturnAttackBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioReturnAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioReturnAttackBuff@@@8
_DATA	SEGMENT
??_R0?AVioReturnAttackBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioReturnAttackBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioReturnAttackBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioReturnAttackBuff@@6B@
rdata$r	SEGMENT
??_R4ioReturnAttackBuff@@6B@ DD 00H			; ioReturnAttackBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioReturnAttackBuff@@@8
	DD	FLAT:??_R3ioReturnAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioReturnAttackBuff@@6B@
CONST	SEGMENT
??_7ioReturnAttackBuff@@6B@ DD FLAT:??_R4ioReturnAttackBuff@@6B@ ; ioReturnAttackBuff::`vftable'
	DD	FLAT:?LoadProperty@ioReturnAttackBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioReturnAttackBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioReturnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioReturnAttackBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioReturnAttackBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioReturnAttackBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioReturnAttackBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioReturnAttackBuff@@QAE@XZ PROC			; ioReturnAttackBuff::ioReturnAttackBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff

; 11   : 	m_iReturnAttackNum = 0;

  00008	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioReturnAttackBuff@@6B@

; 12   : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0ioReturnAttackBuff@@QAE@XZ ENDP			; ioReturnAttackBuff::ioReturnAttackBuff
_TEXT	ENDS
PUBLIC	??0ioReturnAttackBuff@@QAE@ABV0@@Z		; ioReturnAttackBuff::ioReturnAttackBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??0ioReturnAttackBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioReturnAttackBuff@@QAE@ABV0@@Z PROC			; ioReturnAttackBuff::ioReturnAttackBuff, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioReturnAttackBuff@@6B@
  00016	8b 87 6c 09 00
	00		 mov	 eax, DWORD PTR [edi+2412]
  0001c	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  00022	8b 87 70 09 00
	00		 mov	 eax, DWORD PTR [edi+2416]
  00028	89 86 70 09 00
	00		 mov	 DWORD PTR [esi+2416], eax
  0002e	8a 87 74 09 00
	00		 mov	 al, BYTE PTR [edi+2420]
  00034	88 86 74 09 00
	00		 mov	 BYTE PTR [esi+2420], al
  0003a	5f		 pop	 edi

; 20   : }

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??0ioReturnAttackBuff@@QAE@ABV0@@Z ENDP			; ioReturnAttackBuff::ioReturnAttackBuff
_TEXT	ENDS
PUBLIC	??1ioReturnAttackBuff@@UAE@XZ			; ioReturnAttackBuff::~ioReturnAttackBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioReturnAttackBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioReturnAttackBuff@@UAE@XZ PROC			; ioReturnAttackBuff::~ioReturnAttackBuff, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioReturnAttackBuff@@6B@

; 24   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioReturnAttackBuff@@UAE@XZ ENDP			; ioReturnAttackBuff::~ioReturnAttackBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524586 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ PROC	; ioReturnAttackBuff::Clone, COMDAT
; _this$ = ecx

; 37   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 38   : 	return new ioReturnAttackBuff( *this );

  0000e	68 78 09 00 00	 push	 2424			; 00000978H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524586[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioReturnAttackBuff@@QAE@ABV0@@Z ; ioReturnAttackBuff::ioReturnAttackBuff
$LN3@Clone:

; 39   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524586[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioReturnAttackBuff@@UAEPAVioBuff@@XZ ENDP	; ioReturnAttackBuff::Clone
EXTRN	?SetReturnAttackAttribute@ioBaseChar@@QAEXHH@Z:PROC ; ioBaseChar::SetReturnAttackAttribute
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioReturnAttackBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioReturnAttackBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioReturnAttackBuff::StartBuff, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 43   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 44   : 
; 45   : 	m_pOwner->SetReturnAttackAttribute( m_iReturnAttackNum, m_iReturnAttackNumResist );

  0000e	ff b6 70 09 00
	00		 push	 DWORD PTR [esi+2416]
  00014	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0001a	ff b6 6c 09 00
	00		 push	 DWORD PTR [esi+2412]
  00020	e8 00 00 00 00	 call	 ?SetReturnAttackAttribute@ioBaseChar@@QAEXHH@Z ; ioBaseChar::SetReturnAttackAttribute
  00025	5e		 pop	 esi

; 46   : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?StartBuff@ioReturnAttackBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioReturnAttackBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioReturnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioReturnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioReturnAttackBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 50   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 19		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 51   : 		return false;
; 52   : 
; 53   : 	m_pOwner->SetReturnAttackAttribute( m_iReturnAttackNum, m_iReturnAttackNumResist );

  00018	ff b6 70 09 00
	00		 push	 DWORD PTR [esi+2416]
  0001e	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00024	ff b6 6c 09 00
	00		 push	 DWORD PTR [esi+2412]
  0002a	e8 00 00 00 00	 call	 ?SetReturnAttackAttribute@ioBaseChar@@QAEXHH@Z ; ioBaseChar::SetReturnAttackAttribute

; 54   : 	return true;

  0002f	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  00031	5e		 pop	 esi

; 55   : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioReturnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioReturnAttackBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioReturnAttackBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioReturnAttackBuff@@UAEXXZ PROC		; ioReturnAttackBuff::EndBuff, COMDAT
; _this$ = ecx

; 83   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 84   : 	if( m_pOwner )

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 09		 je	 SHORT $LN1@EndBuff

; 85   : 		m_pOwner->SetReturnAttackAttribute( 0, 0 );

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	e8 00 00 00 00	 call	 ?SetReturnAttackAttribute@ioBaseChar@@QAEXHH@Z ; ioBaseChar::SetReturnAttackAttribute
$LN1@EndBuff:

; 86   : 
; 87   : 	ioBuff::EndBuff();

  00016	8b ce		 mov	 ecx, esi
  00018	5e		 pop	 esi
  00019	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioReturnAttackBuff@@UAEXXZ ENDP		; ioReturnAttackBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioReturnAttackBuff@@IAEXXZ ; ioReturnAttackBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioReturnAttackBuff@@IAEXXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioReturnAttackBuff@@IAEXXZ PROC	; ioReturnAttackBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 91   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 	if( !m_pOwner ) return;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	33 d2		 xor	 edx, edx
  0000b	3b ca		 cmp	 ecx, edx
  0000d	74 57		 je	 SHORT $LN1@CheckOwner

; 93   : 
; 94   : 	CharState eState = m_pOwner->GetState();

  0000f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 95   : 
; 96   : 	if( m_bDisableDownState )

  00015	38 96 74 09 00
	00		 cmp	 BYTE PTR [esi+2420], dl
  0001b	74 49		 je	 SHORT $LN1@CheckOwner

; 97   : 	{
; 98   : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001d	3c 17		 cmp	 al, 23			; 00000017H
  0001f	75 10		 jne	 SHORT $LN13@CheckOwner
  00021	38 91 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], dl
$LN29@CheckOwner:
  00027	74 3d		 je	 SHORT $LN1@CheckOwner
$LN28@CheckOwner:

; 99   : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
  0002c	e9 00 00 00 00	 jmp	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN13@CheckOwner:

; 100  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00031	3c 0c		 cmp	 al, 12			; 0000000cH
  00033	75 0b		 jne	 SHORT $LN11@CheckOwner
$LN31@CheckOwner:
  00035	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  0003a	84 c0		 test	 al, al
  0003c	75 28		 jne	 SHORT $LN1@CheckOwner

; 101  : 			SetReserveEndBuff();

  0003e	eb e9		 jmp	 SHORT $LN28@CheckOwner
$LN11@CheckOwner:

; 102  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00040	3c 31		 cmp	 al, 49			; 00000031H

; 103  : 			SetReserveEndBuff();

  00042	74 f1		 je	 SHORT $LN31@CheckOwner

; 104  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00044	3c 0f		 cmp	 al, 15			; 0000000fH
  00046	75 0a		 jne	 SHORT $LN7@CheckOwner
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0004e	84 c0		 test	 al, al

; 105  : 			SetReserveEndBuff();

  00050	eb d5		 jmp	 SHORT $LN29@CheckOwner
$LN7@CheckOwner:

; 106  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00052	3c 26		 cmp	 al, 38			; 00000026H
  00054	75 08		 jne	 SHORT $LN5@CheckOwner
$LN30@CheckOwner:
  00056	38 91 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], dl

; 107  : 			SetReserveEndBuff();

  0005c	eb c9		 jmp	 SHORT $LN29@CheckOwner
$LN5@CheckOwner:

; 108  : 		else if( eState == CS_DROP_ZONE_DOWN )

  0005e	3c 10		 cmp	 al, 16			; 00000010H

; 109  : 			SetReserveEndBuff();

  00060	74 c7		 je	 SHORT $LN28@CheckOwner

; 110  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00062	3c 3b		 cmp	 al, 59			; 0000003bH

; 111  : 			SetReserveEndBuff();

  00064	74 f0		 je	 SHORT $LN30@CheckOwner
$LN1@CheckOwner:
  00066	5e		 pop	 esi

; 112  : 	}
; 113  : }

  00067	c3		 ret	 0
?CheckOwnerStateCheck@ioReturnAttackBuff@@IAEXXZ ENDP	; ioReturnAttackBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioReturnAttackBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioReturnAttackBuff@@UAEPAXI@Z PROC			; ioReturnAttackBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioReturnAttackBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioReturnAttackBuff@@UAEPAXI@Z ENDP			; ioReturnAttackBuff::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreturnattackbuff.cpp
;	COMDAT ?ProcessBuff@ioReturnAttackBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioReturnAttackBuff@@UAEXM@Z PROC		; ioReturnAttackBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 59   : 	CheckOwnerStateCheck();

  00006	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioReturnAttackBuff@@IAEXXZ ; ioReturnAttackBuff::CheckOwnerStateCheck

; 60   : 
; 61   : 	switch( m_iOperationType )

  0000b	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00011	83 e8 00	 sub	 eax, 0
  00014	74 43		 je	 SHORT $LN1@ProcessBuf
  00016	48		 dec	 eax
  00017	74 06		 je	 SHORT $LN2@ProcessBuf
  00019	48		 dec	 eax
  0001a	74 17		 je	 SHORT $LN4@ProcessBuf
  0001c	48		 dec	 eax
  0001d	75 41		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 72   : 	case OT_DELAY:
; 73   : 	case OT_ACTIVE:
; 74   : 		ioBuff::ProcessBuff( fTimePerSec );

  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 75   : 		break;

  00031	eb 2d		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 62   : 	{
; 63   : 	case OT_SWITCH:
; 64   : 		if( !CheckSwitchType( fTimePerSec ) )

  00033	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00038	51		 push	 ecx
  00039	8b ce		 mov	 ecx, esi
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 65   : 		{
; 66   : 			SetReserveEndBuff();

  00045	8b ce		 mov	 ecx, esi
  00047	84 c0		 test	 al, al
  00049	75 07		 jne	 SHORT $LN3@ProcessBuf
  0004b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 67   : 			return;

  00050	eb 0e		 jmp	 SHORT $LN5@ProcessBuf
$LN3@ProcessBuf:

; 68   : 		}
; 69   : 
; 70   : 		CheckCallingProcess();

  00052	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 71   : 		break;

  00057	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 76   : 	case OT_PASSIVE:
; 77   : 		CheckCallingAreaWeapon();

  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  00060	5e		 pop	 esi

; 78   : 		break;
; 79   : 	}
; 80   : }

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?ProcessBuff@ioReturnAttackBuff@@UAEXM@Z ENDP		; ioReturnAttackBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ; ioINILoader::LoadInt_e<24>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<24>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadInt_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadInt_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadInt_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadInt_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadInt_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadInt_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadInt_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadInt_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadInt_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadInt_e
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadInt_e
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadInt_e
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadInt_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadInt_e
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadInt_e
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadInt_e
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadInt_e
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadInt_e
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadInt_e
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadInt_e
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e
$LN69@LoadInt_e:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadInt_e
$LN70@LoadInt_e:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e
$LN71@LoadInt_e:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e
$LN72@LoadInt_e:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadInt_e:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadInt_e:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadInt_e
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadInt_e:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  002a0	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  002a3	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a6	50		 push	 eax
  002a7	8b ce		 mov	 ecx, esi
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	5e		 pop	 esi
  002b3	33 cd		 xor	 ecx, ebp
  002b5	5b		 pop	 ebx
  002b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bb	c9		 leave
  002bc	c2 08 00	 ret	 8
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z ; ioINILoader::LoadInt_e<31>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -40						; size = 31
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<31>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f5 02 00
	00		 je	 $LN96@LoadInt_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 de 02 00
	00		 je	 $LN95@LoadInt_e@2
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c6 02 00
	00		 je	 $LN94@LoadInt_e@2
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 af 02 00
	00		 je	 $LN93@LoadInt_e@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 97 02 00
	00		 je	 $LN92@LoadInt_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 81 02 00
	00		 je	 $LN91@LoadInt_e@2
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6b 02 00
	00		 je	 $LN90@LoadInt_e@2
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 55 02 00
	00		 je	 $LN89@LoadInt_e@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 3f 02 00
	00		 je	 $LN88@LoadInt_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 29 02 00
	00		 je	 $LN87@LoadInt_e@2
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 13 02 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 fd 01 00
	00		 je	 $LN85@LoadInt_e@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e7 01 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d1 01 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 bb 01 00
	00		 je	 $LN82@LoadInt_e@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 a5 01 00
	00		 je	 $LN81@LoadInt_e@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 8f 01 00
	00		 je	 $LN80@LoadInt_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 79 01 00
	00		 je	 $LN79@LoadInt_e@2
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 63 01 00
	00		 je	 $LN78@LoadInt_e@2
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 4d 01 00
	00		 je	 $LN77@LoadInt_e@2
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 37 01 00
	00		 je	 $LN76@LoadInt_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 21 01 00
	00		 je	 $LN75@LoadInt_e@2
  00180	32 d1		 xor	 dl, cl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 0b 01 00
	00		 je	 $LN74@LoadInt_e@2
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 f5 00 00
	00		 je	 $LN73@LoadInt_e@2
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 dc 00 00
	00		 je	 $LN72@LoadInt_e@2
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 c3 00 00
	00		 je	 $LN71@LoadInt_e@2
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 aa 00 00
	00		 je	 $LN70@LoadInt_e@2
  001d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	0f 84 91 00 00
	00		 je	 $LN69@LoadInt_e@2
  001e3	32 d3		 xor	 dl, bl
  001e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	74 7c		 je	 SHORT $LN68@LoadInt_e@2
  001ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001f8	84 d2		 test	 dl, dl
  001fa	74 67		 je	 SHORT $LN67@LoadInt_e@2
  001fc	32 d1		 xor	 dl, cl
  001fe	80 78 1e 00	 cmp	 BYTE PTR [eax+30], 0
  00202	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  00205	0f 84 0f 01 00
	00		 je	 $LN1@LoadInt_e@2
  0020b	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020e	84 d2		 test	 dl, dl
  00210	74 49		 je	 SHORT $LN65@LoadInt_e@2
  00212	32 d3		 xor	 dl, bl
  00214	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00217	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0021a	84 d2		 test	 dl, dl
  0021c	74 34		 je	 SHORT $LN64@LoadInt_e@2
  0021e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00221	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00224	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00227	84 d2		 test	 dl, dl
  00229	74 1f		 je	 SHORT $LN63@LoadInt_e@2
  0022b	8a 40 22	 mov	 al, BYTE PTR [eax+34]
  0022e	32 d1		 xor	 dl, cl
  00230	88 55 f9	 mov	 BYTE PTR __k$[ebp+33], dl
  00233	84 c0		 test	 al, al
  00235	74 0a		 je	 SHORT $LN62@LoadInt_e@2
  00237	34 eb		 xor	 al, -21			; ffffffebH
  00239	88 45 fa	 mov	 BYTE PTR __k$[ebp+34], al
  0023c	e9 d9 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN62@LoadInt_e@2:
  00241	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+34], -21 ; ffffffebH
  00245	e9 d0 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN63@LoadInt_e@2:
  0024a	88 4d f9	 mov	 BYTE PTR __k$[ebp+33], cl
  0024d	e9 c8 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN64@LoadInt_e@2:
  00252	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  00256	e9 bf 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN65@LoadInt_e@2:
  0025b	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  0025e	e9 b7 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN67@LoadInt_e@2:
  00263	88 4d f5	 mov	 BYTE PTR __k$[ebp+29], cl
  00266	e9 af 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN68@LoadInt_e@2:
  0026b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0026f	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN69@LoadInt_e@2:
  00274	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  00277	e9 9e 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN70@LoadInt_e@2:
  0027c	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  00280	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN71@LoadInt_e@2:
  00285	88 4d f1	 mov	 BYTE PTR __k$[ebp+25], cl
  00288	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN72@LoadInt_e@2:
  0028d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00291	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN73@LoadInt_e@2:
  00296	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00299	eb 7f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  0029b	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0029f	eb 79		 jmp	 SHORT $LN1@LoadInt_e@2
$LN75@LoadInt_e@2:
  002a1	88 4d ed	 mov	 BYTE PTR __k$[ebp+21], cl
  002a4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  002a6	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002aa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  002ac	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  002af	eb 69		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  002b1	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  002b5	eb 63		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  002b7	88 4d e9	 mov	 BYTE PTR __k$[ebp+17], cl
  002ba	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  002bc	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002c0	eb 58		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  002c2	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002c5	eb 53		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  002c7	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  002cb	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  002cd	88 4d e5	 mov	 BYTE PTR __k$[ebp+13], cl
  002d0	eb 48		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  002d2	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002d6	eb 42		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  002d8	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002db	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  002dd	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  002e1	eb 37		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  002e3	88 4d e1	 mov	 BYTE PTR __k$[ebp+9], cl
  002e6	eb 32		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  002e8	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002ec	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  002ee	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002f1	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  002f3	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  002f7	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  002f9	88 4d dd	 mov	 BYTE PTR __k$[ebp+5], cl
  002fc	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  002fe	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00302	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00304	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00308	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  0030a	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0030e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00310	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00314	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00316	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  0031a	6a 07		 push	 7
  0031c	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  0031f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+30], 0
  00323	5a		 pop	 edx
$LL104@LoadInt_e@2:
  00324	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0032a	83 c0 04	 add	 eax, 4
  0032d	4a		 dec	 edx
  0032e	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  00330	6a 1c		 push	 28			; 0000001cH
  00332	58		 pop	 eax
$LL101@LoadInt_e@2:
  00333	8b c8		 mov	 ecx, eax
  00335	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0033b	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  0033d	49		 dec	 ecx
  0033e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00341	41		 inc	 ecx
$LN111@LoadInt_e@2:
  00342	b2 ed		 mov	 dl, -19			; ffffffedH
  00344	2a d1		 sub	 dl, cl
  00346	30 54 05 d8	 xor	 BYTE PTR __k$[ebp+eax], dl
  0034a	40		 inc	 eax
  0034b	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0034e	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00350	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00353	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00356	50		 push	 eax
  00357	8b ce		 mov	 ecx, esi
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0035f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00362	5e		 pop	 esi
  00363	33 cd		 xor	 ecx, ebp
  00365	5b		 pop	 ebx
  00366	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036b	c9		 leave
  0036c	c2 08 00	 ret	 8
??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<31>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreturnattackbuff.cpp
;	COMDAT ?LoadProperty@ioReturnAttackBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$524877 = -40					; size = 31
__k$524752 = -36					; size = 24
__k$525040 = -28					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioReturnAttackBuff@@UAEXAAVioINILoader@@@Z PROC ; ioReturnAttackBuff::LoadProperty, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 28   : 	ioBuff::LoadProperty( rkLoader );

  00016	53		 push	 ebx
  00017	8b f9		 mov	 edi, ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 29   : 
; 30   : 	m_iReturnAttackNum = rkLoader.LoadInt_e( "return_attack_attribute", 0 );

  0001e	6a 05		 push	 5
  00020	c7 45 dc 9f 89
	9f 9f		 mov	 DWORD PTR __k$524752[ebp], -1616934497 ; 9f9f899fH
  00027	c7 45 e0 9f 82
	b4 8b		 mov	 DWORD PTR __k$524752[ebp+4], -1951104353 ; 8bb4829fH
  0002e	c7 45 e4 99 98
	8a 89		 mov	 DWORD PTR __k$524752[ebp+8], -1987405671 ; 898a9899H
  00035	c7 45 e8 86 b3
	8a 9e		 mov	 DWORD PTR __k$524752[ebp+12], -1635077242 ; 9e8ab386H
  0003c	c7 45 ec 99 9e
	82 88		 mov	 DWORD PTR __k$524752[ebp+16], -2004705639 ; 88829e99H
  00043	8d 45 dc	 lea	 eax, DWORD PTR __k$524752[ebp]
  00046	c7 45 f0 98 98
	8e 00		 mov	 DWORD PTR __k$524752[ebp+20], 9345176 ; 008e9898H
  0004d	59		 pop	 ecx
$LL106@LoadProper:
  0004e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00054	83 c0 04	 add	 eax, 4
  00057	49		 dec	 ecx
  00058	75 f4		 jne	 SHORT $LL106@LoadProper
  0005a	6a 14		 push	 20			; 00000014H
  0005c	5e		 pop	 esi
$LL103@LoadProper:
  0005d	8b c6		 mov	 eax, esi
  0005f	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00064	79 05		 jns	 SHORT $LN333@LoadProper
  00066	48		 dec	 eax
  00067	83 c8 fc	 or	 eax, -4			; fffffffcH
  0006a	40		 inc	 eax
$LN333@LoadProper:
  0006b	b1 ed		 mov	 cl, -19			; ffffffedH
  0006d	2a c8		 sub	 cl, al
  0006f	30 4c 35 dc	 xor	 BYTE PTR __k$524752[ebp+esi], cl
  00073	46		 inc	 esi
  00074	83 fe 17	 cmp	 esi, 23			; 00000017H
  00077	7c e4		 jl	 SHORT $LL103@LoadProper
  00079	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0007f	6a 00		 push	 0
  00081	8d 45 dc	 lea	 eax, DWORD PTR __k$524752[ebp]
  00084	50		 push	 eax
  00085	8b cb		 mov	 ecx, ebx
  00087	ff d6		 call	 esi
  00089	6a 07		 push	 7
  0008b	89 87 6c 09 00
	00		 mov	 DWORD PTR [edi+2412], eax

; 31   : 	m_iReturnAttackNumResist = rkLoader.LoadInt_e( "return_attack_attribute_resist", 0 );

  00091	c7 45 d8 9f 89
	9f 9f		 mov	 DWORD PTR __k$524877[ebp], -1616934497 ; 9f9f899fH
  00098	c7 45 dc 9f 82
	b4 8b		 mov	 DWORD PTR __k$524877[ebp+4], -1951104353 ; 8bb4829fH
  0009f	c7 45 e0 99 98
	8a 89		 mov	 DWORD PTR __k$524877[ebp+8], -1987405671 ; 898a9899H
  000a6	c7 45 e4 86 b3
	8a 9e		 mov	 DWORD PTR __k$524877[ebp+12], -1635077242 ; 9e8ab386H
  000ad	c7 45 e8 99 9e
	82 88		 mov	 DWORD PTR __k$524877[ebp+16], -2004705639 ; 88829e99H
  000b4	c7 45 ec 98 98
	8e b5		 mov	 DWORD PTR __k$524877[ebp+20], -1248946024 ; b58e9898H
  000bb	c7 45 f0 9f 89
	98 83		 mov	 DWORD PTR __k$524877[ebp+24], -2087155297 ; 8398899fH
  000c2	66 c7 45 f4 9e
	98		 mov	 WORD PTR __k$524877[ebp+28], 39070 ; 0000989eH
  000c8	8d 45 d8	 lea	 eax, DWORD PTR __k$524877[ebp]
  000cb	c6 45 f6 00	 mov	 BYTE PTR __k$524877[ebp+30], 0
  000cf	59		 pop	 ecx
$LL212@LoadProper:
  000d0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000d6	83 c0 04	 add	 eax, 4
  000d9	49		 dec	 ecx
  000da	75 f4		 jne	 SHORT $LL212@LoadProper
  000dc	6a 1c		 push	 28			; 0000001cH
  000de	58		 pop	 eax
$LL209@LoadProper:
  000df	8b c8		 mov	 ecx, eax
  000e1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000e7	79 05		 jns	 SHORT $LN334@LoadProper
  000e9	49		 dec	 ecx
  000ea	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000ed	41		 inc	 ecx
$LN334@LoadProper:
  000ee	b2 ed		 mov	 dl, -19			; ffffffedH
  000f0	2a d1		 sub	 dl, cl
  000f2	30 54 05 d8	 xor	 BYTE PTR __k$524877[ebp+eax], dl
  000f6	40		 inc	 eax
  000f7	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  000fa	7c e3		 jl	 SHORT $LL209@LoadProper
  000fc	6a 00		 push	 0
  000fe	8d 45 d8	 lea	 eax, DWORD PTR __k$524877[ebp]
  00101	50		 push	 eax
  00102	8b cb		 mov	 ecx, ebx
  00104	ff d6		 call	 esi
  00106	6a 04		 push	 4
  00108	89 87 70 09 00
	00		 mov	 DWORD PTR [edi+2416], eax

; 32   : 
; 33   : 	m_bDisableDownState = rkLoader.LoadBool_e( "disable_down_state", false );

  0010e	c7 45 e4 89 85
	98 8b		 mov	 DWORD PTR __k$525040[ebp], -1952938615 ; 8b988589H
  00115	c7 45 e8 8f 80
	8e b5		 mov	 DWORD PTR __k$525040[ebp+4], -1248952177 ; b58e808fH
  0011c	c7 45 ec 89 83
	9c 84		 mov	 DWORD PTR __k$525040[ebp+8], -2070117495 ; 849c8389H
  00123	c7 45 f0 b2 9f
	9f 8b		 mov	 DWORD PTR __k$525040[ebp+12], -1952473166 ; 8b9f9fb2H
  0012a	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$525040[ebp+16], 35225 ; 00008999H
  00130	8d 45 e4	 lea	 eax, DWORD PTR __k$525040[ebp]
  00133	c6 45 f6 00	 mov	 BYTE PTR __k$525040[ebp+18], 0
  00137	59		 pop	 ecx
$LL318@LoadProper:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	49		 dec	 ecx
  00142	75 f4		 jne	 SHORT $LL318@LoadProper
  00144	6a 10		 push	 16			; 00000010H
  00146	5e		 pop	 esi
$LL315@LoadProper:
  00147	8b c6		 mov	 eax, esi
  00149	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0014e	79 05		 jns	 SHORT $LN335@LoadProper
  00150	48		 dec	 eax
  00151	83 c8 fc	 or	 eax, -4			; fffffffcH
  00154	40		 inc	 eax
$LN335@LoadProper:
  00155	b1 ed		 mov	 cl, -19			; ffffffedH
  00157	2a c8		 sub	 cl, al
  00159	30 4c 35 e4	 xor	 BYTE PTR __k$525040[ebp+esi], cl
  0015d	46		 inc	 esi
  0015e	83 fe 12	 cmp	 esi, 18			; 00000012H
  00161	7c e4		 jl	 SHORT $LL315@LoadProper
  00163	6a 00		 push	 0
  00165	8d 45 e4	 lea	 eax, DWORD PTR __k$525040[ebp]
  00168	50		 push	 eax
  00169	8b cb		 mov	 ecx, ebx
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 34   : }

  00171	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00174	88 87 74 09 00
	00		 mov	 BYTE PTR [edi+2420], al
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	33 cd		 xor	 ecx, ebp
  0017e	5b		 pop	 ebx
  0017f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00184	c9		 leave
  00185	c2 04 00	 ret	 4
?LoadProperty@ioReturnAttackBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioReturnAttackBuff::LoadProperty
_TEXT	ENDS
END
