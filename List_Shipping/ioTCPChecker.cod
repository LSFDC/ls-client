; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioTCPChecker.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A ; Singleton<ioTCPChecker>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A DD 01H DUP (?) ; Singleton<ioTCPChecker>::ms_Singleton
_BSS	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioTCPChecker@@@@QAE@XZ		; Singleton<ioTCPChecker>::Singleton<ioTCPChecker>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioTCPChecker@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioTCPChecker@@@@QAE@XZ PROC		; Singleton<ioTCPChecker>::Singleton<ioTCPChecker>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A, ecx ; Singleton<ioTCPChecker>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VioTCPChecker@@@@QAE@XZ ENDP		; Singleton<ioTCPChecker>::Singleton<ioTCPChecker>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioTCPChecker@@@@QAE@XZ		; Singleton<ioTCPChecker>::~Singleton<ioTCPChecker>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioTCPChecker@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioTCPChecker@@@@QAE@XZ PROC		; Singleton<ioTCPChecker>::~Singleton<ioTCPChecker>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A, 0 ; Singleton<ioTCPChecker>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioTCPChecker@@@@QAE@XZ ENDP		; Singleton<ioTCPChecker>::~Singleton<ioTCPChecker>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioTCPChecker@@@@SAAAVioTCPChecker@@XZ ; Singleton<ioTCPChecker>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioTCPChecker@@@@SAAAVioTCPChecker@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioTCPChecker@@@@SAAAVioTCPChecker@@XZ PROC ; Singleton<ioTCPChecker>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A ; Singleton<ioTCPChecker>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioTCPChecker@@@@SAAAVioTCPChecker@@XZ ENDP ; Singleton<ioTCPChecker>::GetSingleton
_TEXT	ENDS
PUBLIC	?size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE_NXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEAAUCheckData@ioTCPChecker@@I@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEAAUCheckData@ioTCPChecker@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEAAUCheckData@ioTCPChecker@@I@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEAAUCheckData@ioTCPChecker@@I@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBE_NPBUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBE_NPBUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBE_NPBUCheckData@ioTCPChecker@@@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBE_NPBUCheckData@ioTCPChecker@@@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXPAUCheckData@ioTCPChecker@@0@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXPAUCheckData@ioTCPChecker@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXPAUCheckData@ioTCPChecker@@0@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXPAUCheckData@ioTCPChecker@@0@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::~_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::~_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::~_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@XZ ; std::allocator<ioTCPChecker::CheckData>::allocator<ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@XZ PROC ; std::allocator<ioTCPChecker::CheckData>::allocator<ioTCPChecker::CheckData>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@XZ ENDP ; std::allocator<ioTCPChecker::CheckData>::allocator<ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXXZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@ABV01@@Z ; std::allocator<ioTCPChecker::CheckData>::allocator<ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioTCPChecker::CheckData>::allocator<ioTCPChecker::CheckData>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCheckData@ioTCPChecker@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioTCPChecker::CheckData>::allocator<ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@I@Z ; std::allocator<ioTCPChecker::CheckData>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@I@Z PROC ; std::allocator<ioTCPChecker::CheckData>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@I@Z ENDP ; std::allocator<ioTCPChecker::CheckData>::deallocate
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+=, COMDAT
; _this$ = ecx

; 151  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 152  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 153  : 		if (this->_Getcont() == 0
; 154  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 155  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 156  : 			{	// report error
; 157  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 158  : 			_SCL_SECURE_OUT_OF_RANGE;
; 159  : 			}
; 160  : 
; 161  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 162  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 163  : 		_SCL_SECURE_VALIDATE_RANGE(
; 164  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 165  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 167  : 
; 168  : 		_Ptr += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0000b	01 08		 add	 DWORD PTR [eax], ecx

; 169  : 		return (*this);
; 170  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCheckData@ioTCPChecker@@@std@@QBEIXZ ; std::allocator<ioTCPChecker::CheckData>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UCheckData@ioTCPChecker@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCheckData@ioTCPChecker@@@std@@QBEIXZ PROC ; std::allocator<ioTCPChecker::CheckData>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCheckData@ioTCPChecker@@@std@@QBEIXZ ENDP ; std::allocator<ioTCPChecker::CheckData>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCheckData@ioTCPChecker@@@std@@YAPBUCheckData@ioTCPChecker@@ABU12@@Z ; std::addressof<ioTCPChecker::CheckData const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUCheckData@ioTCPChecker@@@std@@YAPBUCheckData@ioTCPChecker@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCheckData@ioTCPChecker@@@std@@YAPBUCheckData@ioTCPChecker@@ABU12@@Z PROC ; std::addressof<ioTCPChecker::CheckData const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCheckData@ioTCPChecker@@@std@@YAPBUCheckData@ioTCPChecker@@ABU12@@Z ENDP ; std::addressof<ioTCPChecker::CheckData const >
_TEXT	ENDS
PUBLIC	??$forward@AAUCheckData@ioTCPChecker@@@std@@YAAAUCheckData@ioTCPChecker@@AAU12@@Z ; std::forward<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUCheckData@ioTCPChecker@@@std@@YAAAUCheckData@ioTCPChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCheckData@ioTCPChecker@@@std@@YAAAUCheckData@ioTCPChecker@@AAU12@@Z PROC ; std::forward<ioTCPChecker::CheckData &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCheckData@ioTCPChecker@@@std@@YAAAUCheckData@ioTCPChecker@@AAU12@@Z ENDP ; std::forward<ioTCPChecker::CheckData &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCheckData@ioTCPChecker@@@std@@YAABUCheckData@ioTCPChecker@@ABU12@@Z ; std::forward<ioTCPChecker::CheckData const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUCheckData@ioTCPChecker@@@std@@YAABUCheckData@ioTCPChecker@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCheckData@ioTCPChecker@@@std@@YAABUCheckData@ioTCPChecker@@ABU12@@Z PROC ; std::forward<ioTCPChecker::CheckData const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCheckData@ioTCPChecker@@@std@@YAABUCheckData@ioTCPChecker@@ABU12@@Z ENDP ; std::forward<ioTCPChecker::CheckData const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCheckData@ioTCPChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCheckData@ioTCPChecker@@0@Z ; std::_Ptr_cat<ioTCPChecker::CheckData,ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UCheckData@ioTCPChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCheckData@ioTCPChecker@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCheckData@ioTCPChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCheckData@ioTCPChecker@@0@Z PROC ; std::_Ptr_cat<ioTCPChecker::CheckData,ioTCPChecker::CheckData>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UCheckData@ioTCPChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCheckData@ioTCPChecker@@0@Z ENDP ; std::_Ptr_cat<ioTCPChecker::CheckData,ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z ; std::move<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z PROC ; std::move<ioTCPChecker::CheckData &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z ENDP ; std::move<ioTCPChecker::CheckData &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@@Z ; std::_Val_type<ioTCPChecker::CheckData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@@Z PROC ; std::_Val_type<ioTCPChecker::CheckData *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@@Z ENDP ; std::_Val_type<ioTCPChecker::CheckData *>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >, COMDAT

; 476  : 	{	// return category from iterator argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >
_TEXT	ENDS
PUBLIC	??$_Destroy@UCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@@Z ; std::_Destroy<ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@@Z PROC ; std::_Destroy<ioTCPChecker::CheckData>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@@Z ENDP ; std::_Destroy<ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEPAUCheckData@ioTCPChecker@@XZ ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Unchecked
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEPAUCheckData@ioTCPChecker@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEPAUCheckData@ioTCPChecker@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEPAUCheckData@ioTCPChecker@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Unchecked
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUCheckData@ioTCPChecker@@@std@@YAPAHPAUCheckData@ioTCPChecker@@@Z ; std::_Dist_type<ioTCPChecker::CheckData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Dist_type@PAUCheckData@ioTCPChecker@@@std@@YAPAHPAUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUCheckData@ioTCPChecker@@@std@@YAPAHPAUCheckData@ioTCPChecker@@@Z PROC ; std::_Dist_type<ioTCPChecker::CheckData *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAUCheckData@ioTCPChecker@@@std@@YAPAHPAUCheckData@ioTCPChecker@@@Z ENDP ; std::_Dist_type<ioTCPChecker::CheckData *>
_TEXT	ENDS
PUBLIC	??$forward@UCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z ; std::forward<ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z PROC ; std::forward<ioTCPChecker::CheckData>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z ENDP ; std::forward<ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 0c		 push	 12			; 0000000cH
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 193  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-
_TEXT	ENDS
PUBLIC	??$_Move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z ; std::_Move<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$_Move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z PROC ; std::_Move<ioTCPChecker::CheckData &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAUCheckData@ioTCPChecker@@@std@@YA$$QAUCheckData@ioTCPChecker@@AAU12@@Z ENDP ; std::_Move<ioTCPChecker::CheckData &>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0CheckData@ioTCPChecker@@QAE@XZ		; ioTCPChecker::CheckData::CheckData
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotcpchecker.h
;	COMDAT ??0CheckData@ioTCPChecker@@QAE@XZ
_TEXT	SEGMENT
??0CheckData@ioTCPChecker@@QAE@XZ PROC			; ioTCPChecker::CheckData::CheckData, COMDAT
; _this$ = ecx

; 25   : 		CheckData()

  00000	8b c1		 mov	 eax, ecx

; 26   : 		{
; 27   : 			m_dwType	 = 0;			

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 28   : 			m_dwDataValue= 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 29   : 			m_dwTime     = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 30   : 		}

  0000c	c3		 ret	 0
??0CheckData@ioTCPChecker@@QAE@XZ ENDP			; ioTCPChecker::CheckData::CheckData
_TEXT	ENDS
PUBLIC	?GetSingleton@ioTCPChecker@@SAAAV1@XZ		; ioTCPChecker::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotcpchecker.cpp
;	COMDAT ?GetSingleton@ioTCPChecker@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@ioTCPChecker@@SAAAV1@XZ PROC		; ioTCPChecker::GetSingleton, COMDAT

; 21   : 	return Singleton< ioTCPChecker >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A ; Singleton<ioTCPChecker>::ms_Singleton

; 22   : }

  00005	c3		 ret	 0
?GetSingleton@ioTCPChecker@@SAAAV1@XZ ENDP		; ioTCPChecker::GetSingleton
_TEXT	ENDS
PUBLIC	??_C@_08PIJJDNAE@?$CI?$CFd?3?$CFd?$CJ?0?$AA@	; `string'
PUBLIC	??_C@_06BCPFEOGP@?$CFx?3?$CFd?0?$AA@		; `string'
PUBLIC	__real@4f800000
PUBLIC	??_C@_0BC@GNBJDIIJ@Packet?5History?5?3?5?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetLOG@ioTCPChecker@@QAEPADXZ			; ioTCPChecker::GetLOG
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_08PIJJDNAE@?$CI?$CFd?3?$CFd?$CJ?0?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
??_C@_08PIJJDNAE@?$CI?$CFd?3?$CFd?$CJ?0?$AA@ DB '(%d:%d),', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCPFEOGP@?$CFx?3?$CFd?0?$AA@
CONST	SEGMENT
??_C@_06BCPFEOGP@?$CFx?3?$CFd?0?$AA@ DB '%x:%d,', 00H	; `string'
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_0BC@GNBJDIIJ@Packet?5History?5?3?5?$AA@
CONST	SEGMENT
??_C@_0BC@GNBJDIIJ@Packet?5History?5?3?5?$AA@ DB 'Packet History : ', 00H ; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotcpchecker.cpp
CONST	ENDS
;	COMDAT ?GetLOG@ioTCPChecker@@QAEPADXZ
_TEXT	SEGMENT
tv134 = -280						; size = 4
tv224 = -276						; size = 4
tv307 = -272						; size = 4
tv304 = -272						; size = 4
tv294 = -272						; size = 4
tv291 = -272						; size = 4
tv314 = -268						; size = 4
_szTemp$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
?GetLOG@ioTCPChecker@@QAEPADXZ PROC			; ioTCPChecker::GetLOG, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b d9		 mov	 ebx, ecx

; 64   : 	memset( m_szLOG, 0, sizeof( m_szLOG ) );

  00018	68 04 01 00 00	 push	 260			; 00000104H
  0001d	33 ff		 xor	 edi, edi
  0001f	8d 73 14	 lea	 esi, DWORD PTR [ebx+20]
  00022	57		 push	 edi
  00023	56		 push	 esi
  00024	89 b5 ec fe ff
	ff		 mov	 DWORD PTR tv224[ebp], esi
  0002a	e8 00 00 00 00	 call	 _memset

; 65   : 	
; 66   : 	sprintf( m_szLOG, "Packet History : " );

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GNBJDIIJ@Packet?5History?5?3?5?$AA@
  00034	56		 push	 esi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 67   : 	char szTemp[MAX_PATH] = "";

  0003b	68 03 01 00 00	 push	 259			; 00000103H
  00040	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp+1]
  00046	57		 push	 edi
  00047	50		 push	 eax
  00048	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szTemp$[ebp], 0
  0004f	e8 00 00 00 00	 call	 _memset

; 68   : 	int iSize = min( m_vCheckData.size(), MAX_RECV_HIGH_SIZE );

  00054	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00057	2b 43 04	 sub	 eax, DWORD PTR [ebx+4]
  0005a	83 c4 20	 add	 esp, 32			; 00000020H
  0005d	6a 0c		 push	 12			; 0000000cH
  0005f	99		 cdq
  00060	59		 pop	 ecx
  00061	f7 f9		 idiv	 ecx
  00063	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00066	72 03		 jb	 SHORT $LN9@GetLOG
  00068	6a 0a		 push	 10			; 0000000aH
  0006a	58		 pop	 eax
$LN9@GetLOG:

; 69   : 	for(int i = 0;i < iSize;i++)

  0006b	3b c7		 cmp	 eax, edi
  0006d	0f 8e 11 01 00
	00		 jle	 $LN3@GetLOG
  00073	89 bd f4 fe ff
	ff		 mov	 DWORD PTR tv314[ebp], edi
  00079	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
$LL24@GetLOG:

; 70   : 	{
; 71   : 		CheckData &kData = m_vCheckData[i];

  0007f	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00082	03 b5 f4 fe ff
	ff		 add	 esi, DWORD PTR tv314[ebp]

; 72   : 		if( kData.m_dwType == CheckType_Packet )

  00088	83 3e 01	 cmp	 DWORD PTR [esi], 1
  0008b	75 53		 jne	 SHORT $LN2@GetLOG

; 73   : 			sprintf( szTemp, "%x:%d,", kData.m_dwDataValue, ( FRAMEGETTIME() - kData.m_dwTime ) / FLOAT100 );

  0008d	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00092	8b f8		 mov	 edi, eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0009a	8b c8		 mov	 ecx, eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000a2	2b 46 08	 sub	 eax, DWORD PTR [esi+8]
  000a5	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv307[ebp], eax
  000ab	db 85 f0 fe ff
	ff		 fild	 DWORD PTR tv307[ebp]
  000b1	79 06		 jns	 SHORT $LN25@GetLOG
  000b3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN25@GetLOG:
  000b9	89 bd f0 fe ff
	ff		 mov	 DWORD PTR tv304[ebp], edi
  000bf	db 85 f0 fe ff
	ff		 fild	 DWORD PTR tv304[ebp]
  000c5	85 ff		 test	 edi, edi
  000c7	79 06		 jns	 SHORT $LN26@GetLOG
  000c9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN26@GetLOG:
  000cf	de f9		 fdivp	 ST(1), ST(0)
  000d1	51		 push	 ecx
  000d2	51		 push	 ecx
  000d3	dd 1c 24	 fstp	 QWORD PTR [esp]
  000d6	ff 76 04	 push	 DWORD PTR [esi+4]
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_06BCPFEOGP@?$CFx?3?$CFd?0?$AA@

; 74   : 		else

  000de	eb 51		 jmp	 SHORT $LN29@GetLOG
$LN2@GetLOG:

; 75   : 			sprintf( szTemp, "(%d:%d),", kData.m_dwDataValue, ( FRAMEGETTIME() - kData.m_dwTime ) / FLOAT100 );

  000e0	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000e5	8b f8		 mov	 edi, eax
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000ed	8b c8		 mov	 ecx, eax
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000f5	2b 46 08	 sub	 eax, DWORD PTR [esi+8]
  000f8	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv294[ebp], eax
  000fe	db 85 f0 fe ff
	ff		 fild	 DWORD PTR tv294[ebp]
  00104	79 06		 jns	 SHORT $LN27@GetLOG
  00106	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN27@GetLOG:
  0010c	89 bd f0 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], edi
  00112	db 85 f0 fe ff
	ff		 fild	 DWORD PTR tv291[ebp]
  00118	85 ff		 test	 edi, edi
  0011a	79 06		 jns	 SHORT $LN28@GetLOG
  0011c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@GetLOG:
  00122	de f9		 fdivp	 ST(1), ST(0)
  00124	51		 push	 ecx
  00125	51		 push	 ecx
  00126	dd 1c 24	 fstp	 QWORD PTR [esp]
  00129	ff 76 04	 push	 DWORD PTR [esi+4]
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_08PIJJDNAE@?$CI?$CFd?3?$CFd?$CJ?0?$AA@
$LN29@GetLOG:
  00131	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00137	50		 push	 eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 76   :         strcat( m_szLOG, szTemp );

  0013e	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00144	83 c4 14	 add	 esp, 20			; 00000014H
  00147	8b d0		 mov	 edx, eax
$LL22@GetLOG:
  00149	8a 08		 mov	 cl, BYTE PTR [eax]
  0014b	40		 inc	 eax
  0014c	84 c9		 test	 cl, cl
  0014e	75 f9		 jne	 SHORT $LL22@GetLOG
  00150	8b bd ec fe ff
	ff		 mov	 edi, DWORD PTR tv224[ebp]
  00156	2b c2		 sub	 eax, edx
  00158	4f		 dec	 edi
$LL23@GetLOG:
  00159	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  0015c	47		 inc	 edi
  0015d	84 c9		 test	 cl, cl
  0015f	75 f8		 jne	 SHORT $LL23@GetLOG
  00161	83 85 f4 fe ff
	ff 0c		 add	 DWORD PTR tv314[ebp], 12 ; 0000000cH
  00168	8b c8		 mov	 ecx, eax
  0016a	c1 e9 02	 shr	 ecx, 2
  0016d	8b f2		 mov	 esi, edx
  0016f	f3 a5		 rep movsd
  00171	8b c8		 mov	 ecx, eax
  00173	83 e1 03	 and	 ecx, 3
  00176	ff 8d e8 fe ff
	ff		 dec	 DWORD PTR tv134[ebp]
  0017c	f3 a4		 rep movsb
  0017e	0f 85 fb fe ff
	ff		 jne	 $LL24@GetLOG
$LN3@GetLOG:

; 77   : 	}
; 78   : 
; 79   : 	return m_szLOG;
; 80   : }

  00184	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00187	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	33 cd		 xor	 ecx, ebp
  00191	5b		 pop	 ebx
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	c9		 leave
  00198	c3		 ret	 0
?GetLOG@ioTCPChecker@@QAEPADXZ ENDP			; ioTCPChecker::GetLOG
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@V?$allocator@UCheckData@ioTCPChecker@@@1@@Z ; std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@V?$allocator@UCheckData@ioTCPChecker@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@V?$allocator@UCheckData@ioTCPChecker@@@1@@Z PROC ; std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@V?$allocator@UCheckData@ioTCPChecker@@@1@@Z ENDP ; std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+=, COMDAT
; _this$ = ecx

; 357  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 358  : 		*(_Mybase *)this += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0000b	01 08		 add	 DWORD PTR [eax], ecx

; 359  : 		return (*this);
; 360  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEII@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEII@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator==
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@IPAU12@@Z ; std::_Allocate<ioTCPChecker::CheckData>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@IPAU12@@Z
_TEXT	SEGMENT
$T506590 = -12						; size = 12
$T506595 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@IPAU12@@Z PROC ; std::_Allocate<ioTCPChecker::CheckData>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T506595[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T506595[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T506590[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T506590[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506590[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@IPAU12@@Z ENDP ; std::_Allocate<ioTCPChecker::CheckData>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$construct@AAUCheckData@ioTCPChecker@@@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@AAU23@@Z ; std::allocator<ioTCPChecker::CheckData>::construct<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
;	COMDAT ??$construct@AAUCheckData@ioTCPChecker@@@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@AAU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCheckData@ioTCPChecker@@@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@AAU23@@Z PROC ; std::allocator<ioTCPChecker::CheckData>::construct<ioTCPChecker::CheckData &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct:
  00013	5f		 pop	 edi

; 209  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$construct@AAUCheckData@ioTCPChecker@@@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@AAU23@@Z ENDP ; std::allocator<ioTCPChecker::CheckData>::construct<ioTCPChecker::CheckData &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 18		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00014	8b f0		 mov	 esi, eax
  00016	a5		 movsd
  00017	a5		 movsd
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	a5		 movsd
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 ec		 jne	 SHORT $LL3@Move
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
_TEXT	ENDS
PUBLIC	??$_Construct@UCheckData@ioTCPChecker@@ABU12@@std@@YAXPAUCheckData@ioTCPChecker@@ABU12@@Z ; std::_Construct<ioTCPChecker::CheckData,ioTCPChecker::CheckData const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UCheckData@ioTCPChecker@@ABU12@@std@@YAXPAUCheckData@ioTCPChecker@@ABU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCheckData@ioTCPChecker@@ABU12@@std@@YAXPAUCheckData@ioTCPChecker@@ABU12@@Z PROC ; std::_Construct<ioTCPChecker::CheckData,ioTCPChecker::CheckData const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UCheckData@ioTCPChecker@@ABU12@@std@@YAXPAUCheckData@ioTCPChecker@@ABU12@@Z ENDP ; std::_Construct<ioTCPChecker::CheckData,ioTCPChecker::CheckData const &>
_TEXT	ENDS
PUBLIC	??Z?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??Z?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-=, COMDAT
; _this$ = ecx

; 369  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 370  : 		return (*this += -_Off);

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	6b c9 f4	 imul	 ecx, -12		; fffffff4H
  0000b	01 08		 add	 DWORD PTR [eax], ecx

; 371  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Z?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-=
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@@Z ; std::allocator<ioTCPChecker::CheckData>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@@Z PROC ; std::allocator<ioTCPChecker::CheckData>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@@Z ENDP ; std::allocator<ioTCPChecker::CheckData>::destroy
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@$$QAU34@@Z ; std::allocator<ioTCPChecker::CheckData>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@$$QAU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@$$QAU34@@Z PROC ; std::allocator<ioTCPChecker::CheckData>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct@2:
  00013	5f		 pop	 edi

; 203  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@$$QAU34@@Z ENDP ; std::allocator<ioTCPChecker::CheckData>::construct
_TEXT	ENDS
PUBLIC	??$_Advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z ; std::_Advance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>, COMDAT

; 840  : 	{	// increment iterator by offset, random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 841  : 	_Where += _Off;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 842  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 0c		 push	 12			; 0000000cH
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 382  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-
_TEXT	ENDS
PUBLIC	??$swap@UCheckData@ioTCPChecker@@@std@@YAXAAUCheckData@ioTCPChecker@@0@Z ; std::swap<ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@UCheckData@ioTCPChecker@@@std@@YAXAAUCheckData@ioTCPChecker@@0@Z
_TEXT	SEGMENT
__Tmp$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UCheckData@ioTCPChecker@@@std@@YAXAAUCheckData@ioTCPChecker@@0@Z PROC ; std::swap<ioTCPChecker::CheckData>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 102  : 	_Ty _Tmp = _Move(_Left);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  0000a	57		 push	 edi
  0000b	8d 7d f4	 lea	 edi, DWORD PTR __Tmp$[ebp]
  0000e	a5		 movsd
  0000f	a5		 movsd
  00010	a5		 movsd

; 103  : 	_Left = _Move(_Right);

  00011	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  00014	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  00017	a5		 movsd
  00018	a5		 movsd
  00019	a5		 movsd

; 104  : 	_Right = _Move(_Tmp);

  0001a	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  0001d	8d 75 f4	 lea	 esi, DWORD PTR __Tmp$[ebp]
  00020	a5		 movsd
  00021	a5		 movsd
  00022	a5		 movsd
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 105  : 	}

  00025	c9		 leave
  00026	c3		 ret	 0
??$swap@UCheckData@ioTCPChecker@@@std@@YAXAAUCheckData@ioTCPChecker@@0@Z ENDP ; std::swap<ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??0?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+, COMDAT
; _this$ = ecx

; 363  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 364  : 		_Myiter _Tmp = *this;
; 365  : 		return (_Tmp += _Off);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0000c	03 11		 add	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx

; 366  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??H?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator+
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QAE@PAUCheckData@ioTCPChecker@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEPAUCheckData@ioTCPChecker@@I@Z ; std::allocator<ioTCPChecker::CheckData>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEPAUCheckData@ioTCPChecker@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEPAUCheckData@ioTCPChecker@@I@Z PROC ; std::allocator<ioTCPChecker::CheckData>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@IPAU12@@Z ; std::_Allocate<ioTCPChecker::CheckData>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEPAUCheckData@ioTCPChecker@@I@Z ENDP ; std::allocator<ioTCPChecker::CheckData>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@AAU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@AAU23@@Z ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@AAU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@AAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@AAU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@AAU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00@Z ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$506781 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00@Z PROC ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$506781[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00@Z ENDP ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@ABU34@@Z ; std::allocator<ioTCPChecker::CheckData>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@ABU34@@Z PROC ; std::allocator<ioTCPChecker::CheckData>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@3:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UCheckData@ioTCPChecker@@@std@@QAEXPAUCheckData@ioTCPChecker@@ABU34@@Z ENDP ; std::allocator<ioTCPChecker::CheckData>::construct
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-, COMDAT
; _this$ = ecx

; 374  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 375  : 		_Myiter _Tmp = *this;
; 376  : 		return (_Tmp -= _Off);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0000b	2b c8		 sub	 ecx, eax
  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 377  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??G?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >::operator-
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@@Z ; std::_Dest_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@@Z PROC ; std::_Dest_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@@Z ENDP ; std::_Dest_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??$advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@H@Z ; std::advance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@H@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@H@Z PROC ; std::advance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>, COMDAT

; 797  : 	{	// increment iterator by offset, arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 798  : 	_Advance(_Where, _Off, _Iter_cat(_Where));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 799  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$advance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@H@Z ENDP ; std::advance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@U34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@U34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@$$QAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@U34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val@2:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@U34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>, COMDAT

; 885  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 887  : 	if (_First != _Last)
; 888  : 		{	// check for null pointers
; 889  : 		_DEBUG_POINTER(_First);
; 890  : 		_DEBUG_POINTER(_Last);
; 891  : 		}
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : 	_Off += _Last - _First;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	6a 0c		 push	 12			; 0000000cH
  0000b	99		 cdq
  0000c	59		 pop	 ecx
  0000d	f7 f9		 idiv	 ecx
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp]
  00012	01 01		 add	 DWORD PTR [ecx], eax

; 895  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > >,int>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAXPAUCheckData@ioTCPChecker@@0@Z ; std::iter_swap<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
; Function compile flags: /Ogsp
;	COMDAT ??$iter_swap@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAXPAUCheckData@ioTCPChecker@@0@Z
_TEXT	SEGMENT
__Tmp$506920 = -12					; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAXPAUCheckData@ioTCPChecker@@0@Z PROC ; std::iter_swap<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 2134 : 	swap(*_Left, *_Right);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  0000a	57		 push	 edi
  0000b	8d 7d f4	 lea	 edi, DWORD PTR __Tmp$506920[ebp]
  0000e	a5		 movsd
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  00014	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  00017	a5		 movsd
  00018	a5		 movsd
  00019	a5		 movsd
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  0001d	8d 75 f4	 lea	 esi, DWORD PTR __Tmp$506920[ebp]
  00020	a5		 movsd
  00021	a5		 movsd
  00022	a5		 movsd
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 2135 : 	}

  00025	c9		 leave
  00026	c3		 ret	 0
??$iter_swap@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAXPAUCheckData@ioTCPChecker@@0@Z ENDP ; std::iter_swap<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@XZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@ABU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@ABU23@@Z ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@ABU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@ABU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@3:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@ABU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioTCPChecker::CheckData> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioTCPChecker::CheckData> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioTCPChecker::CheckData> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@U12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@U12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@U12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@U34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData>
  00015	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@U12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??$distance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YAHV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0@Z ; std::distance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$distance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YAHV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YAHV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0@Z PROC ; std::distance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >, COMDAT

; 900  : 	{	// return distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 901  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 902  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	6a 0c		 push	 12			; 0000000cH
  0000b	99		 cdq
  0000c	59		 pop	 ecx
  0000d	f7 f9		 idiv	 ecx

; 903  : 	return (_Off);
; 904  : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$distance@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YAHV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@0@Z ENDP ; std::distance<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >
_TEXT	ENDS
PUBLIC	??$_Rotate@PAUCheckData@ioTCPChecker@@HU12@@std@@YAXPAUCheckData@ioTCPChecker@@00PAH0@Z ; std::_Rotate<ioTCPChecker::CheckData *,int,ioTCPChecker::CheckData>
; Function compile flags: /Ogsp
;	COMDAT ??$_Rotate@PAUCheckData@ioTCPChecker@@HU12@@std@@YAXPAUCheckData@ioTCPChecker@@00PAH0@Z
_TEXT	SEGMENT
__Tmp$507133 = -24					; size = 12
__Shift$ = -12						; size = 4
tv171 = -8						; size = 4
__Next$506176 = -4					; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Rotate@PAUCheckData@ioTCPChecker@@HU12@@std@@YAXPAUCheckData@ioTCPChecker@@00PAH0@Z PROC ; std::_Rotate<ioTCPChecker::CheckData *,int,ioTCPChecker::CheckData>, COMDAT

; 3256 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 3257 : 	_Diff _Shift = _Mid - _First;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	99		 cdq
  00010	6a 0c		 push	 12			; 0000000cH
  00012	59		 pop	 ecx
  00013	f7 f9		 idiv	 ecx
  00015	8b f0		 mov	 esi, eax

; 3258 : 	_Diff _Count = _Last - _First;

  00017	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001d	89 75 f4	 mov	 DWORD PTR __Shift$[ebp], esi
  00020	99		 cdq
  00021	f7 f9		 idiv	 ecx

; 3259 : 
; 3260 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

  00023	8b ce		 mov	 ecx, esi
  00025	8b f8		 mov	 edi, eax
  00027	89 7d 0c	 mov	 DWORD PTR __Count$[ebp], edi
  0002a	85 f6		 test	 esi, esi
  0002c	74 0f		 je	 SHORT $LN8@Rotate
$LL9@Rotate:

; 3261 : 		{	// find subcycle count as GCD of shift count and length
; 3262 : 		_Diff _Tmp = _Count % _Factor;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00031	99		 cdq
  00032	f7 f9		 idiv	 ecx

; 3263 : 		_Count = _Factor;

  00034	89 4d 0c	 mov	 DWORD PTR __Count$[ebp], ecx

; 3264 : 		_Factor = _Tmp;

  00037	8b ca		 mov	 ecx, edx
  00039	85 d2		 test	 edx, edx
  0003b	75 f1		 jne	 SHORT $LL9@Rotate
$LN8@Rotate:

; 3265 : 		}
; 3266 : 
; 3267 : 	if (_Count < _Last - _First)

  0003d	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00040	3b df		 cmp	 ebx, edi
  00042	7d 71		 jge	 SHORT $LN4@Rotate

; 3268 : 		for (; 0 < _Count; --_Count)

  00044	85 db		 test	 ebx, ebx
  00046	7e 6d		 jle	 SHORT $LN4@Rotate
  00048	8b c6		 mov	 eax, esi
  0004a	6b db 0c	 imul	 ebx, 12			; 0000000cH
  0004d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00050	03 5d 08	 add	 ebx, DWORD PTR __First$[ebp]
  00053	89 45 f8	 mov	 DWORD PTR tv171[ebp], eax
  00056	eb 03		 jmp	 SHORT $LN6@Rotate
$LL35@Rotate:
  00058	8b 45 f8	 mov	 eax, DWORD PTR tv171[ebp]
$LN6@Rotate:

; 3269 : 			{	// rotate each subcycle
; 3270 : 			_RanIt _Hole = _First + _Count;
; 3271 : 			_RanIt _Next = _Hole;
; 3272 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  0005b	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  0005e	89 5d fc	 mov	 DWORD PTR __Next$506176[ebp], ebx
  00061	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00064	75 03		 jne	 SHORT $LL12@Rotate
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
$LL12@Rotate:

; 3273 : 			for (; ; )
; 3274 : 				{	// percolate elements back around subcycle
; 3275 : 				iter_swap(_Next, _Next1);

  00069	8b 75 fc	 mov	 esi, DWORD PTR __Next$506176[ebp]
  0006c	8d 7d e8	 lea	 edi, DWORD PTR __Tmp$507133[ebp]
  0006f	a5		 movsd
  00070	a5		 movsd
  00071	a5		 movsd
  00072	8b 7d fc	 mov	 edi, DWORD PTR __Next$506176[ebp]

; 3276 : 				_Next = _Next1;
; 3277 : 				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
; 3278 : 					: _First + (_Shift - (_Last - _Next1));

  00075	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00078	8b f1		 mov	 esi, ecx
  0007a	a5		 movsd
  0007b	a5		 movsd
  0007c	a5		 movsd
  0007d	8d 75 e8	 lea	 esi, DWORD PTR __Tmp$507133[ebp]
  00080	8b f9		 mov	 edi, ecx
  00082	a5		 movsd
  00083	a5		 movsd
  00084	2b c1		 sub	 eax, ecx
  00086	6a 0c		 push	 12			; 0000000cH
  00088	a5		 movsd
  00089	99		 cdq
  0008a	5e		 pop	 esi
  0008b	f7 fe		 idiv	 esi
  0008d	89 4d fc	 mov	 DWORD PTR __Next$506176[ebp], ecx
  00090	39 45 f4	 cmp	 DWORD PTR __Shift$[ebp], eax
  00093	7d 05		 jge	 SHORT $LN14@Rotate
  00095	03 4d f8	 add	 ecx, DWORD PTR tv171[ebp]
  00098	eb 0b		 jmp	 SHORT $LN15@Rotate
$LN14@Rotate:
  0009a	8b 4d f4	 mov	 ecx, DWORD PTR __Shift$[ebp]
  0009d	2b c8		 sub	 ecx, eax
  0009f	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  000a2	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
$LN15@Rotate:

; 3279 : 				if (_Next1 == _Hole)

  000a5	3b cb		 cmp	 ecx, ebx
  000a7	75 c0		 jne	 SHORT $LL12@Rotate

; 3268 : 		for (; 0 < _Count; --_Count)

  000a9	ff 4d 0c	 dec	 DWORD PTR __Count$[ebp]
  000ac	83 eb 0c	 sub	 ebx, 12			; 0000000cH
  000af	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000b3	7f a3		 jg	 SHORT $LL35@Rotate
$LN4@Rotate:
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 3280 : 					break;
; 3281 : 				}
; 3282 : 			}
; 3283 : 	}

  000b8	c9		 leave
  000b9	c3		 ret	 0
??$_Rotate@PAUCheckData@ioTCPChecker@@HU12@@std@@YAXPAUCheckData@ioTCPChecker@@00PAH0@Z ENDP ; std::_Rotate<ioTCPChecker::CheckData *,int,ioTCPChecker::CheckData>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z ; std::_Destroy_range<std::allocator<ioTCPChecker::CheckData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioTCPChecker::CheckData> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAXPAUCheckData@ioTCPChecker@@0AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioTCPChecker::CheckData> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z ; std::_Uninitialized_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z
_TEXT	SEGMENT
__Cat$507191 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z PROC ; std::_Uninitialized_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507191[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@U12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z ENDP ; std::_Uninitialized_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData> >
_TEXT	ENDS
PUBLIC	??$_Rotate@PAUCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<ioTCPChecker::CheckData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Rotate@PAUCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@00Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Rotate@PAUCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@00Urandom_access_iterator_tag@0@@Z PROC ; std::_Rotate<ioTCPChecker::CheckData *>, COMDAT

; 3288 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3289 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Rotate@PAUCheckData@ioTCPChecker@@HU12@@std@@YAXPAUCheckData@ioTCPChecker@@00PAH0@Z ; std::_Rotate<ioTCPChecker::CheckData *,int,ioTCPChecker::CheckData>
  00015	83 c4 14	 add	 esp, 20			; 00000014H

; 3290 : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Rotate@PAUCheckData@ioTCPChecker@@@std@@YAXPAUCheckData@ioTCPChecker@@00Urandom_access_iterator_tag@0@@Z ENDP ; std::_Rotate<ioTCPChecker::CheckData *>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXPAUCheckData@ioTCPChecker@@0@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXPAUCheckData@ioTCPChecker@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXPAUCheckData@ioTCPChecker@@0@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXPAUCheckData@ioTCPChecker@@0@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXXZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEPAUCheckData@ioTCPChecker@@PAU23@00@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Umove<ioTCPChecker::CheckData *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEPAUCheckData@ioTCPChecker@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEPAUCheckData@ioTCPChecker@@PAU23@00@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Umove<ioTCPChecker::CheckData *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z ; std::_Uninitialized_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEPAUCheckData@ioTCPChecker@@PAU23@00@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Umove<ioTCPChecker::CheckData *>
_TEXT	ENDS
PUBLIC	??$rotate@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@V10@00@Z ; std::rotate<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$rotate@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@V10@00@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Mid$ = 16						; size = 4
__Last$ = 20						; size = 4
??$rotate@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@V10@00@Z PROC ; std::rotate<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >, COMDAT

; 3294 : 	{	// rotate [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3295 : 	_DEBUG_RANGE(_First, _Mid);
; 3296 : 	_DEBUG_RANGE(_Mid, _Last);
; 3297 : 	if (_First != _Mid && _Mid != _Last)

  00003	8b 45 10	 mov	 eax, DWORD PTR __Mid$[ebp]
  00006	39 45 0c	 cmp	 DWORD PTR __First$[ebp], eax
  00009	74 2a		 je	 SHORT $LN56@rotate
  0000b	3b 45 14	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000e	74 25		 je	 SHORT $LN56@rotate

; 3298 : 		{	// rotate and compute new first iterator
; 3299 : 		_Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
; 3300 : 			_Iter_cat(_First));

  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  00017	50		 push	 eax
  00018	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0001b	e8 00 00 00 00	 call	 ??$_Rotate@PAUCheckData@ioTCPChecker@@HU12@@std@@YAXPAUCheckData@ioTCPChecker@@00PAH0@Z ; std::_Rotate<ioTCPChecker::CheckData *,int,ioTCPChecker::CheckData>

; 3301 : 		_STD advance(_First, _STD distance(_Mid, _Last));

  00020	8b 45 14	 mov	 eax, DWORD PTR __Last$[ebp]
  00023	2b 45 10	 sub	 eax, DWORD PTR __Mid$[ebp]
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	99		 cdq
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00032	01 45 0c	 add	 DWORD PTR __First$[ebp], eax
$LN56@rotate:

; 3302 : 		}
; 3303 : 	return (_First);

  00035	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 3304 : 	}

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$rotate@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@V10@00@Z ENDP ; std::rotate<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >
_TEXT	ENDS
PUBLIC	??1?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::~vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::~vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Tidy
??1?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::~vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$507523 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	ff 75 0c	 push	 DWORD PTR __Cat$507523[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	50		 push	 eax
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	83 c0 0c	 add	 eax, 12			; 0000000cH
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1183 : 		--this->_Mylast;
; 1184 : 		return (_Make_iter(_Where));

  00019	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	83 46 04 f4	 add	 DWORD PTR [esi+4], -12	; fffffff4H
  00026	89 08		 mov	 DWORD PTR [eax], ecx
  00028	5e		 pop	 esi

; 1185 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@0@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$507699 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@0@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$507699[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUCheckData@ioTCPChecker@@PAU12@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::reserve
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$505422 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 0c		 push	 12			; 0000000cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UCheckData@ioTCPChecker@@@std@@YAPAUCheckData@ioTCPChecker@@IPAU12@@Z ; std::_Allocate<ioTCPChecker::CheckData>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$505422[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$505422[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCheckData@ioTCPChecker@@PAU12@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@YAPAUCheckData@ioTCPChecker@@PAU12@00AAV?$allocator@UCheckData@ioTCPChecker@@@0@@Z ; std::_Uninitialized_move<ioTCPChecker::CheckData *,ioTCPChecker::CheckData *,std::allocator<ioTCPChecker::CheckData> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 0c		 push	 12			; 0000000cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 0c	 add	 ecx, 12			; 0000000cH
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 0c	 imul	 ebx, 12			; 0000000cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 0c	 imul	 edi, 12			; 0000000cH
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$505422[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$505422[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::reserve
PUBLIC	??_7ioTCPChecker@@6B@				; ioTCPChecker::`vftable'
PUBLIC	??0ioTCPChecker@@QAE@XZ				; ioTCPChecker::ioTCPChecker
PUBLIC	??_R4ioTCPChecker@@6B@				; ioTCPChecker::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioTCPChecker@@@8			; ioTCPChecker `RTTI Type Descriptor'
PUBLIC	??_R3ioTCPChecker@@8				; ioTCPChecker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioTCPChecker@@8				; ioTCPChecker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioTCPChecker@@8			; ioTCPChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VioTCPChecker@@@@8	; Singleton<ioTCPChecker>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VioTCPChecker@@@@@8		; Singleton<ioTCPChecker> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VioTCPChecker@@@@8		; Singleton<ioTCPChecker>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VioTCPChecker@@@@8		; Singleton<ioTCPChecker>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VioTCPChecker@@@@8	; Singleton<ioTCPChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioTCPChecker@@UAEPAXI@Z:PROC		; ioTCPChecker::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VioTCPChecker@@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VioTCPChecker@@@@8 DD FLAT:??_R0?AV?$Singleton@VioTCPChecker@@@@@8 ; Singleton<ioTCPChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioTCPChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VioTCPChecker@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VioTCPChecker@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VioTCPChecker@@@@8 ; Singleton<ioTCPChecker>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VioTCPChecker@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VioTCPChecker@@@@8 DD 00H		; Singleton<ioTCPChecker>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VioTCPChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VioTCPChecker@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VioTCPChecker@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<ioTCPChecker> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VioTCPChecker@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VioTCPChecker@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VioTCPChecker@@@@8 DD FLAT:??_R0?AV?$Singleton@VioTCPChecker@@@@@8 ; Singleton<ioTCPChecker>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioTCPChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioTCPChecker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioTCPChecker@@8 DD FLAT:??_R0?AVioTCPChecker@@@8 ; ioTCPChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioTCPChecker@@8
rdata$r	ENDS
;	COMDAT ??_R2ioTCPChecker@@8
rdata$r	SEGMENT
??_R2ioTCPChecker@@8 DD FLAT:??_R1A@?0A@EA@ioTCPChecker@@8 ; ioTCPChecker::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VioTCPChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R3ioTCPChecker@@8
rdata$r	SEGMENT
??_R3ioTCPChecker@@8 DD 00H				; ioTCPChecker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioTCPChecker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioTCPChecker@@@8
_DATA	SEGMENT
??_R0?AVioTCPChecker@@@8 DD FLAT:??_7type_info@@6B@	; ioTCPChecker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioTCPChecker@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioTCPChecker@@6B@
rdata$r	SEGMENT
??_R4ioTCPChecker@@6B@ DD 00H				; ioTCPChecker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioTCPChecker@@@8
	DD	FLAT:??_R3ioTCPChecker@@8
rdata$r	ENDS
;	COMDAT ??_7ioTCPChecker@@6B@
CONST	SEGMENT
??_7ioTCPChecker@@6B@ DD FLAT:??_R4ioTCPChecker@@6B@	; ioTCPChecker::`vftable'
	DD	FLAT:??_EioTCPChecker@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotcpchecker.cpp
CONST	ENDS
;	COMDAT ??0ioTCPChecker@@QAE@XZ
_TEXT	SEGMENT
??0ioTCPChecker@@QAE@XZ PROC				; ioTCPChecker::ioTCPChecker, COMDAT
; _this$ = ecx

; 10   : {

  00000	8b c1		 mov	 eax, ecx
  00002	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A, eax ; Singleton<ioTCPChecker>::ms_Singleton
  00007	33 c9		 xor	 ecx, ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ioTCPChecker@@6B@
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 11   : 
; 12   : }

  00018	c3		 ret	 0
??0ioTCPChecker@@QAE@XZ ENDP				; ioTCPChecker::ioTCPChecker
_TEXT	ENDS
PUBLIC	?clear@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?clear@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T507958 = -4						; size = 4
?clear@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXXZ PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T507958[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@0@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 0c		 push	 12			; 0000000cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 0c		 push	 12			; 0000000cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IBEII@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXI@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Reserve
_TEXT	ENDS
PUBLIC	??$emplace_back@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXAAUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace_back<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
;	COMDAT ??$emplace_back@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXAAUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$emplace_back@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXAAUCheckData@ioTCPChecker@@@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace_back<ioTCPChecker::CheckData &>, COMDAT
; _this$ = ecx

; 661  : 		void emplace_back(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 662  : 		{	// insert element at end
; 663  : 		if (this->_Mylast == this->_Myend)

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0000c	75 07		 jne	 SHORT $LN1@emplace_ba

; 664  : 			_Reserve(1);

  0000e	6a 01		 push	 1
  00010	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Reserve
$LN1@emplace_ba:

; 665  : 		_Orphan_range(this->_Mylast, this->_Mylast);
; 666  : 		_Cons_val(this->_Alval,
; 667  : 			this->_Mylast,
; 668  : 			_STD forward<_Valty>(_Val));

  00015	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00018	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0001b	ff 76 04	 push	 DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@AAU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@AAU23@@Z ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData &>
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 669  : 		++this->_Mylast;

  00027	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  0002b	5e		 pop	 esi

; 670  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$emplace_back@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXAAUCheckData@ioTCPChecker@@@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace_back<ioTCPChecker::CheckData &>
_TEXT	ENDS
PUBLIC	??1ioTCPChecker@@UAE@XZ				; ioTCPChecker::~ioTCPChecker
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1ioTCPChecker@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioTCPChecker@@UAE@XZ$0
__ehfuncinfo$??1ioTCPChecker@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioTCPChecker@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotcpchecker.cpp
xdata$x	ENDS
;	COMDAT ??1ioTCPChecker@@UAE@XZ
_TEXT	SEGMENT
$T508112 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioTCPChecker@@UAE@XZ PROC				; ioTCPChecker::~ioTCPChecker, COMDAT
; _this$ = ecx

; 15   : {	

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioTCPChecker@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioTCPChecker@@6B@
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 16   : 	m_vCheckData.clear();

  00019	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	8d 45 ec	 lea	 eax, DWORD PTR $T508112[ebp]
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@0@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase

; 17   : }

  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXXZ ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Tidy
  00035	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioTCPChecker@@@@1PAVioTCPChecker@@A, 0 ; Singleton<ioTCPChecker>::ms_Singleton
  0003c	e8 00 00 00 00	 call	 __EH_epilog3
  00041	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioTCPChecker@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioTCPChecker@@@@QAE@XZ ; Singleton<ioTCPChecker>::~Singleton<ioTCPChecker>
__ehhandler$??1ioTCPChecker@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioTCPChecker@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioTCPChecker@@UAE@XZ ENDP				; ioTCPChecker::~ioTCPChecker
PUBLIC	?push_back@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXABUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXABUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXABUCheckData@ioTCPChecker@@@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 0c		 push	 12			; 0000000cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@AAU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@AAU23@@Z ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCheckData@ioTCPChecker@@@std@@UCheckData@ioTCPChecker@@ABU34@@std@@YAXAAV?$allocator@UCheckData@ioTCPChecker@@@0@PAUCheckData@ioTCPChecker@@ABU23@@Z ; std::_Cons_val<std::allocator<ioTCPChecker::CheckData>,ioTCPChecker::CheckData,ioTCPChecker::CheckData const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXABUCheckData@ioTCPChecker@@@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::push_back
_TEXT	ENDS
PUBLIC	??$emplace@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
;	COMDAT ??$emplace@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
$T508179 = 16						; size = 4
__Val$ = 16						; size = 4
??$emplace@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace<ioTCPChecker::CheckData &>, COMDAT
; _this$ = ecx

; 679  : 		iterator emplace(const_iterator _Where, _Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 680  : 		{	// insert _Val at _Where
; 681  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	2b 06		 sub	 eax, DWORD PTR [esi]
  0000b	57		 push	 edi
  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	59		 pop	 ecx
  0000f	99		 cdq
  00010	f7 f9		 idiv	 ecx

; 682  : 
; 683  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 684  : 		if (size() < _Off)
; 685  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 686  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 687  : 
; 688  : 		emplace_back(_STD forward<_Valty>(_Val));

  00012	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00015	8b ce		 mov	 ecx, esi
  00017	8b f8		 mov	 edi, eax
  00019	e8 00 00 00 00	 call	 ??$emplace_back@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXAAUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace_back<ioTCPChecker::CheckData &>

; 689  : 		_STD rotate(begin() + _Off, end() - 1, end());

  0001e	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00021	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	51		 push	 ecx
  00027	8d 51 f4	 lea	 edx, DWORD PTR [ecx-12]
  0002a	03 c7		 add	 eax, edi
  0002c	52		 push	 edx
  0002d	50		 push	 eax
  0002e	8d 45 10	 lea	 eax, DWORD PTR $T508179[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$rotate@V?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@0@V10@00@Z ; std::rotate<std::_Vector_iterator<std::_Vector_val<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> > > >

; 690  : 		return (begin() + _Off);

  00037	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	83 c4 10	 add	 esp, 16			; 00000010H
  0003f	03 cf		 add	 ecx, edi
  00041	5f		 pop	 edi
  00042	89 08		 mov	 DWORD PTR [eax], ecx
  00044	5e		 pop	 esi

; 691  : 		}

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
??$emplace@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioTCPChecker@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioTCPChecker@@UAEPAXI@Z PROC			; ioTCPChecker::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioTCPChecker@@UAE@XZ	; ioTCPChecker::~ioTCPChecker
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioTCPChecker@@UAEPAXI@Z ENDP			; ioTCPChecker::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$insert@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::insert<ioTCPChecker::CheckData &>
; Function compile flags: /Ogsp
;	COMDAT ??$insert@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
??$insert@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z PROC ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::insert<ioTCPChecker::CheckData &>, COMDAT
; _this$ = ecx

; 673  : 		iterator insert(const_iterator _Where, _Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : 		{	// insert _Val at _Where
; 675  : 		return (emplace(_Where, _STD forward<_Valty>(_Val)));

  00003	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Where$[ebp]
  00009	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$emplace@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace<ioTCPChecker::CheckData &>
  00011	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 676  : 		}

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
??$insert@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z ENDP ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::insert<ioTCPChecker::CheckData &>
_TEXT	ENDS
PUBLIC	?AddRecvPacket@ioTCPChecker@@QAEXK@Z		; ioTCPChecker::AddRecvPacket
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotcpchecker.cpp
;	COMDAT ?AddRecvPacket@ioTCPChecker@@QAEXK@Z
_TEXT	SEGMENT
_kData$ = -12						; size = 12
$T508356 = 8						; size = 4
$T508352 = 8						; size = 4
_dwID$ = 8						; size = 4
?AddRecvPacket@ioTCPChecker@@QAEXK@Z PROC		; ioTCPChecker::AddRecvPacket, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 26   : 	if( this == NULL )

  00009	85 f6		 test	 esi, esi
  0000b	74 6b		 je	 SHORT $LN1@AddRecvPac

; 27   : 		return;
; 28   : 
; 29   : 	CheckData kData;
; 30   : 	kData.m_dwType = CheckType_Packet;
; 31   : 	kData.m_dwDataValue = dwID;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _dwID$[ebp]
  00010	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _kData$[ebp], 1
  00017	89 45 f8	 mov	 DWORD PTR _kData$[ebp+4], eax

; 32   : 	kData.m_dwTime = FRAMEGETTIME();

  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00020	8b c8		 mov	 ecx, eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 33   : 
; 34   : 	if( m_vCheckData.empty() )

  00028	83 c6 04	 add	 esi, 4
  0002b	89 45 fc	 mov	 DWORD PTR _kData$[ebp+8], eax
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00033	75 0d		 jne	 SHORT $LN3@AddRecvPac

; 35   : 		m_vCheckData.push_back( kData );

  00035	8d 45 f4	 lea	 eax, DWORD PTR _kData$[ebp]
  00038	50		 push	 eax
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?push_back@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXABUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::push_back

; 36   : 	else

  00040	eb 10		 jmp	 SHORT $LN19@AddRecvPac
$LN3@AddRecvPac:

; 37   : 		m_vCheckData.insert( m_vCheckData.begin(), kData );

  00042	8d 4d f4	 lea	 ecx, DWORD PTR _kData$[ebp]
  00045	51		 push	 ecx
  00046	50		 push	 eax
  00047	8d 45 08	 lea	 eax, DWORD PTR $T508352[ebp]
  0004a	50		 push	 eax
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ??$emplace@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace<ioTCPChecker::CheckData &>
$LN19@AddRecvPac:

; 38   : 
; 39   : 	int iSize = m_vCheckData.size() - 1;

  00052	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00054	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00057	57		 push	 edi
  00058	2b c1		 sub	 eax, ecx
  0005a	6a 0c		 push	 12			; 0000000cH
  0005c	99		 cdq
  0005d	5f		 pop	 edi
  0005e	f7 ff		 idiv	 edi
  00060	5f		 pop	 edi
  00061	48		 dec	 eax

; 40   : 	if( iSize >= MAX_RECV_HIGH_SIZE )

  00062	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00065	7c 11		 jl	 SHORT $LN1@AddRecvPac

; 41   : 		m_vCheckData.erase( m_vCheckData.begin() + iSize );

  00067	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0006a	03 c1		 add	 eax, ecx
  0006c	50		 push	 eax
  0006d	8d 45 08	 lea	 eax, DWORD PTR $T508356[ebp]
  00070	50		 push	 eax
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase
$LN1@AddRecvPac:
  00078	5e		 pop	 esi

; 42   : }

  00079	c9		 leave
  0007a	c2 04 00	 ret	 4
?AddRecvPacket@ioTCPChecker@@QAEXK@Z ENDP		; ioTCPChecker::AddRecvPacket
_TEXT	ENDS
PUBLIC	?AddPlayModeChange@ioTCPChecker@@QAEXK@Z	; ioTCPChecker::AddPlayModeChange
; Function compile flags: /Ogsp
;	COMDAT ?AddPlayModeChange@ioTCPChecker@@QAEXK@Z
_TEXT	SEGMENT
_kData$ = -12						; size = 12
$T508450 = 8						; size = 4
$T508446 = 8						; size = 4
_dwType$ = 8						; size = 4
?AddPlayModeChange@ioTCPChecker@@QAEXK@Z PROC		; ioTCPChecker::AddPlayModeChange, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 47   : 	CheckData kData;
; 48   : 	kData.m_dwType = CheckType_PlayMode;
; 49   : 	kData.m_dwDataValue = dwType;

  00006	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _kData$[ebp], 2
  00013	89 45 f8	 mov	 DWORD PTR _kData$[ebp+4], eax

; 50   : 	kData.m_dwTime = FRAMEGETTIME();

  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 51   : 
; 52   : 	if( m_vCheckData.empty() )

  00024	83 c6 04	 add	 esi, 4
  00027	89 45 fc	 mov	 DWORD PTR _kData$[ebp+8], eax
  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0002f	75 0d		 jne	 SHORT $LN3@AddPlayMod

; 53   : 		m_vCheckData.push_back( kData );

  00031	8d 45 f4	 lea	 eax, DWORD PTR _kData$[ebp]
  00034	50		 push	 eax
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?push_back@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAEXABUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::push_back

; 54   : 	else

  0003c	eb 10		 jmp	 SHORT $LN18@AddPlayMod
$LN3@AddPlayMod:

; 55   : 		m_vCheckData.insert( m_vCheckData.begin(), kData );

  0003e	8d 4d f4	 lea	 ecx, DWORD PTR _kData$[ebp]
  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	8d 45 08	 lea	 eax, DWORD PTR $T508446[ebp]
  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ??$emplace@AAUCheckData@ioTCPChecker@@@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@1@AAUCheckData@ioTCPChecker@@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::emplace<ioTCPChecker::CheckData &>
$LN18@AddPlayMod:

; 56   : 
; 57   : 	int iSize = m_vCheckData.size() - 1;

  0004e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	57		 push	 edi
  00054	2b c1		 sub	 eax, ecx
  00056	6a 0c		 push	 12			; 0000000cH
  00058	99		 cdq
  00059	5f		 pop	 edi
  0005a	f7 ff		 idiv	 edi
  0005c	5f		 pop	 edi
  0005d	48		 dec	 eax

; 58   : 	if( iSize >= MAX_RECV_HIGH_SIZE )

  0005e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00061	7c 11		 jl	 SHORT $LN1@AddPlayMod

; 59   : 		m_vCheckData.erase( m_vCheckData.begin() + iSize );

  00063	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00066	03 c1		 add	 eax, ecx
  00068	50		 push	 eax
  00069	8d 45 08	 lea	 eax, DWORD PTR $T508450[ebp]
  0006c	50		 push	 eax
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?erase@?$vector@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCheckData@ioTCPChecker@@V?$allocator@UCheckData@ioTCPChecker@@@std@@@std@@@2@@Z ; std::vector<ioTCPChecker::CheckData,std::allocator<ioTCPChecker::CheckData> >::erase
$LN1@AddPlayMod:
  00074	5e		 pop	 esi

; 60   : }

  00075	c9		 leave
  00076	c2 04 00	 ret	 4
?AddPlayModeChange@ioTCPChecker@@QAEXK@Z ENDP		; ioTCPChecker::AddPlayModeChange
_TEXT	ENDS
END
