; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ShuffleRankWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0Rank@ShuffleRankWnd@@QAE@XZ			; ShuffleRankWnd::Rank::Rank
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.h
;	COMDAT ??0Rank@ShuffleRankWnd@@QAE@XZ
_TEXT	SEGMENT
??0Rank@ShuffleRankWnd@@QAE@XZ PROC			; ShuffleRankWnd::Rank::Rank, COMDAT
; _this$ = ecx

; 14   : 		Rank()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 15   : 		{
; 16   : 			iCurrStar = 0;

  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0

; 17   : 			iTeamType = 0;

  0000d	83 66 14 00	 and	 DWORD PTR [esi+20], 0

; 18   : 		}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	c3		 ret	 0
??0Rank@ShuffleRankWnd@@QAE@XZ ENDP			; ShuffleRankWnd::Rank::Rank
_TEXT	ENDS
PUBLIC	??RRankOrder@ShuffleRankWnd@@QBE_NABURank@1@0@Z	; ShuffleRankWnd::RankOrder::operator()
; Function compile flags: /Ogsp
;	COMDAT ??RRankOrder@ShuffleRankWnd@@QBE_NABURank@1@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??RRankOrder@ShuffleRankWnd@@QBE_NABURank@1@0@Z PROC	; ShuffleRankWnd::RankOrder::operator(), COMDAT
; _this$ = ecx

; 26   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : 			if( lhs.iCurrStar > rhs.iCurrStar )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lhs$[ebp]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _rhs$[ebp]
  0000c	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0000f	0f 9f c0	 setg	 al

; 28   : 				return true;
; 29   : 
; 30   : 			return false;
; 31   : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??RRankOrder@ShuffleRankWnd@@QBE_NABURank@1@0@Z ENDP	; ShuffleRankWnd::RankOrder::operator()
_TEXT	ENDS
PUBLIC	??1Rank@ShuffleRankWnd@@QAE@XZ			; ShuffleRankWnd::Rank::~Rank
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1Rank@ShuffleRankWnd@@QAE@XZ
_TEXT	SEGMENT
??1Rank@ShuffleRankWnd@@QAE@XZ PROC			; ShuffleRankWnd::Rank::~Rank, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1Rank@ShuffleRankWnd@@QAE@XZ ENDP			; ShuffleRankWnd::Rank::~Rank
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?SetState@ShuffleRankWnd@@IAEXK@Z		; ShuffleRankWnd::SetState
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2:PROC
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
CONST	ENDS
;	COMDAT ?SetState@ShuffleRankWnd@@IAEXK@Z
_TEXT	SEGMENT
tv181 = -4						; size = 4
tv185 = 8						; size = 4
tv172 = 8						; size = 4
tv171 = 8						; size = 4
tv85 = 8						; size = 4
_dwState$ = 8						; size = 4
?SetState@ShuffleRankWnd@@IAEXK@Z PROC			; ShuffleRankWnd::SetState, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 61   : 	m_dwState       = dwState;

  00004	8b 45 08	 mov	 eax, DWORD PTR _dwState$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax

; 62   : 	m_dwCurrentTime = FRAMEGETTIME();

  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00017	8b c8		 mov	 ecx, eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0001f	89 86 74 01 00
	00		 mov	 DWORD PTR [esi+372], eax

; 63   : 	m_dwFadeTime    = max( FLOAT100, m_dwFadeTime );

  00025	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0002a	db 86 78 01 00
	00		 fild	 DWORD PTR [esi+376]
  00030	8b 8e 78 01 00
	00		 mov	 ecx, DWORD PTR [esi+376]
  00036	85 c9		 test	 ecx, ecx
  00038	79 06		 jns	 SHORT $LN13@SetState
  0003a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN13@SetState:
  00040	89 45 fc	 mov	 DWORD PTR tv181[ebp], eax
  00043	d9 5d 08	 fstp	 DWORD PTR tv171[ebp]
  00046	db 45 fc	 fild	 DWORD PTR tv181[ebp]
  00049	85 c0		 test	 eax, eax
  0004b	79 06		 jns	 SHORT $LN14@SetState
  0004d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@SetState:
  00053	d9 45 08	 fld	 DWORD PTR tv171[ebp]
  00056	d9 c9		 fxch	 ST(1)
  00058	df f1		 fcomip	 ST(1)
  0005a	dd d8		 fstp	 ST(0)
  0005c	76 1a		 jbe	 SHORT $LN7@SetState
  0005e	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00063	89 45 08	 mov	 DWORD PTR tv172[ebp], eax
  00066	db 45 08	 fild	 DWORD PTR tv172[ebp]
  00069	85 c0		 test	 eax, eax
  0006b	79 06		 jns	 SHORT $LN15@SetState
  0006d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN15@SetState:
  00073	d9 5d 08	 fstp	 DWORD PTR tv85[ebp]
  00076	eb 0a		 jmp	 SHORT $LN8@SetState
$LN7@SetState:
  00078	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv171[ebp]
  0007d	f3 0f 11 45 08	 movss	 DWORD PTR tv85[ebp], xmm0
$LN8@SetState:
  00082	d9 45 08	 fld	 DWORD PTR tv85[ebp]
  00085	e8 00 00 00 00	 call	 __ftol2
  0008a	89 86 78 01 00
	00		 mov	 DWORD PTR [esi+376], eax

; 64   : 
; 65   : 	switch( m_dwState )

  00090	8b 86 70 01 00
	00		 mov	 eax, DWORD PTR [esi+368]
  00096	85 c0		 test	 eax, eax
  00098	74 1d		 je	 SHORT $LN3@SetState
  0009a	83 f8 02	 cmp	 eax, 2
  0009d	76 11		 jbe	 SHORT $LN2@SetState
  0009f	83 f8 04	 cmp	 eax, 4
  000a2	77 13		 ja	 SHORT $LN3@SetState

; 70   : 		break;
; 71   : 	case STATE_VIEW:
; 72   : 	case STATE_FADEOUT:
; 73   : 		m_iAlphaRate = MAX_ALPHA_RATE;

  000a4	c7 86 80 01 00
	00 ff 00 00 00	 mov	 DWORD PTR [esi+384], 255 ; 000000ffH

; 74   : 		break;

  000ae	eb 07		 jmp	 SHORT $LN3@SetState
$LN2@SetState:

; 66   : 	{
; 67   : 	case STATE_DELAY:
; 68   : 	case STATE_FADEIN:
; 69   : 		m_iAlphaRate = 0;

  000b0	83 a6 80 01 00
	00 00		 and	 DWORD PTR [esi+384], 0
$LN3@SetState:
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi

; 75   : 	}
; 76   : }

  000b9	c9		 leave
  000ba	c2 04 00	 ret	 4
?SetState@ShuffleRankWnd@@IAEXK@Z ENDP			; ShuffleRankWnd::SetState
_TEXT	ENDS
PUBLIC	?GetRankColor@ShuffleRankWnd@@IAEKH@Z		; ShuffleRankWnd::GetRankColor
; Function compile flags: /Ogsp
;	COMDAT ?GetRankColor@ShuffleRankWnd@@IAEKH@Z
_TEXT	SEGMENT
_iRank$ = 8						; size = 4
?GetRankColor@ShuffleRankWnd@@IAEKH@Z PROC		; ShuffleRankWnd::GetRankColor, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 	switch( iRank )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iRank$[ebp]
  00006	48		 dec	 eax
  00007	74 19		 je	 SHORT $LN4@GetRankCol
  00009	48		 dec	 eax
  0000a	74 0f		 je	 SHORT $LN3@GetRankCol
  0000c	48		 dec	 eax
  0000d	74 05		 je	 SHORT $LN2@GetRankCol

; 88   : 	default:
; 89   : 		return TCT_DEFAULT_WHITE;		

  0000f	83 c8 ff	 or	 eax, -1
  00012	eb 13		 jmp	 SHORT $LN5@GetRankCol
$LN2@GetRankCol:

; 86   : 	case 3:
; 87   : 		return TCT_EX_BROWN;

  00014	b8 11 62 88 ff	 mov	 eax, -7839215		; ff886211H
  00019	eb 0c		 jmp	 SHORT $LN5@GetRankCol
$LN3@GetRankCol:

; 84   : 	case 2:
; 85   : 		return TCT_EX_RICE;

  0001b	b8 cd ef ff ff	 mov	 eax, -4147		; ffffefcdH
  00020	eb 05		 jmp	 SHORT $LN5@GetRankCol
$LN4@GetRankCol:

; 81   : 	{
; 82   : 	case 1:		
; 83   : 		return TCT_EX_YEELOW;	

  00022	b8 03 c1 fd ff	 mov	 eax, -147197		; fffdc103H
$LN5@GetRankCol:

; 90   : 	}	
; 91   : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetRankColor@ShuffleRankWnd@@IAEKH@Z ENDP		; ShuffleRankWnd::GetRankColor
_TEXT	ENDS
PUBLIC	__real@3f19999a
PUBLIC	??_C@_0BN@BMECLDBP@ShuffleRankWnd?3?3OnRankRender?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z ; ShuffleRankWnd::OnRankRender
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBDH@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	__imp_?PrintTextAlpha@ioFontManager@@QAEXMMMEPBDH@Z:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?PrintTextAlpha@ioFontManager@@QAAXMMMEPBDZZ:PROC
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT ??_C@_0BN@BMECLDBP@ShuffleRankWnd?3?3OnRankRender?$AA@
CONST	SEGMENT
??_C@_0BN@BMECLDBP@ShuffleRankWnd?3?3OnRankRender?$AA@ DB 'ShuffleRankWnd'
	DB	'::OnRankRender', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z$1
__ehfuncinfo$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z
_TEXT	SEGMENT
_kPrinter$ = -48					; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
_iTeamType$ = 16					; size = 4
_szName$ = 20						; size = 16
_iRank$ = 36						; size = 4
_iStar$ = 40						; size = 4
tv260 = 44						; size = 4
_bBottom$ = 44						; size = 1
?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z PROC ; ShuffleRankWnd::OnRankRender, COMDAT
; _this$ = ecx

; 173  : {

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 174  : 	g_FontMgr.SetTextStyle( TS_OUTLINE_FULL_2X );	

  0000f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00015	33 db		 xor	 ebx, ebx
  00017	6a 05		 push	 5
  00019	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0001c	ff d6		 call	 esi
  0001e	8b c8		 mov	 ecx, eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 175  : 	g_FontMgr.SetAlignType( TAT_RIGHT );

  00026	6a 02		 push	 2
  00028	ff d6		 call	 esi
  0002a	8b c8		 mov	 ecx, eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 176  : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  00032	53		 push	 ebx
  00033	53		 push	 ebx
  00034	53		 push	 ebx
  00035	ff d6		 call	 esi
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 177  : 
; 178  : 	if( bBottom )

  0003f	38 5d 2c	 cmp	 BYTE PTR _bBottom$[ebp], bl
  00042	0f 84 89 00 00
	00		 je	 $LN4@OnRankRend

; 179  : 	{
; 180  : 		g_FontMgr.SetTextColor( 145, 145, 145 );

  00048	b8 91 00 00 00	 mov	 eax, 145		; 00000091H
  0004d	50		 push	 eax
  0004e	50		 push	 eax
  0004f	50		 push	 eax
  00050	ff d6		 call	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXHHH@Z

; 181  : 		g_FontMgr.PrintTextAlpha( iXPos + 40, iYPos, FONT_SIZE_12, m_iAlphaRate, STR(1) );

  0005a	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  0005f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00065	53		 push	 ebx
  00066	6a 01		 push	 1
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BMECLDBP@ShuffleRankWnd?3?3OnRankRender?$AA@
  00075	f3 0f 11 45 2c	 movss	 DWORD PTR tv260[ebp], xmm0
  0007a	ff d7		 call	 edi
  0007c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00082	8b c8		 mov	 ecx, eax
  00084	ff d3		 call	 ebx
  00086	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0008e	50		 push	 eax
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	0f b6 80 80 01
	00 00		 movzx	 eax, BYTE PTR [eax+384]
  00099	50		 push	 eax
  0009a	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  0009d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000a0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000a6	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR tv260[ebp]
  000ab	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b1	83 c0 28	 add	 eax, 40			; 00000028H
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	ff d6		 call	 esi
  000c2	50		 push	 eax
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTextAlpha@ioFontManager@@QAAXMMMEPBDZZ
  000c9	83 c4 18	 add	 esp, 24			; 00000018H

; 182  : 	}
; 183  : 	else

  000cc	e9 89 00 00 00	 jmp	 $LN3@OnRankRend
$LN4@OnRankRend:

; 184  : 	{
; 185  : 		g_FontMgr.SetTextColor( GetRankColor( iRank ) );

  000d1	8b 7d 24	 mov	 edi, DWORD PTR _iRank$[ebp]
  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	57		 push	 edi
  000d8	e8 00 00 00 00	 call	 ?GetRankColor@ShuffleRankWnd@@IAEKH@Z ; ShuffleRankWnd::GetRankColor
  000dd	50		 push	 eax
  000de	ff d6		 call	 esi
  000e0	8b c8		 mov	 ecx, eax
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 186  : 		g_FontMgr.PrintTextAlpha( iXPos + 40, iYPos, FONT_SIZE_12, m_iAlphaRate, STR(2), iRank + 1 );

  000e8	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  000ed	47		 inc	 edi
  000ee	57		 push	 edi
  000ef	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000f5	53		 push	 ebx
  000f6	6a 02		 push	 2
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000fd	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BMECLDBP@ShuffleRankWnd?3?3OnRankRender?$AA@
  00105	f3 0f 11 45 2c	 movss	 DWORD PTR tv260[ebp], xmm0
  0010a	ff d7		 call	 edi
  0010c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00112	8b c8		 mov	 ecx, eax
  00114	ff d3		 call	 ebx
  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0011e	50		 push	 eax
  0011f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00122	0f b6 80 80 01
	00 00		 movzx	 eax, BYTE PTR [eax+384]
  00129	50		 push	 eax
  0012a	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  0012d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00130	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00136	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR tv260[ebp]
  0013b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00141	83 c0 28	 add	 eax, 40			; 00000028H
  00144	0f 57 c0	 xorps	 xmm0, xmm0
  00147	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0014b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00150	ff d6		 call	 esi
  00152	8b c8		 mov	 ecx, eax
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTextAlpha@ioFontManager@@QAEXMMMEPBDH@Z
$LN3@OnRankRend:

; 187  : 	}
; 188  : 
; 189  : 	ioComplexStringPrinter kPrinter;

  0015a	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0015d	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 190  : 	kPrinter.SetTextStyle( TS_OUTLINE_FULL_2X );

  00162	6a 05		 push	 5
  00164	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00167	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0016b	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 191  : 	kPrinter.SetBkColor( 0, 0, 0 );

  00170	33 f6		 xor	 esi, esi
  00172	56		 push	 esi
  00173	56		 push	 esi
  00174	56		 push	 esi
  00175	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00178	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 192  : 
; 193  : 	if( iTeamType == TEAM_BLUE )

  0017d	83 7d 10 02	 cmp	 DWORD PTR _iTeamType$[ebp], 2

; 194  : 		kPrinter.SetTextColor( TCT_EX_BLUE );

  00181	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00184	75 07		 jne	 SHORT $LN2@OnRankRend
  00186	68 c9 7a 01 ff	 push	 -16680247		; ff017ac9H

; 195  : 	else

  0018b	eb 05		 jmp	 SHORT $LN10@OnRankRend
$LN2@OnRankRend:

; 196  : 		kPrinter.SetTextColor( TCT_DEFAULT_RED );

  0018d	68 00 16 b9 ff	 push	 -4647424		; ffb91600H
$LN10@OnRankRend:
  00192	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 197  : 
; 198  : 	kPrinter.AddTextPiece( FONT_SIZE_12, STR(3), szName.c_str() );

  00197	8d 4d 14	 lea	 ecx, DWORD PTR _szName$[ebp]
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  001a0	50		 push	 eax
  001a1	56		 push	 esi
  001a2	6a 03		 push	 3
  001a4	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001a9	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BN@BMECLDBP@ShuffleRankWnd?3?3OnRankRender?$AA@
  001ae	56		 push	 esi
  001af	ff d7		 call	 edi
  001b1	8b c8		 mov	 ecx, eax
  001b3	ff d3		 call	 ebx
  001b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  001bd	50		 push	 eax
  001be	51		 push	 ecx
  001bf	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 199  : 
; 200  : 	kPrinter.SetTextColor( TCT_DEFAULT_WHITE );

  001cc	6a ff		 push	 -1
  001ce	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  001d1	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 201  : 	kPrinter.AddTextPiece( FONT_SIZE_12, STR(4) );

  001d6	6a 00		 push	 0
  001d8	6a 04		 push	 4
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001df	56		 push	 esi
  001e0	ff d7		 call	 edi
  001e2	8b c8		 mov	 ecx, eax
  001e4	ff d3		 call	 ebx
  001e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  001ee	50		 push	 eax
  001ef	51		 push	 ecx
  001f0	8d 45 d0	 lea	 eax, DWORD PTR _kPrinter$[ebp]
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  001fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  : 	kPrinter.SetTextColor( TCT_EX_YEELOW );

  00201	68 03 c1 fd ff	 push	 -147197			; fffdc103H
  00206	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00209	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 203  : 	kPrinter.AddTextPiece( FONT_SIZE_12, STR(5), iStar );

  0020e	ff 75 28	 push	 DWORD PTR _iStar$[ebp]
  00211	6a 00		 push	 0
  00213	6a 05		 push	 5
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0021a	56		 push	 esi
  0021b	ff d7		 call	 edi
  0021d	8b c8		 mov	 ecx, eax
  0021f	ff d3		 call	 ebx
  00221	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00229	50		 push	 eax
  0022a	51		 push	 ecx
  0022b	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBDH@Z ; ioComplexStringPrinter::AddTextPiece

; 204  : 	kPrinter.PrintFullText( iXPos + 46, iYPos, TAT_LEFT, m_iAlphaRate );

  00238	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0023b	0f b6 80 80 01
	00 00		 movzx	 eax, BYTE PTR [eax+384]
  00242	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR tv260[ebp]
  00247	50		 push	 eax
  00248	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  0024b	6a 00		 push	 0
  0024d	51		 push	 ecx
  0024e	51		 push	 ecx
  0024f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00255	83 c0 2e	 add	 eax, 46			; 0000002eH
  00258	0f 57 c0	 xorps	 xmm0, xmm0
  0025b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0025f	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 205  : }

  0026c	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0026f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00273	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  00278	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0027c	8d 4d 14	 lea	 ecx, DWORD PTR _szName$[ebp]
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00285	e8 00 00 00 00	 call	 __EH_epilog3
  0028a	c2 28 00	 ret	 40			; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR _szName$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z$1:
  00009	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0000c	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z ENDP ; ShuffleRankWnd::OnRankRender
PUBLIC	?size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE_NXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE_NXZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEAAURank@ShuffleRankWnd@@I@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEAAURank@ShuffleRankWnd@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEAAURank@ShuffleRankWnd@@I@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 18	 imul	 eax, 24			; 00000018H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEAAURank@ShuffleRankWnd@@I@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBE_NPBURank@ShuffleRankWnd@@@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBE_NPBURank@ShuffleRankWnd@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBE_NPBURank@ShuffleRankWnd@@@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBE_NPBURank@ShuffleRankWnd@@@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXPAURank@ShuffleRankWnd@@0@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXPAURank@ShuffleRankWnd@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXPAURank@ShuffleRankWnd@@0@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXPAURank@ShuffleRankWnd@@0@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ ; std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::~_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::~_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::~_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
_TEXT	ENDS
PUBLIC	??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@XZ ; std::allocator<ShuffleRankWnd::Rank>::allocator<ShuffleRankWnd::Rank>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@XZ PROC	; std::allocator<ShuffleRankWnd::Rank>::allocator<ShuffleRankWnd::Rank>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@XZ ENDP	; std::allocator<ShuffleRankWnd::Rank>::allocator<ShuffleRankWnd::Rank>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXXZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEXXZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@ABV01@@Z ; std::allocator<ShuffleRankWnd::Rank>::allocator<ShuffleRankWnd::Rank>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ShuffleRankWnd::Rank>::allocator<ShuffleRankWnd::Rank>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@URank@ShuffleRankWnd@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ShuffleRankWnd::Rank>::allocator<ShuffleRankWnd::Rank>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@I@Z ; std::allocator<ShuffleRankWnd::Rank>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@I@Z PROC ; std::allocator<ShuffleRankWnd::Rank>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@I@Z ENDP ; std::allocator<ShuffleRankWnd::Rank>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@URank@ShuffleRankWnd@@@std@@QBEIXZ ; std::allocator<ShuffleRankWnd::Rank>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@URank@ShuffleRankWnd@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@URank@ShuffleRankWnd@@@std@@QBEIXZ PROC ; std::allocator<ShuffleRankWnd::Rank>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@URank@ShuffleRankWnd@@@std@@QBEIXZ ENDP ; std::allocator<ShuffleRankWnd::Rank>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Compat
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$addressof@$$CBURank@ShuffleRankWnd@@@std@@YAPBURank@ShuffleRankWnd@@ABU12@@Z ; std::addressof<ShuffleRankWnd::Rank const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBURank@ShuffleRankWnd@@@std@@YAPBURank@ShuffleRankWnd@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBURank@ShuffleRankWnd@@@std@@YAPBURank@ShuffleRankWnd@@ABU12@@Z PROC ; std::addressof<ShuffleRankWnd::Rank const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBURank@ShuffleRankWnd@@@std@@YAPBURank@ShuffleRankWnd@@ABU12@@Z ENDP ; std::addressof<ShuffleRankWnd::Rank const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@URank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@IPAU12@@Z ; std::_Allocate<ShuffleRankWnd::Rank>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@URank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@IPAU12@@Z
_TEXT	SEGMENT
$T507668 = -12						; size = 12
$T507673 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@URank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@IPAU12@@Z PROC ; std::_Allocate<ShuffleRankWnd::Rank>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 18	 imul	 ecx, 24			; 00000018H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T507673[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T507673[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T507668[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T507668[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T507668[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@URank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@IPAU12@@Z ENDP ; std::_Allocate<ShuffleRankWnd::Rank>
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 18		 push	 24			; 00000018H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 193  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator-
_TEXT	ENDS
PUBLIC	??$forward@AAURank@ShuffleRankWnd@@@std@@YAAAURank@ShuffleRankWnd@@AAU12@@Z ; std::forward<ShuffleRankWnd::Rank &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAURank@ShuffleRankWnd@@@std@@YAAAURank@ShuffleRankWnd@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAURank@ShuffleRankWnd@@@std@@YAAAURank@ShuffleRankWnd@@AAU12@@Z PROC ; std::forward<ShuffleRankWnd::Rank &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAURank@ShuffleRankWnd@@@std@@YAAAURank@ShuffleRankWnd@@AAU12@@Z ENDP ; std::forward<ShuffleRankWnd::Rank &>
_TEXT	ENDS
PUBLIC	??$forward@ABURank@ShuffleRankWnd@@@std@@YAABURank@ShuffleRankWnd@@ABU12@@Z ; std::forward<ShuffleRankWnd::Rank const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABURank@ShuffleRankWnd@@@std@@YAABURank@ShuffleRankWnd@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABURank@ShuffleRankWnd@@@std@@YAABURank@ShuffleRankWnd@@ABU12@@Z PROC ; std::forward<ShuffleRankWnd::Rank const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABURank@ShuffleRankWnd@@@std@@YAABURank@ShuffleRankWnd@@ABU12@@Z ENDP ; std::forward<ShuffleRankWnd::Rank const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@URank@ShuffleRankWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURank@ShuffleRankWnd@@0@Z ; std::_Ptr_cat<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@URank@ShuffleRankWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURank@ShuffleRankWnd@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@URank@ShuffleRankWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURank@ShuffleRankWnd@@0@Z PROC ; std::_Ptr_cat<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@URank@ShuffleRankWnd@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURank@ShuffleRankWnd@@0@Z ENDP ; std::_Ptr_cat<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank>
_TEXT	ENDS
PUBLIC	??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z		; ShuffleRankWnd::Rank::Rank
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z PROC		; ShuffleRankWnd::Rank::Rank, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00011	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001d	5f		 pop	 edi
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z ENDP		; ShuffleRankWnd::Rank::Rank
_TEXT	ENDS
PUBLIC	??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z	; ShuffleRankWnd::Rank::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z PROC		; ShuffleRankWnd::Rank::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00011	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001d	5f		 pop	 edi
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z ENDP		; ShuffleRankWnd::Rank::operator=
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEPAURank@ShuffleRankWnd@@XZ ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Unchecked
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEPAURank@ShuffleRankWnd@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEPAURank@ShuffleRankWnd@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEPAURank@ShuffleRankWnd@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Unchecked
_TEXT	ENDS
PUBLIC	??$move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z ; std::move<ShuffleRankWnd::Rank &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z PROC ; std::move<ShuffleRankWnd::Rank &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z ENDP ; std::move<ShuffleRankWnd::Rank &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z ; std::_Val_type<ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z PROC ; std::_Val_type<ShuffleRankWnd::Rank *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z ENDP ; std::_Val_type<ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z ; std::_Unchecked<ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z PROC ; std::_Unchecked<ShuffleRankWnd::Rank *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAURank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@@Z ENDP ; std::_Unchecked<ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAURank@ShuffleRankWnd@@@std@@YAPAHPAURank@ShuffleRankWnd@@@Z ; std::_Dist_type<ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dist_type@PAURank@ShuffleRankWnd@@@std@@YAPAHPAURank@ShuffleRankWnd@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAURank@ShuffleRankWnd@@@std@@YAPAHPAURank@ShuffleRankWnd@@@Z PROC ; std::_Dist_type<ShuffleRankWnd::Rank *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAURank@ShuffleRankWnd@@@std@@YAPAHPAURank@ShuffleRankWnd@@@Z ENDP ; std::_Dist_type<ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	??_GRank@ShuffleRankWnd@@QAEPAXI@Z		; ShuffleRankWnd::Rank::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GRank@ShuffleRankWnd@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GRank@ShuffleRankWnd@@QAEPAXI@Z PROC			; ShuffleRankWnd::Rank::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GRank@ShuffleRankWnd@@QAEPAXI@Z ENDP			; ShuffleRankWnd::Rank::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$forward@AAPAURank@ShuffleRankWnd@@@std@@YAAAPAURank@ShuffleRankWnd@@AAPAU12@@Z ; std::forward<ShuffleRankWnd::Rank * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAURank@ShuffleRankWnd@@@std@@YAAAPAURank@ShuffleRankWnd@@AAPAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAURank@ShuffleRankWnd@@@std@@YAAAPAURank@ShuffleRankWnd@@AAPAU12@@Z PROC ; std::forward<ShuffleRankWnd::Rank * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAURank@ShuffleRankWnd@@@std@@YAAAPAURank@ShuffleRankWnd@@AAPAU12@@Z ENDP ; std::forward<ShuffleRankWnd::Rank * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$_Pair_base@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z ; std::_Pair_base<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>::_Pair_base<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *><ShuffleRankWnd::Rank * &,ShuffleRankWnd::Rank * &>
; Function compile flags: /Ogsp
;	COMDAT ??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$_Pair_base@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$_Pair_base@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z PROC ; std::_Pair_base<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>::_Pair_base<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *><ShuffleRankWnd::Rank * &,ShuffleRankWnd::Rank * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$_Pair_base@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z ENDP ; std::_Pair_base<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>::_Pair_base<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *><ShuffleRankWnd::Rank * &,ShuffleRankWnd::Rank * &>
_TEXT	ENDS
PUBLIC	??$_Move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z ; std::_Move<ShuffleRankWnd::Rank &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z PROC ; std::_Move<ShuffleRankWnd::Rank &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAURank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z ENDP ; std::_Move<ShuffleRankWnd::Rank &>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$forward@URank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z ; std::forward<ShuffleRankWnd::Rank>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@URank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@URank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z PROC ; std::forward<ShuffleRankWnd::Rank>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@URank@ShuffleRankWnd@@@std@@YA$$QAURank@ShuffleRankWnd@@AAU12@@Z ENDP ; std::forward<ShuffleRankWnd::Rank>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z ; std::_Push_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z PROC ; std::_Push_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Hole$[ebp]
  00006	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00009	53		 push	 ebx

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  0000a	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  0000d	99		 cdq
  0000e	56		 push	 esi
  0000f	2b c2		 sub	 eax, edx
  00011	8b f0		 mov	 esi, eax
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00017	d1 fe		 sar	 esi, 1
  00019	eb 26		 jmp	 SHORT $LN16@Push_heap
$LL3@Push_heap:
  0001b	8b c6		 mov	 eax, esi
  0001d	6b c0 18	 imul	 eax, 24			; 00000018H
  00020	03 c7		 add	 eax, edi
  00022	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00025	3b 53 10	 cmp	 edx, DWORD PTR [ebx+16]
  00028	7e 1c		 jle	 SHORT $LN6@Push_heap

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002a	6b c9 18	 imul	 ecx, 24			; 00000018H
  0002d	50		 push	 eax
  0002e	03 cf		 add	 ecx, edi
  00030	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z
  00035	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00038	99		 cdq
  00039	2b c2		 sub	 eax, edx
  0003b	d1 f8		 sar	 eax, 1

; 2461 : 		_Hole = _Idx;

  0003d	8b ce		 mov	 ecx, esi
  0003f	8b f0		 mov	 esi, eax
$LN16@Push_heap:

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00041	39 4d 10	 cmp	 DWORD PTR __Top$[ebp], ecx
  00044	7c d5		 jl	 SHORT $LL3@Push_heap
$LN6@Push_heap:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00046	6b c9 18	 imul	 ecx, 24			; 00000018H
  00049	53		 push	 ebx
  0004a	03 cf		 add	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 2465 : 	}

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??$_Push_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z ENDP ; std::_Push_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>, COMDAT

; 2617 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2618 : 	while (_First != _Last)

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	39 75 08	 cmp	 DWORD PTR __First$[ebp], esi
  0000a	74 15		 je	 SHORT $LN9@Move_backw
$LL2@Move_backw:

; 2619 : 		*--_Dest = _STD move(*--_Last);

  0000c	83 6d 10 18	 sub	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00010	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00013	83 ee 18	 sub	 esi, 24			; 00000018H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z
  0001c	3b 75 08	 cmp	 esi, DWORD PTR __First$[ebp]
  0001f	75 eb		 jne	 SHORT $LL2@Move_backw
$LN9@Move_backw:

; 2620 : 	return (_Dest);

  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	5e		 pop	 esi

; 2621 : 	}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?Show@ShuffleRankWnd@@QAEXXZ			; ShuffleRankWnd::Show
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
;	COMDAT ?Show@ShuffleRankWnd@@QAEXXZ
_TEXT	SEGMENT
?Show@ShuffleRankWnd@@QAEXXZ PROC			; ShuffleRankWnd::Show, COMDAT
; _this$ = ecx

; 45   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 46   : 	if( !IsShow() )

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00009	84 c0		 test	 al, al
  0000b	75 12		 jne	 SHORT $LN1@Show

; 47   : 	{
; 48   : 		SetState( STATE_FADEIN );

  0000d	6a 02		 push	 2
  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?SetState@ShuffleRankWnd@@IAEXK@Z ; ShuffleRankWnd::SetState

; 49   : 		ShowWnd();

  00016	8b ce		 mov	 ecx, esi
  00018	5e		 pop	 esi
  00019	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
$LN1@Show:
  0001f	5e		 pop	 esi

; 50   : 	}
; 51   : }

  00020	c3		 ret	 0
?Show@ShuffleRankWnd@@QAEXXZ ENDP			; ShuffleRankWnd::Show
_TEXT	ENDS
PUBLIC	?Hide@ShuffleRankWnd@@QAEXXZ			; ShuffleRankWnd::Hide
; Function compile flags: /Ogsp
;	COMDAT ?Hide@ShuffleRankWnd@@QAEXXZ
_TEXT	SEGMENT
?Hide@ShuffleRankWnd@@QAEXXZ PROC			; ShuffleRankWnd::Hide, COMDAT
; _this$ = ecx

; 55   : 	if( m_dwState != STATE_FADEOUT )

  00000	83 b9 70 01 00
	00 04		 cmp	 DWORD PTR [ecx+368], 4
  00007	74 07		 je	 SHORT $LN1@Hide

; 56   : 		SetState( STATE_FADEOUT );

  00009	6a 04		 push	 4
  0000b	e8 00 00 00 00	 call	 ?SetState@ShuffleRankWnd@@IAEXK@Z ; ShuffleRankWnd::SetState
$LN1@Hide:

; 57   : }

  00010	c3		 ret	 0
?Hide@ShuffleRankWnd@@QAEXXZ ENDP			; ShuffleRankWnd::Hide
_TEXT	ENDS
PUBLIC	?OnRender@ShuffleRankWnd@@MAEXXZ		; ShuffleRankWnd::OnRender
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnRender@ShuffleRankWnd@@MAEXXZ
_TEXT	SEGMENT
$T507774 = -16						; size = 4
_iSize$505738 = -12					; size = 4
_iXPos$505736 = -8					; size = 4
_iRank$505741 = -4					; size = 4
?OnRender@ShuffleRankWnd@@MAEXXZ PROC			; ShuffleRankWnd::OnRender, COMDAT
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 139  : 	ioWnd::OnRender();

  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 140  : 
; 141  : 	switch( m_dwState )

  00011	8b 86 70 01 00
	00		 mov	 eax, DWORD PTR [esi+368]
  00017	83 c0 fe	 add	 eax, -2			; fffffffeH
  0001a	83 f8 02	 cmp	 eax, 2
  0001d	0f 87 92 00 00
	00		 ja	 $LN3@OnRender

; 142  : 	{
; 143  : 	case STATE_FADEIN:
; 144  : 	case STATE_VIEW:
; 145  : 	case STATE_FADEOUT:
; 146  : 		{
; 147  : 			int iXPos = GetDerivedPosX();

  00023	8b ce		 mov	 ecx, esi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 148  : 			int iYPos = GetDerivedPosY();

  0002b	8b ce		 mov	 ecx, esi
  0002d	89 45 f8	 mov	 DWORD PTR _iXPos$505736[ebp], eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 149  : 			int iSize = (int)m_vRank.size();

  00036	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0003c	8b f8		 mov	 edi, eax
  0003e	8b c1		 mov	 eax, ecx
  00040	2b 86 60 01 00
	00		 sub	 eax, DWORD PTR [esi+352]
  00046	6a 18		 push	 24			; 00000018H
  00048	99		 cdq
  00049	5b		 pop	 ebx
  0004a	f7 fb		 idiv	 ebx
  0004c	89 45 f4	 mov	 DWORD PTR _iSize$505738[ebp], eax

; 150  : 			
; 151  : 			if( m_vRank.empty() )

  0004f	39 8e 60 01 00
	00		 cmp	 DWORD PTR [esi+352], ecx
  00055	74 5e		 je	 SHORT $LN3@OnRender

; 152  : 				return;
; 153  : 
; 154  : 			for( int iRank = 0; iRank < iSize;  ++iRank )

  00057	33 db		 xor	 ebx, ebx
  00059	89 5d fc	 mov	 DWORD PTR _iRank$505741[ebp], ebx
  0005c	3b c3		 cmp	 eax, ebx
  0005e	7e 55		 jle	 SHORT $LN3@OnRender
$LN5@OnRender:

; 155  : 			{
; 156  : 				if( iRank < iSize-1 )

  00060	8b 45 f4	 mov	 eax, DWORD PTR _iSize$505738[ebp]
  00063	48		 dec	 eax
  00064	39 45 fc	 cmp	 DWORD PTR _iRank$505741[ebp], eax

; 157  : 				{
; 158  : 					OnRankRender( iXPos, iYPos, m_vRank[iRank].iTeamType, m_vRank[iRank].szName, iRank, m_vRank[iRank].iCurrStar, false );

  00067	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
  0006d	7d 04		 jge	 SHORT $LN2@OnRender
  0006f	6a 00		 push	 0

; 159  : 					iYPos += m_iHieght;
; 160  : 				}
; 161  : 				else

  00071	eb 02		 jmp	 SHORT $LN33@OnRender
$LN2@OnRender:

; 162  : 				{
; 163  : 					OnRankRender( iXPos, iYPos, m_vRank[iRank].iTeamType, m_vRank[iRank].szName, iRank, m_vRank[iRank].iCurrStar, true );

  00073	6a 01		 push	 1
$LN33@OnRender:
  00075	03 c3		 add	 eax, ebx
  00077	ff 70 10	 push	 DWORD PTR [eax+16]
  0007a	ff 75 fc	 push	 DWORD PTR _iRank$505741[ebp]
  0007d	83 ec 10	 sub	 esp, 16			; 00000010H
  00080	8b cc		 mov	 ecx, esp
  00082	89 65 f0	 mov	 DWORD PTR $T507774[ebp], esp
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0008c	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
  00092	ff 74 18 14	 push	 DWORD PTR [eax+ebx+20]
  00096	8b ce		 mov	 ecx, esi
  00098	57		 push	 edi
  00099	ff 75 f8	 push	 DWORD PTR _iXPos$505736[ebp]
  0009c	e8 00 00 00 00	 call	 ?OnRankRender@ShuffleRankWnd@@IAEXHHHVioHashString@@HH_N@Z ; ShuffleRankWnd::OnRankRender

; 164  : 					iYPos += m_iHieght;

  000a1	03 be 7c 01 00
	00		 add	 edi, DWORD PTR [esi+380]
  000a7	ff 45 fc	 inc	 DWORD PTR _iRank$505741[ebp]
  000aa	8b 45 fc	 mov	 eax, DWORD PTR _iRank$505741[ebp]
  000ad	83 c3 18	 add	 ebx, 24			; 00000018H
  000b0	3b 45 f4	 cmp	 eax, DWORD PTR _iSize$505738[ebp]
  000b3	7c ab		 jl	 SHORT $LN5@OnRender
$LN3@OnRender:

; 165  : 				}
; 166  : 			}
; 167  : 		}
; 168  : 		break;
; 169  : 	}
; 170  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	c9		 leave
  000b9	c3		 ret	 0
?OnRender@ShuffleRankWnd@@MAEXXZ ENDP			; ShuffleRankWnd::OnRender
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@V?$allocator@URank@ShuffleRankWnd@@@1@@Z ; std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@V?$allocator@URank@ShuffleRankWnd@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@V?$allocator@URank@ShuffleRankWnd@@@1@@Z PROC ; std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@V?$allocator@URank@ShuffleRankWnd@@@1@@Z ENDP ; std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBEIXZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEII@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEII@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 18		 push	 24			; 00000018H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEII@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEPAURank@ShuffleRankWnd@@I@Z ; std::allocator<ShuffleRankWnd::Rank>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEPAURank@ShuffleRankWnd@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEPAURank@ShuffleRankWnd@@I@Z PROC ; std::allocator<ShuffleRankWnd::Rank>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@URank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@IPAU12@@Z ; std::_Allocate<ShuffleRankWnd::Rank>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@URank@ShuffleRankWnd@@@std@@QAEPAURank@ShuffleRankWnd@@I@Z ENDP ; std::allocator<ShuffleRankWnd::Rank>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$08@ioXMLElement@@QBEHAAY08$$CBD@Z ; ioXMLElement::GetIntAttribute_e<9>
EXTRN	__imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioxmlelement.h
;	COMDAT ??$GetIntAttribute_e@$08@ioXMLElement@@QBEHAAY08$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$08@ioXMLElement@@QBEHAAY08$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<9>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@GetIntAttr
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@GetIntAttr
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@GetIntAttr
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@GetIntAttr
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@GetIntAttr
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@GetIntAttr
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@GetIntAttr
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@GetIntAttr
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@GetIntAttr
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@GetIntAttr
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@GetIntAttr
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@GetIntAttr
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@GetIntAttr
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@GetIntAttr
$LN84@GetIntAttr:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@GetIntAttr
$LN85@GetIntAttr:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@GetIntAttr
$LN86@GetIntAttr:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@GetIntAttr
$LN87@GetIntAttr:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@GetIntAttr
$LN89@GetIntAttr:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@GetIntAttr
$LN90@GetIntAttr:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@GetIntAttr
$LN91@GetIntAttr:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@GetIntAttr
$LN92@GetIntAttr:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@GetIntAttr
$LN93@GetIntAttr:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@GetIntAttr
$LN94@GetIntAttr:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@GetIntAttr
$LN95@GetIntAttr:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@GetIntAttr
$LN96@GetIntAttr:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@GetIntAttr:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@GetIntAttr

; 88   : 		return GetIntAttribute(_k);

  00125	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00128	50		 push	 eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  0012f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00132	33 cd		 xor	 ecx, ebp
  00134	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00139	c9		 leave
  0013a	c2 04 00	 ret	 4
??$GetIntAttribute_e@$08@ioXMLElement@@QBEHAAY08$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$06@ioXMLElement@@QBEHAAY06$$CBD@Z ; ioXMLElement::GetIntAttribute_e<7>
; Function compile flags: /Ogsp
;	COMDAT ??$GetIntAttribute_e@$06@ioXMLElement@@QBEHAAY06$$CBD@Z
_TEXT	SEGMENT
__k$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$06@ioXMLElement@@QBEHAAY06$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<7>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 c0 00 00
	00		 je	 $LN96@GetIntAttr@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 f0	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a9 00 00
	00		 je	 $LN95@GetIntAttr@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 f1	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 92 00 00
	00		 je	 $LN94@GetIntAttr@2
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 f2	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	74 7f		 je	 SHORT $LN93@GetIntAttr@2
  0004f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00052	88 55 f3	 mov	 BYTE PTR __k$[ebp+3], dl
  00055	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00058	84 d2		 test	 dl, dl
  0005a	74 6c		 je	 SHORT $LN92@GetIntAttr@2
  0005c	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005f	88 55 f4	 mov	 BYTE PTR __k$[ebp+4], dl
  00062	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00065	84 d2		 test	 dl, dl
  00067	74 59		 je	 SHORT $LN91@GetIntAttr@2
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00070	88 55 f5	 mov	 BYTE PTR __k$[ebp+5], dl
  00073	74 6f		 je	 SHORT $LN1@GetIntAttr@2
  00075	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00078	84 d2		 test	 dl, dl
  0007a	74 40		 je	 SHORT $LN89@GetIntAttr@2
  0007c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0007f	88 55 f7	 mov	 BYTE PTR __k$[ebp+7], dl
  00082	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00085	84 d2		 test	 dl, dl
  00087	74 2d		 je	 SHORT $LN88@GetIntAttr@2
  00089	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008c	88 55 f8	 mov	 BYTE PTR __k$[ebp+8], dl
  0008f	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00092	84 d2		 test	 dl, dl
  00094	74 1a		 je	 SHORT $LN87@GetIntAttr@2
  00096	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  00099	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009c	88 55 f9	 mov	 BYTE PTR __k$[ebp+9], dl
  0009f	84 c0		 test	 al, al
  000a1	74 07		 je	 SHORT $LN86@GetIntAttr@2
  000a3	34 eb		 xor	 al, -21			; ffffffebH
  000a5	88 45 fa	 mov	 BYTE PTR __k$[ebp+10], al
  000a8	eb 3a		 jmp	 SHORT $LN1@GetIntAttr@2
$LN86@GetIntAttr@2:
  000aa	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000ae	eb 34		 jmp	 SHORT $LN1@GetIntAttr@2
$LN87@GetIntAttr@2:
  000b0	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000b4	eb 2e		 jmp	 SHORT $LN1@GetIntAttr@2
$LN88@GetIntAttr@2:
  000b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000ba	eb 28		 jmp	 SHORT $LN1@GetIntAttr@2
$LN89@GetIntAttr@2:
  000bc	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000c0	eb 22		 jmp	 SHORT $LN1@GetIntAttr@2
$LN91@GetIntAttr@2:
  000c2	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000c6	eb 1c		 jmp	 SHORT $LN1@GetIntAttr@2
$LN92@GetIntAttr@2:
  000c8	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000cc	eb 16		 jmp	 SHORT $LN1@GetIntAttr@2
$LN93@GetIntAttr@2:
  000ce	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000d2	eb 10		 jmp	 SHORT $LN1@GetIntAttr@2
$LN94@GetIntAttr@2:
  000d4	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  000d8	eb 0a		 jmp	 SHORT $LN1@GetIntAttr@2
$LN95@GetIntAttr@2:
  000da	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  000de	eb 04		 jmp	 SHORT $LN1@GetIntAttr@2
$LN96@GetIntAttr@2:
  000e0	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr@2:
  000e4	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __k$[ebp], -353637139 ; eaebecedH
  000eb	6a 04		 push	 4
  000ed	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+6], 0
  000f1	58		 pop	 eax
$LL101@GetIntAttr@2:
  000f2	8b c8		 mov	 ecx, eax
  000f4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fa	79 05		 jns	 SHORT $LN111@GetIntAttr@2
  000fc	49		 dec	 ecx
  000fd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00100	41		 inc	 ecx
$LN111@GetIntAttr@2:
  00101	b2 ed		 mov	 dl, -19			; ffffffedH
  00103	2a d1		 sub	 dl, cl
  00105	30 54 05 f0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00109	40		 inc	 eax
  0010a	83 f8 06	 cmp	 eax, 6
  0010d	7c e3		 jl	 SHORT $LL101@GetIntAttr@2

; 88   : 		return GetIntAttribute(_k);

  0010f	8d 45 f0	 lea	 eax, DWORD PTR __k$[ebp]
  00112	50		 push	 eax
  00113	8b ce		 mov	 ecx, esi
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011e	33 cd		 xor	 ecx, ebp
  00120	5e		 pop	 esi
  00121	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00126	c9		 leave
  00127	c2 04 00	 ret	 4
??$GetIntAttribute_e@$06@ioXMLElement@@QBEHAAY06$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<7>
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 18		 push	 24			; 00000018H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 382  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator-
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@YAPAURank@ShuffleRankWnd@@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@YAPAURank@ShuffleRankWnd@@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@YAPAURank@ShuffleRankWnd@@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@YAPAURank@ShuffleRankWnd@@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >
_TEXT	ENDS
PUBLIC	??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z ; std::allocator<ShuffleRankWnd::Rank>::construct<ShuffleRankWnd::Rank &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z$0
__ehfuncinfo$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z
_TEXT	SEGMENT
$T507925 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z PROC ; std::allocator<ShuffleRankWnd::Rank>::construct<ShuffleRankWnd::Rank &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507925[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z
$LN3@construct:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507925[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAURank@ShuffleRankWnd@@@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@AAU23@@Z ENDP ; std::allocator<ShuffleRankWnd::Rank>::construct<ShuffleRankWnd::Rank &>
PUBLIC	??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z
  00012	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00016	83 c6 18	 add	 esi, 24			; 00000018H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z ; std::_Construct<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z
_TEXT	SEGMENT
$T507953 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z PROC ; std::_Construct<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T507953[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z
$LN3@Construct:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507953[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z ENDP ; std::_Construct<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>
PUBLIC	??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$pair@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z ; std::pair<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>::pair<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *><ShuffleRankWnd::Rank * &,ShuffleRankWnd::Rank * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$pair@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$pair@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z PROC ; std::pair<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>::pair<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *><ShuffleRankWnd::Rank * &,ShuffleRankWnd::Rank * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAURank@ShuffleRankWnd@@AAPAU01@@?$pair@PAURank@ShuffleRankWnd@@PAU12@@std@@QAE@AAPAURank@ShuffleRankWnd@@0@Z ENDP ; std::pair<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>::pair<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *><ShuffleRankWnd::Rank * &,ShuffleRankWnd::Rank * &>
_TEXT	ENDS
PUBLIC	??$_Destroy@URank@ShuffleRankWnd@@@std@@YAXPAURank@ShuffleRankWnd@@@Z ; std::_Destroy<ShuffleRankWnd::Rank>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@URank@ShuffleRankWnd@@@std@@YAXPAURank@ShuffleRankWnd@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@URank@ShuffleRankWnd@@@std@@YAXPAURank@ShuffleRankWnd@@@Z PROC ; std::_Destroy<ShuffleRankWnd::Rank>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@URank@ShuffleRankWnd@@@std@@YAXPAURank@ShuffleRankWnd@@@Z ENDP ; std::_Destroy<ShuffleRankWnd::Rank>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z ; std::allocator<ShuffleRankWnd::Rank>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z$0
__ehfuncinfo$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z
_TEXT	SEGMENT
$T508006 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z PROC ; std::allocator<ShuffleRankWnd::Rank>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T508006[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z
$LN3@construct@2:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508006[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@$$QAU34@@Z ENDP ; std::allocator<ShuffleRankWnd::Rank>::construct
PUBLIC	??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z$0
__ehfuncinfo$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	ENDS
;	COMDAT ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z
_TEXT	SEGMENT
__Tmp$ = -36						; size = 24
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z PROC ; std::swap<ShuffleRankWnd::Rank>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 102  : 	_Ty _Tmp = _Move(_Left);

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  0000f	56		 push	 esi
  00010	8d 4d dc	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00019	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001c	89 45 ec	 mov	 DWORD PTR __Tmp$[ebp+16], eax
  0001f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00022	89 45 f0	 mov	 DWORD PTR __Tmp$[ebp+20], eax

; 103  : 	_Left = _Move(_Right);

  00025	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  00028	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	57		 push	 edi
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z

; 104  : 	_Right = _Move(_Tmp);

  00034	8d 45 dc	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00037	50		 push	 eax
  00038	8b cf		 mov	 ecx, edi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00040	8b 45 ec	 mov	 eax, DWORD PTR __Tmp$[ebp+16]

; 105  : 	}

  00043	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0004a	8b 45 f0	 mov	 eax, DWORD PTR __Tmp$[ebp+20]
  0004d	8d 4d dc	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00050	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00059	e8 00 00 00 00	 call	 __EH_epilog3
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Rank@ShuffleRankWnd@@QAE@XZ
__ehhandler$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ENDP ; std::swap<ShuffleRankWnd::Rank>
PUBLIC	??$_Adjust_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z ; std::_Adjust_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z PROC ; std::_Adjust_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2566 : 	_Diff _Top = _Hole;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Hole$[ebp]
  00006	53		 push	 ebx

; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Bottom$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	89 4d 0c	 mov	 DWORD PTR __Top$[ebp], ecx
  00012	8d 74 09 02	 lea	 esi, DWORD PTR [ecx+ecx+2]
  00016	eb 28		 jmp	 SHORT $LN20@Adjust_hea
$LL5@Adjust_hea:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00018	8b c6		 mov	 eax, esi
  0001a	6b c0 18	 imul	 eax, 24			; 00000018H
  0001d	8b 54 38 10	 mov	 edx, DWORD PTR [eax+edi+16]
  00021	3b 54 38 f8	 cmp	 edx, DWORD PTR [eax+edi-8]
  00025	7e 01		 jle	 SHORT $LN2@Adjust_hea

; 2572 : 			--_Idx;

  00027	4e		 dec	 esi
$LN2@Adjust_hea:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00028	8b c6		 mov	 eax, esi
  0002a	6b c9 18	 imul	 ecx, 24			; 00000018H
  0002d	6b c0 18	 imul	 eax, 24			; 00000018H
  00030	03 c7		 add	 eax, edi
  00032	50		 push	 eax
  00033	03 cf		 add	 ecx, edi
  00035	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z

; 2574 : 		_Hole = _Idx;

  0003a	8b ce		 mov	 ecx, esi
  0003c	8d 74 36 02	 lea	 esi, DWORD PTR [esi+esi+2]
$LN20@Adjust_hea:

; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00040	3b f3		 cmp	 esi, ebx
  00042	7c d4		 jl	 SHORT $LL5@Adjust_hea

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  00044	75 17		 jne	 SHORT $LN1@Adjust_hea

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  00046	8b c3		 mov	 eax, ebx
  00048	6b c9 18	 imul	 ecx, 24			; 00000018H
  0004b	6b c0 18	 imul	 eax, 24			; 00000018H
  0004e	8d 44 38 e8	 lea	 eax, DWORD PTR [eax+edi-24]
  00052	50		 push	 eax
  00053	03 cf		 add	 ecx, edi
  00055	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z

; 2580 : 		_Hole = _Bottom - 1;

  0005a	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
$LN1@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  0005d	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00060	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00063	ff 75 0c	 push	 DWORD PTR __Top$[ebp]
  00066	51		 push	 ecx
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ??$_Push_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z ; std::_Push_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx

; 2583 : 	}

  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??$_Adjust_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z ENDP ; std::_Adjust_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$508077 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z PROC ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508077[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2641 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z ENDP ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00$$QAU12@VRankOrder@2@PAH@Z ; std::_Pop_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00$$QAU12@VRankOrder@2@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00$$QAU12@VRankOrder@2@PAH@Z PROC ; std::_Pop_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	*_Dest = _Move(*_First);

  00003	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00009	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z

; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  0000e	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00011	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00014	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00017	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001a	6a 18		 push	 24			; 00000018H
  0001c	59		 pop	 ecx
  0001d	99		 cdq
  0001e	f7 f9		 idiv	 ecx
  00020	50		 push	 eax
  00021	6a 00		 push	 0
  00023	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00026	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z ; std::_Adjust_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
  0002b	83 c4 14	 add	 esp, 20			; 00000014H

; 2595 : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Pop_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00$$QAU12@VRankOrder@2@PAH@Z ENDP ; std::_Pop_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	_xElement$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ParseExtraInfo@ShuffleRankWnd@@MAEXAAVioXMLElement@@@Z ; ShuffleRankWnd::ParseExtraInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
;	COMDAT ?ParseExtraInfo@ShuffleRankWnd@@MAEXAAVioXMLElement@@@Z
_TEXT	SEGMENT
_xElement$GSCopy$ = -24					; size = 4
__k$508228 = -20					; size = 7
__k$508103 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_xElement$ = 8						; size = 4
?ParseExtraInfo@ShuffleRankWnd@@MAEXAAVioXMLElement@@@Z PROC ; ShuffleRankWnd::ParseExtraInfo, COMDAT
; _this$ = ecx

; 21   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b d9		 mov	 ebx, ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _xElement$[ebp]

; 22   : 	m_dwFadeTime = xElement.GetIntAttribute_e( "FadeTime" );

  00018	6a 02		 push	 2

; 23   : 	m_iHieght    = xElement.GetIntAttribute_e( "Height" );

  0001a	89 4d e8	 mov	 DWORD PTR _xElement$GSCopy$[ebp], ecx
  0001d	c7 45 ec ab 8d
	8f 8f		 mov	 DWORD PTR __k$508103[ebp], -1886417493 ; 8f8f8dabH
  00024	c7 45 f0 b9 85
	86 8f		 mov	 DWORD PTR __k$508103[ebp+4], -1887009351 ; 8f8685b9H
  0002b	8d 45 ec	 lea	 eax, DWORD PTR __k$508103[ebp]
  0002e	c6 45 f4 00	 mov	 BYTE PTR __k$508103[ebp+8], 0
  00032	5a		 pop	 edx
  00033	be ed ec eb ea	 mov	 esi, -353637139		; eaebecedH
$LL106@ParseExtra:

; 22   : 	m_dwFadeTime = xElement.GetIntAttribute_e( "FadeTime" );

  00038	31 30		 xor	 DWORD PTR [eax], esi
  0003a	83 c0 04	 add	 eax, 4
  0003d	4a		 dec	 edx
  0003e	75 f8		 jne	 SHORT $LL106@ParseExtra
  00040	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z
  00046	8d 45 ec	 lea	 eax, DWORD PTR __k$508103[ebp]
  00049	50		 push	 eax
  0004a	ff d7		 call	 edi

; 23   : 	m_iHieght    = xElement.GetIntAttribute_e( "Height" );

  0004c	c7 45 ec a5 89
	82 8d		 mov	 DWORD PTR __k$508228[ebp], -1920824923 ; 8d8289a5H
  00053	31 75 ec	 xor	 DWORD PTR __k$508228[ebp], esi
  00056	6a 04		 push	 4
  00058	89 83 78 01 00
	00		 mov	 DWORD PTR [ebx+376], eax
  0005e	66 c7 45 f0 85
	98		 mov	 WORD PTR __k$508228[ebp+4], 39045 ; 00009885H
  00064	c6 45 f2 00	 mov	 BYTE PTR __k$508228[ebp+6], 0
  00068	5e		 pop	 esi
$LL209@ParseExtra:
  00069	8b c6		 mov	 eax, esi
  0006b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00070	79 05		 jns	 SHORT $LN223@ParseExtra
  00072	48		 dec	 eax
  00073	83 c8 fc	 or	 eax, -4			; fffffffcH
  00076	40		 inc	 eax
$LN223@ParseExtra:
  00077	b1 ed		 mov	 cl, -19			; ffffffedH
  00079	2a c8		 sub	 cl, al
  0007b	30 4c 35 ec	 xor	 BYTE PTR __k$508228[ebp+esi], cl
  0007f	46		 inc	 esi
  00080	83 fe 06	 cmp	 esi, 6
  00083	7c e4		 jl	 SHORT $LL209@ParseExtra
  00085	8b 4d e8	 mov	 ecx, DWORD PTR _xElement$GSCopy$[ebp]
  00088	8d 45 ec	 lea	 eax, DWORD PTR __k$508228[ebp]
  0008b	50		 push	 eax
  0008c	ff d7		 call	 edi

; 24   : }

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	89 83 7c 01 00
	00		 mov	 DWORD PTR [ebx+380], eax
  00099	33 cd		 xor	 ecx, ebp
  0009b	5b		 pop	 ebx
  0009c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a1	c9		 leave
  000a2	c2 04 00	 ret	 4
?ParseExtraInfo@ShuffleRankWnd@@MAEXAAVioXMLElement@@@Z ENDP ; ShuffleRankWnd::ParseExtraInfo
_TEXT	ENDS
PUBLIC	??0?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QAE@PAURank@ShuffleRankWnd@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z
_TEXT	SEGMENT
$T508422 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T508422[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z
$LN7@Cons_val:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508422[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank &>
PUBLIC	??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$508442 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z PROC ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508442[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00@Z ENDP ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@ABU34@@Z ; std::allocator<ShuffleRankWnd::Rank>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@ABU34@@Z PROC ; std::allocator<ShuffleRankWnd::Rank>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z ; std::_Construct<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@ABU34@@Z ENDP ; std::allocator<ShuffleRankWnd::Rank>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@@Z ; std::allocator<ShuffleRankWnd::Rank>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@@Z PROC ; std::allocator<ShuffleRankWnd::Rank>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@URank@ShuffleRankWnd@@@std@@QAEXPAURank@ShuffleRankWnd@@@Z ENDP ; std::allocator<ShuffleRankWnd::Rank>::destroy
_TEXT	ENDS
PUBLIC	??$iter_swap@PAURank@ShuffleRankWnd@@PAU12@@std@@YAXPAURank@ShuffleRankWnd@@0@Z ; std::iter_swap<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PAURank@ShuffleRankWnd@@PAU12@@std@@YAXPAURank@ShuffleRankWnd@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAURank@ShuffleRankWnd@@PAU12@@std@@YAXPAURank@ShuffleRankWnd@@0@Z PROC ; std::iter_swap<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2135 : 	}

  00003	5d		 pop	 ebp

; 2134 : 	swap(*_Left, *_Right);

  00004	e9 00 00 00 00	 jmp	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
??$iter_swap@PAURank@ShuffleRankWnd@@PAU12@@std@@YAXPAURank@ShuffleRankWnd@@0@Z ENDP ; std::iter_swap<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z ; std::_Make_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z$0
__ehfuncinfo$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z
_TEXT	SEGMENT
__Val$507084 = -36					; size = 24
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Bottom$ = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z PROC ; std::_Make_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 2659 : 	_Diff _Bottom = _Last - _First;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00012	2b c3		 sub	 eax, ebx
  00014	99		 cdq
  00015	6a 18		 push	 24			; 00000018H
  00017	59		 pop	 ecx
  00018	f7 f9		 idiv	 ecx
  0001a	89 45 0c	 mov	 DWORD PTR __Bottom$[ebp], eax

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  0001d	99		 cdq
  0001e	2b c2		 sub	 eax, edx
  00020	8b f8		 mov	 edi, eax
  00022	d1 ff		 sar	 edi, 1
  00024	85 ff		 test	 edi, edi
  00026	7e 4e		 jle	 SHORT $LN1@Make_heap

; 2659 : 	_Diff _Bottom = _Last - _First;

  00028	8b c7		 mov	 eax, edi
  0002a	6b c0 18	 imul	 eax, 24			; 00000018H
  0002d	8d 74 18 14	 lea	 esi, DWORD PTR [eax+ebx+20]
$LN2@Make_heap:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;

  00031	83 ee 18	 sub	 esi, 24			; 00000018H

; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00034	8d 46 ec	 lea	 eax, DWORD PTR [esi-20]
  00037	50		 push	 eax
  00038	8d 4d dc	 lea	 ecx, DWORD PTR __Val$507084[ebp]
  0003b	4f		 dec	 edi
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00042	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00045	89 45 ec	 mov	 DWORD PTR __Val$507084[ebp+16], eax
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	89 45 f0	 mov	 DWORD PTR __Val$507084[ebp+20], eax

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  0004d	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00050	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	8d 45 dc	 lea	 eax, DWORD PTR __Val$507084[ebp]
  00057	50		 push	 eax
  00058	ff 75 0c	 push	 DWORD PTR __Bottom$[ebp]
  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@HH$$QAU12@VRankOrder@2@@Z ; std::_Adjust_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>

; 2666 : 		}

  00062	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	8d 4d dc	 lea	 ecx, DWORD PTR __Val$507084[ebp]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00072	85 ff		 test	 edi, edi
  00074	7f bb		 jg	 SHORT $LN2@Make_heap
$LN1@Make_heap:

; 2667 : 	}

  00076	e8 00 00 00 00	 call	 __EH_epilog3
  0007b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Val$507084[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Rank@ShuffleRankWnd@@QAE@XZ
__ehhandler$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z ENDP ; std::_Make_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
PUBLIC	??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ; std::_Insertion_sort1<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder,ShuffleRankWnd::Rank>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z$0
__ehfuncinfo$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
_TEXT	SEGMENT
__Val$507119 = -36					; size = 24
__$EHRec$ = -12						; size = 12
__First1$507129 = 8					; size = 4
__First$ = 8						; size = 4
__Cat$508522 = 12					; size = 1
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z PROC ; std::_Insertion_sort1<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder,ShuffleRankWnd::Rank>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 3651 : 	if (_First != _Last)

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00012	0f 84 a4 00 00
	00		 je	 $LN6@Insertion_

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00018	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0001b	e9 93 00 00 00	 jmp	 $LN46@Insertion_
$LL7@Insertion_:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  00020	56		 push	 esi
  00021	8d 4d dc	 lea	 ecx, DWORD PTR __Val$507119[ebp]
  00024	8b de		 mov	 ebx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00032	89 45 ec	 mov	 DWORD PTR __Val$507119[ebp+16], eax
  00035	89 4d f0	 mov	 DWORD PTR __Val$507119[ebp+20], ecx
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  0003c	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  0003f	7e 2b		 jle	 SHORT $LN5@Insertion_

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  00041	ff 75 0c	 push	 DWORD PTR __Cat$508522[ebp]
  00044	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00047	50		 push	 eax
  00048	56		 push	 esi
  00049	57		 push	 edi
  0004a	e8 00 00 00 00	 call	 ??$_Move_backward@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>
  0004f	83 c4 10	 add	 esp, 16			; 00000010H

; 3660 : 				*_First = _Move(_Val);

  00052	8d 45 dc	 lea	 eax, DWORD PTR __Val$507119[ebp]
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  0005e	8b 45 ec	 mov	 eax, DWORD PTR __Val$507119[ebp+16]
  00061	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00064	8b 45 f0	 mov	 eax, DWORD PTR __Val$507119[ebp+20]
  00067	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 3661 : 				}
; 3662 : 			else

  0006a	eb 37		 jmp	 SHORT $LN35@Insertion_
$LN5@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;

  0006c	89 75 08	 mov	 DWORD PTR __First1$507129[ebp], esi
$LL3@Insertion_:

; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  0006f	83 6d 08 18	 sub	 DWORD PTR __First1$507129[ebp], 24 ; 00000018H
  00073	8b 4d 08	 mov	 ecx, DWORD PTR __First1$507129[ebp]
  00076	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  00079	8b cb		 mov	 ecx, ebx
  0007b	7e 10		 jle	 SHORT $LN28@Insertion_
  0007d	ff 75 08	 push	 DWORD PTR __First1$507129[ebp]
  00080	e8 00 00 00 00	 call	 ??4Rank@ShuffleRankWnd@@QAEAAU01@ABU01@@Z
  00085	8b 5d 08	 mov	 ebx, DWORD PTR __First1$507129[ebp]
  00088	8b 45 ec	 mov	 eax, DWORD PTR __Val$507119[ebp+16]
  0008b	eb e2		 jmp	 SHORT $LL3@Insertion_

; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

$LN28@Insertion_:

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  0008d	8d 45 dc	 lea	 eax, DWORD PTR __Val$507119[ebp]
  00090	50		 push	 eax
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00097	8b 45 ec	 mov	 eax, DWORD PTR __Val$507119[ebp+16]
  0009a	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0009d	8b 45 f0	 mov	 eax, DWORD PTR __Val$507119[ebp+20]
  000a0	89 43 14	 mov	 DWORD PTR [ebx+20], eax
$LN35@Insertion_:

; 3669 : 				}
; 3670 : 			}

  000a3	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 4d dc	 lea	 ecx, DWORD PTR __Val$507119[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000b0	83 c6 18	 add	 esi, 24			; 00000018H
$LN46@Insertion_:

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  000b3	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  000b6	0f 85 64 ff ff
	ff		 jne	 $LL7@Insertion_
$LN6@Insertion_:

; 3671 : 	}

  000bc	e8 00 00 00 00	 call	 __EH_epilog3
  000c1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Val$507119[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Rank@ShuffleRankWnd@@QAE@XZ
__ehhandler$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ENDP ; std::_Insertion_sort1<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder,ShuffleRankWnd::Rank>
PUBLIC	??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z
_TEXT	SEGMENT
$T508579 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T508579[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@2
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0Rank@ShuffleRankWnd@@QAE@ABU01@@Z
$LN7@Cons_val@2:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508579[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank>
PUBLIC	??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z PROC ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  00011	7e 09		 jle	 SHORT $LN9@Med3

; 3685 : 		_STD iter_swap(_Mid, _First);

  00013	57		 push	 edi
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  0001a	59		 pop	 ecx
  0001b	59		 pop	 ecx
$LN9@Med3:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0001f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00022	3b 4e 10	 cmp	 ecx, DWORD PTR [esi+16]
  00025	7e 09		 jle	 SHORT $LN14@Med3

; 3687 : 		_STD iter_swap(_Last, _Mid);

  00027	56		 push	 esi
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  0002e	59		 pop	 ecx
  0002f	59		 pop	 ecx
$LN14@Med3:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00030	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00033	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  00036	7e 09		 jle	 SHORT $LN19@Med3

; 3689 : 		_STD iter_swap(_Mid, _First);

  00038	57		 push	 edi
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  0003f	59		 pop	 ecx
  00040	59		 pop	 ecx
$LN19@Med3:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 3690 : 	}

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ENDP ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ; std::_Pop_heap_0<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z$0
__ehfuncinfo$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
_TEXT	SEGMENT
__Val$ = -36						; size = 24
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z PROC ; std::_Pop_heap_0<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000f	83 c6 e8	 add	 esi, -24		; ffffffe8H
  00012	56		 push	 esi
  00013	8d 4d dc	 lea	 ecx, DWORD PTR __Val$[ebp]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	89 45 ec	 mov	 DWORD PTR __Val$[ebp+16], eax
  00022	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00025	89 45 f0	 mov	 DWORD PTR __Val$[ebp+20], eax
  00028	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  0002c	6a 00		 push	 0
  0002e	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00031	8d 45 dc	 lea	 eax, DWORD PTR __Val$[ebp]
  00034	50		 push	 eax
  00035	56		 push	 esi
  00036	56		 push	 esi
  00037	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0003a	e8 00 00 00 00	 call	 ??$_Pop_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00$$QAU12@VRankOrder@2@PAH@Z ; std::_Pop_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>

; 2605 : 	}

  0003f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	83 c4 18	 add	 esp, 24			; 00000018H
  00046	8d 4d dc	 lea	 ecx, DWORD PTR __Val$[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Val$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Rank@ShuffleRankWnd@@QAE@XZ
__ehhandler$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ENDP ; std::_Pop_heap_0<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
PUBLIC	?begin@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@XZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::end
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@ABU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@ABU23@@Z ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@ABU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@ABU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z ; std::_Construct<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@ABU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>
_TEXT	ENDS
PUBLIC	??$make_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::make_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$make_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z PROC ; std::make_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	6a 18		 push	 24			; 00000018H
  0000b	99		 cdq
  0000c	59		 pop	 ecx
  0000d	f7 f9		 idiv	 ecx
  0000f	83 f8 01	 cmp	 eax, 1
  00012	7e 15		 jle	 SHORT $LN1@make_heap

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001b	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Make_heap@PAURank@ShuffleRankWnd@@HU12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@PAH0@Z ; std::_Make_heap<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
  00026	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:

; 2678 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$make_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ENDP ; std::make_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::_Insertion_sort<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
;	COMDAT ??$_Insertion_sort@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z PROC ; std::_Insertion_sort<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ; std::_Insertion_sort1<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder,ShuffleRankWnd::Rank>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ENDP ; std::_Insertion_sort<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@@Z ; std::_Dest_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@@Z PROC ; std::_Dest_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@@Z ENDP ; std::_Dest_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank>
_TEXT	ENDS
PUBLIC	??$_Median@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Median<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Median@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z PROC ; std::_Median<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3696 : 	if (40 < _Last - _First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b c3		 mov	 eax, ebx
  0000d	2b c1		 sub	 eax, ecx
  0000f	6a 18		 push	 24			; 00000018H
  00011	99		 cdq
  00012	5e		 pop	 esi
  00013	f7 fe		 idiv	 esi
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	7e 68		 jle	 SHORT $LN2@Median

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;

  0001a	40		 inc	 eax
  0001b	99		 cdq
  0001c	83 e2 07	 and	 edx, 7
  0001f	03 c2		 add	 eax, edx
  00021	57		 push	 edi

; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00022	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00025	c1 f8 03	 sar	 eax, 3
  00028	8b f8		 mov	 edi, eax
  0002a	8b f0		 mov	 esi, eax
  0002c	6b ff 30	 imul	 edi, 48			; 00000030H
  0002f	6b f6 18	 imul	 esi, 24			; 00000018H
  00032	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00035	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00038	52		 push	 edx
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	89 45 08	 mov	 DWORD PTR tv200[ebp], eax
  0003e	e8 00 00 00 00	 call	 ??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00043	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00046	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00049	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	2b c6		 sub	 eax, esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  00056	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00059	89 5d 10	 mov	 DWORD PTR tv203[ebp], ebx
  0005c	29 75 10	 sub	 DWORD PTR tv203[ebp], esi
  0005f	53		 push	 ebx
  00060	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00063	2b df		 sub	 ebx, edi
  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 ??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0006b	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006e	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00071	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00074	ff 75 08	 push	 DWORD PTR tv200[ebp]
  00077	e8 00 00 00 00	 call	 ??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
  0007c	83 c4 40	 add	 esp, 64			; 00000040H
  0007f	5f		 pop	 edi

; 3703 : 		}
; 3704 : 	else

  00080	eb 10		 jmp	 SHORT $LN1@Median
$LN2@Median:

; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  00082	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00085	53		 push	 ebx
  00086	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ??$_Med3@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Med3<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Median:
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 3706 : 	}

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
??$_Median@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ENDP ; std::_Median<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::_Pop_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z PROC ; std::_Pop_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ; std::_Pop_heap_0<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pop_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ENDP ; std::_Pop_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ShuffleRankWnd::Rank> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ShuffleRankWnd::Rank> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 18	 add	 esi, 24			; 00000018H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ShuffleRankWnd::Rank> >
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YA?AU?$pair@PAURank@ShuffleRankWnd@@PAU12@@0@PAURank@ShuffleRankWnd@@0VRankOrder@3@@Z ; std::_Unguarded_partition<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YA?AU?$pair@PAURank@ShuffleRankWnd@@PAU12@@0@PAURank@ShuffleRankWnd@@0VRankOrder@3@@Z
_TEXT	SEGMENT
__Glast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YA?AU?$pair@PAURank@ShuffleRankWnd@@PAU12@@0@PAURank@ShuffleRankWnd@@0VRankOrder@3@@Z PROC ; std::_Unguarded_partition<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00004	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c7		 sub	 eax, edi
  00011	6a 18		 push	 24			; 00000018H
  00013	5e		 pop	 esi
  00014	99		 cdq
  00015	f7 fe		 idiv	 esi

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  00017	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001a	83 c1 e8	 add	 ecx, -24		; ffffffe8H
  0001d	51		 push	 ecx
  0001e	99		 cdq
  0001f	2b c2		 sub	 eax, edx
  00021	8b f0		 mov	 esi, eax
  00023	d1 fe		 sar	 esi, 1
  00025	6b f6 18	 imul	 esi, 24			; 00000018H
  00028	03 f7		 add	 esi, edi
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ??$_Median@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@00VRankOrder@2@@Z ; std::_Median<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  00034	8d 5e 18	 lea	 ebx, DWORD PTR [esi+24]
  00037	eb 0f		 jmp	 SHORT $LN100@Unguarded_
$LL27@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00039	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  0003c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0003f	3b c8		 cmp	 ecx, eax
  00041	7c 09		 jl	 SHORT $LN94@Unguarded_
  00043	7f 07		 jg	 SHORT $LN94@Unguarded_

; 3721 : 		--_Pfirst;

  00045	83 ee 18	 sub	 esi, 24			; 00000018H
$LN100@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00048	3b fe		 cmp	 edi, esi
  0004a	72 ed		 jb	 SHORT $LL27@Unguarded_
$LN94@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  0004c	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0004f	73 14		 jae	 SHORT $LN96@Unguarded_
  00051	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
$LL25@Unguarded_:
  00054	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00057	3b c8		 cmp	 ecx, eax
  00059	7c 0a		 jl	 SHORT $LN96@Unguarded_
  0005b	7f 08		 jg	 SHORT $LN96@Unguarded_

; 3725 : 		++_Plast;

  0005d	83 c3 18	 add	 ebx, 24			; 00000018H
  00060	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00063	72 ef		 jb	 SHORT $LL25@Unguarded_
$LN96@Unguarded_:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;

  00065	8b fb		 mov	 edi, ebx

; 3728 : 	_RanIt _Glast = _Pfirst;

  00067	89 75 fc	 mov	 DWORD PTR __Glast$[ebp], esi

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  0006a	eb 1d		 jmp	 SHORT $LN102@Unguarded_
$LL21@Unguarded_:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  0006c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006f	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00072	3b c8		 cmp	 ecx, eax
  00074	7c 10		 jl	 SHORT $LN20@Unguarded_

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  00076	7f 3d		 jg	 SHORT $LN97@Unguarded_

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  00078	8b c3		 mov	 eax, ebx
  0007a	57		 push	 edi
  0007b	83 c3 18	 add	 ebx, 24			; 00000018H
  0007e	50		 push	 eax
$LN104@Unguarded_:
  0007f	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  00084	59		 pop	 ecx
  00085	59		 pop	 ecx
$LN20@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00086	83 c7 18	 add	 edi, 24			; 00000018H
$LN102@Unguarded_:
  00089	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0008c	72 de		 jb	 SHORT $LL21@Unguarded_

; 3739 : 		for (; _First < _Glast; --_Glast)

  0008e	eb 25		 jmp	 SHORT $LN97@Unguarded_
$LL99@Unguarded_:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  00090	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  00093	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]
  00096	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00099	3b c8		 cmp	 ecx, eax
  0009b	7c 14		 jl	 SHORT $LN13@Unguarded_

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  0009d	7f 1e		 jg	 SHORT $LN98@Unguarded_

; 3739 : 		for (; _First < _Glast; --_Glast)

  0009f	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  000a2	83 c0 e8	 add	 eax, -24		; ffffffe8H

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  000a5	83 ee 18	 sub	 esi, 24			; 00000018H
  000a8	50		 push	 eax
  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  000af	59		 pop	 ecx
  000b0	59		 pop	 ecx
$LN13@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000b1	83 6d fc 18	 sub	 DWORD PTR __Glast$[ebp], 24 ; 00000018H
$LN97@Unguarded_:
  000b5	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  000b8	3b 55 fc	 cmp	 edx, DWORD PTR __Glast$[ebp]
  000bb	72 d3		 jb	 SHORT $LL99@Unguarded_
$LN98@Unguarded_:

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  000bd	39 55 fc	 cmp	 DWORD PTR __Glast$[ebp], edx
  000c0	75 1f		 jne	 SHORT $LN6@Unguarded_
  000c2	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000c5	74 50		 je	 SHORT $LN88@Unguarded_

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  000c7	3b df		 cmp	 ebx, edi
  000c9	74 09		 je	 SHORT $LN70@Unguarded_

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  000cb	53		 push	 ebx
  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  000d2	59		 pop	 ecx
  000d3	59		 pop	 ecx
$LN70@Unguarded_:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  000d4	57		 push	 edi
  000d5	56		 push	 esi
  000d6	83 c3 18	 add	 ebx, 24			; 00000018H
  000d9	83 c6 18	 add	 esi, 24			; 00000018H
  000dc	83 c7 18	 add	 edi, 24			; 00000018H
  000df	eb 21		 jmp	 SHORT $LN101@Unguarded_
$LN6@Unguarded_:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  000e1	83 6d fc 18	 sub	 DWORD PTR __Glast$[ebp], 24 ; 00000018H
  000e5	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000e8	75 24		 jne	 SHORT $LN3@Unguarded_
  000ea	83 ee 18	 sub	 esi, 24			; 00000018H
  000ed	39 75 fc	 cmp	 DWORD PTR __Glast$[ebp], esi
  000f0	74 0b		 je	 SHORT $LN74@Unguarded_

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  000f2	56		 push	 esi
  000f3	ff 75 fc	 push	 DWORD PTR __Glast$[ebp]
  000f6	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  000fb	59		 pop	 ecx
  000fc	59		 pop	 ecx
$LN74@Unguarded_:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  000fd	83 eb 18	 sub	 ebx, 24			; 00000018H
  00100	53		 push	 ebx
  00101	56		 push	 esi
$LN101@Unguarded_:
  00102	e8 00 00 00 00	 call	 ??$swap@URank@ShuffleRankWnd@@@std@@YAXAAURank@ShuffleRankWnd@@0@Z ; std::swap<ShuffleRankWnd::Rank>
  00107	59		 pop	 ecx
  00108	59		 pop	 ecx

; 3761 : 			}
; 3762 : 		else

  00109	e9 7b ff ff ff	 jmp	 $LN102@Unguarded_
$LN3@Unguarded_:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  0010e	ff 75 fc	 push	 DWORD PTR __Glast$[ebp]
  00111	57		 push	 edi

; 3764 : 		}

  00112	e9 68 ff ff ff	 jmp	 $LN104@Unguarded_
$LN88@Unguarded_:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  00117	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0011a	5f		 pop	 edi
  0011b	89 30		 mov	 DWORD PTR [eax], esi
  0011d	5e		 pop	 esi
  0011e	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00121	5b		 pop	 ebx

; 3765 : 	}

  00122	c9		 leave
  00123	c3		 ret	 0
??$_Unguarded_partition@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YA?AU?$pair@PAURank@ShuffleRankWnd@@PAU12@@0@PAURank@ShuffleRankWnd@@0VRankOrder@3@@Z ENDP ; std::_Unguarded_partition<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank>
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 36		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@U34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank>
  0002a	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 18	 add	 esi, 24			; 00000018H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0b		 jmp	 SHORT $LN32@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00043	83 c6 18	 add	 esi, 24			; 00000018H
$LN32@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00046	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00049	75 f0		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00054	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00057	e8 00 00 00 00	 call	 __EH_epilog3
  0005c	c3		 ret	 0
$LN31@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank>
PUBLIC	??$_Sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::_Sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z PROC ; std::_Sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b c1		 mov	 eax, ecx
  0000c	6a 18		 push	 24			; 00000018H
  0000e	99		 cdq
  0000f	5f		 pop	 edi
  00010	f7 ff		 idiv	 edi
  00012	83 f8 01	 cmp	 eax, 1
  00015	7e 29		 jle	 SHORT $LN1@Sort_heap
  00017	8b f9		 mov	 edi, ecx
$LL3@Sort_heap:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00019	6a 00		 push	 0
  0001b	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00021	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00024	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAURank@ShuffleRankWnd@@U12@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ; std::_Pop_heap_0<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank,ShuffleRankWnd::RankOrder>
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	83 ef 18	 sub	 edi, 24			; 00000018H
  0002f	8b c7		 mov	 eax, edi
  00031	6a 18		 push	 24			; 00000018H
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	83 6d 0c 18	 sub	 DWORD PTR __Last$[ebp], 24 ; 00000018H
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	7f d9		 jg	 SHORT $LL3@Sort_heap
$LN1@Sort_heap:
  00040	5f		 pop	 edi

; 2703 : 	}

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$_Sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ENDP ; std::_Sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z ; std::_Destroy_range<std::allocator<ShuffleRankWnd::Rank> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ShuffleRankWnd::Rank> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN24@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 18	 add	 esi, 24			; 00000018H
$LN24@Destroy_ra@2:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@2
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAXPAURank@ShuffleRankWnd@@0AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ShuffleRankWnd::Rank> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z ; std::_Uninitialized_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z
_TEXT	SEGMENT
__Cat$509088 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z PROC ; std::_Uninitialized_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509088[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@U12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z ENDP ; std::_Uninitialized_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank> >
_TEXT	ENDS
PUBLIC	??$sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z PROC ; std::sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::_Sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2713 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ENDP ; std::sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXPAURank@ShuffleRankWnd@@0@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXPAURank@ShuffleRankWnd@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXPAURank@ShuffleRankWnd@@0@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN26@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 18	 add	 esi, 24			; 00000018H
$LN26@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXPAURank@ShuffleRankWnd@@0@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAURank@ShuffleRankWnd@@@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEPAURank@ShuffleRankWnd@@PAU23@00@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Umove<ShuffleRankWnd::Rank *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAURank@ShuffleRankWnd@@@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEPAURank@ShuffleRankWnd@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAURank@ShuffleRankWnd@@@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEPAURank@ShuffleRankWnd@@PAU23@00@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Umove<ShuffleRankWnd::Rank *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z ; std::_Uninitialized_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAURank@ShuffleRankWnd@@@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEPAURank@ShuffleRankWnd@@PAU23@00@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Umove<ShuffleRankWnd::Rank *>
_TEXT	ENDS
PUBLIC	??$_Sort@PAURank@ShuffleRankWnd@@HVRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0HVRankOrder@2@@Z ; std::_Sort<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAURank@ShuffleRankWnd@@HVRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0HVRankOrder@2@@Z
_TEXT	SEGMENT
__Mid$506726 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAURank@ShuffleRankWnd@@HVRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0HVRankOrder@2@@Z PROC ; std::_Sort<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::RankOrder>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00006	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000d	8b c7		 mov	 eax, edi
  0000f	2b c3		 sub	 eax, ebx
  00011	6a 18		 push	 24			; 00000018H
  00013	99		 cdq
  00014	59		 pop	 ecx
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	0f 8e 9c 00 00
	00		 jle	 $LN22@Sort
  00020	56		 push	 esi
  00021	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL7@Sort:
  00024	85 f6		 test	 esi, esi
  00026	7e 75		 jle	 SHORT $LN6@Sort

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Mid$506726[ebp]
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YA?AU?$pair@PAURank@ShuffleRankWnd@@PAU12@@0@PAURank@ShuffleRankWnd@@0VRankOrder@3@@Z ; std::_Unguarded_partition<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00036	8b c6		 mov	 eax, esi
  00038	99		 cdq
  00039	2b c2		 sub	 eax, edx
  0003b	d1 f8		 sar	 eax, 1
  0003d	8b f0		 mov	 esi, eax
  0003f	99		 cdq
  00040	2b c2		 sub	 eax, edx
  00042	d1 f8		 sar	 eax, 1
  00044	03 f0		 add	 esi, eax
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00049	8b c7		 mov	 eax, edi
  0004b	2b 45 fc	 sub	 eax, DWORD PTR __Mid$506726[ebp+4]
  0004e	6a 18		 push	 24			; 00000018H
  00050	99		 cdq
  00051	59		 pop	 ecx
  00052	f7 f9		 idiv	 ecx
  00054	6a 18		 push	 24			; 00000018H
  00056	8b c8		 mov	 ecx, eax
  00058	8b 45 f8	 mov	 eax, DWORD PTR __Mid$506726[ebp]
  0005b	2b c3		 sub	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	99		 cdq
  0005f	f7 fb		 idiv	 ebx

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00061	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00064	56		 push	 esi
  00065	3b c1		 cmp	 eax, ecx
  00067	7d 13		 jge	 SHORT $LN5@Sort
  00069	ff 75 f8	 push	 DWORD PTR __Mid$506726[ebp]
  0006c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Sort@PAURank@ShuffleRankWnd@@HVRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0HVRankOrder@2@@Z ; std::_Sort<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::RankOrder>

; 3782 : 			_First = _Mid.second;

  00074	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$506726[ebp+4]
  00077	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx

; 3783 : 			}
; 3784 : 		else

  0007a	eb 0f		 jmp	 SHORT $LN23@Sort
$LN5@Sort:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0007c	57		 push	 edi
  0007d	ff 75 fc	 push	 DWORD PTR __Mid$506726[ebp+4]
  00080	e8 00 00 00 00	 call	 ??$_Sort@PAURank@ShuffleRankWnd@@HVRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0HVRankOrder@2@@Z ; std::_Sort<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::RankOrder>

; 3787 : 			_Last = _Mid.first;

  00085	8b 7d f8	 mov	 edi, DWORD PTR __Mid$506726[ebp]
  00088	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LN23@Sort:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	8b c7		 mov	 eax, edi
  00090	2b c3		 sub	 eax, ebx
  00092	6a 18		 push	 24			; 00000018H
  00094	99		 cdq
  00095	59		 pop	 ecx
  00096	f7 f9		 idiv	 ecx
  00098	83 f8 20	 cmp	 eax, 32			; 00000020H
  0009b	7f 87		 jg	 SHORT $LL7@Sort
$LN6@Sort:
  0009d	5e		 pop	 esi

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  0009e	83 f8 20	 cmp	 eax, 32			; 00000020H
  000a1	7e 19		 jle	 SHORT $LN22@Sort

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  000a3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000a6	57		 push	 edi
  000a7	53		 push	 ebx
  000a8	e8 00 00 00 00	 call	 ??$make_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::make_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  000ad	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b0	57		 push	 edi
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 ??$_Sort_heap@PAURank@ShuffleRankWnd@@VRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@@Z ; std::_Sort_heap<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder>
  000b7	83 c4 18	 add	 esp, 24			; 00000018H
  000ba	eb 14		 jmp	 SHORT $LN16@Sort
$LN22@Sort:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  000bc	83 f8 01	 cmp	 eax, 1
  000bf	7e 0f		 jle	 SHORT $LN16@Sort

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  000c1	6a 00		 push	 0
  000c3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c6	57		 push	 edi
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAURank@ShuffleRankWnd@@VRankOrder@2@U12@@std@@YAXPAURank@ShuffleRankWnd@@0VRankOrder@2@0@Z ; std::_Insertion_sort1<ShuffleRankWnd::Rank *,ShuffleRankWnd::RankOrder,ShuffleRankWnd::Rank>
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@Sort:
  000d0	5f		 pop	 edi
  000d1	5b		 pop	 ebx

; 3798 : 	}

  000d2	c9		 leave
  000d3	c3		 ret	 0
??$_Sort@PAURank@ShuffleRankWnd@@HVRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0HVRankOrder@2@@Z ENDP ; std::_Sort<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	?erase@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@0@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T509364 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$509295 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@0@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 38		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$509295[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAURank@ShuffleRankWnd@@PAU12@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T509364[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 12		 je	 SHORT $LN36@erase
$LL55@erase:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T509364[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003e	83 45 fc 18	 add	 DWORD PTR $T509364[ebp], 24 ; 00000018H
  00042	39 7d fc	 cmp	 DWORD PTR $T509364[ebp], edi
  00045	75 ee		 jne	 SHORT $LL55@erase
$LN36@erase:

; 1211 : 			this->_Mylast = _Ptr;

  00047	5f		 pop	 edi
  00048	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004b	5b		 pop	 ebx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	5e		 pop	 esi

; 1214 : 		}

  00050	c9		 leave
  00051	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@0@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXXZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN27@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN31@Tidy
$LL12@Tidy:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 18	 add	 edi, 24			; 00000018H
$LN31@Tidy:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN27@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXXZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z$3
__ehfuncinfo$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$505886 = -24					; size = 4
$T509646 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 aa aa
	aa 0a		 cmp	 DWORD PTR __Count$[ebp], 178956970 ; 0aaaaaaaH
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN62@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	6a 18		 push	 24			; 00000018H
  00029	99		 cdq
  0002a	59		 pop	 ecx
  0002b	f7 f9		 idiv	 ecx
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00030	0f 83 81 00 00
	00		 jae	 $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00036	6a 00		 push	 0
  00038	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$_Allocate@URank@ShuffleRankWnd@@@std@@YAPAURank@ShuffleRankWnd@@IPAU12@@Z ; std::_Allocate<ShuffleRankWnd::Rank>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	89 45 e8	 mov	 DWORD PTR __Ptr$505886[ebp], eax
  0004d	ff 75 e8	 push	 DWORD PTR __Ptr$505886[ebp]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAURank@ShuffleRankWnd@@PAU12@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@YAPAURank@ShuffleRankWnd@@PAU12@00AAV?$allocator@URank@ShuffleRankWnd@@@0@@Z ; std::_Uninitialized_move<ShuffleRankWnd::Rank *,ShuffleRankWnd::Rank *,std::allocator<ShuffleRankWnd::Rank> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	8b c3		 mov	 eax, ebx
  00064	2b c1		 sub	 eax, ecx
  00066	6a 18		 push	 24			; 00000018H
  00068	99		 cdq
  00069	5f		 pop	 edi
  0006a	f7 ff		 idiv	 edi
  0006c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	8b f8		 mov	 edi, eax
  00072	85 c9		 test	 ecx, ecx
  00074	74 21		 je	 SHORT $LN54@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00076	89 4d ec	 mov	 DWORD PTR $T509646[ebp], ecx
  00079	3b cb		 cmp	 ecx, ebx
  0007b	74 12		 je	 SHORT $LN37@reserve
$LN39@reserve:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T509646[ebp]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00086	83 45 ec 18	 add	 DWORD PTR $T509646[ebp], 24 ; 00000018H
  0008a	39 5d ec	 cmp	 DWORD PTR $T509646[ebp], ebx
  0008d	75 ee		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0008f	ff 36		 push	 DWORD PTR [esi]
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	59		 pop	 ecx
$LN54@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00097	8b ce		 mov	 ecx, esi
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;
; 770  : 			this->_Mylast = _Ptr + _Size;

  0009f	6b ff 18	 imul	 edi, 24			; 00000018H
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a5	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$505886[ebp]
  000a8	6b c0 18	 imul	 eax, 24			; 00000018H
  000ab	03 c1		 add	 eax, ecx
  000ad	03 f9		 add	 edi, ecx
  000af	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b2	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b5	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000b7	e8 00 00 00 00	 call	 __EH_epilog3
  000bc	c2 04 00	 ret	 4
__catch$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000bf	ff 75 e8	 push	 DWORD PTR __Ptr$505886[ebp]
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	59		 pop	 ecx

; 757  : 			_RERAISE;

  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN63@reserve:
$LN61@reserve:
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::reserve
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@VRankOrder@ShuffleRankWnd@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@0VRankOrder@ShuffleRankWnd@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >,ShuffleRankWnd::RankOrder>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@VRankOrder@ShuffleRankWnd@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@0VRankOrder@ShuffleRankWnd@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@VRankOrder@ShuffleRankWnd@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@0VRankOrder@ShuffleRankWnd@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >,ShuffleRankWnd::RankOrder>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	6a 18		 push	 24			; 00000018H
  0000e	59		 pop	 ecx
  0000f	99		 cdq
  00010	f7 f9		 idiv	 ecx
  00012	50		 push	 eax
  00013	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00016	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00019	e8 00 00 00 00	 call	 ??$_Sort@PAURank@ShuffleRankWnd@@HVRankOrder@2@@std@@YAXPAURank@ShuffleRankWnd@@0HVRankOrder@2@@Z ; std::_Sort<ShuffleRankWnd::Rank *,int,ShuffleRankWnd::RankOrder>
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 3807 : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@VRankOrder@ShuffleRankWnd@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@0VRankOrder@ShuffleRankWnd@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >,ShuffleRankWnd::RankOrder>
_TEXT	ENDS
PUBLIC	__real@406fe00000000000
PUBLIC	?OnProcess@ShuffleRankWnd@@MAEXM@Z		; ShuffleRankWnd::OnProcess
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@406fe00000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
CONST	ENDS
;	COMDAT ?OnProcess@ShuffleRankWnd@@MAEXM@Z
_TEXT	SEGMENT
tv304 = -4						; size = 4
tv301 = -4						; size = 4
tv298 = -4						; size = 4
tv289 = -4						; size = 4
tv285 = -4						; size = 4
tv281 = -4						; size = 4
$T509752 = -4						; size = 1
_fTimePerSec$ = 8					; size = 4
?OnProcess@ShuffleRankWnd@@MAEXM@Z PROC			; ShuffleRankWnd::OnProcess, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 95   : 	if( !IsShow() )

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0000d	84 c0		 test	 al, al
  0000f	0f 84 fe 00 00
	00		 je	 $LN6@OnProcess

; 96   : 		return;
; 97   : 
; 98   : 	DWORD dwGapTime  = FRAMEGETTIME() - m_dwCurrentTime;

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001b	8b c8		 mov	 ecx, eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00023	2b 86 74 01 00
	00		 sub	 eax, DWORD PTR [esi+372]

; 99   : 	switch( m_dwState )

  00029	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  0002f	49		 dec	 ecx
  00030	49		 dec	 ecx
  00031	0f 84 8e 00 00
	00		 je	 $LN8@OnProcess
  00037	49		 dec	 ecx
  00038	74 52		 je	 SHORT $LN5@OnProcess
  0003a	49		 dec	 ecx
  0003b	0f 85 d2 00 00
	00		 jne	 $LN6@OnProcess

; 124  : 	case STATE_FADEOUT:
; 125  : 		if( dwGapTime < m_dwFadeTime )

  00041	8b 8e 78 01 00
	00		 mov	 ecx, DWORD PTR [esi+376]
  00047	3b c1		 cmp	 eax, ecx
  00049	73 34		 jae	 SHORT $LN2@OnProcess

; 126  : 		{
; 127  : 			m_iAlphaRate = MAX_ALPHA_RATE - ( (float)MAX_ALPHA_RATE * (float)( (float)dwGapTime / m_dwFadeTime ) );

  0004b	89 45 fc	 mov	 DWORD PTR tv304[ebp], eax
  0004e	db 45 fc	 fild	 DWORD PTR tv304[ebp]
  00051	85 c0		 test	 eax, eax
  00053	79 06		 jns	 SHORT $LN33@OnProcess
  00055	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@OnProcess:
  0005b	89 4d fc	 mov	 DWORD PTR tv301[ebp], ecx
  0005e	db 45 fc	 fild	 DWORD PTR tv301[ebp]
  00061	85 c9		 test	 ecx, ecx
  00063	79 06		 jns	 SHORT $LN34@OnProcess
  00065	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@OnProcess:
  0006b	de f9		 fdivp	 ST(1), ST(0)
  0006d	d9 5d fc	 fstp	 DWORD PTR tv298[ebp]
  00070	d9 45 fc	 fld	 DWORD PTR tv298[ebp]
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@406fe00000000000
  00079	dc c9		 fmul	 ST(1), ST(0)
  0007b	de e1		 fsubrp	 ST(1), ST(0)

; 128  : 		}
; 129  : 		else

  0007d	eb 7e		 jmp	 SHORT $LN37@OnProcess
$LN2@OnProcess:

; 130  : 		{
; 131  : 			HideWnd();

  0007f	8b ce		 mov	 ecx, esi
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ

; 132  : 		}
; 133  : 		break;

  00087	e9 87 00 00 00	 jmp	 $LN6@OnProcess
$LN5@OnProcess:

; 113  : 		}
; 114  : 		break;
; 115  : 	case STATE_VIEW:		
; 116  : 		{
; 117  : 			if( m_bSort && !m_vRank.empty() )

  0008c	80 be 84 01 00
	00 00		 cmp	 BYTE PTR [esi+388], 0
  00093	74 7e		 je	 SHORT $LN6@OnProcess
  00095	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0009b	3b 8e 64 01 00
	00		 cmp	 ecx, DWORD PTR [esi+356]
  000a1	74 70		 je	 SHORT $LN6@OnProcess

; 118  : 			{				
; 119  : 				std::sort( m_vRank.begin(), m_vRank.end(), RankOrder() );

  000a3	ff 75 fc	 push	 DWORD PTR $T509752[ebp]
  000a6	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  000ac	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
  000b2	51		 push	 ecx
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@std@@VRankOrder@ShuffleRankWnd@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@0@0VRankOrder@ShuffleRankWnd@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> > >,ShuffleRankWnd::RankOrder>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 120  : 				m_bSort = false;

  000bc	c6 86 84 01 00
	00 00		 mov	 BYTE PTR [esi+388], 0

; 121  : 			}
; 122  : 		}	
; 123  : 		break;

  000c3	eb 4e		 jmp	 SHORT $LN6@OnProcess
$LN8@OnProcess:

; 100  : 	{
; 101  : 	case STATE_DELAY:
; 102  : 		{
; 103  : 		}
; 104  : 		break;
; 105  : 	case STATE_FADEIN:
; 106  : 		if( dwGapTime < m_dwFadeTime )

  000c5	8b 8e 78 01 00
	00		 mov	 ecx, DWORD PTR [esi+376]
  000cb	3b c1		 cmp	 eax, ecx
  000cd	73 3b		 jae	 SHORT $LN7@OnProcess

; 107  : 		{
; 108  : 			m_iAlphaRate = (float)MAX_ALPHA_RATE * (float)( (float)dwGapTime / m_dwFadeTime );

  000cf	89 45 fc	 mov	 DWORD PTR tv289[ebp], eax
  000d2	db 45 fc	 fild	 DWORD PTR tv289[ebp]
  000d5	85 c0		 test	 eax, eax
  000d7	79 06		 jns	 SHORT $LN35@OnProcess
  000d9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@OnProcess:
  000df	89 4d fc	 mov	 DWORD PTR tv285[ebp], ecx
  000e2	db 45 fc	 fild	 DWORD PTR tv285[ebp]
  000e5	85 c9		 test	 ecx, ecx
  000e7	79 06		 jns	 SHORT $LN36@OnProcess
  000e9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN36@OnProcess:
  000ef	de f9		 fdivp	 ST(1), ST(0)
  000f1	d9 5d fc	 fstp	 DWORD PTR tv281[ebp]
  000f4	d9 45 fc	 fld	 DWORD PTR tv281[ebp]
  000f7	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000
$LN37@OnProcess:
  000fd	e8 00 00 00 00	 call	 __ftol2_sse
  00102	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax

; 109  : 		}
; 110  : 		else

  00108	eb 09		 jmp	 SHORT $LN6@OnProcess
$LN7@OnProcess:

; 111  : 		{
; 112  : 			SetState( STATE_VIEW );

  0010a	6a 03		 push	 3
  0010c	8b ce		 mov	 ecx, esi
  0010e	e8 00 00 00 00	 call	 ?SetState@ShuffleRankWnd@@IAEXK@Z ; ShuffleRankWnd::SetState
$LN6@OnProcess:
  00113	5e		 pop	 esi

; 134  : 	}
; 135  : }

  00114	c9		 leave
  00115	c2 04 00	 ret	 4
?OnProcess@ShuffleRankWnd@@MAEXM@Z ENDP			; ShuffleRankWnd::OnProcess
_TEXT	ENDS
PUBLIC	??1?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::~vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::~vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Tidy
??1?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE@XZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::~vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T509830 = -4						; size = 4
?clear@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXXZ PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T509830[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@0@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXXZ ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXI@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXI@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 18		 push	 24			; 00000018H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 18		 push	 24			; 00000018H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IBEII@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXI@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ShuffleRankWnd@@6B@				; ShuffleRankWnd::`vftable'
PUBLIC	??0ShuffleRankWnd@@QAE@XZ			; ShuffleRankWnd::ShuffleRankWnd
PUBLIC	??_R4ShuffleRankWnd@@6B@			; ShuffleRankWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVShuffleRankWnd@@@8			; ShuffleRankWnd `RTTI Type Descriptor'
PUBLIC	??_R3ShuffleRankWnd@@8				; ShuffleRankWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ShuffleRankWnd@@8				; ShuffleRankWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ShuffleRankWnd@@8			; ShuffleRankWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddRenderImage
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_command@ioWnd@@UAEXPAV1@HK@Z:PROC		; ioWnd::iwm_command
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_show@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_show
EXTRN	?iwm_hide@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_hide
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EShuffleRankWnd@@UAEPAXI@Z:PROC		; ShuffleRankWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ShuffleRankWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ShuffleRankWnd@@8 DD FLAT:??_R0?AVShuffleRankWnd@@@8 ; ShuffleRankWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ShuffleRankWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ShuffleRankWnd@@8
rdata$r	SEGMENT
??_R2ShuffleRankWnd@@8 DD FLAT:??_R1A@?0A@EA@ShuffleRankWnd@@8 ; ShuffleRankWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ShuffleRankWnd@@8
rdata$r	SEGMENT
??_R3ShuffleRankWnd@@8 DD 00H				; ShuffleRankWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ShuffleRankWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVShuffleRankWnd@@@8
_DATA	SEGMENT
??_R0?AVShuffleRankWnd@@@8 DD FLAT:??_7type_info@@6B@	; ShuffleRankWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVShuffleRankWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ShuffleRankWnd@@6B@
rdata$r	SEGMENT
??_R4ShuffleRankWnd@@6B@ DD 00H				; ShuffleRankWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVShuffleRankWnd@@@8
	DD	FLAT:??_R3ShuffleRankWnd@@8
rdata$r	ENDS
;	COMDAT ??_7ShuffleRankWnd@@6B@
CONST	SEGMENT
??_7ShuffleRankWnd@@6B@ DD FLAT:??_R4ShuffleRankWnd@@6B@ ; ShuffleRankWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ShuffleRankWnd@@MAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@ShuffleRankWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ShuffleRankWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EShuffleRankWnd@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
CONST	ENDS
;	COMDAT ??0ShuffleRankWnd@@QAE@XZ
_TEXT	SEGMENT
??0ShuffleRankWnd@@QAE@XZ PROC				; ShuffleRankWnd::ShuffleRankWnd, COMDAT
; _this$ = ecx

; 9    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00009	33 c9		 xor	 ecx, ecx
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ShuffleRankWnd@@6B@
  00011	89 8e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ecx
  00017	89 8e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ecx
  0001d	89 8e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ecx

; 10   : 	m_dwState		= STATE_DELAY;

  00023	c7 86 70 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+368], 1

; 11   : 	m_dwCurrentTime = 0;

  0002d	89 8e 74 01 00
	00		 mov	 DWORD PTR [esi+372], ecx

; 12   : 	m_dwFadeTime	= 0;

  00033	89 8e 78 01 00
	00		 mov	 DWORD PTR [esi+376], ecx

; 13   : 	m_bSort			= false;

  00039	88 8e 84 01 00
	00		 mov	 BYTE PTR [esi+388], cl

; 14   : }

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	c3		 ret	 0
??0ShuffleRankWnd@@QAE@XZ ENDP				; ShuffleRankWnd::ShuffleRankWnd
_TEXT	ENDS
PUBLIC	??1ShuffleRankWnd@@UAE@XZ			; ShuffleRankWnd::~ShuffleRankWnd
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ShuffleRankWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ShuffleRankWnd@@UAE@XZ$0
__ehfuncinfo$??1ShuffleRankWnd@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ShuffleRankWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
xdata$x	ENDS
;	COMDAT ??1ShuffleRankWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ShuffleRankWnd@@UAE@XZ PROC				; ShuffleRankWnd::~ShuffleRankWnd, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ShuffleRankWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ShuffleRankWnd@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 18   : }

  0001b	8d 8e 60 01 00
	00		 lea	 ecx, DWORD PTR [esi+352]
  00021	e8 00 00 00 00	 call	 ?_Tidy@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXXZ ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Tidy
  00026	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002a	8b ce		 mov	 ecx, esi
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ShuffleRankWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__ehhandler$??1ShuffleRankWnd@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ShuffleRankWnd@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ShuffleRankWnd@@UAE@XZ ENDP				; ShuffleRankWnd::~ShuffleRankWnd
PUBLIC	?ClearRank@ShuffleRankWnd@@QAEXXZ		; ShuffleRankWnd::ClearRank
; Function compile flags: /Ogsp
;	COMDAT ?ClearRank@ShuffleRankWnd@@QAEXXZ
_TEXT	SEGMENT
$T510022 = -4						; size = 4
?ClearRank@ShuffleRankWnd@@QAEXXZ PROC			; ShuffleRankWnd::ClearRank, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 28   : 	m_vRank.clear();

  00004	8b 81 64 01 00
	00		 mov	 eax, DWORD PTR [ecx+356]
  0000a	81 c1 60 01 00
	00		 add	 ecx, 352		; 00000160H
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	8d 45 fc	 lea	 eax, DWORD PTR $T510022[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?erase@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@@2@0@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::erase

; 29   : }

  0001d	c9		 leave
  0001e	c3		 ret	 0
?ClearRank@ShuffleRankWnd@@QAEXXZ ENDP			; ShuffleRankWnd::ClearRank
_TEXT	ENDS
PUBLIC	?push_back@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXABURank@ShuffleRankWnd@@@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXABURank@ShuffleRankWnd@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXABURank@ShuffleRankWnd@@@Z PROC ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 18		 push	 24			; 00000018H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXI@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 18	 imul	 edi, 24			; 00000018H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@URank@ShuffleRankWnd@@@std@@URank@ShuffleRankWnd@@AAU34@@std@@YAXAAV?$allocator@URank@ShuffleRankWnd@@@0@PAURank@ShuffleRankWnd@@AAU23@@Z ; std::_Cons_val<std::allocator<ShuffleRankWnd::Rank>,ShuffleRankWnd::Rank,ShuffleRankWnd::Rank &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@IAEXI@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@URank@ShuffleRankWnd@@ABU12@@std@@YAXPAURank@ShuffleRankWnd@@ABU12@@Z ; std::_Construct<ShuffleRankWnd::Rank,ShuffleRankWnd::Rank const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back:

; 996  : 			++this->_Mylast;

  00061	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXABURank@ShuffleRankWnd@@@Z ENDP ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GShuffleRankWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GShuffleRankWnd@@UAEPAXI@Z PROC			; ShuffleRankWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ShuffleRankWnd@@UAE@XZ ; ShuffleRankWnd::~ShuffleRankWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GShuffleRankWnd@@UAEPAXI@Z ENDP			; ShuffleRankWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z ; ShuffleRankWnd::AddRankUser
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\shufflerankwnd.cpp
xdata$x	SEGMENT
__unwindtable$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z$0
__ehfuncinfo$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z
_TEXT	SEGMENT
_sRank$ = -36						; size = 24
__$EHRec$ = -12						; size = 12
_szName$ = 8						; size = 4
_iTeamType$ = 12					; size = 4
_iCurrStar$ = 16					; size = 4
?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z PROC ; ShuffleRankWnd::AddRankUser, COMDAT
; _this$ = ecx

; 32   : {

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 33   : 	Rank sRank;

  0000e	8d 4d dc	 lea	 ecx, DWORD PTR _sRank$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	33 c0		 xor	 eax, eax
  00019	89 45 ec	 mov	 DWORD PTR _sRank$[ebp+16], eax
  0001c	89 45 f0	 mov	 DWORD PTR _sRank$[ebp+20], eax

; 34   : 	sRank.szName    = szName;

  0001f	ff 75 08	 push	 DWORD PTR _szName$[ebp]
  00022	8d 4d dc	 lea	 ecx, DWORD PTR _sRank$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 35   : 	sRank.iTeamType = iTeamType;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _iTeamType$[ebp]
  00031	89 45 f0	 mov	 DWORD PTR _sRank$[ebp+20], eax

; 36   : 	sRank.iCurrStar = iCurrStar;

  00034	8b 45 10	 mov	 eax, DWORD PTR _iCurrStar$[ebp]
  00037	89 45 ec	 mov	 DWORD PTR _sRank$[ebp+16], eax

; 37   : 
; 38   : 	m_vRank.push_back( sRank );

  0003a	8d 45 dc	 lea	 eax, DWORD PTR _sRank$[ebp]
  0003d	50		 push	 eax
  0003e	8d 8e 60 01 00
	00		 lea	 ecx, DWORD PTR [esi+352]
  00044	e8 00 00 00 00	 call	 ?push_back@?$vector@URank@ShuffleRankWnd@@V?$allocator@URank@ShuffleRankWnd@@@std@@@std@@QAEXABURank@ShuffleRankWnd@@@Z ; std::vector<ShuffleRankWnd::Rank,std::allocator<ShuffleRankWnd::Rank> >::push_back

; 39   : 
; 40   : 	m_bSort = true;

  00049	c6 86 84 01 00
	00 01		 mov	 BYTE PTR [esi+388], 1

; 41   : 	SetSize( GetWidth(), m_iHieght * (int)m_vRank.size() );

  00050	8b 86 64 01 00
	00		 mov	 eax, DWORD PTR [esi+356]
  00056	2b 86 60 01 00
	00		 sub	 eax, DWORD PTR [esi+352]
  0005c	6a 18		 push	 24			; 00000018H
  0005e	59		 pop	 ecx
  0005f	99		 cdq
  00060	f7 f9		 idiv	 ecx
  00062	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00068	8b 3e		 mov	 edi, DWORD PTR [esi]
  0006a	0f af c8	 imul	 ecx, eax
  0006d	51		 push	 ecx
  0006e	8b ce		 mov	 ecx, esi
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  00076	50		 push	 eax
  00077	8b ce		 mov	 ecx, esi
  00079	ff 57 2c	 call	 DWORD PTR [edi+44]

; 42   : }

  0007c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8d 4d dc	 lea	 ecx, DWORD PTR _sRank$[ebp]
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00089	e8 00 00 00 00	 call	 __EH_epilog3
  0008e	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _sRank$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Rank@ShuffleRankWnd@@QAE@XZ
__ehhandler$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddRankUser@ShuffleRankWnd@@QAEXABVioHashString@@HH@Z ENDP ; ShuffleRankWnd::AddRankUser
END
