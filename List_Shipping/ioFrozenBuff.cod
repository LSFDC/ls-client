; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioFrozenBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetFrozenState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetFrozenState, COMDAT
; _this$ = ecx

; 1570 : 	inline bool GetFrozenState() const { return m_bFrozenState; }

  00000	8a 81 f4 22 00
	00		 mov	 al, BYTE PTR [ecx+8948]
  00006	c3		 ret	 0
?GetFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetFrozenState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetPreState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetPreState
; Function compile flags: /Ogsp
;	COMDAT ?GetPreState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetPreState@ioBaseChar@@QBE?AW4CharState@@XZ PROC	; ioBaseChar::GetPreState, COMDAT
; _this$ = ecx

; 2157 : 	inline CharState GetPreState() const { return m_PreCharState; }

  00000	8a 81 11 03 00
	00		 mov	 al, BYTE PTR [ecx+785]
  00006	c3		 ret	 0
?GetPreState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP	; ioBaseChar::GetPreState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ		; ioNpcChar::IsMonsterHalfBoss
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionpcchar.h
;	COMDAT ?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ
_TEXT	SEGMENT
?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ PROC		; ioNpcChar::IsMonsterHalfBoss, COMDAT
; _this$ = ecx

; 305  : 	bool IsMonsterHalfBoss(){ return ( m_iBossMonsterType == NBT_HALF_BOSS ); }

  00000	33 c0		 xor	 eax, eax
  00002	83 b9 68 48 00
	00 01		 cmp	 DWORD PTR [ecx+18536], 1
  00009	0f 94 c0	 sete	 al
  0000c	c3		 ret	 0
?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ ENDP		; ioNpcChar::IsMonsterHalfBoss
_TEXT	ENDS
PUBLIC	?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ		; ioNpcChar::IsMonsterLastBoss
; Function compile flags: /Ogsp
;	COMDAT ?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ
_TEXT	SEGMENT
?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ PROC		; ioNpcChar::IsMonsterLastBoss, COMDAT
; _this$ = ecx

; 306  : 	bool IsMonsterLastBoss(){ return ( m_iBossMonsterType == NBT_LAST_BOSS ); }

  00000	33 c0		 xor	 eax, eax
  00002	83 b9 68 48 00
	00 02		 cmp	 DWORD PTR [ecx+18536], 2
  00009	0f 94 c0	 sete	 al
  0000c	c3		 ret	 0
?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ ENDP		; ioNpcChar::IsMonsterLastBoss
_TEXT	ENDS
PUBLIC	?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ	; ioGrowthUpInfo::GetType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogrowthupinfo.h
;	COMDAT ?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ
_TEXT	SEGMENT
?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ PROC	; ioGrowthUpInfo::GetType, COMDAT
; _this$ = ecx

; 23   : 	inline GrowthType GetType() const { return m_GrowthType; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetType@ioGrowthUpInfo@@QBE?AW4GrowthType@@XZ ENDP	; ioGrowthUpInfo::GetType
_TEXT	ENDS
PUBLIC	??_R0?AVioGrowthUpInfo@@@8			; ioGrowthUpInfo `RTTI Type Descriptor'
PUBLIC	??_R0?AVioGrowthNormalUpInfo@@@8		; ioGrowthNormalUpInfo `RTTI Type Descriptor'
PUBLIC	?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z ; ToNormalUpInfo
EXTRN	___RTDynamicCast:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVioGrowthUpInfo@@@8
_DATA	SEGMENT
??_R0?AVioGrowthUpInfo@@@8 DD FLAT:??_7type_info@@6B@	; ioGrowthUpInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGrowthUpInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioGrowthNormalUpInfo@@@8
_DATA	SEGMENT
??_R0?AVioGrowthNormalUpInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ioGrowthNormalUpInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGrowthNormalUpInfo@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z
_TEXT	SEGMENT
_pUpInfo$ = 8						; size = 4
?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z PROC ; ToNormalUpInfo, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	if( !pUpInfo || pUpInfo->GetType() == GT_NONE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pUpInfo$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 39		 je	 SHORT $LN6@ToNormalUp
  0000a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000d	85 c0		 test	 eax, eax
  0000f	74 32		 je	 SHORT $LN6@ToNormalUp

; 62   : 
; 63   : 	if( pUpInfo->GetType() == GT_CHAR_ATTACK || pUpInfo->GetType() == GT_SKILL_ATTACK )

  00011	83 f8 01	 cmp	 eax, 1
  00014	74 2d		 je	 SHORT $LN6@ToNormalUp
  00016	83 f8 07	 cmp	 eax, 7
  00019	74 28		 je	 SHORT $LN6@ToNormalUp

; 64   : 		return NULL;
; 65   : 	if( pUpInfo->GetType() == GT_BLOW_PUSH )

  0001b	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 66   : 		return NULL;

  0001e	74 23		 je	 SHORT $LN6@ToNormalUp

; 67   : 	if( pUpInfo->GetType() == GT_TELEPORT_ANI_RATE )

  00020	83 f8 20	 cmp	 eax, 32			; 00000020H

; 68   : 		return NULL;

  00023	74 1e		 je	 SHORT $LN6@ToNormalUp

; 69   : 	if( pUpInfo->GetType() == GT_SKILL_ATTACK_FORCE )

  00025	83 f8 1c	 cmp	 eax, 28			; 0000001cH

; 70   : 		return NULL;

  00028	74 19		 je	 SHORT $LN6@ToNormalUp

; 71   : 
; 72   : 	return dynamic_cast< ioGrowthNormalUpInfo* >( pUpInfo );

  0002a	6a 00		 push	 0
  0002c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGrowthNormalUpInfo@@@8
  00031	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGrowthUpInfo@@@8
  00036	6a 00		 push	 0
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ___RTDynamicCast
  0003e	83 c4 14	 add	 esp, 20			; 00000014H

; 73   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN6@ToNormalUp:

; 61   : 		return NULL;

  00043	33 c0		 xor	 eax, eax

; 73   : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z ENDP ; ToNormalUpInfo
_TEXT	ENDS
PUBLIC	??_7ioFrozenBuff@@6B@				; ioFrozenBuff::`vftable'
PUBLIC	??0ioFrozenBuff@@QAE@XZ				; ioFrozenBuff::ioFrozenBuff
PUBLIC	??_R4ioFrozenBuff@@6B@				; ioFrozenBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioFrozenBuff@@@8			; ioFrozenBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioFrozenBuff@@8				; ioFrozenBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioFrozenBuff@@8				; ioFrozenBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioFrozenBuff@@8			; ioFrozenBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioFrozenBuff@@UAEXAAVioINILoader@@@Z ; ioFrozenBuff::LoadProperty
PUBLIC	?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ		; ioFrozenBuff::Clone
PUBLIC	?StartBuff@ioFrozenBuff@@UAEXPAVioBaseChar@@@Z	; ioFrozenBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioFrozenBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioFrozenBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioFrozenBuff@@UAEXM@Z		; ioFrozenBuff::ProcessBuff
PUBLIC	?EndBuff@ioFrozenBuff@@UAEXXZ			; ioFrozenBuff::EndBuff
PUBLIC	?GetBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z	; ioFrozenBuff::GetBuffInfo
PUBLIC	?ApplyBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z ; ioFrozenBuff::ApplyBuffInfo
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioFrozenBuff@@UAEPAXI@Z:PROC		; ioFrozenBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofrozenbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioFrozenBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioFrozenBuff@@8 DD FLAT:??_R0?AVioFrozenBuff@@@8 ; ioFrozenBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioFrozenBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioFrozenBuff@@8
rdata$r	SEGMENT
??_R2ioFrozenBuff@@8 DD FLAT:??_R1A@?0A@EA@ioFrozenBuff@@8 ; ioFrozenBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioFrozenBuff@@8
rdata$r	SEGMENT
??_R3ioFrozenBuff@@8 DD 00H				; ioFrozenBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioFrozenBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioFrozenBuff@@@8
_DATA	SEGMENT
??_R0?AVioFrozenBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioFrozenBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioFrozenBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioFrozenBuff@@6B@
rdata$r	SEGMENT
??_R4ioFrozenBuff@@6B@ DD 00H				; ioFrozenBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioFrozenBuff@@@8
	DD	FLAT:??_R3ioFrozenBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioFrozenBuff@@6B@
CONST	SEGMENT
??_7ioFrozenBuff@@6B@ DD FLAT:??_R4ioFrozenBuff@@6B@	; ioFrozenBuff::`vftable'
	DD	FLAT:?LoadProperty@ioFrozenBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioFrozenBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioFrozenBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioFrozenBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioFrozenBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioFrozenBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioFrozenBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioFrozenBuff@@QAE@XZ PROC				; ioFrozenBuff::ioFrozenBuff, COMDAT
; _this$ = ecx

; 11   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff

; 12   : 	m_dwAniEndTime = 0;

  00008	33 c0		 xor	 eax, eax
  0000a	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax

; 13   : 	m_dwExtraFrozenDuration = 0;

  00010	89 86 a8 09 00
	00		 mov	 DWORD PTR [esi+2472], eax

; 14   : 	m_bSetEffect = false;
; 15   : 	m_bNotFrozen = true;
; 16   : 	m_bRseveSetFrozen = false;

  00016	88 86 b0 09 00
	00		 mov	 BYTE PTR [esi+2480], al
  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioFrozenBuff@@6B@
  00022	66 c7 86 70 09
	00 00 00 01	 mov	 WORD PTR [esi+2416], 256 ; 00000100H

; 17   : }

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??0ioFrozenBuff@@QAE@XZ ENDP				; ioFrozenBuff::ioFrozenBuff
_TEXT	ENDS
PUBLIC	??0ioFrozenBuff@@QAE@ABV0@@Z			; ioFrozenBuff::ioFrozenBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ??0ioFrozenBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioFrozenBuff@@QAE@ABV0@@Z PROC			; ioFrozenBuff::ioFrozenBuff, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioFrozenBuff@@6B@
  00016	8b 87 74 09 00
	00		 mov	 eax, DWORD PTR [edi+2420]
  0001c	89 86 74 09 00
	00		 mov	 DWORD PTR [esi+2420], eax
  00022	8b 87 78 09 00
	00		 mov	 eax, DWORD PTR [edi+2424]
  00028	89 86 78 09 00
	00		 mov	 DWORD PTR [esi+2424], eax
  0002e	8b 87 7c 09 00
	00		 mov	 eax, DWORD PTR [edi+2428]
  00034	89 86 7c 09 00
	00		 mov	 DWORD PTR [esi+2428], eax
  0003a	8b 87 80 09 00
	00		 mov	 eax, DWORD PTR [edi+2432]
  00040	89 86 80 09 00
	00		 mov	 DWORD PTR [esi+2432], eax
  00046	8b 87 84 09 00
	00		 mov	 eax, DWORD PTR [edi+2436]
  0004c	89 86 84 09 00
	00		 mov	 DWORD PTR [esi+2436], eax
  00052	8b 87 88 09 00
	00		 mov	 eax, DWORD PTR [edi+2440]
  00058	89 86 88 09 00
	00		 mov	 DWORD PTR [esi+2440], eax
  0005e	8b 87 8c 09 00
	00		 mov	 eax, DWORD PTR [edi+2444]
  00064	89 86 8c 09 00
	00		 mov	 DWORD PTR [esi+2444], eax
  0006a	8b 87 90 09 00
	00		 mov	 eax, DWORD PTR [edi+2448]
  00070	89 86 90 09 00
	00		 mov	 DWORD PTR [esi+2448], eax
  00076	8b 87 94 09 00
	00		 mov	 eax, DWORD PTR [edi+2452]
  0007c	89 86 94 09 00
	00		 mov	 DWORD PTR [esi+2452], eax
  00082	8b 87 98 09 00
	00		 mov	 eax, DWORD PTR [edi+2456]
  00088	89 86 98 09 00
	00		 mov	 DWORD PTR [esi+2456], eax
  0008e	8b 87 9c 09 00
	00		 mov	 eax, DWORD PTR [edi+2460]
  00094	89 86 9c 09 00
	00		 mov	 DWORD PTR [esi+2460], eax
  0009a	8b 87 a0 09 00
	00		 mov	 eax, DWORD PTR [edi+2464]
  000a0	89 86 a0 09 00
	00		 mov	 DWORD PTR [esi+2464], eax
  000a6	8b 87 a4 09 00
	00		 mov	 eax, DWORD PTR [edi+2468]
  000ac	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax
  000b2	d9 87 ac 09 00
	00		 fld	 DWORD PTR [edi+2476]

; 36   : 	m_dwAniEndTime = 0;

  000b8	33 c0		 xor	 eax, eax
  000ba	d9 9e ac 09 00
	00		 fstp	 DWORD PTR [esi+2476]
  000c0	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax

; 37   : 	m_dwExtraFrozenDuration = 0;

  000c6	89 86 a8 09 00
	00		 mov	 DWORD PTR [esi+2472], eax

; 38   : 	m_bSetEffect = false;
; 39   : 	m_bNotFrozen = true;
; 40   : 	m_bRseveSetFrozen = false;

  000cc	88 86 b0 09 00
	00		 mov	 BYTE PTR [esi+2480], al
  000d2	5f		 pop	 edi
  000d3	66 c7 86 70 09
	00 00 00 01	 mov	 WORD PTR [esi+2416], 256 ; 00000100H

; 41   : }

  000dc	8b c6		 mov	 eax, esi
  000de	5e		 pop	 esi
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
??0ioFrozenBuff@@QAE@ABV0@@Z ENDP			; ioFrozenBuff::ioFrozenBuff
_TEXT	ENDS
PUBLIC	??1ioFrozenBuff@@UAE@XZ				; ioFrozenBuff::~ioFrozenBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioFrozenBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioFrozenBuff@@UAE@XZ PROC				; ioFrozenBuff::~ioFrozenBuff, COMDAT
; _this$ = ecx

; 44   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioFrozenBuff@@6B@

; 45   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioFrozenBuff@@UAE@XZ ENDP				; ioFrozenBuff::~ioFrozenBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T526788 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ PROC		; ioFrozenBuff::Clone, COMDAT
; _this$ = ecx

; 48   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 49   : 	return new ioFrozenBuff( *this );

  0000e	68 b4 09 00 00	 push	 2484			; 000009b4H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T526788[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioFrozenBuff@@QAE@ABV0@@Z ; ioFrozenBuff::ioFrozenBuff
$LN3@Clone:

; 50   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T526788[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioFrozenBuff@@UAEPAVioBuff@@XZ ENDP		; ioFrozenBuff::Clone
EXTRN	??6SP2Packet@@QAEAAV0@K@Z:PROC			; SP2Packet::operator<<
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
; Function compile flags: /Ogsp
;	COMDAT ?GetBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?GetBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z PROC	; ioFrozenBuff::GetBuffInfo, COMDAT
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 295  : 	ioBuff::GetBuffInfo( rkPacket );

  00004	ff 75 08	 push	 DWORD PTR _rkPacket$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z ; ioBuff::GetBuffInfo

; 296  : 
; 297  : 	rkPacket << m_dwExtraFrozenDuration;

  0000e	ff b6 a8 09 00
	00		 push	 DWORD PTR [esi+2472]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00017	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@K@Z ; SP2Packet::operator<<
  0001c	5e		 pop	 esi

; 298  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z ENDP	; ioFrozenBuff::GetBuffInfo
_TEXT	ENDS
EXTRN	??5SP2Packet@@QAEAAV0@AAK@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?ApplyBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z PROC	; ioFrozenBuff::ApplyBuffInfo, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 302  : 	rkPacket >> m_dwExtraFrozenDuration;

  00003	81 c1 a8 09 00
	00		 add	 ecx, 2472		; 000009a8H
  00009	51		 push	 ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0000d	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAK@Z ; SP2Packet::operator>>

; 303  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?ApplyBuffInfo@ioFrozenBuff@@UAEXAAVSP2Packet@@@Z ENDP	; ioFrozenBuff::ApplyBuffInfo
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
;	COMDAT ??_R0?AVioGameEntity@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z PROC ; ToPlayEntity, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 122  : 	if( !pObj || pObj->GetTypeID() != ioGameEntity::GET_PLAY_ENTITY )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN1@ToPlayEnti
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 50 10	 call	 DWORD PTR [eax+16]
  00012	83 f8 01	 cmp	 eax, 1
  00015	75 19		 jne	 SHORT $LN1@ToPlayEnti

; 124  : 
; 125  : 	return dynamic_cast< ioPlayEntity* >( pObj );

  00017	6a 00		 push	 0
  00019	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0001e	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGameEntity@@@8
  00023	6a 00		 push	 0
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	eb 02		 jmp	 SHORT $LN3@ToPlayEnti
$LN1@ToPlayEnti:

; 123  : 		return NULL;

  00030	33 c0		 xor	 eax, eax
$LN3@ToPlayEnti:
  00032	5e		 pop	 esi

; 126  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ENDP ; ToPlayEntity
_TEXT	ENDS
PUBLIC	?Init@tagBlowWoundAniInfo@@QAEXXZ		; tagBlowWoundAniInfo::Init
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\weaponattribute.h
;	COMDAT ?Init@tagBlowWoundAniInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@tagBlowWoundAniInfo@@QAEXXZ PROC			; tagBlowWoundAniInfo::Init, COMDAT
; _this$ = ecx

; 310  : 	{

  00000	56		 push	 esi

; 311  : 		m_BlowingAni.Clear();

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff d6		 call	 esi

; 312  : 		m_BlowingBackAni.Clear();

  0000c	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0000f	ff d6		 call	 esi

; 313  : 
; 314  : 		m_JumpBlowingAni.Clear();

  00011	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00014	ff d6		 call	 esi

; 315  : 		m_JumpBlowingBackAni.Clear();

  00016	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00019	ff d6		 call	 esi

; 316  : 
; 317  : 		m_DownAni.Clear();

  0001b	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  0001e	ff d6		 call	 esi

; 318  : 		m_DownBackAni.Clear();

  00020	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  00023	ff d6		 call	 esi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 319  : 	}

  00027	c3		 ret	 0
?Init@tagBlowWoundAniInfo@@QAEXXZ ENDP			; tagBlowWoundAniInfo::Init
_TEXT	ENDS
PUBLIC	??1tagBlowWoundAniInfo@@QAE@XZ			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1tagBlowWoundAniInfo@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1tagBlowWoundAniInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1tagBlowWoundAniInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$4
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1tagBlowWoundAniInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1tagBlowWoundAniInfo@@QAE@XZ PROC			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1tagBlowWoundAniInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  0001a	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00021	ff d6		 call	 esi
  00023	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00026	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0002a	ff d6		 call	 esi
  0002c	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0002f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00033	ff d6		 call	 esi
  00035	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003c	ff d6		 call	 esi
  0003e	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00041	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00045	ff d6		 call	 esi
  00047	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b cf		 mov	 ecx, edi
  0004d	ff d6		 call	 esi
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 30	 add	 ecx, 48			; 00000030H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 40	 add	 ecx, 64			; 00000040H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1tagBlowWoundAniInfo@@QAE@XZ:
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1tagBlowWoundAniInfo@@QAE@XZ
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1tagBlowWoundAniInfo@@QAE@XZ ENDP			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z PROC	; CEncrypt<bool>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ENDP	; CEncrypt<bool>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_R0?AVioBaseChar@@@8				; ioBaseChar `RTTI Type Descriptor'
PUBLIC	?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ; ToBaseChar
;	COMDAT ??_R0?AVioBaseChar@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
_DATA	SEGMENT
??_R0?AVioBaseChar@@@8 DD FLAT:??_7type_info@@6B@	; ioBaseChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBaseChar@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z PROC	; ToBaseChar, COMDAT

; 4326 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4327 : 	ioPlayEntity *pPlay = ToPlayEntity( pObj );

  00004	ff 75 08	 push	 DWORD PTR _pObj$[ebp]
  00007	e8 00 00 00 00	 call	 ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
  0000c	8b f0		 mov	 esi, eax
  0000e	59		 pop	 ecx

; 4328 : 	if( !pPlay || pPlay->GetSubType() != ioPlayEntity::PST_CHAR )

  0000f	85 f6		 test	 esi, esi
  00011	74 25		 je	 SHORT $LN1@ToBaseChar
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b ce		 mov	 ecx, esi
  00017	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  0001d	85 c0		 test	 eax, eax
  0001f	75 17		 jne	 SHORT $LN1@ToBaseChar

; 4330 : 
; 4331 : 	return dynamic_cast< ioBaseChar* >( pPlay );

  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_R0?AVioBaseChar@@@8
  00027	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0002c	50		 push	 eax
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ___RTDynamicCast
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	eb 02		 jmp	 SHORT $LN3@ToBaseChar
$LN1@ToBaseChar:

; 4329 : 		return NULL;

  00038	33 c0		 xor	 eax, eax
$LN3@ToBaseChar:
  0003a	5e		 pop	 esi

; 4332 : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ENDP	; ToBaseChar
_TEXT	ENDS
PUBLIC	??_R0?AVioNpcChar@@@8				; ioNpcChar `RTTI Type Descriptor'
PUBLIC	?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z	; ToNpcChar
;	COMDAT ??_R0?AVioNpcChar@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionpcchar.h
_DATA	SEGMENT
??_R0?AVioNpcChar@@@8 DD FLAT:??_7type_info@@6B@	; ioNpcChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNpcChar@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z PROC	; ToNpcChar, COMDAT

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 362  : 	ioBaseChar *pChar = ToBaseChar( pObj );

  00004	ff 75 08	 push	 DWORD PTR _pObj$[ebp]
  00007	e8 00 00 00 00	 call	 ?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ; ToBaseChar
  0000c	8b f0		 mov	 esi, eax
  0000e	59		 pop	 ecx

; 363  : 	if( !pChar || pChar->GetControlType() != CONTROL_AI )

  0000f	85 f6		 test	 esi, esi
  00011	74 28		 je	 SHORT $LN1@ToNpcChar
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b ce		 mov	 ecx, esi
  00017	ff 90 ec 00 00
	00		 call	 DWORD PTR [eax+236]
  0001d	83 f8 02	 cmp	 eax, 2
  00020	75 19		 jne	 SHORT $LN1@ToNpcChar

; 365  : 
; 366  : 	return dynamic_cast< ioNpcChar* >(pChar);

  00022	6a 00		 push	 0
  00024	68 00 00 00 00	 push	 OFFSET ??_R0?AVioNpcChar@@@8
  00029	68 00 00 00 00	 push	 OFFSET ??_R0?AVioBaseChar@@@8
  0002e	6a 00		 push	 0
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ___RTDynamicCast
  00036	83 c4 14	 add	 esp, 20			; 00000014H
  00039	eb 02		 jmp	 SHORT $LN3@ToNpcChar
$LN1@ToNpcChar:

; 364  : 		return NULL;

  0003b	33 c0		 xor	 eax, eax
$LN3@ToNpcChar:
  0003d	5e		 pop	 esi

; 367  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ENDP	; ToNpcChar
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioFrozenBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioFrozenBuff@@UAEPAXI@Z PROC			; ioFrozenBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioFrozenBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioFrozenBuff@@UAEPAXI@Z ENDP			; ioFrozenBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetMaxTime@ioFrozenBuff@@IAEKXZ		; ioFrozenBuff::GetMaxTime
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofrozenbuff.cpp
;	COMDAT ?GetMaxTime@ioFrozenBuff@@IAEKXZ
_TEXT	SEGMENT
?GetMaxTime@ioFrozenBuff@@IAEKXZ PROC			; ioFrozenBuff::GetMaxTime, COMDAT
; _this$ = ecx

; 76   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 77   : 	ioNpcChar *pNpc = ToNpcChar( m_pOwner );

  00004	ff b7 74 02 00
	00		 push	 DWORD PTR [edi+628]
  0000a	e8 00 00 00 00	 call	 ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ; ToNpcChar
  0000f	8b f0		 mov	 esi, eax
  00011	59		 pop	 ecx

; 78   : 	if( !pNpc || pNpc->GetNpcType() == NT_DEVELOPER_K )

  00012	85 f6		 test	 esi, esi
  00014	74 2f		 je	 SHORT $LN3@GetMaxTime
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00020	83 f8 01	 cmp	 eax, 1
  00023	74 20		 je	 SHORT $LN3@GetMaxTime

; 80   : 
; 81   : 	if( pNpc->IsMonsterLastBoss() || pNpc->IsMonsterHalfBoss() )

  00025	8b b6 68 48 00
	00		 mov	 esi, DWORD PTR [esi+18536]
  0002b	83 fe 02	 cmp	 esi, 2
  0002e	74 0d		 je	 SHORT $LN1@GetMaxTime
  00030	83 fe 01	 cmp	 esi, 1
  00033	74 08		 je	 SHORT $LN1@GetMaxTime

; 83   : 	return m_dwMaxTimeByNpc;

  00035	8b 87 80 09 00
	00		 mov	 eax, DWORD PTR [edi+2432]
  0003b	eb 0e		 jmp	 SHORT $LN5@GetMaxTime
$LN1@GetMaxTime:

; 82   : 		return m_dwMaxTimeByBossNpc;

  0003d	8b 87 88 09 00
	00		 mov	 eax, DWORD PTR [edi+2440]
  00043	eb 06		 jmp	 SHORT $LN5@GetMaxTime
$LN3@GetMaxTime:

; 79   : 		return m_dwMaxTime;

  00045	8b 87 78 09 00
	00		 mov	 eax, DWORD PTR [edi+2424]
$LN5@GetMaxTime:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 84   : }

  0004d	c3		 ret	 0
?GetMaxTime@ioFrozenBuff@@IAEKXZ ENDP			; ioFrozenBuff::GetMaxTime
_TEXT	ENDS
PUBLIC	?GetMinTime@ioFrozenBuff@@IAEKXZ		; ioFrozenBuff::GetMinTime
; Function compile flags: /Ogsp
;	COMDAT ?GetMinTime@ioFrozenBuff@@IAEKXZ
_TEXT	SEGMENT
?GetMinTime@ioFrozenBuff@@IAEKXZ PROC			; ioFrozenBuff::GetMinTime, COMDAT
; _this$ = ecx

; 87   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 88   : 	ioNpcChar *pNpc = ToNpcChar( m_pOwner );

  00004	ff b7 74 02 00
	00		 push	 DWORD PTR [edi+628]
  0000a	e8 00 00 00 00	 call	 ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ; ToNpcChar
  0000f	8b f0		 mov	 esi, eax
  00011	59		 pop	 ecx

; 89   : 	if( !pNpc || pNpc->GetNpcType() == NT_DEVELOPER_K )

  00012	85 f6		 test	 esi, esi
  00014	74 2f		 je	 SHORT $LN3@GetMinTime
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00020	83 f8 01	 cmp	 eax, 1
  00023	74 20		 je	 SHORT $LN3@GetMinTime

; 91   : 
; 92   : 	if( pNpc->IsMonsterLastBoss() || pNpc->IsMonsterHalfBoss() )

  00025	8b b6 68 48 00
	00		 mov	 esi, DWORD PTR [esi+18536]
  0002b	83 fe 02	 cmp	 esi, 2
  0002e	74 0d		 je	 SHORT $LN1@GetMinTime
  00030	83 fe 01	 cmp	 esi, 1
  00033	74 08		 je	 SHORT $LN1@GetMinTime

; 94   : 	return m_dwMinTimeByNpc;

  00035	8b 87 84 09 00
	00		 mov	 eax, DWORD PTR [edi+2436]
  0003b	eb 0e		 jmp	 SHORT $LN5@GetMinTime
$LN1@GetMinTime:

; 93   : 		return m_dwMinTimeByBossNpc;

  0003d	8b 87 8c 09 00
	00		 mov	 eax, DWORD PTR [edi+2444]
  00043	eb 06		 jmp	 SHORT $LN5@GetMinTime
$LN3@GetMinTime:

; 90   : 		return m_dwMinTime;

  00045	8b 87 7c 09 00
	00		 mov	 eax, DWORD PTR [edi+2428]
$LN5@GetMinTime:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 95   : }

  0004d	c3		 ret	 0
?GetMinTime@ioFrozenBuff@@IAEKXZ ENDP			; ioFrozenBuff::GetMinTime
_TEXT	ENDS
PUBLIC	?GetTeamMaxTime@ioFrozenBuff@@IAEKXZ		; ioFrozenBuff::GetTeamMaxTime
; Function compile flags: /Ogsp
;	COMDAT ?GetTeamMaxTime@ioFrozenBuff@@IAEKXZ
_TEXT	SEGMENT
?GetTeamMaxTime@ioFrozenBuff@@IAEKXZ PROC		; ioFrozenBuff::GetTeamMaxTime, COMDAT
; _this$ = ecx

; 98   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 99   : 	ioNpcChar *pNpc = ToNpcChar( m_pOwner );

  00004	ff b7 74 02 00
	00		 push	 DWORD PTR [edi+628]
  0000a	e8 00 00 00 00	 call	 ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ; ToNpcChar
  0000f	8b f0		 mov	 esi, eax
  00011	59		 pop	 ecx

; 100  : 	if( !pNpc || pNpc->GetNpcType() == NT_DEVELOPER_K )

  00012	85 f6		 test	 esi, esi
  00014	74 2f		 je	 SHORT $LN3@GetTeamMax
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00020	83 f8 01	 cmp	 eax, 1
  00023	74 20		 je	 SHORT $LN3@GetTeamMax

; 102  : 
; 103  : 	if( pNpc->IsMonsterLastBoss() || pNpc->IsMonsterHalfBoss() )

  00025	8b b6 68 48 00
	00		 mov	 esi, DWORD PTR [esi+18536]
  0002b	83 fe 02	 cmp	 esi, 2
  0002e	74 0d		 je	 SHORT $LN1@GetTeamMax
  00030	83 fe 01	 cmp	 esi, 1
  00033	74 08		 je	 SHORT $LN1@GetTeamMax

; 105  : 	return m_dwTeamMaxTimeByNpc;

  00035	8b 87 98 09 00
	00		 mov	 eax, DWORD PTR [edi+2456]
  0003b	eb 0e		 jmp	 SHORT $LN5@GetTeamMax
$LN1@GetTeamMax:

; 104  : 		return m_dwTeamMaxTimeByBossNpc;

  0003d	8b 87 a0 09 00
	00		 mov	 eax, DWORD PTR [edi+2464]
  00043	eb 06		 jmp	 SHORT $LN5@GetTeamMax
$LN3@GetTeamMax:

; 101  : 		return m_dwTeamMaxTime;

  00045	8b 87 90 09 00
	00		 mov	 eax, DWORD PTR [edi+2448]
$LN5@GetTeamMax:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 106  : }

  0004d	c3		 ret	 0
?GetTeamMaxTime@ioFrozenBuff@@IAEKXZ ENDP		; ioFrozenBuff::GetTeamMaxTime
_TEXT	ENDS
PUBLIC	?GetTeamMinTime@ioFrozenBuff@@IAEKXZ		; ioFrozenBuff::GetTeamMinTime
; Function compile flags: /Ogsp
;	COMDAT ?GetTeamMinTime@ioFrozenBuff@@IAEKXZ
_TEXT	SEGMENT
?GetTeamMinTime@ioFrozenBuff@@IAEKXZ PROC		; ioFrozenBuff::GetTeamMinTime, COMDAT
; _this$ = ecx

; 109  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 110  : 	ioNpcChar *pNpc = ToNpcChar( m_pOwner );

  00004	ff b7 74 02 00
	00		 push	 DWORD PTR [edi+628]
  0000a	e8 00 00 00 00	 call	 ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ; ToNpcChar
  0000f	8b f0		 mov	 esi, eax
  00011	59		 pop	 ecx

; 111  : 	if( !pNpc || pNpc->GetNpcType() == NT_DEVELOPER_K )

  00012	85 f6		 test	 esi, esi
  00014	74 2f		 je	 SHORT $LN3@GetTeamMin
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00020	83 f8 01	 cmp	 eax, 1
  00023	74 20		 je	 SHORT $LN3@GetTeamMin

; 113  : 
; 114  : 	if( pNpc->IsMonsterLastBoss() || pNpc->IsMonsterHalfBoss() )

  00025	8b b6 68 48 00
	00		 mov	 esi, DWORD PTR [esi+18536]
  0002b	83 fe 02	 cmp	 esi, 2
  0002e	74 0d		 je	 SHORT $LN1@GetTeamMin
  00030	83 fe 01	 cmp	 esi, 1
  00033	74 08		 je	 SHORT $LN1@GetTeamMin

; 116  : 	return m_dwTeamMinTimeByNpc;

  00035	8b 87 9c 09 00
	00		 mov	 eax, DWORD PTR [edi+2460]
  0003b	eb 0e		 jmp	 SHORT $LN5@GetTeamMin
$LN1@GetTeamMin:

; 115  : 		return m_dwTeamMinTimeByBossNpc;

  0003d	8b 87 a4 09 00
	00		 mov	 eax, DWORD PTR [edi+2468]
  00043	eb 06		 jmp	 SHORT $LN5@GetTeamMin
$LN3@GetTeamMin:

; 112  : 		return m_dwTeamMinTime;

  00045	8b 87 94 09 00
	00		 mov	 eax, DWORD PTR [edi+2452]
$LN5@GetTeamMin:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 117  : }

  0004d	c3		 ret	 0
?GetTeamMinTime@ioFrozenBuff@@IAEKXZ ENDP		; ioFrozenBuff::GetTeamMinTime
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z	; ioINILoader::LoadInt_e<9>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z PROC	; ioINILoader::LoadInt_e<9>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@LoadInt_e
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@LoadInt_e
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@LoadInt_e
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@LoadInt_e
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@LoadInt_e
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@LoadInt_e
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@LoadInt_e
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@LoadInt_e
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@LoadInt_e:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00125	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00128	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0012b	50		 push	 eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00132	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00135	33 cd		 xor	 ecx, ebp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	c9		 leave
  0013d	c2 08 00	 ret	 8
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ; ioINILoader::LoadInt_e<13>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<13>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@LoadInt_e@2
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@LoadInt_e@2
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@LoadInt_e@2
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@LoadInt_e@2
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@LoadInt_e@2
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@LoadInt_e@2
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@LoadInt_e@2
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  00128	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00139	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  00144	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00150	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00155	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00161	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@LoadInt_e@2:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00187	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	50		 push	 eax
  0018e	8b ce		 mov	 ecx, esi
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	5e		 pop	 esi
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	c9		 leave
  001a2	c2 08 00	 ret	 8
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z ; ioINILoader::LoadInt_e<18>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<18>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadInt_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadInt_e@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadInt_e@3
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadInt_e@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadInt_e@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadInt_e@3
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadInt_e@3
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadInt_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadInt_e@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadInt_e@3
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadInt_e@3
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadInt_e@3
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadInt_e@3
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadInt_e@3
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadInt_e@3
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadInt_e@3
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadInt_e@3
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadInt_e@3
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadInt_e@3:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  001f8	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001fb	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ff	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00202	50		 push	 eax
  00203	8b ce		 mov	 ecx, esi
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0020b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020e	33 cd		 xor	 ecx, ebp
  00210	5e		 pop	 esi
  00211	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00216	c9		 leave
  00217	c2 08 00	 ret	 8
??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ; ioINILoader::LoadInt_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<14>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadInt_e@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadInt_e@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadInt_e@4
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadInt_e@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadInt_e@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadInt_e@4
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadInt_e@4
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadInt_e@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadInt_e@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadInt_e@4
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadInt_e@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadInt_e@4
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadInt_e@4
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadInt_e@4
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadInt_e@4
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadInt_e@4
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadInt_e@4
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadInt_e@4
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadInt_e@4
$LN79@LoadInt_e@4:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadInt_e@4:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  0019e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001a1	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a8	50		 push	 eax
  001a9	8b ce		 mov	 ecx, esi
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	5e		 pop	 esi
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	c9		 leave
  001bd	c2 08 00	 ret	 8
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z ; ioINILoader::LoadInt_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<23>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadInt_e@5
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadInt_e@5
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadInt_e@5
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadInt_e@5
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadInt_e@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadInt_e@5
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadInt_e@5
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadInt_e@5
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadInt_e@5
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadInt_e@5
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadInt_e@5
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadInt_e@5
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadInt_e@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadInt_e@5
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadInt_e@5
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadInt_e@5
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadInt_e@5
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadInt_e@5
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadInt_e@5
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadInt_e@5
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadInt_e@5
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadInt_e@5
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadInt_e@5
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadInt_e@5
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadInt_e@5
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadInt_e@5
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadInt_e@5
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN70@LoadInt_e@5:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN71@LoadInt_e@5:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@5
$LN72@LoadInt_e@5:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN73@LoadInt_e@5:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadInt_e@5
$LN75@LoadInt_e@5:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadInt_e@5
$LN76@LoadInt_e@5:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN77@LoadInt_e@5:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadInt_e@5
$LN78@LoadInt_e@5:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadInt_e@5
$LN79@LoadInt_e@5:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN80@LoadInt_e@5:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadInt_e@5
$LN81@LoadInt_e@5:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadInt_e@5
$LN82@LoadInt_e@5:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@5
$LN83@LoadInt_e@5:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadInt_e@5
$LN84@LoadInt_e@5:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadInt_e@5
$LN85@LoadInt_e@5:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@5
$LN86@LoadInt_e@5:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadInt_e@5
$LN87@LoadInt_e@5:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadInt_e@5
$LN88@LoadInt_e@5:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN89@LoadInt_e@5:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadInt_e@5
$LN90@LoadInt_e@5:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadInt_e@5
$LN91@LoadInt_e@5:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN92@LoadInt_e@5:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadInt_e@5
$LN93@LoadInt_e@5:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadInt_e@5
$LN94@LoadInt_e@5:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@5
$LN95@LoadInt_e@5:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadInt_e@5
$LN96@LoadInt_e@5:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@5:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadInt_e@5:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadInt_e@5
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadInt_e@5:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadInt_e@5
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadInt_e@5:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadInt_e@5

; 120  : 		return LoadInt(_k, i);

  00288	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0028b	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0028e	50		 push	 eax
  0028f	8b ce		 mov	 ecx, esi
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00297	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029a	5e		 pop	 esi
  0029b	33 cd		 xor	 ecx, ebp
  0029d	5b		 pop	 ebx
  0029e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a3	c9		 leave
  002a4	c2 08 00	 ret	 8
??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ; ioINILoader::LoadFloat_e<14>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<14>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadFloat_
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadFloat_
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadFloat_
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadFloat_
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadFloat_
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadFloat_
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadFloat_
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadFloat_:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0019e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001a3	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a7	51		 push	 ecx
  001a8	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b0	50		 push	 eax
  001b1	8b ce		 mov	 ecx, esi
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bc	33 cd		 xor	 ecx, ebp
  001be	5e		 pop	 esi
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	c9		 leave
  001c5	c2 08 00	 ret	 8
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ; ioINILoader::LoadInt_e<12>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<12>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@LoadInt_e@6
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@LoadInt_e@6
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@LoadInt_e@6
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@LoadInt_e@6
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@LoadInt_e@6
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@LoadInt_e@6
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@LoadInt_e@6
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@LoadInt_e@6
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@LoadInt_e@6
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@LoadInt_e@6
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@LoadInt_e@6
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@LoadInt_e@6
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@LoadInt_e@6
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@LoadInt_e@6
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@LoadInt_e@6
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@LoadInt_e@6
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@LoadInt_e@6
$LN81@LoadInt_e@6:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@6
$LN82@LoadInt_e@6:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@6
$LN83@LoadInt_e@6:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@LoadInt_e@6
$LN84@LoadInt_e@6:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@6
$LN86@LoadInt_e@6:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@LoadInt_e@6
$LN87@LoadInt_e@6:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@LoadInt_e@6
$LN88@LoadInt_e@6:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@6
$LN89@LoadInt_e@6:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@LoadInt_e@6
$LN90@LoadInt_e@6:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@LoadInt_e@6
$LN91@LoadInt_e@6:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@6
$LN92@LoadInt_e@6:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@LoadInt_e@6
$LN93@LoadInt_e@6:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@LoadInt_e@6
$LN94@LoadInt_e@6:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@6
$LN95@LoadInt_e@6:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@LoadInt_e@6
$LN96@LoadInt_e@6:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@6:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@LoadInt_e@6:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@LoadInt_e@6
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@LoadInt_e@6:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@LoadInt_e@6
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@LoadInt_e@6:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@LoadInt_e@6

; 120  : 		return LoadInt(_k, i);

  0018c	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018f	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00192	50		 push	 eax
  00193	8b ce		 mov	 ecx, esi
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019e	33 cd		 xor	 ecx, ebp
  001a0	5e		 pop	 esi
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	c9		 leave
  001a7	c2 08 00	 ret	 8
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<12>
_TEXT	ENDS
PUBLIC	??0tagBlowWoundAniInfo@@QAE@XZ			; tagBlowWoundAniInfo::tagBlowWoundAniInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\weaponattribute.h
xdata$x	SEGMENT
__ehfuncinfo$??0tagBlowWoundAniInfo@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0tagBlowWoundAniInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0tagBlowWoundAniInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$5
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagBlowWoundAniInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0tagBlowWoundAniInfo@@QAE@XZ PROC			; tagBlowWoundAniInfo::tagBlowWoundAniInfo, COMDAT
; _this$ = ecx

; 304  : 	tagBlowWoundAniInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagBlowWoundAniInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d6		 call	 esi
  00019	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001d	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00020	ff d6		 call	 esi
  00022	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00025	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00029	ff d6		 call	 esi
  0002b	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0002e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00032	ff d6		 call	 esi
  00034	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	ff d6		 call	 esi
  0003d	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  00040	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00044	ff d6		 call	 esi

; 305  : 	{
; 306  : 		Init();

  00046	8b cf		 mov	 ecx, edi
  00048	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0004c	e8 00 00 00 00	 call	 ?Init@tagBlowWoundAniInfo@@QAEXXZ ; tagBlowWoundAniInfo::Init

; 307  : 	}

  00051	8b c7		 mov	 eax, edi
  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 30	 add	 ecx, 48			; 00000030H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 40	 add	 ecx, 64			; 00000040H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 50	 add	 ecx, 80			; 00000050H
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagBlowWoundAniInfo@@QAE@XZ:
  00045	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00049	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagBlowWoundAniInfo@@QAE@XZ
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagBlowWoundAniInfo@@QAE@XZ ENDP			; tagBlowWoundAniInfo::tagBlowWoundAniInfo
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QAE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QAE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QAE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QAE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@_N@@QAE_N_N@Z			; CEncrypt<bool>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@_N@@QAE_N_N@Z
_TEXT	SEGMENT
_inValue$ = 8						; size = 1
_value$ = 11						; size = 1
??4?$CEncrypt@_N@@QAE_N_N@Z PROC			; CEncrypt<bool>::operator=, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		type value = inValue;

  00003	8a 45 08	 mov	 al, BYTE PTR _inValue$[ebp]
  00006	88 45 0b	 mov	 BYTE PTR _value$[ebp], al

; 227  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 0b	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 228  : #ifdef _NOTUSE
; 229  : 		m_value = inValue;
; 230  : 		Debug();
; 231  : #endif
; 232  : 		return value;

  00012	8a 45 0b	 mov	 al, BYTE PTR _value$[ebp]

; 233  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@_N@@QAE_N_N@Z ENDP			; CEncrypt<bool>::operator=
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofrozenbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioFrozenBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv12766 = -40						; size = 4
_i$528469 = -40						; size = 4
_i$528440 = -40						; size = 4
_rkLoader$GSCopy$ = -36					; size = 4
__k$528479 = -32					; size = 23
__k$528340 = -32					; size = 23
__k$528214 = -28					; size = 18
__k$528088 = -28					; size = 18
__k$527717 = -28					; size = 18
__k$527599 = -28					; size = 18
__k$528767 = -24					; size = 12
__k$528609 = -24					; size = 14
__k$527963 = -24					; size = 14
__k$527851 = -24					; size = 14
__k$527473 = -24					; size = 13
__k$527334 = -24					; size = 13
__k$527209 = -20					; size = 9
__k$527084 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioFrozenBuff@@UAEXAAVioINILoader@@@Z PROC	; ioFrozenBuff::LoadProperty, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 54   : 	ioBuff::LoadProperty( rkLoader );

  00016	57		 push	 edi
  00017	8b f1		 mov	 esi, ecx

; 71   : 
; 72   : 	m_FrozenType = (FrozenType)rkLoader.LoadInt_e( "frozen_type", FZT_NONE );

  00019	89 7d dc	 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  00021	33 db		 xor	 ebx, ebx
  00023	6a 02		 push	 2
  00025	c7 45 ec 80 8d
	93 b5		 mov	 DWORD PTR __k$527084[ebp], -1248621184 ; b5938d80H
  0002c	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR __k$527084[ebp+4], -1887009383 ; 8f868599H
  00033	8d 45 ec	 lea	 eax, DWORD PTR __k$527084[ebp]
  00036	88 5d f4	 mov	 BYTE PTR __k$527084[ebp+8], bl
  00039	59		 pop	 ecx
$LL106@LoadProper:

; 55   : 
; 56   : 	m_dwMaxTime = rkLoader.LoadInt_e( "max_time", 0 );

  0003a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00040	83 c0 04	 add	 eax, 4
  00043	49		 dec	 ecx
  00044	75 f4		 jne	 SHORT $LL106@LoadProper
  00046	53		 push	 ebx
  00047	8d 45 ec	 lea	 eax, DWORD PTR __k$527084[ebp]
  0004a	8b cf		 mov	 ecx, edi
  0004c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00052	50		 push	 eax
  00053	ff d7		 call	 edi
  00055	6a 02		 push	 2
  00057	89 86 78 09 00
	00		 mov	 DWORD PTR [esi+2424], eax

; 57   : 	m_dwMinTime = rkLoader.LoadInt_e( "min_time", 0 );	

  0005d	c7 45 ec 80 85
	85 b5		 mov	 DWORD PTR __k$527209[ebp], -1249540736 ; b5858580H
  00064	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR __k$527209[ebp+4], -1887009383 ; 8f868599H
  0006b	8d 45 ec	 lea	 eax, DWORD PTR __k$527209[ebp]
  0006e	88 5d f4	 mov	 BYTE PTR __k$527209[ebp+8], bl
  00071	59		 pop	 ecx
$LL212@LoadProper:
  00072	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00078	83 c0 04	 add	 eax, 4
  0007b	49		 dec	 ecx
  0007c	75 f4		 jne	 SHORT $LL212@LoadProper
  0007e	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00081	53		 push	 ebx
  00082	8d 45 ec	 lea	 eax, DWORD PTR __k$527209[ebp]
  00085	50		 push	 eax
  00086	ff d7		 call	 edi

; 58   : 	m_dwMaxTimeByNpc = rkLoader.LoadInt_e( "max_time_npc", m_dwMaxTime );

  00088	8b 8e 78 09 00
	00		 mov	 ecx, DWORD PTR [esi+2424]
  0008e	6a 03		 push	 3
  00090	89 86 7c 09 00
	00		 mov	 DWORD PTR [esi+2428], eax
  00096	c7 45 e8 80 8d
	93 b5		 mov	 DWORD PTR __k$527334[ebp], -1248621184 ; b5938d80H
  0009d	c7 45 ec 99 85
	86 8f		 mov	 DWORD PTR __k$527334[ebp+4], -1887009383 ; 8f868599H
  000a4	c7 45 f0 b2 82
	9b 89		 mov	 DWORD PTR __k$527334[ebp+8], -1986297166 ; 899b82b2H
  000ab	8d 45 e8	 lea	 eax, DWORD PTR __k$527334[ebp]
  000ae	88 5d f4	 mov	 BYTE PTR __k$527334[ebp+12], bl
  000b1	5a		 pop	 edx
$LL318@LoadProper:
  000b2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b8	83 c0 04	 add	 eax, 4
  000bb	4a		 dec	 edx
  000bc	75 f4		 jne	 SHORT $LL318@LoadProper
  000be	51		 push	 ecx
  000bf	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000c2	8d 45 e8	 lea	 eax, DWORD PTR __k$527334[ebp]
  000c5	50		 push	 eax
  000c6	ff d7		 call	 edi

; 59   : 	m_dwMinTimeByNpc = rkLoader.LoadInt_e( "min_time_npc", m_dwMinTime );

  000c8	8b 8e 7c 09 00
	00		 mov	 ecx, DWORD PTR [esi+2428]
  000ce	6a 03		 push	 3
  000d0	89 86 80 09 00
	00		 mov	 DWORD PTR [esi+2432], eax
  000d6	c7 45 e8 80 85
	85 b5		 mov	 DWORD PTR __k$527473[ebp], -1249540736 ; b5858580H
  000dd	c7 45 ec 99 85
	86 8f		 mov	 DWORD PTR __k$527473[ebp+4], -1887009383 ; 8f868599H
  000e4	c7 45 f0 b2 82
	9b 89		 mov	 DWORD PTR __k$527473[ebp+8], -1986297166 ; 899b82b2H
  000eb	8d 45 e8	 lea	 eax, DWORD PTR __k$527473[ebp]
  000ee	88 5d f4	 mov	 BYTE PTR __k$527473[ebp+12], bl
  000f1	5a		 pop	 edx
$LL424@LoadProper:
  000f2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f8	83 c0 04	 add	 eax, 4
  000fb	4a		 dec	 edx
  000fc	75 f4		 jne	 SHORT $LL424@LoadProper
  000fe	51		 push	 ecx
  000ff	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00102	8d 45 e8	 lea	 eax, DWORD PTR __k$527473[ebp]
  00105	50		 push	 eax
  00106	ff d7		 call	 edi

; 60   : 	m_dwMaxTimeByBossNpc = rkLoader.LoadInt_e( "max_time_boss_npc", m_dwMaxTimeByNpc );

  00108	8b 8e 80 09 00
	00		 mov	 ecx, DWORD PTR [esi+2432]
  0010e	6a 04		 push	 4
  00110	89 86 84 09 00
	00		 mov	 DWORD PTR [esi+2436], eax
  00116	c7 45 e4 80 8d
	93 b5		 mov	 DWORD PTR __k$527599[ebp], -1248621184 ; b5938d80H
  0011d	c7 45 e8 99 85
	86 8f		 mov	 DWORD PTR __k$527599[ebp+4], -1887009383 ; 8f868599H
  00124	c7 45 ec b2 8e
	84 99		 mov	 DWORD PTR __k$527599[ebp+8], -1719365966 ; 99848eb2H
  0012b	c7 45 f0 9e b3
	85 9a		 mov	 DWORD PTR __k$527599[ebp+12], -1702513762 ; 9a85b39eH
  00132	8d 45 e4	 lea	 eax, DWORD PTR __k$527599[ebp]
  00135	66 c7 45 f4 8e
	00		 mov	 WORD PTR __k$527599[ebp+16], 142 ; 0000008eH
  0013b	5a		 pop	 edx
$LL530@LoadProper:
  0013c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00142	83 c0 04	 add	 eax, 4
  00145	4a		 dec	 edx
  00146	75 f4		 jne	 SHORT $LL530@LoadProper
  00148	80 75 f4 ed	 xor	 BYTE PTR __k$527599[ebp+16], -19 ; ffffffedH
  0014c	51		 push	 ecx
  0014d	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00150	8d 45 e4	 lea	 eax, DWORD PTR __k$527599[ebp]
  00153	50		 push	 eax
  00154	ff d7		 call	 edi

; 61   : 	m_dwMinTimeByBossNpc = rkLoader.LoadInt_e( "min_time_boss_npc", m_dwMinTimeByNpc );

  00156	8b 8e 84 09 00
	00		 mov	 ecx, DWORD PTR [esi+2436]
  0015c	6a 04		 push	 4
  0015e	89 86 88 09 00
	00		 mov	 DWORD PTR [esi+2440], eax
  00164	c7 45 e4 80 85
	85 b5		 mov	 DWORD PTR __k$527717[ebp], -1249540736 ; b5858580H
  0016b	c7 45 e8 99 85
	86 8f		 mov	 DWORD PTR __k$527717[ebp+4], -1887009383 ; 8f868599H
  00172	c7 45 ec b2 8e
	84 99		 mov	 DWORD PTR __k$527717[ebp+8], -1719365966 ; 99848eb2H
  00179	c7 45 f0 9e b3
	85 9a		 mov	 DWORD PTR __k$527717[ebp+12], -1702513762 ; 9a85b39eH
  00180	8d 45 e4	 lea	 eax, DWORD PTR __k$527717[ebp]
  00183	66 c7 45 f4 8e
	00		 mov	 WORD PTR __k$527717[ebp+16], 142 ; 0000008eH
  00189	5a		 pop	 edx
$LL636@LoadProper:
  0018a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00190	83 c0 04	 add	 eax, 4
  00193	4a		 dec	 edx
  00194	75 f4		 jne	 SHORT $LL636@LoadProper
  00196	80 75 f4 ed	 xor	 BYTE PTR __k$527717[ebp+16], -19 ; ffffffedH
  0019a	51		 push	 ecx
  0019b	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0019e	8d 45 e4	 lea	 eax, DWORD PTR __k$527717[ebp]
  001a1	50		 push	 eax
  001a2	ff d7		 call	 edi
  001a4	6a 03		 push	 3
  001a6	89 86 8c 09 00
	00		 mov	 DWORD PTR [esi+2444], eax

; 62   : 
; 63   : 	m_dwTeamMaxTime = rkLoader.LoadInt_e( "team_max_time", 0 );

  001ac	c7 45 e8 99 89
	8a 87		 mov	 DWORD PTR __k$527851[ebp], -2020963943 ; 878a8999H
  001b3	c7 45 ec b2 81
	8a 92		 mov	 DWORD PTR __k$527851[ebp+4], -1836416590 ; 928a81b2H
  001ba	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$527851[ebp+8], -2021484366 ; 878298b2H
  001c1	8d 45 e8	 lea	 eax, DWORD PTR __k$527851[ebp]
  001c4	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$527851[ebp+12], 136 ; 00000088H
  001ca	59		 pop	 ecx
$LL742@LoadProper:
  001cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d1	83 c0 04	 add	 eax, 4
  001d4	49		 dec	 ecx
  001d5	75 f4		 jne	 SHORT $LL742@LoadProper
  001d7	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001da	80 75 f4 ed	 xor	 BYTE PTR __k$527851[ebp+12], -19 ; ffffffedH
  001de	53		 push	 ebx
  001df	8d 45 e8	 lea	 eax, DWORD PTR __k$527851[ebp]
  001e2	50		 push	 eax
  001e3	ff d7		 call	 edi
  001e5	6a 03		 push	 3
  001e7	89 86 90 09 00
	00		 mov	 DWORD PTR [esi+2448], eax

; 64   : 	m_dwTeamMinTime = rkLoader.LoadInt_e( "team_min_time", 0 );

  001ed	c7 45 e8 99 89
	8a 87		 mov	 DWORD PTR __k$527963[ebp], -2020963943 ; 878a8999H
  001f4	c7 45 ec b2 81
	82 84		 mov	 DWORD PTR __k$527963[ebp+4], -2071821902 ; 848281b2H
  001fb	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$527963[ebp+8], -2021484366 ; 878298b2H
  00202	8d 45 e8	 lea	 eax, DWORD PTR __k$527963[ebp]
  00205	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$527963[ebp+12], 136 ; 00000088H
  0020b	59		 pop	 ecx
$LL848@LoadProper:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	49		 dec	 ecx
  00216	75 f4		 jne	 SHORT $LL848@LoadProper
  00218	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0021b	80 75 f4 ed	 xor	 BYTE PTR __k$527963[ebp+12], -19 ; ffffffedH
  0021f	53		 push	 ebx
  00220	8d 45 e8	 lea	 eax, DWORD PTR __k$527963[ebp]
  00223	50		 push	 eax
  00224	ff d7		 call	 edi

; 65   : 	m_dwTeamMaxTimeByNpc = rkLoader.LoadInt_e( "team_max_time_npc", m_dwTeamMaxTime );

  00226	8b 8e 90 09 00
	00		 mov	 ecx, DWORD PTR [esi+2448]
  0022c	6a 04		 push	 4
  0022e	89 86 94 09 00
	00		 mov	 DWORD PTR [esi+2452], eax
  00234	c7 45 e4 99 89
	8a 87		 mov	 DWORD PTR __k$528088[ebp], -2020963943 ; 878a8999H
  0023b	c7 45 e8 b2 81
	8a 92		 mov	 DWORD PTR __k$528088[ebp+4], -1836416590 ; 928a81b2H
  00242	c7 45 ec b2 98
	82 87		 mov	 DWORD PTR __k$528088[ebp+8], -2021484366 ; 878298b2H
  00249	c7 45 f0 88 b3
	85 9a		 mov	 DWORD PTR __k$528088[ebp+12], -1702513784 ; 9a85b388H
  00250	8d 45 e4	 lea	 eax, DWORD PTR __k$528088[ebp]
  00253	66 c7 45 f4 8e
	00		 mov	 WORD PTR __k$528088[ebp+16], 142 ; 0000008eH
  00259	5a		 pop	 edx
$LL954@LoadProper:
  0025a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00260	83 c0 04	 add	 eax, 4
  00263	4a		 dec	 edx
  00264	75 f4		 jne	 SHORT $LL954@LoadProper
  00266	80 75 f4 ed	 xor	 BYTE PTR __k$528088[ebp+16], -19 ; ffffffedH
  0026a	51		 push	 ecx
  0026b	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0026e	8d 45 e4	 lea	 eax, DWORD PTR __k$528088[ebp]
  00271	50		 push	 eax
  00272	ff d7		 call	 edi

; 66   : 	m_dwTeamMinTimeByNpc = rkLoader.LoadInt_e( "team_min_time_npc", m_dwTeamMinTime );

  00274	8b 8e 94 09 00
	00		 mov	 ecx, DWORD PTR [esi+2452]
  0027a	6a 04		 push	 4
  0027c	89 86 98 09 00
	00		 mov	 DWORD PTR [esi+2456], eax
  00282	c7 45 e4 99 89
	8a 87		 mov	 DWORD PTR __k$528214[ebp], -2020963943 ; 878a8999H
  00289	c7 45 e8 b2 81
	82 84		 mov	 DWORD PTR __k$528214[ebp+4], -2071821902 ; 848281b2H
  00290	c7 45 ec b2 98
	82 87		 mov	 DWORD PTR __k$528214[ebp+8], -2021484366 ; 878298b2H
  00297	c7 45 f0 88 b3
	85 9a		 mov	 DWORD PTR __k$528214[ebp+12], -1702513784 ; 9a85b388H
  0029e	8d 45 e4	 lea	 eax, DWORD PTR __k$528214[ebp]
  002a1	66 c7 45 f4 8e
	00		 mov	 WORD PTR __k$528214[ebp+16], 142 ; 0000008eH
  002a7	5a		 pop	 edx
$LL1060@LoadProper:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	4a		 dec	 edx
  002b2	75 f4		 jne	 SHORT $LL1060@LoadProper
  002b4	80 75 f4 ed	 xor	 BYTE PTR __k$528214[ebp+16], -19 ; ffffffedH
  002b8	51		 push	 ecx
  002b9	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002bc	8d 45 e4	 lea	 eax, DWORD PTR __k$528214[ebp]
  002bf	50		 push	 eax
  002c0	ff d7		 call	 edi

; 67   : 	m_dwTeamMaxTimeByBossNpc = rkLoader.LoadInt_e( "team_max_time_boss_npc", m_dwTeamMaxTimeByNpc );

  002c2	8b 8e 98 09 00
	00		 mov	 ecx, DWORD PTR [esi+2456]
  002c8	6a 05		 push	 5
  002ca	89 86 9c 09 00
	00		 mov	 DWORD PTR [esi+2460], eax
  002d0	c7 45 e0 99 89
	8a 87		 mov	 DWORD PTR __k$528340[ebp], -2020963943 ; 878a8999H
  002d7	c7 45 e4 b2 81
	8a 92		 mov	 DWORD PTR __k$528340[ebp+4], -1836416590 ; 928a81b2H
  002de	c7 45 e8 b2 98
	82 87		 mov	 DWORD PTR __k$528340[ebp+8], -2021484366 ; 878298b2H
  002e5	c7 45 ec 88 b3
	89 85		 mov	 DWORD PTR __k$528340[ebp+12], -2054573176 ; 8589b388H
  002ec	c7 45 f0 9e 9f
	b4 84		 mov	 DWORD PTR __k$528340[ebp+16], -2068537442 ; 84b49f9eH
  002f3	66 c7 45 f4 9d
	8f		 mov	 WORD PTR __k$528340[ebp+20], 36765 ; 00008f9dH
  002f9	8d 45 e0	 lea	 eax, DWORD PTR __k$528340[ebp]
  002fc	88 5d f6	 mov	 BYTE PTR __k$528340[ebp+22], bl
  002ff	5a		 pop	 edx
$LL1166@LoadProper:
  00300	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00306	83 c0 04	 add	 eax, 4
  00309	4a		 dec	 edx
  0030a	75 f4		 jne	 SHORT $LL1166@LoadProper
  0030c	c7 45 d8 14 00
	00 00		 mov	 DWORD PTR _i$528440[ebp], 20 ; 00000014H
$LL1163@LoadProper:
  00313	8b 45 d8	 mov	 eax, DWORD PTR _i$528440[ebp]
  00316	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0031b	79 05		 jns	 SHORT $LN1545@LoadProper
  0031d	48		 dec	 eax
  0031e	83 c8 fc	 or	 eax, -4			; fffffffcH
  00321	40		 inc	 eax
$LN1545@LoadProper:
  00322	b2 ed		 mov	 dl, -19			; ffffffedH
  00324	2a d0		 sub	 dl, al
  00326	8b 45 d8	 mov	 eax, DWORD PTR _i$528440[ebp]
  00329	30 54 05 e0	 xor	 BYTE PTR __k$528340[ebp+eax], dl
  0032d	ff 45 d8	 inc	 DWORD PTR _i$528440[ebp]
  00330	83 7d d8 16	 cmp	 DWORD PTR _i$528440[ebp], 22 ; 00000016H
  00334	7c dd		 jl	 SHORT $LL1163@LoadProper
  00336	51		 push	 ecx
  00337	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0033a	8d 45 e0	 lea	 eax, DWORD PTR __k$528340[ebp]
  0033d	50		 push	 eax
  0033e	ff d7		 call	 edi

; 68   : 	m_dwTeamMinTimeByBossNpc = rkLoader.LoadInt_e( "team_min_time_boss_npc", m_dwTeamMinTimeByNpc );

  00340	8b 8e 9c 09 00
	00		 mov	 ecx, DWORD PTR [esi+2460]
  00346	6a 05		 push	 5
  00348	89 86 a0 09 00
	00		 mov	 DWORD PTR [esi+2464], eax
  0034e	c7 45 e0 99 89
	8a 87		 mov	 DWORD PTR __k$528479[ebp], -2020963943 ; 878a8999H
  00355	c7 45 e4 b2 81
	82 84		 mov	 DWORD PTR __k$528479[ebp+4], -2071821902 ; 848281b2H
  0035c	c7 45 e8 b2 98
	82 87		 mov	 DWORD PTR __k$528479[ebp+8], -2021484366 ; 878298b2H
  00363	c7 45 ec 88 b3
	89 85		 mov	 DWORD PTR __k$528479[ebp+12], -2054573176 ; 8589b388H
  0036a	c7 45 f0 9e 9f
	b4 84		 mov	 DWORD PTR __k$528479[ebp+16], -2068537442 ; 84b49f9eH
  00371	66 c7 45 f4 9d
	8f		 mov	 WORD PTR __k$528479[ebp+20], 36765 ; 00008f9dH
  00377	8d 45 e0	 lea	 eax, DWORD PTR __k$528479[ebp]
  0037a	88 5d f6	 mov	 BYTE PTR __k$528479[ebp+22], bl
  0037d	5a		 pop	 edx
$LL1272@LoadProper:
  0037e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00384	83 c0 04	 add	 eax, 4
  00387	4a		 dec	 edx
  00388	75 f4		 jne	 SHORT $LL1272@LoadProper
  0038a	c7 45 d8 14 00
	00 00		 mov	 DWORD PTR _i$528469[ebp], 20 ; 00000014H
$LL1269@LoadProper:
  00391	8b 45 d8	 mov	 eax, DWORD PTR _i$528469[ebp]
  00394	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00399	79 05		 jns	 SHORT $LN1546@LoadProper
  0039b	48		 dec	 eax
  0039c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0039f	40		 inc	 eax
$LN1546@LoadProper:
  003a0	b2 ed		 mov	 dl, -19			; ffffffedH
  003a2	2a d0		 sub	 dl, al
  003a4	8b 45 d8	 mov	 eax, DWORD PTR _i$528469[ebp]
  003a7	30 54 05 e0	 xor	 BYTE PTR __k$528479[ebp+eax], dl
  003ab	ff 45 d8	 inc	 DWORD PTR _i$528469[ebp]
  003ae	83 7d d8 16	 cmp	 DWORD PTR _i$528469[ebp], 22 ; 00000016H
  003b2	7c dd		 jl	 SHORT $LL1269@LoadProper
  003b4	51		 push	 ecx
  003b5	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  003b8	8d 45 e0	 lea	 eax, DWORD PTR __k$528479[ebp]
  003bb	50		 push	 eax
  003bc	ff d7		 call	 edi
  003be	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax

; 69   : 
; 70   : 	m_fDecreaseRate = rkLoader.LoadFloat_e( "decrease_rate", FLOAT1 );

  003c4	b8 01 00 00 00	 mov	 eax, 1
  003c9	6a 03		 push	 3
  003cb	c7 45 e8 89 89
	88 98		 mov	 DWORD PTR __k$528609[ebp], -1735882359 ; 98888989H
  003d2	c7 45 ec 88 8d
	98 8f		 mov	 DWORD PTR __k$528609[ebp+4], -1885827704 ; 8f988d88H
  003d9	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$528609[ebp+8], -1635082574 ; 9e8a9eb2H
  003e0	8d 4d e8	 lea	 ecx, DWORD PTR __k$528609[ebp]
  003e3	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$528609[ebp+12], 136 ; 00000088H
  003e9	5a		 pop	 edx
$LL1380@LoadProper:
  003ea	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  003f0	83 c1 04	 add	 ecx, 4
  003f3	4a		 dec	 edx
  003f4	75 f4		 jne	 SHORT $LL1380@LoadProper
  003f6	80 75 f4 ed	 xor	 BYTE PTR __k$528609[ebp+12], -19 ; ffffffedH
  003fa	89 45 d8	 mov	 DWORD PTR tv12766[ebp], eax
  003fd	db 45 d8	 fild	 DWORD PTR tv12766[ebp]
  00400	85 c0		 test	 eax, eax
  00402	79 06		 jns	 SHORT $LN1547@LoadProper
  00404	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1547@LoadProper:
  0040a	51		 push	 ecx
  0040b	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0040e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00411	8d 45 e8	 lea	 eax, DWORD PTR __k$528609[ebp]
  00414	50		 push	 eax
  00415	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0041b	d9 9e ac 09 00
	00		 fstp	 DWORD PTR [esi+2476]
  00421	6a 02		 push	 2

; 71   : 
; 72   : 	m_FrozenType = (FrozenType)rkLoader.LoadInt_e( "frozen_type", FZT_NONE );

  00423	c7 45 e8 8b 9e
	84 90		 mov	 DWORD PTR __k$528767[ebp], -1870356853 ; 90849e8bH
  0042a	c7 45 ec 88 82
	b4 9e		 mov	 DWORD PTR __k$528767[ebp+4], -1632337272 ; 9eb48288H
  00431	8d 45 e8	 lea	 eax, DWORD PTR __k$528767[ebp]
  00434	c7 45 f0 94 9c
	8e 00		 mov	 DWORD PTR __k$528767[ebp+8], 9346196 ; 008e9c94H
  0043b	59		 pop	 ecx
$LL1486@LoadProper:
  0043c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00442	83 c0 04	 add	 eax, 4
  00445	49		 dec	 ecx
  00446	75 f4		 jne	 SHORT $LL1486@LoadProper
  00448	6a 08		 push	 8
  0044a	58		 pop	 eax
$LL1483@LoadProper:
  0044b	8b c8		 mov	 ecx, eax
  0044d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00453	79 05		 jns	 SHORT $LN1548@LoadProper
  00455	49		 dec	 ecx
  00456	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00459	41		 inc	 ecx
$LN1548@LoadProper:
  0045a	b2 ed		 mov	 dl, -19			; ffffffedH
  0045c	2a d1		 sub	 dl, cl
  0045e	30 54 05 e8	 xor	 BYTE PTR __k$528767[ebp+eax], dl
  00462	40		 inc	 eax
  00463	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00466	7c e3		 jl	 SHORT $LL1483@LoadProper
  00468	8b 4d dc	 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0046b	53		 push	 ebx
  0046c	8d 45 e8	 lea	 eax, DWORD PTR __k$528767[ebp]
  0046f	50		 push	 eax
  00470	ff d7		 call	 edi

; 73   : }

  00472	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00475	5f		 pop	 edi
  00476	89 86 74 09 00
	00		 mov	 DWORD PTR [esi+2420], eax
  0047c	5e		 pop	 esi
  0047d	33 cd		 xor	 ecx, ebp
  0047f	5b		 pop	 ebx
  00480	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00485	c9		 leave
  00486	c2 04 00	 ret	 4
?LoadProperty@ioFrozenBuff@@UAEXAAVioINILoader@@@Z ENDP	; ioFrozenBuff::LoadProperty
_TEXT	ENDS
EXTRN	?GetValue@ioGrowthNormalUpInfo@@QAEMPAVioPlayStage@@@Z:PROC ; ioGrowthNormalUpInfo::GetValue
EXTRN	?GetPlayStage@ioItemMaker@@QAEPAVioPlayStage@@XZ:PROC ; ioItemMaker::GetPlayStage
EXTRN	?GetSingleton@ioItemMaker@@SAAAV1@XZ:PROC	; ioItemMaker::GetSingleton
EXTRN	?GetGrowthUpInfoForItem@ioBuff@@QAEPAVioGrowthUpInfo@@H@Z:PROC ; ioBuff::GetGrowthUpInfoForItem
EXTRN	?GetAnimationEndTime@ioBaseChar@@QAEKXZ:PROC	; ioBaseChar::GetAnimationEndTime
EXTRN	?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z:PROC ; ioGameEntity::PlaySoundA
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?CheckBuffDesc@ioBuff@@IAEXXZ:PROC		; ioBuff::CheckBuffDesc
EXTRN	?CheckChangeColor@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeColor
EXTRN	?CheckChangeSkill@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeSkill
EXTRN	?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleHelmet
EXTRN	?CheckInvisibleCloak@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleCloak
EXTRN	?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleWeapon
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__ftol2:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioFrozenBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$528903 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$528912 = 11					; size = 1
_value$528908 = 11					; size = 1
?StartBuff@ioFrozenBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioFrozenBuff::StartBuff, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : #ifndef SHIPPING 
; 122  : 	if( Setting::ShowExtraInfo() )
; 123  : 	{
; 124  : 		LOG.PrintTimeAndLog( 0, "BuffCheck - %s, StartTime: %d", m_Name.c_str(), FRAMEGETTIME() );
; 125  : 	}
; 126  : #endif
; 127  : 
; 128  : 	if( !pOwner )

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 c0		 test	 eax, eax
  0000b	0f 84 2f 01 00
	00		 je	 $LN1@StartBuff

; 129  : 		return;
; 130  : 
; 131  : 	m_pOwner = pOwner;

  00011	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  00017	57		 push	 edi

; 132  : 	m_OwnerName = pOwner->GetCharName();

  00018	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  0001d	50		 push	 eax
  0001e	8d 8e 78 02 00
	00		 lea	 ecx, DWORD PTR [esi+632]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 133  : 
; 134  : 	CheckInvisibleWeapon( false );

  0002a	6a 00		 push	 0
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleWeapon

; 135  : 	CheckInvisibleCloak( false );

  00033	6a 00		 push	 0
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?CheckInvisibleCloak@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleCloak

; 136  : 	CheckInvisibleHelmet( false );

  0003c	6a 00		 push	 0
  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleHelmet

; 137  : 
; 138  : 	CheckChangeSkill( true );

  00045	6a 01		 push	 1
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?CheckChangeSkill@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeSkill

; 139  : 	CheckChangeColor( true );

  0004e	6a 01		 push	 1
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?CheckChangeColor@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeColor

; 140  : 	CheckBuffDesc();

  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?CheckBuffDesc@ioBuff@@IAEXXZ ; ioBuff::CheckBuffDesc

; 141  : 
; 142  : 	m_dwBuffEndTime = FRAMEGETTIME() + GetBuffDuration();

  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00064	8b c8		 mov	 ecx, eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0006c	8b ce		 mov	 ecx, esi
  0006e	8b f8		 mov	 edi, eax
  00070	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00075	03 f8		 add	 edi, eax
  00077	8d 45 08	 lea	 eax, DWORD PTR _value$528903[ebp]
  0007a	50		 push	 eax
  0007b	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00081	89 7d 08	 mov	 DWORD PTR _value$528903[ebp], edi
  00084	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 143  : 	m_bLive = true;

  00089	8d 45 0b	 lea	 eax, DWORD PTR _value$528908[ebp]
  0008c	50		 push	 eax
  0008d	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  00093	c6 45 0b 01	 mov	 BYTE PTR _value$528908[ebp], 1
  00097	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 144  : 	m_bNotFrozen = true;
; 145  : 
; 146  : 	if( !m_pOwner ) return;

  0009c	83 be 74 02 00
	00 00		 cmp	 DWORD PTR [esi+628], 0
  000a3	c6 86 71 09 00
	00 01		 mov	 BYTE PTR [esi+2417], 1
  000aa	0f 84 8f 00 00
	00		 je	 $LN19@StartBuff

; 147  : 	
; 148  : 	if( !m_LoopSound.IsEmpty() )

  000b0	8d be fc 05 00
	00		 lea	 edi, DWORD PTR [esi+1532]
  000b6	8b cf		 mov	 ecx, edi
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000be	84 c0		 test	 al, al
  000c0	75 27		 jne	 SHORT $LN15@StartBuff

; 149  : 	{
; 150  : 		m_LoopSoundID = m_pOwner->PlaySound( m_LoopSound, true );

  000c2	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000c8	6a 01		 push	 1
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 ?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z ; ioGameEntity::PlaySoundA
  000d0	89 86 0c 06 00
	00		 mov	 DWORD PTR [esi+1548], eax

; 151  : 		m_bLoopSoundPlayed = true;

  000d6	8d 45 0b	 lea	 eax, DWORD PTR _value$528912[ebp]
  000d9	50		 push	 eax
  000da	8d 8e 60 08 00
	00		 lea	 ecx, DWORD PTR [esi+2144]
  000e0	c6 45 0b 01	 mov	 BYTE PTR _value$528912[ebp], 1
  000e4	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN15@StartBuff:

; 152  : 	}
; 153  : 
; 154  : 	m_dwAniEndTime = m_pOwner->GetAnimationEndTime();

  000e9	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000ef	e8 00 00 00 00	 call	 ?GetAnimationEndTime@ioBaseChar@@QAEKXZ ; ioBaseChar::GetAnimationEndTime

; 155  : 
; 156  : 	bool bPreFrozen = false;
; 157  : 	if( m_pOwner->GetPreState() == CS_FROZEN )
; 158  : 		bPreFrozen = true;
; 159  : 
; 160  : 	if( !m_ItemName.IsEmpty() )

  000f4	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  000fa	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00106	84 c0		 test	 al, al
  00108	75 35		 jne	 SHORT $LN19@StartBuff

; 161  : 	{
; 162  : 		ioGrowthUpInfo *pUpInfo = GetGrowthUpInfoForItem(GT_FORZEN_DURATION);

  0010a	6a 17		 push	 23			; 00000017H
  0010c	8b ce		 mov	 ecx, esi
  0010e	e8 00 00 00 00	 call	 ?GetGrowthUpInfoForItem@ioBuff@@QAEPAVioGrowthUpInfo@@H@Z ; ioBuff::GetGrowthUpInfoForItem

; 163  : 		ioGrowthNormalUpInfo *pNormalInfo = ToNormalUpInfo( pUpInfo );

  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?ToNormalUpInfo@@YAPAVioGrowthNormalUpInfo@@PAVioGrowthUpInfo@@@Z ; ToNormalUpInfo
  00119	8b f8		 mov	 edi, eax
  0011b	59		 pop	 ecx

; 164  : 		if( pNormalInfo )

  0011c	85 ff		 test	 edi, edi
  0011e	74 1f		 je	 SHORT $LN19@StartBuff

; 165  : 		{
; 166  : 			ioPlayStage *pStage = g_ItemMaker.GetPlayStage();

  00120	e8 00 00 00 00	 call	 ?GetSingleton@ioItemMaker@@SAAAV1@XZ ; ioItemMaker::GetSingleton
  00125	8b c8		 mov	 ecx, eax
  00127	e8 00 00 00 00	 call	 ?GetPlayStage@ioItemMaker@@QAEPAVioPlayStage@@XZ ; ioItemMaker::GetPlayStage

; 167  : 			m_dwExtraFrozenDuration = (DWORD)pNormalInfo->GetValue(pStage);

  0012c	50		 push	 eax
  0012d	8b cf		 mov	 ecx, edi
  0012f	e8 00 00 00 00	 call	 ?GetValue@ioGrowthNormalUpInfo@@QAEMPAVioPlayStage@@@Z ; ioGrowthNormalUpInfo::GetValue
  00134	e8 00 00 00 00	 call	 __ftol2
  00139	89 86 a8 09 00
	00		 mov	 DWORD PTR [esi+2472], eax
$LN19@StartBuff:
  0013f	5f		 pop	 edi
$LN1@StartBuff:
  00140	5e		 pop	 esi

; 168  : 		}
; 169  : 	}
; 170  : 	/*
; 171  : 	bool bEnableTeamAttack = pOwner->IsEnableTeamAttack();
; 172  : 
; 173  : 	if( !bEnableTeamAttack && m_bTeamAttack )
; 174  : 		m_pOwner->SetFrozenState( bPreFrozen, GetTeamMinTime()+m_dwExtraFrozenDuration, GetTeamMaxTime()+m_dwExtraFrozenDuration );
; 175  : 	else
; 176  : 		m_pOwner->SetFrozenState( bPreFrozen, GetMinTime()+m_dwExtraFrozenDuration, GetMaxTime()+m_dwExtraFrozenDuration );
; 177  : 		*/
; 178  : }

  00141	5d		 pop	 ebp
  00142	c2 04 00	 ret	 4
?StartBuff@ioFrozenBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioFrozenBuff::StartBuff
_TEXT	ENDS
EXTRN	?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z:PROC ; ioBaseChar::RotateByBuffCollision
EXTRN	__imp_??9ioHashString@@QBE_NABV0@@Z:PROC
EXTRN	?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z:PROC	; ioGlobalTimer::CalcGlobalGapTime
EXTRN	?GetSingleton@ioGlobalTimer@@SAAAV1@XZ:PROC	; ioGlobalTimer::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioFrozenBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_value$528924 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$528937 = 11					; size = 1
_value$528929 = 11					; size = 1
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioFrozenBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioFrozenBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 	m_pOwner = pOwner;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 183  : 
; 184  : 	DWORD dwGlobalTimeGap = g_GlobalTimer.CalcGlobalGapTime( dwGlobalTime );

  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  00014	e8 00 00 00 00	 call	 ?GetSingleton@ioGlobalTimer@@SAAAV1@XZ ; ioGlobalTimer::GetSingleton
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z ; ioGlobalTimer::CalcGlobalGapTime

; 185  : 
; 186  : 	if( m_iOperationType != OT_SWITCH )

  00020	83 be d0 03 00
	00 02		 cmp	 DWORD PTR [esi+976], 2
  00027	8b d8		 mov	 ebx, eax
  00029	74 32		 je	 SHORT $LN9@ApplyStart

; 187  : 	{
; 188  : 		if( dwGlobalTimeGap > dwGapTime )

  0002b	8b 7d 10	 mov	 edi, DWORD PTR _dwGapTime$[ebp]
  0002e	3b df		 cmp	 ebx, edi
  00030	76 07		 jbe	 SHORT $LN5@ApplyStart
$LN17@ApplyStart:

; 189  : 			return false;

  00032	32 c0		 xor	 al, al
  00034	e9 f8 00 00 00	 jmp	 $LN7@ApplyStart
$LN5@ApplyStart:

; 190  : 
; 191  : 		dwGapTime -= dwGlobalTimeGap;
; 192  : 		m_dwBuffEndTime = FRAMEGETTIME() + dwGapTime;

  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0003f	8b c8		 mov	 ecx, eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00047	2b fb		 sub	 edi, ebx
  00049	03 c7		 add	 eax, edi
  0004b	89 45 08	 mov	 DWORD PTR _value$528924[ebp], eax
  0004e	8d 45 08	 lea	 eax, DWORD PTR _value$528924[ebp]
  00051	50		 push	 eax
  00052	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00058	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
$LN9@ApplyStart:

; 193  : 	}
; 194  : 
; 195  : 	m_bLive = true;

  0005d	8d 45 0b	 lea	 eax, DWORD PTR _value$528929[ebp]
  00060	50		 push	 eax
  00061	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  00067	c6 45 0b 01	 mov	 BYTE PTR _value$528929[ebp], 1
  0006b	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 196  : 	m_bNotFrozen = true;
; 197  : 
; 198  : 	if( !m_pOwner ) return false;

  00070	33 db		 xor	 ebx, ebx
  00072	c6 86 71 09 00
	00 01		 mov	 BYTE PTR [esi+2417], 1
  00079	39 9e 74 02 00
	00		 cmp	 DWORD PTR [esi+628], ebx
  0007f	74 b1		 je	 SHORT $LN17@ApplyStart

; 199  : 
; 200  : 	if( m_CreatorLookType != CLT_NONE && !m_CreateChar.IsEmpty() )

  00081	39 9e f4 08 00
	00		 cmp	 DWORD PTR [esi+2292], ebx
  00087	74 3c		 je	 SHORT $LN2@ApplyStart
  00089	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  0008f	8b cf		 mov	 ecx, edi
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00097	84 c0		 test	 al, al
  00099	75 2a		 jne	 SHORT $LN2@ApplyStart

; 201  : 	{
; 202  : 		if( m_CreateChar != m_pOwner->GetCharName() )

  0009b	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  000a1	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  000a6	50		 push	 eax
  000a7	8b cf		 mov	 ecx, edi
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??9ioHashString@@QBE_NABV0@@Z
  000af	84 c0		 test	 al, al
  000b1	74 12		 je	 SHORT $LN2@ApplyStart

; 203  : 			m_pOwner->RotateByBuffCollision( m_CreateChar, m_CreatorLookType );

  000b3	ff b6 f4 08 00
	00		 push	 DWORD PTR [esi+2292]
  000b9	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000bf	57		 push	 edi
  000c0	e8 00 00 00 00	 call	 ?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z ; ioBaseChar::RotateByBuffCollision
$LN2@ApplyStart:

; 204  : 	}
; 205  : 	
; 206  : 	if( !m_LoopSound.IsEmpty() )

  000c5	8d be fc 05 00
	00		 lea	 edi, DWORD PTR [esi+1532]
  000cb	8b cf		 mov	 ecx, edi
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000d3	84 c0		 test	 al, al
  000d5	75 27		 jne	 SHORT $LN15@ApplyStart

; 207  : 	{
; 208  : 		m_LoopSoundID = m_pOwner->PlaySound( m_LoopSound, true );

  000d7	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000dd	6a 01		 push	 1
  000df	57		 push	 edi
  000e0	e8 00 00 00 00	 call	 ?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z ; ioGameEntity::PlaySoundA
  000e5	89 86 0c 06 00
	00		 mov	 DWORD PTR [esi+1548], eax

; 209  : 		m_bLoopSoundPlayed = true;

  000eb	8d 45 0b	 lea	 eax, DWORD PTR _value$528937[ebp]
  000ee	50		 push	 eax
  000ef	8d 8e 60 08 00
	00		 lea	 ecx, DWORD PTR [esi+2144]
  000f5	c6 45 0b 01	 mov	 BYTE PTR _value$528937[ebp], 1
  000f9	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN15@ApplyStart:

; 210  : 	}
; 211  : 
; 212  : 	CheckInvisibleWeapon( false );

  000fe	53		 push	 ebx
  000ff	8b ce		 mov	 ecx, esi
  00101	e8 00 00 00 00	 call	 ?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleWeapon

; 213  : 	CheckInvisibleCloak( false );

  00106	53		 push	 ebx
  00107	8b ce		 mov	 ecx, esi
  00109	e8 00 00 00 00	 call	 ?CheckInvisibleCloak@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleCloak

; 214  : 	CheckInvisibleHelmet( false );

  0010e	53		 push	 ebx
  0010f	8b ce		 mov	 ecx, esi
  00111	e8 00 00 00 00	 call	 ?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleHelmet

; 215  : 	CheckChangeSkill( true );

  00116	6a 01		 push	 1
  00118	8b ce		 mov	 ecx, esi
  0011a	e8 00 00 00 00	 call	 ?CheckChangeSkill@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeSkill

; 216  : 	CheckChangeColor( true );

  0011f	6a 01		 push	 1
  00121	8b ce		 mov	 ecx, esi
  00123	e8 00 00 00 00	 call	 ?CheckChangeColor@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeColor

; 217  : 	CheckBuffDesc();

  00128	8b ce		 mov	 ecx, esi
  0012a	e8 00 00 00 00	 call	 ?CheckBuffDesc@ioBuff@@IAEXXZ ; ioBuff::CheckBuffDesc

; 218  : 
; 219  : 	return true;

  0012f	b0 01		 mov	 al, 1
$LN7@ApplyStart:
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx

; 220  : }

  00134	5d		 pop	 ebp
  00135	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioFrozenBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioFrozenBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ:PROC ; ioBuff::GetEffectEventOwner
EXTRN	?SetFrozenState@ioBaseChar@@QAEX_NKK@Z:PROC	; ioBaseChar::SetFrozenState
EXTRN	?IsEnableTeamAttack@ioBaseChar@@QAE_NXZ:PROC	; ioBaseChar::IsEnableTeamAttack
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioFrozenBuff@@UAEXM@Z
_TEXT	SEGMENT
_bPreFrozen$525220 = -5					; size = 1
_value$528948 = -1					; size = 1
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioFrozenBuff@@UAEXM@Z PROC			; ioFrozenBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 224  : 	if ( !m_bRseveSetFrozen )

  00009	33 db		 xor	 ebx, ebx
  0000b	38 9e b0 09 00
	00		 cmp	 BYTE PTR [esi+2480], bl
  00011	0f 85 8e 00 00
	00		 jne	 $LN12@ProcessBuf

; 225  : 	{
; 226  : 		m_bRseveSetFrozen = true;
; 227  : 		m_dwAniEndTime = m_pOwner->GetAnimationEndTime();

  00017	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0001d	c6 86 b0 09 00
	00 01		 mov	 BYTE PTR [esi+2480], 1
  00024	e8 00 00 00 00	 call	 ?GetAnimationEndTime@ioBaseChar@@QAEKXZ ; ioBaseChar::GetAnimationEndTime

; 228  : 
; 229  : 		bool bPreFrozen = false;
; 230  : 		if( m_pOwner->GetPreState() == CS_FROZEN )

  00029	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0002f	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  00035	80 b9 11 03 00
	00 17		 cmp	 BYTE PTR [ecx+785], 23	; 00000017H
  0003c	88 5d fb	 mov	 BYTE PTR _bPreFrozen$525220[ebp], bl
  0003f	75 04		 jne	 SHORT $LN14@ProcessBuf

; 231  : 			bPreFrozen = true;

  00041	c6 45 fb 01	 mov	 BYTE PTR _bPreFrozen$525220[ebp], 1
$LN14@ProcessBuf:
  00045	57		 push	 edi

; 232  : 
; 233  : 		bool bEnableTeamAttack = m_pOwner->IsEnableTeamAttack();

  00046	e8 00 00 00 00	 call	 ?IsEnableTeamAttack@ioBaseChar@@QAE_NXZ ; ioBaseChar::IsEnableTeamAttack

; 234  : 
; 235  : 		if( !bEnableTeamAttack && m_bTeamAttack )

  0004b	84 c0		 test	 al, al
  0004d	75 2b		 jne	 SHORT $LN13@ProcessBuf
  0004f	8d 45 ff	 lea	 eax, DWORD PTR _value$528948[ebp]
  00052	50		 push	 eax
  00053	8d 8e 00 08 00
	00		 lea	 ecx, DWORD PTR [esi+2048]
  00059	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  0005e	38 5d ff	 cmp	 BYTE PTR _value$528948[ebp], bl
  00061	74 17		 je	 SHORT $LN13@ProcessBuf

; 236  : 			m_pOwner->SetFrozenState( bPreFrozen, GetTeamMinTime()+m_dwExtraFrozenDuration, GetTeamMaxTime()+m_dwExtraFrozenDuration );

  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?GetTeamMaxTime@ioFrozenBuff@@IAEKXZ ; ioFrozenBuff::GetTeamMaxTime
  0006a	03 86 a8 09 00
	00		 add	 eax, DWORD PTR [esi+2472]
  00070	8b ce		 mov	 ecx, esi
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?GetTeamMinTime@ioFrozenBuff@@IAEKXZ ; ioFrozenBuff::GetTeamMinTime

; 237  : 		else

  00078	eb 15		 jmp	 SHORT $LN31@ProcessBuf
$LN13@ProcessBuf:

; 238  : 			m_pOwner->SetFrozenState( bPreFrozen, GetMinTime()+m_dwExtraFrozenDuration, GetMaxTime()+m_dwExtraFrozenDuration );

  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?GetMaxTime@ioFrozenBuff@@IAEKXZ ; ioFrozenBuff::GetMaxTime
  00081	03 86 a8 09 00
	00		 add	 eax, DWORD PTR [esi+2472]
  00087	8b ce		 mov	 ecx, esi
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?GetMinTime@ioFrozenBuff@@IAEKXZ ; ioFrozenBuff::GetMinTime
$LN31@ProcessBuf:
  0008f	03 86 a8 09 00
	00		 add	 eax, DWORD PTR [esi+2472]
  00095	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0009b	50		 push	 eax
  0009c	ff 75 fb	 push	 DWORD PTR _bPreFrozen$525220[ebp]
  0009f	e8 00 00 00 00	 call	 ?SetFrozenState@ioBaseChar@@QAEX_NKK@Z ; ioBaseChar::SetFrozenState
  000a4	5f		 pop	 edi
$LN12@ProcessBuf:

; 239  : 
; 240  : 	}
; 241  : 	switch( m_iOperationType )

  000a5	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  000ab	2b c3		 sub	 eax, ebx
  000ad	0f 84 88 00 00
	00		 je	 $LN1@ProcessBuf
  000b3	48		 dec	 eax
  000b4	74 08		 je	 SHORT $LN8@ProcessBuf
  000b6	48		 dec	 eax
  000b7	48		 dec	 eax
  000b8	0f 85 84 00 00
	00		 jne	 $LN10@ProcessBuf
$LN8@ProcessBuf:

; 242  : 	{
; 243  : 	case OT_SWITCH:
; 244  : 		break;
; 245  : 	case OT_DELAY:
; 246  : 	case OT_ACTIVE:
; 247  : 		if( !m_bSetEffect )

  000be	38 9e 70 09 00
	00		 cmp	 BYTE PTR [esi+2416], bl
  000c4	75 47		 jne	 SHORT $LN6@ProcessBuf

; 248  : 		{
; 249  : 			if( m_pOwner->GetBlowFrozenState() || m_dwAniEndTime <= FRAMEGETTIME() )

  000c6	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  000cc	38 98 c5 15 00
	00		 cmp	 BYTE PTR [eax+5573], bl
  000d2	75 16		 jne	 SHORT $LN5@ProcessBuf
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000da	8b c8		 mov	 ecx, eax
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000e2	39 86 6c 09 00
	00		 cmp	 DWORD PTR [esi+2412], eax
  000e8	77 23		 ja	 SHORT $LN6@ProcessBuf
$LN5@ProcessBuf:

; 250  : 			{
; 251  : 				m_pOwner->AttachEffect( m_BuffEffect, GetEffectEventOwner() );

  000ea	6a 01		 push	 1
  000ec	8b ce		 mov	 ecx, esi
  000ee	e8 00 00 00 00	 call	 ?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ ; ioBuff::GetEffectEventOwner
  000f3	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000f9	50		 push	 eax
  000fa	8d 86 7c 05 00
	00		 lea	 eax, DWORD PTR [esi+1404]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 252  : 				m_bSetEffect = true;

  00106	c6 86 70 09 00
	00 01		 mov	 BYTE PTR [esi+2416], 1
$LN6@ProcessBuf:

; 253  : 			}
; 254  : 		}
; 255  : 
; 256  : 		if( m_pOwner->GetState() != CS_FROZEN || !m_pOwner->GetFrozenState() )

  0010d	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00113	80 b8 10 03 00
	00 17		 cmp	 BYTE PTR [eax+784], 23	; 00000017H
  0011a	75 08		 jne	 SHORT $LN3@ProcessBuf
  0011c	38 98 f4 22 00
	00		 cmp	 BYTE PTR [eax+8948], bl
  00122	75 1e		 jne	 SHORT $LN10@ProcessBuf
$LN3@ProcessBuf:

; 257  : 		{
; 258  : 			if( !m_pOwner->GetFrozenState() )

  00124	38 98 f4 22 00
	00		 cmp	 BYTE PTR [eax+8948], bl
  0012a	75 06		 jne	 SHORT $LN2@ProcessBuf

; 259  : 				m_bNotFrozen = false;

  0012c	88 9e 71 09 00
	00		 mov	 BYTE PTR [esi+2417], bl
$LN2@ProcessBuf:

; 260  : 
; 261  : 			SetReserveEndBuff();

  00132	8b ce		 mov	 ecx, esi
  00134	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 262  : 			return;

  00139	eb 07		 jmp	 SHORT $LN10@ProcessBuf
$LN1@ProcessBuf:

; 263  : 		}
; 264  : 		break;
; 265  : 	case OT_PASSIVE:
; 266  : 		CheckCallingAreaWeapon();

  0013b	8b ce		 mov	 ecx, esi
  0013d	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN10@ProcessBuf:
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx

; 267  : 		break;
; 268  : 	}
; 269  : }

  00144	c9		 leave
  00145	c2 04 00	 ret	 4
?ProcessBuff@ioFrozenBuff@@UAEXM@Z ENDP			; ioFrozenBuff::ProcessBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?SetBlowWoundedState@ioBaseChar@@QAEX_NABUtagBlowWoundAniInfo@@00@Z:PROC ; ioBaseChar::SetBlowWoundedState
EXTRN	?SetDashFailStart@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::SetDashFailStart
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	__imp_?ResumeAllPlayingAnimation@ioEntityGroup@@QAEXXZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?EndBuff@ioFrozenBuff@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EndBuff@ioFrozenBuff@@UAEXXZ$0
__ehfuncinfo$?EndBuff@ioFrozenBuff@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EndBuff@ioFrozenBuff@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofrozenbuff.cpp
xdata$x	ENDS
;	COMDAT ?EndBuff@ioFrozenBuff@@UAEXXZ
_TEXT	SEGMENT
_kInfo$525245 = -108					; size = 96
__$EHRec$ = -12						; size = 12
?EndBuff@ioFrozenBuff@@UAEXXZ PROC			; ioFrozenBuff::EndBuff, COMDAT
; _this$ = ecx

; 272  : {

  00000	6a 60		 push	 96			; 00000060H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?EndBuff@ioFrozenBuff@@UAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 273  : 	if( m_pOwner && m_pOwner->GetState() != CS_STOP_MOTION )

  0000e	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00014	33 db		 xor	 ebx, ebx
  00016	3b c3		 cmp	 eax, ebx
  00018	74 12		 je	 SHORT $LN4@EndBuff
  0001a	80 b8 10 03 00
	00 26		 cmp	 BYTE PTR [eax+784], 38	; 00000026H
  00021	74 09		 je	 SHORT $LN4@EndBuff

; 274  : 		m_pOwner->GetGroup()->ResumeAllPlayingAnimation();

  00023	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ResumeAllPlayingAnimation@ioEntityGroup@@QAEXXZ
$LN4@EndBuff:

; 275  : 
; 276  : 	if( !m_bNotFrozen )

  0002c	38 9e 71 09 00
	00		 cmp	 BYTE PTR [esi+2417], bl
  00032	75 52		 jne	 SHORT $LN1@EndBuff

; 277  : 	{
; 278  : 		if( !m_pOwner->GetBlowFrozenState() )

  00034	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0003a	38 99 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], bl
  00040	75 1b		 jne	 SHORT $LN2@EndBuff

; 279  : 		{
; 280  : 			m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  00042	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00049	50		 push	 eax
  0004a	53		 push	 ebx
  0004b	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 281  : 			m_pOwner->SetDashFailStart();

  00050	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00056	e8 00 00 00 00	 call	 ?SetDashFailStart@ioBaseChar@@QAEXXZ ; ioBaseChar::SetDashFailStart

; 282  : 		}
; 283  : 		else

  0005b	eb 29		 jmp	 SHORT $LN1@EndBuff
$LN2@EndBuff:

; 284  : 		{
; 285  : 			BlowWoundAniInfo kInfo;

  0005d	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$525245[ebp]
  00060	e8 00 00 00 00	 call	 ??0tagBlowWoundAniInfo@@QAE@XZ ; tagBlowWoundAniInfo::tagBlowWoundAniInfo

; 286  : 			m_pOwner->SetBlowWoundedState( false, kInfo );

  00065	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0006b	53		 push	 ebx
  0006c	53		 push	 ebx
  0006d	8d 45 94	 lea	 eax, DWORD PTR _kInfo$525245[ebp]
  00070	50		 push	 eax
  00071	53		 push	 ebx
  00072	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00075	e8 00 00 00 00	 call	 ?SetBlowWoundedState@ioBaseChar@@QAEX_NABUtagBlowWoundAniInfo@@00@Z ; ioBaseChar::SetBlowWoundedState

; 287  : 		}

  0007a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007e	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$525245[ebp]
  00081	e8 00 00 00 00	 call	 ??1tagBlowWoundAniInfo@@QAE@XZ
$LN1@EndBuff:

; 288  : 	}
; 289  : 
; 290  : 	ioBuff::EndBuff();

  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff

; 291  : }

  0008d	e8 00 00 00 00	 call	 __EH_epilog3
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EndBuff@ioFrozenBuff@@UAEXXZ$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$525245[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagBlowWoundAniInfo@@QAE@XZ
__ehhandler$?EndBuff@ioFrozenBuff@@UAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EndBuff@ioFrozenBuff@@UAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EndBuff@ioFrozenBuff@@UAEXXZ ENDP			; ioFrozenBuff::EndBuff
END
