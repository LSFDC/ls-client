; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioSaleManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A ; Singleton<ioSaleManager>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A DD 01H DUP (?) ; Singleton<ioSaleManager>::ms_Singleton
_BSS	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?ConvertYYMMDDHHMMToDate@ioSaleManager@@IAEKGGGGG@Z ; ioSaleManager::ConvertYYMMDDHHMMToDate
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.cpp
;	COMDAT ?ConvertYYMMDDHHMMToDate@ioSaleManager@@IAEKGGGGG@Z
_TEXT	SEGMENT
_wYear$ = 8						; size = 2
_wMonth$ = 12						; size = 2
_wDay$ = 16						; size = 2
_wHour$ = 20						; size = 2
_wMinute$ = 24						; size = 2
?ConvertYYMMDDHHMMToDate@ioSaleManager@@IAEKGGGGG@Z PROC ; ioSaleManager::ConvertYYMMDDHHMMToDate, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 	// 년도에서 2010년을 빼고 4바이트 날짜를 리턴
; 335  : 	enum { DEFAULT_YEAR = 2010,	DATE_YEAR_VALUE = 100000000, DATE_MONTH_VALUE= 1000000, DATE_DAY_VALUE =  10000, DATE_HOUR_VALUE = 100, };
; 336  : 
; 337  : 	DWORD dwReturnDate = ((wYear - DEFAULT_YEAR) * DATE_YEAR_VALUE) +
; 338  : 		(wMonth * DATE_MONTH_VALUE) + (wDay * DATE_DAY_VALUE) +
; 339  : 		(wHour * DATE_HOUR_VALUE) + wMinute;
; 340  : 	return dwReturnDate;

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _wYear$[ebp]
  00007	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wMonth$[ebp]
  0000b	2d da 07 00 00	 sub	 eax, 2010		; 000007daH
  00010	6b c0 64	 imul	 eax, 100		; 00000064H
  00013	03 c1		 add	 eax, ecx
  00015	0f b7 4d 10	 movzx	 ecx, WORD PTR _wDay$[ebp]
  00019	6b c0 64	 imul	 eax, 100		; 00000064H
  0001c	03 c1		 add	 eax, ecx
  0001e	0f b7 4d 14	 movzx	 ecx, WORD PTR _wHour$[ebp]
  00022	6b c0 64	 imul	 eax, 100		; 00000064H
  00025	03 c1		 add	 eax, ecx
  00027	0f b7 4d 18	 movzx	 ecx, WORD PTR _wMinute$[ebp]
  0002b	6b c0 64	 imul	 eax, 100		; 00000064H
  0002e	03 c1		 add	 eax, ecx

; 341  : }

  00030	5d		 pop	 ebp
  00031	c2 14 00	 ret	 20			; 00000014H
?ConvertYYMMDDHHMMToDate@ioSaleManager@@IAEKGGGGG@Z ENDP ; ioSaleManager::ConvertYYMMDDHHMMToDate
_TEXT	ENDS
PUBLIC	?IsCheckAlive@ioSaleManager@@IAE_NKKK@Z		; ioSaleManager::IsCheckAlive
; Function compile flags: /Ogsp
;	COMDAT ?IsCheckAlive@ioSaleManager@@IAE_NKKK@Z
_TEXT	SEGMENT
tv150 = -20						; size = 4
_iCurYear$ = -16					; size = 4
_iCurMonth$ = -12					; size = 4
_iCurDay$ = -8						; size = 4
_this$ = -4						; size = 4
tv207 = 8						; size = 4
tv178 = 8						; size = 4
_dwCurServerDate$ = 8					; size = 4
_dwStartDate$ = 12					; size = 4
_dwEndDate$ = 16					; size = 4
?IsCheckAlive@ioSaleManager@@IAE_NKKK@Z PROC		; ioSaleManager::IsCheckAlive, COMDAT
; _this$ = ecx

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 345  : 	if( dwEndDate < 2000000000 && dwEndDate > 3000000000 )

  00006	81 7d 10 00 94
	35 77		 cmp	 DWORD PTR _dwEndDate$[ebp], 2000000000 ; 77359400H
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00010	73 10		 jae	 SHORT $LN2@IsCheckAli
  00012	81 7d 10 00 5e
	d0 b2		 cmp	 DWORD PTR _dwEndDate$[ebp], -1294967296 ; b2d05e00H
  00019	76 07		 jbe	 SHORT $LN2@IsCheckAli

; 346  : 		return false;

  0001b	32 c0		 xor	 al, al
  0001d	e9 d1 00 00 00	 jmp	 $LN3@IsCheckAli
$LN2@IsCheckAli:

; 347  : 
; 348  : 
; 349  : 	int iCurYear  = (dwCurServerDate/1000000);

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwCurServerDate$[ebp]
  00025	53		 push	 ebx
  00026	33 d2		 xor	 edx, edx
  00028	bb 40 42 0f 00	 mov	 ebx, 1000000		; 000f4240H
  0002d	8b cb		 mov	 ecx, ebx
  0002f	f7 f1		 div	 ecx
  00031	56		 push	 esi
  00032	57		 push	 edi

; 350  : 	int iCurMonth = ((dwCurServerDate/10000)%100 );

  00033	33 d2		 xor	 edx, edx
  00035	bf 10 27 00 00	 mov	 edi, 10000		; 00002710H
  0003a	8b cf		 mov	 ecx, edi
  0003c	6a 64		 push	 100			; 00000064H
  0003e	5e		 pop	 esi

; 363  : 
; 364  : 	if( COMPARE( ConvertYYMMDDHHMMToDate( iCurYear, iCurMonth, iCurDay, iCurHour, 0 ), 
; 365  : 		         ConvertYYMMDDHHMMToDate( iStartYear, iStartMonth, iStartDay, iStartHour, 0 ),
; 366  : 		         ConvertYYMMDDHHMMToDate( iEndYear, iEndMonth, iEndDay, iEndHour, 0 ) ) )

  0003f	6a 00		 push	 0
  00041	89 45 f0	 mov	 DWORD PTR _iCurYear$[ebp], eax
  00044	8b 45 08	 mov	 eax, DWORD PTR _dwCurServerDate$[ebp]
  00047	f7 f1		 div	 ecx
  00049	33 d2		 xor	 edx, edx
  0004b	8b ce		 mov	 ecx, esi
  0004d	f7 f1		 div	 ecx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _dwCurServerDate$[ebp]
  00052	89 55 f4	 mov	 DWORD PTR _iCurMonth$[ebp], edx
  00055	33 d2		 xor	 edx, edx
  00057	f7 f1		 div	 ecx
  00059	89 55 08	 mov	 DWORD PTR tv178[ebp], edx
  0005c	33 d2		 xor	 edx, edx
  0005e	f7 f1		 div	 ecx
  00060	8b 45 0c	 mov	 eax, DWORD PTR _dwStartDate$[ebp]
  00063	ff 75 08	 push	 DWORD PTR tv178[ebp]
  00066	89 55 f8	 mov	 DWORD PTR _iCurDay$[ebp], edx
  00069	33 d2		 xor	 edx, edx
  0006b	f7 f1		 div	 ecx
  0006d	ff 75 f8	 push	 DWORD PTR _iCurDay$[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	ff 75 f4	 push	 DWORD PTR _iCurMonth$[ebp]
  00076	ff 75 f0	 push	 DWORD PTR _iCurYear$[ebp]
  00079	89 45 ec	 mov	 DWORD PTR tv150[ebp], eax
  0007c	e8 00 00 00 00	 call	 ?ConvertYYMMDDHHMMToDate@ioSaleManager@@IAEKGGGGG@Z ; ioSaleManager::ConvertYYMMDDHHMMToDate
  00081	89 45 08	 mov	 DWORD PTR tv207[ebp], eax
  00084	8b 45 ec	 mov	 eax, DWORD PTR tv150[ebp]
  00087	6a 00		 push	 0
  00089	52		 push	 edx
  0008a	33 d2		 xor	 edx, edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	f7 f1		 div	 ecx
  00090	8b 45 0c	 mov	 eax, DWORD PTR _dwStartDate$[ebp]
  00093	8b cf		 mov	 ecx, edi
  00095	52		 push	 edx
  00096	33 d2		 xor	 edx, edx
  00098	f7 f1		 div	 ecx
  0009a	33 d2		 xor	 edx, edx
  0009c	8b ce		 mov	 ecx, esi
  0009e	f7 f1		 div	 ecx
  000a0	8b 45 0c	 mov	 eax, DWORD PTR _dwStartDate$[ebp]
  000a3	8b cb		 mov	 ecx, ebx
  000a5	52		 push	 edx
  000a6	33 d2		 xor	 edx, edx
  000a8	f7 f1		 div	 ecx
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?ConvertYYMMDDHHMMToDate@ioSaleManager@@IAEKGGGGG@Z ; ioSaleManager::ConvertYYMMDDHHMMToDate
  000b3	39 45 08	 cmp	 DWORD PTR tv207[ebp], eax
  000b6	72 36		 jb	 SHORT $LN1@IsCheckAli

; 351  : 	int iCurDay   = ((dwCurServerDate/100)%100);
; 352  : 	int iCurHour  = dwCurServerDate%100;
; 353  : 
; 354  : 	int iStartYear  = (dwStartDate/1000000);
; 355  : 	int iStartMonth = ((dwStartDate/10000)%100 );
; 356  : 	int iStartDay   = ((dwStartDate/100)%100);
; 357  : 	int iStartHour  = dwStartDate%100;
; 358  : 
; 359  : 	int iEndYear  = (dwEndDate/1000000);
; 360  : 	int iEndMonth = ((dwEndDate/10000)%100 );
; 361  : 	int iEndDay   = ((dwEndDate/100)%100);
; 362  : 	int iEndHour  = dwEndDate%100;

  000b8	8b 45 10	 mov	 eax, DWORD PTR _dwEndDate$[ebp]
  000bb	33 d2		 xor	 edx, edx
  000bd	8b ce		 mov	 ecx, esi
  000bf	f7 f1		 div	 ecx

; 363  : 
; 364  : 	if( COMPARE( ConvertYYMMDDHHMMToDate( iCurYear, iCurMonth, iCurDay, iCurHour, 0 ), 
; 365  : 		         ConvertYYMMDDHHMMToDate( iStartYear, iStartMonth, iStartDay, iStartHour, 0 ),
; 366  : 		         ConvertYYMMDDHHMMToDate( iEndYear, iEndMonth, iEndDay, iEndHour, 0 ) ) )

  000c1	6a 00		 push	 0
  000c3	52		 push	 edx
  000c4	33 d2		 xor	 edx, edx
  000c6	f7 f1		 div	 ecx
  000c8	8b 45 10	 mov	 eax, DWORD PTR _dwEndDate$[ebp]
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	52		 push	 edx
  000cf	33 d2		 xor	 edx, edx
  000d1	f7 f7		 div	 edi
  000d3	33 d2		 xor	 edx, edx
  000d5	f7 f6		 div	 esi
  000d7	8b 45 10	 mov	 eax, DWORD PTR _dwEndDate$[ebp]
  000da	52		 push	 edx
  000db	33 d2		 xor	 edx, edx
  000dd	f7 f3		 div	 ebx
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?ConvertYYMMDDHHMMToDate@ioSaleManager@@IAEKGGGGG@Z ; ioSaleManager::ConvertYYMMDDHHMMToDate
  000e5	39 45 08	 cmp	 DWORD PTR tv207[ebp], eax
  000e8	73 04		 jae	 SHORT $LN1@IsCheckAli

; 367  : 	{
; 368  : 		return true;

  000ea	b0 01		 mov	 al, 1
  000ec	eb 02		 jmp	 SHORT $LN5@IsCheckAli
$LN1@IsCheckAli:

; 369  : 	}
; 370  : 	return false;

  000ee	32 c0		 xor	 al, al
$LN5@IsCheckAli:
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
$LN3@IsCheckAli:

; 371  : }

  000f3	c9		 leave
  000f4	c2 0c 00	 ret	 12			; 0000000cH
?IsCheckAlive@ioSaleManager@@IAE_NKKK@Z ENDP		; ioSaleManager::IsCheckAlive
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioSaleManager@@@@QAE@XZ		; Singleton<ioSaleManager>::Singleton<ioSaleManager>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioSaleManager@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioSaleManager@@@@QAE@XZ PROC		; Singleton<ioSaleManager>::Singleton<ioSaleManager>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A, ecx ; Singleton<ioSaleManager>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VioSaleManager@@@@QAE@XZ ENDP		; Singleton<ioSaleManager>::Singleton<ioSaleManager>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioSaleManager@@@@QAE@XZ		; Singleton<ioSaleManager>::~Singleton<ioSaleManager>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioSaleManager@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioSaleManager@@@@QAE@XZ PROC		; Singleton<ioSaleManager>::~Singleton<ioSaleManager>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A, 0 ; Singleton<ioSaleManager>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioSaleManager@@@@QAE@XZ ENDP		; Singleton<ioSaleManager>::~Singleton<ioSaleManager>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioSaleManager@@@@SAAAVioSaleManager@@XZ ; Singleton<ioSaleManager>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioSaleManager@@@@SAAAVioSaleManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioSaleManager@@@@SAAAVioSaleManager@@XZ PROC ; Singleton<ioSaleManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A ; Singleton<ioSaleManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioSaleManager@@@@SAAAVioSaleManager@@XZ ENDP ; Singleton<ioSaleManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ; Singleton<ioEtcItemManager>::GetSingleton
EXTRN	?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A:DWORD ; Singleton<ioEtcItemManager>::ms_Singleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ PROC ; Singleton<ioEtcItemManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ENDP ; Singleton<ioEtcItemManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBE_NPBQAUSaleInfo@ioSaleManager@@@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBE_NPBQAUSaleInfo@ioSaleManager@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBE_NPBQAUSaleInfo@ioSaleManager@@@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBE_NPBQAUSaleInfo@ioSaleManager@@@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXPAPAUSaleInfo@ioSaleManager@@0@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXPAPAUSaleInfo@ioSaleManager@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXPAPAUSaleInfo@ioSaleManager@@0@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXPAPAUSaleInfo@ioSaleManager@@0@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::~_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::~_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::~_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@XZ ; std::allocator<ioSaleManager::SaleInfo *>::allocator<ioSaleManager::SaleInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@XZ PROC ; std::allocator<ioSaleManager::SaleInfo *>::allocator<ioSaleManager::SaleInfo *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@XZ ENDP ; std::allocator<ioSaleManager::SaleInfo *>::allocator<ioSaleManager::SaleInfo *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEABQAUSaleInfo@ioSaleManager@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEABQAUSaleInfo@ioSaleManager@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEABQAUSaleInfo@ioSaleManager@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEABQAUSaleInfo@ioSaleManager@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXXZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@ABV01@@Z ; std::allocator<ioSaleManager::SaleInfo *>::allocator<ioSaleManager::SaleInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioSaleManager::SaleInfo *>::allocator<ioSaleManager::SaleInfo *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioSaleManager::SaleInfo *>::allocator<ioSaleManager::SaleInfo *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@I@Z ; std::allocator<ioSaleManager::SaleInfo *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@I@Z PROC ; std::allocator<ioSaleManager::SaleInfo *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@I@Z ENDP ; std::allocator<ioSaleManager::SaleInfo *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QBEIXZ ; std::allocator<ioSaleManager::SaleInfo *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QBEIXZ PROC ; std::allocator<ioSaleManager::SaleInfo *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QBEIXZ ENDP ; std::allocator<ioSaleManager::SaleInfo *>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@QAUSaleInfo@ioSaleManager@@@std@@YAPBQAUSaleInfo@ioSaleManager@@ABQAU12@@Z ; std::addressof<ioSaleManager::SaleInfo * const>
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@QAUSaleInfo@ioSaleManager@@@std@@YAPBQAUSaleInfo@ioSaleManager@@ABQAU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAUSaleInfo@ioSaleManager@@@std@@YAPBQAUSaleInfo@ioSaleManager@@ABQAU12@@Z PROC ; std::addressof<ioSaleManager::SaleInfo * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAUSaleInfo@ioSaleManager@@@std@@YAPBQAUSaleInfo@ioSaleManager@@ABQAU12@@Z ENDP ; std::addressof<ioSaleManager::SaleInfo * const>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@IPAPAU12@@Z ; std::_Allocate<ioSaleManager::SaleInfo *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@IPAPAU12@@Z
_TEXT	SEGMENT
$T507214 = -12						; size = 12
$T507219 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@IPAPAU12@@Z PROC ; std::_Allocate<ioSaleManager::SaleInfo *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T507219[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T507219[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T507214[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T507214[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T507214[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@IPAPAU12@@Z ENDP ; std::_Allocate<ioSaleManager::SaleInfo *>
_TEXT	ENDS
PUBLIC	??$forward@AAPAUSaleInfo@ioSaleManager@@@std@@YAAAPAUSaleInfo@ioSaleManager@@AAPAU12@@Z ; std::forward<ioSaleManager::SaleInfo * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAUSaleInfo@ioSaleManager@@@std@@YAAAPAUSaleInfo@ioSaleManager@@AAPAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUSaleInfo@ioSaleManager@@@std@@YAAAPAUSaleInfo@ioSaleManager@@AAPAU12@@Z PROC ; std::forward<ioSaleManager::SaleInfo * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAUSaleInfo@ioSaleManager@@@std@@YAAAPAUSaleInfo@ioSaleManager@@AAPAU12@@Z ENDP ; std::forward<ioSaleManager::SaleInfo * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAUSaleInfo@ioSaleManager@@@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z ; std::allocator<ioSaleManager::SaleInfo *>::construct<ioSaleManager::SaleInfo * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAUSaleInfo@ioSaleManager@@@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAUSaleInfo@ioSaleManager@@@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z PROC ; std::allocator<ioSaleManager::SaleInfo *>::construct<ioSaleManager::SaleInfo * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAUSaleInfo@ioSaleManager@@@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z ENDP ; std::allocator<ioSaleManager::SaleInfo *>::construct<ioSaleManager::SaleInfo * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAUSaleInfo@ioSaleManager@@@std@@YAABQAUSaleInfo@ioSaleManager@@ABQAU12@@Z ; std::forward<ioSaleManager::SaleInfo * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAUSaleInfo@ioSaleManager@@@std@@YAABQAUSaleInfo@ioSaleManager@@ABQAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAUSaleInfo@ioSaleManager@@@std@@YAABQAUSaleInfo@ioSaleManager@@ABQAU12@@Z PROC ; std::forward<ioSaleManager::SaleInfo * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAUSaleInfo@ioSaleManager@@@std@@YAABQAUSaleInfo@ioSaleManager@@ABQAU12@@Z ENDP ; std::forward<ioSaleManager::SaleInfo * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUSaleInfo@ioSaleManager@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSaleInfo@ioSaleManager@@0@Z ; std::_Ptr_cat<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAUSaleInfo@ioSaleManager@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSaleInfo@ioSaleManager@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUSaleInfo@ioSaleManager@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSaleInfo@ioSaleManager@@0@Z PROC ; std::_Ptr_cat<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAUSaleInfo@ioSaleManager@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSaleInfo@ioSaleManager@@0@Z ENDP ; std::_Ptr_cat<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioSaleManager::SaleInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioSaleManager::SaleInfo *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioSaleManager::SaleInfo *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAUSaleInfo@ioSaleManager@@ABQAU12@@std@@YAXPAPAUSaleInfo@ioSaleManager@@ABQAU12@@Z ; std::_Construct<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@PAUSaleInfo@ioSaleManager@@ABQAU12@@std@@YAXPAPAUSaleInfo@ioSaleManager@@ABQAU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAUSaleInfo@ioSaleManager@@ABQAU12@@std@@YAXPAPAUSaleInfo@ioSaleManager@@ABQAU12@@Z PROC ; std::_Construct<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAUSaleInfo@ioSaleManager@@ABQAU12@@std@@YAXPAPAUSaleInfo@ioSaleManager@@ABQAU12@@Z ENDP ; std::_Construct<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@@Z ; std::_Val_type<ioSaleManager::SaleInfo * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@@Z PROC ; std::_Val_type<ioSaleManager::SaleInfo * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@@Z ENDP ; std::_Val_type<ioSaleManager::SaleInfo * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUSaleInfo@ioSaleManager@@PAU12@PAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUSaleInfo@ioSaleManager@@PAU12@PAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSaleInfo@ioSaleManager@@PAU12@PAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAUSaleInfo@ioSaleManager@@PAU12@PAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringValidateDestA@@YGJPBDII@Z
_TEXT	SEGMENT
_cchMax$ = 8						; size = 4
?StringValidateDestA@@YGJPBDII@Z PROC			; StringValidateDestA, COMDAT
; _cchDest$ = ecx

; 8721 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8722 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8723 : 
; 8724 :     if ((cchDest == 0) || (cchDest > cchMax))

  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN1@StringVali
  00009	3b 4d 08	 cmp	 ecx, DWORD PTR _cchMax$[ebp]
  0000c	76 05		 jbe	 SHORT $LN2@StringVali
$LN1@StringVali:

; 8725 :     {
; 8726 :         hr = STRSAFE_E_INVALID_PARAMETER;

  0000e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN2@StringVali:

; 8727 :     }
; 8728 : 
; 8729 :     return hr;
; 8730 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?StringValidateDestA@@YGJPBDII@Z ENDP			; StringValidateDestA
_TEXT	ENDS
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z
_TEXT	SEGMENT
_pcchNewDestLength$ = 8					; size = 4
_pszFormat$ = 12					; size = 4
_argList$ = 16						; size = 4
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z PROC		; StringVPrintfWorkerA, COMDAT
; _pszDest$ = edi
; _cchDest$ = eax

; 9029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 9030 :     HRESULT hr = S_OK;
; 9031 :     int iRet;
; 9032 :     size_t cchMax;
; 9033 :     size_t cchNewDestLength = 0;
; 9034 : 
; 9035 :     // leave the last space for the null terminator
; 9036 :     cchMax = cchDest - 1;
; 9037 : 
; 9038 : #if (STRSAFE_USE_SECURE_CRT == 1) && !defined(STRSAFE_LIB_IMPL)
; 9039 :     iRet = _vsnprintf_s(pszDest, cchDest, cchMax, pszFormat, argList);
; 9040 : #else
; 9041 :     #pragma warning(push)
; 9042 :     #pragma warning(disable: __WARNING_BANNED_API_USAGE)// "STRSAFE not included"
; 9043 :     iRet = _vsnprintf(pszDest, cchMax, pszFormat, argList);

  00005	ff 75 10	 push	 DWORD PTR _argList$[ebp]
  00008	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  0000b	ff 75 0c	 push	 DWORD PTR _pszFormat$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 9044 :     #pragma warning(pop)
; 9045 : #endif
; 9046 :     // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 9047 : 
; 9048 :     if ((iRet < 0) || (((size_t)iRet) > cchMax))

  0001b	85 c0		 test	 eax, eax
  0001d	78 0b		 js	 SHORT $LN5@StringVPri
  0001f	3b c6		 cmp	 eax, esi
  00021	77 07		 ja	 SHORT $LN5@StringVPri

; 9058 :     }
; 9059 :     else if (((size_t)iRet) == cchMax)

  00023	75 0f		 jne	 SHORT $LN2@StringVPri

; 9060 :     {
; 9061 :         // need to null terminate the string
; 9062 :         pszDest += cchMax;
; 9063 :         *pszDest = '\0';

  00025	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9064 : 
; 9065 :         cchNewDestLength = cchMax;
; 9066 :     }
; 9067 :     else

  00028	eb 08		 jmp	 SHORT $LN9@StringVPri
$LN5@StringVPri:

; 9049 :     {
; 9050 :         // need to null terminate the string
; 9051 :         pszDest += cchMax;
; 9052 :         *pszDest = '\0';

  0002a	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9055 : 
; 9056 :         // we have truncated pszDest
; 9057 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  0002d	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringVPri:

; 9053 : 
; 9054 :         cchNewDestLength = cchMax;

  00032	8b c6		 mov	 eax, esi
$LN2@StringVPri:

; 9068 :     {
; 9069 :         cchNewDestLength = (size_t)iRet;
; 9070 :     }
; 9071 : 
; 9072 :     if (pcchNewDestLength)

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00037	85 c9		 test	 ecx, ecx
  00039	74 02		 je	 SHORT $LN1@StringVPri

; 9073 :     {
; 9074 :         *pcchNewDestLength = cchNewDestLength;

  0003b	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringVPri:
  0003d	5e		 pop	 esi

; 9075 :     }
; 9076 : 
; 9077 :     return hr;

  0003e	8b c3		 mov	 eax, ebx
  00040	5b		 pop	 ebx

; 9078 : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z ENDP		; StringVPrintfWorkerA
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?SetActive@CostumeShopInfo@@QAEX_N@Z		; CostumeShopInfo::SetActive
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocostumeshopinfomanager.h
;	COMDAT ?SetActive@CostumeShopInfo@@QAEX_N@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 1
?SetActive@CostumeShopInfo@@QAEX_N@Z PROC		; CostumeShopInfo::SetActive, COMDAT
; _this$ = ecx

; 50   : 	void SetActive( bool bActive ) { m_bActive = bActive; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bActive$[ebp]
  00006	88 41 3d	 mov	 BYTE PTR [ecx+61], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetActive@CostumeShopInfo@@QAEX_N@Z ENDP		; CostumeShopInfo::SetActive
_TEXT	ENDS
PUBLIC	?SetNeedCash@CostumeShopInfo@@QAEXH@Z		; CostumeShopInfo::SetNeedCash
; Function compile flags: /Ogsp
;	COMDAT ?SetNeedCash@CostumeShopInfo@@QAEXH@Z
_TEXT	SEGMENT
_nNeedCash$ = 8						; size = 4
?SetNeedCash@CostumeShopInfo@@QAEXH@Z PROC		; CostumeShopInfo::SetNeedCash, COMDAT
; _this$ = ecx

; 51   : 	void SetNeedCash( int nNeedCash ) { m_nNeedCash = nNeedCash; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nNeedCash$[ebp]
  00006	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetNeedCash@CostumeShopInfo@@QAEXH@Z ENDP		; CostumeShopInfo::SetNeedCash
_TEXT	ENDS
PUBLIC	?SetPriority@CostumeShopInfo@@QAEXH@Z		; CostumeShopInfo::SetPriority
; Function compile flags: /Ogsp
;	COMDAT ?SetPriority@CostumeShopInfo@@QAEXH@Z
_TEXT	SEGMENT
_nPriority$ = 8						; size = 4
?SetPriority@CostumeShopInfo@@QAEXH@Z PROC		; CostumeShopInfo::SetPriority, COMDAT
; _this$ = ecx

; 52   : 	void SetPriority( int nPriority ) { m_nPriority = nPriority; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nPriority$[ebp]
  00006	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetPriority@CostumeShopInfo@@QAEXH@Z ENDP		; CostumeShopInfo::SetPriority
_TEXT	ENDS
PUBLIC	?SetShopMarkType@CostumeShopInfo@@QAEXH@Z	; CostumeShopInfo::SetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?SetShopMarkType@CostumeShopInfo@@QAEXH@Z
_TEXT	SEGMENT
_nShopMarkType$ = 8					; size = 4
?SetShopMarkType@CostumeShopInfo@@QAEXH@Z PROC		; CostumeShopInfo::SetShopMarkType, COMDAT
; _this$ = ecx

; 54   : 	void SetShopMarkType( int nShopMarkType ) { m_nShopMarkType = nShopMarkType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nShopMarkType$[ebp]
  00006	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetShopMarkType@CostumeShopInfo@@QAEXH@Z ENDP		; CostumeShopInfo::SetShopMarkType
_TEXT	ENDS
PUBLIC	?GetNeedCash@CostumeShopInfo@@QBEHXZ		; CostumeShopInfo::GetNeedCash
; Function compile flags: /Ogsp
;	COMDAT ?GetNeedCash@CostumeShopInfo@@QBEHXZ
_TEXT	SEGMENT
?GetNeedCash@CostumeShopInfo@@QBEHXZ PROC		; CostumeShopInfo::GetNeedCash, COMDAT
; _this$ = ecx

; 66   : 	inline int GetNeedCash() const { return m_nNeedCash; }

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetNeedCash@CostumeShopInfo@@QBEHXZ ENDP		; CostumeShopInfo::GetNeedCash
_TEXT	ENDS
PUBLIC	?GetPriority@CostumeShopInfo@@QBEHXZ		; CostumeShopInfo::GetPriority
; Function compile flags: /Ogsp
;	COMDAT ?GetPriority@CostumeShopInfo@@QBEHXZ
_TEXT	SEGMENT
?GetPriority@CostumeShopInfo@@QBEHXZ PROC		; CostumeShopInfo::GetPriority, COMDAT
; _this$ = ecx

; 70   : 	inline int GetPriority() const { return m_nPriority; }

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?GetPriority@CostumeShopInfo@@QBEHXZ ENDP		; CostumeShopInfo::GetPriority
_TEXT	ENDS
PUBLIC	?GetShopMarkType@CostumeShopInfo@@QBEHXZ	; CostumeShopInfo::GetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?GetShopMarkType@CostumeShopInfo@@QBEHXZ
_TEXT	SEGMENT
?GetShopMarkType@CostumeShopInfo@@QBEHXZ PROC		; CostumeShopInfo::GetShopMarkType, COMDAT
; _this$ = ecx

; 73   : 	inline int GetShopMarkType() const { return m_nShopMarkType; }	

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	c3		 ret	 0
?GetShopMarkType@CostumeShopInfo@@QBEHXZ ENDP		; CostumeShopInfo::GetShopMarkType
_TEXT	ENDS
PUBLIC	?IsActive@CostumeShopInfo@@QBE_NXZ		; CostumeShopInfo::IsActive
; Function compile flags: /Ogsp
;	COMDAT ?IsActive@CostumeShopInfo@@QBE_NXZ
_TEXT	SEGMENT
?IsActive@CostumeShopInfo@@QBE_NXZ PROC			; CostumeShopInfo::IsActive, COMDAT
; _this$ = ecx

; 76   : 	inline bool IsActive() const { return m_bActive; }

  00000	8a 41 3d	 mov	 al, BYTE PTR [ecx+61]
  00003	c3		 ret	 0
?IsActive@CostumeShopInfo@@QBE_NXZ ENDP			; CostumeShopInfo::IsActive
_TEXT	ENDS
PUBLIC	?Clear@BackUpInfo@ioSaleManager@@QAEXXZ		; ioSaleManager::BackUpInfo::Clear
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.h
;	COMDAT ?Clear@BackUpInfo@ioSaleManager@@QAEXXZ
_TEXT	SEGMENT
?Clear@BackUpInfo@ioSaleManager@@QAEXXZ PROC		; ioSaleManager::BackUpInfo::Clear, COMDAT
; _this$ = ecx

; 39   : 			m_iCash      = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 40   : 			m_iPeso      = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 41   : 			m_iShopOrder = 0;

  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 42   : 			m_bItemActive= false;

  0000a	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 43   : 			m_iShopMarkType = 0; // SHOP_MARK_TYPE_NONE

  0000d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 44   : 		}

  00010	c3		 ret	 0
?Clear@BackUpInfo@ioSaleManager@@QAEXXZ ENDP		; ioSaleManager::BackUpInfo::Clear
_TEXT	ENDS
PUBLIC	?Clear@SaleInfo@ioSaleManager@@QAEXXZ		; ioSaleManager::SaleInfo::Clear
; Function compile flags: /Ogsp
;	COMDAT ?Clear@SaleInfo@ioSaleManager@@QAEXXZ
_TEXT	SEGMENT
?Clear@SaleInfo@ioSaleManager@@QAEXXZ PROC		; ioSaleManager::SaleInfo::Clear, COMDAT
; _this$ = ecx

; 71   : 			m_eItemType     = IT_NONE;

  00000	83 09 ff	 or	 DWORD PTR [ecx], -1

; 72   : 			m_dwType1       = 0;

  00003	33 c0		 xor	 eax, eax
  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   : 			m_dwType2       = 0;

  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 74   : 			m_dwStartDate   = 0;

  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 75   : 			m_dwEndDate     = 0;

  0000e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 76   : 			m_iCash         = 0;

  00011	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 77   : 			m_iPeso         = 0;

  00014	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 78   : 			m_bActive       = false;

  00017	88 41 1c	 mov	 BYTE PTR [ecx+28], al

; 79   : 			m_iShopOrder    = 0;

  0001a	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 80   : 			m_iShopMarkType = 0; // SHOP_MARK_TYPE_NONE;

  0001d	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 81   : 			m_iINIArray     = 0;

  00020	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 82   : 
; 83   : 			m_kBackUp.Clear();

  00023	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00026	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00029	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  0002c	88 41 38	 mov	 BYTE PTR [ecx+56], al
  0002f	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 84   : 		}

  00032	c3		 ret	 0
?Clear@SaleInfo@ioSaleManager@@QAEXXZ ENDP		; ioSaleManager::SaleInfo::Clear
_TEXT	ENDS
PUBLIC	?GetNeedCash@RandomMachineInfo@@QBEHXZ		; RandomMachineInfo::GetNeedCash
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextraiteminfomanager.h
;	COMDAT ?GetNeedCash@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetNeedCash@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetNeedCash, COMDAT
; _this$ = ecx

; 119  : 	inline int GetNeedCash() const { return m_iNeedCash; }

  00000	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00003	c3		 ret	 0
?GetNeedCash@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetNeedCash
_TEXT	ENDS
PUBLIC	?GetPriority@RandomMachineInfo@@QBEHXZ		; RandomMachineInfo::GetPriority
; Function compile flags: /Ogsp
;	COMDAT ?GetPriority@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetPriority@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetPriority, COMDAT
; _this$ = ecx

; 123  : 	inline int GetPriority() const { return m_iPriority; }

  00000	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00003	c3		 ret	 0
?GetPriority@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetPriority
_TEXT	ENDS
PUBLIC	?GetShopMarkType@RandomMachineInfo@@QBEHXZ	; RandomMachineInfo::GetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?GetShopMarkType@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetShopMarkType@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetShopMarkType, COMDAT
; _this$ = ecx

; 126  : 	inline int GetShopMarkType() const { return m_iShopMarkType; }	

  00000	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00003	c3		 ret	 0
?GetShopMarkType@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetShopMarkType
_TEXT	ENDS
PUBLIC	?IsActive@RandomMachineInfo@@QBE_NXZ		; RandomMachineInfo::IsActive
; Function compile flags: /Ogsp
;	COMDAT ?IsActive@RandomMachineInfo@@QBE_NXZ
_TEXT	SEGMENT
?IsActive@RandomMachineInfo@@QBE_NXZ PROC		; RandomMachineInfo::IsActive, COMDAT
; _this$ = ecx

; 129  : 	inline bool IsActive() const { return m_bActive; }

  00000	8a 41 71	 mov	 al, BYTE PTR [ecx+113]
  00003	c3		 ret	 0
?IsActive@RandomMachineInfo@@QBE_NXZ ENDP		; RandomMachineInfo::IsActive
_TEXT	ENDS
PUBLIC	?SetActive@RandomMachineInfo@@QAEX_N@Z		; RandomMachineInfo::SetActive
; Function compile flags: /Ogsp
;	COMDAT ?SetActive@RandomMachineInfo@@QAEX_N@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 1
?SetActive@RandomMachineInfo@@QAEX_N@Z PROC		; RandomMachineInfo::SetActive, COMDAT
; _this$ = ecx

; 134  : 	void SetActive( bool bActive ) { m_bActive = bActive; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bActive$[ebp]
  00006	88 41 71	 mov	 BYTE PTR [ecx+113], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetActive@RandomMachineInfo@@QAEX_N@Z ENDP		; RandomMachineInfo::SetActive
_TEXT	ENDS
PUBLIC	?SetNeedCash@RandomMachineInfo@@QAEXH@Z		; RandomMachineInfo::SetNeedCash
; Function compile flags: /Ogsp
;	COMDAT ?SetNeedCash@RandomMachineInfo@@QAEXH@Z
_TEXT	SEGMENT
_iNeedCash$ = 8						; size = 4
?SetNeedCash@RandomMachineInfo@@QAEXH@Z PROC		; RandomMachineInfo::SetNeedCash, COMDAT
; _this$ = ecx

; 135  : 	void SetNeedCash( int iNeedCash ) { m_iNeedCash = iNeedCash; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iNeedCash$[ebp]
  00006	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetNeedCash@RandomMachineInfo@@QAEXH@Z ENDP		; RandomMachineInfo::SetNeedCash
_TEXT	ENDS
PUBLIC	?SetPriority@RandomMachineInfo@@QAEXH@Z		; RandomMachineInfo::SetPriority
; Function compile flags: /Ogsp
;	COMDAT ?SetPriority@RandomMachineInfo@@QAEXH@Z
_TEXT	SEGMENT
_iPriority$ = 8						; size = 4
?SetPriority@RandomMachineInfo@@QAEXH@Z PROC		; RandomMachineInfo::SetPriority, COMDAT
; _this$ = ecx

; 136  : 	void SetPriority( int iPriority ) { m_iPriority = iPriority; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iPriority$[ebp]
  00006	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetPriority@RandomMachineInfo@@QAEXH@Z ENDP		; RandomMachineInfo::SetPriority
_TEXT	ENDS
PUBLIC	?SetShopMarkType@RandomMachineInfo@@QAEXH@Z	; RandomMachineInfo::SetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?SetShopMarkType@RandomMachineInfo@@QAEXH@Z
_TEXT	SEGMENT
_iShopMarkType$ = 8					; size = 4
?SetShopMarkType@RandomMachineInfo@@QAEXH@Z PROC	; RandomMachineInfo::SetShopMarkType, COMDAT
; _this$ = ecx

; 138  : 	void SetShopMarkType( int iShopMarkType ) { m_iShopMarkType = iShopMarkType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iShopMarkType$[ebp]
  00006	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetShopMarkType@RandomMachineInfo@@QAEXH@Z ENDP	; RandomMachineInfo::SetShopMarkType
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?GetSingleton@ioSaleManager@@SAAAV1@XZ		; ioSaleManager::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.cpp
;	COMDAT ?GetSingleton@ioSaleManager@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@ioSaleManager@@SAAAV1@XZ PROC		; ioSaleManager::GetSingleton, COMDAT

; 375  : 	return Singleton< ioSaleManager >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A ; Singleton<ioSaleManager>::ms_Singleton

; 376  : }

  00005	c3		 ret	 0
?GetSingleton@ioSaleManager@@SAAAV1@XZ ENDP		; ioSaleManager::GetSingleton
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEAAPAUSaleInfo@ioSaleManager@@XZ ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEAAPAUSaleInfo@ioSaleManager@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEAAPAUSaleInfo@ioSaleManager@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBEAAPAUSaleInfo@ioSaleManager@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@V?$allocator@PAUSaleInfo@ioSaleManager@@@1@@Z ; std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@V?$allocator@PAUSaleInfo@ioSaleManager@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@V?$allocator@PAUSaleInfo@ioSaleManager@@@1@@Z PROC ; std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@V?$allocator@PAUSaleInfo@ioSaleManager@@@1@@Z ENDP ; std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QAE@PAPAUSaleInfo@ioSaleManager@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::_Vector_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator==
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEII@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEII@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEPAPAUSaleInfo@ioSaleManager@@I@Z ; std::allocator<ioSaleManager::SaleInfo *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEPAPAUSaleInfo@ioSaleManager@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEPAPAUSaleInfo@ioSaleManager@@I@Z PROC ; std::allocator<ioSaleManager::SaleInfo *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@IPAPAU12@@Z ; std::_Allocate<ioSaleManager::SaleInfo *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEPAPAUSaleInfo@ioSaleManager@@I@Z ENDP ; std::allocator<ioSaleManager::SaleInfo *>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@AAPAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z ; std::_Cons_val<std::allocator<ioSaleManager::SaleInfo *>,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@AAPAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@AAPAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z PROC ; std::_Cons_val<std::allocator<ioSaleManager::SaleInfo *>,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@AAPAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@AAPAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioSaleManager::SaleInfo *>,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * &>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00@Z ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00@Z
_TEXT	SEGMENT
__Cat$507455 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00@Z PROC ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507455[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00@Z ENDP ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z ; std::_Destroy_range<std::allocator<ioSaleManager::SaleInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioSaleManager::SaleInfo *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAXPAPAUSaleInfo@ioSaleManager@@0AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioSaleManager::SaleInfo *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@ABQAU34@@Z ; std::allocator<ioSaleManager::SaleInfo *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@ABQAU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@ABQAU34@@Z PROC ; std::allocator<ioSaleManager::SaleInfo *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@2:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAUSaleInfo@ioSaleManager@@@std@@QAEXPAPAUSaleInfo@ioSaleManager@@ABQAU34@@Z ENDP ; std::allocator<ioSaleManager::SaleInfo *>::construct
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z ; std::_Uninitialized_move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *,std::allocator<ioSaleManager::SaleInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z PROC ; std::_Uninitialized_move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *,std::allocator<ioSaleManager::SaleInfo *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z ENDP ; std::_Uninitialized_move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *,std::allocator<ioSaleManager::SaleInfo *> >
_TEXT	ENDS
PUBLIC	?StringCbPrintfA@@YAJPADIPBDZZ			; StringCbPrintfA
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
;	COMDAT ?StringCbPrintfA@@YAJPADIPBDZZ
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCbPrintfA@@YAJPADIPBDZZ PROC			; StringCbPrintfA, COMDAT

; 4767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4768 :     HRESULT hr;
; 4769 :     size_t cchDest = cbDest / sizeof(char);
; 4770 : 
; 4771 :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _cbDest$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 08		 je	 SHORT $LN4@StringCbPr
  0000c	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00012	76 05		 jbe	 SHORT $LN5@StringCbPr
$LN4@StringCbPr:
  00014	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCbPr:

; 4772 :     
; 4773 :     if (SUCCEEDED(hr))

  00019	85 c0		 test	 eax, eax
  0001b	78 39		 js	 SHORT $LN1@StringCbPr

; 4774 :     {
; 4775 :         va_list argList;
; 4776 : 
; 4777 :         va_start(argList, pszFormat);
; 4778 : 
; 4779 :         hr = StringVPrintfWorkerA(pszDest,
; 4780 :                                   cchDest,
; 4781 :                                   NULL,
; 4782 :                                   pszFormat,
; 4783 :                                   argList);

  0001d	53		 push	 ebx
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _pszDest$[ebp]
  00023	8d 45 14	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00026	50		 push	 eax
  00027	ff 75 10	 push	 DWORD PTR _pszFormat$[ebp]
  0002a	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	33 db		 xor	 ebx, ebx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	85 c0		 test	 eax, eax
  0003c	78 0b		 js	 SHORT $LN12@StringCbPr
  0003e	3b c6		 cmp	 eax, esi
  00040	77 07		 ja	 SHORT $LN12@StringCbPr
  00042	75 0d		 jne	 SHORT $LN9@StringCbPr
  00044	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  00047	eb 08		 jmp	 SHORT $LN9@StringCbPr
$LN12@StringCbPr:
  00049	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  0004c	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringCbPr:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	8b c3		 mov	 eax, ebx
  00055	5b		 pop	 ebx
$LN1@StringCbPr:

; 4784 : 
; 4785 :         va_end(argList);
; 4786 :     }
; 4787 : 
; 4788 :     return hr;
; 4789 : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?StringCbPrintfA@@YAJPADIPBDZZ ENDP			; StringCbPrintfA
_TEXT	ENDS
PUBLIC	??0BackUpInfo@ioSaleManager@@QAE@XZ		; ioSaleManager::BackUpInfo::BackUpInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.h
;	COMDAT ??0BackUpInfo@ioSaleManager@@QAE@XZ
_TEXT	SEGMENT
??0BackUpInfo@ioSaleManager@@QAE@XZ PROC		; ioSaleManager::BackUpInfo::BackUpInfo, COMDAT
; _this$ = ecx

; 32   : 		BackUpInfo()

  00000	8b c1		 mov	 eax, ecx

; 33   : 		{
; 34   : 			Clear();

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000c	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  0000f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 35   : 		}

  00012	c3		 ret	 0
??0BackUpInfo@ioSaleManager@@QAE@XZ ENDP		; ioSaleManager::BackUpInfo::BackUpInfo
_TEXT	ENDS
PUBLIC	??0SaleInfo@ioSaleManager@@QAE@XZ		; ioSaleManager::SaleInfo::SaleInfo
; Function compile flags: /Ogsp
;	COMDAT ??0SaleInfo@ioSaleManager@@QAE@XZ
_TEXT	SEGMENT
??0SaleInfo@ioSaleManager@@QAE@XZ PROC			; ioSaleManager::SaleInfo::SaleInfo, COMDAT
; _this$ = ecx

; 64   : 		SaleInfo()

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00008	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0000b	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0000e	88 46 38	 mov	 BYTE PTR [esi+56], al
  00011	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 65   : 		{
; 66   : 			Clear();

  00014	e8 00 00 00 00	 call	 ?Clear@SaleInfo@ioSaleManager@@QAEXXZ ; ioSaleManager::SaleInfo::Clear

; 67   : 		}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c3		 ret	 0
??0SaleInfo@ioSaleManager@@QAE@XZ ENDP			; ioSaleManager::SaleInfo::SaleInfo
_TEXT	ENDS
PUBLIC	??0?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@XZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXPAPAUSaleInfo@ioSaleManager@@0@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXPAPAUSaleInfo@ioSaleManager@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXPAPAUSaleInfo@ioSaleManager@@0@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXPAPAUSaleInfo@ioSaleManager@@0@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@ABQAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@ABQAU23@@Z ; std::_Cons_val<std::allocator<ioSaleManager::SaleInfo *>,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@ABQAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@ABQAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@ABQAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@ABQAU23@@Z PROC ; std::_Cons_val<std::allocator<ioSaleManager::SaleInfo *>,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@PAUSaleInfo@ioSaleManager@@ABQAU34@@std@@YAXAAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@PAPAUSaleInfo@ioSaleManager@@ABQAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioSaleManager::SaleInfo *>,ioSaleManager::SaleInfo *,ioSaleManager::SaleInfo * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAUSaleInfo@ioSaleManager@@@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEPAPAUSaleInfo@ioSaleManager@@PAPAU23@00@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Umove<ioSaleManager::SaleInfo * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAUSaleInfo@ioSaleManager@@@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEPAPAUSaleInfo@ioSaleManager@@PAPAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAUSaleInfo@ioSaleManager@@@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEPAPAUSaleInfo@ioSaleManager@@PAPAU23@00@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Umove<ioSaleManager::SaleInfo * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z ; std::_Uninitialized_move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *,std::allocator<ioSaleManager::SaleInfo *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAUSaleInfo@ioSaleManager@@@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEPAPAUSaleInfo@ioSaleManager@@PAPAU23@00@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Umove<ioSaleManager::SaleInfo * *>
_TEXT	ENDS
PUBLIC	?GetInfo@ioSaleManager@@IAEPAUSaleInfo@1@W4ItemType@1@KK@Z ; ioSaleManager::GetInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.cpp
;	COMDAT ?GetInfo@ioSaleManager@@IAEPAUSaleInfo@1@W4ItemType@1@KK@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
_dwType1$ = 12						; size = 4
_dwType2$ = 16						; size = 4
?GetInfo@ioSaleManager@@IAEPAUSaleInfo@1@W4ItemType@1@KK@Z PROC ; ioSaleManager::GetInfo, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	56		 push	 esi
  0000a	eb 20		 jmp	 SHORT $LN41@GetInfo
$LL18@GetInfo:

; 91   : 	{
; 92   : 		SaleInfo *pInfo = *iter;

  0000c	8b 02		 mov	 eax, DWORD PTR [edx]

; 93   : 		if( !pInfo )

  0000e	85 c0		 test	 eax, eax
  00010	74 17		 je	 SHORT $LN4@GetInfo

; 94   : 			continue;
; 95   : 		if( pInfo->m_eItemType == eType   &&
; 96   : 			pInfo->m_dwType1   == dwType1 &&
; 97   : 			pInfo->m_dwType2   == dwType2 )

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
  00014	3b 75 08	 cmp	 esi, DWORD PTR _eType$[ebp]
  00017	75 10		 jne	 SHORT $LN4@GetInfo
  00019	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0001c	3b 75 0c	 cmp	 esi, DWORD PTR _dwType1$[ebp]
  0001f	75 08		 jne	 SHORT $LN4@GetInfo
  00021	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00024	3b 75 10	 cmp	 esi, DWORD PTR _dwType2$[ebp]
  00027	74 09		 je	 SHORT $LN6@GetInfo
$LN4@GetInfo:

; 90   : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  00029	83 c2 04	 add	 edx, 4
$LN41@GetInfo:
  0002c	3b d1		 cmp	 edx, ecx
  0002e	75 dc		 jne	 SHORT $LL18@GetInfo

; 98   : 		{
; 99   : 			return pInfo;
; 100  : 		}
; 101  : 	}
; 102  : 
; 103  : 	return NULL;

  00030	33 c0		 xor	 eax, eax
$LN6@GetInfo:
  00032	5e		 pop	 esi

; 104  : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?GetInfo@ioSaleManager@@IAEPAUSaleInfo@1@W4ItemType@1@KK@Z ENDP ; ioSaleManager::GetInfo
_TEXT	ENDS
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R0?AVNewShopWnd@@@8				; NewShopWnd `RTTI Type Descriptor'
PUBLIC	??_C@_0BK@GEDPJAF@ioSaleManager?3?3CheckAlive?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?CheckAlive@ioSaleManager@@QAEXAAVSP2Packet@@@Z	; ioSaleManager::CheckAlive
EXTRN	?UpdateEventItemCnt@NewShopWnd@@QAEXXZ:PROC	; NewShopWnd::UpdateEventItemCnt
EXTRN	?ParseShopData@NewShopWnd@@QAEX_N@Z:PROC	; NewShopWnd::ParseShopData
EXTRN	__imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z:PROC
EXTRN	?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ:PROC ; ioSP2GUIManager::SetMsgBox
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?HideWnd@ioGUIManager@@QAEXK_N@Z:PROC
EXTRN	__imp_?IsShow@ioGUIManager@@QAE_NK@Z:PROC
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	?SetNeedPeso@CostumeShopInfo@@QAEXHH@Z:PROC	; CostumeShopInfo::SetNeedPeso
EXTRN	?GetNeedPeso@CostumeShopInfo@@QBEHH@Z:PROC	; CostumeShopInfo::GetNeedPeso
EXTRN	?GetCostumeMachineInfo@ioCostumeShopInfoManager@@QAEPAVCostumeShopInfo@@H@Z:PROC ; ioCostumeShopInfoManager::GetCostumeMachineInfo
EXTRN	?GetSingleton@ioCostumeShopInfoManager@@SAAAV1@XZ:PROC ; ioCostumeShopInfoManager::GetSingleton
EXTRN	?SetNeedPeso@RandomMachineInfo@@QAEXHH@Z:PROC	; RandomMachineInfo::SetNeedPeso
EXTRN	?GetNeedPeso@RandomMachineInfo@@QBEHH@Z:PROC	; RandomMachineInfo::GetNeedPeso
EXTRN	?GetRandomMachineInfo@ioExtraItemInfoManager@@QAEPAVRandomMachineInfo@@H@Z:PROC ; ioExtraItemInfoManager::GetRandomMachineInfo
EXTRN	?GetSingleton@ioExtraItemInfoManager@@SAAAV1@XZ:PROC ; ioExtraItemInfoManager::GetSingleton
EXTRN	?SetShopMarkType@ioEtcItem@@QAEXHH@Z:PROC	; ioEtcItem::SetShopMarkType
EXTRN	?GetShopMarkType@ioEtcItem@@QBEHH@Z:PROC	; ioEtcItem::GetShopMarkType
EXTRN	?SetShopOrder@ioEtcItem@@QAEXHH@Z:PROC		; ioEtcItem::SetShopOrder
EXTRN	?GetShopOrder@ioEtcItem@@QBEHH@Z:PROC		; ioEtcItem::GetShopOrder
EXTRN	?SetPeso@ioEtcItem@@QAEXHH@Z:PROC		; ioEtcItem::SetPeso
EXTRN	?GetPeso@ioEtcItem@@QBEHH@Z:PROC		; ioEtcItem::GetPeso
EXTRN	?SetCash@ioEtcItem@@QAEXHH@Z:PROC		; ioEtcItem::SetCash
EXTRN	?GetCash@ioEtcItem@@QBEHH@Z:PROC		; ioEtcItem::GetCash
EXTRN	?SetActive@ioEtcItem@@QAEXH_N@Z:PROC		; ioEtcItem::SetActive
EXTRN	?IsActive@ioEtcItem@@QBE_NH@Z:PROC		; ioEtcItem::IsActive
EXTRN	?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z:PROC ; ioEtcItemManager::FindEtcItem
EXTRN	?SetShopMarkTypeByType@ioDecorationPrice@@QAEXHHH@Z:PROC ; ioDecorationPrice::SetShopMarkTypeByType
EXTRN	?GetShopMarkTypeByType@ioDecorationPrice@@QAE?BHHH@Z:PROC ; ioDecorationPrice::GetShopMarkTypeByType
EXTRN	?SetShopOrderByType@ioDecorationPrice@@QAEXHHH@Z:PROC ; ioDecorationPrice::SetShopOrderByType
EXTRN	?GetShopOrderByType@ioDecorationPrice@@QAE?BHHH@Z:PROC ; ioDecorationPrice::GetShopOrderByType
EXTRN	?SetDecoPesoByType@ioDecorationPrice@@QAEXHHH@Z:PROC ; ioDecorationPrice::SetDecoPesoByType
EXTRN	?GetDecoPesoByType@ioDecorationPrice@@QAE?BHHH@Z:PROC ; ioDecorationPrice::GetDecoPesoByType
EXTRN	?SetDecoCashByType@ioDecorationPrice@@QAEXHHH@Z:PROC ; ioDecorationPrice::SetDecoCashByType
EXTRN	?GetDecoCashByType@ioDecorationPrice@@QAE?BHHH@Z:PROC ; ioDecorationPrice::GetDecoCashByType
EXTRN	?SetActiveByType@ioDecorationPrice@@QAEXHH_N@Z:PROC ; ioDecorationPrice::SetActiveByType
EXTRN	?GetActiveByType@ioDecorationPrice@@QAE?B_NHH@Z:PROC ; ioDecorationPrice::GetActiveByType
EXTRN	?GetSingleton@ioDecorationPrice@@SAAAV1@XZ:PROC	; ioDecorationPrice::GetSingleton
EXTRN	?SetSetItemShopMarkType@ioSetItemInfoManager@@QAEXKH@Z:PROC ; ioSetItemInfoManager::SetSetItemShopMarkType
EXTRN	?SetSetItemShopOrder@ioSetItemInfoManager@@QAEXKH@Z:PROC ; ioSetItemInfoManager::SetSetItemShopOrder
EXTRN	?SetActive@ioClassPrice@@QAEXH_N@Z:PROC		; ioClassPrice::SetActive
EXTRN	?IsActive@ioClassPrice@@QAE_NH@Z:PROC		; ioClassPrice::IsActive
EXTRN	?GetSingleton@ioClassPrice@@SAAAV1@XZ:PROC	; ioClassPrice::GetSingleton
EXTRN	?GetSetItemShopMarkType@ioSetItemInfoManager@@QBEHK@Z:PROC ; ioSetItemInfoManager::GetSetItemShopMarkType
EXTRN	?GetSetItemShopOrder@ioSetItemInfoManager@@QBEHK@Z:PROC ; ioSetItemInfoManager::GetSetItemShopOrder
EXTRN	?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ:PROC ; ioSetItemInfoManager::GetSingeton
EXTRN	??5SP2Packet@@QAEAAV0@AAK@Z:PROC		; SP2Packet::operator>>
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioWnd@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocostumeshopinfomanager.h
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVNewShopWnd@@@8
_DATA	SEGMENT
??_R0?AVNewShopWnd@@@8 DD FLAT:??_7type_info@@6B@	; NewShopWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNewShopWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BK@GEDPJAF@ioSaleManager?3?3CheckAlive?$AA@
CONST	SEGMENT
??_C@_0BK@GEDPJAF@ioSaleManager?3?3CheckAlive?$AA@ DB 'ioSaleManager::Che'
	DB	'ckAlive', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.cpp
CONST	ENDS
;	COMDAT ?CheckAlive@ioSaleManager@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwLastChangedServerDate$ = -4				; size = 4
_iter$506193 = 8					; size = 4
_rkPacket$ = 8						; size = 4
?CheckAlive@ioSaleManager@@QAEXAAVSP2Packet@@@Z PROC	; ioSaleManager::CheckAlive, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 108  : 	DWORD dwLastChangedServerDate = 0;

  00005	83 65 fc 00	 and	 DWORD PTR _dwLastChangedServerDate$[ebp], 0
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 109  : 	rkPacket >> dwLastChangedServerDate;	

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00011	8d 45 fc	 lea	 eax, DWORD PTR _dwLastChangedServerDate$[ebp]
  00014	50		 push	 eax
  00015	89 7d f8	 mov	 DWORD PTR _this$[ebp], edi
  00018	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAK@Z ; SP2Packet::operator>>

; 110  : 
; 111  : 	// check
; 112  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	e9 c4 04 00 00	 jmp	 $LN153@CheckAlive
$LL152@CheckAlive:

; 113  : 	{
; 114  : 		SaleInfo *pInfo = *iter;

  00025	8b 30		 mov	 esi, DWORD PTR [eax]

; 115  : 		if( !pInfo )

  00027	85 f6		 test	 esi, esi
  00029	0f 84 b1 04 00
	00		 je	 $LN52@CheckAlive

; 116  : 			continue;
; 117  : 		bool bCheckAlive = IsCheckAlive( dwLastChangedServerDate, pInfo->m_dwStartDate, pInfo->m_dwEndDate );

  0002f	ff 76 10	 push	 DWORD PTR [esi+16]
  00032	8b cf		 mov	 ecx, edi
  00034	ff 76 0c	 push	 DWORD PTR [esi+12]
  00037	ff 75 fc	 push	 DWORD PTR _dwLastChangedServerDate$[ebp]
  0003a	e8 00 00 00 00	 call	 ?IsCheckAlive@ioSaleManager@@IAE_NKKK@Z ; ioSaleManager::IsCheckAlive
  0003f	8a d8		 mov	 bl, al

; 118  : 
; 119  : 		if(  pInfo->m_bActive == bCheckAlive )

  00041	38 5e 1c	 cmp	 BYTE PTR [esi+28], bl
  00044	0f 84 96 04 00
	00		 je	 $LN52@CheckAlive

; 120  : 			continue;
; 121  : 
; 122  : 		pInfo->m_bActive = bCheckAlive;
; 123  : 		if( pInfo->m_eItemType == IT_CLASS )

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	88 5e 1c	 mov	 BYTE PTR [esi+28], bl
  0004f	85 c0		 test	 eax, eax
  00051	0f 85 d5 00 00
	00		 jne	 $LN48@CheckAlive

; 124  : 		{
; 125  : 			if( bCheckAlive )

  00057	84 db		 test	 bl, bl
  00059	0f 84 82 00 00
	00		 je	 $LN47@CheckAlive

; 126  : 			{
; 127  : 				// 개별적인 가격을 보관하는 변수가 없기때문에
; 128  : 				// class 가격은 ioClassPrice::GetClassBuyPeso() , ioClassPrice::GetClassBuyCash(), ioClassPrice::GetMortmainCharPeso(), ioClassPrice::GetMortmainCharCash()
; 129  : 				// 함수 내부에서 직접 값을 전달
; 130  : 
; 131  : 				pInfo->m_kBackUp.m_iShopOrder    = g_SetItemInfoMgr.GetSetItemShopOrder( pInfo->m_dwType1 + SET_ITEM_CODE );	

  0005f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00062	bf 60 ae 0a 00	 mov	 edi, 700000		; 000aae60H
  00067	03 c7		 add	 eax, edi
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ ; ioSetItemInfoManager::GetSingeton
  0006f	8b c8		 mov	 ecx, eax
  00071	e8 00 00 00 00	 call	 ?GetSetItemShopOrder@ioSetItemInfoManager@@QBEHK@Z ; ioSetItemInfoManager::GetSetItemShopOrder
  00076	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 132  : 				pInfo->m_kBackUp.m_iShopMarkType = g_SetItemInfoMgr.GetSetItemShopMarkType( pInfo->m_dwType1 + SET_ITEM_CODE );	

  00079	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007c	03 c7		 add	 eax, edi
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ ; ioSetItemInfoManager::GetSingeton
  00084	8b c8		 mov	 ecx, eax
  00086	e8 00 00 00 00	 call	 ?GetSetItemShopMarkType@ioSetItemInfoManager@@QBEHK@Z ; ioSetItemInfoManager::GetSetItemShopMarkType

; 133  : 				pInfo->m_kBackUp.m_bItemActive   = g_ClassPrice.IsActive( pInfo->m_dwType1 );

  0008b	ff 76 04	 push	 DWORD PTR [esi+4]
  0008e	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00091	e8 00 00 00 00	 call	 ?GetSingleton@ioClassPrice@@SAAAV1@XZ ; ioClassPrice::GetSingleton
  00096	8b c8		 mov	 ecx, eax
  00098	e8 00 00 00 00	 call	 ?IsActive@ioClassPrice@@QAE_NH@Z ; ioClassPrice::IsActive
  0009d	88 46 38	 mov	 BYTE PTR [esi+56], al

; 134  : 				if( !pInfo->m_kBackUp.m_bItemActive )

  000a0	84 c0		 test	 al, al
  000a2	75 11		 jne	 SHORT $LN147@CheckAlive

; 135  : 					g_ClassPrice.SetActive( pInfo->m_dwType1, true );

  000a4	6a 01		 push	 1
  000a6	ff 76 04	 push	 DWORD PTR [esi+4]
  000a9	e8 00 00 00 00	 call	 ?GetSingleton@ioClassPrice@@SAAAV1@XZ ; ioClassPrice::GetSingleton
  000ae	8b c8		 mov	 ecx, eax
  000b0	e8 00 00 00 00	 call	 ?SetActive@ioClassPrice@@QAEXH_N@Z ; ioClassPrice::SetActive
$LN147@CheckAlive:

; 136  : 
; 137  : 				if( pInfo->m_iShopOrder == 0 )

  000b5	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000b8	85 c0		 test	 eax, eax
  000ba	75 04		 jne	 SHORT $LN45@CheckAlive

; 138  : 					g_SetItemInfoMgr.SetSetItemShopOrder( pInfo->m_dwType1 + SET_ITEM_CODE, SALE_SHOP_ORDER );

  000bc	6a 01		 push	 1

; 139  : 				else

  000be	eb 01		 jmp	 SHORT $LN154@CheckAlive
$LN45@CheckAlive:

; 140  : 					g_SetItemInfoMgr.SetSetItemShopOrder( pInfo->m_dwType1 + SET_ITEM_CODE, pInfo->m_iShopOrder );

  000c0	50		 push	 eax
$LN154@CheckAlive:
  000c1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c4	03 c7		 add	 eax, edi
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ ; ioSetItemInfoManager::GetSingeton
  000cc	8b c8		 mov	 ecx, eax
  000ce	e8 00 00 00 00	 call	 ?SetSetItemShopOrder@ioSetItemInfoManager@@QAEXKH@Z ; ioSetItemInfoManager::SetSetItemShopOrder

; 141  : 
; 142  : 				if( pInfo->m_iShopMarkType == SHOP_MARK_TYPE_NONE )

  000d3	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000d6	85 c0		 test	 eax, eax
  000d8	75 04		 jne	 SHORT $LN43@CheckAlive

; 143  : 					g_SetItemInfoMgr.SetSetItemShopMarkType( pInfo->m_dwType1 + SET_ITEM_CODE, SHOP_MARK_TYPE_SALE );

  000da	6a 01		 push	 1

; 144  : 				else

  000dc	eb 37		 jmp	 SHORT $LN159@CheckAlive
$LN43@CheckAlive:

; 145  : 					g_SetItemInfoMgr.SetSetItemShopMarkType( pInfo->m_dwType1 + SET_ITEM_CODE, pInfo->m_iShopMarkType );

  000de	50		 push	 eax

; 146  : 			}
; 147  : 			else

  000df	eb 34		 jmp	 SHORT $LN159@CheckAlive
$LN47@CheckAlive:

; 148  : 			{
; 149  : 				if( !pInfo->m_kBackUp.m_bItemActive )

  000e1	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  000e5	75 11		 jne	 SHORT $LN40@CheckAlive

; 150  : 					g_ClassPrice.SetActive( pInfo->m_dwType1, false );

  000e7	6a 00		 push	 0
  000e9	ff 76 04	 push	 DWORD PTR [esi+4]
  000ec	e8 00 00 00 00	 call	 ?GetSingleton@ioClassPrice@@SAAAV1@XZ ; ioClassPrice::GetSingleton
  000f1	8b c8		 mov	 ecx, eax
  000f3	e8 00 00 00 00	 call	 ?SetActive@ioClassPrice@@QAEXH_N@Z ; ioClassPrice::SetActive
$LN40@CheckAlive:

; 151  : 				g_SetItemInfoMgr.SetSetItemShopOrder( pInfo->m_dwType1 + SET_ITEM_CODE, pInfo->m_kBackUp.m_iShopOrder );

  000f8	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000fb	ff 76 34	 push	 DWORD PTR [esi+52]
  000fe	bf 60 ae 0a 00	 mov	 edi, 700000		; 000aae60H
  00103	03 c7		 add	 eax, edi
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ ; ioSetItemInfoManager::GetSingeton
  0010b	8b c8		 mov	 ecx, eax
  0010d	e8 00 00 00 00	 call	 ?SetSetItemShopOrder@ioSetItemInfoManager@@QAEXKH@Z ; ioSetItemInfoManager::SetSetItemShopOrder

; 152  : 				g_SetItemInfoMgr.SetSetItemShopMarkType( pInfo->m_dwType1 + SET_ITEM_CODE, pInfo->m_kBackUp.m_iShopMarkType );

  00112	ff 76 3c	 push	 DWORD PTR [esi+60]
$LN159@CheckAlive:
  00115	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00118	03 c7		 add	 eax, edi
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ ; ioSetItemInfoManager::GetSingeton
  00120	8b c8		 mov	 ecx, eax
  00122	e8 00 00 00 00	 call	 ?SetSetItemShopMarkType@ioSetItemInfoManager@@QAEXKH@Z ; ioSetItemInfoManager::SetSetItemShopMarkType

; 153  : 			}

  00127	e9 b4 03 00 00	 jmp	 $LN52@CheckAlive
$LN48@CheckAlive:

; 154  : 		}
; 155  : 		else if( pInfo->m_eItemType == IT_DECO )

  0012c	33 ff		 xor	 edi, edi
  0012e	47		 inc	 edi
  0012f	3b c7		 cmp	 eax, edi
  00131	0f 85 48 01 00
	00		 jne	 $LN38@CheckAlive

; 156  : 		{
; 157  : 			if( bCheckAlive )

  00137	84 db		 test	 bl, bl
  00139	0f 84 d0 00 00
	00		 je	 $LN37@CheckAlive

; 158  : 			{
; 159  : 				pInfo->m_kBackUp.m_bItemActive = g_DecorationPrice.GetActiveByType( pInfo->m_dwType1, pInfo->m_dwType2 );

  0013f	ff 76 08	 push	 DWORD PTR [esi+8]
  00142	ff 76 04	 push	 DWORD PTR [esi+4]
  00145	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  0014a	8b c8		 mov	 ecx, eax
  0014c	e8 00 00 00 00	 call	 ?GetActiveByType@ioDecorationPrice@@QAE?B_NHH@Z ; ioDecorationPrice::GetActiveByType

; 160  : 				g_DecorationPrice.SetActiveByType( pInfo->m_dwType1, pInfo->m_dwType2, true );

  00151	57		 push	 edi
  00152	ff 76 08	 push	 DWORD PTR [esi+8]
  00155	88 46 38	 mov	 BYTE PTR [esi+56], al
  00158	ff 76 04	 push	 DWORD PTR [esi+4]
  0015b	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  00160	8b c8		 mov	 ecx, eax
  00162	e8 00 00 00 00	 call	 ?SetActiveByType@ioDecorationPrice@@QAEXHH_N@Z ; ioDecorationPrice::SetActiveByType

; 161  : 
; 162  : 				pInfo->m_kBackUp.m_iCash       = g_DecorationPrice.GetDecoCashByType( pInfo->m_dwType1, pInfo->m_dwType2 ); 

  00167	ff 76 08	 push	 DWORD PTR [esi+8]
  0016a	ff 76 04	 push	 DWORD PTR [esi+4]
  0016d	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  00172	8b c8		 mov	 ecx, eax
  00174	e8 00 00 00 00	 call	 ?GetDecoCashByType@ioDecorationPrice@@QAE?BHHH@Z ; ioDecorationPrice::GetDecoCashByType

; 163  : 				g_DecorationPrice.SetDecoCashByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_iCash );

  00179	ff 76 14	 push	 DWORD PTR [esi+20]
  0017c	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0017f	ff 76 08	 push	 DWORD PTR [esi+8]
  00182	ff 76 04	 push	 DWORD PTR [esi+4]
  00185	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  0018a	8b c8		 mov	 ecx, eax
  0018c	e8 00 00 00 00	 call	 ?SetDecoCashByType@ioDecorationPrice@@QAEXHHH@Z ; ioDecorationPrice::SetDecoCashByType

; 164  : 
; 165  : 				pInfo->m_kBackUp.m_iPeso       = g_DecorationPrice.GetDecoPesoByType( pInfo->m_dwType1, pInfo->m_dwType2 ); 

  00191	ff 76 08	 push	 DWORD PTR [esi+8]
  00194	ff 76 04	 push	 DWORD PTR [esi+4]
  00197	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  0019c	8b c8		 mov	 ecx, eax
  0019e	e8 00 00 00 00	 call	 ?GetDecoPesoByType@ioDecorationPrice@@QAE?BHHH@Z ; ioDecorationPrice::GetDecoPesoByType

; 166  : 				g_DecorationPrice.SetDecoPesoByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_iPeso );

  001a3	ff 76 18	 push	 DWORD PTR [esi+24]
  001a6	89 46 30	 mov	 DWORD PTR [esi+48], eax
  001a9	ff 76 08	 push	 DWORD PTR [esi+8]
  001ac	ff 76 04	 push	 DWORD PTR [esi+4]
  001af	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  001b4	8b c8		 mov	 ecx, eax
  001b6	e8 00 00 00 00	 call	 ?SetDecoPesoByType@ioDecorationPrice@@QAEXHHH@Z ; ioDecorationPrice::SetDecoPesoByType

; 167  : 
; 168  : 				pInfo->m_kBackUp.m_iShopOrder  = g_DecorationPrice.GetShopOrderByType( pInfo->m_dwType1, pInfo->m_dwType2 );

  001bb	ff 76 08	 push	 DWORD PTR [esi+8]
  001be	ff 76 04	 push	 DWORD PTR [esi+4]
  001c1	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  001c6	8b c8		 mov	 ecx, eax
  001c8	e8 00 00 00 00	 call	 ?GetShopOrderByType@ioDecorationPrice@@QAE?BHHH@Z ; ioDecorationPrice::GetShopOrderByType
  001cd	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 169  : 				if( pInfo->m_iShopOrder == 0 )

  001d0	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  001d3	85 c0		 test	 eax, eax
  001d5	75 03		 jne	 SHORT $LN36@CheckAlive

; 170  : 					g_DecorationPrice.SetShopOrderByType( pInfo->m_dwType1, pInfo->m_dwType2, SALE_SHOP_ORDER );

  001d7	57		 push	 edi

; 171  : 				else

  001d8	eb 01		 jmp	 SHORT $LN155@CheckAlive
$LN36@CheckAlive:

; 172  : 					g_DecorationPrice.SetShopOrderByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_iShopOrder );

  001da	50		 push	 eax
$LN155@CheckAlive:
  001db	ff 76 08	 push	 DWORD PTR [esi+8]
  001de	ff 76 04	 push	 DWORD PTR [esi+4]
  001e1	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  001e6	8b c8		 mov	 ecx, eax
  001e8	e8 00 00 00 00	 call	 ?SetShopOrderByType@ioDecorationPrice@@QAEXHHH@Z ; ioDecorationPrice::SetShopOrderByType

; 173  : 
; 174  : 	
; 175  : 				pInfo->m_kBackUp.m_iShopMarkType  = g_DecorationPrice.GetShopMarkTypeByType( pInfo->m_dwType1, pInfo->m_dwType2 );

  001ed	ff 76 08	 push	 DWORD PTR [esi+8]
  001f0	ff 76 04	 push	 DWORD PTR [esi+4]
  001f3	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  001f8	8b c8		 mov	 ecx, eax
  001fa	e8 00 00 00 00	 call	 ?GetShopMarkTypeByType@ioDecorationPrice@@QAE?BHHH@Z ; ioDecorationPrice::GetShopMarkTypeByType
  001ff	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 176  : 				if( pInfo->m_iShopMarkType == SHOP_MARK_TYPE_NONE )

  00202	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00205	85 c0		 test	 eax, eax
  00207	75 03		 jne	 SHORT $LN34@CheckAlive

; 177  : 					g_DecorationPrice.SetShopMarkTypeByType( pInfo->m_dwType1, pInfo->m_dwType2, SHOP_MARK_TYPE_SALE );

  00209	57		 push	 edi

; 178  : 				else

  0020a	eb 5c		 jmp	 SHORT $LN158@CheckAlive
$LN34@CheckAlive:

; 179  : 					g_DecorationPrice.SetShopMarkTypeByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_iShopMarkType );

  0020c	50		 push	 eax

; 180  : 			}
; 181  : 			else

  0020d	eb 59		 jmp	 SHORT $LN158@CheckAlive
$LN37@CheckAlive:

; 182  : 			{
; 183  : 				g_DecorationPrice.SetDecoCashByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_kBackUp.m_iCash );

  0020f	ff 76 2c	 push	 DWORD PTR [esi+44]
  00212	ff 76 08	 push	 DWORD PTR [esi+8]
  00215	ff 76 04	 push	 DWORD PTR [esi+4]
  00218	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  0021d	8b c8		 mov	 ecx, eax
  0021f	e8 00 00 00 00	 call	 ?SetDecoCashByType@ioDecorationPrice@@QAEXHHH@Z ; ioDecorationPrice::SetDecoCashByType

; 184  : 				g_DecorationPrice.SetDecoPesoByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_kBackUp.m_iPeso );

  00224	ff 76 30	 push	 DWORD PTR [esi+48]
  00227	ff 76 08	 push	 DWORD PTR [esi+8]
  0022a	ff 76 04	 push	 DWORD PTR [esi+4]
  0022d	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  00232	8b c8		 mov	 ecx, eax
  00234	e8 00 00 00 00	 call	 ?SetDecoPesoByType@ioDecorationPrice@@QAEXHHH@Z ; ioDecorationPrice::SetDecoPesoByType

; 185  : 				g_DecorationPrice.SetActiveByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_kBackUp.m_bItemActive );

  00239	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
  0023d	50		 push	 eax
  0023e	ff 76 08	 push	 DWORD PTR [esi+8]
  00241	ff 76 04	 push	 DWORD PTR [esi+4]
  00244	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  00249	8b c8		 mov	 ecx, eax
  0024b	e8 00 00 00 00	 call	 ?SetActiveByType@ioDecorationPrice@@QAEXHH_N@Z ; ioDecorationPrice::SetActiveByType

; 186  : 				g_DecorationPrice.SetShopOrderByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_kBackUp.m_iShopOrder );

  00250	ff 76 34	 push	 DWORD PTR [esi+52]
  00253	ff 76 08	 push	 DWORD PTR [esi+8]
  00256	ff 76 04	 push	 DWORD PTR [esi+4]
  00259	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  0025e	8b c8		 mov	 ecx, eax
  00260	e8 00 00 00 00	 call	 ?SetShopOrderByType@ioDecorationPrice@@QAEXHHH@Z ; ioDecorationPrice::SetShopOrderByType

; 187  : 				g_DecorationPrice.SetShopMarkTypeByType( pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_kBackUp.m_iShopMarkType );

  00265	ff 76 3c	 push	 DWORD PTR [esi+60]
$LN158@CheckAlive:
  00268	ff 76 08	 push	 DWORD PTR [esi+8]
  0026b	ff 76 04	 push	 DWORD PTR [esi+4]
  0026e	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  00273	8b c8		 mov	 ecx, eax
  00275	e8 00 00 00 00	 call	 ?SetShopMarkTypeByType@ioDecorationPrice@@QAEXHHH@Z ; ioDecorationPrice::SetShopMarkTypeByType

; 188  : 			}

  0027a	e9 61 02 00 00	 jmp	 $LN52@CheckAlive
$LN38@CheckAlive:

; 189  : 		}
; 190  : 		else if( pInfo->m_eItemType == IT_ETC )

  0027f	83 f8 02	 cmp	 eax, 2
  00282	0f 85 f3 00 00
	00		 jne	 $LN30@CheckAlive

; 191  : 		{
; 192  : 			ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( pInfo->m_dwType1 );

  00288	ff 76 04	 push	 DWORD PTR [esi+4]
  0028b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  00291	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem
  00296	8b f8		 mov	 edi, eax

; 193  : 			if( !pItem )

  00298	85 ff		 test	 edi, edi
  0029a	0f 84 40 02 00
	00		 je	 $LN52@CheckAlive

; 194  : 				continue;
; 195  : 
; 196  : 			if( bCheckAlive )
; 197  : 			{
; 198  : 				pInfo->m_kBackUp.m_bItemActive = pItem->IsActive( pInfo->m_dwType2 );

  002a0	8b cf		 mov	 ecx, edi
  002a2	84 db		 test	 bl, bl
  002a4	0f 84 8b 00 00
	00		 je	 $LN28@CheckAlive
  002aa	ff 76 08	 push	 DWORD PTR [esi+8]
  002ad	e8 00 00 00 00	 call	 ?IsActive@ioEtcItem@@QBE_NH@Z ; ioEtcItem::IsActive

; 199  : 				pItem->SetActive( pInfo->m_dwType2, true );

  002b2	6a 01		 push	 1
  002b4	ff 76 08	 push	 DWORD PTR [esi+8]
  002b7	8b cf		 mov	 ecx, edi
  002b9	88 46 38	 mov	 BYTE PTR [esi+56], al
  002bc	e8 00 00 00 00	 call	 ?SetActive@ioEtcItem@@QAEXH_N@Z ; ioEtcItem::SetActive

; 200  : 
; 201  : 				pInfo->m_kBackUp.m_iCash       = pItem->GetCash( pInfo->m_dwType2 );

  002c1	ff 76 08	 push	 DWORD PTR [esi+8]
  002c4	8b cf		 mov	 ecx, edi
  002c6	e8 00 00 00 00	 call	 ?GetCash@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetCash

; 202  : 				pItem->SetCash( pInfo->m_dwType2, pInfo->m_iCash );

  002cb	ff 76 14	 push	 DWORD PTR [esi+20]
  002ce	8b cf		 mov	 ecx, edi
  002d0	ff 76 08	 push	 DWORD PTR [esi+8]
  002d3	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  002d6	e8 00 00 00 00	 call	 ?SetCash@ioEtcItem@@QAEXHH@Z ; ioEtcItem::SetCash

; 203  : 
; 204  : 				pInfo->m_kBackUp.m_iPeso       = pItem->GetPeso( pInfo->m_dwType2 );

  002db	ff 76 08	 push	 DWORD PTR [esi+8]
  002de	8b cf		 mov	 ecx, edi
  002e0	e8 00 00 00 00	 call	 ?GetPeso@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetPeso

; 205  : 				pItem->SetPeso( pInfo->m_dwType2, pInfo->m_iPeso );

  002e5	ff 76 18	 push	 DWORD PTR [esi+24]
  002e8	8b cf		 mov	 ecx, edi
  002ea	ff 76 08	 push	 DWORD PTR [esi+8]
  002ed	89 46 30	 mov	 DWORD PTR [esi+48], eax
  002f0	e8 00 00 00 00	 call	 ?SetPeso@ioEtcItem@@QAEXHH@Z ; ioEtcItem::SetPeso

; 206  : 				
; 207  : 				pInfo->m_kBackUp.m_iShopOrder  = pItem->GetShopOrder( pInfo->m_dwType2 );

  002f5	ff 76 08	 push	 DWORD PTR [esi+8]
  002f8	8b cf		 mov	 ecx, edi
  002fa	e8 00 00 00 00	 call	 ?GetShopOrder@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetShopOrder
  002ff	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 208  : 				if( pInfo->m_iShopOrder == 0 )

  00302	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 209  : 					pItem->SetShopOrder( pInfo->m_dwType2, SALE_SHOP_ORDER );

  00305	8b cf		 mov	 ecx, edi
  00307	85 c0		 test	 eax, eax
  00309	75 04		 jne	 SHORT $LN27@CheckAlive
  0030b	6a 01		 push	 1

; 210  : 				else

  0030d	eb 01		 jmp	 SHORT $LN156@CheckAlive
$LN27@CheckAlive:

; 211  : 					pItem->SetShopOrder( pInfo->m_dwType2, pInfo->m_iShopOrder );

  0030f	50		 push	 eax
$LN156@CheckAlive:
  00310	ff 76 08	 push	 DWORD PTR [esi+8]
  00313	e8 00 00 00 00	 call	 ?SetShopOrder@ioEtcItem@@QAEXHH@Z ; ioEtcItem::SetShopOrder

; 212  : 
; 213  : 				pInfo->m_kBackUp.m_iShopMarkType  = pItem->GetShopMarkType( pInfo->m_dwType2 );

  00318	ff 76 08	 push	 DWORD PTR [esi+8]
  0031b	8b cf		 mov	 ecx, edi
  0031d	e8 00 00 00 00	 call	 ?GetShopMarkType@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetShopMarkType
  00322	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 214  : 				if( pInfo->m_iShopMarkType == SHOP_MARK_TYPE_NONE )

  00325	8b 46 24	 mov	 eax, DWORD PTR [esi+36]

; 215  : 					pItem->SetShopMarkType( pInfo->m_dwType2, SHOP_MARK_TYPE_SALE );

  00328	8b cf		 mov	 ecx, edi
  0032a	85 c0		 test	 eax, eax
  0032c	75 04		 jne	 SHORT $LN25@CheckAlive
  0032e	6a 01		 push	 1

; 216  : 				else

  00330	eb 3c		 jmp	 SHORT $LN160@CheckAlive
$LN25@CheckAlive:

; 217  : 					pItem->SetShopMarkType( pInfo->m_dwType2, pInfo->m_iShopMarkType );

  00332	50		 push	 eax

; 218  : 			}
; 219  : 			else

  00333	eb 39		 jmp	 SHORT $LN160@CheckAlive
$LN28@CheckAlive:

; 220  : 			{
; 221  : 				pItem->SetCash( pInfo->m_dwType2, pInfo->m_kBackUp.m_iCash );

  00335	ff 76 2c	 push	 DWORD PTR [esi+44]
  00338	ff 76 08	 push	 DWORD PTR [esi+8]
  0033b	e8 00 00 00 00	 call	 ?SetCash@ioEtcItem@@QAEXHH@Z ; ioEtcItem::SetCash

; 222  : 				pItem->SetPeso( pInfo->m_dwType2, pInfo->m_kBackUp.m_iPeso );

  00340	ff 76 30	 push	 DWORD PTR [esi+48]
  00343	8b cf		 mov	 ecx, edi
  00345	ff 76 08	 push	 DWORD PTR [esi+8]
  00348	e8 00 00 00 00	 call	 ?SetPeso@ioEtcItem@@QAEXHH@Z ; ioEtcItem::SetPeso

; 223  : 				pItem->SetActive( pInfo->m_dwType2, pInfo->m_kBackUp.m_bItemActive );

  0034d	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
  00351	50		 push	 eax
  00352	ff 76 08	 push	 DWORD PTR [esi+8]
  00355	8b cf		 mov	 ecx, edi
  00357	e8 00 00 00 00	 call	 ?SetActive@ioEtcItem@@QAEXH_N@Z ; ioEtcItem::SetActive

; 224  : 				pItem->SetShopOrder( pInfo->m_dwType2, pInfo->m_kBackUp.m_iShopOrder );

  0035c	ff 76 34	 push	 DWORD PTR [esi+52]
  0035f	8b cf		 mov	 ecx, edi
  00361	ff 76 08	 push	 DWORD PTR [esi+8]
  00364	e8 00 00 00 00	 call	 ?SetShopOrder@ioEtcItem@@QAEXHH@Z ; ioEtcItem::SetShopOrder

; 225  : 				pItem->SetShopMarkType( pInfo->m_dwType2, pInfo->m_kBackUp.m_iShopMarkType );

  00369	ff 76 3c	 push	 DWORD PTR [esi+60]
  0036c	8b cf		 mov	 ecx, edi
$LN160@CheckAlive:
  0036e	ff 76 08	 push	 DWORD PTR [esi+8]
  00371	e8 00 00 00 00	 call	 ?SetShopMarkType@ioEtcItem@@QAEXHH@Z ; ioEtcItem::SetShopMarkType

; 226  : 			}

  00376	e9 65 01 00 00	 jmp	 $LN52@CheckAlive
$LN30@CheckAlive:

; 227  : 		}
; 228  : 		else if( pInfo->m_eItemType == IT_EXTRA_BOX )

  0037b	83 f8 03	 cmp	 eax, 3
  0037e	0f 85 af 00 00
	00		 jne	 $LN21@CheckAlive

; 229  : 		{
; 230  : 			RandomMachineInfo *pItem = g_ExtraItemInfoMgr.GetRandomMachineInfo( pInfo->m_dwType1 );

  00384	ff 76 04	 push	 DWORD PTR [esi+4]
  00387	e8 00 00 00 00	 call	 ?GetSingleton@ioExtraItemInfoManager@@SAAAV1@XZ ; ioExtraItemInfoManager::GetSingleton
  0038c	8b c8		 mov	 ecx, eax
  0038e	e8 00 00 00 00	 call	 ?GetRandomMachineInfo@ioExtraItemInfoManager@@QAEPAVRandomMachineInfo@@H@Z ; ioExtraItemInfoManager::GetRandomMachineInfo
  00393	8b f8		 mov	 edi, eax

; 231  : 			if( !pItem )

  00395	85 ff		 test	 edi, edi
  00397	0f 84 43 01 00
	00		 je	 $LN52@CheckAlive

; 241  : 
; 242  : 				pInfo->m_kBackUp.m_iPeso       = pItem->GetNeedPeso( pInfo->m_dwType2 );

  0039d	8b cf		 mov	 ecx, edi
  0039f	84 db		 test	 bl, bl
  003a1	74 68		 je	 SHORT $LN19@CheckAlive

; 232  : 				continue;
; 233  : 
; 234  : 			if( bCheckAlive )
; 235  : 			{
; 236  : 				pInfo->m_kBackUp.m_bItemActive = pItem->IsActive();

  003a3	8a 47 71	 mov	 al, BYTE PTR [edi+113]
  003a6	88 46 38	 mov	 BYTE PTR [esi+56], al

; 237  : 				pItem->SetActive( true );
; 238  : 
; 239  : 				pInfo->m_kBackUp.m_iCash       = pItem->GetNeedCash();

  003a9	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  003ac	c6 47 71 01	 mov	 BYTE PTR [edi+113], 1
  003b0	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 240  : 				pItem->SetNeedCash( pInfo->m_iCash );

  003b3	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  003b6	89 47 50	 mov	 DWORD PTR [edi+80], eax

; 241  : 
; 242  : 				pInfo->m_kBackUp.m_iPeso       = pItem->GetNeedPeso( pInfo->m_dwType2 );

  003b9	ff 76 08	 push	 DWORD PTR [esi+8]
  003bc	e8 00 00 00 00	 call	 ?GetNeedPeso@RandomMachineInfo@@QBEHH@Z ; RandomMachineInfo::GetNeedPeso

; 243  : 				pItem->SetNeedPeso( pInfo->m_iPeso, pInfo->m_dwType2 );

  003c1	ff 76 08	 push	 DWORD PTR [esi+8]
  003c4	8b cf		 mov	 ecx, edi
  003c6	ff 76 18	 push	 DWORD PTR [esi+24]
  003c9	89 46 30	 mov	 DWORD PTR [esi+48], eax
  003cc	e8 00 00 00 00	 call	 ?SetNeedPeso@RandomMachineInfo@@QAEXHH@Z ; RandomMachineInfo::SetNeedPeso

; 244  : 
; 245  : 				pInfo->m_kBackUp.m_iShopOrder  = pItem->GetPriority();

  003d1	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  003d4	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 246  : 				if( pInfo->m_iShopOrder == 0 )

  003d7	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  003da	85 c0		 test	 eax, eax
  003dc	75 09		 jne	 SHORT $LN18@CheckAlive

; 247  : 					pItem->SetPriority( SALE_SHOP_ORDER );

  003de	c7 47 60 01 00
	00 00		 mov	 DWORD PTR [edi+96], 1

; 248  : 				else

  003e5	eb 03		 jmp	 SHORT $LN100@CheckAlive
$LN18@CheckAlive:

; 249  : 					pItem->SetPriority( pInfo->m_iShopOrder );

  003e7	89 47 60	 mov	 DWORD PTR [edi+96], eax
$LN100@CheckAlive:

; 250  : 
; 251  : 				pInfo->m_kBackUp.m_iShopMarkType  = pItem->GetShopMarkType();

  003ea	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  003ed	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 252  : 				if( pInfo->m_iShopMarkType == SHOP_MARK_TYPE_NONE )

  003f0	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  003f3	85 f6		 test	 esi, esi
  003f5	75 0c		 jne	 SHORT $LN16@CheckAlive

; 253  : 					pItem->SetShopMarkType( SHOP_MARK_TYPE_SALE );

  003f7	c7 47 6c 01 00
	00 00		 mov	 DWORD PTR [edi+108], 1

; 254  : 				else

  003fe	e9 dd 00 00 00	 jmp	 $LN52@CheckAlive
$LN16@CheckAlive:

; 255  : 					pItem->SetShopMarkType( pInfo->m_iShopMarkType );

  00403	89 77 6c	 mov	 DWORD PTR [edi+108], esi

; 256  : 			}
; 257  : 			else

  00406	e9 d5 00 00 00	 jmp	 $LN52@CheckAlive
$LN19@CheckAlive:

; 258  : 			{
; 259  : 				pItem->SetNeedCash( pInfo->m_kBackUp.m_iCash );

  0040b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0040e	89 47 50	 mov	 DWORD PTR [edi+80], eax

; 260  : 				pItem->SetNeedPeso( pInfo->m_kBackUp.m_iPeso, pInfo->m_dwType2 );

  00411	ff 76 08	 push	 DWORD PTR [esi+8]
  00414	ff 76 30	 push	 DWORD PTR [esi+48]
  00417	e8 00 00 00 00	 call	 ?SetNeedPeso@RandomMachineInfo@@QAEXHH@Z ; RandomMachineInfo::SetNeedPeso

; 261  : 				pItem->SetActive( pInfo->m_kBackUp.m_bItemActive );

  0041c	8a 46 38	 mov	 al, BYTE PTR [esi+56]
  0041f	88 47 71	 mov	 BYTE PTR [edi+113], al

; 262  : 				pItem->SetPriority( pInfo->m_kBackUp.m_iShopOrder );

  00422	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00425	89 47 60	 mov	 DWORD PTR [edi+96], eax

; 263  : 				pItem->SetShopMarkType( pInfo->m_kBackUp.m_iShopMarkType );

  00428	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0042b	89 47 6c	 mov	 DWORD PTR [edi+108], eax

; 264  : 			}

  0042e	e9 ad 00 00 00	 jmp	 $LN52@CheckAlive
$LN21@CheckAlive:

; 265  : 		}
; 266  : 		else if( pInfo->m_eItemType == IT_COSTUME )

  00433	83 f8 04	 cmp	 eax, 4
  00436	0f 85 a4 00 00
	00		 jne	 $LN52@CheckAlive

; 267  : 		{
; 268  : 			CostumeShopInfo *pItem = g_CostumeShopInfoMgr.GetCostumeMachineInfo( pInfo->m_dwType1 );

  0043c	ff 76 04	 push	 DWORD PTR [esi+4]
  0043f	e8 00 00 00 00	 call	 ?GetSingleton@ioCostumeShopInfoManager@@SAAAV1@XZ ; ioCostumeShopInfoManager::GetSingleton
  00444	8b c8		 mov	 ecx, eax
  00446	e8 00 00 00 00	 call	 ?GetCostumeMachineInfo@ioCostumeShopInfoManager@@QAEPAVCostumeShopInfo@@H@Z ; ioCostumeShopInfoManager::GetCostumeMachineInfo
  0044b	8b f8		 mov	 edi, eax

; 269  : 			if( !pItem )

  0044d	85 ff		 test	 edi, edi
  0044f	0f 84 8b 00 00
	00		 je	 $LN52@CheckAlive

; 279  : 
; 280  : 				pInfo->m_kBackUp.m_iPeso = pItem->GetNeedPeso( pInfo->m_dwType2 );

  00455	8b cf		 mov	 ecx, edi
  00457	84 db		 test	 bl, bl
  00459	74 62		 je	 SHORT $LN10@CheckAlive

; 270  : 				continue;
; 271  : 
; 272  : 			if( bCheckAlive )
; 273  : 			{
; 274  : 				pInfo->m_kBackUp.m_bItemActive = pItem->IsActive();

  0045b	8a 47 3d	 mov	 al, BYTE PTR [edi+61]
  0045e	88 46 38	 mov	 BYTE PTR [esi+56], al

; 275  : 				pItem->SetActive( true );
; 276  : 
; 277  : 				pInfo->m_kBackUp.m_iCash = pItem->GetNeedCash();

  00461	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00464	c6 47 3d 01	 mov	 BYTE PTR [edi+61], 1
  00468	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 278  : 				pItem->SetNeedCash( pInfo->m_iCash );

  0046b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0046e	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 279  : 
; 280  : 				pInfo->m_kBackUp.m_iPeso = pItem->GetNeedPeso( pInfo->m_dwType2 );

  00471	ff 76 08	 push	 DWORD PTR [esi+8]
  00474	e8 00 00 00 00	 call	 ?GetNeedPeso@CostumeShopInfo@@QBEHH@Z ; CostumeShopInfo::GetNeedPeso

; 281  : 				pItem->SetNeedPeso( pInfo->m_iPeso, pInfo->m_dwType2 );

  00479	ff 76 08	 push	 DWORD PTR [esi+8]
  0047c	8b cf		 mov	 ecx, edi
  0047e	ff 76 18	 push	 DWORD PTR [esi+24]
  00481	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00484	e8 00 00 00 00	 call	 ?SetNeedPeso@CostumeShopInfo@@QAEXHH@Z ; CostumeShopInfo::SetNeedPeso

; 282  : 
; 283  : 				pInfo->m_kBackUp.m_iShopOrder = pItem->GetPriority();

  00489	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0048c	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 284  : 				if( pInfo->m_iShopOrder == 0 )

  0048f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00492	85 c0		 test	 eax, eax
  00494	75 09		 jne	 SHORT $LN9@CheckAlive

; 285  : 					pItem->SetPriority( SALE_SHOP_ORDER );

  00496	c7 47 24 01 00
	00 00		 mov	 DWORD PTR [edi+36], 1

; 286  : 				else

  0049d	eb 03		 jmp	 SHORT $LN128@CheckAlive
$LN9@CheckAlive:

; 287  : 					pItem->SetPriority( pInfo->m_iShopOrder );

  0049f	89 47 24	 mov	 DWORD PTR [edi+36], eax
$LN128@CheckAlive:

; 288  : 
; 289  : 				pInfo->m_kBackUp.m_iShopMarkType  = pItem->GetShopMarkType();

  004a2	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  004a5	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 290  : 				if( pInfo->m_iShopMarkType == SHOP_MARK_TYPE_NONE )

  004a8	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  004ab	85 f6		 test	 esi, esi
  004ad	75 09		 jne	 SHORT $LN7@CheckAlive

; 291  : 					pItem->SetShopMarkType( SHOP_MARK_TYPE_SALE );

  004af	c7 47 30 01 00
	00 00		 mov	 DWORD PTR [edi+48], 1

; 292  : 				else

  004b6	eb 28		 jmp	 SHORT $LN52@CheckAlive
$LN7@CheckAlive:

; 293  : 					pItem->SetShopMarkType( pInfo->m_iShopMarkType );

  004b8	89 77 30	 mov	 DWORD PTR [edi+48], esi

; 294  : 			}
; 295  : 			else

  004bb	eb 23		 jmp	 SHORT $LN52@CheckAlive
$LN10@CheckAlive:

; 296  : 			{
; 297  : 				pItem->SetNeedCash( pInfo->m_kBackUp.m_iCash );

  004bd	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  004c0	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 298  : 				pItem->SetNeedPeso( pInfo->m_kBackUp.m_iPeso, pInfo->m_dwType2 );

  004c3	ff 76 08	 push	 DWORD PTR [esi+8]
  004c6	ff 76 30	 push	 DWORD PTR [esi+48]
  004c9	e8 00 00 00 00	 call	 ?SetNeedPeso@CostumeShopInfo@@QAEXHH@Z ; CostumeShopInfo::SetNeedPeso

; 299  : 				pItem->SetActive( pInfo->m_kBackUp.m_bItemActive );

  004ce	8a 46 38	 mov	 al, BYTE PTR [esi+56]
  004d1	88 47 3d	 mov	 BYTE PTR [edi+61], al

; 300  : 				pItem->SetPriority( pInfo->m_kBackUp.m_iShopOrder );

  004d4	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  004d7	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 301  : 				pItem->SetShopMarkType( pInfo->m_kBackUp.m_iShopMarkType );

  004da	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  004dd	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN52@CheckAlive:

; 110  : 
; 111  : 	// check
; 112  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  004e0	8b 45 08	 mov	 eax, DWORD PTR _iter$506193[ebp]
  004e3	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  004e6	83 c0 04	 add	 eax, 4
$LN153@CheckAlive:
  004e9	89 45 08	 mov	 DWORD PTR _iter$506193[ebp], eax
  004ec	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  004ef	0f 85 30 fb ff
	ff		 jne	 $LL152@CheckAlive

; 302  : 			}
; 303  : 		}
; 304  : 
; 305  : #ifdef _DEBUG
; 306  : 		if( bCheckAlive )
; 307  : 			LOG.PrintTimeAndLog( 0, "Sale ON : [%d]:%d:%d:CASH:%d:PESO:%d", (int)pInfo->m_eItemType, pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_iCash, pInfo->m_iPeso );
; 308  : 		else
; 309  : 			LOG.PrintTimeAndLog( 0, "Sale OFF : [%d]:%d:%d:CASH:%d:PESO:%d", (int)pInfo->m_eItemType, pInfo->m_dwType1, pInfo->m_dwType2, pInfo->m_kBackUp.m_iCash, pInfo->m_kBackUp.m_iPeso );
; 310  : #endif
; 311  : 	}
; 312  : 
; 313  : 	// shop
; 314  : 	if( g_GUIMgr.IsShow( NEW_SHOP_WND ) || g_GUIMgr.IsShow( MY_INVENTORY_WND ) )

  004f5	be f8 17 00 00	 mov	 esi, 6136		; 000017f8H
  004fa	56		 push	 esi
  004fb	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00500	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?IsShow@ioGUIManager@@QAE_NK@Z
  00506	8b c8		 mov	 ecx, eax
  00508	ff d7		 call	 edi
  0050a	8d 5e 9e	 lea	 ebx, DWORD PTR [esi-98]
  0050d	84 c0		 test	 al, al
  0050f	75 0e		 jne	 SHORT $LN3@CheckAlive
  00511	53		 push	 ebx
  00512	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00517	8b c8		 mov	 ecx, eax
  00519	ff d7		 call	 edi
  0051b	84 c0		 test	 al, al
  0051d	74 4c		 je	 SHORT $LN149@CheckAlive
$LN3@CheckAlive:

; 315  : 	{
; 316  : 		g_GUIMgr.HideWnd( NEW_SHOP_WND );

  0051f	6a 00		 push	 0
  00521	56		 push	 esi
  00522	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00527	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?HideWnd@ioGUIManager@@QAEXK_N@Z
  0052d	8b c8		 mov	 ecx, eax
  0052f	ff d7		 call	 edi

; 317  : 		g_GUIMgr.HideWnd( MY_INVENTORY_WND );

  00531	6a 00		 push	 0
  00533	53		 push	 ebx
  00534	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00539	8b c8		 mov	 ecx, eax
  0053b	ff d7		 call	 edi

; 318  : 		g_GUIMgr.SetMsgBox( MB_OK, NULL, STR(1) );

  0053d	33 ff		 xor	 edi, edi
  0053f	57		 push	 edi
  00540	6a 01		 push	 1
  00542	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00547	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GEDPJAF@ioSaleManager?3?3CheckAlive?$AA@
  0054c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00552	8b c8		 mov	 ecx, eax
  00554	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0055a	50		 push	 eax
  0055b	57		 push	 edi
  0055c	57		 push	 edi
  0055d	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00562	50		 push	 eax
  00563	e8 00 00 00 00	 call	 ?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ ; ioSP2GUIManager::SetMsgBox
  00568	83 c4 10	 add	 esp, 16			; 00000010H
$LN149@CheckAlive:

; 319  : 	}
; 320  : 	
; 321  : 	if( !g_GUIMgr.IsShow( NEW_SHOP_WND ) )

  0056b	56		 push	 esi
  0056c	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00571	8b c8		 mov	 ecx, eax
  00573	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioGUIManager@@QAE_NK@Z
  00579	84 c0		 test	 al, al
  0057b	75 3b		 jne	 SHORT $LN1@CheckAlive

; 322  : 	{
; 323  : 		NewShopWnd *pNewShopWnd = dynamic_cast<NewShopWnd*>( g_GUIMgr.FindWnd( NEW_SHOP_WND ) );

  0057d	6a 00		 push	 0
  0057f	68 00 00 00 00	 push	 OFFSET ??_R0?AVNewShopWnd@@@8
  00584	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00589	6a 00		 push	 0
  0058b	56		 push	 esi
  0058c	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00591	8b c8		 mov	 ecx, eax
  00593	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z
  00599	50		 push	 eax
  0059a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0059f	8b f0		 mov	 esi, eax
  005a1	83 c4 14	 add	 esp, 20			; 00000014H

; 324  : 		if( pNewShopWnd )

  005a4	85 f6		 test	 esi, esi
  005a6	74 10		 je	 SHORT $LN1@CheckAlive

; 325  : 		{
; 326  : 			pNewShopWnd->ParseShopData( true );

  005a8	6a 01		 push	 1
  005aa	8b ce		 mov	 ecx, esi
  005ac	e8 00 00 00 00	 call	 ?ParseShopData@NewShopWnd@@QAEX_N@Z ; NewShopWnd::ParseShopData

; 327  : 			pNewShopWnd->UpdateEventItemCnt();

  005b1	8b ce		 mov	 ecx, esi
  005b3	e8 00 00 00 00	 call	 ?UpdateEventItemCnt@NewShopWnd@@QAEXXZ ; NewShopWnd::UpdateEventItemCnt
$LN1@CheckAlive:
  005b8	5f		 pop	 edi
  005b9	5e		 pop	 esi
  005ba	5b		 pop	 ebx

; 328  : 		}
; 329  : 	}
; 330  : }

  005bb	c9		 leave
  005bc	c2 04 00	 ret	 4
?CheckAlive@ioSaleManager@@QAEXAAVSP2Packet@@@Z ENDP	; ioSaleManager::CheckAlive
_TEXT	ENDS
PUBLIC	?GetCash@ioSaleManager@@QAEHW4ItemType@1@KK@Z	; ioSaleManager::GetCash
; Function compile flags: /Ogsp
;	COMDAT ?GetCash@ioSaleManager@@QAEHW4ItemType@1@KK@Z
_TEXT	SEGMENT
_eItemType$ = 8						; size = 4
_dwType1$ = 12						; size = 4
_dwType2$ = 16						; size = 4
?GetCash@ioSaleManager@@QAEHW4ItemType@1@KK@Z PROC	; ioSaleManager::GetCash, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 380  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	56		 push	 esi
  0000a	eb 26		 jmp	 SHORT $LN43@GetCash
$LL21@GetCash:

; 381  : 	{
; 382  : 		SaleInfo *pInfo = *iter;

  0000c	8b 02		 mov	 eax, DWORD PTR [edx]

; 383  : 		if( !pInfo )

  0000e	85 c0		 test	 eax, eax
  00010	74 1d		 je	 SHORT $LN7@GetCash

; 384  : 			continue;
; 385  : 		if( pInfo->m_eItemType != eItemType )

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
  00014	3b 75 08	 cmp	 esi, DWORD PTR _eItemType$[ebp]
  00017	75 16		 jne	 SHORT $LN7@GetCash

; 386  : 			continue;
; 387  : 		if( !pInfo->m_bActive )

  00019	80 78 1c 00	 cmp	 BYTE PTR [eax+28], 0
  0001d	74 10		 je	 SHORT $LN7@GetCash

; 388  : 			continue;
; 389  : 		if( pInfo->m_dwType1 != dwType1 )

  0001f	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00022	3b 75 0c	 cmp	 esi, DWORD PTR _dwType1$[ebp]
  00025	75 08		 jne	 SHORT $LN7@GetCash

; 390  : 			continue;
; 391  : 		if( pInfo->m_dwType2 != dwType2 )

  00027	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0002a	3b 75 10	 cmp	 esi, DWORD PTR _dwType2$[ebp]
  0002d	74 0f		 je	 SHORT $LN1@GetCash
$LN7@GetCash:

; 380  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  0002f	83 c2 04	 add	 edx, 4
$LN43@GetCash:
  00032	3b d1		 cmp	 edx, ecx
  00034	75 d6		 jne	 SHORT $LL21@GetCash

; 395  : 	}
; 396  : 
; 397  : 	return -1;

  00036	83 c8 ff	 or	 eax, -1
$LN9@GetCash:
  00039	5e		 pop	 esi

; 398  : }

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
$LN1@GetCash:

; 392  : 			continue;
; 393  : 
; 394  : 		return pInfo->m_iCash;

  0003e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00041	eb f6		 jmp	 SHORT $LN9@GetCash
?GetCash@ioSaleManager@@QAEHW4ItemType@1@KK@Z ENDP	; ioSaleManager::GetCash
_TEXT	ENDS
PUBLIC	?GetPeso@ioSaleManager@@QAEHW4ItemType@1@KK@Z	; ioSaleManager::GetPeso
; Function compile flags: /Ogsp
;	COMDAT ?GetPeso@ioSaleManager@@QAEHW4ItemType@1@KK@Z
_TEXT	SEGMENT
_eItemType$ = 8						; size = 4
_dwType1$ = 12						; size = 4
_dwType2$ = 16						; size = 4
?GetPeso@ioSaleManager@@QAEHW4ItemType@1@KK@Z PROC	; ioSaleManager::GetPeso, COMDAT
; _this$ = ecx

; 401  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 402  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	56		 push	 esi
  0000a	eb 26		 jmp	 SHORT $LN43@GetPeso
$LL21@GetPeso:

; 403  : 	{
; 404  : 		SaleInfo *pInfo = *iter;

  0000c	8b 02		 mov	 eax, DWORD PTR [edx]

; 405  : 		if( !pInfo )

  0000e	85 c0		 test	 eax, eax
  00010	74 1d		 je	 SHORT $LN7@GetPeso

; 406  : 			continue;
; 407  : 		if( pInfo->m_eItemType != eItemType )

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
  00014	3b 75 08	 cmp	 esi, DWORD PTR _eItemType$[ebp]
  00017	75 16		 jne	 SHORT $LN7@GetPeso

; 408  : 			continue;
; 409  : 		if( !pInfo->m_bActive )

  00019	80 78 1c 00	 cmp	 BYTE PTR [eax+28], 0
  0001d	74 10		 je	 SHORT $LN7@GetPeso

; 410  : 			continue;
; 411  : 		if( pInfo->m_dwType1 != dwType1 )

  0001f	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00022	3b 75 0c	 cmp	 esi, DWORD PTR _dwType1$[ebp]
  00025	75 08		 jne	 SHORT $LN7@GetPeso

; 412  : 			continue;
; 413  : 		if( pInfo->m_dwType2 != dwType2 )

  00027	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0002a	3b 75 10	 cmp	 esi, DWORD PTR _dwType2$[ebp]
  0002d	74 0f		 je	 SHORT $LN1@GetPeso
$LN7@GetPeso:

; 402  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  0002f	83 c2 04	 add	 edx, 4
$LN43@GetPeso:
  00032	3b d1		 cmp	 edx, ecx
  00034	75 d6		 jne	 SHORT $LL21@GetPeso

; 417  : 	}
; 418  : 
; 419  : 	return -1;

  00036	83 c8 ff	 or	 eax, -1
$LN9@GetPeso:
  00039	5e		 pop	 esi

; 420  : }

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
$LN1@GetPeso:

; 414  : 			continue;
; 415  : 
; 416  : 		return pInfo->m_iPeso;

  0003e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00041	eb f6		 jmp	 SHORT $LN9@GetPeso
?GetPeso@ioSaleManager@@QAEHW4ItemType@1@KK@Z ENDP	; ioSaleManager::GetPeso
_TEXT	ENDS
PUBLIC	?IsSaleByRecommended@ioSaleManager@@QAE_NW4ItemType@1@KH@Z ; ioSaleManager::IsSaleByRecommended
; Function compile flags: /Ogsp
;	COMDAT ?IsSaleByRecommended@ioSaleManager@@QAE_NW4ItemType@1@KH@Z
_TEXT	SEGMENT
_eItemType$ = 8						; size = 4
_dwType1$ = 12						; size = 4
_iIniArray$ = 16					; size = 4
?IsSaleByRecommended@ioSaleManager@@QAE_NW4ItemType@1@KH@Z PROC ; ioSaleManager::IsSaleByRecommended, COMDAT
; _this$ = ecx

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 424  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	56		 push	 esi
  0000a	eb 20		 jmp	 SHORT $LN44@IsSaleByRe
$LL22@IsSaleByRe:

; 425  : 	{
; 426  : 		SaleInfo *pInfo = *iter;

  0000c	8b 02		 mov	 eax, DWORD PTR [edx]

; 427  : 		if( !pInfo )

  0000e	85 c0		 test	 eax, eax
  00010	74 17		 je	 SHORT $LN8@IsSaleByRe

; 428  : 			continue;
; 429  : 		if( pInfo->m_eItemType != eItemType )

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
  00014	3b 75 08	 cmp	 esi, DWORD PTR _eItemType$[ebp]
  00017	75 10		 jne	 SHORT $LN8@IsSaleByRe

; 430  : 			continue;		
; 431  : 		if( pInfo->m_dwType1 != dwType1 )

  00019	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0001c	3b 75 0c	 cmp	 esi, DWORD PTR _dwType1$[ebp]
  0001f	75 08		 jne	 SHORT $LN8@IsSaleByRe

; 432  : 			continue;
; 433  : 		if( pInfo->m_iINIArray != iIniArray )

  00021	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00024	3b 75 10	 cmp	 esi, DWORD PTR _iIniArray$[ebp]
  00027	74 0e		 je	 SHORT $LN3@IsSaleByRe
$LN8@IsSaleByRe:

; 424  : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  00029	83 c2 04	 add	 edx, 4
$LN44@IsSaleByRe:
  0002c	3b d1		 cmp	 edx, ecx
  0002e	75 dc		 jne	 SHORT $LL22@IsSaleByRe

; 440  : 	}
; 441  : 	
; 442  : 	//해당 함수는 세일 세팅이 존재하고 세일기간이 종료된 경우에 대해서 예외처리를 걸기 위한 함수기때문에 세일기간 세팅이 없다면 true를 리턴해서
; 443  : 	//예외처리가 되지 않도록 하기 위해 true를 리턴
; 444  : 	return true;

  00030	b0 01		 mov	 al, 1
$LN10@IsSaleByRe:
  00032	5e		 pop	 esi

; 445  : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
$LN3@IsSaleByRe:

; 434  : 			continue;
; 435  : 
; 436  : 		if( pInfo->m_bActive )

  00037	80 78 1c 00	 cmp	 BYTE PTR [eax+28], 0
  0003b	0f 95 c0	 setne	 al

; 437  : 			return true;
; 438  : 		else
; 439  : 			return false;

  0003e	eb f2		 jmp	 SHORT $LN10@IsSaleByRe
?IsSaleByRecommended@ioSaleManager@@QAE_NW4ItemType@1@KH@Z ENDP ; ioSaleManager::IsSaleByRecommended
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@0@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$508308 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@0@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$508308[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXXZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXI@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAUSaleInfo@ioSaleManager@@@std@@YAPAPAUSaleInfo@ioSaleManager@@IPAPAU12@@Z ; std::_Allocate<ioSaleManager::SaleInfo *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUSaleInfo@ioSaleManager@@PAPAU12@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@YAPAPAUSaleInfo@ioSaleManager@@PAPAU12@00AAV?$allocator@PAUSaleInfo@ioSaleManager@@@0@@Z ; std::_Uninitialized_move<ioSaleManager::SaleInfo * *,ioSaleManager::SaleInfo * *,std::allocator<ioSaleManager::SaleInfo *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::reserve
_TEXT	ENDS
PUBLIC	??1?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::~vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::~vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Tidy
??1?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::~vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T508473 = -4						; size = 4
?clear@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXXZ PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T508473[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@0@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXI@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IBEII@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXI@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioSaleManager@@6B@				; ioSaleManager::`vftable'
PUBLIC	??0ioSaleManager@@QAE@XZ			; ioSaleManager::ioSaleManager
PUBLIC	??_R4ioSaleManager@@6B@				; ioSaleManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioSaleManager@@@8			; ioSaleManager `RTTI Type Descriptor'
PUBLIC	??_R3ioSaleManager@@8				; ioSaleManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSaleManager@@8				; ioSaleManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSaleManager@@8			; ioSaleManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VioSaleManager@@@@8	; Singleton<ioSaleManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VioSaleManager@@@@@8	; Singleton<ioSaleManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VioSaleManager@@@@8		; Singleton<ioSaleManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VioSaleManager@@@@8		; Singleton<ioSaleManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VioSaleManager@@@@8	; Singleton<ioSaleManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioSaleManager@@UAEPAXI@Z:PROC		; ioSaleManager::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VioSaleManager@@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VioSaleManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioSaleManager@@@@@8 ; Singleton<ioSaleManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioSaleManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VioSaleManager@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VioSaleManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VioSaleManager@@@@8 ; Singleton<ioSaleManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VioSaleManager@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VioSaleManager@@@@8 DD 00H		; Singleton<ioSaleManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VioSaleManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VioSaleManager@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VioSaleManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<ioSaleManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VioSaleManager@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VioSaleManager@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VioSaleManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioSaleManager@@@@@8 ; Singleton<ioSaleManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioSaleManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSaleManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSaleManager@@8 DD FLAT:??_R0?AVioSaleManager@@@8 ; ioSaleManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSaleManager@@8
rdata$r	ENDS
;	COMDAT ??_R2ioSaleManager@@8
rdata$r	SEGMENT
??_R2ioSaleManager@@8 DD FLAT:??_R1A@?0A@EA@ioSaleManager@@8 ; ioSaleManager::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VioSaleManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3ioSaleManager@@8
rdata$r	SEGMENT
??_R3ioSaleManager@@8 DD 00H				; ioSaleManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioSaleManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSaleManager@@@8
_DATA	SEGMENT
??_R0?AVioSaleManager@@@8 DD FLAT:??_7type_info@@6B@	; ioSaleManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSaleManager@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioSaleManager@@6B@
rdata$r	SEGMENT
??_R4ioSaleManager@@6B@ DD 00H				; ioSaleManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioSaleManager@@@8
	DD	FLAT:??_R3ioSaleManager@@8
rdata$r	ENDS
;	COMDAT ??_7ioSaleManager@@6B@
CONST	SEGMENT
??_7ioSaleManager@@6B@ DD FLAT:??_R4ioSaleManager@@6B@	; ioSaleManager::`vftable'
	DD	FLAT:??_EioSaleManager@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.cpp
CONST	ENDS
;	COMDAT ??0ioSaleManager@@QAE@XZ
_TEXT	SEGMENT
??0ioSaleManager@@QAE@XZ PROC				; ioSaleManager::ioSaleManager, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A, eax ; Singleton<ioSaleManager>::ms_Singleton
  00007	33 c9		 xor	 ecx, ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ioSaleManager@@6B@
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 13   : 	m_dwProcessTime = 0;

  00018	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 14   : }

  0001b	c3		 ret	 0
??0ioSaleManager@@QAE@XZ ENDP				; ioSaleManager::ioSaleManager
_TEXT	ENDS
PUBLIC	?Clear@ioSaleManager@@IAEXXZ			; ioSaleManager::Clear
; Function compile flags: /Ogsp
;	COMDAT ?Clear@ioSaleManager@@IAEXXZ
_TEXT	SEGMENT
$T508756 = -4						; size = 4
?Clear@ioSaleManager@@IAEXXZ PROC			; ioSaleManager::Clear, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx

; 81   : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  00008	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0000b	57		 push	 edi
  0000c	eb 13		 jmp	 SHORT $LN65@Clear
$LL17@Clear:

; 82   : 	{
; 83   : 	   SAFEDELETE( *iter );

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 0a		 je	 SHORT $LN3@Clear
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	83 26 00	 and	 DWORD PTR [esi], 0
  0001d	59		 pop	 ecx
$LN3@Clear:

; 81   : 	for(vSaleInfoVector::iterator iter = m_vSaleInfoVector.begin(); iter != m_vSaleInfoVector.end(); ++iter)

  0001e	83 c6 04	 add	 esi, 4
$LN65@Clear:
  00021	3b 73 08	 cmp	 esi, DWORD PTR [ebx+8]
  00024	75 e8		 jne	 SHORT $LL17@Clear

; 84   : 	}
; 85   : 	m_vSaleInfoVector.clear();

  00026	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00029	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	8d 45 fc	 lea	 eax, DWORD PTR $T508756[ebp]
  00031	50		 push	 eax
  00032	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00035	e8 00 00 00 00	 call	 ?erase@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@@2@0@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::erase
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx

; 86   : }

  0003d	c9		 leave
  0003e	c3		 ret	 0
?Clear@ioSaleManager@@IAEXXZ ENDP			; ioSaleManager::Clear
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXABQAUSaleInfo@ioSaleManager@@@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXABQAUSaleInfo@ioSaleManager@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXABQAUSaleInfo@ioSaleManager@@@Z PROC ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXI@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXI@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXABQAUSaleInfo@ioSaleManager@@@Z ENDP ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::push_back
_TEXT	ENDS
PUBLIC	??1ioSaleManager@@UAE@XZ			; ioSaleManager::~ioSaleManager
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1ioSaleManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioSaleManager@@UAE@XZ$0
__ehfuncinfo$??1ioSaleManager@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioSaleManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.cpp
xdata$x	ENDS
;	COMDAT ??1ioSaleManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioSaleManager@@UAE@XZ PROC				; ioSaleManager::~ioSaleManager, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioSaleManager@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSaleManager@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 18   : 	Clear();

  0001b	e8 00 00 00 00	 call	 ?Clear@ioSaleManager@@IAEXXZ ; ioSaleManager::Clear

; 19   : }

  00020	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00023	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@IAEXXZ ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::_Tidy
  00028	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioSaleManager@@@@1PAVioSaleManager@@A, 0 ; Singleton<ioSaleManager>::ms_Singleton
  0002f	e8 00 00 00 00	 call	 __EH_epilog3
  00034	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioSaleManager@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioSaleManager@@@@QAE@XZ ; Singleton<ioSaleManager>::~Singleton<ioSaleManager>
__ehhandler$??1ioSaleManager@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioSaleManager@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioSaleManager@@UAE@XZ ENDP				; ioSaleManager::~ioSaleManager
PUBLIC	??_C@_0BH@FCCNBPLN@?$CFs?5Error?5Item?5Type?5?3?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BH@FPDHMDKJ@ioSaleManager?3?3LoadINI?$AA@ ; `string'
PUBLIC	_dwType2$GSCopy$
PUBLIC	_eItemType$GSCopy$
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_dwType1$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoadINI@ioSaleManager@@QAEX_NAAVioINILoader@@W4ItemType@1@KKH@Z ; ioSaleManager::LoadINI
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BH@FCCNBPLN@?$CFs?5Error?5Item?5Type?5?3?$CFd?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0BH@FCCNBPLN@?$CFs?5Error?5Item?5Type?5?3?$CFd?$AA@ DB '%s Error It'
	DB	'em Type :%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FPDHMDKJ@ioSaleManager?3?3LoadINI?$AA@
CONST	SEGMENT
??_C@_0BH@FPDHMDKJ@ioSaleManager?3?3LoadINI?$AA@ DB 'ioSaleManager::LoadI'
	DB	'NI', 00H					; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosalemanager.cpp
CONST	ENDS
;	COMDAT ?LoadINI@ioSaleManager@@QAEX_NAAVioINILoader@@W4ItemType@1@KKH@Z
_TEXT	SEGMENT
_dwStartDate$ = -328					; size = 4
_dwType1$GSCopy$ = -324					; size = 4
_eItemType$GSCopy$ = -320				; size = 4
_pSaleInfo$ = -316					; size = 4
_this$GSCopy$ = -312					; size = 4
_dwType2$GSCopy$ = -308					; size = 4
tv3971 = -304						; size = 4
_rkLoader$GSCopy$ = -300				; size = 4
_bInfoPush$ = -293					; size = 1
_szKeyName$ = -292					; size = 260
___encStr$505870 = -32					; size = 23
___encStr$505718 = -28					; size = 19
___encStr$505262 = -28					; size = 17
___encStr$505099 = -28					; size = 19
___encStr$505566 = -24					; size = 13
___encStr$505414 = -24					; size = 13
__$ArrayPad$ = -4					; size = 4
_bCreateLoad$ = 8					; size = 1
_rkLoader$ = 12						; size = 4
_eItemType$ = 16					; size = 4
_dwType1$ = 20						; size = 4
_dwType2$ = 24						; size = 4
_iINIArray$ = 28					; size = 4
?LoadINI@ioSaleManager@@QAEX_NAAVioINILoader@@W4ItemType@1@KKH@Z PROC ; ioSaleManager::LoadINI, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _eItemType$[ebp]
  00016	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 37   : 	if( !pSaleInfo && bCreateLoad )

  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _dwType1$[ebp]
  0001f	57		 push	 edi
  00020	8b 7d 0c	 mov	 edi, DWORD PTR _rkLoader$[ebp]
  00023	89 8d bc fe ff
	ff		 mov	 DWORD PTR _dwType1$GSCopy$[ebp], ecx
  00029	8b 4d 18	 mov	 ecx, DWORD PTR _dwType2$[ebp]

; 72   : 	StringCbPrintf_e( szKeyName, sizeof( szKeyName ), "sale_shop_mark_type_%d" , iINIArray+1);

  0002c	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00032	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _eItemType$GSCopy$[ebp], eax
  00038	89 8d cc fe ff
	ff		 mov	 DWORD PTR _dwType2$GSCopy$[ebp], ecx
  0003e	83 f8 ff	 cmp	 eax, -1
  00041	75 21		 jne	 SHORT $LN599@LoadINI

; 23   : 	if( eItemType == IT_NONE )
; 24   : 	{
; 25   : 		LOG.PrintTimeAndLog( 0, "%s Error Item Type :%d", __FUNCTION__, (int) eItemType );

  00043	50		 push	 eax
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FPDHMDKJ@ioSaleManager?3?3LoadINI?$AA@
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FCCNBPLN@?$CFs?5Error?5Item?5Type?5?3?$CFd?$AA@
  0004e	6a 00		 push	 0
  00050	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0005c	83 c4 14	 add	 esp, 20			; 00000014H

; 26   : 		return;

  0005f	e9 f8 03 00 00	 jmp	 $LN1@LoadINI
$LN599@LoadINI:

; 27   : 	}
; 28   : 
; 29   : 	char szKeyName[MAX_PATH]="";

  00064	68 03 01 00 00	 push	 259			; 00000103H
  00069	8d 85 dd fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp+1]
  0006f	6a 00		 push	 0
  00071	50		 push	 eax
  00072	c6 85 dc fe ff
	ff 00		 mov	 BYTE PTR _szKeyName$[ebp], 0
  00079	e8 00 00 00 00	 call	 _memset
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	6a 04		 push	 4

; 30   : 	StringCbPrintf_e( szKeyName, sizeof( szKeyName ), "sale_start_date_%d" , iINIArray+1);

  00083	c7 45 e4 9e 8d
	87 8f		 mov	 DWORD PTR ___encStr$505099[ebp], -1886941794 ; 8f878d9eH
  0008a	c7 45 e8 b2 9f
	9f 8b		 mov	 DWORD PTR ___encStr$505099[ebp+4], -1952473166 ; 8b9f9fb2H
  00091	c7 45 ec 9f 98
	b4 8e		 mov	 DWORD PTR ___encStr$505099[ebp+8], -1900767073 ; 8eb4989fH
  00098	c7 45 f0 8c 98
	8e b5		 mov	 DWORD PTR ___encStr$505099[ebp+12], -1248946036 ; b58e988cH
  0009f	66 c7 45 f4 c8
	88		 mov	 WORD PTR ___encStr$505099[ebp+16], 35016 ; 000088c8H
  000a5	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$505099[ebp]
  000a8	c6 45 f6 00	 mov	 BYTE PTR ___encStr$505099[ebp+18], 0
  000ac	59		 pop	 ecx
$LL610@LoadINI:
  000ad	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b3	83 c0 04	 add	 eax, 4
  000b6	49		 dec	 ecx
  000b7	75 f4		 jne	 SHORT $LL610@LoadINI
  000b9	6a 10		 push	 16			; 00000010H
  000bb	58		 pop	 eax
$LL607@LoadINI:
  000bc	8b c8		 mov	 ecx, eax
  000be	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000c4	79 05		 jns	 SHORT $LN680@LoadINI
  000c6	49		 dec	 ecx
  000c7	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000ca	41		 inc	 ecx
$LN680@LoadINI:
  000cb	b2 ed		 mov	 dl, -19			; ffffffedH
  000cd	2a d1		 sub	 dl, cl
  000cf	30 54 05 e4	 xor	 BYTE PTR ___encStr$505099[ebp+eax], dl
  000d3	40		 inc	 eax
  000d4	83 f8 12	 cmp	 eax, 18			; 00000012H
  000d7	7c e3		 jl	 SHORT $LL607@LoadINI
  000d9	8b 45 1c	 mov	 eax, DWORD PTR _iINIArray$[ebp]
  000dc	53		 push	 ebx
  000dd	56		 push	 esi
  000de	40		 inc	 eax
  000df	50		 push	 eax
  000e0	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv3971[ebp], eax
  000e6	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$505099[ebp]
  000e9	50		 push	 eax
  000ea	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  000ef	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  000f5	56		 push	 esi
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 31   : 	DWORD dwStartDate = rkLoader.LoadInt( szKeyName, 0 );

  000fc	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00102	83 c4 10	 add	 esp, 16			; 00000010H
  00105	6a 00		 push	 0
  00107	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0010d	50		 push	 eax
  0010e	8b cf		 mov	 ecx, edi
  00110	ff d3		 call	 ebx
  00112	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _dwStartDate$[ebp], eax

; 32   : 	if( dwStartDate == 0 )

  00118	85 c0		 test	 eax, eax
  0011a	0f 84 3a 03 00
	00		 je	 $LN678@LoadINI

; 33   : 		return;
; 34   : 	
; 35   : 	bool bInfoPush = false;
; 36   : 	SaleInfo *pSaleInfo = GetInfo( eItemType, dwType1, dwType2 );

  00120	ff b5 cc fe ff
	ff		 push	 DWORD PTR _dwType2$GSCopy$[ebp]
  00126	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0012c	ff b5 bc fe ff
	ff		 push	 DWORD PTR _dwType1$GSCopy$[ebp]
  00132	c6 85 db fe ff
	ff 00		 mov	 BYTE PTR _bInfoPush$[ebp], 0
  00139	ff b5 c0 fe ff
	ff		 push	 DWORD PTR _eItemType$GSCopy$[ebp]
  0013f	e8 00 00 00 00	 call	 ?GetInfo@ioSaleManager@@IAEPAUSaleInfo@1@W4ItemType@1@KK@Z ; ioSaleManager::GetInfo
  00144	8b f8		 mov	 edi, eax
  00146	89 bd c4 fe ff
	ff		 mov	 DWORD PTR _pSaleInfo$[ebp], edi

; 37   : 	if( !pSaleInfo && bCreateLoad )

  0014c	85 ff		 test	 edi, edi
  0014e	75 37		 jne	 SHORT $LN677@LoadINI
  00150	38 45 08	 cmp	 BYTE PTR _bCreateLoad$[ebp], al
  00153	0f 84 01 03 00
	00		 je	 $LN678@LoadINI

; 38   : 	{
; 39   : 		pSaleInfo = new SaleInfo;

  00159	6a 40		 push	 64			; 00000040H
  0015b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00160	59		 pop	 ecx
  00161	85 c0		 test	 eax, eax
  00163	74 09		 je	 SHORT $LN602@LoadINI
  00165	8b c8		 mov	 ecx, eax
  00167	e8 00 00 00 00	 call	 ??0SaleInfo@ioSaleManager@@QAE@XZ ; ioSaleManager::SaleInfo::SaleInfo
  0016c	eb 02		 jmp	 SHORT $LN603@LoadINI
$LN602@LoadINI:
  0016e	33 c0		 xor	 eax, eax
$LN603@LoadINI:
  00170	8b f8		 mov	 edi, eax
  00172	89 bd c4 fe ff
	ff		 mov	 DWORD PTR _pSaleInfo$[ebp], edi

; 40   : 		bInfoPush = true;

  00178	c6 85 db fe ff
	ff 01		 mov	 BYTE PTR _bInfoPush$[ebp], 1

; 41   : 	}
; 42   : 
; 43   : 	if( !pSaleInfo )

  0017f	85 c0		 test	 eax, eax
  00181	0f 84 d3 02 00
	00		 je	 $LN678@LoadINI
$LN677@LoadINI:

; 44   : 		return;
; 45   : 
; 46   : 	pSaleInfo->Clear();

  00187	8b cf		 mov	 ecx, edi
  00189	e8 00 00 00 00	 call	 ?Clear@SaleInfo@ioSaleManager@@QAEXXZ ; ioSaleManager::SaleInfo::Clear

; 47   : 
; 48   : 	pSaleInfo->m_eItemType = eItemType;

  0018e	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _eItemType$GSCopy$[ebp]
  00194	89 07		 mov	 DWORD PTR [edi], eax

; 49   : 	pSaleInfo->m_dwType1   = dwType1;

  00196	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _dwType1$GSCopy$[ebp]
  0019c	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 50   : 	pSaleInfo->m_dwType2   = dwType2;

  0019f	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _dwType2$GSCopy$[ebp]
  001a5	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 51   : 
; 52   : 	pSaleInfo->m_dwStartDate = dwStartDate;

  001a8	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _dwStartDate$[ebp]
  001ae	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 53   : 	pSaleInfo->m_iINIArray = iINIArray;

  001b1	8b 45 1c	 mov	 eax, DWORD PTR _iINIArray$[ebp]

; 54   : 
; 55   : 	ZeroMemory( szKeyName, sizeof( szKeyName ) );

  001b4	56		 push	 esi
  001b5	89 47 28	 mov	 DWORD PTR [edi+40], eax
  001b8	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  001be	6a 00		 push	 0
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 _memset
  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c9	6a 04		 push	 4

; 56   : 	StringCbPrintf_e( szKeyName, sizeof( szKeyName ), "sale_end_date_%d" , iINIArray+1);

  001cb	c7 45 e4 9e 8d
	87 8f		 mov	 DWORD PTR ___encStr$505262[ebp], -1886941794 ; 8f878d9eH
  001d2	c7 45 e8 b2 89
	85 8e		 mov	 DWORD PTR ___encStr$505262[ebp+4], -1903851086 ; 8e8589b2H
  001d9	c7 45 ec b2 88
	8a 9e		 mov	 DWORD PTR ___encStr$505262[ebp+8], -1635088206 ; 9e8a88b2H
  001e0	c7 45 f0 88 b3
	ce 8e		 mov	 DWORD PTR ___encStr$505262[ebp+12], -1899056248 ; 8eceb388H
  001e7	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$505262[ebp]
  001ea	c6 45 f4 00	 mov	 BYTE PTR ___encStr$505262[ebp+16], 0
  001ee	59		 pop	 ecx
$LL618@LoadINI:
  001ef	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f5	83 c0 04	 add	 eax, 4
  001f8	49		 dec	 ecx
  001f9	75 f4		 jne	 SHORT $LL618@LoadINI
  001fb	ff b5 d0 fe ff
	ff		 push	 DWORD PTR tv3971[ebp]
  00201	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$505262[ebp]
  00204	50		 push	 eax
  00205	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0020b	56		 push	 esi
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 57   : 	pSaleInfo->m_dwEndDate   = rkLoader.LoadInt( szKeyName, 0 );

  00212	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00218	83 c4 10	 add	 esp, 16			; 00000010H
  0021b	6a 00		 push	 0
  0021d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00223	50		 push	 eax
  00224	ff d3		 call	 ebx

; 58   : 	
; 59   : 	ZeroMemory( szKeyName, sizeof( szKeyName ) );

  00226	56		 push	 esi
  00227	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0022a	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00230	6a 00		 push	 0
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 _memset
  00238	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023b	6a 03		 push	 3

; 60   : 	StringCbPrintf_e( szKeyName, sizeof( szKeyName ), "sale_cash_%d" , iINIArray+1);

  0023d	c7 45 e8 9e 8d
	87 8f		 mov	 DWORD PTR ___encStr$505414[ebp], -1886941794 ; 8f878d9eH
  00244	c7 45 ec b2 8f
	8a 99		 mov	 DWORD PTR ___encStr$505414[ebp+4], -1718972494 ; 998a8fb2H
  0024b	c7 45 f0 85 b3
	ce 8e		 mov	 DWORD PTR ___encStr$505414[ebp+8], -1899056251 ; 8eceb385H
  00252	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$505414[ebp]
  00255	c6 45 f4 00	 mov	 BYTE PTR ___encStr$505414[ebp+12], 0
  00259	59		 pop	 ecx
$LL626@LoadINI:
  0025a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00260	83 c0 04	 add	 eax, 4
  00263	49		 dec	 ecx
  00264	75 f4		 jne	 SHORT $LL626@LoadINI
  00266	ff b5 d0 fe ff
	ff		 push	 DWORD PTR tv3971[ebp]
  0026c	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$505414[ebp]
  0026f	50		 push	 eax
  00270	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00276	56		 push	 esi
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 61   : 	pSaleInfo->m_iCash       = rkLoader.LoadInt( szKeyName, 999999999 );

  0027d	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00283	83 c4 10	 add	 esp, 16			; 00000010H
  00286	68 ff c9 9a 3b	 push	 999999999		; 3b9ac9ffH
  0028b	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00291	50		 push	 eax
  00292	ff d3		 call	 ebx

; 62   : 
; 63   : 	ZeroMemory( szKeyName, sizeof( szKeyName ) );

  00294	56		 push	 esi
  00295	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00298	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0029e	6a 00		 push	 0
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 _memset
  002a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a9	6a 03		 push	 3

; 64   : 	StringCbPrintf_e( szKeyName, sizeof( szKeyName ), "sale_peso_%d" , iINIArray+1);

  002ab	c7 45 e8 9e 8d
	87 8f		 mov	 DWORD PTR ___encStr$505566[ebp], -1886941794 ; 8f878d9eH
  002b2	c7 45 ec b2 9c
	8e 99		 mov	 DWORD PTR ___encStr$505566[ebp+4], -1718707022 ; 998e9cb2H
  002b9	c7 45 f0 82 b3
	ce 8e		 mov	 DWORD PTR ___encStr$505566[ebp+8], -1899056254 ; 8eceb382H
  002c0	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$505566[ebp]
  002c3	c6 45 f4 00	 mov	 BYTE PTR ___encStr$505566[ebp+12], 0
  002c7	59		 pop	 ecx
$LL634@LoadINI:
  002c8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ce	83 c0 04	 add	 eax, 4
  002d1	49		 dec	 ecx
  002d2	75 f4		 jne	 SHORT $LL634@LoadINI
  002d4	ff b5 d0 fe ff
	ff		 push	 DWORD PTR tv3971[ebp]
  002da	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$505566[ebp]
  002dd	50		 push	 eax
  002de	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  002e4	56		 push	 esi
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 65   : 	pSaleInfo->m_iPeso       = rkLoader.LoadInt( szKeyName, 999999999 );

  002eb	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002f1	83 c4 10	 add	 esp, 16			; 00000010H
  002f4	68 ff c9 9a 3b	 push	 999999999		; 3b9ac9ffH
  002f9	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  002ff	50		 push	 eax
  00300	ff d3		 call	 ebx

; 66   : 
; 67   : 	ZeroMemory( szKeyName, sizeof( szKeyName ) );

  00302	56		 push	 esi
  00303	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00306	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0030c	6a 00		 push	 0
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 _memset
  00314	83 c4 0c	 add	 esp, 12			; 0000000cH
  00317	6a 04		 push	 4

; 68   : 	StringCbPrintf_e( szKeyName, sizeof( szKeyName ), "sale_shop_order_%d" , iINIArray+1);

  00319	c7 45 e4 9e 8d
	87 8f		 mov	 DWORD PTR ___encStr$505718[ebp], -1886941794 ; 8f878d9eH
  00320	c7 45 e8 b2 9f
	83 85		 mov	 DWORD PTR ___encStr$505718[ebp+4], -2054971470 ; 85839fb2H
  00327	c7 45 ec 9d b3
	84 98		 mov	 DWORD PTR ___encStr$505718[ebp+8], -1736133731 ; 9884b39dH
  0032e	c7 45 f0 89 89
	99 b5		 mov	 DWORD PTR ___encStr$505718[ebp+12], -1248228983 ; b5998989H
  00335	66 c7 45 f4 c8
	88		 mov	 WORD PTR ___encStr$505718[ebp+16], 35016 ; 000088c8H
  0033b	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$505718[ebp]
  0033e	c6 45 f6 00	 mov	 BYTE PTR ___encStr$505718[ebp+18], 0
  00342	59		 pop	 ecx
$LL642@LoadINI:
  00343	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00349	83 c0 04	 add	 eax, 4
  0034c	49		 dec	 ecx
  0034d	75 f4		 jne	 SHORT $LL642@LoadINI
  0034f	6a 10		 push	 16			; 00000010H
  00351	58		 pop	 eax
$LL639@LoadINI:
  00352	8b c8		 mov	 ecx, eax
  00354	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0035a	79 05		 jns	 SHORT $LN681@LoadINI
  0035c	49		 dec	 ecx
  0035d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00360	41		 inc	 ecx
$LN681@LoadINI:
  00361	b2 ed		 mov	 dl, -19			; ffffffedH
  00363	2a d1		 sub	 dl, cl
  00365	30 54 05 e4	 xor	 BYTE PTR ___encStr$505718[ebp+eax], dl
  00369	40		 inc	 eax
  0036a	83 f8 12	 cmp	 eax, 18			; 00000012H
  0036d	7c e3		 jl	 SHORT $LL639@LoadINI
  0036f	ff b5 d0 fe ff
	ff		 push	 DWORD PTR tv3971[ebp]
  00375	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$505718[ebp]
  00378	50		 push	 eax
  00379	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0037f	56		 push	 esi
  00380	50		 push	 eax
  00381	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 69   : 	pSaleInfo->m_iShopOrder = rkLoader.LoadInt( szKeyName, 0 ); // 0 기본값

  00386	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0038c	83 c4 10	 add	 esp, 16			; 00000010H
  0038f	6a 00		 push	 0
  00391	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00397	50		 push	 eax
  00398	ff d3		 call	 ebx

; 70   : 
; 71   : 	ZeroMemory( szKeyName, sizeof( szKeyName ) );

  0039a	56		 push	 esi
  0039b	89 47 20	 mov	 DWORD PTR [edi+32], eax
  0039e	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  003a4	6a 00		 push	 0
  003a6	50		 push	 eax
  003a7	e8 00 00 00 00	 call	 _memset
  003ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  003af	6a 05		 push	 5

; 72   : 	StringCbPrintf_e( szKeyName, sizeof( szKeyName ), "sale_shop_mark_type_%d" , iINIArray+1);

  003b1	c7 45 e0 9e 8d
	87 8f		 mov	 DWORD PTR ___encStr$505870[ebp], -1886941794 ; 8f878d9eH
  003b8	c7 45 e4 b2 9f
	83 85		 mov	 DWORD PTR ___encStr$505870[ebp+4], -2054971470 ; 85839fb2H
  003bf	c7 45 e8 9d b3
	86 8b		 mov	 DWORD PTR ___encStr$505870[ebp+8], -1954106467 ; 8b86b39dH
  003c6	c7 45 ec 9f 87
	b4 9e		 mov	 DWORD PTR ___encStr$505870[ebp+12], -1632335969 ; 9eb4879fH
  003cd	c7 45 f0 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$505870[ebp+16], -1248945004 ; b58e9c94H
  003d4	66 c7 45 f4 c8
	88		 mov	 WORD PTR ___encStr$505870[ebp+20], 35016 ; 000088c8H
  003da	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$505870[ebp]
  003dd	c6 45 f6 00	 mov	 BYTE PTR ___encStr$505870[ebp+22], 0
  003e1	59		 pop	 ecx
$LL650@LoadINI:
  003e2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003e8	83 c0 04	 add	 eax, 4
  003eb	49		 dec	 ecx
  003ec	75 f4		 jne	 SHORT $LL650@LoadINI
  003ee	6a 14		 push	 20			; 00000014H
  003f0	58		 pop	 eax
$LL647@LoadINI:
  003f1	8b c8		 mov	 ecx, eax
  003f3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003f9	79 05		 jns	 SHORT $LN682@LoadINI
  003fb	49		 dec	 ecx
  003fc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003ff	41		 inc	 ecx
$LN682@LoadINI:
  00400	b2 ed		 mov	 dl, -19			; ffffffedH
  00402	2a d1		 sub	 dl, cl
  00404	30 54 05 e0	 xor	 BYTE PTR ___encStr$505870[ebp+eax], dl
  00408	40		 inc	 eax
  00409	83 f8 16	 cmp	 eax, 22			; 00000016H
  0040c	7c e3		 jl	 SHORT $LL647@LoadINI
  0040e	ff b5 d0 fe ff
	ff		 push	 DWORD PTR tv3971[ebp]
  00414	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$505870[ebp]
  00417	50		 push	 eax
  00418	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0041e	56		 push	 esi
  0041f	50		 push	 eax
  00420	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 73   : 	pSaleInfo->m_iShopMarkType = rkLoader.LoadInt( szKeyName, 0 ); // SHOP_MARK_TYPE_NONE

  00425	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0042b	83 c4 10	 add	 esp, 16			; 00000010H
  0042e	6a 00		 push	 0
  00430	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00436	50		 push	 eax
  00437	ff d3		 call	 ebx

; 74   : 
; 75   : 	if( bInfoPush )

  00439	80 bd db fe ff
	ff 00		 cmp	 BYTE PTR _bInfoPush$[ebp], 0
  00440	89 47 24	 mov	 DWORD PTR [edi+36], eax
  00443	74 15		 je	 SHORT $LN678@LoadINI

; 76   : 		m_vSaleInfoVector.push_back( pSaleInfo );

  00445	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0044b	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pSaleInfo$[ebp]
  00451	50		 push	 eax
  00452	83 c1 04	 add	 ecx, 4
  00455	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUSaleInfo@ioSaleManager@@V?$allocator@PAUSaleInfo@ioSaleManager@@@std@@@std@@QAEXABQAUSaleInfo@ioSaleManager@@@Z ; std::vector<ioSaleManager::SaleInfo *,std::allocator<ioSaleManager::SaleInfo *> >::push_back
$LN678@LoadINI:
  0045a	5e		 pop	 esi
  0045b	5b		 pop	 ebx
$LN1@LoadINI:

; 77   : }

  0045c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0045f	33 cd		 xor	 ecx, ebp
  00461	5f		 pop	 edi
  00462	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00467	c9		 leave
  00468	c2 18 00	 ret	 24			; 00000018H
?LoadINI@ioSaleManager@@QAEX_NAAVioINILoader@@W4ItemType@1@KKH@Z ENDP ; ioSaleManager::LoadINI
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioSaleManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioSaleManager@@UAEPAXI@Z PROC			; ioSaleManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioSaleManager@@UAE@XZ ; ioSaleManager::~ioSaleManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioSaleManager@@UAEPAXI@Z ENDP			; ioSaleManager::`scalar deleting destructor'
_TEXT	ENDS
END
