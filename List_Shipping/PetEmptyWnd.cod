; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\PetEmptyWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7PetEmptyWnd@@6B@				; PetEmptyWnd::`vftable'
PUBLIC	??0PetEmptyWnd@@QAE@XZ				; PetEmptyWnd::PetEmptyWnd
PUBLIC	??_R4PetEmptyWnd@@6B@				; PetEmptyWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPetEmptyWnd@@@8				; PetEmptyWnd `RTTI Type Descriptor'
PUBLIC	??_R3PetEmptyWnd@@8				; PetEmptyWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PetEmptyWnd@@8				; PetEmptyWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PetEmptyWnd@@8			; PetEmptyWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderFrame@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ; PetEmptyWnd::AddRenderFrame
PUBLIC	?AddRenderImage@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; PetEmptyWnd::AddRenderImage
PUBLIC	?OnRender@PetEmptyWnd@@MAEXXZ			; PetEmptyWnd::OnRender
PUBLIC	?iwm_command@PetEmptyWnd@@UAEXPAVioWnd@@HK@Z	; PetEmptyWnd::iwm_command
PUBLIC	?iwm_show@PetEmptyWnd@@UAEXXZ			; PetEmptyWnd::iwm_show
PUBLIC	?iwm_hide@PetEmptyWnd@@UAEXXZ			; PetEmptyWnd::iwm_hide
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EPetEmptyWnd@@UAEPAXI@Z:PROC			; PetEmptyWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petemptywnd.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PetEmptyWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PetEmptyWnd@@8 DD FLAT:??_R0?AVPetEmptyWnd@@@8 ; PetEmptyWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PetEmptyWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2PetEmptyWnd@@8
rdata$r	SEGMENT
??_R2PetEmptyWnd@@8 DD FLAT:??_R1A@?0A@EA@PetEmptyWnd@@8 ; PetEmptyWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3PetEmptyWnd@@8
rdata$r	SEGMENT
??_R3PetEmptyWnd@@8 DD 00H				; PetEmptyWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PetEmptyWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPetEmptyWnd@@@8
_DATA	SEGMENT
??_R0?AVPetEmptyWnd@@@8 DD FLAT:??_7type_info@@6B@	; PetEmptyWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPetEmptyWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PetEmptyWnd@@6B@
rdata$r	SEGMENT
??_R4PetEmptyWnd@@6B@ DD 00H				; PetEmptyWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPetEmptyWnd@@@8
	DD	FLAT:??_R3PetEmptyWnd@@8
rdata$r	ENDS
;	COMDAT ??_7PetEmptyWnd@@6B@
CONST	SEGMENT
??_7PetEmptyWnd@@6B@ DD FLAT:??_R4PetEmptyWnd@@6B@	; PetEmptyWnd::`vftable'
	DD	FLAT:?AddRenderFrame@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@PetEmptyWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@PetEmptyWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@PetEmptyWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@PetEmptyWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EPetEmptyWnd@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0PetEmptyWnd@@QAE@XZ
_TEXT	SEGMENT
??0PetEmptyWnd@@QAE@XZ PROC				; PetEmptyWnd::PetEmptyWnd, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ

; 14   : 	m_pBottomFrm = NULL;

  00009	33 c0		 xor	 eax, eax
  0000b	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax

; 15   : 	m_pBackEffect = NULL;

  00011	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax

; 16   : 	m_pPetIcon = NULL;

  00017	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PetEmptyWnd@@6B@

; 17   : }

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??0PetEmptyWnd@@QAE@XZ ENDP				; PetEmptyWnd::PetEmptyWnd
_TEXT	ENDS
PUBLIC	??1PetEmptyWnd@@UAE@XZ				; PetEmptyWnd::~PetEmptyWnd
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1PetEmptyWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1PetEmptyWnd@@UAE@XZ$0
__ehfuncinfo$??1PetEmptyWnd@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1PetEmptyWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1PetEmptyWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1PetEmptyWnd@@UAE@XZ PROC				; PetEmptyWnd::~PetEmptyWnd, COMDAT
; _this$ = ecx

; 20   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1PetEmptyWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PetEmptyWnd@@6B@

; 21   : 	SAFEDELETE( m_pBottomFrm );

  00017	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	85 c9		 test	 ecx, ecx
  00023	74 0e		 je	 SHORT $LN3@PetEmptyWn
  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	6a 01		 push	 1
  00029	ff 50 40	 call	 DWORD PTR [eax+64]
  0002c	83 a6 60 01 00
	00 00		 and	 DWORD PTR [esi+352], 0
$LN3@PetEmptyWn:

; 22   : 	SAFEDELETE( m_pBackEffect );

  00033	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 0e		 je	 SHORT $LN2@PetEmptyWn
  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	6a 01		 push	 1
  00041	ff 50 40	 call	 DWORD PTR [eax+64]
  00044	83 a6 64 01 00
	00 00		 and	 DWORD PTR [esi+356], 0
$LN2@PetEmptyWn:

; 23   : 	SAFEDELETE( m_pPetIcon );

  0004b	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00051	85 c9		 test	 ecx, ecx
  00053	74 0e		 je	 SHORT $LN1@PetEmptyWn
  00055	8b 01		 mov	 eax, DWORD PTR [ecx]
  00057	6a 01		 push	 1
  00059	ff 50 40	 call	 DWORD PTR [eax+64]
  0005c	83 a6 68 01 00
	00 00		 and	 DWORD PTR [esi+360], 0
$LN1@PetEmptyWn:

; 24   : }

  00063	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	8b ce		 mov	 ecx, esi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  0006f	e8 00 00 00 00	 call	 __EH_epilog3
  00074	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1PetEmptyWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__ehhandler$??1PetEmptyWnd@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1PetEmptyWnd@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1PetEmptyWnd@@UAE@XZ ENDP				; PetEmptyWnd::~PetEmptyWnd
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z:PROC
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?iwm_show@PetEmptyWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@PetEmptyWnd@@UAEXXZ PROC			; PetEmptyWnd::iwm_show, COMDAT
; _this$ = ecx

; 27   : {	

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 28   : 	NewShopWnd *pShopWnd = (NewShopWnd*)( g_GUIMgr.FindWnd( NEW_SHOP_WND ) );

  00003	68 f8 17 00 00	 push	 6136			; 000017f8H
  00008	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0000d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z
  00013	8b c8		 mov	 ecx, eax
  00015	ff d6		 call	 esi

; 29   : 	if( pShopWnd && pShopWnd->IsShow() )

  00017	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
  0001d	8b f8		 mov	 edi, eax
  0001f	85 ff		 test	 edi, edi
  00021	74 10		 je	 SHORT $LN2@iwm_show
  00023	8b cf		 mov	 ecx, edi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0002b	84 c0		 test	 al, al
  0002d	74 04		 je	 SHORT $LN2@iwm_show

; 30   : 		pShopWnd->HideWnd();

  0002f	8b cf		 mov	 ecx, edi
  00031	ff d3		 call	 ebx
$LN2@iwm_show:

; 31   : 
; 32   : 	MyInventoryWnd *pInvenWnd = (MyInventoryWnd*)( g_GUIMgr.FindWnd( MY_INVENTORY_WND ) );

  00033	68 96 17 00 00	 push	 6038			; 00001796H
  00038	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0003d	8b c8		 mov	 ecx, eax
  0003f	ff d6		 call	 esi
  00041	8b f0		 mov	 esi, eax

; 33   : 	if( pInvenWnd && pInvenWnd->IsShow() )

  00043	85 f6		 test	 esi, esi
  00045	74 10		 je	 SHORT $LN1@iwm_show
  00047	8b ce		 mov	 ecx, esi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0004f	84 c0		 test	 al, al
  00051	74 04		 je	 SHORT $LN1@iwm_show

; 34   : 		pInvenWnd->HideWnd();

  00053	8b ce		 mov	 ecx, esi
  00055	ff d3		 call	 ebx
$LN1@iwm_show:

; 35   : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	c3		 ret	 0
?iwm_show@PetEmptyWnd@@UAEXXZ ENDP			; PetEmptyWnd::iwm_show
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@PetEmptyWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@PetEmptyWnd@@UAEXXZ PROC			; PetEmptyWnd::iwm_hide, COMDAT
; _this$ = ecx

; 39   : 	
; 40   : }

  00000	c3		 ret	 0
?iwm_hide@PetEmptyWnd@@UAEXXZ ENDP			; PetEmptyWnd::iwm_hide
_TEXT	ENDS
PUBLIC	??_R0?AVNewShopWnd@@@8				; NewShopWnd `RTTI Type Descriptor'
EXTRN	?ShowEtcItemTab@NewShopWnd@@QAEXXZ:PROC		; NewShopWnd::ShowEtcItemTab
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVNewShopWnd@@@8
_DATA	SEGMENT
??_R0?AVNewShopWnd@@@8 DD FLAT:??_7type_info@@6B@	; NewShopWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNewShopWnd@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?iwm_command@PetEmptyWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@PetEmptyWnd@@UAEXPAVioWnd@@HK@Z PROC	; PetEmptyWnd::iwm_command, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 44   : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 45   : 	switch( dwID )

  0000f	48		 dec	 eax
  00010	74 06		 je	 SHORT $LN5@iwm_comman
  00012	48		 dec	 eax
  00013	74 16		 je	 SHORT $LN3@iwm_comman
  00015	48		 dec	 eax
  00016	75 0e		 jne	 SHORT $LN4@iwm_comman
$LN5@iwm_comman:

; 46   : 	{
; 47   : 	case ID_EXIT:
; 48   : 	case ID_CANCEL:
; 49   : 		if( cmd == IOBN_BTNUP )

  00018	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0001c	75 08		 jne	 SHORT $LN4@iwm_comman
$LN1@iwm_comman:

; 50   : 			HideWnd();

  0001e	8b ce		 mov	 ecx, esi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN4@iwm_comman:
  00026	5e		 pop	 esi

; 62   : 	}
; 63   : }

  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
$LN3@iwm_comman:

; 51   : 		break;
; 52   : 	case ID_SHOP:
; 53   : 		if( cmd == IOBN_BTNUP )

  0002b	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0002f	75 f5		 jne	 SHORT $LN4@iwm_comman

; 54   : 		{	
; 55   : 			NewShopWnd *pShopWnd = dynamic_cast<NewShopWnd*>(g_GUIMgr.FindWnd(NEW_SHOP_WND));

  00031	6a 00		 push	 0
  00033	68 00 00 00 00	 push	 OFFSET ??_R0?AVNewShopWnd@@@8
  00038	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0003d	6a 00		 push	 0
  0003f	68 f8 17 00 00	 push	 6136			; 000017f8H
  00044	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00049	8b c8		 mov	 ecx, eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ___RTDynamicCast
  00057	83 c4 14	 add	 esp, 20			; 00000014H

; 56   : 			if( pShopWnd )

  0005a	85 c0		 test	 eax, eax
  0005c	74 c0		 je	 SHORT $LN1@iwm_comman

; 57   : 				pShopWnd->ShowEtcItemTab();

  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 ?ShowEtcItemTab@NewShopWnd@@QAEXXZ ; NewShopWnd::ShowEtcItemTab

; 58   : 
; 59   : 			HideWnd();					
; 60   : 		}
; 61   : 		break;

  00065	eb b7		 jmp	 SHORT $LN1@iwm_comman
?iwm_command@PetEmptyWnd@@UAEXPAVioWnd@@HK@Z ENDP	; PetEmptyWnd::iwm_command
_TEXT	ENDS
PUBLIC	?RenderDesc@PetEmptyWnd@@IAEXHH@Z		; PetEmptyWnd::RenderDesc
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?RenderDesc@PetEmptyWnd@@IAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nXPos$ = 8						; size = 4
_nYPos$ = 12						; size = 4
?RenderDesc@PetEmptyWnd@@IAEXHH@Z PROC			; PetEmptyWnd::RenderDesc, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 108  : 	enum
; 109  : 	{
; 110  : 		BACK_X_OFFSET = 151,
; 111  : 		BACK_Y_OFFSET = 98,
; 112  : 	};
; 113  : 
; 114  : 	if( m_pBottomFrm )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _nXPos$[ebp]
  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _nYPos$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	39 b1 60 01 00
	00		 cmp	 DWORD PTR [ecx+352], esi
  00018	74 2f		 je	 SHORT $LN3@RenderDesc

; 115  : 		m_pBottomFrm->Render( nXPos, nYPos, UI_RENDER_MULTIPLY );

  0001a	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	56		 push	 esi
  00023	56		 push	 esi
  00024	56		 push	 esi
  00025	6a 08		 push	 8
  00027	51		 push	 ecx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	51		 push	 ecx
  0002c	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  00030	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  0003d	8b c8		 mov	 ecx, eax
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	ff 12		 call	 DWORD PTR [edx]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN3@RenderDesc:

; 116  : 
; 117  : 	if ( m_pBackEffect )

  00049	39 b1 64 01 00
	00		 cmp	 DWORD PTR [ecx+356], esi
  0004f	74 36		 je	 SHORT $LN2@RenderDesc

; 118  : 		m_pBackEffect->Render( nXPos + BACK_X_OFFSET, nYPos + BACK_Y_OFFSET, UI_RENDER_MULTIPLY );

  00051	8b 89 64 01 00
	00		 mov	 ecx, DWORD PTR [ecx+356]
  00057	8b 01		 mov	 eax, DWORD PTR [ecx]
  00059	56		 push	 esi
  0005a	56		 push	 esi
  0005b	56		 push	 esi
  0005c	6a 08		 push	 8
  0005e	0f 57 c0	 xorps	 xmm0, xmm0
  00061	51		 push	 ecx
  00062	8d 57 62	 lea	 edx, DWORD PTR [edi+98]
  00065	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00069	51		 push	 ecx
  0006a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00070	8d 93 97 00 00
	00		 lea	 edx, DWORD PTR [ebx+151]
  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	ff 10		 call	 DWORD PTR [eax]
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@RenderDesc:

; 119  : 
; 120  : 	if ( m_pPetIcon )

  00087	39 b1 68 01 00
	00		 cmp	 DWORD PTR [ecx+360], esi
  0008d	74 32		 je	 SHORT $LN1@RenderDesc

; 121  : 		m_pPetIcon->Render( nXPos + BACK_X_OFFSET, nYPos + BACK_Y_OFFSET );

  0008f	8b 89 68 01 00
	00		 mov	 ecx, DWORD PTR [ecx+360]
  00095	8b 01		 mov	 eax, DWORD PTR [ecx]
  00097	56		 push	 esi
  00098	56		 push	 esi
  00099	56		 push	 esi
  0009a	56		 push	 esi
  0009b	0f 57 c0	 xorps	 xmm0, xmm0
  0009e	51		 push	 ecx
  0009f	83 c7 62	 add	 edi, 98			; 00000062H
  000a2	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  000a6	51		 push	 ecx
  000a7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ad	81 c3 97 00 00
	00		 add	 ebx, 151		; 00000097H
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	ff 10		 call	 DWORD PTR [eax]
$LN1@RenderDesc:
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx

; 122  : }

  000c4	c9		 leave
  000c5	c2 08 00	 ret	 8
?RenderDesc@PetEmptyWnd@@IAEXHH@Z ENDP			; PetEmptyWnd::RenderDesc
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GPetEmptyWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPetEmptyWnd@@UAEPAXI@Z PROC				; PetEmptyWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1PetEmptyWnd@@UAE@XZ	; PetEmptyWnd::~PetEmptyWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GPetEmptyWnd@@UAEPAXI@Z ENDP				; PetEmptyWnd::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petemptywnd.cpp
;	COMDAT ?OnRender@PetEmptyWnd@@MAEXXZ
_TEXT	SEGMENT
?OnRender@PetEmptyWnd@@MAEXXZ PROC			; PetEmptyWnd::OnRender, COMDAT
; _this$ = ecx

; 95   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 96   : 	ioWnd::OnRender();

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 97   : 
; 98   : 	int nXPos = GetDerivedPosX();

  0000a	8b ce		 mov	 ecx, esi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 99   : 	int nYPos = GetDerivedPosY();

  00012	8b ce		 mov	 ecx, esi
  00014	8b f8		 mov	 edi, eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 100  : 
; 101  : 	RenderDesc( nXPos, nYPos );

  0001c	50		 push	 eax
  0001d	57		 push	 edi
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?RenderDesc@PetEmptyWnd@@IAEXHH@Z ; PetEmptyWnd::RenderDesc
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 102  : }

  00027	c3		 ret	 0
?OnRender@PetEmptyWnd@@MAEXXZ ENDP			; PetEmptyWnd::OnRender
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z	; operator==<12>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z PROC	; operator==<12>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 32 01 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 1b 01 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 04 01 00
	00		 je	 $LN94@operator@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 ec 00 00
	00		 je	 $LN93@operator@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 d5 00 00
	00		 je	 $LN92@operator@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 be 00 00
	00		 je	 $LN91@operator@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 a8 00 00
	00		 je	 $LN90@operator@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 92 00 00
	00		 je	 $LN89@operator@2
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 7f		 je	 SHORT $LN88@operator@2
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 6c		 je	 SHORT $LN87@operator@2
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000b9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000bc	84 d2		 test	 dl, dl
  000be	74 5a		 je	 SHORT $LN86@operator@2
  000c0	32 d1		 xor	 dl, cl
  000c2	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c6	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000c9	0f 84 89 00 00
	00		 je	 $LN1@operator@2
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 3e		 je	 SHORT $LN84@operator@2
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 2b		 je	 SHORT $LN83@operator@2
  000e3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e6	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000e9	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ec	84 d2		 test	 dl, dl
  000ee	74 19		 je	 SHORT $LN82@operator@2
  000f0	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f3	32 d1		 xor	 dl, cl
  000f5	88 55 fa	 mov	 BYTE PTR __t$[ebp+14], dl
  000f8	84 c0		 test	 al, al
  000fa	74 07		 je	 SHORT $LN81@operator@2
  000fc	34 ea		 xor	 al, -22			; ffffffeaH
  000fe	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  00101	eb 55		 jmp	 SHORT $LN1@operator@2
$LN81@operator@2:
  00103	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00107	eb 4f		 jmp	 SHORT $LN1@operator@2
$LN82@operator@2:
  00109	88 4d fa	 mov	 BYTE PTR __t$[ebp+14], cl
  0010c	eb 4a		 jmp	 SHORT $LN1@operator@2
$LN83@operator@2:
  0010e	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00112	eb 44		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  00114	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00118	eb 3e		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  0011a	88 4d f6	 mov	 BYTE PTR __t$[ebp+10], cl
  0011d	eb 39		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  0011f	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00123	eb 33		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  00125	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00129	eb 2d		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  0012b	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0012f	eb 27		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00131	88 4d f2	 mov	 BYTE PTR __t$[ebp+6], cl
  00134	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  00136	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0013a	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  0013c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00140	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  00142	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00146	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  00148	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0014c	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  0014e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00152	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  00154	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  00158	6a 02		 push	 2
  0015a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0015d	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+11], 0
  00161	5a		 pop	 edx
$LL104@operator@2:
  00162	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00168	83 c0 04	 add	 eax, 4
  0016b	4a		 dec	 edx
  0016c	75 f4		 jne	 SHORT $LL104@operator@2
  0016e	6a 08		 push	 8
  00170	58		 pop	 eax
$LL101@operator@2:
  00171	8b c8		 mov	 ecx, eax
  00173	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00179	79 05		 jns	 SHORT $LN115@operator@2
  0017b	49		 dec	 ecx
  0017c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017f	41		 inc	 ecx
$LN115@operator@2:
  00180	b2 ed		 mov	 dl, -19			; ffffffedH
  00182	2a d1		 sub	 dl, cl
  00184	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00188	40		 inc	 eax
  00189	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018c	7c e3		 jl	 SHORT $LL101@operator@2
  0018e	8b cf		 mov	 ecx, edi
  00190	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00199	8a 08		 mov	 cl, BYTE PTR [eax]
  0019b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0019d	75 1a		 jne	 SHORT $LN112@operator@2
  0019f	84 c9		 test	 cl, cl
  001a1	74 12		 je	 SHORT $LN113@operator@2
  001a3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a9	75 0e		 jne	 SHORT $LN112@operator@2
  001ab	83 c0 02	 add	 eax, 2
  001ae	83 c6 02	 add	 esi, 2
  001b1	84 c9		 test	 cl, cl
  001b3	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  001b5	33 c0		 xor	 eax, eax
  001b7	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  001b9	1b c0		 sbb	 eax, eax
  001bb	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  001be	33 c9		 xor	 ecx, ecx
  001c0	85 c0		 test	 eax, eax
  001c2	0f 94 c0	 sete	 al

; 148  : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	c9		 leave
  001d2	c3		 ret	 0
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z ENDP	; operator==<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z	; operator==<10>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z PROC	; operator==<10>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 0d 01 00
	00		 je	 $LN96@operator@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 f6 00 00
	00		 je	 $LN95@operator@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 df 00 00
	00		 je	 $LN94@operator@3
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 c8 00 00
	00		 je	 $LN93@operator@3
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 b1 00 00
	00		 je	 $LN92@operator@3
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 9a 00 00
	00		 je	 $LN91@operator@3
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 83 00 00
	00		 je	 $LN90@operator@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	74 70		 je	 SHORT $LN89@operator@3
  00093	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00096	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00099	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0009c	84 d2		 test	 dl, dl
  0009e	74 5d		 je	 SHORT $LN88@operator@3
  000a0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a3	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	0f 84 81 00 00
	00		 je	 $LN1@operator@3
  000b0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b3	84 d2		 test	 dl, dl
  000b5	74 40		 je	 SHORT $LN86@operator@3
  000b7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ba	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000bd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c0	84 d2		 test	 dl, dl
  000c2	74 2d		 je	 SHORT $LN85@operator@3
  000c4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c7	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ca	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000cd	84 d2		 test	 dl, dl
  000cf	74 1a		 je	 SHORT $LN84@operator@3
  000d1	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000da	84 c0		 test	 al, al
  000dc	74 07		 je	 SHORT $LN83@operator@3
  000de	34 ec		 xor	 al, -20			; ffffffecH
  000e0	88 45 f9	 mov	 BYTE PTR __t$[ebp+13], al
  000e3	eb 4c		 jmp	 SHORT $LN1@operator@3
$LN83@operator@3:
  000e5	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  000e9	eb 46		 jmp	 SHORT $LN1@operator@3
$LN84@operator@3:
  000eb	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000ef	eb 40		 jmp	 SHORT $LN1@operator@3
$LN85@operator@3:
  000f1	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000f5	eb 3a		 jmp	 SHORT $LN1@operator@3
$LN86@operator@3:
  000f7	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000fb	eb 34		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  000fd	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00101	eb 2e		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  00103	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00107	eb 28		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  00109	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0010d	eb 22		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  0010f	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00113	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  00115	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00119	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  0011b	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0011f	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  00121	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00125	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  00127	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0012b	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  0012d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  00131	6a 02		 push	 2
  00133	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00136	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+9], 0
  0013a	5a		 pop	 edx
$LL104@operator@3:
  0013b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00141	83 c0 04	 add	 eax, 4
  00144	4a		 dec	 edx
  00145	75 f4		 jne	 SHORT $LL104@operator@3
  00147	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0014b	56		 push	 esi
  0014c	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  00155	8a 08		 mov	 cl, BYTE PTR [eax]
  00157	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00159	75 1a		 jne	 SHORT $LN112@operator@3
  0015b	84 c9		 test	 cl, cl
  0015d	74 12		 je	 SHORT $LN113@operator@3
  0015f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00162	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00165	75 0e		 jne	 SHORT $LN112@operator@3
  00167	83 c0 02	 add	 eax, 2
  0016a	83 c6 02	 add	 esi, 2
  0016d	84 c9		 test	 cl, cl
  0016f	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  00171	33 c0		 xor	 eax, eax
  00173	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  00175	1b c0		 sbb	 eax, eax
  00177	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  0017a	33 c9		 xor	 ecx, ecx
  0017c	85 c0		 test	 eax, eax
  0017e	0f 94 c0	 sete	 al

; 148  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	c9		 leave
  0018d	c3		 ret	 0
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z ENDP	; operator==<10>
_TEXT	ENDS
PUBLIC	_szType$GSCopy$
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petemptywnd.cpp
;	COMDAT ?AddRenderImage@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_szType$GSCopy$ = -32					; size = 4
_pImage$GSCopy$ = -28					; size = 4
_this$GSCopy$ = -24					; size = 4
__t$506125 = -20					; size = 12
__t$506000 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; PetEmptyWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _szType$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 67   : 	if( szType == "pet_icon" )

  00019	6a 02		 push	 2
  0001b	5b		 pop	 ebx
  0001c	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 71   : 	}
; 72   : 	else if( szType == "back_effect" )

  0001f	89 45 e4	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00022	89 55 e0	 mov	 DWORD PTR _szType$GSCopy$[ebp], edx
  00025	c7 45 ec 9d 89
	9f b5		 mov	 DWORD PTR __t$506000[ebp], -1247835747 ; b59f899dH
  0002c	c7 45 f0 84 8f
	84 84		 mov	 DWORD PTR __t$506000[ebp+4], -2071687292 ; 84848f84H
  00033	8d 45 ec	 lea	 eax, DWORD PTR __t$506000[ebp]
  00036	c6 45 f4 00	 mov	 BYTE PTR __t$506000[ebp+8], 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL116@AddRenderI:

; 67   : 	if( szType == "pet_icon" )

  00041	31 38		 xor	 DWORD PTR [eax], edi
  00043	83 c0 04	 add	 eax, 4
  00046	49		 dec	 ecx
  00047	75 f8		 jne	 SHORT $LL116@AddRenderI
  00049	8b ca		 mov	 ecx, edx
  0004b	8d 75 ec	 lea	 esi, DWORD PTR __t$506000[ebp]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL234@AddRenderI:
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00058	75 18		 jne	 SHORT $LN235@AddRenderI
  0005a	84 c9		 test	 cl, cl
  0005c	74 10		 je	 SHORT $LN236@AddRenderI
  0005e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00061	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00064	75 0c		 jne	 SHORT $LN235@AddRenderI
  00066	03 c3		 add	 eax, ebx
  00068	03 f3		 add	 esi, ebx
  0006a	84 c9		 test	 cl, cl
  0006c	75 e6		 jne	 SHORT $LL234@AddRenderI
$LN236@AddRenderI:
  0006e	33 c0		 xor	 eax, eax
  00070	eb 05		 jmp	 SHORT $LN237@AddRenderI
$LN235@AddRenderI:
  00072	1b c0		 sbb	 eax, eax
  00074	83 d8 ff	 sbb	 eax, -1
$LN237@AddRenderI:
  00077	85 c0		 test	 eax, eax
  00079	75 29		 jne	 SHORT $LN233@AddRenderI

; 68   : 	{
; 69   : 		SAFEDELETE( m_pPetIcon );

  0007b	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0007e	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00084	85 c9		 test	 ecx, ecx
  00086	74 0e		 je	 SHORT $LN5@AddRenderI
  00088	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008a	6a 01		 push	 1
  0008c	ff 50 40	 call	 DWORD PTR [eax+64]
  0008f	83 a6 68 01 00
	00 00		 and	 DWORD PTR [esi+360], 0
$LN5@AddRenderI:

; 70   : 		m_pPetIcon = pImage;

  00096	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00099	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  0009f	e9 aa 00 00 00	 jmp	 $LN1@AddRenderI
$LN233@AddRenderI:

; 71   : 	}
; 72   : 	else if( szType == "back_effect" )

  000a4	c7 45 ec 8f 8d
	88 81		 mov	 DWORD PTR __t$506125[ebp], -2121757297 ; 81888d8fH
  000ab	c7 45 f0 b2 89
	8d 8c		 mov	 DWORD PTR __t$506125[ebp+4], -1936881230 ; 8c8d89b2H
  000b2	8d 45 ec	 lea	 eax, DWORD PTR __t$506125[ebp]
  000b5	c7 45 f4 88 8f
	9f 00		 mov	 DWORD PTR __t$506125[ebp+8], 10456968 ; 009f8f88H
  000bc	8b cb		 mov	 ecx, ebx
$LL222@AddRenderI:
  000be	31 38		 xor	 DWORD PTR [eax], edi
  000c0	83 c0 04	 add	 eax, 4
  000c3	49		 dec	 ecx
  000c4	75 f8		 jne	 SHORT $LL222@AddRenderI
  000c6	6a 08		 push	 8
  000c8	58		 pop	 eax
$LL219@AddRenderI:
  000c9	8b c8		 mov	 ecx, eax
  000cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d1	79 05		 jns	 SHORT $LN242@AddRenderI
  000d3	49		 dec	 ecx
  000d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d7	41		 inc	 ecx
$LN242@AddRenderI:
  000d8	b2 ed		 mov	 dl, -19			; ffffffedH
  000da	2a d1		 sub	 dl, cl
  000dc	30 54 05 ec	 xor	 BYTE PTR __t$506125[ebp+eax], dl
  000e0	40		 inc	 eax
  000e1	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000e4	7c e3		 jl	 SHORT $LL219@AddRenderI
  000e6	8b 4d e0	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000e9	8d 75 ec	 lea	 esi, DWORD PTR __t$506125[ebp]
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL238@AddRenderI:
  000f2	8a 08		 mov	 cl, BYTE PTR [eax]
  000f4	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000f6	75 18		 jne	 SHORT $LN239@AddRenderI
  000f8	84 c9		 test	 cl, cl
  000fa	74 10		 je	 SHORT $LN240@AddRenderI
  000fc	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000ff	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00102	75 0c		 jne	 SHORT $LN239@AddRenderI
  00104	03 c3		 add	 eax, ebx
  00106	03 f3		 add	 esi, ebx
  00108	84 c9		 test	 cl, cl
  0010a	75 e6		 jne	 SHORT $LL238@AddRenderI
$LN240@AddRenderI:
  0010c	33 c0		 xor	 eax, eax
  0010e	eb 05		 jmp	 SHORT $LN241@AddRenderI
$LN239@AddRenderI:
  00110	1b c0		 sbb	 eax, eax
  00112	83 d8 ff	 sbb	 eax, -1
$LN241@AddRenderI:
  00115	85 c0		 test	 eax, eax
  00117	75 26		 jne	 SHORT $LN3@AddRenderI

; 73   : 	{
; 74   : 		SAFEDELETE( m_pBackEffect );

  00119	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0011c	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00122	85 c9		 test	 ecx, ecx
  00124	74 0e		 je	 SHORT $LN2@AddRenderI
  00126	8b 01		 mov	 eax, DWORD PTR [ecx]
  00128	6a 01		 push	 1
  0012a	ff 50 40	 call	 DWORD PTR [eax+64]
  0012d	83 a6 64 01 00
	00 00		 and	 DWORD PTR [esi+356], 0
$LN2@AddRenderI:

; 75   : 		m_pBackEffect = pImage;

  00134	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00137	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax

; 76   : 	}
; 77   : 	else

  0013d	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 78   : 		ioWnd::AddRenderImage( szType, pImage );

  0013f	ff 75 e4	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  00142	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00145	ff 75 e0	 push	 DWORD PTR _szType$GSCopy$[ebp]
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 79   : }

  0014e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	33 cd		 xor	 ecx, ebp
  00155	5b		 pop	 ebx
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	c9		 leave
  0015c	c2 08 00	 ret	 8
?AddRenderImage@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; PetEmptyWnd::AddRenderImage
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderFrame@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__t$506277 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pFrame$ = 12						; size = 4
?AddRenderFrame@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z PROC ; PetEmptyWnd::AddRenderFrame, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pFrame$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 83   : 	if( szType == "BottomFrm" )

  00019	6a 02		 push	 2
  0001b	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001e	c7 45 ec af 83
	9f 9e		 mov	 DWORD PTR __t$506277[ebp], -1633713233 ; 9e9f83afH
  00025	c7 45 f0 82 81
	ad 98		 mov	 DWORD PTR __t$506277[ebp+4], -1733459582 ; 98ad8182H
  0002c	8d 45 ec	 lea	 eax, DWORD PTR __t$506277[ebp]
  0002f	66 c7 45 f4 80
	00		 mov	 WORD PTR __t$506277[ebp+8], 128 ; 00000080H
  00035	59		 pop	 ecx
$LL111@AddRenderF:
  00036	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003c	83 c0 04	 add	 eax, 4
  0003f	49		 dec	 ecx
  00040	75 f4		 jne	 SHORT $LL111@AddRenderF
  00042	80 75 f4 ed	 xor	 BYTE PTR __t$506277[ebp+8], -19 ; ffffffedH
  00046	8b cf		 mov	 ecx, edi
  00048	8d 75 ec	 lea	 esi, DWORD PTR __t$506277[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderF:
  00051	8a 08		 mov	 cl, BYTE PTR [eax]
  00053	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00055	75 1a		 jne	 SHORT $LN119@AddRenderF
  00057	84 c9		 test	 cl, cl
  00059	74 12		 je	 SHORT $LN120@AddRenderF
  0005b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0005e	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00061	75 0e		 jne	 SHORT $LN119@AddRenderF
  00063	83 c0 02	 add	 eax, 2
  00066	83 c6 02	 add	 esi, 2
  00069	84 c9		 test	 cl, cl
  0006b	75 e4		 jne	 SHORT $LL118@AddRenderF
$LN120@AddRenderF:
  0006d	33 c0		 xor	 eax, eax
  0006f	eb 05		 jmp	 SHORT $LN121@AddRenderF
$LN119@AddRenderF:
  00071	1b c0		 sbb	 eax, eax
  00073	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderF:
  00076	85 c0		 test	 eax, eax
  00078	75 23		 jne	 SHORT $LN3@AddRenderF

; 84   : 	{
; 85   : 		SAFEDELETE( m_pBottomFrm );

  0007a	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0007d	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00083	85 c9		 test	 ecx, ecx
  00085	74 0e		 je	 SHORT $LN2@AddRenderF
  00087	8b 01		 mov	 eax, DWORD PTR [ecx]
  00089	6a 01		 push	 1
  0008b	ff 50 40	 call	 DWORD PTR [eax+64]
  0008e	83 a6 60 01 00
	00 00		 and	 DWORD PTR [esi+352], 0
$LN2@AddRenderF:

; 86   : 		m_pBottomFrm = pFrame;

  00095	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx

; 87   : 	}
; 88   : 	else

  0009b	eb 0b		 jmp	 SHORT $LN1@AddRenderF
$LN3@AddRenderF:

; 89   : 		ioWnd::AddRenderFrame( szType, pFrame );

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
$LN1@AddRenderF:

; 90   : }

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	33 cd		 xor	 ecx, ebp
  000af	5b		 pop	 ebx
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	c9		 leave
  000b6	c2 08 00	 ret	 8
?AddRenderFrame@PetEmptyWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ENDP ; PetEmptyWnd::AddRenderFrame
_TEXT	ENDS
END
