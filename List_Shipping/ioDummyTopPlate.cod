; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioDummyTopPlate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_7ioDummyTopPlate@@6BioWorldEventReceiver@@@	; ioDummyTopPlate::`vftable'
PUBLIC	??_7ioDummyTopPlate@@6BioPlayEntity@@@		; ioDummyTopPlate::`vftable'
PUBLIC	??0ioDummyTopPlate@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyTopPlate::ioDummyTopPlate
PUBLIC	??_R4ioDummyTopPlate@@6BioPlayEntity@@@		; ioDummyTopPlate::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioDummyTopPlate@@@8			; ioDummyTopPlate `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyTopPlate@@8				; ioDummyTopPlate::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyTopPlate@@8				; ioDummyTopPlate::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioDummyTopPlate@@8		; ioDummyTopPlate::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioDummyChar@@8			; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioDummyChar@@@8				; ioDummyChar `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyChar@@8				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyChar@@8				; ioDummyChar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	??_R1BMI@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
PUBLIC	??_R0?AVioWorldEventReceiver@@@8		; ioWorldEventReceiver `RTTI Type Descriptor'
PUBLIC	??_R3ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?LoadProperty@ioDummyTopPlate@@UAEXAAVioINILoader@@@Z ; ioDummyTopPlate::LoadProperty
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
PUBLIC	?ProcessState@ioDummyTopPlate@@MAEXMK@Z		; ioDummyTopPlate::ProcessState
PUBLIC	?ProcessDelayState@ioDummyTopPlate@@MAEXM@Z	; ioDummyTopPlate::ProcessDelayState
PUBLIC	?ProcessMoveState@ioDummyTopPlate@@MAEXM@Z	; ioDummyTopPlate::ProcessMoveState
PUBLIC	?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ	; ioDummyChar::IsDummyCharMidSync
PUBLIC	?SetDieState@ioDummyTopPlate@@UAEX_N@Z		; ioDummyTopPlate::SetDieState
PUBLIC	?ProcessStartState@ioDummyTopPlate@@MAEXM@Z	; ioDummyTopPlate::ProcessStartState
PUBLIC	??_R4ioDummyTopPlate@@6BioWorldEventReceiver@@@	; ioDummyTopPlate::`RTTI Complete Object Locator'
PUBLIC	??_EioDummyTopPlate@@WBMI@AEPAXI@Z		; [thunk]:ioDummyTopPlate::`vector deleting destructor'
EXTRN	??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioDummyChar::ioDummyChar
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z:PROC ; ioDummyChar::AddEntityEvent
EXTRN	??_EioDummyTopPlate@@UAEPAXI@Z:PROC		; ioDummyTopPlate::`vector deleting destructor'
EXTRN	?Update@ioDummyChar@@UAEXMKK@Z:PROC		; ioDummyChar::Update
EXTRN	?UpdateAfter@ioDummyChar@@UAEXM@Z:PROC		; ioDummyChar::UpdateAfter
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ:PROC ; ioDummyChar::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountAvailable
EXTRN	?IsMountingAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountingAvailable
EXTRN	?IsNowMountEnable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?UpdateBottomHeight@ioDummyChar@@MBEXXZ:PROC	; ioDummyChar::UpdateBottomHeight
EXTRN	?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ:PROC ; ioDummyChar::NeedUpdateBottomHeight
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::Translate
EXTRN	?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByConveyer
EXTRN	?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z:PROC ; ioDummyChar::ApplyWeapon
EXTRN	?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z:PROC ; ioDummyChar::IsCollisionAvailableWeapon
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z:PROC ; ioDummyChar::IsEntityCollisionSkipState
EXTRN	?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z:PROC ; ioDummyChar::IsCharCollisionSkipState
EXTRN	?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z:PROC ; ioPlayEntity::IsWoundedCollision
EXTRN	?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioDummyChar::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ:PROC ; ioDummyChar::GetSubType
EXTRN	?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ:PROC ; ioDummyChar::GetArmorType
EXTRN	?DontMoveEntityLevel@ioDummyChar@@UBEHXZ:PROC	; ioDummyChar::DontMoveEntityLevel
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioDummyChar::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::UpdateGauge
EXTRN	?RenderGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
EXTRN	?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z:PROC ; ioDummyChar::InitDummyCharInfo
EXTRN	?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioDummyChar::TestMapCollision
EXTRN	?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z:PROC ; ioDummyChar::CheckEntityCollision
EXTRN	?GetDummyGrassType@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetDummyGrassType
EXTRN	?IsActivateWeapon@ioDummyChar@@UAE_NXZ:PROC	; ioDummyChar::IsActivateWeapon
EXTRN	?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z:PROC ; ioDummyChar::IsDummyVsDummyCollisionSkipState
EXTRN	?ProcessPos@ioDummyChar@@MAEXM@Z:PROC		; ioDummyChar::ProcessPos
EXTRN	?ProcessDashState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDashState
EXTRN	?ProcessAttackState@ioDummyChar@@MAEXMK@Z:PROC	; ioDummyChar::ProcessAttackState
EXTRN	?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharSync
EXTRN	?SetDelayState@ioDummyChar@@UAEX_N@Z:PROC	; ioDummyChar::SetDelayState
EXTRN	?SetMoveState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetMoveState
EXTRN	?SetDieState@ioDummyChar@@UAEX_N0@Z:PROC	; ioDummyChar::SetDieState
EXTRN	?SetDashState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetDashState
EXTRN	?SetAttackState@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::SetAttackState
EXTRN	?DropZoneCheck@ioDummyChar@@MAEXXZ:PROC		; ioDummyChar::DropZoneCheck
EXTRN	?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::SendAttackInfoToSkill
EXTRN	?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z:PROC ; ioDummyChar::CheckCollisionWeapon
EXTRN	?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateMountEntity
EXTRN	?ClearMountEntity@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::ClearMountEntity
EXTRN	?UpdateMountedEntityList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedEntityList
EXTRN	?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedWeaponList
EXTRN	?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z:PROC ; ioDummyChar::SetWorldPositionMountEntity
EXTRN	?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::DummyDieClearMountEntity
EXTRN	?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::FillDummyCharMidSync
EXTRN	?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharMidSync
EXTRN	?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillMaxActiveCnt
EXTRN	?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillCurActiveCnt
EXTRN	?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::OnTelepotation
EXTRN	?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z:PROC ; ioDummyChar::OnFireZoneDamage
EXTRN	?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::OnPoisonZoneDamage
;	COMDAT ??_R4ioDummyTopPlate@@6BioWorldEventReceiver@@@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummytopplate.cpp
rdata$r	SEGMENT
??_R4ioDummyTopPlate@@6BioWorldEventReceiver@@@ DD 00H	; ioDummyTopPlate::`RTTI Complete Object Locator'
	DD	01c8H
	DD	00H
	DD	FLAT:??_R0?AVioDummyTopPlate@@@8
	DD	FLAT:??_R3ioDummyTopPlate@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R2ioWorldEventReceiver@@8 DD FLAT:??_R1A@?0A@EA@ioWorldEventReceiver@@8 ; ioWorldEventReceiver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R3ioWorldEventReceiver@@8 DD 00H			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWorldEventReceiver@@@8
_DATA	SEGMENT
??_R0?AVioWorldEventReceiver@@@8 DD FLAT:??_7type_info@@6B@ ; ioWorldEventReceiver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWorldEventReceiver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1BMI@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
	DD	00H
	DD	01c8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEntityEvent@@8
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyChar@@8
rdata$r	SEGMENT
??_R2ioDummyChar@@8 DD FLAT:??_R1A@?0A@EA@ioDummyChar@@8 ; ioDummyChar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyChar@@8
rdata$r	SEGMENT
??_R3ioDummyChar@@8 DD 00H				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyChar@@@8
_DATA	SEGMENT
??_R0?AVioDummyChar@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyChar@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyChar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyChar@@8 DD FLAT:??_R0?AVioDummyChar@@@8 ; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyTopPlate@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyTopPlate@@8 DD FLAT:??_R0?AVioDummyTopPlate@@@8 ; ioDummyTopPlate::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyTopPlate@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyTopPlate@@8
rdata$r	SEGMENT
??_R2ioDummyTopPlate@@8 DD FLAT:??_R1A@?0A@EA@ioDummyTopPlate@@8 ; ioDummyTopPlate::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioDummyChar@@8
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyTopPlate@@8
rdata$r	SEGMENT
??_R3ioDummyTopPlate@@8 DD 00H				; ioDummyTopPlate::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ioDummyTopPlate@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyTopPlate@@@8
_DATA	SEGMENT
??_R0?AVioDummyTopPlate@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyTopPlate `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyTopPlate@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioDummyTopPlate@@6BioPlayEntity@@@
rdata$r	SEGMENT
??_R4ioDummyTopPlate@@6BioPlayEntity@@@ DD 00H		; ioDummyTopPlate::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioDummyTopPlate@@@8
	DD	FLAT:??_R3ioDummyTopPlate@@8
rdata$r	ENDS
;	COMDAT ??_7ioDummyTopPlate@@6BioWorldEventReceiver@@@
CONST	SEGMENT
??_7ioDummyTopPlate@@6BioWorldEventReceiver@@@ DD FLAT:??_R4ioDummyTopPlate@@6BioWorldEventReceiver@@@ ; ioDummyTopPlate::`vftable'
	DD	FLAT:?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z
	DD	FLAT:?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ
	DD	FLAT:??_EioDummyTopPlate@@WBMI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ioDummyTopPlate@@6BioPlayEntity@@@
CONST	SEGMENT
??_7ioDummyTopPlate@@6BioPlayEntity@@@ DD FLAT:??_R4ioDummyTopPlate@@6BioPlayEntity@@@ ; ioDummyTopPlate::`vftable'
	DD	FLAT:?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioDummyTopPlate@@UAEPAXI@Z
	DD	FLAT:?Update@ioDummyChar@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioDummyChar@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioDummyChar@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioDummyChar@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioDummyTopPlate@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?RenderGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
	DD	FLAT:?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z
	DD	FLAT:?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?GetDummyGrassType@ioDummyChar@@UAEHXZ
	DD	FLAT:?IsActivateWeapon@ioDummyChar@@UAE_NXZ
	DD	FLAT:?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z
	DD	FLAT:?ProcessState@ioDummyTopPlate@@MAEXMK@Z
	DD	FLAT:?ProcessPos@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDelayState@ioDummyTopPlate@@MAEXM@Z
	DD	FLAT:?ProcessMoveState@ioDummyTopPlate@@MAEXM@Z
	DD	FLAT:?ProcessDashState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessAttackState@ioDummyChar@@MAEXMK@Z
	DD	FLAT:?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDelayState@ioDummyChar@@UAEX_N@Z
	DD	FLAT:?SetMoveState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetDieState@ioDummyChar@@UAEX_N0@Z
	DD	FLAT:?SetDashState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetAttackState@ioDummyChar@@UAEXXZ
	DD	FLAT:?DropZoneCheck@ioDummyChar@@MAEXXZ
	DD	FLAT:?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ
	DD	FLAT:?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?ClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedEntityList@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ
	DD	FLAT:?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z
	DD	FLAT:?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
	DD	FLAT:?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?SetDieState@ioDummyTopPlate@@UAEX_N@Z
	DD	FLAT:?ProcessStartState@ioDummyTopPlate@@MAEXM@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioDummyTopPlate@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
_pGrp$ = 8						; size = 4
_pMode$ = 12						; size = 4
??0ioDummyTopPlate@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z PROC ; ioDummyTopPlate::ioDummyTopPlate, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyChar::ioDummyChar

; 10   : 	m_MoveState = MS_JUMP;

  00011	83 a6 80 14 00
	00 00		 and	 DWORD PTR [esi+5248], 0
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDummyTopPlate@@6BioPlayEntity@@@
  0001e	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioDummyTopPlate@@6BioWorldEventReceiver@@@

; 11   : }

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??0ioDummyTopPlate@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ENDP ; ioDummyTopPlate::ioDummyTopPlate
_TEXT	ENDS
PUBLIC	??1ioDummyTopPlate@@UAE@XZ			; ioDummyTopPlate::~ioDummyTopPlate
EXTRN	??1ioDummyChar@@UAE@XZ:PROC			; ioDummyChar::~ioDummyChar
; Function compile flags: /Ogsp
;	COMDAT ??1ioDummyTopPlate@@UAE@XZ
_TEXT	SEGMENT
??1ioDummyTopPlate@@UAE@XZ PROC				; ioDummyTopPlate::~ioDummyTopPlate, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioDummyTopPlate@@6BioPlayEntity@@@
  00006	c7 81 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+456], OFFSET ??_7ioDummyTopPlate@@6BioWorldEventReceiver@@@

; 16   : }

  00010	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
??1ioDummyTopPlate@@UAE@XZ ENDP				; ioDummyTopPlate::~ioDummyTopPlate
_TEXT	ENDS
EXTRN	?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z:PROC	; ioDummyChar::ProcessEffectUpdate
EXTRN	?SendDieState@ioDummyChar@@QAEX_N@Z:PROC	; ioDummyChar::SendDieState
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioDummyTopPlate@@MAEXMK@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessState@ioDummyTopPlate@@MAEXMK@Z PROC		; ioDummyTopPlate::ProcessState, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	switch( m_State )

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 86 30 02 00
	00		 mov	 eax, DWORD PTR [esi+560]
  00011	48		 dec	 eax
  00012	57		 push	 edi
  00013	74 26		 je	 SHORT $LN4@ProcessSta
  00015	48		 dec	 eax
  00016	74 13		 je	 SHORT $LN3@ProcessSta
  00018	48		 dec	 eax
  00019	75 2e		 jne	 SHORT $LN5@ProcessSta

; 46   : 	case DCS_MOVE:
; 47   : 		ProcessMoveState( fTimePerSec );

  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	51		 push	 ecx
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]

; 48   : 		break;

  00029	eb 1e		 jmp	 SHORT $LN5@ProcessSta
$LN3@ProcessSta:

; 42   : 		break;
; 43   : 	case DCS_DELAY:
; 44   : 		ProcessDelayState( fTimePerSec );

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	51		 push	 ecx
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]

; 45   : 		break;

  00039	eb 0e		 jmp	 SHORT $LN5@ProcessSta
$LN4@ProcessSta:

; 39   : 	{
; 40   : 	case DCS_START:
; 41   : 		ProcessStartState( fTimePerSec );

  0003b	8b 06		 mov	 eax, DWORD PTR [esi]
  0003d	51		 push	 ecx
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	ff 90 64 01 00
	00		 call	 DWORD PTR [eax+356]
$LN5@ProcessSta:

; 49   : 	}
; 50   : 
; 51   : 	if( m_dwLifeTime && (DWORD)(m_dwStartTime + m_dwLifeTime) < FRAMEGETTIME() && m_State != DCS_ATTACK )

  00049	83 be 10 0b 00
	00 00		 cmp	 DWORD PTR [esi+2832], 0
  00050	74 30		 je	 SHORT $LN9@ProcessSta
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00058	8b c8		 mov	 ecx, eax
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00060	8b 8e 14 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2836]
  00066	03 8e 10 0b 00
	00		 add	 ecx, DWORD PTR [esi+2832]
  0006c	3b c8		 cmp	 ecx, eax
  0006e	73 12		 jae	 SHORT $LN9@ProcessSta
  00070	83 be 30 02 00
	00 05		 cmp	 DWORD PTR [esi+560], 5
  00077	74 09		 je	 SHORT $LN9@ProcessSta

; 52   : 		SendDieState( true );

  00079	6a 01		 push	 1
  0007b	8b ce		 mov	 ecx, esi
  0007d	e8 00 00 00 00	 call	 ?SendDieState@ioDummyChar@@QAEX_N@Z ; ioDummyChar::SendDieState
$LN9@ProcessSta:

; 53   : 
; 54   : 	//ProcessPos( fTimePerSec );	
; 55   : 	ProcessEffectUpdate( fTimePerSec );

  00082	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00087	51		 push	 ecx
  00088	8b ce		 mov	 ecx, esi
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 ?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z ; ioDummyChar::ProcessEffectUpdate
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 56   : }

  00096	5d		 pop	 ebp
  00097	c2 08 00	 ret	 8
?ProcessState@ioDummyTopPlate@@MAEXMK@Z ENDP		; ioDummyTopPlate::ProcessState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z:PROC ; ioPlayStage::GetMapHeight
EXTRN	?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ:PROC ; ioDummyChar::GetOwner
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ProcessStartState@ioDummyTopPlate@@MAEXM@Z
_TEXT	SEGMENT
_dwCurTime$ = -24					; size = 4
_fMapHeight$ = -20					; size = 4
_pStage$ = -20						; size = 4
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessStartState@ioDummyTopPlate@@MAEXM@Z PROC	; ioDummyTopPlate::ProcessStartState, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 60   : 	DWORD dwCurTime = FRAMEGETTIME();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00019	8b c8		 mov	 ecx, eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 61   : 	ioBaseChar* pOwner = GetOwner();

  00021	8b cb		 mov	 ecx, ebx
  00023	89 45 e8	 mov	 DWORD PTR _dwCurTime$[ebp], eax
  00026	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner

; 62   : 	if( !pOwner ) return;

  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 8c 00 00
	00		 je	 $LN2@ProcessSta@2

; 63   : 
; 64   : 	ioPlayStage *pStage = pOwner->GetCreator();

  00033	8b 80 44 03 00
	00		 mov	 eax, DWORD PTR [eax+836]
  00039	89 45 ec	 mov	 DWORD PTR _pStage$[ebp], eax

; 65   : 	if ( !pStage ) return;

  0003c	85 c0		 test	 eax, eax
  0003e	74 7f		 je	 SHORT $LN2@ProcessSta@2

; 66   : 	
; 67   : 	D3DXVECTOR3 vPos = GetWorldPosition();

  00040	8b 03		 mov	 eax, DWORD PTR [ebx]
  00042	56		 push	 esi
  00043	57		 push	 edi
  00044	8b cb		 mov	 ecx, ebx
  00046	ff 50 70	 call	 DWORD PTR [eax+112]

; 68   : 	float fMapHeight = pStage->GetMapHeight( vPos.x, vPos.z );

  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	8b f0		 mov	 esi, eax
  0004e	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00051	a5		 movsd
  00052	a5		 movsd
  00053	a5		 movsd
  00054	33 f6		 xor	 esi, esi
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  00062	6a 01		 push	 1
  00064	56		 push	 esi
  00065	51		 push	 ecx
  00066	51		 push	 ecx
  00067	8b 4d ec	 mov	 ecx, DWORD PTR _pStage$[ebp]
  0006a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00070	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight
  0007f	d9 5d ec	 fstp	 DWORD PTR _fMapHeight$[ebp]

; 69   : 	if ( vPos.y < fMapHeight )

  00082	d9 45 f4	 fld	 DWORD PTR _vPos$[ebp+4]
  00085	d9 45 ec	 fld	 DWORD PTR _fMapHeight$[ebp]
  00088	df f1		 fcomip	 ST(1)
  0008a	dd d8		 fstp	 ST(0)
  0008c	76 15		 jbe	 SHORT $LN3@ProcessSta@2

; 70   : 	{
; 71   : 		vPos.y = fMapHeight;

  0008e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fMapHeight$[ebp]

; 72   : 		SetWorldPosition( vPos );

  00093	8b 03		 mov	 eax, DWORD PTR [ebx]
  00095	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$[ebp]
  00098	51		 push	 ecx
  00099	8b cb		 mov	 ecx, ebx
  0009b	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$[ebp+4], xmm0
  000a0	ff 50 44	 call	 DWORD PTR [eax+68]
$LN3@ProcessSta@2:

; 73   : 	}
; 74   : 	
; 75   : 
; 76   : 	if( m_dwStartAniEndTime == 0 || m_dwStartAniEndTime < dwCurTime )

  000a3	8b 83 e4 06 00
	00		 mov	 eax, DWORD PTR [ebx+1764]
  000a9	3b c6		 cmp	 eax, esi
  000ab	74 05		 je	 SHORT $LN1@ProcessSta@2
  000ad	3b 45 e8	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  000b0	73 0b		 jae	 SHORT $LN10@ProcessSta@2
$LN1@ProcessSta@2:

; 77   : 	{
; 78   : 		SetDelayState( false );

  000b2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b4	56		 push	 esi
  000b5	8b cb		 mov	 ecx, ebx
  000b7	ff 90 14 01 00
	00		 call	 DWORD PTR [eax+276]
$LN10@ProcessSta@2:
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
$LN2@ProcessSta@2:

; 79   : 		return;
; 80   : 	}
; 81   : }

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c2	33 cd		 xor	 ecx, ebp
  000c4	5b		 pop	 ebx
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	c9		 leave
  000cb	c2 04 00	 ret	 4
?ProcessStartState@ioDummyTopPlate@@MAEXM@Z ENDP	; ioDummyTopPlate::ProcessStartState
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
; Function compile flags: /Odsp
;	COMDAT ??_EioDummyTopPlate@@WBMI@AEPAXI@Z
_TEXT	SEGMENT
??_EioDummyTopPlate@@WBMI@AEPAXI@Z PROC			; [thunk]:ioDummyTopPlate::`vector deleting destructor', COMDAT
  00000	81 e9 c8 01 00
	00		 sub	 ecx, 456		; 000001c8H
  00006	e9 00 00 00 00	 jmp	 ??_EioDummyTopPlate@@UAEPAXI@Z
??_EioDummyTopPlate@@WBMI@AEPAXI@Z ENDP			; [thunk]:ioDummyTopPlate::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 328  :     x += v.x;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00010	0f 5a c0	 cvtps2pd xmm0, xmm0
  00013	0f 5a c9	 cvtps2pd xmm1, xmm1
  00016	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 329  :     y += v.y;

  0001a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0001f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00032	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 330  :     z += v.z;

  00036	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0003b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00044	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00049	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00053	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00057	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 331  :     return *this;
; 332  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00012	0f 5a c9	 cvtps2pd xmm1, xmm1
  00015	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00019	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0001e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00022	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00043	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00048	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00052	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00056	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 394  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??0FireTime@@QAE@XZ				; FireTime::FireTime
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$1
__ehfuncinfo$??0FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FireTime@@QAE@XZ PROC				; FireTime::FireTime, COMDAT
; _this$ = ecx

; 219  : 	FireTime()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi
  00026	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00029	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002d	ff d7		 call	 edi

; 220  : 	{
; 221  : 		dwStart = 0;

  0002f	89 1e		 mov	 DWORD PTR [esi], ebx

; 222  : 		dwDuration = 0;

  00031	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 223  : 
; 224  : 		iAttributeIdx = 0;

  00034	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  : 		iResistanceIdx = 0;

  00037	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 226  : 
; 227  : 		bLoopWoundedAni = false;

  0003a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 228  : 		dwWoundedAniDuration = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 229  : 
; 230  : 		dwWeaponIdx = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 231  : 		eCollisionType = ACT_NONE;

  00043	c7 46 2c 06 00
	00 00		 mov	 DWORD PTR [esi+44], 6

; 232  : 		eFireTimeType = FTT_NORMAL_ATTACK;

  0004a	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 233  : 
; 234  : 		m_iExtraValue = 0;

  0004d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 235  : 	}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FireTime@@QAE@XZ ENDP				; FireTime::FireTime
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummychar.h
;	COMDAT ?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
_TEXT	SEGMENT
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ PROC		; ioDummyChar::IsDummyCharMidSync, COMDAT
; _this$ = ecx

; 742  : 	virtual bool IsDummyCharMidSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ ENDP		; ioDummyChar::IsDummyCharMidSync
_TEXT	ENDS
PUBLIC	?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ	; ioPlayMode::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplaymode.h
;	COMDAT ?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ PROC	; ioPlayMode::GetCreator, COMDAT
; _this$ = ecx

; 631  : 	inline ioPlayStage* GetCreator() const { return m_pCreator; }

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	c3		 ret	 0
?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ ENDP	; ioPlayMode::GetCreator
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioDummyTopPlate@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioDummyTopPlate@@UAEPAXI@Z PROC			; ioDummyTopPlate::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioDummyTopPlate@@UAE@XZ ; ioDummyTopPlate::~ioDummyTopPlate
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioDummyTopPlate@@UAEPAXI@Z ENDP			; ioDummyTopPlate::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z ; ioDummyTopPlate::CreateWeapon
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z:PROC	; ioBaseChar::SetWeaponIndexBase
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?GetWeaponIndexBase@ioBaseChar@@QBEKXZ:PROC	; ioBaseChar::GetWeaponIndexBase
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummytopplate.cpp
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z$1
__ehfuncinfo$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_kFireTime$ = -120					; size = 88
$T531859 = -32						; size = 16
_pOwner$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nAttackIndex$ = 8					; size = 4
_vPos$ = 12						; size = 4
_vDir$ = 16						; size = 4
?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z PROC ; ioDummyTopPlate::CreateWeapon, COMDAT
; _this$ = ecx

; 147  : {

  00000	6a 6c		 push	 108			; 0000006cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 148  : 	ioBaseChar *pOwner = GetOwner();

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00013	8b c8		 mov	 ecx, eax

; 149  : 
; 150  : 	if ( !pOwner )

  00015	33 db		 xor	 ebx, ebx
  00017	89 4d f0	 mov	 DWORD PTR _pOwner$[ebp], ecx
  0001a	3b cb		 cmp	 ecx, ebx
  0001c	0f 84 ab 00 00
	00		 je	 $LN3@CreateWeap

; 151  : 		return;
; 152  : 
; 153  : 	m_dwBaseWeaponIndex = pOwner->GetWeaponIndexBase() + 1;

  00022	e8 00 00 00 00	 call	 ?GetWeaponIndexBase@ioBaseChar@@QBEKXZ ; ioBaseChar::GetWeaponIndexBase
  00027	40		 inc	 eax

; 154  : 
; 155  : 	FireTime kFireTime;

  00028	8d 4d 88	 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  0002b	89 87 30 06 00
	00		 mov	 DWORD PTR [edi+1584], eax
  00031	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 156  : 	kFireTime.dwStart = FRAMEGETTIME();

  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0003f	8b c8		 mov	 ecx, eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00047	89 45 88	 mov	 DWORD PTR _kFireTime$[ebp], eax

; 157  : 
; 158  : 	kFireTime.iAttributeIdx = nAttackIndex;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _nAttackIndex$[ebp]

; 159  : 	kFireTime.iResistanceIdx = 0;
; 160  : 	kFireTime.szWoundedAni  = "";

  0004d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00052	56		 push	 esi
  00053	8d 4d 9c	 lea	 ecx, DWORD PTR _kFireTime$[ebp+20]
  00056	89 45 90	 mov	 DWORD PTR _kFireTime$[ebp+8], eax
  00059	89 5d 94	 mov	 DWORD PTR _kFireTime$[ebp+12], ebx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 161  : 	kFireTime.dwWoundedAniDuration = 0;
; 162  : 	kFireTime.bLoopWoundedAni = false;
; 163  : 	kFireTime.dwWeaponIdx = m_dwBaseWeaponIndex;

  00062	8b 87 30 06 00
	00		 mov	 eax, DWORD PTR [edi+1584]

; 164  : 	kFireTime.eFireTimeType = FTT_DUMMY_CHAR_ATTACK;
; 165  : 
; 166  : 	pOwner->SetWeaponIndexBase( m_dwBaseWeaponIndex );

  00068	8b 4d f0	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0006b	50		 push	 eax
  0006c	89 5d ac	 mov	 DWORD PTR _kFireTime$[ebp+36], ebx
  0006f	88 5d 98	 mov	 BYTE PTR _kFireTime$[ebp+16], bl
  00072	89 45 b0	 mov	 DWORD PTR _kFireTime$[ebp+40], eax
  00075	c7 45 c8 0b 00
	00 00		 mov	 DWORD PTR _kFireTime$[ebp+64], 11 ; 0000000bH
  0007c	e8 00 00 00 00	 call	 ?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z ; ioBaseChar::SetWeaponIndexBase

; 167  : 
; 168  : 	ioWeapon *pWeapon = pOwner->ExtendFireExplicit( kFireTime, vPos, vDir, "" );

  00081	56		 push	 esi
  00082	8d 4d e0	 lea	 ecx, DWORD PTR $T531859[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0008e	8d 45 e0	 lea	 eax, DWORD PTR $T531859[ebp]
  00091	50		 push	 eax
  00092	ff 75 10	 push	 DWORD PTR _vDir$[ebp]
  00095	8d 45 88	 lea	 eax, DWORD PTR _kFireTime$[ebp]
  00098	ff 75 0c	 push	 DWORD PTR _vPos$[ebp]
  0009b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  000a5	8d 4d e0	 lea	 ecx, DWORD PTR $T531859[ebp]
  000a8	8b f0		 mov	 esi, eax
  000aa	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 169  : 	if ( pWeapon )

  000b3	3b f3		 cmp	 esi, ebx
  000b5	74 0a		 je	 SHORT $LN1@CreateWeap

; 170  : 	{
; 171  : 		pWeapon->SetPosition( vPos );

  000b7	ff 75 0c	 push	 DWORD PTR _vPos$[ebp]
  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
$LN1@CreateWeap:

; 172  : 	}	
; 173  : }

  000c1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000c5	8d 4d 88	 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  000c8	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN3@CreateWeap:
  000cd	e8 00 00 00 00	 call	 __EH_epilog3
  000d2	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z$0:
  00000	8d 4d 88	 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR $T531859[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z ENDP ; ioDummyTopPlate::CreateWeapon
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
PUBLIC	?FireWeapon@ioDummyTopPlate@@IAEXXZ		; ioDummyTopPlate::FireWeapon
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummytopplate.cpp
CONST	ENDS
;	COMDAT ?FireWeapon@ioDummyTopPlate@@IAEXXZ
_TEXT	SEGMENT
tv175 = -44						; size = 4
_vPos$ = -40						; size = 12
_vDir$ = -28						; size = 12
$T530625 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?FireWeapon@ioDummyTopPlate@@IAEXXZ PROC		; ioDummyTopPlate::FireWeapon, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 177  : 	if ( m_nAttackIndex == NO_WEAPON_ATTRIBUTE )

  00013	83 bb 84 14 00
	00 00		 cmp	 DWORD PTR [ebx+5252], 0
  0001a	74 70		 je	 SHORT $LN2@FireWeapon

; 178  : 		return;
; 179  : 
; 180  : 	D3DXVECTOR3 vDir = GetWorldOrientation() * D3DXVECTOR3(0.0f,0.0f,-FLOAT1);

  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	0f 57 c0	 xorps	 xmm0, xmm0
  00026	89 45 d4	 mov	 DWORD PTR tv175[ebp], eax
  00029	db 45 d4	 fild	 DWORD PTR tv175[ebp]
  0002c	f3 0f 11 45 f0	 movss	 DWORD PTR $T530625[ebp], xmm0
  00031	f3 0f 11 45 f4	 movss	 DWORD PTR $T530625[ebp+4], xmm0
  00036	85 c0		 test	 eax, eax
  00038	79 06		 jns	 SHORT $LN8@FireWeapon
  0003a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@FireWeapon:
  00040	8d 45 f0	 lea	 eax, DWORD PTR $T530625[ebp]
  00043	d9 e0		 fchs
  00045	50		 push	 eax
  00046	d9 5d f8	 fstp	 DWORD PTR $T530625[ebp+8]
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	ff 50 74	 call	 DWORD PTR [eax+116]
  0004e	50		 push	 eax
  0004f	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 	D3DXVec3Normalize( &vDir, &vDir);

  0005c	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  0005f	50		 push	 eax
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 182  : 	D3DXVECTOR3 vPos = GetWorldPosition();

  00066	8b 03		 mov	 eax, DWORD PTR [ebx]
  00068	8b cb		 mov	 ecx, ebx
  0006a	ff 50 70	 call	 DWORD PTR [eax+112]
  0006d	8b f0		 mov	 esi, eax
  0006f	8d 7d d8	 lea	 edi, DWORD PTR _vPos$[ebp]
  00072	a5		 movsd

; 183  : 
; 184  : 	CreateWeapon( m_nAttackIndex, vPos, vDir );

  00073	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  00076	50		 push	 eax
  00077	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  0007a	a5		 movsd
  0007b	50		 push	 eax
  0007c	ff b3 84 14 00
	00		 push	 DWORD PTR [ebx+5252]
  00082	8b cb		 mov	 ecx, ebx
  00084	a5		 movsd
  00085	e8 00 00 00 00	 call	 ?CreateWeapon@ioDummyTopPlate@@IAEXHABUD3DXVECTOR3@@0@Z ; ioDummyTopPlate::CreateWeapon
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
$LN2@FireWeapon:

; 185  : }

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	5b		 pop	 ebx
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	c9		 leave
  00098	c3		 ret	 0
?FireWeapon@ioDummyTopPlate@@IAEXXZ ENDP		; ioDummyTopPlate::FireWeapon
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ; ioINILoader::LoadInt_e<20>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<20>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadInt_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadInt_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadInt_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadInt_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadInt_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadInt_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadInt_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadInt_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadInt_e
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadInt_e
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadInt_e
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadInt_e
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadInt_e
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadInt_e
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadInt_e
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN73@LoadInt_e:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadInt_e:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadInt_e:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadInt_e
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadInt_e:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00238	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0023b	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023e	50		 push	 eax
  0023f	8b ce		 mov	 ecx, esi
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00247	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024a	5e		 pop	 esi
  0024b	33 cd		 xor	 ecx, ebp
  0024d	5b		 pop	 ebx
  0024e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00253	c9		 leave
  00254	c2 08 00	 ret	 8
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ; ioINILoader::LoadFloat_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<22>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadFloat_@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadFloat_@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadFloat_@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadFloat_@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadFloat_@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadFloat_@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadFloat_@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadFloat_@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadFloat_@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadFloat_@2
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadFloat_@2
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadFloat_@2
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadFloat_@2
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadFloat_@2
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadFloat_@2
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadFloat_@2
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN71@LoadFloat_@2:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN72@LoadFloat_@2:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00250	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00255	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00259	51		 push	 ecx
  0025a	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	50		 push	 eax
  00263	8b ce		 mov	 ecx, esi
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0026b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026e	5e		 pop	 esi
  0026f	33 cd		 xor	 ecx, ebp
  00271	5b		 pop	 ebx
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	c9		 leave
  00278	c2 08 00	 ret	 8
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ; ioINILoader::LoadFloat_e<11>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<11>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadFloat_@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadFloat_@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadFloat_@3
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadFloat_@3
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadFloat_@3
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadFloat_@3
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadFloat_@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadFloat_@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadFloat_@3
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadFloat_@3
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadFloat_@3
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadFloat_@3
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadFloat_@3
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadFloat_@3
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadFloat_@3
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadFloat_@3:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadFloat_@3:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadFloat_@3:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00183	51		 push	 ecx
  00184	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	33 cd		 xor	 ecx, ebp
  0019a	5e		 pop	 esi
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	c9		 leave
  001a1	c2 08 00	 ret	 8
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ; ioINILoader::LoadFloat_e<18>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<18>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadFloat_@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadFloat_@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadFloat_@4
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadFloat_@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadFloat_@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadFloat_@4
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadFloat_@4
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadFloat_@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadFloat_@4
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadFloat_@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadFloat_@4
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadFloat_@4
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadFloat_@4
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadFloat_@4
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadFloat_@4
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadFloat_@4
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadFloat_@4
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadFloat_@4
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadFloat_@4:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  001f8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001fd	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00201	51		 push	 ecx
  00202	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	50		 push	 eax
  0020b	8b ce		 mov	 ecx, esi
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00213	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00216	33 cd		 xor	 ecx, ebp
  00218	5e		 pop	 esi
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	c9		 leave
  0021f	c2 08 00	 ret	 8
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<18>
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadInitProperty@ioDummyTopPlate@@IAEXAAVioINILoader@@@Z ; ioDummyTopPlate::LoadInitProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummytopplate.cpp
;	COMDAT ?LoadInitProperty@ioDummyTopPlate@@IAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$532263 = -32					; size = 22
__k$532013 = -32					; size = 20
__k$532544 = -28					; size = 18
__k$532138 = -28					; size = 15
__k$532388 = -24					; size = 11
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadInitProperty@ioDummyTopPlate@@IAEXAAVioINILoader@@@Z PROC ; ioDummyTopPlate::LoadInitProperty, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 27   : 	m_nAttackIndex = rkLoader.LoadInt_e( "destroy_attack_type", NO_WEAPON_ATTRIBUTE );

  00016	6a 04		 push	 4
  00018	8b f1		 mov	 esi, ecx
  0001a	c7 45 e0 89 89
	98 9e		 mov	 DWORD PTR __k$532013[ebp], -1634170487 ; 9e988989H
  00021	c7 45 e4 9f 83
	92 b5		 mov	 DWORD PTR __k$532013[ebp+4], -1248689249 ; b592839fH
  00028	c7 45 e8 8c 98
	9f 8b		 mov	 DWORD PTR __k$532013[ebp+8], -1952474996 ; 8b9f988cH
  0002f	c7 45 ec 8e 87
	b4 9e		 mov	 DWORD PTR __k$532013[ebp+12], -1632335986 ; 9eb4878eH
  00036	8d 45 e0	 lea	 eax, DWORD PTR __k$532013[ebp]
  00039	33 db		 xor	 ebx, ebx
  0003b	c7 45 f0 94 9c
	8e 00		 mov	 DWORD PTR __k$532013[ebp+16], 9346196 ; 008e9c94H
  00042	59		 pop	 ecx
$LL106@LoadInitPr:
  00043	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00049	83 c0 04	 add	 eax, 4
  0004c	49		 dec	 ecx
  0004d	75 f4		 jne	 SHORT $LL106@LoadInitPr
  0004f	6a 10		 push	 16			; 00000010H
  00051	58		 pop	 eax
$LL103@LoadInitPr:
  00052	8b c8		 mov	 ecx, eax
  00054	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0005a	79 05		 jns	 SHORT $LN553@LoadInitPr
  0005c	49		 dec	 ecx
  0005d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00060	41		 inc	 ecx
$LN553@LoadInitPr:
  00061	b2 ed		 mov	 dl, -19			; ffffffedH
  00063	2a d1		 sub	 dl, cl
  00065	30 54 05 e0	 xor	 BYTE PTR __k$532013[ebp+eax], dl
  00069	40		 inc	 eax
  0006a	83 f8 13	 cmp	 eax, 19			; 00000013H
  0006d	7c e3		 jl	 SHORT $LL103@LoadInitPr
  0006f	53		 push	 ebx
  00070	8d 45 e0	 lea	 eax, DWORD PTR __k$532013[ebp]
  00073	50		 push	 eax
  00074	8b cf		 mov	 ecx, edi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0007c	6a 03		 push	 3
  0007e	89 86 84 14 00
	00		 mov	 DWORD PTR [esi+5252], eax

; 28   : 
; 29   : 	m_fFloatingPower = rkLoader.LoadFloat_e( "floating_power", 0.0f );

  00084	c7 45 e4 8b 80
	84 8b		 mov	 DWORD PTR __k$532138[ebp], -1954250613 ; 8b84808bH
  0008b	c7 45 e8 99 85
	85 8d		 mov	 DWORD PTR __k$532138[ebp+4], -1920629351 ; 8d858599H
  00092	c7 45 ec b2 9c
	84 9d		 mov	 DWORD PTR __k$532138[ebp+8], -1652253518 ; 9d849cb2H
  00099	66 c7 45 f0 88
	9e		 mov	 WORD PTR __k$532138[ebp+12], 40584 ; 00009e88H
  0009f	8d 45 e4	 lea	 eax, DWORD PTR __k$532138[ebp]
  000a2	88 5d f2	 mov	 BYTE PTR __k$532138[ebp+14], bl
  000a5	59		 pop	 ecx
$LL212@LoadInitPr:
  000a6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000ac	83 c0 04	 add	 eax, 4
  000af	49		 dec	 ecx
  000b0	75 f4		 jne	 SHORT $LL212@LoadInitPr
  000b2	6a 0c		 push	 12			; 0000000cH
  000b4	58		 pop	 eax
$LL209@LoadInitPr:
  000b5	8b c8		 mov	 ecx, eax
  000b7	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000bd	79 05		 jns	 SHORT $LN554@LoadInitPr
  000bf	49		 dec	 ecx
  000c0	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000c3	41		 inc	 ecx
$LN554@LoadInitPr:
  000c4	b2 ed		 mov	 dl, -19			; ffffffedH
  000c6	2a d1		 sub	 dl, cl
  000c8	30 54 05 e4	 xor	 BYTE PTR __k$532138[ebp+eax], dl
  000cc	40		 inc	 eax
  000cd	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  000d0	7c e3		 jl	 SHORT $LL209@LoadInitPr
  000d2	0f 57 c0	 xorps	 xmm0, xmm0
  000d5	51		 push	 ecx
  000d6	8d 45 e4	 lea	 eax, DWORD PTR __k$532138[ebp]
  000d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000de	50		 push	 eax
  000df	8b cf		 mov	 ecx, edi
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000e7	d9 9e 88 14 00
	00		 fstp	 DWORD PTR [esi+5256]
  000ed	6a 05		 push	 5

; 30   : 	m_fFloatingGravityRate = rkLoader.LoadFloat_e( "floating_gravity_rate", 0.0f );

  000ef	c7 45 e0 8b 80
	84 8b		 mov	 DWORD PTR __k$532263[ebp], -1954250613 ; 8b84808bH
  000f6	c7 45 e4 99 85
	85 8d		 mov	 DWORD PTR __k$532263[ebp+4], -1920629351 ; 8d858599H
  000fd	c7 45 e8 b2 8b
	99 8b		 mov	 DWORD PTR __k$532263[ebp+8], -1952871502 ; 8b998bb2H
  00104	c7 45 ec 9b 85
	9f 93		 mov	 DWORD PTR __k$532263[ebp+12], -1818262117 ; 939f859bH
  0010b	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$532263[ebp+16], -1635082574 ; 9e8a9eb2H
  00112	8d 45 e0	 lea	 eax, DWORD PTR __k$532263[ebp]
  00115	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$532263[ebp+20], 136 ; 00000088H
  0011b	59		 pop	 ecx
$LL318@LoadInitPr:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	49		 dec	 ecx
  00126	75 f4		 jne	 SHORT $LL318@LoadInitPr
  00128	0f 57 c0	 xorps	 xmm0, xmm0
  0012b	80 75 f4 ed	 xor	 BYTE PTR __k$532263[ebp+20], -19 ; ffffffedH
  0012f	51		 push	 ecx
  00130	8d 45 e0	 lea	 eax, DWORD PTR __k$532263[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	50		 push	 eax
  00139	8b cf		 mov	 ecx, edi
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00141	d9 9e 8c 14 00
	00		 fstp	 DWORD PTR [esi+5260]
  00147	6a 02		 push	 2

; 31   : 
; 32   : 	m_fJumpPower = rkLoader.LoadFloat_e( "jump_power", 0.0f );

  00149	c7 45 e8 87 99
	86 9a		 mov	 DWORD PTR __k$532388[ebp], -1702454905 ; 9a869987H
  00150	c7 45 ec b2 9c
	84 9d		 mov	 DWORD PTR __k$532388[ebp+4], -1652253518 ; 9d849cb2H
  00157	66 c7 45 f0 88
	9e		 mov	 WORD PTR __k$532388[ebp+8], 40584 ; 00009e88H
  0015d	8d 45 e8	 lea	 eax, DWORD PTR __k$532388[ebp]
  00160	88 5d f2	 mov	 BYTE PTR __k$532388[ebp+10], bl
  00163	59		 pop	 ecx
$LL424@LoadInitPr:
  00164	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0016a	83 c0 04	 add	 eax, 4
  0016d	49		 dec	 ecx
  0016e	75 f4		 jne	 SHORT $LL424@LoadInitPr
  00170	6a 08		 push	 8
  00172	58		 pop	 eax
$LL421@LoadInitPr:
  00173	8b c8		 mov	 ecx, eax
  00175	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017b	79 05		 jns	 SHORT $LN555@LoadInitPr
  0017d	49		 dec	 ecx
  0017e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00181	41		 inc	 ecx
$LN555@LoadInitPr:
  00182	b2 ed		 mov	 dl, -19			; ffffffedH
  00184	2a d1		 sub	 dl, cl
  00186	30 54 05 e8	 xor	 BYTE PTR __k$532388[ebp+eax], dl
  0018a	40		 inc	 eax
  0018b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0018e	7c e3		 jl	 SHORT $LL421@LoadInitPr
  00190	0f 57 c0	 xorps	 xmm0, xmm0
  00193	51		 push	 ecx
  00194	8d 45 e8	 lea	 eax, DWORD PTR __k$532388[ebp]
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	50		 push	 eax
  0019d	8b cf		 mov	 ecx, edi
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001a5	d9 9e 90 14 00
	00		 fstp	 DWORD PTR [esi+5264]
  001ab	6a 04		 push	 4

; 33   : 	m_fJumpGravityRate = rkLoader.LoadFloat_e( "jump_gravity_rate", 0.0f );

  001ad	c7 45 e4 87 99
	86 9a		 mov	 DWORD PTR __k$532544[ebp], -1702454905 ; 9a869987H
  001b4	c7 45 e8 b2 8b
	99 8b		 mov	 DWORD PTR __k$532544[ebp+4], -1952871502 ; 8b998bb2H
  001bb	c7 45 ec 9b 85
	9f 93		 mov	 DWORD PTR __k$532544[ebp+8], -1818262117 ; 939f859bH
  001c2	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$532544[ebp+12], -1635082574 ; 9e8a9eb2H
  001c9	8d 45 e4	 lea	 eax, DWORD PTR __k$532544[ebp]
  001cc	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$532544[ebp+16], 136 ; 00000088H
  001d2	59		 pop	 ecx
$LL530@LoadInitPr:
  001d3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d9	83 c0 04	 add	 eax, 4
  001dc	49		 dec	 ecx
  001dd	75 f4		 jne	 SHORT $LL530@LoadInitPr
  001df	0f 57 c0	 xorps	 xmm0, xmm0
  001e2	80 75 f4 ed	 xor	 BYTE PTR __k$532544[ebp+16], -19 ; ffffffedH
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$532544[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b cf		 mov	 ecx, edi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001f8	d9 9e 94 14 00
	00		 fstp	 DWORD PTR [esi+5268]

; 34   : }

  001fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00201	5f		 pop	 edi
  00202	5e		 pop	 esi
  00203	33 cd		 xor	 ecx, ebp
  00205	5b		 pop	 ebx
  00206	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020b	c9		 leave
  0020c	c2 04 00	 ret	 4
?LoadInitProperty@ioDummyTopPlate@@IAEXAAVioINILoader@@@Z ENDP ; ioDummyTopPlate::LoadInitProperty
_TEXT	ENDS
EXTRN	?SetAttachWeapon@ioDummyChar@@IAEXXZ:PROC	; ioDummyChar::SetAttachWeapon
; Function compile flags: /Ogsp
;	COMDAT ?ProcessDelayState@ioDummyTopPlate@@MAEXM@Z
_TEXT	SEGMENT
_value$532653 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelayState@ioDummyTopPlate@@MAEXM@Z PROC	; ioDummyTopPlate::ProcessDelayState, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 85   : 	DWORD dwCurTime = FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 86   : 
; 87   : 	if( m_dwDelayStartTime > 0 && m_dwDelayStartTime + m_dwDelayDuration < dwCurTime )

  00016	83 be 20 02 00
	00 00		 cmp	 DWORD PTR [esi+544], 0
  0001d	8b f8		 mov	 edi, eax
  0001f	76 34		 jbe	 SHORT $LN1@ProcessDel
  00021	8d 45 fc	 lea	 eax, DWORD PTR _value$532653[ebp]
  00024	50		 push	 eax
  00025	8d 8e 3c 07 00
	00		 lea	 ecx, DWORD PTR [esi+1852]
  0002b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00030	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  00036	03 45 fc	 add	 eax, DWORD PTR _value$532653[ebp]
  00039	3b c7		 cmp	 eax, edi
  0003b	73 18		 jae	 SHORT $LN1@ProcessDel

; 88   : 	{
; 89   : 		m_dwDelayStartTime = 0;
; 90   : 		SetMoveState();

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	83 a6 20 02 00
	00 00		 and	 DWORD PTR [esi+544], 0
  00046	8b ce		 mov	 ecx, esi
  00048	ff 90 18 01 00
	00		 call	 DWORD PTR [eax+280]

; 91   : 		SetAttachWeapon();

  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?SetAttachWeapon@ioDummyChar@@IAEXXZ ; ioDummyChar::SetAttachWeapon
$LN1@ProcessDel:
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 92   : 	}
; 93   : }

  00057	c9		 leave
  00058	c2 04 00	 ret	 4
?ProcessDelayState@ioDummyTopPlate@@MAEXM@Z ENDP	; ioDummyTopPlate::ProcessDelayState
_TEXT	ENDS
PUBLIC	_fTimePerSec$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?GetRoomGravity@ioPlayStage@@QAEMXZ:PROC	; ioPlayStage::GetRoomGravity
EXTRN	?GetBottomHeight@ioGameEntity@@QBEMXZ:PROC	; ioGameEntity::GetBottomHeight
; Function compile flags: /Ogsp
;	COMDAT ?ProcessMoveState@ioDummyTopPlate@@MAEXM@Z
_TEXT	SEGMENT
_fCurGravity$ = -56					; size = 4
tv473 = -52						; size = 4
_value$532671 = -52					; size = 4
_fTimePerSec$GSCopy$ = -48				; size = 4
_value$532694 = -44					; size = 4
_value$532690 = -44					; size = 4
_fMapHeight$ = -44					; size = 4
$T530589 = -40						; size = 12
_vCurDir$ = -28						; size = 12
_vCurPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessMoveState@ioDummyTopPlate@@MAEXM@Z PROC		; ioDummyTopPlate::ProcessMoveState, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	d9 45 08	 fld	 DWORD PTR _fTimePerSec$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	d9 5d d0	 fstp	 DWORD PTR _fTimePerSec$GSCopy$[ebp]
  00018	57		 push	 edi
  00019	8b d9		 mov	 ebx, ecx

; 97   : 	DWORD dwCurTime = FRAMEGETTIME();

  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00021	8b c8		 mov	 ecx, eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 98   : 	
; 99   : 	D3DXVECTOR3 vPrePos = GetWorldPosition();

  00029	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002b	8b cb		 mov	 ecx, ebx
  0002d	ff 50 70	 call	 DWORD PTR [eax+112]

; 100  : 	D3DXVECTOR3 vCurPos = vPrePos;

  00030	8b f0		 mov	 esi, eax
  00032	8d 7d f0	 lea	 edi, DWORD PTR _vCurPos$[ebp]
  00035	a5		 movsd
  00036	a5		 movsd

; 101  : 	float fMapHeight = GetBottomHeight();

  00037	8b cb		 mov	 ecx, ebx
  00039	a5		 movsd
  0003a	e8 00 00 00 00	 call	 ?GetBottomHeight@ioGameEntity@@QBEMXZ ; ioGameEntity::GetBottomHeight
  0003f	d9 5d d4	 fstp	 DWORD PTR _fMapHeight$[ebp]

; 102  : 	D3DXVECTOR3 vCurDir = GetWorldOrientation() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	0f 57 c0	 xorps	 xmm0, xmm0
  0004a	89 45 cc	 mov	 DWORD PTR tv473[ebp], eax
  0004d	db 45 cc	 fild	 DWORD PTR tv473[ebp]
  00050	f3 0f 11 45 d8	 movss	 DWORD PTR $T530589[ebp], xmm0
  00055	f3 0f 11 45 dc	 movss	 DWORD PTR $T530589[ebp+4], xmm0
  0005a	85 c0		 test	 eax, eax
  0005c	79 06		 jns	 SHORT $LN27@ProcessMov
  0005e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN27@ProcessMov:
  00064	8d 45 d8	 lea	 eax, DWORD PTR $T530589[ebp]
  00067	d9 e0		 fchs
  00069	50		 push	 eax
  0006a	d9 5d e0	 fstp	 DWORD PTR $T530589[ebp+8]
  0006d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006f	8b cb		 mov	 ecx, ebx
  00071	ff 50 74	 call	 DWORD PTR [eax+116]
  00074	50		 push	 eax
  00075	8d 45 e4	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  00078	50		 push	 eax
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 103  : 	D3DXVec3Normalize( &vCurDir, &vCurDir );

  00082	8d 45 e4	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  00085	50		 push	 eax
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 104  : 
; 105  : 	float fCurGravity = m_pModeParent->GetCreator()->GetRoomGravity() * fTimePerSec;

  0008c	8b 83 8c 00 00
	00		 mov	 eax, DWORD PTR [ebx+140]
  00092	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00095	e8 00 00 00 00	 call	 ?GetRoomGravity@ioPlayStage@@QAEMXZ ; ioPlayStage::GetRoomGravity
  0009a	d8 4d d0	 fmul	 DWORD PTR _fTimePerSec$GSCopy$[ebp]

; 106  : 
; 107  : 	m_fGravityAmt = 0.0f;

  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	8d 45 cc	 lea	 eax, DWORD PTR _value$532671[ebp]
  000a3	50		 push	 eax
  000a4	d9 5d c8	 fstp	 DWORD PTR _fCurGravity$[ebp]
  000a7	8d 8b c0 02 00
	00		 lea	 ecx, DWORD PTR [ebx+704]
  000ad	f3 0f 11 45 cc	 movss	 DWORD PTR _value$532671[ebp], xmm0
  000b2	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 108  : 	switch( m_MoveState )

  000b7	8b 83 80 14 00
	00		 mov	 eax, DWORD PTR [ebx+5248]
  000bd	83 e8 00	 sub	 eax, 0
  000c0	0f 84 34 01 00
	00		 je	 $LN4@ProcessMov
  000c6	48		 dec	 eax
  000c7	0f 85 95 01 00
	00		 jne	 $LN3@ProcessMov

; 117  : 			}
; 118  : 		}
; 119  : 		break;
; 120  : 	case MS_SLIDING:
; 121  : 		{
; 122  : 			vCurPos += vCurDir * ( m_fFloatingPower * fTimePerSec  );

  000cd	f3 0f 10 83 88
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5256]
  000d5	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _fTimePerSec$GSCopy$[ebp]
  000da	0f 5a c9	 cvtps2pd xmm1, xmm1
  000dd	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e0	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000e4	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vCurDir$[ebp]
  000e9	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ec	0f 57 d2	 xorps	 xmm2, xmm2
  000ef	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000f3	f3 0f 5a d0	 cvtss2sd xmm2, xmm0
  000f7	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000fb	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vCurDir$[ebp+4]
  00100	0f 5a d2	 cvtps2pd xmm2, xmm2
  00103	0f 57 db	 xorps	 xmm3, xmm3
  00106	f3 0f 5a d8	 cvtss2sd xmm3, xmm0
  0010a	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  0010e	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _vCurDir$[ebp+8]
  00113	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00117	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0011b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0011f	0f 5a db	 cvtps2pd xmm3, xmm3
  00122	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  00126	0f 57 c0	 xorps	 xmm0, xmm0
  00129	66 0f 5a c3	 cvtpd2ps xmm0, xmm3
  0012d	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _vCurPos$[ebp]
  00132	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00136	0f 5a c0	 cvtps2pd xmm0, xmm0
  00139	0f 5a db	 cvtps2pd xmm3, xmm3
  0013c	f2 0f 58 cb	 addsd	 xmm1, xmm3
  00140	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00144	f3 0f 11 4d f0	 movss	 DWORD PTR _vCurPos$[ebp], xmm1
  00149	0f 57 c9	 xorps	 xmm1, xmm1
  0014c	f3 0f 5a ca	 cvtss2sd xmm1, xmm2
  00150	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vCurPos$[ebp+4]
  00155	0f 5a d2	 cvtps2pd xmm2, xmm2
  00158	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0015c	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _vCurPos$[ebp+8]
  00161	0f 5a d2	 cvtps2pd xmm2, xmm2
  00164	f2 0f 58 d0	 addsd	 xmm2, xmm0
  00168	66 0f 5a c2	 cvtpd2ps xmm0, xmm2

; 123  : 			vCurPos.y -= fCurGravity * m_fFloatingGravityRate;

  0016c	f3 0f 10 55 c8	 movss	 xmm2, DWORD PTR _fCurGravity$[ebp]
  00171	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00175	f3 0f 11 45 f8	 movss	 DWORD PTR _vCurPos$[ebp+8], xmm0
  0017a	0f 57 c0	 xorps	 xmm0, xmm0
  0017d	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00181	f3 0f 10 8b 8c
	14 00 00	 movss	 xmm1, DWORD PTR [ebx+5260]
  00189	0f 5a c9	 cvtps2pd xmm1, xmm1
  0018c	0f 5a d2	 cvtps2pd xmm2, xmm2
  0018f	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00193	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00197	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 124  : 
; 125  : 			if( vCurPos.y <= fMapHeight )

  0019b	0f 57 c9	 xorps	 xmm1, xmm1
  0019e	f3 0f 5a c8	 cvtss2sd xmm1, xmm0
  001a2	f3 0f 11 45 f4	 movss	 DWORD PTR _vCurPos$[ebp+4], xmm0
  001a7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fMapHeight$[ebp]
  001ac	0f 5a d0	 cvtps2pd xmm2, xmm0
  001af	66 0f 2f d1	 comisd	 xmm2, xmm1
  001b3	0f 82 a9 00 00
	00		 jb	 $LN3@ProcessMov

; 126  : 			{
; 127  : 				vCurPos.y = fMapHeight;
; 128  : 				m_fGravityAmt = 0.0f;

  001b9	8d 45 d4	 lea	 eax, DWORD PTR _value$532690[ebp]
  001bc	f3 0f 11 45 f4	 movss	 DWORD PTR _vCurPos$[ebp+4], xmm0
  001c1	0f 57 c0	 xorps	 xmm0, xmm0
  001c4	50		 push	 eax
  001c5	8d 8b c0 02 00
	00		 lea	 ecx, DWORD PTR [ebx+704]
  001cb	f3 0f 11 45 d4	 movss	 DWORD PTR _value$532690[ebp], xmm0
  001d0	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 129  : 				m_fCurJumpPowerAmt = 0.0f;

  001d5	0f 57 c0	 xorps	 xmm0, xmm0
  001d8	8d 45 d4	 lea	 eax, DWORD PTR _value$532694[ebp]
  001db	50		 push	 eax
  001dc	8d 8b 20 03 00
	00		 lea	 ecx, DWORD PTR [ebx+800]
  001e2	f3 0f 11 45 d4	 movss	 DWORD PTR _value$532694[ebp], xmm0
  001e7	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 130  : 				SetDieState( true );

  001ec	8b 03		 mov	 eax, DWORD PTR [ebx]
  001ee	6a 01		 push	 1
  001f0	8b cb		 mov	 ecx, ebx
  001f2	ff 90 60 01 00
	00		 call	 DWORD PTR [eax+352]

; 131  : 			}
; 132  : 		}
; 133  : 		break;

  001f8	eb 68		 jmp	 SHORT $LN3@ProcessMov
$LN4@ProcessMov:

; 109  : 	{
; 110  : 	case MS_JUMP:
; 111  : 		{
; 112  : 			vCurPos.y += ( m_fJumpPower * fTimePerSec );

  001fa	f3 0f 10 83 90
	14 00 00	 movss	 xmm0, DWORD PTR [ebx+5264]
  00202	f3 0f 10 55 d0	 movss	 xmm2, DWORD PTR _fTimePerSec$GSCopy$[ebp]
  00207	0f 5a c8	 cvtps2pd xmm1, xmm0
  0020a	0f 5a d2	 cvtps2pd xmm2, xmm2
  0020d	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00211	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vCurPos$[ebp+4]
  00216	0f 5a d2	 cvtps2pd xmm2, xmm2
  00219	f2 0f 58 ca	 addsd	 xmm1, xmm2

; 113  : 			m_fJumpPower -= fCurGravity * m_fJumpGravityRate;

  0021d	f3 0f 10 55 c8	 movss	 xmm2, DWORD PTR _fCurGravity$[ebp]
  00222	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00226	f3 0f 11 4d f4	 movss	 DWORD PTR _vCurPos$[ebp+4], xmm1
  0022b	f3 0f 10 8b 94
	14 00 00	 movss	 xmm1, DWORD PTR [ebx+5268]
  00233	0f 5a c9	 cvtps2pd xmm1, xmm1
  00236	0f 5a c0	 cvtps2pd xmm0, xmm0
  00239	0f 5a d2	 cvtps2pd xmm2, xmm2
  0023c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00240	f2 0f 5c c1	 subsd	 xmm0, xmm1

; 114  : 			if ( m_fJumpPower < 0.0f )

  00244	0f 57 c9	 xorps	 xmm1, xmm1
  00247	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0024b	0f 2f c8	 comiss	 xmm1, xmm0
  0024e	f3 0f 11 83 90
	14 00 00	 movss	 DWORD PTR [ebx+5264], xmm0
  00256	76 0a		 jbe	 SHORT $LN3@ProcessMov

; 115  : 			{
; 116  : 				m_MoveState = MS_SLIDING;

  00258	c7 83 80 14 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+5248], 1
$LN3@ProcessMov:

; 134  : 	}
; 135  : 
; 136  : 	SetWorldPosition( vCurPos );

  00262	8b 03		 mov	 eax, DWORD PTR [ebx]
  00264	8d 4d f0	 lea	 ecx, DWORD PTR _vCurPos$[ebp]
  00267	51		 push	 ecx
  00268	8b cb		 mov	 ecx, ebx
  0026a	ff 50 44	 call	 DWORD PTR [eax+68]

; 137  : }

  0026d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00270	5f		 pop	 edi
  00271	5e		 pop	 esi
  00272	33 cd		 xor	 ecx, ebp
  00274	5b		 pop	 ebx
  00275	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027a	c9		 leave
  0027b	c2 04 00	 ret	 4
?ProcessMoveState@ioDummyTopPlate@@MAEXM@Z ENDP		; ioDummyTopPlate::ProcessMoveState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetDieState@ioDummyTopPlate@@UAEX_N@Z
_TEXT	SEGMENT
_bEffect$ = 8						; size = 1
?SetDieState@ioDummyTopPlate@@UAEX_N@Z PROC		; ioDummyTopPlate::SetDieState, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 141  : 	m_MoveState = MS_JUMP;
; 142  : 	ioDummyChar::SetDieState( bEffect );

  00004	6a 00		 push	 0
  00006	ff 75 08	 push	 DWORD PTR _bEffect$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	83 a6 80 14 00
	00 00		 and	 DWORD PTR [esi+5248], 0
  00012	e8 00 00 00 00	 call	 ?SetDieState@ioDummyChar@@UAEX_N0@Z ; ioDummyChar::SetDieState

; 143  : 	FireWeapon();

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?FireWeapon@ioDummyTopPlate@@IAEXXZ ; ioDummyTopPlate::FireWeapon
  0001e	5e		 pop	 esi

; 144  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?SetDieState@ioDummyTopPlate@@UAEX_N@Z ENDP		; ioDummyTopPlate::SetDieState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$532705 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$532705[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$532705[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
_TEXT	ENDS
EXTRN	?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z:PROC ; ioDummyChar::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummytopplate.cpp
;	COMDAT ?LoadProperty@ioDummyTopPlate@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$ = 8						; size = 4
?LoadProperty@ioDummyTopPlate@@UAEXAAVioINILoader@@@Z PROC ; ioDummyTopPlate::LoadProperty, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 20   : 	ioDummyChar::LoadProperty( rkLoader );

  00004	ff 75 08	 push	 DWORD PTR _rkLoader$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z ; ioDummyChar::LoadProperty

; 21   : 
; 22   : 	LoadInitProperty( rkLoader );

  0000e	ff 75 08	 push	 DWORD PTR _rkLoader$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?LoadInitProperty@ioDummyTopPlate@@IAEXAAVioINILoader@@@Z ; ioDummyTopPlate::LoadInitProperty
  00018	5e		 pop	 esi

; 23   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?LoadProperty@ioDummyTopPlate@@UAEXAAVioINILoader@@@Z ENDP ; ioDummyTopPlate::LoadProperty
_TEXT	ENDS
END
