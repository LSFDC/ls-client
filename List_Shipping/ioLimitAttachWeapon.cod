; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioLimitAttachWeapon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?m_ActionStopType@ioLimitAttachWeapon@@2W4ActionStopType@@A ; ioLimitAttachWeapon::m_ActionStopType
PUBLIC	?m_DieActionStopType@ioLimitAttachWeapon@@2W4ActionStopType@@A ; ioLimitAttachWeapon::m_DieActionStopType
_BSS	SEGMENT
?m_ActionStopType@ioLimitAttachWeapon@@2W4ActionStopType@@A DD 01H DUP (?) ; ioLimitAttachWeapon::m_ActionStopType
?m_DieActionStopType@ioLimitAttachWeapon@@2W4ActionStopType@@A DD 01H DUP (?) ; ioLimitAttachWeapon::m_DieActionStopType
_BSS	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return1000@@YAIXZ				; return1000
; Function compile flags: /Ogsp
;	COMDAT ?return1000@@YAIXZ
_TEXT	SEGMENT
?return1000@@YAIXZ PROC					; return1000, COMDAT

; 29   : 	__forceinline unsigned int return1000() { __asm mov eax, 1000 };

  00000	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00005	c3		 ret	 0
?return1000@@YAIXZ ENDP					; return1000
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	??_C@_0DL@MMPMIGLB@ioLimitAttachWeapon?3?3?$HOioMissileW@ ; `string'
PUBLIC	??_7ioLimitAttachWeapon@@6B@			; ioLimitAttachWeapon::`vftable'
PUBLIC	??1ioLimitAttachWeapon@@UAE@XZ			; ioLimitAttachWeapon::~ioLimitAttachWeapon
PUBLIC	??_R4ioLimitAttachWeapon@@6B@			; ioLimitAttachWeapon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioLimitAttachWeapon@@@8			; ioLimitAttachWeapon `RTTI Type Descriptor'
PUBLIC	??_R3ioLimitAttachWeapon@@8			; ioLimitAttachWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioLimitAttachWeapon@@8			; ioLimitAttachWeapon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioLimitAttachWeapon@@8		; ioLimitAttachWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWeapon@@8			; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R3ioWeapon@@8				; ioWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeapon@@8				; ioWeapon::`RTTI Base Class Array'
PUBLIC	?InitResource@ioLimitAttachWeapon@@UAE_NXZ	; ioLimitAttachWeapon::InitResource
PUBLIC	?DestroyResource@ioLimitAttachWeapon@@UAEXPAVioPlayStage@@@Z ; ioLimitAttachWeapon::DestroyResource
PUBLIC	?LoadProperty@ioLimitAttachWeapon@@UAEXAAVioINILoader@@@Z ; ioLimitAttachWeapon::LoadProperty
PUBLIC	?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ; ioLimitAttachWeapon::SetStartPosition
PUBLIC	?Process@ioLimitAttachWeapon@@UAEXMPAVioPlayStage@@@Z ; ioLimitAttachWeapon::Process
PUBLIC	?IsCollision@ioLimitAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z ; ioLimitAttachWeapon::IsCollision
PUBLIC	?GetAttackDir@ioLimitAttachWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z ; ioLimitAttachWeapon::GetAttackDir
PUBLIC	?GetLocalAttackBox@ioLimitAttachWeapon@@UBEABVioOrientBox@@XZ ; ioLimitAttachWeapon::GetLocalAttackBox
PUBLIC	?GetType@ioLimitAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ ; ioLimitAttachWeapon::GetType
PUBLIC	?GetActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ ; ioLimitAttachWeapon::GetActionStopType
PUBLIC	?GetDieActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ ; ioLimitAttachWeapon::GetDieActionStopType
PUBLIC	?UpdateWorldAttackBox@ioLimitAttachWeapon@@MAEXM_N@Z ; ioLimitAttachWeapon::UpdateWorldAttackBox
PUBLIC	?GetAttribute@ioLimitAttachWeapon@@MBEPBUWeaponAttribute@@XZ ; ioLimitAttachWeapon::GetAttribute
EXTRN	??1ioWeapon@@UAE@XZ:PROC			; ioWeapon::~ioWeapon
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z:PROC ; ioWeapon::IsAlreadyCollisioned
EXTRN	?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::AddCollisionEntity
EXTRN	?SetOwnerDamageRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerDamageRate
EXTRN	?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeDamageRate
EXTRN	?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeForceRate
EXTRN	?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeRangeRate
EXTRN	?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeSpeedRate
EXTRN	?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeBlowRate
EXTRN	?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeFloatRate
EXTRN	?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeScaleRate
EXTRN	?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeExplosionRate
EXTRN	?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeWoundedTimeRate
EXTRN	?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeLiveTimeRate
EXTRN	?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeBuffLiveTimeRate
EXTRN	?SetWeaponIndex@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetWeaponIndex
EXTRN	?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetGrapplingTargetName
EXTRN	?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetCreateItem
EXTRN	?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z:PROC ; ioWeapon::SetTeam
EXTRN	?CallReserveAreaWeapon@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CallReserveAreaWeapon
EXTRN	?SetWeaponDead@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetWeaponDead
EXTRN	?PlayExplosionSound@ioWeapon@@UAEXXZ:PROC	; ioWeapon::PlayExplosionSound
EXTRN	?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayWoundedSound
EXTRN	?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayDefensedSound
EXTRN	?PlayLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::PlayLoopSound
EXTRN	?StopLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::StopLoopSound
EXTRN	?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetAirBuffList
EXTRN	?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetBuffList
EXTRN	?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetDownBuffList
EXTRN	?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetPosition
EXTRN	?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ:PROC ; ioWeapon::GetBlowType
EXTRN	?GetPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetPushPower
EXTRN	?GetBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetBlowPower
EXTRN	?GetAirPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirPushPower
EXTRN	?GetAirBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirBlowPower
EXTRN	?GetDefensePushPower@ioWeapon@@UBEMM@Z:PROC	; ioWeapon::GetDefensePushPower
EXTRN	?GetCollisionEnableTime@ioWeapon@@UBEKXZ:PROC	; ioWeapon::GetCollisionEnableTime
EXTRN	?SetSylphid@ioWeapon@@UAEHXZ:PROC		; ioWeapon::SetSylphid
EXTRN	?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z:PROC ; ioWeapon::ApplyExtraReserveWeaponByWeaponInfo
EXTRN	?SetResistanceAttr@ioWeapon@@UAEXH@Z:PROC	; ioWeapon::SetResistanceAttr
EXTRN	?SetStartCollisionBox@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetStartCollisionBox
EXTRN	?SetLiveTime@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetLiveTime
EXTRN	?SetMoveDir@ioWeapon@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetMoveDir
EXTRN	?SetMoveSpeed@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetMoveSpeed
EXTRN	?SetFloatPower@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetFloatPower
EXTRN	?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioWeapon::TestMapCollision
EXTRN	?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckPreCollision
EXTRN	?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckStructAndDummy
EXTRN	?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetDamage
EXTRN	?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetBaseDamage
EXTRN	?GetPushAngle@ioWeapon@@UBEMXZ:PROC		; ioWeapon::GetPushAngle
EXTRN	?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceMagic
EXTRN	?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceBomb
EXTRN	?IsCanMineExplosion@ioWeapon@@UAE_NXZ:PROC	; ioWeapon::IsCanMineExplosion
EXTRN	?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ:PROC ; ioWeapon::CheckGrapplingState
EXTRN	?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z:PROC ; ioWeapon::CheckCurAttribute
EXTRN	?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z:PROC ; ioWeapon::CheckItemNotDrop
EXTRN	?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z:PROC ; ioWeapon::GetWorldAttackBoxList
EXTRN	?GetLiveTime@ioWeapon@@UAEKXZ:PROC		; ioWeapon::GetLiveTime
EXTRN	?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetMoveDir
EXTRN	?CheckWeaponCollision@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CheckWeaponCollision
EXTRN	?GetRefreshDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetRefreshDuration
EXTRN	?GetIgnoreDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreDuration
EXTRN	?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ:PROC ; ioWeapon::GetIgnoreTimeTypeDuration
EXTRN	?GetIgnoreTimeType@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreTimeType
EXTRN	?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z:PROC ; ioWeapon::ApplyWeaponSync
EXTRN	?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z:PROC ; ioWeapon::IsSkillDependency
EXTRN	?SetSkillDependencyAction@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetSkillDependencyAction
EXTRN	?CalcFinalDamage@ioWeapon@@MAEMXZ:PROC		; ioWeapon::CalcFinalDamage
EXTRN	?CalcFinalBoundDamage@ioWeapon@@MAEMXZ:PROC	; ioWeapon::CalcFinalBoundDamage
EXTRN	?CheckPiercing@ioWeapon@@MAE_N_N@Z:PROC		; ioWeapon::CheckPiercing
EXTRN	?ClearCollisionList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::ClearCollisionList
EXTRN	?CheckCreateWeaponList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::CheckCreateWeaponList
EXTRN	?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ:PROC ; ioWeapon::CreateCollisionAreaWeapon
EXTRN	?SetMapCollision@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetMapCollision
EXTRN	?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ:PROC	; ioWeapon::IsIgnoreMapCollision
EXTRN	?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreTestMapCollision
EXTRN	?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreMapCollisionEffect
EXTRN	?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z:PROC ; ioWeapon::AddEffectEvent
EXTRN	??_EioLimitAttachWeapon@@UAEPAXI@Z:PROC		; ioLimitAttachWeapon::`vector deleting destructor'
;	COMDAT ??_R2ioWeapon@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon.cpp
rdata$r	SEGMENT
??_R2ioWeapon@@8 DD FLAT:??_R1A@?0A@EA@ioWeapon@@8	; ioWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWeapon@@8
rdata$r	SEGMENT
??_R3ioWeapon@@8 DD 00H					; ioWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWeapon@@@8
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeapon@@8 DD FLAT:??_R0?AVioWeapon@@@8	; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioLimitAttachWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioLimitAttachWeapon@@8 DD FLAT:??_R0?AVioLimitAttachWeapon@@@8 ; ioLimitAttachWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioLimitAttachWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R2ioLimitAttachWeapon@@8
rdata$r	SEGMENT
??_R2ioLimitAttachWeapon@@8 DD FLAT:??_R1A@?0A@EA@ioLimitAttachWeapon@@8 ; ioLimitAttachWeapon::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R3ioLimitAttachWeapon@@8
rdata$r	SEGMENT
??_R3ioLimitAttachWeapon@@8 DD 00H			; ioLimitAttachWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioLimitAttachWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioLimitAttachWeapon@@@8
_DATA	SEGMENT
??_R0?AVioLimitAttachWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioLimitAttachWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioLimitAttachWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioLimitAttachWeapon@@6B@
rdata$r	SEGMENT
??_R4ioLimitAttachWeapon@@6B@ DD 00H			; ioLimitAttachWeapon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioLimitAttachWeapon@@@8
	DD	FLAT:??_R3ioLimitAttachWeapon@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DL@MMPMIGLB@ioLimitAttachWeapon?3?3?$HOioMissileW@
CONST	SEGMENT
??_C@_0DL@MMPMIGLB@ioLimitAttachWeapon?3?3?$HOioMissileW@ DB 'ioLimitAtta'
	DB	'chWeapon::~ioMissileWeapon - UnReleased Resouce', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ioLimitAttachWeapon@@6B@
CONST	SEGMENT
??_7ioLimitAttachWeapon@@6B@ DD FLAT:??_R4ioLimitAttachWeapon@@6B@ ; ioLimitAttachWeapon::`vftable'
	DD	FLAT:?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z
	DD	FLAT:?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?SetOwnerDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z
	DD	FLAT:?CallReserveAreaWeapon@ioWeapon@@UAEXXZ
	DD	FLAT:?SetWeaponDead@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayExplosionSound@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?StopLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ
	DD	FLAT:?GetPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetDefensePushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetCollisionEnableTime@ioWeapon@@UBEKXZ
	DD	FLAT:?SetSylphid@ioWeapon@@UAEHXZ
	DD	FLAT:?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z
	DD	FLAT:?InitResource@ioLimitAttachWeapon@@UAE_NXZ
	DD	FLAT:?DestroyResource@ioLimitAttachWeapon@@UAEXPAVioPlayStage@@@Z
	DD	FLAT:?LoadProperty@ioLimitAttachWeapon@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?SetResistanceAttr@ioWeapon@@UAEXH@Z
	DD	FLAT:?SetStartCollisionBox@ioWeapon@@UAEXXZ
	DD	FLAT:?SetLiveTime@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetMoveDir@ioWeapon@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetMoveSpeed@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetFloatPower@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
	DD	FLAT:?Process@ioLimitAttachWeapon@@UAEXMPAVioPlayStage@@@Z
	DD	FLAT:?IsCollision@ioLimitAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z
	DD	FLAT:?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetPushAngle@ioWeapon@@UBEMXZ
	DD	FLAT:?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsCanMineExplosion@ioWeapon@@UAE_NXZ
	DD	FLAT:?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ
	DD	FLAT:?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z
	DD	FLAT:?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z
	DD	FLAT:?GetAttackDir@ioLimitAttachWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z
	DD	FLAT:?GetLocalAttackBox@ioLimitAttachWeapon@@UBEABVioOrientBox@@XZ
	DD	FLAT:?GetLiveTime@ioWeapon@@UAEKXZ
	DD	FLAT:?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ
	DD	FLAT:?CheckWeaponCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?GetType@ioLimitAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ
	DD	FLAT:?GetActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetDieActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetRefreshDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeType@ioWeapon@@UAEKXZ
	DD	FLAT:?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z
	DD	FLAT:?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z
	DD	FLAT:?SetSkillDependencyAction@ioWeapon@@UAEXXZ
	DD	FLAT:?UpdateWorldAttackBox@ioLimitAttachWeapon@@MAEXM_N@Z
	DD	FLAT:?GetAttribute@ioLimitAttachWeapon@@MBEPBUWeaponAttribute@@XZ
	DD	FLAT:?CalcFinalDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CalcFinalBoundDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CheckPiercing@ioWeapon@@MAE_N_N@Z
	DD	FLAT:?ClearCollisionList@ioWeapon@@MAEXXZ
	DD	FLAT:?CheckCreateWeaponList@ioWeapon@@MAEXXZ
	DD	FLAT:?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ
	DD	FLAT:?SetMapCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ
	DD	FLAT:?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z
	DD	FLAT:??_EioLimitAttachWeapon@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioLimitAttachWeapon@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon@@UAE@XZ$0
__ehfuncinfo$??1ioLimitAttachWeapon@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioLimitAttachWeapon@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioLimitAttachWeapon@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioLimitAttachWeapon@@UAE@XZ PROC			; ioLimitAttachWeapon::~ioLimitAttachWeapon, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioLimitAttachWeapon@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLimitAttachWeapon@@6B@
  00017	33 c0		 xor	 eax, eax
  00019	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 22   : 	if( m_pFireBall )

  0001c	39 86 94 08 00
	00		 cmp	 DWORD PTR [esi+2196], eax
  00022	74 15		 je	 SHORT $LN1@ioLimitAtt

; 23   : 	{
; 24   : 		LOG.PrintTimeAndLog( 0, "ioLimitAttachWeapon::~ioMissileWeapon - UnReleased Resouce" );

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@MMPMIGLB@ioLimitAttachWeapon?3?3?$HOioMissileW@
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ioLimitAtt:

; 25   : 	}
; 26   : }

  00039	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
  00044	e8 00 00 00 00	 call	 __EH_epilog3
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioLimitAttachWeapon@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__ehhandler$??1ioLimitAttachWeapon@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioLimitAttachWeapon@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioLimitAttachWeapon@@UAE@XZ ENDP			; ioLimitAttachWeapon::~ioLimitAttachWeapon
EXTRN	__imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?DestroyResource@ioLimitAttachWeapon@@UAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
?DestroyResource@ioLimitAttachWeapon@@UAEXPAVioPlayStage@@@Z PROC ; ioLimitAttachWeapon::DestroyResource, COMDAT
; _this$ = ecx

; 117  : {

  00000	56		 push	 esi

; 118  : 	if( m_pFireBall )

  00001	8d b1 94 08 00
	00		 lea	 esi, DWORD PTR [ecx+2196]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 12		 je	 SHORT $LN1@DestroyRes

; 119  : 	{
; 120  : 		g_EffectFactory.DestroyEffect( m_pFireBall );

  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00014	8b c8		 mov	 ecx, eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z

; 121  : 		m_pFireBall = NULL;

  0001c	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@DestroyRes:
  0001f	5e		 pop	 esi

; 122  : 	}
; 123  : }

  00020	c2 04 00	 ret	 4
?DestroyResource@ioLimitAttachWeapon@@UAEXPAVioPlayStage@@@Z ENDP ; ioLimitAttachWeapon::DestroyResource
_TEXT	ENDS
EXTRN	?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z:PROC ; ioWeapon::GetAttackDir
; Function compile flags: /Ogsp
;	COMDAT ?GetAttackDir@ioLimitAttachWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_pEntity$ = 12						; size = 4
?GetAttackDir@ioLimitAttachWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z PROC ; ioLimitAttachWeapon::GetAttackDir, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 127  : 	return ioWeapon::GetAttackDir(pEntity);

  00003	ff 75 0c	 push	 DWORD PTR _pEntity$[ebp]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	e8 00 00 00 00	 call	 ?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z ; ioWeapon::GetAttackDir
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 128  : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?GetAttackDir@ioLimitAttachWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z ENDP ; ioLimitAttachWeapon::GetAttackDir
_TEXT	ENDS
EXTRN	?GetLocalAttackBox@ioWeapon@@UBEABVioOrientBox@@XZ:PROC ; ioWeapon::GetLocalAttackBox
EXTRN	__imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetLocalAttackBox@ioLimitAttachWeapon@@UBEABVioOrientBox@@XZ
_TEXT	SEGMENT
?GetLocalAttackBox@ioLimitAttachWeapon@@UBEABVioOrientBox@@XZ PROC ; ioLimitAttachWeapon::GetLocalAttackBox, COMDAT
; _this$ = ecx

; 132  : 	if( m_pFireBall )

  00000	8b 81 94 08 00
	00		 mov	 eax, DWORD PTR [ecx+2196]
  00006	85 c0		 test	 eax, eax
  00008	74 08		 je	 SHORT $LN1@GetLocalAt

; 133  : 		return m_pFireBall->GetCollisionBox();

  0000a	8b c8		 mov	 ecx, eax
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ
$LN1@GetLocalAt:

; 134  : 
; 135  : 	return ioWeapon::GetLocalAttackBox();

  00012	e9 00 00 00 00	 jmp	 ?GetLocalAttackBox@ioWeapon@@UBEABVioOrientBox@@XZ ; ioWeapon::GetLocalAttackBox
?GetLocalAttackBox@ioLimitAttachWeapon@@UBEABVioOrientBox@@XZ ENDP ; ioLimitAttachWeapon::GetLocalAttackBox
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetType@ioLimitAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ
_TEXT	SEGMENT
?GetType@ioLimitAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ PROC ; ioLimitAttachWeapon::GetType, COMDAT
; _this$ = ecx

; 140  : 	return WT_LIMIT_ATTACH;

  00000	6a 1c		 push	 28			; 0000001cH
  00002	58		 pop	 eax

; 141  : }

  00003	c3		 ret	 0
?GetType@ioLimitAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ ENDP ; ioLimitAttachWeapon::GetType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ PROC ; ioLimitAttachWeapon::GetActionStopType, COMDAT
; _this$ = ecx

; 145  : 	return m_ActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_ActionStopType@ioLimitAttachWeapon@@2W4ActionStopType@@A ; ioLimitAttachWeapon::m_ActionStopType

; 146  : }

  00005	c3		 ret	 0
?GetActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ ENDP ; ioLimitAttachWeapon::GetActionStopType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetDieActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetDieActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ PROC ; ioLimitAttachWeapon::GetDieActionStopType, COMDAT
; _this$ = ecx

; 150  : 	return m_DieActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_DieActionStopType@ioLimitAttachWeapon@@2W4ActionStopType@@A ; ioLimitAttachWeapon::m_DieActionStopType

; 151  : }

  00005	c3		 ret	 0
?GetDieActionStopType@ioLimitAttachWeapon@@UBE?AW4ActionStopType@@XZ ENDP ; ioLimitAttachWeapon::GetDieActionStopType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetAttribute@ioLimitAttachWeapon@@MBEPBUWeaponAttribute@@XZ
_TEXT	SEGMENT
?GetAttribute@ioLimitAttachWeapon@@MBEPBUWeaponAttribute@@XZ PROC ; ioLimitAttachWeapon::GetAttribute, COMDAT
; _this$ = ecx

; 184  : 	if( m_bResistance )

  00000	80 b9 3c 06 00
	00 00		 cmp	 BYTE PTR [ecx+1596], 0
  00007	74 07		 je	 SHORT $LN1@GetAttribu

; 185  : 	{
; 186  : 		if( m_pResistanceAttr )

  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	85 c0		 test	 eax, eax

; 187  : 			return m_pResistanceAttr;

  0000e	75 03		 jne	 SHORT $LN3@GetAttribu
$LN1@GetAttribu:

; 188  : 	}
; 189  : 
; 190  : 	return m_pConstAttr;

  00010	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
$LN3@GetAttribu:

; 191  : }

  00013	c3		 ret	 0
?GetAttribute@ioLimitAttachWeapon@@MBEPBUWeaponAttribute@@XZ ENDP ; ioLimitAttachWeapon::GetAttribute
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?IsLive@ioWeapon@@QBE_NXZ			; ioWeapon::IsLive
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
;	COMDAT ?IsLive@ioWeapon@@QBE_NXZ
_TEXT	SEGMENT
?IsLive@ioWeapon@@QBE_NXZ PROC				; ioWeapon::IsLive, COMDAT
; _this$ = ecx

; 533  : 	inline bool IsLive() const { return m_bLive; }

  00000	8a 81 82 05 00
	00		 mov	 al, BYTE PTR [ecx+1410]
  00006	c3		 ret	 0
?IsLive@ioWeapon@@QBE_NXZ ENDP				; ioWeapon::IsLive
_TEXT	ENDS
PUBLIC	?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ; ioWeapon::GetParentSceneNode
; Function compile flags: /Ogsp
;	COMDAT ?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ
_TEXT	SEGMENT
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ PROC ; ioWeapon::GetParentSceneNode, COMDAT
; _this$ = ecx

; 797  : 	ioSceneNode* GetParentSceneNode() const { return m_pSceneNode; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ENDP ; ioWeapon::GetParentSceneNode
_TEXT	ENDS
PUBLIC	??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioLimitAttachWeapon::ioLimitAttachWeapon
EXTRN	?SetPeculiarity@ioWeapon@@QAEXK@Z:PROC		; ioWeapon::SetPeculiarity
EXTRN	??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:PROC ; ioWeapon::ioWeapon
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
xdata$x	SEGMENT
__unwindtable$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0
__ehfuncinfo$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon.cpp
xdata$x	ENDS
;	COMDAT ??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_pAttr$ = 12						; size = 4
??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z PROC ; ioLimitAttachWeapon::ioLimitAttachWeapon, COMDAT
; _this$ = ecx

; 14   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR _pAttr$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioWeapon::ioWeapon
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 15   : 	SetPeculiarity( WP_DIVIDE_ACTION );

  00020	68 00 01 00 00	 push	 256			; 00000100H
  00025	8b ce		 mov	 ecx, esi
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLimitAttachWeapon@@6B@
  0002d	e8 00 00 00 00	 call	 ?SetPeculiarity@ioWeapon@@QAEXK@Z ; ioWeapon::SetPeculiarity

; 16   : 
; 17   : 	m_pFireBall = NULL;

  00032	83 a6 94 08 00
	00 00		 and	 DWORD PTR [esi+2196], 0

; 18   : }

  00039	8b c6		 mov	 eax, esi
  0003b	e8 00 00 00 00	 call	 __EH_epilog3
  00040	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__ehhandler$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioLimitAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ENDP ; ioLimitAttachWeapon::ioLimitAttachWeapon
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioLimitAttachWeapon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioLimitAttachWeapon@@UAEPAXI@Z PROC			; ioLimitAttachWeapon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioLimitAttachWeapon@@UAE@XZ ; ioLimitAttachWeapon::~ioLimitAttachWeapon
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioLimitAttachWeapon@@UAEPAXI@Z ENDP			; ioLimitAttachWeapon::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
EXTRN	?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioWeapon::SetOrientation
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?HasLinkedSystem@ioEffect@@QBE_NXZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z$0
__ehfuncinfo$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon.cpp
xdata$x	ENDS
;	COMDAT ?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
$T524464 = -64						; size = 16
tv219 = -48						; size = 4
$T524467 = -48						; size = 4
$T524463 = -41						; size = 1
$T523801 = -40						; size = 12
$T523800 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_vPos$ = 8						; size = 4
_pStage$ = 12						; size = 4
?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z PROC ; ioLimitAttachWeapon::SetStartPosition, COMDAT
; _this$ = ecx

; 62   : {

  00000	6a 34		 push	 52			; 00000034H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	83 65 d0 00	 and	 DWORD PTR $T524467[ebp], 0
  00010	8b 75 08	 mov	 esi, DWORD PTR _vPos$[ebp]
  00013	8b d9		 mov	 ebx, ecx

; 63   : 	if( m_pFireBall && m_pFireBall->GetSkeletonName().IsEmpty() && m_pFireBall->HasLinkedSystem() )

  00015	8b 8b 94 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2196]
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 35		 je	 SHORT $LN4@SetStartPo
  0001f	8d 45 c0	 lea	 eax, DWORD PTR $T524464[ebp]
  00022	50		 push	 eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	8b c8		 mov	 ecx, eax
  0002f	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR $T524467[ebp], 1
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0003c	84 c0		 test	 al, al
  0003e	74 14		 je	 SHORT $LN4@SetStartPo
  00040	8b 8b 94 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2196]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HasLinkedSystem@ioEffect@@QBE_NXZ
  0004c	c6 45 d7 01	 mov	 BYTE PTR $T524463[ebp], 1
  00050	84 c0		 test	 al, al
  00052	75 04		 jne	 SHORT $LN5@SetStartPo
$LN4@SetStartPo:
  00054	c6 45 d7 00	 mov	 BYTE PTR $T524463[ebp], 0
$LN5@SetStartPo:
  00058	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	f6 45 d0 01	 test	 BYTE PTR $T524467[ebp], 1
  00060	74 09		 je	 SHORT $LN8@SetStartPo
  00062	8d 4d c0	 lea	 ecx, DWORD PTR $T524464[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN8@SetStartPo:
  0006b	80 7d d7 00	 cmp	 BYTE PTR $T524463[ebp], 0
  0006f	75 6c		 jne	 SHORT $LN2@SetStartPo

; 64   : 		return;
; 65   : 
; 66   : 	SetPosition( vPos );

  00071	56		 push	 esi
  00072	8b cb		 mov	 ecx, ebx
  00074	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 67   : 
; 68   : 	m_vMoveDir = GetOwner()->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	89 45 d0	 mov	 DWORD PTR tv219[ebp], eax
  00084	db 45 d0	 fild	 DWORD PTR tv219[ebp]
  00087	f3 0f 11 45 e4	 movss	 DWORD PTR $T523800[ebp], xmm0
  0008c	f3 0f 11 45 e8	 movss	 DWORD PTR $T523800[ebp+4], xmm0
  00091	85 c0		 test	 eax, eax
  00093	79 06		 jns	 SHORT $LN19@SetStartPo
  00095	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN19@SetStartPo:
  0009b	d9 e0		 fchs
  0009d	8b cb		 mov	 ecx, ebx
  0009f	d9 5d ec	 fstp	 DWORD PTR $T523800[ebp+8]
  000a2	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  000a7	8d 4d e4	 lea	 ecx, DWORD PTR $T523800[ebp]
  000aa	51		 push	 ecx
  000ab	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  000b0	50		 push	 eax
  000b1	8d 45 d8	 lea	 eax, DWORD PTR $T523801[ebp]
  000b4	50		 push	 eax
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000bb	8b f0		 mov	 esi, eax
  000bd	8d bb 98 08 00
	00		 lea	 edi, DWORD PTR [ebx+2200]
  000c3	a5		 movsd
  000c4	a5		 movsd
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 69   : 	SetOrientation( GetOwner()->GetTargetRot() );

  000c8	8b cb		 mov	 ecx, ebx
  000ca	a5		 movsd
  000cb	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  000d0	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  000d5	50		 push	 eax
  000d6	8b cb		 mov	 ecx, ebx
  000d8	e8 00 00 00 00	 call	 ?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z ; ioWeapon::SetOrientation
$LN2@SetStartPo:

; 70   : }

  000dd	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000e2	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z$0:
  00000	8b 45 d0	 mov	 eax, DWORD PTR $T524467[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0d 00 00
	00		 je	 $LN7@SetStartPo
  0000c	83 65 d0 fe	 and	 DWORD PTR $T524467[ebp], -2 ; fffffffeH
  00010	8d 4d c0	 lea	 ecx, DWORD PTR $T524464[ebp]
  00013	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN7@SetStartPo:
  00019	c3		 ret	 0
__ehhandler$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z:
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetStartPosition@ioLimitAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ENDP ; ioLimitAttachWeapon::SetStartPosition
EXTRN	__imp_?SetNull@ioOrientBox@@QAEXXZ:PROC
EXTRN	__imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z:PROC
EXTRN	?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ:PROC	; ioWeapon::GetScale
EXTRN	__imp_?IsNull@ioOrientBox@@QBE_NXZ:PROC
EXTRN	__imp_?SetExtents@ioOrientBox@@QAEXHM@Z:PROC
EXTRN	__imp_?GetExtents@ioOrientBox@@QBEMH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?UpdateWorldAttackBox@ioLimitAttachWeapon@@MAEXM_N@Z
_TEXT	SEGMENT
tv359 = -8						; size = 4
tv365 = -4						; size = 4
tv341 = -4						; size = 4
_fTimePerSec$ = 8					; size = 4
tv351 = 12						; size = 4
_fMapCollisionRate$ = 12				; size = 4
_bSetNull$ = 12						; size = 1
?UpdateWorldAttackBox@ioLimitAttachWeapon@@MAEXM_N@Z PROC ; ioLimitAttachWeapon::UpdateWorldAttackBox, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	8b d9		 mov	 ebx, ecx

; 155  : 	if( !IsLive() || bSetNull )

  00008	80 bb 82 05 00
	00 00		 cmp	 BYTE PTR [ebx+1410], 0
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	0f 84 0c 01 00
	00		 je	 $LN2@UpdateWorl
  00017	80 7d 0c 00	 cmp	 BYTE PTR _bSetNull$[ebp], 0
  0001b	0f 85 02 01 00
	00		 jne	 $LN2@UpdateWorl

; 159  : 		return;
; 160  : 	}
; 161  : 
; 162  : 	m_WorldAttackBox = GetLocalAttackBox();

  00021	8b 03		 mov	 eax, DWORD PTR [ebx]
  00023	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00029	6a 11		 push	 17			; 00000011H
  0002b	8b f0		 mov	 esi, eax

; 163  : 
; 164  : 	float fMapCollisionRate = GetAttribute()->m_fMapCollisionBoxRate;

  0002d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002f	59		 pop	 ecx
  00030	8d bb e8 04 00
	00		 lea	 edi, DWORD PTR [ebx+1256]
  00036	f3 a5		 rep movsd
  00038	8b cb		 mov	 ecx, ebx
  0003a	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]

; 165  : 	m_WorldAttackBoxForMap = m_WorldAttackBox;

  00040	6a 11		 push	 17			; 00000011H
  00042	d9 80 a8 01 00
	00		 fld	 DWORD PTR [eax+424]
  00048	59		 pop	 ecx
  00049	8d bb 2c 05 00
	00		 lea	 edi, DWORD PTR [ebx+1324]
  0004f	d9 5d 0c	 fstp	 DWORD PTR _fMapCollisionRate$[ebp]
  00052	8d b3 e8 04 00
	00		 lea	 esi, DWORD PTR [ebx+1256]
  00058	f3 a5		 rep movsd

; 166  : 	m_WorldAttackBoxForMap.SetExtents( 0, m_WorldAttackBox.GetExtents(0)*fMapCollisionRate );

  0005a	6a 00		 push	 0
  0005c	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  00068	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetExtents@ioOrientBox@@QAEXHM@Z
  0006e	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  00071	51		 push	 ecx
  00072	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  00078	d9 5d fc	 fstp	 DWORD PTR tv365[ebp]
  0007b	d9 45 fc	 fld	 DWORD PTR tv365[ebp]
  0007e	89 4d fc	 mov	 DWORD PTR tv341[ebp], ecx
  00081	d9 1c 24	 fstp	 DWORD PTR [esp]
  00084	6a 00		 push	 0
  00086	ff d6		 call	 esi

; 167  : 	m_WorldAttackBoxForMap.SetExtents( 1, m_WorldAttackBox.GetExtents(1)*fMapCollisionRate );

  00088	6a 01		 push	 1
  0008a	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  00096	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  00099	51		 push	 ecx
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR tv341[ebp]
  0009d	d9 5d f8	 fstp	 DWORD PTR tv359[ebp]
  000a0	d9 45 f8	 fld	 DWORD PTR tv359[ebp]
  000a3	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a6	6a 01		 push	 1
  000a8	ff d6		 call	 esi

; 168  : 	m_WorldAttackBoxForMap.SetExtents( 2, m_WorldAttackBox.GetExtents(2)*fMapCollisionRate );

  000aa	6a 02		 push	 2
  000ac	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  000b8	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  000bb	51		 push	 ecx
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR tv341[ebp]
  000bf	d9 5d 0c	 fstp	 DWORD PTR tv351[ebp]
  000c2	d9 45 0c	 fld	 DWORD PTR tv351[ebp]
  000c5	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c8	6a 02		 push	 2
  000ca	ff d6		 call	 esi

; 169  : 
; 170  : 	if( !m_WorldAttackBox.IsNull() )

  000cc	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsNull@ioOrientBox@@QBE_NXZ
  000d8	84 c0		 test	 al, al
  000da	75 5d		 jne	 SHORT $LN1@UpdateWorl

; 171  : 	{
; 172  : 		m_WorldAttackBox.Transform( GetPosition(),
; 173  : 									GetScale(),
; 174  : 									GetParentSceneNode()->GetDerivedOrientation() );

  000dc	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000df	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e1	ff 50 78	 call	 DWORD PTR [eax+120]
  000e4	50		 push	 eax
  000e5	8b cb		 mov	 ecx, ebx
  000e7	e8 00 00 00 00	 call	 ?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ ; ioWeapon::GetScale
  000ec	50		 push	 eax
  000ed	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ef	8b cb		 mov	 ecx, ebx
  000f1	ff 50 70	 call	 DWORD PTR [eax+112]
  000f4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z
  000fa	50		 push	 eax
  000fb	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00101	ff d6		 call	 esi

; 175  : 
; 176  : 		m_WorldAttackBoxForMap.Transform( GetPosition(),
; 177  : 										  GetScale(),
; 178  : 										  GetParentSceneNode()->GetDerivedOrientation() );

  00103	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00106	8b 01		 mov	 eax, DWORD PTR [ecx]
  00108	ff 50 78	 call	 DWORD PTR [eax+120]
  0010b	50		 push	 eax
  0010c	8b cb		 mov	 ecx, ebx
  0010e	e8 00 00 00 00	 call	 ?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ ; ioWeapon::GetScale
  00113	50		 push	 eax
  00114	8b 03		 mov	 eax, DWORD PTR [ebx]
  00116	8b cb		 mov	 ecx, ebx
  00118	ff 50 70	 call	 DWORD PTR [eax+112]
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR tv341[ebp]
  0011e	50		 push	 eax
  0011f	ff d6		 call	 esi
  00121	eb 16		 jmp	 SHORT $LN1@UpdateWorl
$LN2@UpdateWorl:

; 156  : 	{
; 157  : 		m_WorldAttackBox.SetNull();

  00123	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetNull@ioOrientBox@@QAEXXZ
  00129	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  0012f	ff d6		 call	 esi

; 158  : 		m_WorldAttackBoxForMap.SetNull();

  00131	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  00137	ff d6		 call	 esi
$LN1@UpdateWorl:
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx

; 179  : 	}
; 180  : }

  0013c	c9		 leave
  0013d	c2 08 00	 ret	 8
?UpdateWorldAttackBox@ioLimitAttachWeapon@@MAEXM_N@Z ENDP ; ioLimitAttachWeapon::UpdateWorldAttackBox
_TEXT	ENDS
PUBLIC	_bMapCollision$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z:PROC ; ioWeapon::GetWorldAttackBox
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?IsCollision@ioLimitAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z
_TEXT	SEGMENT
_bMapCollision$GSCopy$ = -24				; size = 1
_bCollision$ = -20					; size = 1
_vColPoint$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pEntity$ = 8						; size = 4
_bMapCollision$ = 12					; size = 1
?IsCollision@ioLimitAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z PROC ; ioLimitAttachWeapon::IsCollision, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 195  : 	bool bCollision = false;
; 196  : 
; 197  : 	D3DXVECTOR3 vColPoint( 0.0f, 0.0f, 0.0f );
; 198  : 	if( pEntity->IsWoundedCollision( GetWorldAttackBox(bMapCollision), &vColPoint ) )

  00010	8a 45 0c	 mov	 al, BYTE PTR _bMapCollision$[ebp]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _pEntity$[ebp]
  0001b	57		 push	 edi
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	88 45 e8	 mov	 BYTE PTR _bMapCollision$GSCopy$[ebp], al
  00021	8d 45 f0	 lea	 eax, DWORD PTR _vColPoint$[ebp]
  00024	50		 push	 eax
  00025	ff 75 e8	 push	 DWORD PTR _bMapCollision$GSCopy$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	c6 45 ec 00	 mov	 BYTE PTR _bCollision$[ebp], 0
  0002e	f3 0f 11 45 f0	 movss	 DWORD PTR _vColPoint$[ebp], xmm0
  00033	f3 0f 11 45 f4	 movss	 DWORD PTR _vColPoint$[ebp+4], xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _vColPoint$[ebp+8], xmm0
  0003d	e8 00 00 00 00	 call	 ?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z ; ioWeapon::GetWorldAttackBox
  00042	50		 push	 eax
  00043	8b ce		 mov	 ecx, esi
  00045	ff 97 90 00 00
	00		 call	 DWORD PTR [edi+144]
  0004b	84 c0		 test	 al, al
  0004d	74 04		 je	 SHORT $LN1@IsCollisio

; 199  : 		bCollision = true;

  0004f	c6 45 ec 01	 mov	 BYTE PTR _bCollision$[ebp], 1
$LN1@IsCollisio:

; 200  : 
; 201  : 	CheckPiercing( bCollision );

  00053	ff 75 ec	 push	 DWORD PTR _bCollision$[ebp]
  00056	8b 03		 mov	 eax, DWORD PTR [ebx]
  00058	8b cb		 mov	 ecx, ebx
  0005a	ff 90 48 01 00
	00		 call	 DWORD PTR [eax+328]

; 202  : 
; 203  : 	return bCollision;
; 204  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	8a 45 ec	 mov	 al, BYTE PTR _bCollision$[ebp]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	33 cd		 xor	 ecx, ebp
  0006a	5b		 pop	 ebx
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	c9		 leave
  00071	c2 08 00	 ret	 8
?IsCollision@ioLimitAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z ENDP ; ioLimitAttachWeapon::IsCollision
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon::UpdateCurPosition
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z:PROC
EXTRN	__imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z:PROC
EXTRN	__imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
xdata$x	SEGMENT
__unwindtable$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z$1
__ehfuncinfo$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon.cpp
xdata$x	ENDS
;	COMDAT ?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_qtLinkRotOffset$ = -100				; size = 16
_szLinkBiped$ = -84					; size = 16
_this$GSCopy$ = -68					; size = 4
$T524534 = -64						; size = 4
$T524529 = -57						; size = 1
$T524530 = -56						; size = 16
$T523882 = -52						; size = 12
_vLinkPosOffset$ = -40					; size = 12
$T523883 = -28						; size = 12
$T523881 = -28						; size = 12
$T523880 = -28						; size = 12
$T523879 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z PROC ; ioLimitAttachWeapon::UpdateCurPosition, COMDAT
; _this$ = ecx

; 207  : {

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]

; 226  : 	{
; 227  : 		SetPosition( pOwner->GetWorldPosition() );

  0000f	33 f6		 xor	 esi, esi
  00011	8b f9		 mov	 edi, ecx
  00013	89 7d bc	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00016	89 75 c0	 mov	 DWORD PTR $T524534[ebp], esi
  00019	3b de		 cmp	 ebx, esi
  0001b	0f 84 d5 01 00
	00		 je	 $LN4@UpdateCurP

; 208  : 	if( !pOwner || !m_pFireBall ) return;

  00021	39 b7 94 08 00
	00		 cmp	 DWORD PTR [edi+2196], esi
  00027	0f 84 c9 01 00
	00		 je	 $LN4@UpdateCurP

; 209  : 
; 210  : 	ioHashString szLinkBiped;

  0002d	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 211  : 	D3DXVECTOR3 vLinkPosOffset;
; 212  : 	D3DXQUATERNION qtLinkRotOffset;
; 213  : 
; 214  : 	if( m_pFireBall->GetSkeletonName().IsEmpty() && m_pFireBall->GetFirstLinkOffset(szLinkBiped, vLinkPosOffset, qtLinkRotOffset ) )

  00036	8b 8f 94 08 00
	00		 mov	 ecx, DWORD PTR [edi+2196]
  0003c	8d 45 c8	 lea	 eax, DWORD PTR $T524530[ebp]
  0003f	50		 push	 eax
  00040	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ
  00049	8b c8		 mov	 ecx, eax
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004f	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR $T524534[ebp], 1
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0005c	84 c0		 test	 al, al
  0005e	74 20		 je	 SHORT $LN8@UpdateCurP
  00060	8b 8f 94 08 00
	00		 mov	 ecx, DWORD PTR [edi+2196]
  00066	8d 45 9c	 lea	 eax, DWORD PTR _qtLinkRotOffset$[ebp]
  00069	50		 push	 eax
  0006a	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  0006d	50		 push	 eax
  0006e	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z
  00078	c6 45 c7 01	 mov	 BYTE PTR $T524529[ebp], 1
  0007c	84 c0		 test	 al, al
  0007e	75 04		 jne	 SHORT $LN9@UpdateCurP
$LN8@UpdateCurP:
  00080	c6 45 c7 00	 mov	 BYTE PTR $T524529[ebp], 0
$LN9@UpdateCurP:
  00084	8d 4d c8	 lea	 ecx, DWORD PTR $T524530[ebp]
  00087	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00090	80 7d c7 00	 cmp	 BYTE PTR $T524529[ebp], 0
  00094	0f 84 40 01 00
	00		 je	 $LN3@UpdateCurP

; 215  : 	{
; 216  : 		ioBiped *pLinked = pOwner->GetGroup()->GetBiped( szLinkBiped );

  0009a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0009d	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z
  000a7	8b f8		 mov	 edi, eax

; 217  : 		if( pLinked )

  000a9	3b fe		 cmp	 edi, esi
  000ab	0f 84 38 01 00
	00		 je	 $LN1@UpdateCurP

; 218  : 		{
; 219  : 			vLinkPosOffset = pLinked->GetDerivedOrientation() * vLinkPosOffset + pLinked->GetDerivedPosition();

  000b1	8b 07		 mov	 eax, DWORD PTR [edi]
  000b3	8b cf		 mov	 ecx, edi
  000b5	ff 50 7c	 call	 DWORD PTR [eax+124]
  000b8	8b f0		 mov	 esi, eax
  000ba	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  000bd	50		 push	 eax
  000be	8b 07		 mov	 eax, DWORD PTR [edi]
  000c0	8b cf		 mov	 ecx, edi
  000c2	ff 50 78	 call	 DWORD PTR [eax+120]
  000c5	50		 push	 eax
  000c6	8d 45 e4	 lea	 eax, DWORD PTR $T523879[ebp]
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000d0	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000d4	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  000d8	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  000dd	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 220  : 			vLinkPosOffset = vLinkPosOffset * pOwner->GetWorldScale();

  000e2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000e4	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ea	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000ee	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  000f3	0f 5a d2	 cvtps2pd xmm2, xmm2
  000f6	0f 5a c9	 cvtps2pd xmm1, xmm1
  000f9	f2 0f 58 ca	 addsd	 xmm1, xmm2
  000fd	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00102	0f 5a d2	 cvtps2pd xmm2, xmm2
  00105	0f 5a db	 cvtps2pd xmm3, xmm3
  00108	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0010c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00110	f3 0f 11 45 e4	 movss	 DWORD PTR $T523880[ebp], xmm0
  00115	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00119	f3 0f 11 4d e8	 movss	 DWORD PTR $T523880[ebp+4], xmm1
  0011e	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00122	f3 0f 11 55 ec	 movss	 DWORD PTR $T523880[ebp+8], xmm2
  00127	8d 75 e4	 lea	 esi, DWORD PTR $T523880[ebp]
  0012a	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  0012d	a5		 movsd
  0012e	a5		 movsd
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00132	8b cb		 mov	 ecx, ebx
  00134	a5		 movsd
  00135	ff 50 78	 call	 DWORD PTR [eax+120]
  00138	50		 push	 eax
  00139	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  0013c	50		 push	 eax
  0013d	8d 45 e4	 lea	 eax, DWORD PTR $T523881[ebp]
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z
  00147	8b f0		 mov	 esi, eax

; 221  : 			vLinkPosOffset = pOwner->GetWorldOrientation() * vLinkPosOffset + pOwner->GetWorldPosition();

  00149	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014b	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  0014e	a5		 movsd
  0014f	a5		 movsd
  00150	83 c4 0c	 add	 esp, 12			; 0000000cH
  00153	8b cb		 mov	 ecx, ebx
  00155	a5		 movsd
  00156	ff 50 70	 call	 DWORD PTR [eax+112]
  00159	8b f0		 mov	 esi, eax
  0015b	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  0015e	50		 push	 eax
  0015f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00161	8b cb		 mov	 ecx, ebx
  00163	ff 50 74	 call	 DWORD PTR [eax+116]
  00166	50		 push	 eax
  00167	8d 45 cc	 lea	 eax, DWORD PTR $T523882[ebp]
  0016a	50		 push	 eax
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00171	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00175	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00179	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0017e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00181	0f 5a c0	 cvtps2pd xmm0, xmm0
  00184	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00188	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0018d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00190	0f 5a d2	 cvtps2pd xmm2, xmm2
  00193	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0019e	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001a2	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  001a7	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 222  : 			SetPosition( vLinkPosOffset );

  001ac	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001af	0f 5a d2	 cvtps2pd xmm2, xmm2
  001b2	0f 5a db	 cvtps2pd xmm3, xmm3
  001b5	f2 0f 58 d3	 addsd	 xmm2, xmm3
  001b9	f3 0f 11 45 e4	 movss	 DWORD PTR $T523883[ebp], xmm0
  001be	f3 0f 11 4d e8	 movss	 DWORD PTR $T523883[ebp+4], xmm1
  001c3	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001c7	f3 0f 11 55 ec	 movss	 DWORD PTR $T523883[ebp+8], xmm2
  001cc	8d 75 e4	 lea	 esi, DWORD PTR $T523883[ebp]
  001cf	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  001d2	a5		 movsd
  001d3	a5		 movsd
  001d4	a5		 movsd
  001d5	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]

; 223  : 		}
; 224  : 	}
; 225  : 	else

  001d8	eb 09		 jmp	 SHORT $LN29@UpdateCurP
$LN3@UpdateCurP:

; 226  : 	{
; 227  : 		SetPosition( pOwner->GetWorldPosition() );

  001da	8b 03		 mov	 eax, DWORD PTR [ebx]
  001dc	8b cb		 mov	 ecx, ebx
  001de	ff 50 70	 call	 DWORD PTR [eax+112]
  001e1	8b cf		 mov	 ecx, edi
$LN29@UpdateCurP:
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
$LN1@UpdateCurP:

; 228  : 	}
; 229  : }

  001e9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001ed	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN4@UpdateCurP:
  001f6	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001fb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z$1:
  00009	8b 45 c0	 mov	 eax, DWORD PTR $T524534[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $LN12@UpdateCurP
  00015	83 65 c0 fe	 and	 DWORD PTR $T524534[ebp], -2 ; fffffffeH
  00019	8d 4d c8	 lea	 ecx, DWORD PTR $T524530[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN12@UpdateCurP:
  00022	c3		 ret	 0
__ehhandler$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z ENDP ; ioLimitAttachWeapon::UpdateCurPosition
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z	; ioINILoader::LoadInt_e<10>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z PROC	; ioINILoader::LoadInt_e<10>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@LoadInt_e
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@LoadInt_e
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@LoadInt_e
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@LoadInt_e
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@LoadInt_e
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@LoadInt_e
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@LoadInt_e
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@LoadInt_e
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@LoadInt_e
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@LoadInt_e:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00144	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00147	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z:PROC ; ioWeapon::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon.cpp
;	COMDAT ?LoadProperty@ioLimitAttachWeapon@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$524634 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioLimitAttachWeapon@@UAEXAAVioINILoader@@@Z PROC ; ioLimitAttachWeapon::LoadProperty, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00014	57		 push	 edi

; 41   : 	ioWeapon::LoadProperty( rkLoader );

  00015	56		 push	 esi
  00016	8b f9		 mov	 edi, ecx
  00018	e8 00 00 00 00	 call	 ?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z ; ioWeapon::LoadProperty

; 42   : 
; 43   : 	m_dwLiveTime = rkLoader.LoadInt_e( "live_time", 0 );

  0001d	6a 02		 push	 2
  0001f	c7 45 ec 81 85
	9d 8f		 mov	 DWORD PTR __k$524634[ebp], -1885502079 ; 8f9d8581H
  00026	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$524634[ebp+4], -2021484366 ; 878298b2H
  0002d	8d 45 ec	 lea	 eax, DWORD PTR __k$524634[ebp]
  00030	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$524634[ebp+8], 136 ; 00000088H
  00036	59		 pop	 ecx
$LL106@LoadProper:
  00037	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003d	83 c0 04	 add	 eax, 4
  00040	49		 dec	 ecx
  00041	75 f4		 jne	 SHORT $LL106@LoadProper
  00043	80 75 f4 ed	 xor	 BYTE PTR __k$524634[ebp+8], -19 ; ffffffedH
  00047	51		 push	 ecx
  00048	8d 45 ec	 lea	 eax, DWORD PTR __k$524634[ebp]
  0004b	50		 push	 eax
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 44   : }

  00054	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00057	89 87 d8 04 00
	00		 mov	 DWORD PTR [edi+1240], eax
  0005d	5f		 pop	 edi
  0005e	33 cd		 xor	 ecx, ebp
  00060	5e		 pop	 esi
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	c9		 leave
  00067	c2 04 00	 ret	 4
?LoadProperty@ioLimitAttachWeapon@@UAEXAAVioINILoader@@@Z ENDP ; ioLimitAttachWeapon::LoadProperty
_TEXT	ENDS
PUBLIC	?CreateFireBall@ioLimitAttachWeapon@@IAE_NABVioHashString@@@Z ; ioLimitAttachWeapon::CreateFireBall
EXTRN	__imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?CreateFireBall@ioLimitAttachWeapon@@IAE_NABVioHashString@@@Z
_TEXT	SEGMENT
_szFileName$ = 8					; size = 4
?CreateFireBall@ioLimitAttachWeapon@@IAE_NABVioHashString@@@Z PROC ; ioLimitAttachWeapon::CreateFireBall, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 48   : 	ioBaseChar *pOwner = GetOwner();

  00007	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  0000c	8b f8		 mov	 edi, eax

; 49   : 	if( !pOwner )	return false;

  0000e	85 ff		 test	 edi, edi
  00010	75 04		 jne	 SHORT $LN2@CreateFire
$LN9@CreateFire:
  00012	32 c0		 xor	 al, al
  00014	eb 44		 jmp	 SHORT $LN3@CreateFire
$LN2@CreateFire:

; 50   : 
; 51   : 	m_pFireBall = g_EffectFactory.CreateEffect( szFileName );

  00016	ff 75 08	 push	 DWORD PTR _szFileName$[ebp]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  0001f	8b c8		 mov	 ecx, eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z
  00027	89 86 94 08 00
	00		 mov	 DWORD PTR [esi+2196], eax

; 52   : 	if( !m_pFireBall )	return false;

  0002d	85 c0		 test	 eax, eax
  0002f	74 e1		 je	 SHORT $LN9@CreateFire

; 53   : 
; 54   : 	GetParentSceneNode()->AttachObject( m_pFireBall );

  00031	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	83 c0 14	 add	 eax, 20			; 00000014H
  00039	50		 push	 eax
  0003a	ff 92 ac 00 00
	00		 call	 DWORD PTR [edx+172]

; 55   : 	UpdateCurPosition( pOwner );

  00040	57		 push	 edi
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon::UpdateCurPosition

; 56   : 
; 57   : 	AddEffectEvent( m_pFireBall );

  00048	ff b6 94 08 00
	00		 push	 DWORD PTR [esi+2196]
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b ce		 mov	 ecx, esi
  00052	ff 90 68 01 00
	00		 call	 DWORD PTR [eax+360]

; 58   : 	return true;

  00058	b0 01		 mov	 al, 1
$LN3@CreateFire:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 59   : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?CreateFireBall@ioLimitAttachWeapon@@IAE_NABVioHashString@@@Z ENDP ; ioLimitAttachWeapon::CreateFireBall
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?HasBuff@ioBaseChar@@QBE_NABVioHashString@@@Z:PROC ; ioBaseChar::HasBuff
EXTRN	?CheckOnlyDownAttack@ioWeapon@@QAEXPAVioBaseChar@@@Z:PROC ; ioWeapon::CheckOnlyDownAttack
; Function compile flags: /Ogsp
;	COMDAT ?Process@ioLimitAttachWeapon@@UAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
tv348 = -32						; size = 4
tv328 = -32						; size = 4
tv325 = -32						; size = 4
$T523816 = -28						; size = 12
$T523815 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?Process@ioLimitAttachWeapon@@UAEXMPAVioPlayStage@@@Z PROC ; ioLimitAttachWeapon::Process, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 74   : 	if( !CheckPiercing() )

  00013	8b 03		 mov	 eax, DWORD PTR [ebx]
  00015	6a 00		 push	 0
  00017	ff 90 48 01 00
	00		 call	 DWORD PTR [eax+328]
  0001d	84 c0		 test	 al, al
  0001f	0f 84 4f 01 00
	00		 je	 $LN1@Process

; 75   : 		return;
; 76   : 
; 77   : 	ioBaseChar *pOwner = GetOwner();

  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	8b cb		 mov	 ecx, ebx
  00029	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  0002e	8b f8		 mov	 edi, eax

; 78   : 	if( !pOwner )

  00030	85 ff		 test	 edi, edi
  00032	75 1e		 jne	 SHORT $LN6@Process

; 79   : 	{
; 80   : 		UpdateWorldAttackBox( fTimePerSec, true );

  00034	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00039	8b 03		 mov	 eax, DWORD PTR [ebx]
  0003b	6a 01		 push	 1
  0003d	51		 push	 ecx
  0003e	8b cb		 mov	 ecx, ebx
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 81   : 		SetWeaponDead();

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	8b cb		 mov	 ecx, ebx
  0004f	ff 50 4c	 call	 DWORD PTR [eax+76]
$LN6@Process:

; 82   : 	}
; 83   : 
; 84   : 	CheckOnlyDownAttack( pOwner );

  00052	57		 push	 edi
  00053	8b cb		 mov	 ecx, ebx
  00055	e8 00 00 00 00	 call	 ?CheckOnlyDownAttack@ioWeapon@@QAEXPAVioBaseChar@@@Z ; ioWeapon::CheckOnlyDownAttack

; 85   : 
; 86   : 	if( !m_CreateBuffName.IsEmpty() )

  0005a	8d b3 60 06 00
	00		 lea	 esi, DWORD PTR [ebx+1632]
  00060	8b ce		 mov	 ecx, esi
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00068	84 c0		 test	 al, al
  0006a	75 0e		 jne	 SHORT $LN5@Process

; 87   : 	{
; 88   : 		if( !pOwner->HasBuff( m_CreateBuffName ) )

  0006c	56		 push	 esi
  0006d	8b cf		 mov	 ecx, edi
  0006f	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@@Z ; ioBaseChar::HasBuff
  00074	84 c0		 test	 al, al
  00076	75 3e		 jne	 SHORT $LN2@Process

; 89   : 		{
; 90   : 			UpdateWorldAttackBox( fTimePerSec, true );
; 91   : 			SetWeaponDead();
; 92   : 		}
; 93   : 	}
; 94   : 	else

  00078	eb 1e		 jmp	 SHORT $LN22@Process
$LN5@Process:

; 95   : 	{
; 96   : 		if( m_dwCreatedTime + m_dwLiveTime < FRAMEGETTIME() )

  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00080	8b c8		 mov	 ecx, eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00088	8b 8b d8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1240]
  0008e	03 8b d4 04 00
	00		 add	 ecx, DWORD PTR [ebx+1236]
  00094	3b c8		 cmp	 ecx, eax
  00096	73 1e		 jae	 SHORT $LN2@Process
$LN22@Process:

; 97   : 		{
; 98   : 			UpdateWorldAttackBox( fTimePerSec, true );

  00098	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0009d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009f	6a 01		 push	 1
  000a1	51		 push	 ecx
  000a2	8b cb		 mov	 ecx, ebx
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 99   : 			SetWeaponDead();

  000af	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b1	8b cb		 mov	 ecx, ebx
  000b3	ff 50 4c	 call	 DWORD PTR [eax+76]
$LN2@Process:

; 100  : 		}
; 101  : 	}
; 102  : 
; 103  : 	UpdateCurPosition( pOwner );

  000b6	57		 push	 edi
  000b7	8b cb		 mov	 ecx, ebx
  000b9	e8 00 00 00 00	 call	 ?UpdateCurPosition@ioLimitAttachWeapon@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon::UpdateCurPosition

; 104  : 
; 105  : 	m_vMoveDir = GetOwner()->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	0f 57 c0	 xorps	 xmm0, xmm0
  000c6	89 45 e0	 mov	 DWORD PTR tv348[ebp], eax
  000c9	db 45 e0	 fild	 DWORD PTR tv348[ebp]
  000cc	f3 0f 11 45 f0	 movss	 DWORD PTR $T523815[ebp], xmm0
  000d1	f3 0f 11 45 f4	 movss	 DWORD PTR $T523815[ebp+4], xmm0
  000d6	85 c0		 test	 eax, eax
  000d8	79 06		 jns	 SHORT $LN20@Process
  000da	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN20@Process:
  000e0	d9 e0		 fchs
  000e2	8b cb		 mov	 ecx, ebx
  000e4	d9 5d f8	 fstp	 DWORD PTR $T523815[ebp+8]
  000e7	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  000ec	8d 4d f0	 lea	 ecx, DWORD PTR $T523815[ebp]
  000ef	51		 push	 ecx
  000f0	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  000f5	50		 push	 eax
  000f6	8d 45 e4	 lea	 eax, DWORD PTR $T523816[ebp]
  000f9	50		 push	 eax
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00100	8b f0		 mov	 esi, eax
  00102	8d bb 98 08 00
	00		 lea	 edi, DWORD PTR [ebx+2200]
  00108	a5		 movsd
  00109	a5		 movsd
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	SetOrientation( GetOwner()->GetTargetRot() );

  0010d	8b cb		 mov	 ecx, ebx
  0010f	a5		 movsd
  00110	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  00115	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  0011a	50		 push	 eax
  0011b	8b cb		 mov	 ecx, ebx
  0011d	e8 00 00 00 00	 call	 ?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z ; ioWeapon::SetOrientation

; 107  : 
; 108  : 	UpdateWorldAttackBox( fTimePerSec, false );

  00122	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00127	8b 03		 mov	 eax, DWORD PTR [ebx]
  00129	6a 00		 push	 0
  0012b	51		 push	 ecx
  0012c	8b cb		 mov	 ecx, ebx
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 109  : 
; 110  : 	if( m_pFireBall )

  00139	83 bb 94 08 00
	00 00		 cmp	 DWORD PTR [ebx+2196], 0
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	74 30		 je	 SHORT $LN1@Process

; 111  : 	{
; 112  : 		m_pFireBall->Update( fTimePerSec * FLOAT1000 );

  00144	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00149	8b 8b 94 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2196]
  0014f	83 c1 14	 add	 ecx, 20			; 00000014H
  00152	8b 11		 mov	 edx, DWORD PTR [ecx]
  00154	89 45 e0	 mov	 DWORD PTR tv328[ebp], eax
  00157	db 45 e0	 fild	 DWORD PTR tv328[ebp]
  0015a	85 c0		 test	 eax, eax
  0015c	79 06		 jns	 SHORT $LN21@Process
  0015e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN21@Process:
  00164	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]
  00167	51		 push	 ecx
  00168	d9 5d e0	 fstp	 DWORD PTR tv325[ebp]
  0016b	d9 45 e0	 fld	 DWORD PTR tv325[ebp]
  0016e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00171	ff 52 40	 call	 DWORD PTR [edx+64]
$LN1@Process:

; 113  : 	}
; 114  : }

  00174	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	5b		 pop	 ebx
  0017a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017f	c9		 leave
  00180	c2 08 00	 ret	 8
?Process@ioLimitAttachWeapon@@UAEXMPAVioPlayStage@@@Z ENDP ; ioLimitAttachWeapon::Process
_TEXT	ENDS
EXTRN	?InitResource@ioWeapon@@UAE_NXZ:PROC		; ioWeapon::InitResource
; Function compile flags: /Ogsp
;	COMDAT ?InitResource@ioLimitAttachWeapon@@UAE_NXZ
_TEXT	SEGMENT
?InitResource@ioLimitAttachWeapon@@UAE_NXZ PROC		; ioLimitAttachWeapon::InitResource, COMDAT
; _this$ = ecx

; 29   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 30   : 	if( ioWeapon::InitResource() )

  00003	e8 00 00 00 00	 call	 ?InitResource@ioWeapon@@UAE_NXZ ; ioWeapon::InitResource
  00008	84 c0		 test	 al, al
  0000a	74 25		 je	 SHORT $LN1@InitResour

; 31   : 	{
; 32   : 		DestroyResource();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	6a 00		 push	 0
  00010	8b ce		 mov	 ecx, esi
  00012	ff 90 9c 00 00
	00		 call	 DWORD PTR [eax+156]

; 33   : 		return CreateFireBall( GetAttribute()->m_WeaponEffect );

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  00022	05 34 01 00 00	 add	 eax, 308		; 00000134H
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?CreateFireBall@ioLimitAttachWeapon@@IAE_NABVioHashString@@@Z ; ioLimitAttachWeapon::CreateFireBall
  0002f	5e		 pop	 esi

; 37   : }

  00030	c3		 ret	 0
$LN1@InitResour:

; 34   : 	}
; 35   : 
; 36   : 	return false;

  00031	32 c0		 xor	 al, al
  00033	5e		 pop	 esi

; 37   : }

  00034	c3		 ret	 0
?InitResource@ioLimitAttachWeapon@@UAE_NXZ ENDP		; ioLimitAttachWeapon::InitResource
_TEXT	ENDS
END
