; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioCallBuffOnAttackBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7ioCallBuffOnAttackBuff@@6B@			; ioCallBuffOnAttackBuff::`vftable'
PUBLIC	??0ioCallBuffOnAttackBuff@@QAE@XZ		; ioCallBuffOnAttackBuff::ioCallBuffOnAttackBuff
PUBLIC	??_R4ioCallBuffOnAttackBuff@@6B@		; ioCallBuffOnAttackBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioCallBuffOnAttackBuff@@@8		; ioCallBuffOnAttackBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioCallBuffOnAttackBuff@@8			; ioCallBuffOnAttackBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioCallBuffOnAttackBuff@@8			; ioCallBuffOnAttackBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioCallBuffOnAttackBuff@@8		; ioCallBuffOnAttackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioCallBuffOnAttackBuff@@UAEXAAVioINILoader@@@Z ; ioCallBuffOnAttackBuff::LoadProperty
PUBLIC	?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ	; ioCallBuffOnAttackBuff::Clone
PUBLIC	?StartBuff@ioCallBuffOnAttackBuff@@UAEXPAVioBaseChar@@@Z ; ioCallBuffOnAttackBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioCallBuffOnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioCallBuffOnAttackBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioCallBuffOnAttackBuff@@UAEXM@Z	; ioCallBuffOnAttackBuff::ProcessBuff
PUBLIC	?EndBuff@ioCallBuffOnAttackBuff@@UAEXXZ		; ioCallBuffOnAttackBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioCallBuffOnAttackBuff@@UAEPAXI@Z:PROC	; ioCallBuffOnAttackBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocallbuffonattackbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioCallBuffOnAttackBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioCallBuffOnAttackBuff@@8 DD FLAT:??_R0?AVioCallBuffOnAttackBuff@@@8 ; ioCallBuffOnAttackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioCallBuffOnAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioCallBuffOnAttackBuff@@8
rdata$r	SEGMENT
??_R2ioCallBuffOnAttackBuff@@8 DD FLAT:??_R1A@?0A@EA@ioCallBuffOnAttackBuff@@8 ; ioCallBuffOnAttackBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioCallBuffOnAttackBuff@@8
rdata$r	SEGMENT
??_R3ioCallBuffOnAttackBuff@@8 DD 00H			; ioCallBuffOnAttackBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioCallBuffOnAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioCallBuffOnAttackBuff@@@8
_DATA	SEGMENT
??_R0?AVioCallBuffOnAttackBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioCallBuffOnAttackBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioCallBuffOnAttackBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioCallBuffOnAttackBuff@@6B@
rdata$r	SEGMENT
??_R4ioCallBuffOnAttackBuff@@6B@ DD 00H			; ioCallBuffOnAttackBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioCallBuffOnAttackBuff@@@8
	DD	FLAT:??_R3ioCallBuffOnAttackBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioCallBuffOnAttackBuff@@6B@
CONST	SEGMENT
??_7ioCallBuffOnAttackBuff@@6B@ DD FLAT:??_R4ioCallBuffOnAttackBuff@@6B@ ; ioCallBuffOnAttackBuff::`vftable'
	DD	FLAT:?LoadProperty@ioCallBuffOnAttackBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioCallBuffOnAttackBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioCallBuffOnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioCallBuffOnAttackBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioCallBuffOnAttackBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioCallBuffOnAttackBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioCallBuffOnAttackBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCallBuffOnAttackBuff@@QAE@XZ$0
__ehfuncinfo$??0ioCallBuffOnAttackBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioCallBuffOnAttackBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCallBuffOnAttackBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioCallBuffOnAttackBuff@@QAE@XZ PROC			; ioCallBuffOnAttackBuff::ioCallBuffOnAttackBuff, COMDAT
; _this$ = ecx

; 9    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCallBuffOnAttackBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCallBuffOnAttackBuff@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 10   : }

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCallBuffOnAttackBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioCallBuffOnAttackBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCallBuffOnAttackBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCallBuffOnAttackBuff@@QAE@XZ ENDP			; ioCallBuffOnAttackBuff::ioCallBuffOnAttackBuff
PUBLIC	??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z		; ioCallBuffOnAttackBuff::ioCallBuffOnAttackBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z PROC		; ioCallBuffOnAttackBuff::ioCallBuffOnAttackBuff, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCallBuffOnAttackBuff@@6B@
  00024	8a 87 6c 09 00
	00		 mov	 al, BYTE PTR [edi+2412]
  0002a	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al
  00030	8a 87 6d 09 00
	00		 mov	 al, BYTE PTR [edi+2413]
  00036	81 c7 70 09 00
	00		 add	 edi, 2416		; 00000970H
  0003c	57		 push	 edi
  0003d	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00043	88 86 6d 09 00
	00		 mov	 BYTE PTR [esi+2413], al
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 18   : }

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z ENDP		; ioCallBuffOnAttackBuff::ioCallBuffOnAttackBuff
PUBLIC	??1ioCallBuffOnAttackBuff@@UAE@XZ		; ioCallBuffOnAttackBuff::~ioCallBuffOnAttackBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioCallBuffOnAttackBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioCallBuffOnAttackBuff@@UAE@XZ$0
__ehfuncinfo$??1ioCallBuffOnAttackBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioCallBuffOnAttackBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioCallBuffOnAttackBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioCallBuffOnAttackBuff@@UAE@XZ PROC			; ioCallBuffOnAttackBuff::~ioCallBuffOnAttackBuff, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioCallBuffOnAttackBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCallBuffOnAttackBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 22   : }

  0001b	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioCallBuffOnAttackBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioCallBuffOnAttackBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioCallBuffOnAttackBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioCallBuffOnAttackBuff@@UAE@XZ ENDP			; ioCallBuffOnAttackBuff::~ioCallBuffOnAttackBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524660 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ PROC	; ioCallBuffOnAttackBuff::Clone, COMDAT
; _this$ = ecx

; 37   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 38   : 	return new ioCallBuffOnAttackBuff( *this );

  0000e	68 80 09 00 00	 push	 2432			; 00000980H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524660[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioCallBuffOnAttackBuff@@QAE@ABV0@@Z ; ioCallBuffOnAttackBuff::ioCallBuffOnAttackBuff
$LN3@Clone:

; 39   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524660[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioCallBuffOnAttackBuff@@UAEPAVioBuff@@XZ ENDP	; ioCallBuffOnAttackBuff::Clone
EXTRN	?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z:PROC ; ioBaseChar::SetChangeEquipMesh
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioCallBuffOnAttackBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioCallBuffOnAttackBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioCallBuffOnAttackBuff::StartBuff, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 43   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 44   : 
; 45   : 	if( m_bUseWeaponEquipMesh && pOwner )

  0000e	80 be 6d 09 00
	00 00		 cmp	 BYTE PTR [esi+2413], 0
  00015	74 17		 je	 SHORT $LN1@StartBuff
  00017	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  0001b	74 11		 je	 SHORT $LN1@StartBuff

; 46   : 	{
; 47   : 		pOwner->SetChangeEquipMesh( m_ItemName, true );

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00020	6a 01		 push	 1
  00022	81 c6 44 02 00
	00		 add	 esi, 580		; 00000244H
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::SetChangeEquipMesh
$LN1@StartBuff:
  0002e	5e		 pop	 esi

; 48   : 	}
; 49   : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?StartBuff@ioCallBuffOnAttackBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioCallBuffOnAttackBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioCallBuffOnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioCallBuffOnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioCallBuffOnAttackBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 53   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 22		 je	 SHORT $LN3@ApplyStart
$LN2@ApplyStart:

; 54   : 		return false;
; 55   : 
; 56   : 	if( m_bUseWeaponEquipMesh && pOwner )

  00018	80 be 6d 09 00
	00 00		 cmp	 BYTE PTR [esi+2413], 0
  0001f	74 17		 je	 SHORT $LN1@ApplyStart
  00021	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00025	74 11		 je	 SHORT $LN1@ApplyStart

; 57   : 	{
; 58   : 		pOwner->SetChangeEquipMesh( m_ItemName, true );

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0002a	6a 01		 push	 1
  0002c	81 c6 44 02 00
	00		 add	 esi, 580		; 00000244H
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::SetChangeEquipMesh
$LN1@ApplyStart:

; 59   : 	}
; 60   : 
; 61   : 	return true;

  00038	b0 01		 mov	 al, 1
$LN3@ApplyStart:
  0003a	5e		 pop	 esi

; 62   : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioCallBuffOnAttackBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioCallBuffOnAttackBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	?CheckRestoreStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ ; ioCallBuffOnAttackBuff::CheckRestoreStateCheck
; Function compile flags: /Ogsp
;	COMDAT ?CheckRestoreStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ
_TEXT	SEGMENT
?CheckRestoreStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ PROC ; ioCallBuffOnAttackBuff::CheckRestoreStateCheck, COMDAT
; _this$ = ecx

; 144  : 	if( !m_pOwner ) return false;

  00000	8b 81 74 02 00
	00		 mov	 eax, DWORD PTR [ecx+628]
  00006	85 c0		 test	 eax, eax
  00008	75 03		 jne	 SHORT $LN4@CheckResto
  0000a	32 c0		 xor	 al, al

; 149  : 	{
; 150  : 	case CS_DELAY:
; 151  : 	case CS_RUN:
; 152  : 	case CS_DASH:
; 153  : 		return true;
; 154  : 	}
; 155  : 
; 156  : 	return false;
; 157  : }

  0000c	c3		 ret	 0
$LN4@CheckResto:

; 145  : 
; 146  : 	CharState eState = m_pOwner->GetState();

  0000d	8a 80 10 03 00
	00		 mov	 al, BYTE PTR [eax+784]

; 147  : 
; 148  : 	switch( eState )

  00013	b1 02		 mov	 cl, 2
  00015	3a c8		 cmp	 cl, al
  00017	1a c0		 sbb	 al, al
  00019	fe c0		 inc	 al

; 149  : 	{
; 150  : 	case CS_DELAY:
; 151  : 	case CS_RUN:
; 152  : 	case CS_DASH:
; 153  : 		return true;
; 154  : 	}
; 155  : 
; 156  : 	return false;
; 157  : }

  0001b	c3		 ret	 0
?CheckRestoreStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ ENDP ; ioCallBuffOnAttackBuff::CheckRestoreStateCheck
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioCallBuffOnAttackBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioCallBuffOnAttackBuff@@UAEXXZ PROC		; ioCallBuffOnAttackBuff::EndBuff, COMDAT
; _this$ = ecx

; 160  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 161  : 	if( m_bUseWeaponEquipMesh && m_pOwner )

  00003	80 be 6d 09 00
	00 00		 cmp	 BYTE PTR [esi+2413], 0
  0000a	74 18		 je	 SHORT $LN1@EndBuff
  0000c	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00012	85 c9		 test	 ecx, ecx
  00014	74 0e		 je	 SHORT $LN1@EndBuff

; 162  : 	{
; 163  : 		m_pOwner->SetChangeEquipMesh( m_ItemName, false );

  00016	6a 00		 push	 0
  00018	8d 86 44 02 00
	00		 lea	 eax, DWORD PTR [esi+580]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::SetChangeEquipMesh
$LN1@EndBuff:

; 164  : 	}
; 165  : 
; 166  : 	ioBuff::EndBuff();

  00024	8b ce		 mov	 ecx, esi
  00026	5e		 pop	 esi
  00027	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioCallBuffOnAttackBuff@@UAEXXZ ENDP		; ioCallBuffOnAttackBuff::EndBuff
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioCallBuffOnAttackBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioCallBuffOnAttackBuff@@UAEPAXI@Z PROC		; ioCallBuffOnAttackBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioCallBuffOnAttackBuff@@UAE@XZ ; ioCallBuffOnAttackBuff::~ioCallBuffOnAttackBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioCallBuffOnAttackBuff@@UAEPAXI@Z ENDP		; ioCallBuffOnAttackBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ ; ioCallBuffOnAttackBuff::CheckOwnerStateCheck
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z:PROC ; ioBaseChar::CheckUseBuffSkill
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocallbuffonattackbuff.cpp
;	COMDAT ?CheckOwnerStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ PROC ; ioCallBuffOnAttackBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 103  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 104  : 	if( !m_pOwner ) return false;

  00004	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0000a	33 db		 xor	 ebx, ebx
  0000c	3b cb		 cmp	 ecx, ebx
  0000e	74 27		 je	 SHORT $LN2@CheckOwner

; 105  : 
; 106  : 	CharState eState = m_pOwner->GetState();

  00010	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 107  : 
; 108  : 	bool bDown = false;
; 109  : 	if( m_bDisableDownState )

  00016	38 9e 6c 09 00
	00		 cmp	 BYTE PTR [esi+2412], bl
  0001c	74 19		 je	 SHORT $LN2@CheckOwner

; 110  : 	{
; 111  : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001e	3c 17		 cmp	 al, 23			; 00000017H
  00020	75 08		 jne	 SHORT $LN15@CheckOwner
  00022	38 99 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], bl

; 112  : 			bDown = true;

  00028	eb 36		 jmp	 SHORT $LN29@CheckOwner
$LN15@CheckOwner:

; 113  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  0002a	3c 0c		 cmp	 al, 12			; 0000000cH
  0002c	75 0e		 jne	 SHORT $LN13@CheckOwner
$LN31@CheckOwner:
  0002e	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  00033	84 c0		 test	 al, al
  00035	74 2b		 je	 SHORT $LN3@CheckOwner
$LN2@CheckOwner:

; 136  : 		}
; 137  : 	}
; 138  : 
; 139  : 	return false;

  00037	32 c0		 xor	 al, al
$LN18@CheckOwner:
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 140  : }

  0003b	c3		 ret	 0
$LN13@CheckOwner:

; 114  : 			bDown = true;
; 115  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  0003c	3c 31		 cmp	 al, 49			; 00000031H

; 116  : 			bDown = true;

  0003e	74 ee		 je	 SHORT $LN31@CheckOwner

; 117  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00040	3c 0f		 cmp	 al, 15			; 0000000fH
  00042	75 0a		 jne	 SHORT $LN9@CheckOwner
  00044	53		 push	 ebx
  00045	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0004a	84 c0		 test	 al, al

; 118  : 			bDown = true;

  0004c	eb 12		 jmp	 SHORT $LN29@CheckOwner
$LN9@CheckOwner:

; 119  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  0004e	3c 26		 cmp	 al, 38			; 00000026H

; 120  : 			bDown = true;

  00050	74 08		 je	 SHORT $LN30@CheckOwner

; 121  : 		else if( eState == CS_DROP_ZONE_DOWN )

  00052	3c 10		 cmp	 al, 16			; 00000010H

; 122  : 			bDown = true;

  00054	74 0c		 je	 SHORT $LN3@CheckOwner

; 123  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00056	3c 3b		 cmp	 al, 59			; 0000003bH
  00058	75 dd		 jne	 SHORT $LN2@CheckOwner
$LN30@CheckOwner:
  0005a	38 99 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], bl
$LN29@CheckOwner:
  00060	74 d5		 je	 SHORT $LN2@CheckOwner
$LN3@CheckOwner:

; 124  : 			bDown = true;
; 125  : 
; 126  : 		if( bDown )
; 127  : 		{
; 128  : 			if( CheckRestoreStateCheck() )

  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?CheckRestoreStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ ; ioCallBuffOnAttackBuff::CheckRestoreStateCheck
  00069	84 c0		 test	 al, al
  0006b	74 14		 je	 SHORT $LN1@CheckOwner

; 129  : 			{
; 130  : 				m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  0006d	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00074	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0007a	50		 push	 eax
  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN1@CheckOwner:

; 131  : 			}
; 132  : 
; 133  : 			m_pOwner->CheckUseBuffSkill( m_Name, false );

  00081	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00087	53		 push	 ebx
  00088	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::CheckUseBuffSkill

; 134  : 			SetReserveEndBuff();

  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 135  : 			return true;

  0009b	b0 01		 mov	 al, 1
  0009d	eb 9a		 jmp	 SHORT $LN18@CheckOwner
?CheckOwnerStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ ENDP ; ioCallBuffOnAttackBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z ; ioINILoader::LoadBool_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<22>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadBool_e@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadBool_e@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadBool_e@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadBool_e@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadBool_e@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadBool_e@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadBool_e@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadBool_e@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadBool_e@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadBool_e@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadBool_e@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadBool_e@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadBool_e@2
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadBool_e@2
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadBool_e@2
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadBool_e@2
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadBool_e@2
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadBool_e@2
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadBool_e@2
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN71@LoadBool_e@2:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN72@LoadBool_e@2:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN73@LoadBool_e@2:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadBool_e@2:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00250	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00253	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00257	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025a	50		 push	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	5e		 pop	 esi
  00267	33 cd		 xor	 ecx, ebp
  00269	5b		 pop	 ebx
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	c9		 leave
  00270	c2 08 00	 ret	 8
??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<22>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString
$LN73@LoadString:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocallbuffonattackbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioCallBuffOnAttackBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -292						; size = 260
__k$525146 = -32					; size = 20
__k$524949 = -32					; size = 22
__k$524824 = -32					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioCallBuffOnAttackBuff@@UAEXAAVioINILoader@@@Z PROC ; ioCallBuffOnAttackBuff::LoadProperty, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi

; 26   : 	ioBuff::LoadProperty( rkLoader );

  00019	53		 push	 ebx
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 27   : 	char szBuf[MAX_PATH];
; 28   : 
; 29   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  00021	6a 04		 push	 4
  00023	c7 45 e0 89 85
	98 8b		 mov	 DWORD PTR __k$524824[ebp], -1952938615 ; 8b988589H
  0002a	c7 45 e4 8f 80
	8e b5		 mov	 DWORD PTR __k$524824[ebp+4], -1248952177 ; b58e808fH
  00031	c7 45 e8 89 83
	9c 84		 mov	 DWORD PTR __k$524824[ebp+8], -2070117495 ; 849c8389H
  00038	c7 45 ec b2 9f
	9f 8b		 mov	 DWORD PTR __k$524824[ebp+12], -1952473166 ; 8b9f9fb2H
  0003f	66 c7 45 f0 99
	89		 mov	 WORD PTR __k$524824[ebp+16], 35225 ; 00008999H
  00045	8d 45 e0	 lea	 eax, DWORD PTR __k$524824[ebp]
  00048	c6 45 f2 00	 mov	 BYTE PTR __k$524824[ebp+18], 0
  0004c	59		 pop	 ecx
$LL106@LoadProper:
  0004d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00053	83 c0 04	 add	 eax, 4
  00056	49		 dec	 ecx
  00057	75 f4		 jne	 SHORT $LL106@LoadProper
  00059	6a 10		 push	 16			; 00000010H
  0005b	5e		 pop	 esi
$LL103@LoadProper:
  0005c	8b c6		 mov	 eax, esi
  0005e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00063	79 05		 jns	 SHORT $LN333@LoadProper
  00065	48		 dec	 eax
  00066	83 c8 fc	 or	 eax, -4			; fffffffcH
  00069	40		 inc	 eax
$LN333@LoadProper:
  0006a	b1 ed		 mov	 cl, -19			; ffffffedH
  0006c	2a c8		 sub	 cl, al
  0006e	30 4c 35 e0	 xor	 BYTE PTR __k$524824[ebp+esi], cl
  00072	46		 inc	 esi
  00073	83 fe 12	 cmp	 esi, 18			; 00000012H
  00076	7c e4		 jl	 SHORT $LL103@LoadProper
  00078	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  0007e	6a 00		 push	 0
  00080	8d 45 e0	 lea	 eax, DWORD PTR __k$524824[ebp]
  00083	50		 push	 eax
  00084	8b cb		 mov	 ecx, ebx
  00086	ff d6		 call	 esi
  00088	6a 05		 push	 5
  0008a	88 87 6c 09 00
	00		 mov	 BYTE PTR [edi+2412], al

; 30   : 	m_bUseWeaponEquipMesh = rkLoader.LoadBool_e( "use_weapon_equip_mesh", false );

  00090	c7 45 e0 98 9f
	8e b5		 mov	 DWORD PTR __k$524949[ebp], -1248944232 ; b58e9f98H
  00097	c7 45 e4 9a 89
	8a 9a		 mov	 DWORD PTR __k$524949[ebp+4], -1702196838 ; 9a8a899aH
  0009e	c7 45 e8 82 82
	b4 8f		 mov	 DWORD PTR __k$524949[ebp+8], -1883995518 ; 8fb48282H
  000a5	c7 45 ec 9c 99
	82 9a		 mov	 DWORD PTR __k$524949[ebp+12], -1702717028 ; 9a82999cH
  000ac	c7 45 f0 b2 81
	8e 99		 mov	 DWORD PTR __k$524949[ebp+16], -1718713934 ; 998e81b2H
  000b3	8d 45 e0	 lea	 eax, DWORD PTR __k$524949[ebp]
  000b6	66 c7 45 f4 85
	00		 mov	 WORD PTR __k$524949[ebp+20], 133 ; 00000085H
  000bc	59		 pop	 ecx
$LL212@LoadProper:
  000bd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c3	83 c0 04	 add	 eax, 4
  000c6	49		 dec	 ecx
  000c7	75 f4		 jne	 SHORT $LL212@LoadProper
  000c9	80 75 f4 ed	 xor	 BYTE PTR __k$524949[ebp+20], -19 ; ffffffedH
  000cd	51		 push	 ecx
  000ce	8d 45 e0	 lea	 eax, DWORD PTR __k$524949[ebp]
  000d1	50		 push	 eax
  000d2	8b cb		 mov	 ecx, ebx
  000d4	ff d6		 call	 esi
  000d6	6a 04		 push	 4
  000d8	88 87 6d 09 00
	00		 mov	 BYTE PTR [edi+2413], al

; 31   : 
; 32   : 	rkLoader.LoadString_e( "call_buff_on_attack", "", szBuf, MAX_PATH );

  000de	c7 45 e0 8e 8d
	87 86		 mov	 DWORD PTR __k$525146[ebp], -2037936754 ; 86878d8eH
  000e5	c7 45 e4 b2 8e
	9e 8c		 mov	 DWORD PTR __k$525146[ebp+4], -1935765838 ; 8c9e8eb2H
  000ec	c7 45 e8 8b b3
	84 84		 mov	 DWORD PTR __k$525146[ebp+8], -2071678069 ; 8484b38bH
  000f3	c7 45 ec b2 8d
	9f 9e		 mov	 DWORD PTR __k$525146[ebp+12], -1633710670 ; 9e9f8db2H
  000fa	8d 45 e0	 lea	 eax, DWORD PTR __k$525146[ebp]
  000fd	c7 45 f0 8c 8f
	80 00		 mov	 DWORD PTR __k$525146[ebp+16], 8425356 ; 00808f8cH
  00104	59		 pop	 ecx
$LL318@LoadProper:
  00105	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0010b	83 c0 04	 add	 eax, 4
  0010e	49		 dec	 ecx
  0010f	75 f4		 jne	 SHORT $LL318@LoadProper
  00111	6a 10		 push	 16			; 00000010H
  00113	5e		 pop	 esi
$LL315@LoadProper:
  00114	8b c6		 mov	 eax, esi
  00116	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0011b	79 05		 jns	 SHORT $LN334@LoadProper
  0011d	48		 dec	 eax
  0011e	83 c8 fc	 or	 eax, -4			; fffffffcH
  00121	40		 inc	 eax
$LN334@LoadProper:
  00122	b1 ed		 mov	 cl, -19			; ffffffedH
  00124	2a c8		 sub	 cl, al
  00126	30 4c 35 e0	 xor	 BYTE PTR __k$525146[ebp+esi], cl
  0012a	46		 inc	 esi
  0012b	83 fe 13	 cmp	 esi, 19			; 00000013H
  0012e	7c e4		 jl	 SHORT $LL315@LoadProper
  00130	68 04 01 00 00	 push	 260			; 00000104H
  00135	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0013b	50		 push	 eax
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00141	8d 45 e0	 lea	 eax, DWORD PTR __k$525146[ebp]
  00144	50		 push	 eax
  00145	8b cb		 mov	 ecx, ebx
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 33   : 	m_CallBuffName = szBuf;

  0014d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00153	50		 push	 eax
  00154	8d 8f 70 09 00
	00		 lea	 ecx, DWORD PTR [edi+2416]
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 34   : }

  00160	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	33 cd		 xor	 ecx, ebp
  00167	5b		 pop	 ebx
  00168	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016d	c9		 leave
  0016e	c2 04 00	 ret	 4
?LoadProperty@ioCallBuffOnAttackBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioCallBuffOnAttackBuff::LoadProperty
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioCallBuffOnAttackBuff@@UAEXM@Z
_TEXT	SEGMENT
_value$525192 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioCallBuffOnAttackBuff@@UAEXM@Z PROC	; ioCallBuffOnAttackBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 66   : 	if( CheckOwnerStateCheck() )

  00007	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ ; ioCallBuffOnAttackBuff::CheckOwnerStateCheck
  0000c	84 c0		 test	 al, al
  0000e	0f 85 9f 00 00
	00		 jne	 $LN7@ProcessBuf

; 67   : 		return;
; 68   : 
; 69   : 	switch( m_iOperationType )

  00014	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 8a 00 00
	00		 je	 $LN1@ProcessBuf
  00022	48		 dec	 eax
  00023	83 f8 02	 cmp	 eax, 2
  00026	0f 87 87 00 00
	00		 ja	 $LN7@ProcessBuf

; 70   : 	{
; 71   : 	case OT_SWITCH:
; 72   : 	case OT_DELAY:
; 73   : 	case OT_ACTIVE:
; 74   : 		{
; 75   : 			if( CheckEnableDelayState() )

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  00033	84 c0		 test	 al, al
  00035	75 7c		 jne	 SHORT $LN7@ProcessBuf

; 76   : 				return;
; 77   : 
; 78   : 			CheckCallingProcess();

  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 79   : 
; 80   : 			if( GetBuffDuration() == 0 )

  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00045	85 c0		 test	 eax, eax
  00047	74 6a		 je	 SHORT $LN7@ProcessBuf

; 81   : 				return;
; 82   : 
; 83   : 			if( m_dwBuffEndTime <= FRAMEGETTIME() )

  00049	57		 push	 edi
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00050	8b c8		 mov	 ecx, eax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00058	8b f8		 mov	 edi, eax
  0005a	8d 45 fc	 lea	 eax, DWORD PTR _value$525192[ebp]
  0005d	50		 push	 eax
  0005e	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00064	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00069	39 7d fc	 cmp	 DWORD PTR _value$525192[ebp], edi
  0006c	5f		 pop	 edi
  0006d	77 44		 ja	 SHORT $LN7@ProcessBuf

; 84   : 			{
; 85   : 				if( CheckRestoreStateCheck() )

  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ?CheckRestoreStateCheck@ioCallBuffOnAttackBuff@@IAE_NXZ ; ioCallBuffOnAttackBuff::CheckRestoreStateCheck
  00076	84 c0		 test	 al, al
  00078	74 15		 je	 SHORT $LN2@ProcessBuf

; 86   : 				{
; 87   : 					m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  0007a	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00081	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00087	50		 push	 eax
  00088	6a 00		 push	 0
  0008a	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN2@ProcessBuf:

; 88   : 				}
; 89   : 
; 90   : 				m_pOwner->CheckUseBuffSkill( m_Name, false );

  0008f	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00095	6a 00		 push	 0
  00097	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::CheckUseBuffSkill

; 91   : 				SetReserveEndBuff();

  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 92   : 				return;

  000aa	eb 07		 jmp	 SHORT $LN7@ProcessBuf
$LN1@ProcessBuf:

; 93   : 			}
; 94   : 		}
; 95   : 		break;
; 96   : 	case OT_PASSIVE:
; 97   : 		CheckCallingAreaWeapon();

  000ac	8b ce		 mov	 ecx, esi
  000ae	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN7@ProcessBuf:
  000b3	5e		 pop	 esi

; 98   : 		break;
; 99   : 	}
; 100  : }

  000b4	c9		 leave
  000b5	c2 04 00	 ret	 4
?ProcessBuff@ioCallBuffOnAttackBuff@@UAEXM@Z ENDP	; ioCallBuffOnAttackBuff::ProcessBuff
_TEXT	ENDS
END
