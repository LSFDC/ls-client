; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\MiniDump\File.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7File@@6B@					; File::`vftable'
PUBLIC	??0File@@QAE@XZ					; File::File
PUBLIC	??_R4File@@6B@					; File::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFile@@@8				; File `RTTI Type Descriptor'
PUBLIC	??_R3File@@8					; File::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2File@@8					; File::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@File@@8				; File::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetFileSize@File@@UAEKXZ			; File::GetFileSize
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EFile@@UAEPAXI@Z:PROC			; File::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@File@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\minidump\file.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@File@@8 DD FLAT:??_R0?AVFile@@@8		; File::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3File@@8
rdata$r	ENDS
;	COMDAT ??_R2File@@8
rdata$r	SEGMENT
??_R2File@@8 DD	FLAT:??_R1A@?0A@EA@File@@8		; File::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3File@@8
rdata$r	SEGMENT
??_R3File@@8 DD	00H					; File::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2File@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFile@@@8
_DATA	SEGMENT
??_R0?AVFile@@@8 DD FLAT:??_7type_info@@6B@		; File `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFile@@', 00H
_DATA	ENDS
;	COMDAT ??_R4File@@6B@
rdata$r	SEGMENT
??_R4File@@6B@ DD 00H					; File::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFile@@@8
	DD	FLAT:??_R3File@@8
rdata$r	ENDS
;	COMDAT ??_7File@@6B@
CONST	SEGMENT
??_7File@@6B@ DD FLAT:??_R4File@@6B@			; File::`vftable'
	DD	FLAT:??_EFile@@UAEPAXI@Z
	DD	FLAT:?GetFileSize@File@@UAEKXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0File@@QAE@XZ
_TEXT	SEGMENT
??0File@@QAE@XZ PROC					; File::File, COMDAT
; _this$ = ecx

; 16   : {

  00000	8b c1		 mov	 eax, ecx
  00002	83 48 04 ff	 or	 DWORD PTR [eax+4], -1
  00006	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0000a	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7File@@6B@

; 17   : }

  00014	c3		 ret	 0
??0File@@QAE@XZ ENDP					; File::File
_TEXT	ENDS
PUBLIC	?Close@File@@QAEXXZ				; File::Close
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Close@File@@QAEXXZ
_TEXT	SEGMENT
?Close@File@@QAEXXZ PROC				; File::Close, COMDAT
; _this$ = ecx

; 52   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 53   : 	if(m_hFile != INVALID_HANDLE_VALUE)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	83 f8 ff	 cmp	 eax, -1
  00009	74 0b		 je	 SHORT $LN1@Close

; 54   : 	{
; 55   : 		CloseHandle(m_hFile);

  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 56   : 		m_hFile = NULL;

  00012	83 66 04 00	 and	 DWORD PTR [esi+4], 0
$LN1@Close:

; 57   : 	}
; 58   : 
; 59   : 	m_dwSizeLow = 0;

  00016	83 66 08 00	 and	 DWORD PTR [esi+8], 0

; 60   : 	m_dwSizeHigh = 0;

  0001a	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  0001e	5e		 pop	 esi

; 61   : }

  0001f	c3		 ret	 0
?Close@File@@QAEXXZ ENDP				; File::Close
_TEXT	ENDS
PUBLIC	?Move@File@@QAEHKJ@Z				; File::Move
EXTRN	__imp__SetFilePointer@16:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Move@File@@QAEHKJ@Z
_TEXT	SEGMENT
_dwOrigin$ = 8						; size = 4
_lOffset$ = 12						; size = 4
?Move@File@@QAEHKJ@Z PROC				; File::Move, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 65   : 	if(m_hFile != INVALID_HANDLE_VALUE)

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	83 f8 ff	 cmp	 eax, -1
  00009	74 1b		 je	 SHORT $LN1@Move

; 66   : 	{
; 67   : 		DWORD dwResult = SetFilePointer(	m_hFile,
; 68   : 			lOffset,
; 69   : 			NULL, 
; 70   : 			dwOrigin);

  0000b	ff 75 08	 push	 DWORD PTR _dwOrigin$[ebp]
  0000e	6a 00		 push	 0
  00010	ff 75 0c	 push	 DWORD PTR _lOffset$[ebp]
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16

; 71   : 		return (dwResult == 0xFFFFFFFF) ? FALSE : TRUE;

  0001a	33 c9		 xor	 ecx, ecx
  0001c	83 f8 ff	 cmp	 eax, -1
  0001f	0f 95 c1	 setne	 cl
  00022	8b c1		 mov	 eax, ecx
  00024	eb 02		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 72   : 	}
; 73   : 	return FALSE;

  00026	33 c0		 xor	 eax, eax
$LN2@Move:

; 74   : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?Move@File@@QAEHKJ@Z ENDP				; File::Move
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__GetFileSize@8:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetFileSize@File@@UAEKXZ
_TEXT	SEGMENT
?GetFileSize@File@@UAEKXZ PROC				; File::GetFileSize, COMDAT
; _this$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 78   : 	if(m_dwSizeLow != 0)

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	85 c0		 test	 eax, eax

; 79   : 		return m_dwSizeLow;

  00008	75 2c		 jne	 SHORT $LN4@GetFileSiz

; 80   : 
; 81   : 	DWORD dwError = 0;
; 82   : 	if(m_hFile != INVALID_HANDLE_VALUE)

  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	83 f8 ff	 cmp	 eax, -1
  00010	74 21		 je	 SHORT $LN1@GetFileSiz

; 83   : 	{
; 84   : 		m_dwSizeLow = ::GetFileSize(m_hFile, &m_dwSizeHigh);

  00012	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00015	51		 push	 ecx
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  0001d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 85   : 		if((INVALID_FILE_SIZE == m_dwSizeLow) && 
; 86   : 			((dwError = GetLastError()) != NO_ERROR))

  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 0e		 jne	 SHORT $LN1@GetFileSiz
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002b	85 c0		 test	 eax, eax
  0002d	74 04		 je	 SHORT $LN1@GetFileSiz

; 87   : 			return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	5e		 pop	 esi

; 90   : }

  00032	c3		 ret	 0
$LN1@GetFileSiz:

; 88   : 	}
; 89   : 	return m_dwSizeLow;

  00033	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN4@GetFileSiz:
  00036	5e		 pop	 esi

; 90   : }

  00037	c3		 ret	 0
?GetFileSize@File@@UAEKXZ ENDP				; File::GetFileSize
_TEXT	ENDS
PUBLIC	?Read@FileReader@@QAEHPAEK@Z			; FileReader::Read
EXTRN	__imp__ReadFile@20:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Read@FileReader@@QAEHPAEK@Z
_TEXT	SEGMENT
_dwWritten$ = -4					; size = 4
_buffer$ = 8						; size = 4
_dwLength$ = 12						; size = 4
?Read@FileReader@@QAEHPAEK@Z PROC			; FileReader::Read, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 115  : 	DWORD dwWritten = 0;
; 116  : 	if(m_hFile == INVALID_HANDLE_VALUE) return FALSE;

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	83 65 fc 00	 and	 DWORD PTR _dwWritten$[ebp], 0
  0000b	83 f8 ff	 cmp	 eax, -1
  0000e	75 04		 jne	 SHORT $LN3@Read
  00010	33 c0		 xor	 eax, eax
  00012	eb 26		 jmp	 SHORT $LN4@Read
$LN3@Read:
  00014	56		 push	 esi

; 117  : 
; 118  : 	if(ReadFile(	m_hFile, 
; 119  : 		buffer,
; 120  : 		dwLength, 
; 121  : 		&dwWritten, 
; 122  : 		NULL))

  00015	8b 75 0c	 mov	 esi, DWORD PTR _dwLength$[ebp]
  00018	6a 00		 push	 0
  0001a	8d 4d fc	 lea	 ecx, DWORD PTR _dwWritten$[ebp]
  0001d	51		 push	 ecx
  0001e	56		 push	 esi
  0001f	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  00022	50		 push	 eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00029	85 c0		 test	 eax, eax
  0002b	74 0a		 je	 SHORT $LN1@Read

; 123  : 	{
; 124  : 		if(dwLength == dwWritten) return TRUE;

  0002d	3b 75 fc	 cmp	 esi, DWORD PTR _dwWritten$[ebp]
  00030	75 05		 jne	 SHORT $LN1@Read
  00032	33 c0		 xor	 eax, eax
  00034	40		 inc	 eax
  00035	eb 02		 jmp	 SHORT $LN6@Read
$LN1@Read:

; 125  : 	}
; 126  : 	return FALSE;

  00037	33 c0		 xor	 eax, eax
$LN6@Read:
  00039	5e		 pop	 esi
$LN4@Read:

; 127  : }

  0003a	c9		 leave
  0003b	c2 08 00	 ret	 8
?Read@FileReader@@QAEHPAEK@Z ENDP			; FileReader::Read
_TEXT	ENDS
PUBLIC	?Convert@FileReader@@QAEHPBEHPAEH@Z		; FileReader::Convert
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Convert@FileReader@@QAEHPBEHPAEH@Z
_TEXT	SEGMENT
_bufferA$ = 8						; size = 4
_lengthA$ = 12						; size = 4
_bufferB$ = 16						; size = 4
_lengthB$ = 20						; size = 4
?Convert@FileReader@@QAEHPBEHPAEH@Z PROC		; FileReader::Convert, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  : 	switch(m_nReadType)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	48		 dec	 eax
  00007	74 27		 je	 SHORT $LN4@Convert
  00009	48		 dec	 eax
  0000a	74 24		 je	 SHORT $LN4@Convert
  0000c	48		 dec	 eax
  0000d	74 07		 je	 SHORT $LN2@Convert
  0000f	48		 dec	 eax
  00010	74 37		 je	 SHORT $LN1@Convert

; 144  : 
; 145  : 	case FILEFORMAT_UNICODE_BE :
; 146  : 		return TRUE;
; 147  : 	}
; 148  : 	return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	eb 36		 jmp	 SHORT $LN7@Convert
$LN2@Convert:

; 136  : 
; 137  : 	case FILEFORMAT_UNICODE_UTF8 :
; 138  : 		CopyMemory(bufferB, bufferA, (lengthA > lengthB) ? lengthB : lengthA);
; 139  : 		return TRUE;
; 140  : 
; 141  : 	case FILEFORMAT_UNICODE_LE :
; 142  : 		WideCharToMultiByte(CP_ACP, 0, (LPCWSTR)bufferA, lengthA, (LPSTR)bufferB, lengthB, NULL, NULL);

  00016	33 c0		 xor	 eax, eax
  00018	50		 push	 eax
  00019	50		 push	 eax
  0001a	ff 75 14	 push	 DWORD PTR _lengthB$[ebp]
  0001d	ff 75 10	 push	 DWORD PTR _bufferB$[ebp]
  00020	ff 75 0c	 push	 DWORD PTR _lengthA$[ebp]
  00023	ff 75 08	 push	 DWORD PTR _bufferA$[ebp]
  00026	50		 push	 eax
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 143  : 		return TRUE;

  0002e	eb 19		 jmp	 SHORT $LN1@Convert
$LN4@Convert:

; 132  : 	{
; 133  : 	case FILEFORMAT_ANSI :
; 134  : 		CopyMemory(bufferB, bufferA, (lengthA > lengthB) ? lengthB : lengthA);

  00030	8b 45 0c	 mov	 eax, DWORD PTR _lengthA$[ebp]
  00033	3b 45 14	 cmp	 eax, DWORD PTR _lengthB$[ebp]
  00036	0f 4f 45 14	 cmovg	 eax, DWORD PTR _lengthB$[ebp]
  0003a	50		 push	 eax
  0003b	ff 75 08	 push	 DWORD PTR _bufferA$[ebp]
  0003e	ff 75 10	 push	 DWORD PTR _bufferB$[ebp]
  00041	e8 00 00 00 00	 call	 _memcpy
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Convert:

; 135  : 		return TRUE;

  00049	33 c0		 xor	 eax, eax
  0004b	40		 inc	 eax
$LN7@Convert:

; 149  : }

  0004c	5d		 pop	 ebp
  0004d	c2 10 00	 ret	 16			; 00000010H
?Convert@FileReader@@QAEHPBEHPAEH@Z ENDP		; FileReader::Convert
_TEXT	ENDS
PUBLIC	?GetBOM@FileReader@@QAEHXZ			; FileReader::GetBOM
; Function compile flags: /Ogsp
;	COMDAT ?GetBOM@FileReader@@QAEHXZ
_TEXT	SEGMENT
_BOM$505269 = -4					; size = 2
?GetBOM@FileReader@@QAEHXZ PROC				; FileReader::GetBOM, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 153  : 	if((-1) == m_nReadType)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	83 f8 ff	 cmp	 eax, -1
  0000e	75 66		 jne	 SHORT $LN9@GetBOM

; 154  : 	{
; 155  : 		Move(FILE_BEGIN, 0);

  00010	33 ff		 xor	 edi, edi
  00012	57		 push	 edi
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 ?Move@File@@QAEHKJ@Z	; File::Move

; 156  : 
; 157  : 		WORD BOM = 0;
; 158  : 		if(Read(reinterpret_cast<BYTE*>(&BOM), sizeof(WORD)))

  00019	6a 02		 push	 2
  0001b	8d 45 fc	 lea	 eax, DWORD PTR _BOM$505269[ebp]
  0001e	50		 push	 eax
  0001f	8b ce		 mov	 ecx, esi
  00021	89 7d fc	 mov	 DWORD PTR _BOM$505269[ebp], edi
  00024	e8 00 00 00 00	 call	 ?Read@FileReader@@QAEHPAEK@Z ; FileReader::Read
  00029	85 c0		 test	 eax, eax
  0002b	74 47		 je	 SHORT $LN7@GetBOM

; 159  : 		{
; 160  : 			switch(BOM)

  0002d	0f b7 45 fc	 movzx	 eax, WORD PTR _BOM$505269[ebp]
  00031	3d ef bb 00 00	 cmp	 eax, 48111		; 0000bbefH
  00036	74 26		 je	 SHORT $LN2@GetBOM
  00038	3d ff fe 00 00	 cmp	 eax, 65279		; 0000feffH
  0003d	74 16		 je	 SHORT $LN4@GetBOM
  0003f	3d fe ff 00 00	 cmp	 eax, 65534		; 0000fffeH
  00044	74 0a		 je	 SHORT $LN3@GetBOM

; 173  : 				break;
; 174  : 
; 175  : 			default:
; 176  : 				m_nReadType = FILEFORMAT_ANSI;

  00046	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1

; 177  : 				Move(FILE_BEGIN, 0);

  0004d	57		 push	 edi

; 178  : 				break;

  0004e	eb 17		 jmp	 SHORT $LN11@GetBOM
$LN3@GetBOM:

; 165  : 
; 166  : 			case 0xFFFE :
; 167  : 				m_nReadType = 0; //FILEFORMAT_UNICODE_BE; not supported

  00050	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 168  : 				break;

  00053	eb 1a		 jmp	 SHORT $LN5@GetBOM
$LN4@GetBOM:

; 161  : 			{
; 162  : 			case 0xFEFF :
; 163  : 				m_nReadType = FILEFORMAT_UNICODE_LE;

  00055	c7 46 10 03 00
	00 00		 mov	 DWORD PTR [esi+16], 3

; 164  : 				break;

  0005c	eb 11		 jmp	 SHORT $LN5@GetBOM
$LN2@GetBOM:

; 169  : 
; 170  : 			case 0xBBEF :
; 171  : 				m_nReadType = FILEFORMAT_UNICODE_UTF8;

  0005e	c7 46 10 02 00
	00 00		 mov	 DWORD PTR [esi+16], 2

; 172  : 				Move(FILE_BEGIN, 3);

  00065	6a 03		 push	 3
$LN11@GetBOM:
  00067	57		 push	 edi
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?Move@File@@QAEHKJ@Z	; File::Move
$LN5@GetBOM:

; 179  : 			}
; 180  : 			return m_nReadType;

  0006f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00072	eb 02		 jmp	 SHORT $LN9@GetBOM
$LN7@GetBOM:

; 181  : 		}
; 182  : 		return 0;

  00074	33 c0		 xor	 eax, eax
$LN9@GetBOM:
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi

; 183  : 	}
; 184  : 	return m_nReadType;
; 185  : }

  00078	c9		 leave
  00079	c3		 ret	 0
?GetBOM@FileReader@@QAEHXZ ENDP				; FileReader::GetBOM
_TEXT	ENDS
PUBLIC	?GetFileSize@FileReader@@UAEKXZ			; FileReader::GetFileSize
; Function compile flags: /Ogsp
;	COMDAT ?GetFileSize@FileReader@@UAEKXZ
_TEXT	SEGMENT
?GetFileSize@FileReader@@UAEKXZ PROC			; FileReader::GetFileSize, COMDAT
; _this$ = ecx

; 188  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 189  : 	if(0 == m_dwSizeLow)

  00003	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00007	75 1f		 jne	 SHORT $LN4@GetFileSiz@2

; 190  : 	{
; 191  : 		File::GetFileSize();

  00009	e8 00 00 00 00	 call	 ?GetFileSize@File@@UAEKXZ ; File::GetFileSize

; 192  : 
; 193  : 		switch(m_nReadType)

  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	83 f8 02	 cmp	 eax, 2
  00014	74 0e		 je	 SHORT $LN2@GetFileSiz@2
  00016	83 c0 fd	 add	 eax, -3			; fffffffdH
  00019	83 f8 01	 cmp	 eax, 1
  0001c	77 0a		 ja	 SHORT $LN4@GetFileSiz@2

; 194  : 		{
; 195  : 		case FILEFORMAT_UNICODE_LE :
; 196  : 		case FILEFORMAT_UNICODE_BE :
; 197  : 			m_dwSizeLow -= (2);

  0001e	83 46 08 fe	 add	 DWORD PTR [esi+8], -2	; fffffffeH

; 198  : 			break;

  00022	eb 04		 jmp	 SHORT $LN4@GetFileSiz@2
$LN2@GetFileSiz@2:

; 199  : 
; 200  : 		case FILEFORMAT_UNICODE_UTF8 :
; 201  : 			m_dwSizeLow -= (3);

  00024	83 46 08 fd	 add	 DWORD PTR [esi+8], -3	; fffffffdH
$LN4@GetFileSiz@2:

; 202  : 			break;
; 203  : 
; 204  : 		default:
; 205  : 			break;
; 206  : 		}
; 207  : 	}
; 208  : 	return m_dwSizeLow;

  00028	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002b	5e		 pop	 esi

; 209  : }

  0002c	c3		 ret	 0
?GetFileSize@FileReader@@UAEKXZ ENDP			; FileReader::GetFileSize
_TEXT	ENDS
PUBLIC	?Write@FileWriter@@QAEHPBEK@Z			; FileWriter::Write
EXTRN	__imp__WriteFile@20:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Write@FileWriter@@QAEHPBEK@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_dwBytes$ = 12						; size = 4
_dwLength$ = 12						; size = 4
?Write@FileWriter@@QAEHPBEK@Z PROC			; FileWriter::Write, COMDAT
; _this$ = ecx

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 240  : 	if(dwLength == 0)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _dwLength$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@Write

; 241  : 		return TRUE;

  0000b	33 c0		 xor	 eax, eax
  0000d	40		 inc	 eax
  0000e	eb 27		 jmp	 SHORT $LN3@Write
$LN2@Write:

; 242  : 
; 243  : 	DWORD dwBytes = 0;

  00010	83 65 0c 00	 and	 DWORD PTR _dwBytes$[ebp], 0

; 244  : 	if(WriteFile(	m_hFile, 
; 245  : 		buffer, 
; 246  : 		dwLength, 
; 247  : 		&dwBytes, 
; 248  : 		NULL))

  00014	6a 00		 push	 0
  00016	8d 45 0c	 lea	 eax, DWORD PTR _dwBytes$[ebp]
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  0001e	ff 71 04	 push	 DWORD PTR [ecx+4]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00027	85 c0		 test	 eax, eax
  00029	74 0a		 je	 SHORT $LN1@Write

; 249  : 	{
; 250  : 		return (dwBytes == dwLength) ? TRUE : FALSE;

  0002b	33 c0		 xor	 eax, eax
  0002d	39 75 0c	 cmp	 DWORD PTR _dwBytes$[ebp], esi
  00030	0f 94 c0	 sete	 al
  00033	eb 02		 jmp	 SHORT $LN3@Write
$LN1@Write:

; 251  : 	}
; 252  : 	return FALSE;

  00035	33 c0		 xor	 eax, eax
$LN3@Write:
  00037	5e		 pop	 esi

; 253  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?Write@FileWriter@@QAEHPBEK@Z ENDP			; FileWriter::Write
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteFormat@FileWriter@@QAAHPBDZZ		; FileWriter::WriteFormat
EXTRN	__imp__vsprintf_s:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogsp
;	COMDAT ?WriteFormat@FileWriter@@QAAHPBDZZ
_TEXT	SEGMENT
_buffer$ = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_format$ = 12						; size = 4
?WriteFormat@FileWriter@@QAAHPBDZZ PROC			; FileWriter::WriteFormat, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 10 00 00	 mov	 eax, 4100		; 00001004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]

; 257  : 	TCHAR buffer[4096]; 
; 258  : 
; 259  : 	va_list marker; 
; 260  : 	va_start(marker, format); 
; 261  : 	_vstprintf_s(buffer, _countof(buffer), format, marker); 

  0001b	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  0001e	50		 push	 eax
  0001f	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  00022	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00028	68 00 10 00 00	 push	 4096			; 00001000H
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__vsprintf_s

; 262  : 	va_end(marker);
; 263  : 
; 264  : 	return Write(reinterpret_cast<BYTE*>(buffer), (DWORD)(_tcslen(buffer)*sizeof(TCHAR)));

  00034	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL3@WriteForma:
  00040	8a 10		 mov	 dl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 d2		 test	 dl, dl
  00045	75 f9		 jne	 SHORT $LL3@WriteForma
  00047	2b c1		 sub	 eax, ecx
  00049	50		 push	 eax
  0004a	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00050	50		 push	 eax
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?Write@FileWriter@@QAEHPBEK@Z ; FileWriter::Write

; 265  : }

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	33 cd		 xor	 ecx, ebp
  0005d	5e		 pop	 esi
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	c9		 leave
  00064	c3		 ret	 0
?WriteFormat@FileWriter@@QAAHPBDZZ ENDP			; FileWriter::WriteFormat
_TEXT	ENDS
PUBLIC	?WriteHeader@FileWriter@@QAEXXZ			; FileWriter::WriteHeader
; Function compile flags: /Ogsp
;	COMDAT ?WriteHeader@FileWriter@@QAEXXZ
_TEXT	SEGMENT
?WriteHeader@FileWriter@@QAEXXZ PROC			; FileWriter::WriteHeader, COMDAT
; _this$ = ecx

; 269  : #ifdef _UNICODE
; 270  : 	Move(FILE_BEGIN, 0);
; 271  : 
; 272  : 	WORD BOM = 0xFEFF;
; 273  : 	Write(reinterpret_cast<BYTE*>(&BOM), sizeof(BOM));
; 274  : #endif
; 275  : }

  00000	c3		 ret	 0
?WriteHeader@FileWriter@@QAEXXZ ENDP			; FileWriter::WriteHeader
_TEXT	ENDS
PUBLIC	??1File@@UAE@XZ					; File::~File
; Function compile flags: /Ogsp
;	COMDAT ??1File@@UAE@XZ
_TEXT	SEGMENT
??1File@@UAE@XZ PROC					; File::~File, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7File@@6B@

; 26   : 	Close();

  00006	e9 00 00 00 00	 jmp	 ?Close@File@@QAEXXZ	; File::Close
??1File@@UAE@XZ ENDP					; File::~File
_TEXT	ENDS
PUBLIC	?Open@File@@QAEHPBDKKK@Z			; File::Open
EXTRN	__imp__CreateFileA@28:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Open@File@@QAEHPBDKKK@Z
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_dwMode$ = 12						; size = 4
_dwShareMode$ = 16					; size = 4
_dwCreationDisposition$ = 20				; size = 4
?Open@File@@QAEHPBDKKK@Z PROC				; File::Open, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 35   : 	Close();

  00006	e8 00 00 00 00	 call	 ?Close@File@@QAEXXZ	; File::Close

; 36   : 
; 37   : 	m_hFile	= CreateFile(	
; 38   : 		reinterpret_cast<LPCTSTR>(fileName), 
; 39   : 		dwMode,
; 40   : 		dwShareMode,
; 41   : 		NULL,
; 42   : 		dwCreationDisposition,
; 43   : 		FILE_ATTRIBUTE_NORMAL,
; 44   : 		NULL);

  0000b	6a 00		 push	 0
  0000d	68 80 00 00 00	 push	 128			; 00000080H
  00012	ff 75 14	 push	 DWORD PTR _dwCreationDisposition$[ebp]
  00015	6a 00		 push	 0
  00017	ff 75 10	 push	 DWORD PTR _dwShareMode$[ebp]
  0001a	ff 75 0c	 push	 DWORD PTR _dwMode$[ebp]
  0001d	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28

; 45   : 
; 46   : 	if(m_hFile == INVALID_HANDLE_VALUE) return FALSE;

  00026	33 c9		 xor	 ecx, ecx
  00028	83 f8 ff	 cmp	 eax, -1
  0002b	0f 95 c1	 setne	 cl
  0002e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00031	5e		 pop	 esi
  00032	8b c1		 mov	 eax, ecx

; 47   : 
; 48   : 	return (m_hFile == INVALID_HANDLE_VALUE) ? FALSE : TRUE;
; 49   : }

  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
?Open@File@@QAEHPBDKKK@Z ENDP				; File::Open
_TEXT	ENDS
PUBLIC	?Open@FileReader@@QAEHPBD@Z			; FileReader::Open
; Function compile flags: /Ogsp
;	COMDAT ?Open@FileReader@@QAEHPBD@Z
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
?Open@FileReader@@QAEHPBD@Z PROC			; FileReader::Open, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 106  : 	if(File::Open(fileName, GENERIC_WRITE | GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, OPEN_EXISTING))

  00004	6a 03		 push	 3
  00006	6a 03		 push	 3
  00008	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  0000d	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00010	8b f1		 mov	 esi, ecx
  00012	e8 00 00 00 00	 call	 ?Open@File@@QAEHPBDKKK@Z ; File::Open
  00017	85 c0		 test	 eax, eax
  00019	74 12		 je	 SHORT $LN1@Open

; 107  : 	{
; 108  : 		return (GetBOM() > 0) ? TRUE : FALSE;

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?GetBOM@FileReader@@QAEHXZ ; FileReader::GetBOM
  00022	33 c9		 xor	 ecx, ecx
  00024	85 c0		 test	 eax, eax
  00026	0f 9f c1	 setg	 cl
  00029	8b c1		 mov	 eax, ecx
  0002b	eb 02		 jmp	 SHORT $LN2@Open
$LN1@Open:

; 109  : 	}
; 110  : 	return FALSE;

  0002d	33 c0		 xor	 eax, eax
$LN2@Open:
  0002f	5e		 pop	 esi

; 111  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?Open@FileReader@@QAEHPBD@Z ENDP			; FileReader::Open
_TEXT	ENDS
PUBLIC	?Open@FileWriter@@QAEHPBDK@Z			; FileWriter::Open
; Function compile flags: /Ogsp
;	COMDAT ?Open@FileWriter@@QAEHPBDK@Z
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_diposition$ = 12					; size = 4
?Open@FileWriter@@QAEHPBDK@Z PROC			; FileWriter::Open, COMDAT
; _this$ = ecx

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 225  : 	if(0 == diposition)

  00003	83 7d 0c 00	 cmp	 DWORD PTR _diposition$[ebp], 0
  00007	75 07		 jne	 SHORT $LN2@Open@2

; 226  : 	{
; 227  : 		diposition = CREATE_NEW;

  00009	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR _diposition$[ebp], 1
$LN2@Open@2:

; 228  : 	}
; 229  : 
; 230  : 	if(File::Open(fileName, GENERIC_WRITE | GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, diposition))

  00010	ff 75 0c	 push	 DWORD PTR _diposition$[ebp]
  00013	6a 03		 push	 3
  00015	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  0001a	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Open@File@@QAEHPBDKKK@Z ; File::Open
  00022	f7 d8		 neg	 eax
  00024	1b c0		 sbb	 eax, eax
  00026	f7 d8		 neg	 eax

; 231  : 	{
; 232  : 		WriteHeader();
; 233  : 		return TRUE;
; 234  : 	}
; 235  : 	return FALSE;
; 236  : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?Open@FileWriter@@QAEHPBDK@Z ENDP			; FileWriter::Open
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GFile@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFile@@UAEPAXI@Z PROC				; File::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7File@@6B@
  0000c	e8 00 00 00 00	 call	 ?Close@File@@QAEXXZ	; File::Close
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GFile@@UAEPAXI@Z ENDP				; File::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0File@@QAE@PBDKKK@Z				; File::File
; Function compile flags: /Ogsp
;	COMDAT ??0File@@QAE@PBDKKK@Z
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_dwMode$ = 12						; size = 4
_dwShareMode$ = 16					; size = 4
_dwCreationDisposition$ = 20				; size = 4
??0File@@QAE@PBDKKK@Z PROC				; File::File, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 21   : 	Open(fileName, dwMode, dwShareMode, dwCreationDisposition);

  00004	ff 75 14	 push	 DWORD PTR _dwCreationDisposition$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 10	 push	 DWORD PTR _dwShareMode$[ebp]
  0000c	83 4e 04 ff	 or	 DWORD PTR [esi+4], -1
  00010	ff 75 0c	 push	 DWORD PTR _dwMode$[ebp]
  00013	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00017	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  0001a	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7File@@6B@
  00024	e8 00 00 00 00	 call	 ?Open@File@@QAEHPBDKKK@Z ; File::Open

; 22   : }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??0File@@QAE@PBDKKK@Z ENDP				; File::File
_TEXT	ENDS
PUBLIC	??_7FileReader@@6B@				; FileReader::`vftable'
PUBLIC	??0FileReader@@QAE@PBD@Z			; FileReader::FileReader
PUBLIC	??_R4FileReader@@6B@				; FileReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileReader@@@8				; FileReader `RTTI Type Descriptor'
PUBLIC	??_R3FileReader@@8				; FileReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileReader@@8				; FileReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileReader@@8			; FileReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EFileReader@@UAEPAXI@Z:PROC			; FileReader::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@FileReader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileReader@@8 DD FLAT:??_R0?AVFileReader@@@8 ; FileReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileReader@@8
rdata$r	ENDS
;	COMDAT ??_R2FileReader@@8
rdata$r	SEGMENT
??_R2FileReader@@8 DD FLAT:??_R1A@?0A@EA@FileReader@@8	; FileReader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@File@@8
rdata$r	ENDS
;	COMDAT ??_R3FileReader@@8
rdata$r	SEGMENT
??_R3FileReader@@8 DD 00H				; FileReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileReader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileReader@@@8
_DATA	SEGMENT
??_R0?AVFileReader@@@8 DD FLAT:??_7type_info@@6B@	; FileReader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileReader@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileReader@@6B@
rdata$r	SEGMENT
??_R4FileReader@@6B@ DD 00H				; FileReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileReader@@@8
	DD	FLAT:??_R3FileReader@@8
rdata$r	ENDS
;	COMDAT ??_7FileReader@@6B@
CONST	SEGMENT
??_7FileReader@@6B@ DD FLAT:??_R4FileReader@@6B@	; FileReader::`vftable'
	DD	FLAT:??_EFileReader@@UAEPAXI@Z
	DD	FLAT:?GetFileSize@FileReader@@UAEKXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0FileReader@@QAE@PBD@Z
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
??0FileReader@@QAE@PBD@Z PROC				; FileReader::FileReader, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 4e 04 ff	 or	 DWORD PTR [esi+4], -1
  0000a	83 4e 10 ff	 or	 DWORD PTR [esi+16], -1
  0000e	33 c0		 xor	 eax, eax
  00010	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00013	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7FileReader@@6B@

; 98   : 	if(fileName != NULL)

  0001c	39 45 08	 cmp	 DWORD PTR _fileName$[ebp], eax
  0001f	74 08		 je	 SHORT $LN1@FileReader

; 99   : 	{
; 100  : 		Open(fileName);

  00021	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00024	e8 00 00 00 00	 call	 ?Open@FileReader@@QAEHPBD@Z ; FileReader::Open
$LN1@FileReader:

; 101  : 	}
; 102  : }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??0FileReader@@QAE@PBD@Z ENDP				; FileReader::FileReader
_TEXT	ENDS
PUBLIC	??1FileReader@@UAE@XZ				; FileReader::~FileReader
; Function compile flags: /Ogsp
;	COMDAT ??1FileReader@@UAE@XZ
_TEXT	SEGMENT
??1FileReader@@UAE@XZ PROC				; FileReader::~FileReader, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7File@@6B@
  00006	e9 00 00 00 00	 jmp	 ?Close@File@@QAEXXZ	; File::Close
??1FileReader@@UAE@XZ ENDP				; FileReader::~FileReader
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GFileReader@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFileReader@@UAEPAXI@Z PROC				; FileReader::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7File@@6B@
  0000c	e8 00 00 00 00	 call	 ?Close@File@@QAEXXZ	; File::Close
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@2
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@2:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GFileReader@@UAEPAXI@Z ENDP				; FileReader::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileWriter@@6B@				; FileWriter::`vftable'
PUBLIC	??0FileWriter@@QAE@PBD@Z			; FileWriter::FileWriter
PUBLIC	??_R4FileWriter@@6B@				; FileWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileWriter@@@8				; FileWriter `RTTI Type Descriptor'
PUBLIC	??_R3FileWriter@@8				; FileWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileWriter@@8				; FileWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileWriter@@8			; FileWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EFileWriter@@UAEPAXI@Z:PROC			; FileWriter::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@FileWriter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileWriter@@8 DD FLAT:??_R0?AVFileWriter@@@8 ; FileWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileWriter@@8
rdata$r	ENDS
;	COMDAT ??_R2FileWriter@@8
rdata$r	SEGMENT
??_R2FileWriter@@8 DD FLAT:??_R1A@?0A@EA@FileWriter@@8	; FileWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@File@@8
rdata$r	ENDS
;	COMDAT ??_R3FileWriter@@8
rdata$r	SEGMENT
??_R3FileWriter@@8 DD 00H				; FileWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileWriter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileWriter@@@8
_DATA	SEGMENT
??_R0?AVFileWriter@@@8 DD FLAT:??_7type_info@@6B@	; FileWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileWriter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileWriter@@6B@
rdata$r	SEGMENT
??_R4FileWriter@@6B@ DD 00H				; FileWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileWriter@@@8
	DD	FLAT:??_R3FileWriter@@8
rdata$r	ENDS
;	COMDAT ??_7FileWriter@@6B@
CONST	SEGMENT
??_7FileWriter@@6B@ DD FLAT:??_R4FileWriter@@6B@	; FileWriter::`vftable'
	DD	FLAT:??_EFileWriter@@UAEPAXI@Z
	DD	FLAT:?GetFileSize@File@@UAEKXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0FileWriter@@QAE@PBD@Z
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
??0FileWriter@@QAE@PBD@Z PROC				; FileWriter::FileWriter, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 4e 04 ff	 or	 DWORD PTR [esi+4], -1
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000f	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7FileWriter@@6B@

; 217  : 	if(fileName != NULL)

  00018	39 45 08	 cmp	 DWORD PTR _fileName$[ebp], eax
  0001b	74 09		 je	 SHORT $LN1@FileWriter

; 218  : 	{
; 219  : 		Open(fileName);

  0001d	50		 push	 eax
  0001e	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00021	e8 00 00 00 00	 call	 ?Open@FileWriter@@QAEHPBDK@Z ; FileWriter::Open
$LN1@FileWriter:

; 220  : 	}
; 221  : }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0FileWriter@@QAE@PBD@Z ENDP				; FileWriter::FileWriter
_TEXT	ENDS
PUBLIC	??1FileWriter@@UAE@XZ				; FileWriter::~FileWriter
; Function compile flags: /Ogsp
;	COMDAT ??1FileWriter@@UAE@XZ
_TEXT	SEGMENT
??1FileWriter@@UAE@XZ PROC				; FileWriter::~FileWriter, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7File@@6B@
  00006	e9 00 00 00 00	 jmp	 ?Close@File@@QAEXXZ	; File::Close
??1FileWriter@@UAE@XZ ENDP				; FileWriter::~FileWriter
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GFileWriter@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFileWriter@@UAEPAXI@Z PROC				; FileWriter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7File@@6B@
  0000c	e8 00 00 00 00	 call	 ?Close@File@@QAEXXZ	; File::Close
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@3
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@3:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GFileWriter@@UAEPAXI@Z ENDP				; FileWriter::`scalar deleting destructor'
_TEXT	ENDS
END
