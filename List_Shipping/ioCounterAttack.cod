; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioCounterAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ	; ioBaseChar::GetMoveDir
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ PROC	; ioBaseChar::GetMoveDir, COMDAT
; _this$ = ecx

; 2596 : 	inline const D3DXVECTOR3& GetMoveDir() const { return m_vMoveDir; }

  00000	8d 81 b4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1716]
  00006	c3		 ret	 0
?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ ENDP	; ioBaseChar::GetMoveDir
_TEXT	ENDS
PUBLIC	?IsDirKeyDoubleClick@ioBaseChar@@QBE_NXZ	; ioBaseChar::IsDirKeyDoubleClick
EXTRN	?IsDirDoubleClick@ioUserKeyInput@@QBE_NXZ:PROC	; ioUserKeyInput::IsDirDoubleClick
; Function compile flags: /Ogsp
;	COMDAT ?IsDirKeyDoubleClick@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?IsDirKeyDoubleClick@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::IsDirKeyDoubleClick, COMDAT
; _this$ = ecx

; 3398 : 	bool IsDirKeyDoubleClick() const { return m_KeyInput.IsDirDoubleClick(); }

  00000	81 c1 80 0c 00
	00		 add	 ecx, 3200		; 00000c80H
  00006	e9 00 00 00 00	 jmp	 ?IsDirDoubleClick@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDirDoubleClick
?IsDirKeyDoubleClick@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::IsDirKeyDoubleClick
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?ApplyCAT@ioCounterAttack@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioCounterAttack::ApplyCAT
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
;	COMDAT ?ApplyCAT@ioCounterAttack@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_rkPacket$ = 12						; size = 4
?ApplyCAT@ioCounterAttack@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z PROC ; ioCounterAttack::ApplyCAT, COMDAT
; _this$ = ecx

; 37   : }

  00000	c2 08 00	 ret	 8
?ApplyCAT@ioCounterAttack@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ENDP ; ioCounterAttack::ApplyCAT
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?StartCAT@ioCounterAttack@@UAE_NPAVioBaseChar@@H@Z ; ioCounterAttack::StartCAT
EXTRN	?SetCounterAttackByAttribute@ioBaseChar@@QAEXABUAttackAttribute@@@Z:PROC ; ioBaseChar::SetCounterAttackByAttribute
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
;	COMDAT ?StartCAT@ioCounterAttack@@UAE_NPAVioBaseChar@@H@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_iCounterAttackKeyState$ = 12				; size = 4
?StartCAT@ioCounterAttack@@UAE_NPAVioBaseChar@@H@Z PROC	; ioCounterAttack::StartCAT, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 	if( !pOwner )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 42   : 		return false;

  0000a	74 23		 je	 SHORT $LN2@StartCAT

; 43   : 
; 44   : 	if ( iCounterAttackKeyState == CAKS_ATTACK_KEY )

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _iCounterAttackKeyState$[ebp], 0
  00010	75 1d		 jne	 SHORT $LN2@StartCAT

; 45   : 	{
; 46   : 		pOwner->SetCounterAttackByAttribute( m_CounterAttack );

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00015	57		 push	 edi
  00016	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ?SetCounterAttackByAttribute@ioBaseChar@@QAEXABUAttackAttribute@@@Z ; ioBaseChar::SetCounterAttackByAttribute

; 47   : 
; 48   : 		SetInputSpecialDash( pOwner, m_CounterAttack );

  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	57		 push	 edi
  00022	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00025	8b ce		 mov	 ecx, esi
  00027	ff 50 28	 call	 DWORD PTR [eax+40]

; 49   : 
; 50   : 		return true;

  0002a	b0 01		 mov	 al, 1
  0002c	5f		 pop	 edi
  0002d	eb 02		 jmp	 SHORT $LN1@StartCAT
$LN2@StartCAT:

; 51   : 	}
; 52   : 	else
; 53   : 		return false;

  0002f	32 c0		 xor	 al, al
$LN1@StartCAT:
  00031	5e		 pop	 esi

; 54   : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?StartCAT@ioCounterAttack@@UAE_NPAVioBaseChar@@H@Z ENDP	; ioCounterAttack::StartCAT
_TEXT	ENDS
PUBLIC	?ProcessCAT@ioCounterAttack@@UAEXPAVioBaseChar@@@Z ; ioCounterAttack::ProcessCAT
; Function compile flags: /Ogsp
;	COMDAT ?ProcessCAT@ioCounterAttack@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ProcessCAT@ioCounterAttack@@UAEXPAVioBaseChar@@@Z PROC	; ioCounterAttack::ProcessCAT, COMDAT
; _this$ = ecx

; 59   : }

  00000	c2 04 00	 ret	 4
?ProcessCAT@ioCounterAttack@@UAEXPAVioBaseChar@@@Z ENDP	; ioCounterAttack::ProcessCAT
_TEXT	ENDS
PUBLIC	?CheckInputSpecialDash@ioCounterAttack@@UAE_NPAVioBaseChar@@@Z ; ioCounterAttack::CheckInputSpecialDash
EXTRN	?CheckCurDirKey@ioBaseChar@@QAE?AW4DirKeyInput@ioUserKeyInput@@XZ:PROC ; ioBaseChar::CheckCurDirKey
EXTRN	?GetPriorityItem@ioBaseChar@@QBEPAVioAttackableItem@@W4StatePriorityType@@@Z:PROC ; ioBaseChar::GetPriorityItem
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?CheckInputSpecialDash@ioCounterAttack@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckInputSpecialDash@ioCounterAttack@@UAE_NPAVioBaseChar@@@Z PROC ; ioCounterAttack::CheckInputSpecialDash, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 159  : 	if ( m_dwInputSpecialDashTime && m_dwInputSpecialDashTime < FRAMEGETTIME() )

  00005	8d b1 c4 00 00
	00		 lea	 esi, DWORD PTR [ecx+196]
  0000b	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000e	74 68		 je	 SHORT $LN1@CheckInput
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00016	8b c8		 mov	 ecx, eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0001e	39 06		 cmp	 DWORD PTR [esi], eax
  00020	73 56		 jae	 SHORT $LN1@CheckInput

; 160  : 	{
; 161  : 		ioAttackableItem *pAttack = pOwner->GetPriorityItem( SPT_ATTACK );

  00022	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00025	6a 05		 push	 5
  00027	8b cb		 mov	 ecx, ebx
  00029	e8 00 00 00 00	 call	 ?GetPriorityItem@ioBaseChar@@QBEPAVioAttackableItem@@W4StatePriorityType@@@Z ; ioBaseChar::GetPriorityItem
  0002e	8b f0		 mov	 esi, eax

; 162  : 		if( pAttack && pAttack->IsConditionalSpecialDashReserve( pOwner ) && pOwner->IsDirKeyDoubleClick() 
; 163  : 			&& pOwner->CheckCurDirKey() != ioUserKeyInput::DKI_NONE )

  00030	85 f6		 test	 esi, esi
  00032	74 44		 je	 SHORT $LN1@CheckInput
  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	53		 push	 ebx
  00037	8b ce		 mov	 ecx, esi
  00039	ff 90 58 02 00
	00		 call	 DWORD PTR [eax+600]
  0003f	84 c0		 test	 al, al
  00041	74 35		 je	 SHORT $LN1@CheckInput
  00043	8d 8b 80 0c 00
	00		 lea	 ecx, DWORD PTR [ebx+3200]
  00049	e8 00 00 00 00	 call	 ?IsDirDoubleClick@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDirDoubleClick
  0004e	84 c0		 test	 al, al
  00050	74 26		 je	 SHORT $LN1@CheckInput
  00052	8b cb		 mov	 ecx, ebx
  00054	e8 00 00 00 00	 call	 ?CheckCurDirKey@ioBaseChar@@QAE?AW4DirKeyInput@ioUserKeyInput@@XZ ; ioBaseChar::CheckCurDirKey
  00059	85 c0		 test	 eax, eax
  0005b	74 1b		 je	 SHORT $LN1@CheckInput

; 164  : 		{
; 165  : 			pAttack->SetChangeConditionalSpecialDash( pOwner, pOwner->CheckCurDirKey(), ioAttackableItem::CCSD_COUNTER_ATTACK );

  0005d	57		 push	 edi
  0005e	8b 3e		 mov	 edi, DWORD PTR [esi]
  00060	6a 05		 push	 5
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?CheckCurDirKey@ioBaseChar@@QAE?AW4DirKeyInput@ioUserKeyInput@@XZ ; ioBaseChar::CheckCurDirKey
  00069	50		 push	 eax
  0006a	53		 push	 ebx
  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 97 5c 02 00
	00		 call	 DWORD PTR [edi+604]

; 166  : 			return true;

  00073	b0 01		 mov	 al, 1
  00075	5f		 pop	 edi
  00076	eb 02		 jmp	 SHORT $LN3@CheckInput
$LN1@CheckInput:

; 167  : 		}
; 168  : 	}
; 169  : 
; 170  : 	return false;

  00078	32 c0		 xor	 al, al
$LN3@CheckInput:
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx

; 171  : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?CheckInputSpecialDash@ioCounterAttack@@UAE_NPAVioBaseChar@@@Z ENDP ; ioCounterAttack::CheckInputSpecialDash
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
PUBLIC	??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[], COMDAT
; _this$ = ecx

; 912  : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 914  : 		if (size() <= _Pos)
; 915  : 			{	// report error
; 916  : 			_DEBUG_ERROR("vector subscript out of range");
; 917  : 			_SCL_SECURE_OUT_OF_RANGE;
; 918  : 			}
; 919  : 
; 920  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 921  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 922  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 923  : 
; 924  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 925  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::operator[]
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::~_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::~_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::~_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ PROC	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ ENDP	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::~_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::~_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::~_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ PROC	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ ENDP	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z ; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z ; std::allocator<AniRotateInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z PROC ; std::allocator<AniRotateInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z ENDP ; std::allocator<AniRotateInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z ; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z PROC	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z ; std::allocator<AniEventTime const *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z PROC ; std::allocator<AniEventTime const *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z ENDP ; std::allocator<AniEventTime const *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ ; std::allocator<AniRotateInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ PROC	; std::allocator<AniRotateInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ ENDP	; std::allocator<AniRotateInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
EXTRN	__fltused:DWORD
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z ; std::addressof<AniRotateInfo const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z PROC ; std::addressof<AniRotateInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z ENDP ; std::addressof<AniRotateInfo const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ; std::_Allocate<AniRotateInfo>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T526967 = -12						; size = 12
$T526972 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z PROC ; std::_Allocate<AniRotateInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 03	 shl	 eax, 3
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T526972[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T526972[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T526967[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T526967[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T526967[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ENDP ; std::_Allocate<AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z ; std::forward<AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z PROC ; std::forward<AniRotateInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z ENDP ; std::forward<AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z ; std::allocator<AniRotateInfo>::construct<AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z PROC ; std::allocator<AniRotateInfo>::construct<AniRotateInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z ENDP ; std::allocator<AniRotateInfo>::construct<AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z ; std::forward<AniRotateInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z PROC ; std::forward<AniRotateInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z ENDP ; std::forward<AniRotateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z ; std::_Ptr_cat<AniRotateInfo,AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z PROC ; std::_Ptr_cat<AniRotateInfo,AniRotateInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z ENDP ; std::_Ptr_cat<AniRotateInfo,AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z ; std::_Ptr_cat<AniEventTime const *,AniEventTime const *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z PROC ; std::_Ptr_cat<AniEventTime const *,AniEventTime const *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z ENDP ; std::_Ptr_cat<AniEventTime const *,AniEventTime const *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<AniEventTime const *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z ; std::_Construct<AniRotateInfo,AniRotateInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z PROC ; std::_Construct<AniRotateInfo,AniRotateInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z ENDP ; std::_Construct<AniRotateInfo,AniRotateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ; std::move<AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z PROC ; std::move<AniRotateInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ENDP ; std::move<AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z ; std::_Val_type<AniRotateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z PROC ; std::_Val_type<AniRotateInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z ENDP ; std::_Val_type<AniRotateInfo *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 28	 add	 DWORD PTR [eax], 40	; 00000028H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 0c	 add	 DWORD PTR [eax], 12	; 0000000cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z ; std::_Destroy<AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z PROC ; std::_Destroy<AniRotateInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z ENDP ; std::_Destroy<AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ; std::forward<AniRotateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z PROC ; std::forward<AniRotateInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ENDP ; std::forward<AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct@2:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	??0AniRotateInfo@@QAE@XZ			; AniRotateInfo::AniRotateInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
;	COMDAT ??0AniRotateInfo@@QAE@XZ
_TEXT	SEGMENT
??0AniRotateInfo@@QAE@XZ PROC				; AniRotateInfo::AniRotateInfo, COMDAT
; _this$ = ecx

; 1071 : 	{
; 1072 : 		m_dwTime = 0;
; 1073 : 		m_fAngle = 0.0f;

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	8b c1		 mov	 eax, ecx
  00005	83 20 00	 and	 DWORD PTR [eax], 0
  00008	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1074 : 	}

  0000d	c3		 ret	 0
??0AniRotateInfo@@QAE@XZ ENDP				; AniRotateInfo::AniRotateInfo
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@XZ	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ PROC		; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ ENDP		; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@XZ		; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UForceInfo@@@std@@QAE@XZ PROC		; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UForceInfo@@@std@@QAE@XZ ENDP		; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z	; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside@2
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside@2
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside@2:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside@2
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside@2
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside@2
$LN12@Inside@2:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside@2:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside@2

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside@2
$LN2@Inside@2:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside@2:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T527170 = -12						; size = 12
$T527174 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate@2
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T527174[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T527174[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T527170[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T527170[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T527170[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@4:
$LN3@Xlen@4:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T527228 = -12						; size = 12
$T527232 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T527232[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T527232[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T527228[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T527228[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T527228[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T527237 = -12						; size = 12
$T527241 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@4
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T527241[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T527241[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T527237[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T527237[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T527237[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?CheckAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@@Z ; ioCounterAttack::CheckAniRotate
EXTRN	?SetTargetRotAndMoveDirChange@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N@Z:PROC ; ioBaseChar::SetTargetRotAndMoveDirChange
EXTRN	__imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@00000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
CONST	ENDS
;	COMDAT ?CheckAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_qtTargetRot$524313 = -60				; size = 16
_qtRot$524306 = -44					; size = 16
_vMoveDir$524311 = -28					; size = 12
$T524314 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pChar$ = 8						; size = 4
?CheckAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@@Z PROC ; ioCounterAttack::CheckAniRotate, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 122  : 	if( !pChar ) return;

  00017	85 ff		 test	 edi, edi
  00019	0f 84 20 01 00
	00		 je	 $LN1@CheckAniRo

; 123  : 	if( m_vAniRotateInfoList.empty() ) return;

  0001f	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  00025	3b 86 a8 00 00
	00		 cmp	 eax, DWORD PTR [esi+168]
  0002b	0f 84 0e 01 00
	00		 je	 $LN1@CheckAniRo

; 124  : 
; 125  : 	DWORD dwCurTime = FRAMEGETTIME();

  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 126  : 	if( m_dwAniRotateTime > 0 && m_dwAniRotateTime < dwCurTime )

  0003f	8b 8e b8 00 00
	00		 mov	 ecx, DWORD PTR [esi+184]
  00045	85 c9		 test	 ecx, ecx
  00047	0f 84 f2 00 00
	00		 je	 $LN1@CheckAniRo
  0004d	3b c8		 cmp	 ecx, eax
  0004f	0f 83 ea 00 00
	00		 jae	 $LN1@CheckAniRo

; 127  : 	{
; 128  : 		if( m_fAniRotateAngle > 0.0f )

  00055	f3 0f 10 86 bc
	00 00 00	 movss	 xmm0, DWORD PTR [esi+188]
  0005d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00064	0f 86 86 00 00
	00		 jbe	 $LN3@CheckAniRo

; 129  : 		{
; 130  : 			D3DXQUATERNION qtRot;
; 131  : 			D3DXQuaternionRotationAxis( &qtRot, &ioMath::UNIT_Y, DEGtoRAD(m_fAniRotateAngle) );

  0006a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  00075	51		 push	 ecx
  00076	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  00085	8d 45 d4	 lea	 eax, DWORD PTR _qtRot$524306[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 132  : 			D3DXVECTOR3 vMoveDir = qtRot * pChar->GetMoveDir();

  0008e	8d 87 b4 06 00
	00		 lea	 eax, DWORD PTR [edi+1716]
  00094	50		 push	 eax
  00095	8d 45 d4	 lea	 eax, DWORD PTR _qtRot$524306[ebp]
  00098	50		 push	 eax
  00099	8d 45 e4	 lea	 eax, DWORD PTR _vMoveDir$524311[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 133  : 
; 134  : 			D3DXQUATERNION qtTargetRot;
; 135  : 			ioMath::CalcDirectionQuaternion( qtTargetRot, -vMoveDir );

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  000ab	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vMoveDir$524311[ebp]
  000b0	0f 57 c8	 xorps	 xmm1, xmm0
  000b3	f3 0f 11 4d f0	 movss	 DWORD PTR $T524314[ebp], xmm1
  000b8	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vMoveDir$524311[ebp+4]
  000bd	0f 57 c8	 xorps	 xmm1, xmm0
  000c0	8d 45 f0	 lea	 eax, DWORD PTR $T524314[ebp]
  000c3	50		 push	 eax
  000c4	f3 0f 11 4d f4	 movss	 DWORD PTR $T524314[ebp+4], xmm1
  000c9	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vMoveDir$524311[ebp+8]
  000ce	8d 45 c4	 lea	 eax, DWORD PTR _qtTargetRot$524313[ebp]
  000d1	0f 57 c8	 xorps	 xmm1, xmm0
  000d4	50		 push	 eax
  000d5	f3 0f 11 4d f8	 movss	 DWORD PTR $T524314[ebp+8], xmm1
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z
  000e0	83 c4 14	 add	 esp, 20			; 00000014H

; 136  : 
; 137  : 			pChar->SetTargetRotAndMoveDirChange( qtTargetRot );

  000e3	6a 00		 push	 0
  000e5	8d 45 c4	 lea	 eax, DWORD PTR _qtTargetRot$524313[ebp]
  000e8	50		 push	 eax
  000e9	8b cf		 mov	 ecx, edi
  000eb	e8 00 00 00 00	 call	 ?SetTargetRotAndMoveDirChange@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N@Z ; ioBaseChar::SetTargetRotAndMoveDirChange
$LN3@CheckAniRo:

; 138  : 		}
; 139  : 
; 140  : 		m_iCurAniRotate++;

  000f0	ff 86 b4 00 00
	00		 inc	 DWORD PTR [esi+180]
  000f6	8b 86 b4 00 00
	00		 mov	 eax, DWORD PTR [esi+180]

; 143  : 		if( COMPARE(m_iCurAniRotate, 0, iSize) )

  000fc	78 2f		 js	 SHORT $LN2@CheckAniRo

; 141  : 
; 142  : 		int iSize = m_vAniRotateInfoList.size();

  000fe	8b 8e a8 00 00
	00		 mov	 ecx, DWORD PTR [esi+168]
  00104	2b 8e a4 00 00
	00		 sub	 ecx, DWORD PTR [esi+164]
  0010a	c1 f9 03	 sar	 ecx, 3

; 143  : 		if( COMPARE(m_iCurAniRotate, 0, iSize) )

  0010d	3b c1		 cmp	 eax, ecx
  0010f	7d 1c		 jge	 SHORT $LN2@CheckAniRo

; 144  : 		{
; 145  : 			m_dwAniRotateTime = m_vAniRotateInfoList[m_iCurAniRotate].m_dwTime;

  00111	8b 8e a4 00 00
	00		 mov	 ecx, DWORD PTR [esi+164]
  00117	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	89 8e b8 00 00
	00		 mov	 DWORD PTR [esi+184], ecx

; 146  : 			m_fAniRotateAngle = m_vAniRotateInfoList[m_iCurAniRotate].m_fAngle;

  00122	d9 40 04	 fld	 DWORD PTR [eax+4]
  00125	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]

; 147  : 		}
; 148  : 		else

  0012b	eb 12		 jmp	 SHORT $LN1@CheckAniRo
$LN2@CheckAniRo:

; 149  : 		{
; 150  : 			m_dwAniRotateTime = 0;
; 151  : 			m_fAniRotateAngle = 0.0f;

  0012d	0f 57 c0	 xorps	 xmm0, xmm0
  00130	83 a6 b8 00 00
	00 00		 and	 DWORD PTR [esi+184], 0
  00137	f3 0f 11 86 bc
	00 00 00	 movss	 DWORD PTR [esi+188], xmm0
$LN1@CheckAniRo:

; 152  : 
; 153  : 		}
; 154  : 	}
; 155  : }

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00142	5f		 pop	 edi
  00143	33 cd		 xor	 ecx, ebp
  00145	5e		 pop	 esi
  00146	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014b	c9		 leave
  0014c	c2 04 00	 ret	 4
?CheckAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@@Z ENDP ; ioCounterAttack::CheckAniRotate
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z PROC ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z ENDP ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z PROC ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z ENDP ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z ; std::allocator<AniRotateInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z PROC ; std::allocator<AniRotateInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ; std::_Allocate<AniRotateInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z ENDP ; std::allocator<AniRotateInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadAttackAttribute_e@$0P@@@YAXAAY0P@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute_e<15>
EXTRN	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:PROC ; LoadAttackAttribute
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??$LoadAttackAttribute_e@$0P@@@YAXAAY0P@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z
_TEXT	SEGMENT
_szEncAttack$ = -24					; size = 15
__$ArrayPad$ = -4					; size = 4
_szAttack$ = 8						; size = 4
_rkAttribute$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
??$LoadAttackAttribute_e@$0P@@@YAXAAY0P@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z PROC ; LoadAttackAttribute_e<15>, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szAttack$[ebp]

; 132  : 	_ENCSTR(szAttack, szEncAttack);

  00013	8a 08		 mov	 cl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _rkAttribute$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _rkLoader$[ebp]
  0001d	84 c9		 test	 cl, cl
  0001f	0f 84 7b 01 00
	00		 je	 $LN96@LoadAttack
  00025	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00028	88 4d e8	 mov	 BYTE PTR _szEncAttack$[ebp], cl
  0002b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002e	84 c9		 test	 cl, cl
  00030	0f 84 64 01 00
	00		 je	 $LN95@LoadAttack
  00036	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00039	88 4d e9	 mov	 BYTE PTR _szEncAttack$[ebp+1], cl
  0003c	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0003f	84 c9		 test	 cl, cl
  00041	0f 84 4d 01 00
	00		 je	 $LN94@LoadAttack
  00047	80 f1 eb	 xor	 cl, -21			; ffffffebH
  0004a	88 4d ea	 mov	 BYTE PTR _szEncAttack$[ebp+2], cl
  0004d	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00050	84 c9		 test	 cl, cl
  00052	0f 84 36 01 00
	00		 je	 $LN93@LoadAttack
  00058	b2 ea		 mov	 dl, -22			; ffffffeaH
  0005a	32 ca		 xor	 cl, dl
  0005c	88 4d eb	 mov	 BYTE PTR _szEncAttack$[ebp+3], cl
  0005f	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00062	84 c9		 test	 cl, cl
  00064	0f 84 1e 01 00
	00		 je	 $LN92@LoadAttack
  0006a	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0006d	88 4d ec	 mov	 BYTE PTR _szEncAttack$[ebp+4], cl
  00070	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00073	84 c9		 test	 cl, cl
  00075	0f 84 07 01 00
	00		 je	 $LN91@LoadAttack
  0007b	80 f1 ec	 xor	 cl, -20			; ffffffecH
  0007e	88 4d ed	 mov	 BYTE PTR _szEncAttack$[ebp+5], cl
  00081	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00084	84 c9		 test	 cl, cl
  00086	0f 84 f0 00 00
	00		 je	 $LN90@LoadAttack
  0008c	80 f1 eb	 xor	 cl, -21			; ffffffebH
  0008f	88 4d ee	 mov	 BYTE PTR _szEncAttack$[ebp+6], cl
  00092	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00095	84 c9		 test	 cl, cl
  00097	0f 84 da 00 00
	00		 je	 $LN89@LoadAttack
  0009d	32 ca		 xor	 cl, dl
  0009f	88 4d ef	 mov	 BYTE PTR _szEncAttack$[ebp+7], cl
  000a2	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  000a5	84 c9		 test	 cl, cl
  000a7	0f 84 c4 00 00
	00		 je	 $LN88@LoadAttack
  000ad	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000b0	88 4d f0	 mov	 BYTE PTR _szEncAttack$[ebp+8], cl
  000b3	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000b6	84 c9		 test	 cl, cl
  000b8	0f 84 ad 00 00
	00		 je	 $LN87@LoadAttack
  000be	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000c1	88 4d f1	 mov	 BYTE PTR _szEncAttack$[ebp+9], cl
  000c4	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000c7	84 c9		 test	 cl, cl
  000c9	0f 84 96 00 00
	00		 je	 $LN86@LoadAttack
  000cf	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000d2	88 4d f2	 mov	 BYTE PTR _szEncAttack$[ebp+10], cl
  000d5	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000d8	84 c9		 test	 cl, cl
  000da	0f 84 80 00 00
	00		 je	 $LN85@LoadAttack
  000e0	32 ca		 xor	 cl, dl
  000e2	88 4d f3	 mov	 BYTE PTR _szEncAttack$[ebp+11], cl
  000e5	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  000e8	84 c9		 test	 cl, cl
  000ea	74 6e		 je	 SHORT $LN84@LoadAttack
  000ec	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000ef	88 4d f4	 mov	 BYTE PTR _szEncAttack$[ebp+12], cl
  000f2	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000f5	84 c9		 test	 cl, cl
  000f7	74 5b		 je	 SHORT $LN83@LoadAttack
  000f9	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000fc	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  00100	88 4d f5	 mov	 BYTE PTR _szEncAttack$[ebp+13], cl
  00103	0f 84 9b 00 00
	00		 je	 $LN1@LoadAttack
  00109	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  0010c	84 c9		 test	 cl, cl
  0010e	74 3f		 je	 SHORT $LN81@LoadAttack
  00110	32 ca		 xor	 cl, dl
  00112	88 4d f7	 mov	 BYTE PTR _szEncAttack$[ebp+15], cl
  00115	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  00118	84 c9		 test	 cl, cl
  0011a	74 2d		 je	 SHORT $LN80@LoadAttack
  0011c	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0011f	88 4d f8	 mov	 BYTE PTR _szEncAttack$[ebp+16], cl
  00122	8a 48 11	 mov	 cl, BYTE PTR [eax+17]
  00125	84 c9		 test	 cl, cl
  00127	74 1a		 je	 SHORT $LN79@LoadAttack
  00129	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  0012c	80 f1 ec	 xor	 cl, -20			; ffffffecH
  0012f	88 4d f9	 mov	 BYTE PTR _szEncAttack$[ebp+17], cl
  00132	84 c0		 test	 al, al
  00134	74 07		 je	 SHORT $LN78@LoadAttack
  00136	34 eb		 xor	 al, -21			; ffffffebH
  00138	88 45 fa	 mov	 BYTE PTR _szEncAttack$[ebp+18], al
  0013b	eb 67		 jmp	 SHORT $LN1@LoadAttack
$LN78@LoadAttack:
  0013d	c6 45 fa eb	 mov	 BYTE PTR _szEncAttack$[ebp+18], -21 ; ffffffebH
  00141	eb 61		 jmp	 SHORT $LN1@LoadAttack
$LN79@LoadAttack:
  00143	c6 45 f9 ec	 mov	 BYTE PTR _szEncAttack$[ebp+17], -20 ; ffffffecH
  00147	eb 5b		 jmp	 SHORT $LN1@LoadAttack
$LN80@LoadAttack:
  00149	c6 45 f8 ed	 mov	 BYTE PTR _szEncAttack$[ebp+16], -19 ; ffffffedH
  0014d	eb 55		 jmp	 SHORT $LN1@LoadAttack
$LN81@LoadAttack:
  0014f	88 55 f7	 mov	 BYTE PTR _szEncAttack$[ebp+15], dl
  00152	eb 50		 jmp	 SHORT $LN1@LoadAttack
$LN83@LoadAttack:
  00154	c6 45 f5 ec	 mov	 BYTE PTR _szEncAttack$[ebp+13], -20 ; ffffffecH
  00158	eb 4a		 jmp	 SHORT $LN1@LoadAttack
$LN84@LoadAttack:
  0015a	c6 45 f4 ed	 mov	 BYTE PTR _szEncAttack$[ebp+12], -19 ; ffffffedH
  0015e	eb 44		 jmp	 SHORT $LN1@LoadAttack
$LN85@LoadAttack:
  00160	88 55 f3	 mov	 BYTE PTR _szEncAttack$[ebp+11], dl
  00163	eb 3f		 jmp	 SHORT $LN1@LoadAttack
$LN86@LoadAttack:
  00165	c6 45 f2 eb	 mov	 BYTE PTR _szEncAttack$[ebp+10], -21 ; ffffffebH
  00169	eb 39		 jmp	 SHORT $LN1@LoadAttack
$LN87@LoadAttack:
  0016b	c6 45 f1 ec	 mov	 BYTE PTR _szEncAttack$[ebp+9], -20 ; ffffffecH
  0016f	eb 33		 jmp	 SHORT $LN1@LoadAttack
$LN88@LoadAttack:
  00171	c6 45 f0 ed	 mov	 BYTE PTR _szEncAttack$[ebp+8], -19 ; ffffffedH
  00175	eb 2d		 jmp	 SHORT $LN1@LoadAttack
$LN89@LoadAttack:
  00177	88 55 ef	 mov	 BYTE PTR _szEncAttack$[ebp+7], dl
  0017a	eb 28		 jmp	 SHORT $LN1@LoadAttack
$LN90@LoadAttack:
  0017c	c6 45 ee eb	 mov	 BYTE PTR _szEncAttack$[ebp+6], -21 ; ffffffebH
  00180	eb 22		 jmp	 SHORT $LN1@LoadAttack
$LN91@LoadAttack:
  00182	c6 45 ed ec	 mov	 BYTE PTR _szEncAttack$[ebp+5], -20 ; ffffffecH
  00186	eb 1c		 jmp	 SHORT $LN1@LoadAttack
$LN92@LoadAttack:
  00188	c6 45 ec ed	 mov	 BYTE PTR _szEncAttack$[ebp+4], -19 ; ffffffedH
  0018c	eb 16		 jmp	 SHORT $LN1@LoadAttack
$LN93@LoadAttack:
  0018e	c6 45 eb ea	 mov	 BYTE PTR _szEncAttack$[ebp+3], -22 ; ffffffeaH
  00192	eb 10		 jmp	 SHORT $LN1@LoadAttack
$LN94@LoadAttack:
  00194	c6 45 ea eb	 mov	 BYTE PTR _szEncAttack$[ebp+2], -21 ; ffffffebH
  00198	eb 0a		 jmp	 SHORT $LN1@LoadAttack
$LN95@LoadAttack:
  0019a	c6 45 e9 ec	 mov	 BYTE PTR _szEncAttack$[ebp+1], -20 ; ffffffecH
  0019e	eb 04		 jmp	 SHORT $LN1@LoadAttack
$LN96@LoadAttack:
  001a0	c6 45 e8 ed	 mov	 BYTE PTR _szEncAttack$[ebp], -19 ; ffffffedH
$LN1@LoadAttack:
  001a4	6a 03		 push	 3
  001a6	8d 45 e8	 lea	 eax, DWORD PTR _szEncAttack$[ebp]
  001a9	c6 45 f6 00	 mov	 BYTE PTR _szEncAttack$[ebp+14], 0
  001ad	59		 pop	 ecx
$LL104@LoadAttack:
  001ae	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b4	83 c0 04	 add	 eax, 4
  001b7	49		 dec	 ecx
  001b8	75 f4		 jne	 SHORT $LL104@LoadAttack
  001ba	6a 0c		 push	 12			; 0000000cH
  001bc	58		 pop	 eax
$LL101@LoadAttack:
  001bd	8b c8		 mov	 ecx, eax
  001bf	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001c5	79 05		 jns	 SHORT $LN111@LoadAttack
  001c7	49		 dec	 ecx
  001c8	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001cb	41		 inc	 ecx
$LN111@LoadAttack:
  001cc	b2 ed		 mov	 dl, -19			; ffffffedH
  001ce	2a d1		 sub	 dl, cl
  001d0	30 54 05 e8	 xor	 BYTE PTR _szEncAttack$[ebp+eax], dl
  001d4	40		 inc	 eax
  001d5	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001d8	7c e3		 jl	 SHORT $LL101@LoadAttack

; 133  : 	LoadAttackAttribute(szEncAttack, rkAttribute, rkLoader);

  001da	57		 push	 edi
  001db	8d 45 e8	 lea	 eax, DWORD PTR _szEncAttack$[ebp]
  001de	56		 push	 esi
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute

; 134  : }

  001e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001eb	5f		 pop	 edi
  001ec	33 cd		 xor	 ecx, ebp
  001ee	5e		 pop	 esi
  001ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f4	c9		 leave
  001f5	c3		 ret	 0
??$LoadAttackAttribute_e@$0P@@@YAXAAY0P@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z ENDP ; LoadAttackAttribute_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z ; ioINILoader::LoadBool_e<26>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -36						; size = 26
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<26>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 79 02 00
	00		 je	 $LN96@LoadBool_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 62 02 00
	00		 je	 $LN95@LoadBool_e
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 4b 02 00
	00		 je	 $LN94@LoadBool_e
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 33 02 00
	00		 je	 $LN93@LoadBool_e
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 1b 02 00
	00		 je	 $LN92@LoadBool_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 04 02 00
	00		 je	 $LN91@LoadBool_e
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 ee 01 00
	00		 je	 $LN90@LoadBool_e
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 d9 01 00
	00		 je	 $LN89@LoadBool_e
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 c3 01 00
	00		 je	 $LN88@LoadBool_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 ac 01 00
	00		 je	 $LN87@LoadBool_e
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 96 01 00
	00		 je	 $LN86@LoadBool_e
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 81 01 00
	00		 je	 $LN85@LoadBool_e
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 6b 01 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 54 01 00
	00		 je	 $LN83@LoadBool_e
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 3e 01 00
	00		 je	 $LN82@LoadBool_e
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 29 01 00
	00		 je	 $LN81@LoadBool_e
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 13 01 00
	00		 je	 $LN80@LoadBool_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 fc 00 00
	00		 je	 $LN79@LoadBool_e
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 e6 00 00
	00		 je	 $LN78@LoadBool_e
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 d1 00 00
	00		 je	 $LN77@LoadBool_e
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 bb 00 00
	00		 je	 $LN76@LoadBool_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 a4 00 00
	00		 je	 $LN75@LoadBool_e
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 8e 00 00
	00		 je	 $LN74@LoadBool_e
  00191	32 d1		 xor	 dl, cl
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	74 7d		 je	 SHORT $LN73@LoadBool_e
  0019d	32 d3		 xor	 dl, bl
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a5	84 d2		 test	 dl, dl
  001a7	74 68		 je	 SHORT $LN72@LoadBool_e
  001a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ac	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	0f 84 e5 00 00
	00		 je	 $LN1@LoadBool_e
  001b9	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bc	84 d2		 test	 dl, dl
  001be	74 49		 je	 SHORT $LN70@LoadBool_e
  001c0	32 d1		 xor	 dl, cl
  001c2	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c5	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c8	84 d2		 test	 dl, dl
  001ca	74 35		 je	 SHORT $LN69@LoadBool_e
  001cc	32 d3		 xor	 dl, bl
  001ce	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d1	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d4	84 d2		 test	 dl, dl
  001d6	74 20		 je	 SHORT $LN68@LoadBool_e
  001d8	8a 40 1d	 mov	 al, BYTE PTR [eax+29]
  001db	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001de	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e1	84 c0		 test	 al, al
  001e3	74 0a		 je	 SHORT $LN67@LoadBool_e
  001e5	34 ec		 xor	 al, -20			; ffffffecH
  001e7	88 45 f9	 mov	 BYTE PTR __k$[ebp+29], al
  001ea	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e
$LN67@LoadBool_e:
  001ef	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+29], -20 ; ffffffecH
  001f3	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e
$LN68@LoadBool_e:
  001f8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001fc	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e
$LN69@LoadBool_e:
  00201	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  00204	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e
$LN70@LoadBool_e:
  00209	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  0020c	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e
$LN72@LoadBool_e:
  00211	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00215	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e
$LN73@LoadBool_e:
  0021a	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  0021d	eb 7f		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  0021f	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00222	eb 7a		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  00224	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00228	eb 74		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  0022a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0022e	eb 6e		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00230	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  00233	eb 69		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00235	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00238	eb 64		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0023a	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0023e	eb 5e		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00240	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00244	eb 58		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00246	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00249	eb 53		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0024b	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0024e	eb 4e		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  00250	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00254	eb 48		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  00256	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0025a	eb 42		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  0025c	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  0025f	eb 3d		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  00261	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00264	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00266	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0026a	eb 32		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  0026c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00270	eb 2c		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  00272	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  00275	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00277	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  0027a	eb 22		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  0027c	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00280	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  00282	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00286	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00288	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0028c	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  0028e	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00292	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  00294	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00298	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  0029a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  0029e	6a 06		 push	 6
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+25], 0
  002a7	5a		 pop	 edx
$LL104@LoadBool_e:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	4a		 dec	 edx
  002b2	75 f4		 jne	 SHORT $LL104@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  002b4	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  002b7	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002bb	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002be	50		 push	 eax
  002bf	8b ce		 mov	 ecx, esi
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  002c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ca	5e		 pop	 esi
  002cb	33 cd		 xor	 ecx, ebp
  002cd	5b		 pop	 ebx
  002ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d3	c9		 leave
  002d4	c2 08 00	 ret	 8
??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<26>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadAttackAttribute_e@$0BI@@@YAXAAY0BI@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute_e<24>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??$LoadAttackAttribute_e@$0BI@@@YAXAAY0BI@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z
_TEXT	SEGMENT
_szEncAttack$ = -32					; size = 24
__$ArrayPad$ = -4					; size = 4
_szAttack$ = 8						; size = 4
_rkAttribute$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
??$LoadAttackAttribute_e@$0BI@@@YAXAAY0BI@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z PROC ; LoadAttackAttribute_e<24>, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szAttack$[ebp]

; 132  : 	_ENCSTR(szAttack, szEncAttack);

  00013	8a 08		 mov	 cl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _rkAttribute$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _rkLoader$[ebp]
  0001e	84 c9		 test	 cl, cl
  00020	0f 84 45 02 00
	00		 je	 $LN96@LoadAttack@2
  00026	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00029	88 4d e0	 mov	 BYTE PTR _szEncAttack$[ebp], cl
  0002c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002f	84 c9		 test	 cl, cl
  00031	0f 84 2e 02 00
	00		 je	 $LN95@LoadAttack@2
  00037	b2 ec		 mov	 dl, -20			; ffffffecH
  00039	32 ca		 xor	 cl, dl
  0003b	88 4d e1	 mov	 BYTE PTR _szEncAttack$[ebp+1], cl
  0003e	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00041	84 c9		 test	 cl, cl
  00043	0f 84 16 02 00
	00		 je	 $LN94@LoadAttack@2
  00049	b3 eb		 mov	 bl, -21			; ffffffebH
  0004b	32 cb		 xor	 cl, bl
  0004d	88 4d e2	 mov	 BYTE PTR _szEncAttack$[ebp+2], cl
  00050	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00053	84 c9		 test	 cl, cl
  00055	0f 84 fe 01 00
	00		 je	 $LN93@LoadAttack@2
  0005b	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  0005e	88 4d e3	 mov	 BYTE PTR _szEncAttack$[ebp+3], cl
  00061	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00064	84 c9		 test	 cl, cl
  00066	0f 84 e7 01 00
	00		 je	 $LN92@LoadAttack@2
  0006c	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0006f	88 4d e4	 mov	 BYTE PTR _szEncAttack$[ebp+4], cl
  00072	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00075	84 c9		 test	 cl, cl
  00077	0f 84 d1 01 00
	00		 je	 $LN91@LoadAttack@2
  0007d	32 ca		 xor	 cl, dl
  0007f	88 4d e5	 mov	 BYTE PTR _szEncAttack$[ebp+5], cl
  00082	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00085	84 c9		 test	 cl, cl
  00087	0f 84 bc 01 00
	00		 je	 $LN90@LoadAttack@2
  0008d	32 cb		 xor	 cl, bl
  0008f	88 4d e6	 mov	 BYTE PTR _szEncAttack$[ebp+6], cl
  00092	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00095	84 c9		 test	 cl, cl
  00097	0f 84 a6 01 00
	00		 je	 $LN89@LoadAttack@2
  0009d	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000a0	88 4d e7	 mov	 BYTE PTR _szEncAttack$[ebp+7], cl
  000a3	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  000a6	84 c9		 test	 cl, cl
  000a8	0f 84 8f 01 00
	00		 je	 $LN88@LoadAttack@2
  000ae	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000b1	88 4d e8	 mov	 BYTE PTR _szEncAttack$[ebp+8], cl
  000b4	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000b7	84 c9		 test	 cl, cl
  000b9	0f 84 79 01 00
	00		 je	 $LN87@LoadAttack@2
  000bf	32 ca		 xor	 cl, dl
  000c1	88 4d e9	 mov	 BYTE PTR _szEncAttack$[ebp+9], cl
  000c4	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000c7	84 c9		 test	 cl, cl
  000c9	0f 84 64 01 00
	00		 je	 $LN86@LoadAttack@2
  000cf	32 cb		 xor	 cl, bl
  000d1	88 4d ea	 mov	 BYTE PTR _szEncAttack$[ebp+10], cl
  000d4	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000d7	84 c9		 test	 cl, cl
  000d9	0f 84 4e 01 00
	00		 je	 $LN85@LoadAttack@2
  000df	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000e2	88 4d eb	 mov	 BYTE PTR _szEncAttack$[ebp+11], cl
  000e5	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  000e8	84 c9		 test	 cl, cl
  000ea	0f 84 37 01 00
	00		 je	 $LN84@LoadAttack@2
  000f0	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000f3	88 4d ec	 mov	 BYTE PTR _szEncAttack$[ebp+12], cl
  000f6	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000f9	84 c9		 test	 cl, cl
  000fb	0f 84 21 01 00
	00		 je	 $LN83@LoadAttack@2
  00101	32 ca		 xor	 cl, dl
  00103	88 4d ed	 mov	 BYTE PTR _szEncAttack$[ebp+13], cl
  00106	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  00109	84 c9		 test	 cl, cl
  0010b	0f 84 0c 01 00
	00		 je	 $LN82@LoadAttack@2
  00111	32 cb		 xor	 cl, bl
  00113	88 4d ee	 mov	 BYTE PTR _szEncAttack$[ebp+14], cl
  00116	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  00119	84 c9		 test	 cl, cl
  0011b	0f 84 f6 00 00
	00		 je	 $LN81@LoadAttack@2
  00121	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00124	88 4d ef	 mov	 BYTE PTR _szEncAttack$[ebp+15], cl
  00127	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  0012a	84 c9		 test	 cl, cl
  0012c	0f 84 df 00 00
	00		 je	 $LN80@LoadAttack@2
  00132	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00135	88 4d f0	 mov	 BYTE PTR _szEncAttack$[ebp+16], cl
  00138	8a 48 11	 mov	 cl, BYTE PTR [eax+17]
  0013b	84 c9		 test	 cl, cl
  0013d	0f 84 c9 00 00
	00		 je	 $LN79@LoadAttack@2
  00143	32 ca		 xor	 cl, dl
  00145	88 4d f1	 mov	 BYTE PTR _szEncAttack$[ebp+17], cl
  00148	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  0014b	84 c9		 test	 cl, cl
  0014d	0f 84 b4 00 00
	00		 je	 $LN78@LoadAttack@2
  00153	32 cb		 xor	 cl, bl
  00155	88 4d f2	 mov	 BYTE PTR _szEncAttack$[ebp+18], cl
  00158	8a 48 13	 mov	 cl, BYTE PTR [eax+19]
  0015b	84 c9		 test	 cl, cl
  0015d	0f 84 9e 00 00
	00		 je	 $LN77@LoadAttack@2
  00163	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00166	88 4d f3	 mov	 BYTE PTR _szEncAttack$[ebp+19], cl
  00169	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  0016c	84 c9		 test	 cl, cl
  0016e	0f 84 87 00 00
	00		 je	 $LN76@LoadAttack@2
  00174	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00177	88 4d f4	 mov	 BYTE PTR _szEncAttack$[ebp+20], cl
  0017a	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  0017d	84 c9		 test	 cl, cl
  0017f	74 75		 je	 SHORT $LN75@LoadAttack@2
  00181	32 ca		 xor	 cl, dl
  00183	88 4d f5	 mov	 BYTE PTR _szEncAttack$[ebp+21], cl
  00186	8a 48 16	 mov	 cl, BYTE PTR [eax+22]
  00189	84 c9		 test	 cl, cl
  0018b	74 64		 je	 SHORT $LN74@LoadAttack@2
  0018d	32 cb		 xor	 cl, bl
  0018f	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  00193	88 4d f6	 mov	 BYTE PTR _szEncAttack$[ebp+22], cl
  00196	0f 84 d3 00 00
	00		 je	 $LN1@LoadAttack@2
  0019c	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  0019f	84 c9		 test	 cl, cl
  001a1	74 48		 je	 SHORT $LN72@LoadAttack@2
  001a3	80 f1 ed	 xor	 cl, -19			; ffffffedH
  001a6	88 4d f8	 mov	 BYTE PTR _szEncAttack$[ebp+24], cl
  001a9	8a 48 19	 mov	 cl, BYTE PTR [eax+25]
  001ac	84 c9		 test	 cl, cl
  001ae	74 33		 je	 SHORT $LN71@LoadAttack@2
  001b0	32 ca		 xor	 cl, dl
  001b2	88 4d f9	 mov	 BYTE PTR _szEncAttack$[ebp+25], cl
  001b5	8a 48 1a	 mov	 cl, BYTE PTR [eax+26]
  001b8	84 c9		 test	 cl, cl
  001ba	74 1f		 je	 SHORT $LN70@LoadAttack@2
  001bc	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001bf	32 cb		 xor	 cl, bl
  001c1	88 4d fa	 mov	 BYTE PTR _szEncAttack$[ebp+26], cl
  001c4	84 c0		 test	 al, al
  001c6	74 0a		 je	 SHORT $LN69@LoadAttack@2
  001c8	34 ea		 xor	 al, -22			; ffffffeaH
  001ca	88 45 fb	 mov	 BYTE PTR _szEncAttack$[ebp+27], al
  001cd	e9 9d 00 00 00	 jmp	 $LN1@LoadAttack@2
$LN69@LoadAttack@2:
  001d2	c6 45 fb ea	 mov	 BYTE PTR _szEncAttack$[ebp+27], -22 ; ffffffeaH
  001d6	e9 94 00 00 00	 jmp	 $LN1@LoadAttack@2
$LN70@LoadAttack@2:
  001db	88 5d fa	 mov	 BYTE PTR _szEncAttack$[ebp+26], bl
  001de	e9 8c 00 00 00	 jmp	 $LN1@LoadAttack@2
$LN71@LoadAttack@2:
  001e3	88 55 f9	 mov	 BYTE PTR _szEncAttack$[ebp+25], dl
  001e6	e9 84 00 00 00	 jmp	 $LN1@LoadAttack@2
$LN72@LoadAttack@2:
  001eb	c6 45 f8 ed	 mov	 BYTE PTR _szEncAttack$[ebp+24], -19 ; ffffffedH
  001ef	eb 7e		 jmp	 SHORT $LN1@LoadAttack@2
$LN74@LoadAttack@2:
  001f1	88 5d f6	 mov	 BYTE PTR _szEncAttack$[ebp+22], bl
  001f4	eb 79		 jmp	 SHORT $LN1@LoadAttack@2
$LN75@LoadAttack@2:
  001f6	88 55 f5	 mov	 BYTE PTR _szEncAttack$[ebp+21], dl
  001f9	eb 74		 jmp	 SHORT $LN1@LoadAttack@2
$LN76@LoadAttack@2:
  001fb	c6 45 f4 ed	 mov	 BYTE PTR _szEncAttack$[ebp+20], -19 ; ffffffedH
  001ff	eb 6e		 jmp	 SHORT $LN1@LoadAttack@2
$LN77@LoadAttack@2:
  00201	c6 45 f3 ea	 mov	 BYTE PTR _szEncAttack$[ebp+19], -22 ; ffffffeaH
  00205	eb 68		 jmp	 SHORT $LN1@LoadAttack@2
$LN78@LoadAttack@2:
  00207	88 5d f2	 mov	 BYTE PTR _szEncAttack$[ebp+18], bl
  0020a	eb 63		 jmp	 SHORT $LN1@LoadAttack@2
$LN79@LoadAttack@2:
  0020c	88 55 f1	 mov	 BYTE PTR _szEncAttack$[ebp+17], dl
  0020f	eb 5e		 jmp	 SHORT $LN1@LoadAttack@2
$LN80@LoadAttack@2:
  00211	c6 45 f0 ed	 mov	 BYTE PTR _szEncAttack$[ebp+16], -19 ; ffffffedH
  00215	eb 58		 jmp	 SHORT $LN1@LoadAttack@2
$LN81@LoadAttack@2:
  00217	c6 45 ef ea	 mov	 BYTE PTR _szEncAttack$[ebp+15], -22 ; ffffffeaH
  0021b	eb 52		 jmp	 SHORT $LN1@LoadAttack@2
$LN82@LoadAttack@2:
  0021d	88 5d ee	 mov	 BYTE PTR _szEncAttack$[ebp+14], bl
  00220	eb 4d		 jmp	 SHORT $LN1@LoadAttack@2
$LN83@LoadAttack@2:
  00222	88 55 ed	 mov	 BYTE PTR _szEncAttack$[ebp+13], dl
  00225	eb 48		 jmp	 SHORT $LN1@LoadAttack@2
$LN84@LoadAttack@2:
  00227	c6 45 ec ed	 mov	 BYTE PTR _szEncAttack$[ebp+12], -19 ; ffffffedH
  0022b	eb 42		 jmp	 SHORT $LN1@LoadAttack@2
$LN85@LoadAttack@2:
  0022d	c6 45 eb ea	 mov	 BYTE PTR _szEncAttack$[ebp+11], -22 ; ffffffeaH
  00231	eb 3c		 jmp	 SHORT $LN1@LoadAttack@2
$LN86@LoadAttack@2:
  00233	88 5d ea	 mov	 BYTE PTR _szEncAttack$[ebp+10], bl
  00236	eb 37		 jmp	 SHORT $LN1@LoadAttack@2
$LN87@LoadAttack@2:
  00238	88 55 e9	 mov	 BYTE PTR _szEncAttack$[ebp+9], dl
  0023b	eb 32		 jmp	 SHORT $LN1@LoadAttack@2
$LN88@LoadAttack@2:
  0023d	c6 45 e8 ed	 mov	 BYTE PTR _szEncAttack$[ebp+8], -19 ; ffffffedH
  00241	eb 2c		 jmp	 SHORT $LN1@LoadAttack@2
$LN89@LoadAttack@2:
  00243	c6 45 e7 ea	 mov	 BYTE PTR _szEncAttack$[ebp+7], -22 ; ffffffeaH
  00247	eb 26		 jmp	 SHORT $LN1@LoadAttack@2
$LN90@LoadAttack@2:
  00249	88 5d e6	 mov	 BYTE PTR _szEncAttack$[ebp+6], bl
  0024c	eb 21		 jmp	 SHORT $LN1@LoadAttack@2
$LN91@LoadAttack@2:
  0024e	88 55 e5	 mov	 BYTE PTR _szEncAttack$[ebp+5], dl
  00251	eb 1c		 jmp	 SHORT $LN1@LoadAttack@2
$LN92@LoadAttack@2:
  00253	c6 45 e4 ed	 mov	 BYTE PTR _szEncAttack$[ebp+4], -19 ; ffffffedH
  00257	eb 16		 jmp	 SHORT $LN1@LoadAttack@2
$LN93@LoadAttack@2:
  00259	c6 45 e3 ea	 mov	 BYTE PTR _szEncAttack$[ebp+3], -22 ; ffffffeaH
  0025d	eb 10		 jmp	 SHORT $LN1@LoadAttack@2
$LN94@LoadAttack@2:
  0025f	c6 45 e2 eb	 mov	 BYTE PTR _szEncAttack$[ebp+2], -21 ; ffffffebH
  00263	eb 0a		 jmp	 SHORT $LN1@LoadAttack@2
$LN95@LoadAttack@2:
  00265	c6 45 e1 ec	 mov	 BYTE PTR _szEncAttack$[ebp+1], -20 ; ffffffecH
  00269	eb 04		 jmp	 SHORT $LN1@LoadAttack@2
$LN96@LoadAttack@2:
  0026b	c6 45 e0 ed	 mov	 BYTE PTR _szEncAttack$[ebp], -19 ; ffffffedH
$LN1@LoadAttack@2:
  0026f	6a 05		 push	 5
  00271	8d 45 e0	 lea	 eax, DWORD PTR _szEncAttack$[ebp]
  00274	c6 45 f7 00	 mov	 BYTE PTR _szEncAttack$[ebp+23], 0
  00278	59		 pop	 ecx
$LL104@LoadAttack@2:
  00279	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027f	83 c0 04	 add	 eax, 4
  00282	49		 dec	 ecx
  00283	75 f4		 jne	 SHORT $LL104@LoadAttack@2
  00285	6a 14		 push	 20			; 00000014H
  00287	58		 pop	 eax
$LL101@LoadAttack@2:
  00288	8b c8		 mov	 ecx, eax
  0028a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00290	79 05		 jns	 SHORT $LN111@LoadAttack@2
  00292	49		 dec	 ecx
  00293	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00296	41		 inc	 ecx
$LN111@LoadAttack@2:
  00297	b2 ed		 mov	 dl, -19			; ffffffedH
  00299	2a d1		 sub	 dl, cl
  0029b	30 54 05 e0	 xor	 BYTE PTR _szEncAttack$[ebp+eax], dl
  0029f	40		 inc	 eax
  002a0	83 f8 17	 cmp	 eax, 23			; 00000017H
  002a3	7c e3		 jl	 SHORT $LL101@LoadAttack@2

; 133  : 	LoadAttackAttribute(szEncAttack, rkAttribute, rkLoader);

  002a5	57		 push	 edi
  002a6	8d 45 e0	 lea	 eax, DWORD PTR _szEncAttack$[ebp]
  002a9	56		 push	 esi
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute

; 134  : }

  002b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b6	5f		 pop	 edi
  002b7	5e		 pop	 esi
  002b8	33 cd		 xor	 ecx, ebp
  002ba	5b		 pop	 ebx
  002bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c0	c9		 leave
  002c1	c3		 ret	 0
??$LoadAttackAttribute_e@$0BI@@@YAXAAY0BI@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z ENDP ; LoadAttackAttribute_e<24>
_TEXT	ENDS
PUBLIC	??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z ; ioEntityGroup::GetAnimationEventTime_e<13>
EXTRN	__imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z$0
__ehfuncinfo$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
_TEXT	SEGMENT
$T527506 = -56						; size = 16
$T527505 = -40						; size = 4
_szEncEventType$ = -36					; size = 13
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z PROC ; ioEntityGroup::GetAnimationEventTime_e<13>, COMDAT
; _this$ = ecx

; 414  : 	{

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 415  : 		_ENCSTR(szEventType, szEncEventType);

  00011	8a 08		 mov	 cl, BYTE PTR [eax]
  00013	84 c9		 test	 cl, cl
  00015	0f 84 49 01 00
	00		 je	 $LN96@GetAnimati
  0001b	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0001e	88 4d dc	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00021	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00024	84 c9		 test	 cl, cl
  00026	0f 84 32 01 00
	00		 je	 $LN95@GetAnimati
  0002c	80 f1 ec	 xor	 cl, -20			; ffffffecH
  0002f	88 4d dd	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00032	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00035	84 c9		 test	 cl, cl
  00037	0f 84 1b 01 00
	00		 je	 $LN94@GetAnimati
  0003d	b2 eb		 mov	 dl, -21			; ffffffebH
  0003f	32 ca		 xor	 cl, dl
  00041	88 4d de	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00044	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00047	84 c9		 test	 cl, cl
  00049	0f 84 03 01 00
	00		 je	 $LN93@GetAnimati
  0004f	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00052	88 4d df	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00055	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00058	84 c9		 test	 cl, cl
  0005a	0f 84 ec 00 00
	00		 je	 $LN92@GetAnimati
  00060	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00063	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00066	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00069	84 c9		 test	 cl, cl
  0006b	0f 84 d5 00 00
	00		 je	 $LN91@GetAnimati
  00071	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00074	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  00077	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0007a	84 c9		 test	 cl, cl
  0007c	0f 84 bf 00 00
	00		 je	 $LN90@GetAnimati
  00082	32 ca		 xor	 cl, dl
  00084	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  00087	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008a	84 c9		 test	 cl, cl
  0008c	0f 84 a9 00 00
	00		 je	 $LN89@GetAnimati
  00092	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00095	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  00098	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009b	84 c9		 test	 cl, cl
  0009d	0f 84 92 00 00
	00		 je	 $LN88@GetAnimati
  000a3	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000a6	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000a9	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000ac	84 c9		 test	 cl, cl
  000ae	74 7f		 je	 SHORT $LN87@GetAnimati
  000b0	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b3	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b6	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000b9	84 c9		 test	 cl, cl
  000bb	74 6d		 je	 SHORT $LN86@GetAnimati
  000bd	32 ca		 xor	 cl, dl
  000bf	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c2	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000c5	84 c9		 test	 cl, cl
  000c7	74 5b		 je	 SHORT $LN85@GetAnimati
  000c9	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000cc	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d0	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+11], cl
  000d3	0f 84 8f 00 00
	00		 je	 $LN1@GetAnimati
  000d9	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000dc	84 c9		 test	 cl, cl
  000de	74 3e		 je	 SHORT $LN83@GetAnimati
  000e0	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e3	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e6	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000e9	84 c9		 test	 cl, cl
  000eb	74 2c		 je	 SHORT $LN82@GetAnimati
  000ed	32 ca		 xor	 cl, dl
  000ef	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f2	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  000f5	84 c9		 test	 cl, cl
  000f7	74 1a		 je	 SHORT $LN81@GetAnimati
  000f9	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  000fc	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000ff	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+15], cl
  00102	84 c0		 test	 al, al
  00104	74 07		 je	 SHORT $LN80@GetAnimati
  00106	34 ed		 xor	 al, -19			; ffffffedH
  00108	88 45 ec	 mov	 BYTE PTR _szEncEventType$[ebp+16], al
  0010b	eb 5b		 jmp	 SHORT $LN1@GetAnimati
$LN80@GetAnimati:
  0010d	c6 45 ec ed	 mov	 BYTE PTR _szEncEventType$[ebp+16], -19 ; ffffffedH
  00111	eb 55		 jmp	 SHORT $LN1@GetAnimati
$LN81@GetAnimati:
  00113	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  00117	eb 4f		 jmp	 SHORT $LN1@GetAnimati
$LN82@GetAnimati:
  00119	88 55 ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], dl
  0011c	eb 4a		 jmp	 SHORT $LN1@GetAnimati
$LN83@GetAnimati:
  0011e	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00122	eb 44		 jmp	 SHORT $LN1@GetAnimati
$LN85@GetAnimati:
  00124	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+11], -22 ; ffffffeaH
  00128	eb 3e		 jmp	 SHORT $LN1@GetAnimati
$LN86@GetAnimati:
  0012a	88 55 e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], dl
  0012d	eb 39		 jmp	 SHORT $LN1@GetAnimati
$LN87@GetAnimati:
  0012f	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00133	eb 33		 jmp	 SHORT $LN1@GetAnimati
$LN88@GetAnimati:
  00135	c6 45 e4 ed	 mov	 BYTE PTR _szEncEventType$[ebp+8], -19 ; ffffffedH
  00139	eb 2d		 jmp	 SHORT $LN1@GetAnimati
$LN89@GetAnimati:
  0013b	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  0013f	eb 27		 jmp	 SHORT $LN1@GetAnimati
$LN90@GetAnimati:
  00141	88 55 e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], dl
  00144	eb 22		 jmp	 SHORT $LN1@GetAnimati
$LN91@GetAnimati:
  00146	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  0014a	eb 1c		 jmp	 SHORT $LN1@GetAnimati
$LN92@GetAnimati:
  0014c	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp+4], -19 ; ffffffedH
  00150	eb 16		 jmp	 SHORT $LN1@GetAnimati
$LN93@GetAnimati:
  00152	c6 45 df ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00156	eb 10		 jmp	 SHORT $LN1@GetAnimati
$LN94@GetAnimati:
  00158	c6 45 de eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  0015c	eb 0a		 jmp	 SHORT $LN1@GetAnimati
$LN95@GetAnimati:
  0015e	c6 45 dd ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  00162	eb 04		 jmp	 SHORT $LN1@GetAnimati
$LN96@GetAnimati:
  00164	c6 45 dc ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati:
  00168	6a 03		 push	 3
  0016a	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0016d	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$[ebp+12], 0
  00171	59		 pop	 ecx
$LL105@GetAnimati:
  00172	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00178	83 c0 04	 add	 eax, 4
  0017b	49		 dec	 ecx
  0017c	75 f4		 jne	 SHORT $LL105@GetAnimati

; 416  : 		return GetAnimationEventTime(id, szEncEventType);

  0017e	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00181	50		 push	 eax
  00182	8d 4d c8	 lea	 ecx, DWORD PTR $T527506[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0018b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0018f	8d 45 c8	 lea	 eax, DWORD PTR $T527506[ebp]
  00192	50		 push	 eax
  00193	ff 75 08	 push	 DWORD PTR _id$[ebp]
  00196	8b ce		 mov	 ecx, esi
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  0019e	d9 5d d8	 fstp	 DWORD PTR $T527505[ebp]
  001a1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a5	8d 4d c8	 lea	 ecx, DWORD PTR $T527506[ebp]
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001ae	d9 45 d8	 fld	 DWORD PTR $T527505[ebp]

; 417  : 	}

  001b1	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001b6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T527506[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z ENDP ; ioEntityGroup::GetAnimationEventTime_e<13>
PUBLIC	??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z ; std::_Destroy_range<std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z PROC ; std::_Destroy_range<std::allocator<AniEventTime const *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z ; std::allocator<AniRotateInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z PROC ; std::allocator<AniRotateInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@2:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z ENDP ; std::allocator<AniRotateInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<AniRotateInfo *,AniRotateInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN11@Move:
  00009	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0000c	74 12		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	83 c0 08	 add	 eax, 8
  0001b	83 c1 08	 add	 ecx, 8
  0001e	eb e9		 jmp	 SHORT $LN11@Move
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<AniRotateInfo *,AniRotateInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z ; std::allocator<AniRotateInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z PROC ; std::allocator<AniRotateInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z ENDP ; std::allocator<AniRotateInfo>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@3:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z ; std::allocator<AniRotateInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z PROC ; std::allocator<AniRotateInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@4
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@4:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z ENDP ; std::allocator<AniRotateInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T527653 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T527653[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@3:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T527653[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadProperty@ioCounterAttack@@UAEXAAVioINILoader@@@Z ; ioCounterAttack::LoadProperty
EXTRN	?Init@AttackAttribute@@QAEXXZ:PROC		; AttackAttribute::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
;	COMDAT ?LoadProperty@ioCounterAttack@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szEncAttack$528071 = -36				; size = 24
__k$527937 = -36					; size = 26
_szEncAttack$527812 = -28				; size = 15
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioCounterAttack@@UAEXAAVioINILoader@@@Z PROC ; ioCounterAttack::LoadProperty, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	57		 push	 edi

; 27   : 	m_CounterAttack.Init();

  00018	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0001b	8b cf		 mov	 ecx, edi
  0001d	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 28   : 	LoadAttackAttribute_e( "counter_attack", m_CounterAttack, rkLoader );

  00022	6a 03		 push	 3
  00024	c7 45 e4 8e 83
	9e 84		 mov	 DWORD PTR _szEncAttack$527812[ebp], -2069986418 ; 849e838eH
  0002b	c7 45 e8 99 89
	99 b5		 mov	 DWORD PTR _szEncAttack$527812[ebp+4], -1248228967 ; b5998999H
  00032	c7 45 ec 8c 98
	9f 8b		 mov	 DWORD PTR _szEncAttack$527812[ebp+8], -1952474996 ; 8b9f988cH
  00039	66 c7 45 f0 8e
	87		 mov	 WORD PTR _szEncAttack$527812[ebp+12], 34702 ; 0000878eH
  0003f	8d 45 e4	 lea	 eax, DWORD PTR _szEncAttack$527812[ebp]
  00042	c6 45 f2 00	 mov	 BYTE PTR _szEncAttack$527812[ebp+14], 0
  00046	59		 pop	 ecx
$LL106@LoadProper:
  00047	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004d	83 c0 04	 add	 eax, 4
  00050	49		 dec	 ecx
  00051	75 f4		 jne	 SHORT $LL106@LoadProper
  00053	6a 0c		 push	 12			; 0000000cH
  00055	58		 pop	 eax
$LL103@LoadProper:
  00056	8b c8		 mov	 ecx, eax
  00058	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0005e	79 05		 jns	 SHORT $LN333@LoadProper
  00060	49		 dec	 ecx
  00061	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00064	41		 inc	 ecx
$LN333@LoadProper:
  00065	b2 ed		 mov	 dl, -19			; ffffffedH
  00067	2a d1		 sub	 dl, cl
  00069	30 54 05 e4	 xor	 BYTE PTR _szEncAttack$527812[ebp+eax], dl
  0006d	40		 inc	 eax
  0006e	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00071	7c e3		 jl	 SHORT $LL103@LoadProper
  00073	53		 push	 ebx
  00074	8d 45 e4	 lea	 eax, DWORD PTR _szEncAttack$527812[ebp]
  00077	57		 push	 edi
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	6a 06		 push	 6

; 29   : 	m_bEnableDashCheck = rkLoader.LoadBool_e( "counter_attack_dash_check", false );

  00083	c7 45 dc 8e 83
	9e 84		 mov	 DWORD PTR __k$527937[ebp], -2069986418 ; 849e838eH
  0008a	c7 45 e0 99 89
	99 b5		 mov	 DWORD PTR __k$527937[ebp+4], -1248228967 ; b5998999H
  00091	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$527937[ebp+8], -1952474996 ; 8b9f988cH
  00098	c7 45 e8 8e 87
	b4 8e		 mov	 DWORD PTR __k$527937[ebp+12], -1900771442 ; 8eb4878eH
  0009f	c7 45 ec 8c 9f
	83 b5		 mov	 DWORD PTR __k$527937[ebp+16], -1249665140 ; b5839f8cH
  000a6	c7 45 f0 8e 84
	8e 89		 mov	 DWORD PTR __k$527937[ebp+20], -1987148658 ; 898e848eH
  000ad	8d 45 dc	 lea	 eax, DWORD PTR __k$527937[ebp]
  000b0	66 c7 45 f4 86
	00		 mov	 WORD PTR __k$527937[ebp+24], 134 ; 00000086H
  000b6	59		 pop	 ecx
$LL212@LoadProper:
  000b7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000bd	83 c0 04	 add	 eax, 4
  000c0	49		 dec	 ecx
  000c1	75 f4		 jne	 SHORT $LL212@LoadProper
  000c3	80 75 f4 ed	 xor	 BYTE PTR __k$527937[ebp+24], -19 ; ffffffedH
  000c7	51		 push	 ecx
  000c8	8d 45 dc	 lea	 eax, DWORD PTR __k$527937[ebp]
  000cb	50		 push	 eax
  000cc	8b cb		 mov	 ecx, ebx
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  000d4	88 86 c0 00 00
	00		 mov	 BYTE PTR [esi+192], al

; 30   : 
; 31   : 	m_JumpKeyCounterAttack.Init();

  000da	83 c6 54	 add	 esi, 84			; 00000054H
  000dd	8b ce		 mov	 ecx, esi
  000df	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init
  000e4	6a 05		 push	 5

; 32   : 	LoadAttackAttribute_e( "jump_key_counter_attack", m_JumpKeyCounterAttack, rkLoader );

  000e6	c7 45 dc 87 99
	86 9a		 mov	 DWORD PTR _szEncAttack$528071[ebp], -1702454905 ; 9a869987H
  000ed	c7 45 e0 b2 87
	8e 93		 mov	 DWORD PTR _szEncAttack$528071[ebp+4], -1819375694 ; 938e87b2H
  000f4	c7 45 e4 b2 8f
	84 9f		 mov	 DWORD PTR _szEncAttack$528071[ebp+8], -1618702414 ; 9f848fb2H
  000fb	c7 45 e8 83 98
	8e 98		 mov	 DWORD PTR _szEncAttack$528071[ebp+12], -1735485309 ; 988e9883H
  00102	c7 45 ec b2 8d
	9f 9e		 mov	 DWORD PTR _szEncAttack$528071[ebp+16], -1633710670 ; 9e9f8db2H
  00109	8d 45 dc	 lea	 eax, DWORD PTR _szEncAttack$528071[ebp]
  0010c	c7 45 f0 8c 8f
	80 00		 mov	 DWORD PTR _szEncAttack$528071[ebp+20], 8425356 ; 00808f8cH
  00113	59		 pop	 ecx
$LL318@LoadProper:
  00114	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011a	83 c0 04	 add	 eax, 4
  0011d	49		 dec	 ecx
  0011e	75 f4		 jne	 SHORT $LL318@LoadProper
  00120	6a 14		 push	 20			; 00000014H
  00122	5f		 pop	 edi
$LL315@LoadProper:
  00123	8b c7		 mov	 eax, edi
  00125	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0012a	79 05		 jns	 SHORT $LN334@LoadProper
  0012c	48		 dec	 eax
  0012d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00130	40		 inc	 eax
$LN334@LoadProper:
  00131	b1 ed		 mov	 cl, -19			; ffffffedH
  00133	2a c8		 sub	 cl, al
  00135	30 4c 3d dc	 xor	 BYTE PTR _szEncAttack$528071[ebp+edi], cl
  00139	47		 inc	 edi
  0013a	83 ff 17	 cmp	 edi, 23			; 00000017H
  0013d	7c e4		 jl	 SHORT $LL315@LoadProper
  0013f	53		 push	 ebx
  00140	8d 45 dc	 lea	 eax, DWORD PTR _szEncAttack$528071[ebp]
  00143	56		 push	 esi
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute

; 33   : }

  0014a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	33 cd		 xor	 ecx, ebp
  00154	5b		 pop	 ebx
  00155	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015a	c9		 leave
  0015b	c2 04 00	 ret	 4
?LoadProperty@ioCounterAttack@@UAEXAAVioINILoader@@@Z ENDP ; ioCounterAttack::LoadProperty
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__real@3f800000
PUBLIC	_this$GSCopy$
PUBLIC	?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z ; ioCounterAttack::SetInputSpecialDash
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__ftol2:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z$0
__ehfuncinfo$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
xdata$x	ENDS
;	COMDAT ?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z
_TEXT	SEGMENT
$T528298 = -64						; size = 16
tv1027 = -48						; size = 4
_this$GSCopy$ = -44					; size = 4
$T528297 = -40						; size = 4
_fTimeRate$ = -40					; size = 4
_szEncEventType$528198 = -36				; size = 13
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_rkAttri$ = 12						; size = 4
?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z PROC ; ioCounterAttack::SetInputSpecialDash, COMDAT
; _this$ = ecx

; 174  : {

  00000	6a 34		 push	 52			; 00000034H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]

; 175  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  0000f	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00012	8b 7d 0c	 mov	 edi, DWORD PTR _rkAttri$[ebp]
  00015	89 4d d4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 176  : 	if( !pGrp )

  00018	85 f6		 test	 esi, esi
  0001a	0f 84 d1 00 00
	00		 je	 $LN5@SetInputSp

; 177  : 		return;
; 178  : 
; 179  : 	int iAniID = pGrp->GetAnimationIdx( rkAttri.m_AttackAnimation );

  00020	57		 push	 edi
  00021	8b ce		 mov	 ecx, esi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00029	8b d8		 mov	 ebx, eax

; 180  : 	if ( iAniID == -1 )

  0002b	83 fb ff	 cmp	 ebx, -1
  0002e	0f 84 bd 00 00
	00		 je	 $LN5@SetInputSp

; 181  : 		return;
; 182  : 
; 183  : 	DWORD dwDashTime = (DWORD)pGrp->GetAnimationEventTime_e( iAniID, "input_dash_s" );

  00034	6a 03		 push	 3
  00036	c7 45 dc 84 82
	9b 9f		 mov	 DWORD PTR _szEncEventType$528198[ebp], -1617198460 ; 9f9b8284H
  0003d	c7 45 e0 99 b3
	8f 8b		 mov	 DWORD PTR _szEncEventType$528198[ebp+4], -1953516647 ; 8b8fb399H
  00044	c7 45 e4 9e 84
	b4 99		 mov	 DWORD PTR _szEncEventType$528198[ebp+8], -1716222818 ; 99b4849eH
  0004b	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$528198[ebp]
  0004e	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$528198[ebp+12], 0
  00052	59		 pop	 ecx
$LL113@SetInputSp:
  00053	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00059	83 c0 04	 add	 eax, 4
  0005c	49		 dec	 ecx
  0005d	75 f4		 jne	 SHORT $LL113@SetInputSp
  0005f	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$528198[ebp]
  00062	50		 push	 eax
  00063	8d 4d c0	 lea	 ecx, DWORD PTR $T528298[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0006c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00070	8d 45 c0	 lea	 eax, DWORD PTR $T528298[ebp]
  00073	50		 push	 eax
  00074	53		 push	 ebx
  00075	8b ce		 mov	 ecx, esi
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  0007d	d9 5d d8	 fstp	 DWORD PTR $T528297[ebp]
  00080	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8d 4d c0	 lea	 ecx, DWORD PTR $T528298[ebp]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0008d	d9 45 d8	 fld	 DWORD PTR $T528297[ebp]
  00090	e8 00 00 00 00	 call	 __ftol2
  00095	8b d8		 mov	 ebx, eax

; 184  : 	if ( dwDashTime == 0 )

  00097	85 db		 test	 ebx, ebx
  00099	74 56		 je	 SHORT $LN5@SetInputSp

; 185  : 		return;
; 186  : 
; 187  : 	float fTimeRate = 1.0f;

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a3	f3 0f 11 45 d8	 movss	 DWORD PTR _fTimeRate$[ebp], xmm0

; 188  : 	if ( rkAttri.m_fAttackAniRate > 0.0f )

  000a8	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  000ad	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000b4	76 05		 jbe	 SHORT $LN1@SetInputSp

; 189  : 		fTimeRate = rkAttri.m_fAttackAniRate;

  000b6	f3 0f 11 45 d8	 movss	 DWORD PTR _fTimeRate$[ebp], xmm0
$LN1@SetInputSp:

; 190  : 	DWORD dwStartTime = FRAMEGETTIME() + rkAttri.m_dwPreDelay;

  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000c1	8b c8		 mov	 ecx, eax
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000c9	8b f0		 mov	 esi, eax
  000cb	03 77 48	 add	 esi, DWORD PTR [edi+72]

; 194  : 	m_dwInputSpecialDashTime += dwStartTime;

  000ce	89 5d d0	 mov	 DWORD PTR tv1027[ebp], ebx
  000d1	db 45 d0	 fild	 DWORD PTR tv1027[ebp]
  000d4	85 db		 test	 ebx, ebx
  000d6	79 06		 jns	 SHORT $LN121@SetInputSp
  000d8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN121@SetInputSp:

; 191  : 
; 192  : 	m_dwInputSpecialDashTime = dwDashTime;
; 193  : 	m_dwInputSpecialDashTime *= fTimeRate;

  000de	d8 4d d8	 fmul	 DWORD PTR _fTimeRate$[ebp]

; 194  : 	m_dwInputSpecialDashTime += dwStartTime;

  000e1	e8 00 00 00 00	 call	 __ftol2
  000e6	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000e9	03 c6		 add	 eax, esi
  000eb	89 81 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], eax
$LN5@SetInputSp:

; 195  : }

  000f1	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000f6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T528298[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z ENDP ; ioCounterAttack::SetInputSpecialDash
PUBLIC	??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::vector<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::vector<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::vector<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::vector<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::vector<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::vector<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator!=
_TEXT	ENDS
PUBLIC	?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$528539 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z PROC ; std::_Move<AniRotateInfo *,AniRotateInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528539[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z ENDP ; std::_Move<AniRotateInfo *,AniRotateInfo *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z ; std::_Dest_val<std::allocator<AniRotateInfo>,AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z PROC ; std::_Dest_val<std::allocator<AniRotateInfo>,AniRotateInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z ENDP ; std::_Dest_val<std::allocator<AniRotateInfo>,AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@3:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@4
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@4:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 66 66 66
	06		 cmp	 edi, 107374182		; 06666666H
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 28	 imul	 edi, 40			; 00000028H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<AniRotateInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 19		 jmp	 SHORT $LN35@Uninit_cop
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00005	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
  00013	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN35@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00024	75 df		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>
  00015	83 45 10 08	 add	 DWORD PTR __Dest$[ebp], 8
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 08	 add	 esi, 8
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Destroy_range<std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<AniRotateInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$529264 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$529264[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$529270 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z PROC ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$529270[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ENDP ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@2:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop@2

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  00027	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002b	83 45 08 28	 add	 DWORD PTR __First$[ebp], 40 ; 00000028H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@2
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN48@Uninit_cop@2
$LL3@Uninit_cop@2:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 28	 add	 esi, 40			; 00000028H
$LN48@Uninit_cop@2:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop@2

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@2:
$LN4@Uninit_cop@2:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN47@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$529618 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$529618[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Umove<AniRotateInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Umove<AniRotateInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Umove<AniRotateInfo *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$529630 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$529630[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@2:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$529837 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$529837[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$524791 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	c1 f8 03	 sar	 eax, 3
  0002a	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0002d	73 65		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0002f	6a 00		 push	 0
  00031	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00034	e8 00 00 00 00	 call	 ??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ; std::_Allocate<AniRotateInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003f	8b d8		 mov	 ebx, eax
  00041	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00044	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00047	52		 push	 edx
  00048	53		 push	 ebx
  00049	50		 push	 eax
  0004a	51		 push	 ecx
  0004b	89 5d ec	 mov	 DWORD PTR __Ptr$524791[ebp], ebx
  0004e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00053	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005c	8b f9		 mov	 edi, ecx
  0005e	2b f8		 sub	 edi, eax
  00060	83 c4 18	 add	 esp, 24			; 00000018H
  00063	c1 ff 03	 sar	 edi, 3
  00066	85 c0		 test	 eax, eax
  00068	74 11		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006a	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  0006c	83 c0 08	 add	 eax, 8
$LN55@reserve:
  0006f	3b c1		 cmp	 eax, ecx
  00071	75 f9		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00073	ff 36		 push	 DWORD PTR [esi]
  00075	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007a	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0007b	8b ce		 mov	 ecx, esi
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00083	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00086	8d 04 c3	 lea	 eax, DWORD PTR [ebx+eax*8]
  00089	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	8d 04 fb	 lea	 eax, DWORD PTR [ebx+edi*8]
  0008f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00092	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  00094	e8 00 00 00 00	 call	 __EH_epilog3
  00099	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0009c	ff 75 ec	 push	 DWORD PTR __Ptr$524791[ebp]
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	59		 pop	 ecx

; 757  : 			_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$530142 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$530142[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$530372 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 0c		 push	 12			; 0000000cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$530372[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
PUBLIC	??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::~vector<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::~vector<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::~vector<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T530401 = -4						; size = 4
?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T530401[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 03	 sar	 eax, 3
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 03	 sar	 edx, 3
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@5

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@5:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?InitAniRotate@ioCounterAttack@@UAEXXZ		; ioCounterAttack::InitAniRotate
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
;	COMDAT ?InitAniRotate@ioCounterAttack@@UAEXXZ
_TEXT	SEGMENT
$T530565 = -4						; size = 4
?InitAniRotate@ioCounterAttack@@UAEXXZ PROC		; ioCounterAttack::InitAniRotate, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 64   : 	m_iCurAniRotate = 0;

  00004	83 a1 b4 00 00
	00 00		 and	 DWORD PTR [ecx+180], 0

; 65   : 	m_dwAniRotateTime = 0;

  0000b	83 a1 b8 00 00
	00 00		 and	 DWORD PTR [ecx+184], 0

; 66   : 	m_fAniRotateAngle = 0.0f;

  00012	0f 57 c0	 xorps	 xmm0, xmm0
  00015	f3 0f 11 81 bc
	00 00 00	 movss	 DWORD PTR [ecx+188], xmm0

; 67   : 	m_vAniRotateInfoList.clear();

  0001d	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  00023	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	50		 push	 eax
  0002c	52		 push	 edx
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T530565[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase

; 68   : }

  00036	c9		 leave
  00037	c3		 ret	 0
?InitAniRotate@ioCounterAttack@@UAEXXZ ENDP		; ioCounterAttack::InitAniRotate
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$530663 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 28		 push	 40			; 00000028H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$530663[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
PUBLIC	?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 2d		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 27		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  0002f	50		 push	 eax
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  0003c	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003e	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00041	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004c	57		 push	 edi
  0004d	ff 76 04	 push	 DWORD PTR [esi+4]
  00050	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>
$LN20@push_back:
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0005c	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back
_TEXT	ENDS
PUBLIC	??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@ABU0@@Z			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2
__ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AttackAttribute@@QAE@ABU0@@Z PROC			; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	d9 47 10	 fld	 DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00036	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00039	50		 push	 eax
  0003a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
  00046	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00049	50		 push	 eax
  0004a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	e8 00 00 00 00	 call	 ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
  00056	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00059	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0005c	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0005f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??0AttackAttribute@@QAE@ABU0@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@ABU0@@Z ENDP			; AttackAttribute::AttackAttribute
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0L@PACFBADH@ani_rotate?$AA@		; `string'
PUBLIC	?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z ; ioCounterAttack::SetAniRotate
EXTRN	__imp_?ParseFloat@ioStringConverter@@SAMPBD@Z:PROC
EXTRN	__imp_?Split@ioStringConverter@@SAABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0H@Z:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?GetAnimationEventConstPtrList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@Z:PROC
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PACFBADH@ani_rotate?$AA@
CONST	SEGMENT
??_C@_0L@PACFBADH@ani_rotate?$AA@ DB 'ani_rotate', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$3
__ehfuncinfo$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
xdata$x	ENDS
;	COMDAT ?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z
_TEXT	SEGMENT
_vAniRotateList$ = -112					; size = 16
_dwCurTime$ = -96					; size = 4
$T530724 = -92						; size = 16
_kInfo$524288 = -84					; size = 8
_iter_r$ = -76						; size = 4
$T524293 = -72						; size = 28
$T524294 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fAniRate$ = 16						; size = 4
?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z PROC ; ioCounterAttack::SetAniRotate, COMDAT
; _this$ = ecx

; 72   : {

  00000	6a 64		 push	 100			; 00000064H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 08	 mov	 eax, DWORD PTR _pChar$[ebp]

; 73   : 	if( !pChar ) return;

  0000f	33 db		 xor	 ebx, ebx
  00011	8b f9		 mov	 edi, ecx
  00013	3b c3		 cmp	 eax, ebx
  00015	0f 84 8d 01 00
	00		 je	 $LN146@SetAniRota

; 74   : 
; 75   : 	ioEntityGroup *pGrp = pChar->GetGroup();

  0001b	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 76   : 	if( !pGrp ) return;

  0001e	3b f3		 cmp	 esi, ebx
  00020	0f 84 82 01 00
	00		 je	 $LN146@SetAniRota

; 77   : 
; 78   : 	DWORD dwCurTime = FRAMEGETTIME();

  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002c	8b c8		 mov	 ecx, eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00034	89 45 a0	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 79   : 
; 80   : 	InitAniRotate();

  00037	8b 07		 mov	 eax, DWORD PTR [edi]
  00039	8b cf		 mov	 ecx, edi
  0003b	ff 50 18	 call	 DWORD PTR [eax+24]

; 81   : 
; 82   : 	AniEventConstPtrList vAniRotateList;

  0003e	89 5d 90	 mov	 DWORD PTR _vAniRotateList$[ebp], ebx
  00041	89 5d 94	 mov	 DWORD PTR _vAniRotateList$[ebp+4], ebx
  00044	89 5d 98	 mov	 DWORD PTR _vAniRotateList$[ebp+8], ebx

; 83   : 	pGrp->GetAnimationEventConstPtrList( iAniID, "ani_rotate", vAniRotateList );

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PACFBADH@ani_rotate?$AA@
  0004c	8d 4d a4	 lea	 ecx, DWORD PTR $T530724[ebp]
  0004f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00058	8d 45 90	 lea	 eax, DWORD PTR _vAniRotateList$[ebp]
  0005b	50		 push	 eax
  0005c	8d 45 a4	 lea	 eax, DWORD PTR $T530724[ebp]
  0005f	50		 push	 eax
  00060	ff 75 0c	 push	 DWORD PTR _iAniID$[ebp]
  00063	8b ce		 mov	 ecx, esi
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventConstPtrList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@Z
  0006f	8d 4d a4	 lea	 ecx, DWORD PTR $T530724[ebp]
  00072	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 84   : 
; 85   : 	AniEventConstPtrList::iterator iter_r = vAniRotateList.begin();

  0007b	8b 45 90	 mov	 eax, DWORD PTR _vAniRotateList$[ebp]
  0007e	89 45 b4	 mov	 DWORD PTR _iter_r$[ebp], eax
  00081	e9 e2 00 00 00	 jmp	 $LN155@SetAniRota
$LN7@SetAniRota:

; 87   : 	{
; 88   : 		AniRotateInfo kInfo;
; 89   : 
; 90   : 		kInfo.m_dwTime = (*iter_r)->fEventTime * fAniRate;

  00086	8b 45 b4	 mov	 eax, DWORD PTR _iter_r$[ebp]
  00089	d9 45 10	 fld	 DWORD PTR _fAniRate$[ebp]
  0008c	8b 30		 mov	 esi, DWORD PTR [eax]
  0008e	d8 0e		 fmul	 DWORD PTR [esi]
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	f3 0f 11 45 b0	 movss	 DWORD PTR _kInfo$524288[ebp+4], xmm0
  00098	e8 00 00 00 00	 call	 __ftol2

; 91   : 
; 92   : 		if( kInfo.m_dwTime > 0 )

  0009d	3b c3		 cmp	 eax, ebx
  0009f	76 08		 jbe	 SHORT $LN5@SetAniRota

; 93   : 			kInfo.m_dwTime += dwCurTime;

  000a1	03 45 a0	 add	 eax, DWORD PTR _dwCurTime$[ebp]
  000a4	89 45 ac	 mov	 DWORD PTR _kInfo$524288[ebp], eax

; 94   : 		else

  000a7	eb 03		 jmp	 SHORT $LN4@SetAniRota
$LN5@SetAniRota:

; 95   : 			kInfo.m_dwTime = 0;

  000a9	89 5d ac	 mov	 DWORD PTR _kInfo$524288[ebp], ebx
$LN4@SetAniRota:

; 96   : 
; 97   : 		if( !(*iter_r)->szSubInfo.IsEmpty() )

  000ac	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000b5	84 c0		 test	 al, al
  000b7	0f 85 95 00 00
	00		 jne	 $LN2@SetAniRota

; 98   : 		{
; 99   : 			const StringVector &vParam = ioStringConverter::Split( (*iter_r)->szSubInfo.c_str(), " " );

  000bd	6a 0f		 push	 15			; 0000000fH
  000bf	5e		 pop	 esi
  000c0	6a 01		 push	 1
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  000c7	8d 4d b8	 lea	 ecx, DWORD PTR $T524293[ebp]
  000ca	89 75 cc	 mov	 DWORD PTR $T524293[ebp+20], esi
  000cd	89 5d c8	 mov	 DWORD PTR $T524293[ebp+16], ebx
  000d0	88 5d b8	 mov	 BYTE PTR $T524293[ebp], bl
  000d3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000d8	8b 45 b4	 mov	 eax, DWORD PTR _iter_r$[ebp]
  000db	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dd	83 c1 14	 add	 ecx, 20			; 00000014H
  000e0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000ea	50		 push	 eax
  000eb	8d 4d d4	 lea	 ecx, DWORD PTR $T524294[ebp]
  000ee	89 75 e8	 mov	 DWORD PTR $T524294[ebp+20], esi
  000f1	89 5d e4	 mov	 DWORD PTR $T524294[ebp+16], ebx
  000f4	88 5d d4	 mov	 BYTE PTR $T524294[ebp], bl
  000f7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000fc	53		 push	 ebx
  000fd	8d 45 b8	 lea	 eax, DWORD PTR $T524293[ebp]
  00100	50		 push	 eax
  00101	8d 45 d4	 lea	 eax, DWORD PTR $T524294[ebp]
  00104	50		 push	 eax
  00105	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Split@ioStringConverter@@SAABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0H@Z
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00112	53		 push	 ebx
  00113	6a 01		 push	 1
  00115	8d 4d d4	 lea	 ecx, DWORD PTR $T524294[ebp]
  00118	8b f0		 mov	 esi, eax
  0011a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0011f	53		 push	 ebx
  00120	6a 01		 push	 1
  00122	8d 4d b8	 lea	 ecx, DWORD PTR $T524293[ebp]
  00125	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00128	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 100  : 			if( vParam.size() == 1 )

  0012d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0012f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00132	2b c1		 sub	 eax, ecx
  00134	6a 1c		 push	 28			; 0000001cH
  00136	99		 cdq
  00137	5e		 pop	 esi
  00138	f7 fe		 idiv	 esi
  0013a	83 f8 01	 cmp	 eax, 1
  0013d	75 13		 jne	 SHORT $LN2@SetAniRota

; 101  : 			{
; 102  : 				kInfo.m_fAngle = ioStringConverter::ParseFloat( vParam[0].c_str() );

  0013f	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00143	72 02		 jb	 SHORT $LN134@SetAniRota
  00145	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN134@SetAniRota:
  00147	51		 push	 ecx
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ParseFloat@ioStringConverter@@SAMPBD@Z
  0014e	d9 5d b0	 fstp	 DWORD PTR _kInfo$524288[ebp+4]
  00151	59		 pop	 ecx
$LN2@SetAniRota:

; 103  : 			}
; 104  : 		}
; 105  : 
; 106  : 		m_vAniRotateInfoList.push_back(kInfo);

  00152	8d 45 ac	 lea	 eax, DWORD PTR _kInfo$524288[ebp]
  00155	50		 push	 eax
  00156	8d 8f a4 00 00
	00		 lea	 ecx, DWORD PTR [edi+164]
  0015c	e8 00 00 00 00	 call	 ?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back

; 107  : 
; 108  : 		++iter_r;

  00161	83 45 b4 04	 add	 DWORD PTR _iter_r$[ebp], 4
  00165	8b 45 b4	 mov	 eax, DWORD PTR _iter_r$[ebp]
$LN155@SetAniRota:

; 86   : 	while( iter_r != vAniRotateList.end() )

  00168	3b 45 94	 cmp	 eax, DWORD PTR _vAniRotateList$[ebp+4]
  0016b	0f 85 15 ff ff
	ff		 jne	 $LN7@SetAniRota

; 109  : 	}
; 110  : 
; 111  : 	if( !m_vAniRotateInfoList.empty() )

  00171	8b 8f a4 00 00
	00		 mov	 ecx, DWORD PTR [edi+164]
  00177	3b 8f a8 00 00
	00		 cmp	 ecx, DWORD PTR [edi+168]
  0017d	74 1d		 je	 SHORT $LN1@SetAniRota

; 112  : 	{
; 113  : 		m_iCurAniRotate = 0;
; 114  : 		m_dwAniRotateTime = m_vAniRotateInfoList[m_iCurAniRotate].m_dwTime;

  0017f	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  00185	89 9f b4 00 00
	00		 mov	 DWORD PTR [edi+180], ebx
  0018b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018d	89 8f b8 00 00
	00		 mov	 DWORD PTR [edi+184], ecx

; 115  : 		m_fAniRotateAngle = m_vAniRotateInfoList[m_iCurAniRotate].m_fAngle;

  00193	d9 40 04	 fld	 DWORD PTR [eax+4]
  00196	d9 9f bc 00 00
	00		 fstp	 DWORD PTR [edi+188]
$LN1@SetAniRota:

; 116  : 	}
; 117  : }

  0019c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a0	8d 4d 90	 lea	 ecx, DWORD PTR _vAniRotateList$[ebp]
  001a3	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
$LN146@SetAniRota:
  001a8	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001ad	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR _vAniRotateList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >
__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$1:
  00008	8d 4d a4	 lea	 ecx, DWORD PTR $T530724[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$2:
  00011	8d 4d b8	 lea	 ecx, DWORD PTR $T524293[ebp]
  00014	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z$3:
  00019	8d 4d d4	 lea	 ecx, DWORD PTR $T524294[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z ENDP ; ioCounterAttack::SetAniRotate
PUBLIC	??0AttackAttribute@@QAE@XZ			; AttackAttribute::AttackAttribute
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$3
__ehfuncinfo$??0AttackAttribute@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AttackAttribute@@QAE@XZ PROC				; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx

; 107  : 	AttackAttribute()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	33 db		 xor	 ebx, ebx
  0001b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	ff d7		 call	 edi
  00023	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00026	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00029	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0002c	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0002f	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00032	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 108  : 	{
; 109  : 		Init();

  00035	8b ce		 mov	 ecx, esi
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 110  : 	}

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__unwindfunclet$??0AttackAttribute@@QAE@XZ$3:
  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 38	 add	 ecx, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
__ehhandler$??0AttackAttribute@@QAE@XZ:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::AttackAttribute
PUBLIC	??1AttackAttribute@@QAE@XZ			; AttackAttribute::~AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$2
__ehfuncinfo$??1AttackAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AttackAttribute@@QAE@XZ PROC				; AttackAttribute::~AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00014	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
  00020	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00023	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00032	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	ff d7		 call	 edi
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d7		 call	 edi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??1AttackAttribute@@QAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AttackAttribute@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::~AttackAttribute
PUBLIC	??_7ioCounterAttack@@6B@			; ioCounterAttack::`vftable'
PUBLIC	??0ioCounterAttack@@QAE@XZ			; ioCounterAttack::ioCounterAttack
PUBLIC	??_R4ioCounterAttack@@6B@			; ioCounterAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioCounterAttack@@@8			; ioCounterAttack `RTTI Type Descriptor'
PUBLIC	??_R3ioCounterAttack@@8				; ioCounterAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioCounterAttack@@8				; ioCounterAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioCounterAttack@@8		; ioCounterAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsEnableDashCheck@ioCounterAttack@@UAE_NXZ	; ioCounterAttack::IsEnableDashCheck
EXTRN	__purecall:PROC
EXTRN	??_EioCounterAttack@@UAEPAXI@Z:PROC		; ioCounterAttack::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioCounterAttack@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@ioCounterAttack@@8 DD FLAT:??_R0?AVioCounterAttack@@@8 ; ioCounterAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioCounterAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2ioCounterAttack@@8
rdata$r	SEGMENT
??_R2ioCounterAttack@@8 DD FLAT:??_R1A@?0A@EA@ioCounterAttack@@8 ; ioCounterAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioCounterAttack@@8
rdata$r	SEGMENT
??_R3ioCounterAttack@@8 DD 00H				; ioCounterAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioCounterAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioCounterAttack@@@8
_DATA	SEGMENT
??_R0?AVioCounterAttack@@@8 DD FLAT:??_7type_info@@6B@	; ioCounterAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioCounterAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioCounterAttack@@6B@
rdata$r	SEGMENT
??_R4ioCounterAttack@@6B@ DD 00H			; ioCounterAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioCounterAttack@@@8
	DD	FLAT:??_R3ioCounterAttack@@8
rdata$r	ENDS
;	COMDAT ??_7ioCounterAttack@@6B@
CONST	SEGMENT
??_7ioCounterAttack@@6B@ DD FLAT:??_R4ioCounterAttack@@6B@ ; ioCounterAttack::`vftable'
	DD	FLAT:?LoadProperty@ioCounterAttack@@UAEXAAVioINILoader@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?StartCAT@ioCounterAttack@@UAE_NPAVioBaseChar@@H@Z
	DD	FLAT:?ProcessCAT@ioCounterAttack@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyCAT@ioCounterAttack@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?InitAniRotate@ioCounterAttack@@UAEXXZ
	DD	FLAT:?SetAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAniRotate@ioCounterAttack@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableDashCheck@ioCounterAttack@@UAE_NXZ
	DD	FLAT:?SetInputSpecialDash@ioCounterAttack@@UAEXPAVioBaseChar@@ABUAttackAttribute@@@Z
	DD	FLAT:?CheckInputSpecialDash@ioCounterAttack@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:??_EioCounterAttack@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioCounterAttack@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCounterAttack@@QAE@XZ$0
__ehfuncinfo$??0ioCounterAttack@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioCounterAttack@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
xdata$x	ENDS
;	COMDAT ??0ioCounterAttack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioCounterAttack@@QAE@XZ PROC				; ioCounterAttack::ioCounterAttack, COMDAT
; _this$ = ecx

; 9    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCounterAttack@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCounterAttack@@6B@
  0001a	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  0001f	33 ff		 xor	 edi, edi
  00021	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00024	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00027	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  0002c	89 be a4 00 00
	00		 mov	 DWORD PTR [esi+164], edi
  00032	89 be a8 00 00
	00		 mov	 DWORD PTR [esi+168], edi
  00038	89 be ac 00 00
	00		 mov	 DWORD PTR [esi+172], edi

; 10   : 	m_dwInputSpecialDashTime = 0;

  0003e	89 be c4 00 00
	00		 mov	 DWORD PTR [esi+196], edi

; 11   : }

  00044	8b c6		 mov	 eax, esi
  00046	e8 00 00 00 00	 call	 __EH_epilog3
  0004b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCounterAttack@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??0ioCounterAttack@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCounterAttack@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCounterAttack@@QAE@XZ ENDP				; ioCounterAttack::ioCounterAttack
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.h
;	COMDAT ?IsEnableDashCheck@ioCounterAttack@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableDashCheck@ioCounterAttack@@UAE_NXZ PROC	; ioCounterAttack::IsEnableDashCheck, COMDAT
; _this$ = ecx

; 37   : 	virtual bool IsEnableDashCheck() { return m_bEnableDashCheck; }

  00000	8a 81 c0 00 00
	00		 mov	 al, BYTE PTR [ecx+192]
  00006	c3		 ret	 0
?IsEnableDashCheck@ioCounterAttack@@UAE_NXZ ENDP	; ioCounterAttack::IsEnableDashCheck
_TEXT	ENDS
PUBLIC	??0ioCounterAttack@@QAE@ABV0@@Z			; ioCounterAttack::ioCounterAttack
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0ioCounterAttack@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCounterAttack@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioCounterAttack@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioCounterAttack@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
xdata$x	ENDS
;	COMDAT ??0ioCounterAttack@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioCounterAttack@@QAE@ABV0@@Z PROC			; ioCounterAttack::ioCounterAttack, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCounterAttack@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00017	50		 push	 eax
  00018	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCounterAttack@@6B@
  00021	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  00026	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  0002d	50		 push	 eax
  0002e	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00031	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  00036	83 a6 a4 00 00
	00 00		 and	 DWORD PTR [esi+164], 0
  0003d	83 a6 a8 00 00
	00 00		 and	 DWORD PTR [esi+168], 0
  00044	83 a6 ac 00 00
	00 00		 and	 DWORD PTR [esi+172], 0
  0004b	8a 87 c0 00 00
	00		 mov	 al, BYTE PTR [edi+192]
  00051	88 86 c0 00 00
	00		 mov	 BYTE PTR [esi+192], al

; 18   : }

  00057	8b c6		 mov	 eax, esi
  00059	e8 00 00 00 00	 call	 __EH_epilog3
  0005e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCounterAttack@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??0ioCounterAttack@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCounterAttack@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCounterAttack@@QAE@ABV0@@Z ENDP			; ioCounterAttack::ioCounterAttack
PUBLIC	??1ioCounterAttack@@UAE@XZ			; ioCounterAttack::~ioCounterAttack
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioCounterAttack@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioCounterAttack@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioCounterAttack@@UAE@XZ$1
__ehfuncinfo$??1ioCounterAttack@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioCounterAttack@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocounterattack.cpp
xdata$x	ENDS
;	COMDAT ??1ioCounterAttack@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioCounterAttack@@UAE@XZ PROC				; ioCounterAttack::~ioCounterAttack, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioCounterAttack@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCounterAttack@@6B@

; 22   : 	m_dwInputSpecialDashTime = 0;

  00017	83 a6 c4 00 00
	00 00		 and	 DWORD PTR [esi+196], 0

; 23   : }

  0001e	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  00024	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0002b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
  00030	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00033	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00037	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0003c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00040	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00043	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00048	e8 00 00 00 00	 call	 __EH_epilog3
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioCounterAttack@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??1ioCounterAttack@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 54	 add	 ecx, 84			; 00000054H
  00011	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??1ioCounterAttack@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioCounterAttack@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioCounterAttack@@UAE@XZ ENDP				; ioCounterAttack::~ioCounterAttack
; Function compile flags: /Ogsp
;	COMDAT ??_GioCounterAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioCounterAttack@@UAEPAXI@Z PROC			; ioCounterAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioCounterAttack@@UAE@XZ ; ioCounterAttack::~ioCounterAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioCounterAttack@@UAEPAXI@Z ENDP			; ioCounterAttack::`scalar deleting destructor'
_TEXT	ENDS
END
