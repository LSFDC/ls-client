; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioReflectDamageBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?StartBuff@ioReflectDamageBuff@@UAEXPAVioBaseChar@@@Z ; ioReflectDamageBuff::StartBuff
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.cpp
;	COMDAT ?StartBuff@ioReflectDamageBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioReflectDamageBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioReflectDamageBuff::StartBuff, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : }

  00003	5d		 pop	 ebp

; 79   : 	ioBuff::StartBuff( pOwner );	

  00004	e9 00 00 00 00	 jmp	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff
?StartBuff@ioReflectDamageBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioReflectDamageBuff::StartBuff
_TEXT	ENDS
PUBLIC	?ApplyStartBuff@ioReflectDamageBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioReflectDamageBuff::ApplyStartBuff
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioReflectDamageBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioReflectDamageBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioReflectDamageBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGlobalTime ) )

  00003	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00011	84 c0		 test	 al, al
  00013	0f 95 c0	 setne	 al

; 85   : 		return false;
; 86   : 
; 87   : 	return true;
; 88   : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioReflectDamageBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioReflectDamageBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	?EndBuff@ioReflectDamageBuff@@UAEXXZ		; ioReflectDamageBuff::EndBuff
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioReflectDamageBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioReflectDamageBuff@@UAEXXZ PROC		; ioReflectDamageBuff::EndBuff, COMDAT
; _this$ = ecx

; 113  : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioReflectDamageBuff@@UAEXXZ ENDP		; ioReflectDamageBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioReflectDamageBuff@@IAEXXZ ; ioReflectDamageBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioReflectDamageBuff@@IAEXXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioReflectDamageBuff@@IAEXXZ PROC	; ioReflectDamageBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 117  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 118  : 	if( !m_pOwner ) return;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	33 d2		 xor	 edx, edx
  0000b	3b ca		 cmp	 ecx, edx
  0000d	74 57		 je	 SHORT $LN1@CheckOwner

; 119  : 
; 120  : 	CharState eState = m_pOwner->GetState();

  0000f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 121  : 
; 122  : 	if( m_bDisableDownState )

  00015	38 96 6c 09 00
	00		 cmp	 BYTE PTR [esi+2412], dl
  0001b	74 49		 je	 SHORT $LN1@CheckOwner

; 123  : 	{
; 124  : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001d	3c 17		 cmp	 al, 23			; 00000017H
  0001f	75 10		 jne	 SHORT $LN13@CheckOwner
  00021	38 91 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], dl
$LN29@CheckOwner:
  00027	74 3d		 je	 SHORT $LN1@CheckOwner
$LN28@CheckOwner:

; 125  : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
  0002c	e9 00 00 00 00	 jmp	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN13@CheckOwner:

; 126  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00031	3c 0c		 cmp	 al, 12			; 0000000cH
  00033	75 0b		 jne	 SHORT $LN11@CheckOwner
$LN31@CheckOwner:
  00035	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  0003a	84 c0		 test	 al, al
  0003c	75 28		 jne	 SHORT $LN1@CheckOwner

; 127  : 			SetReserveEndBuff();

  0003e	eb e9		 jmp	 SHORT $LN28@CheckOwner
$LN11@CheckOwner:

; 128  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00040	3c 31		 cmp	 al, 49			; 00000031H

; 129  : 			SetReserveEndBuff();

  00042	74 f1		 je	 SHORT $LN31@CheckOwner

; 130  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00044	3c 0f		 cmp	 al, 15			; 0000000fH
  00046	75 0a		 jne	 SHORT $LN7@CheckOwner
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0004e	84 c0		 test	 al, al

; 131  : 			SetReserveEndBuff();

  00050	eb d5		 jmp	 SHORT $LN29@CheckOwner
$LN7@CheckOwner:

; 132  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00052	3c 26		 cmp	 al, 38			; 00000026H
  00054	75 08		 jne	 SHORT $LN5@CheckOwner
$LN30@CheckOwner:
  00056	38 91 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], dl

; 133  : 			SetReserveEndBuff();

  0005c	eb c9		 jmp	 SHORT $LN29@CheckOwner
$LN5@CheckOwner:

; 134  : 		else if( eState == CS_DROP_ZONE_DOWN )

  0005e	3c 10		 cmp	 al, 16			; 00000010H

; 135  : 			SetReserveEndBuff();

  00060	74 c7		 je	 SHORT $LN28@CheckOwner

; 136  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00062	3c 3b		 cmp	 al, 59			; 0000003bH

; 137  : 			SetReserveEndBuff();

  00064	74 f0		 je	 SHORT $LN30@CheckOwner
$LN1@CheckOwner:
  00066	5e		 pop	 esi

; 138  : 	}
; 139  : }

  00067	c3		 ret	 0
?CheckOwnerStateCheck@ioReflectDamageBuff@@IAEXXZ ENDP	; ioReflectDamageBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEABUReflectDamageInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEABUReflectDamageInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEABUReflectDamageInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEABUReflectDamageInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 30	 add	 DWORD PTR [eax], 48	; 00000030H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 30		 push	 48			; 00000030H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 30		 push	 48			; 00000030H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBE_NPBUReflectDamageInfo@@@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBE_NPBUReflectDamageInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBE_NPBUReflectDamageInfo@@@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBE_NPBUReflectDamageInfo@@@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXPAUReflectDamageInfo@@0@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXPAUReflectDamageInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXPAUReflectDamageInfo@@0@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEXPAUReflectDamageInfo@@0@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::~_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::~_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::~_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UReflectDamageInfo@@@std@@QAE@XZ	; std::allocator<ReflectDamageInfo>::allocator<ReflectDamageInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UReflectDamageInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UReflectDamageInfo@@@std@@QAE@XZ PROC	; std::allocator<ReflectDamageInfo>::allocator<ReflectDamageInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UReflectDamageInfo@@@std@@QAE@XZ ENDP	; std::allocator<ReflectDamageInfo>::allocator<ReflectDamageInfo>
_TEXT	ENDS
PUBLIC	??0?$allocator@UReflectDamageInfo@@@std@@QAE@ABV01@@Z ; std::allocator<ReflectDamageInfo>::allocator<ReflectDamageInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UReflectDamageInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UReflectDamageInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ReflectDamageInfo>::allocator<ReflectDamageInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UReflectDamageInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ReflectDamageInfo>::allocator<ReflectDamageInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@I@Z ; std::allocator<ReflectDamageInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@I@Z PROC ; std::allocator<ReflectDamageInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@I@Z ENDP ; std::allocator<ReflectDamageInfo>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UReflectDamageInfo@@@std@@QBEIXZ ; std::allocator<ReflectDamageInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UReflectDamageInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UReflectDamageInfo@@@std@@QBEIXZ PROC ; std::allocator<ReflectDamageInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UReflectDamageInfo@@@std@@QBEIXZ ENDP ; std::allocator<ReflectDamageInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUReflectDamageInfo@@@std@@YAPBUReflectDamageInfo@@ABU1@@Z ; std::addressof<ReflectDamageInfo const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUReflectDamageInfo@@@std@@YAPBUReflectDamageInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUReflectDamageInfo@@@std@@YAPBUReflectDamageInfo@@ABU1@@Z PROC ; std::addressof<ReflectDamageInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUReflectDamageInfo@@@std@@YAPBUReflectDamageInfo@@ABU1@@Z ENDP ; std::addressof<ReflectDamageInfo const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@IPAU1@@Z ; std::_Allocate<ReflectDamageInfo>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T527132 = -12						; size = 12
$T527137 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@IPAU1@@Z PROC ; std::_Allocate<ReflectDamageInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	05		 cmp	 ecx, 89478485		; 05555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 30	 imul	 ecx, 48			; 00000030H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T527137[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T527137[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T527132[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T527132[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T527132[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@IPAU1@@Z ENDP ; std::_Allocate<ReflectDamageInfo>
_TEXT	ENDS
PUBLIC	??$forward@AAUReflectDamageInfo@@@std@@YAAAUReflectDamageInfo@@AAU1@@Z ; std::forward<ReflectDamageInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUReflectDamageInfo@@@std@@YAAAUReflectDamageInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUReflectDamageInfo@@@std@@YAAAUReflectDamageInfo@@AAU1@@Z PROC ; std::forward<ReflectDamageInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUReflectDamageInfo@@@std@@YAAAUReflectDamageInfo@@AAU1@@Z ENDP ; std::forward<ReflectDamageInfo &>
_TEXT	ENDS
PUBLIC	??$forward@ABUReflectDamageInfo@@@std@@YAABUReflectDamageInfo@@ABU1@@Z ; std::forward<ReflectDamageInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUReflectDamageInfo@@@std@@YAABUReflectDamageInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUReflectDamageInfo@@@std@@YAABUReflectDamageInfo@@ABU1@@Z PROC ; std::forward<ReflectDamageInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUReflectDamageInfo@@@std@@YAABUReflectDamageInfo@@ABU1@@Z ENDP ; std::forward<ReflectDamageInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UReflectDamageInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUReflectDamageInfo@@0@Z ; std::_Ptr_cat<ReflectDamageInfo,ReflectDamageInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UReflectDamageInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUReflectDamageInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UReflectDamageInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUReflectDamageInfo@@0@Z PROC ; std::_Ptr_cat<ReflectDamageInfo,ReflectDamageInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UReflectDamageInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUReflectDamageInfo@@0@Z ENDP ; std::_Ptr_cat<ReflectDamageInfo,ReflectDamageInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@AAPAUReflectDamageInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@AAPAUReflectDamageInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@AAPAUReflectDamageInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@AAPAUReflectDamageInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@PAU1@@Z ; std::_Val_type<ReflectDamageInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAUReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@PAU1@@Z PROC ; std::_Val_type<ReflectDamageInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@PAU1@@Z ENDP ; std::_Val_type<ReflectDamageInfo *>
_TEXT	ENDS
PUBLIC	??$move@AAUReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z ; std::move<ReflectDamageInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z PROC ; std::move<ReflectDamageInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z ENDP ; std::move<ReflectDamageInfo &>
_TEXT	ENDS
PUBLIC	??$forward@UReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z ; std::forward<ReflectDamageInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z PROC ; std::forward<ReflectDamageInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UReflectDamageInfo@@@std@@YA$$QAUReflectDamageInfo@@AAU1@@Z ENDP ; std::forward<ReflectDamageInfo>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?Init@WeaponInfo@@QAEXXZ			; WeaponInfo::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ?Init@WeaponInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@WeaponInfo@@QAEXXZ PROC				; WeaponInfo::Init, COMDAT
; _this$ = ecx

; 71   : 		m_iWeaponIdx = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 		m_iResistanceIdx = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   : 
; 74   : 		m_dwWoundedDuration = 0;

  00007	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 75   : 		m_dwCallTime = 0;

  0000a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 76   : 
; 77   : 		m_bWoundedLoopAni = false;

  0000d	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 78   : 
; 79   : 		m_dwDuration = 0;

  00010	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 80   : 	}

  00013	c3		 ret	 0
?Init@WeaponInfo@@QAEXXZ ENDP				; WeaponInfo::Init
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??4WeaponInfo@@QAEAAU0@ABU0@@Z			; WeaponInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4WeaponInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z PROC			; WeaponInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z ENDP			; WeaponInfo::operator=
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??1ReflectDamageInfo@@QAE@XZ			; ReflectDamageInfo::~ReflectDamageInfo
; Function compile flags: /Ogsp
;	COMDAT ??1ReflectDamageInfo@@QAE@XZ
_TEXT	SEGMENT
??1ReflectDamageInfo@@QAE@XZ PROC			; ReflectDamageInfo::~ReflectDamageInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1ReflectDamageInfo@@QAE@XZ ENDP			; ReflectDamageInfo::~ReflectDamageInfo
_TEXT	ENDS
PUBLIC	?ProcessBuff@ioReflectDamageBuff@@UAEXM@Z	; ioReflectDamageBuff::ProcessBuff
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.cpp
;	COMDAT ?ProcessBuff@ioReflectDamageBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioReflectDamageBuff@@UAEXM@Z PROC		; ioReflectDamageBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 92   : 	if( m_iOperationType != OT_PASSIVE )

  00007	83 bf d0 03 00
	00 00		 cmp	 DWORD PTR [edi+976], 0
  0000e	74 05		 je	 SHORT $LN6@ProcessBuf

; 93   : 	{
; 94   : 		CheckOwnerStateCheck();

  00010	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioReflectDamageBuff@@IAEXXZ ; ioReflectDamageBuff::CheckOwnerStateCheck
$LN6@ProcessBuf:

; 95   : 	}	
; 96   : 
; 97   : 	switch( m_iOperationType )

  00015	8b b7 d0 03 00
	00		 mov	 esi, DWORD PTR [edi+976]
  0001b	83 ee 00	 sub	 esi, 0
  0001e	74 1b		 je	 SHORT $LN1@ProcessBuf
  00020	4e		 dec	 esi
  00021	74 04		 je	 SHORT $LN2@ProcessBuf
  00023	4e		 dec	 esi
  00024	4e		 dec	 esi
  00025	75 1b		 jne	 SHORT $LN4@ProcessBuf
$LN2@ProcessBuf:

; 98   : 	{
; 99   : 	case OT_SWITCH:
; 100  : 		break;
; 101  : 	case OT_DELAY:
; 102  : 	case OT_ACTIVE:
; 103  : 		ioBuff::ProcessBuff( fTimePerSec );

  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0002c	51		 push	 ecx
  0002d	8b cf		 mov	 ecx, edi
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 104  : 		break;

  00039	eb 07		 jmp	 SHORT $LN4@ProcessBuf
$LN1@ProcessBuf:

; 105  : 	case OT_PASSIVE:
; 106  : 		CheckCallingAreaWeapon();

  0003b	8b cf		 mov	 ecx, edi
  0003d	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN4@ProcessBuf:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 107  : 		break;
; 108  : 	}
; 109  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?ProcessBuff@ioReflectDamageBuff@@UAEXM@Z ENDP		; ioReflectDamageBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@V?$allocator@UReflectDamageInfo@@@1@@Z ; std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@V?$allocator@UReflectDamageInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@V?$allocator@UReflectDamageInfo@@@1@@Z PROC ; std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@V?$allocator@UReflectDamageInfo@@@1@@Z ENDP ; std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UReflectDamageInfo@@@std@@QAEPAUReflectDamageInfo@@I@Z ; std::allocator<ReflectDamageInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UReflectDamageInfo@@@std@@QAEPAUReflectDamageInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UReflectDamageInfo@@@std@@QAEPAUReflectDamageInfo@@I@Z PROC ; std::allocator<ReflectDamageInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@IPAU1@@Z ; std::_Allocate<ReflectDamageInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UReflectDamageInfo@@@std@@QAEPAUReflectDamageInfo@@I@Z ENDP ; std::allocator<ReflectDamageInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Vector_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Vector_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QAE@PAUReflectDamageInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::_Vector_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEII@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 30		 push	 48			; 00000030H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 55 55 55 05	 mov	 edx, 89478485		; 05555555H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ; ioINILoader::LoadInt_e<24>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<24>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadInt_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadInt_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadInt_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadInt_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadInt_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadInt_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadInt_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadInt_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadInt_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadInt_e
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadInt_e
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadInt_e
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadInt_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadInt_e
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadInt_e
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadInt_e
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadInt_e
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadInt_e
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadInt_e
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadInt_e
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e
$LN69@LoadInt_e:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadInt_e
$LN70@LoadInt_e:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e
$LN71@LoadInt_e:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e
$LN72@LoadInt_e:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadInt_e:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadInt_e:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadInt_e
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadInt_e:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  002a0	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  002a3	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a6	50		 push	 eax
  002a7	8b ce		 mov	 ecx, esi
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	5e		 pop	 esi
  002b3	33 cd		 xor	 ecx, ebp
  002b5	5b		 pop	 ebx
  002b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bb	c9		 leave
  002bc	c2 08 00	 ret	 8
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BF@@ioINILoader@@QAE_NAAY0BF@$$CBD_N@Z ; ioINILoader::LoadBool_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BF@@ioINILoader@@QAE_NAAY0BF@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BF@@ioINILoader@@QAE_NAAY0BF@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<21>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadBool_e@2
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadBool_e@2
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadBool_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadBool_e@2
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadBool_e@2
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadBool_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadBool_e@2
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadBool_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadBool_e@2
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadBool_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadBool_e@2
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadBool_e@2
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadBool_e@2
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadBool_e@2
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadBool_e@2
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadBool_e@2
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadBool_e@2
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadBool_e@2
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN72@LoadBool_e@2:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN73@LoadBool_e@2:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadBool_e@2:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00232	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00235	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00238	50		 push	 eax
  00239	8b ce		 mov	 ecx, esi
  0023b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00241	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00244	5e		 pop	 esi
  00245	33 cd		 xor	 ecx, ebp
  00247	5b		 pop	 ebx
  00248	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024d	c9		 leave
  0024e	c2 08 00	 ret	 8
??$LoadBool_e@$0BF@@ioINILoader@@QAE_NAAY0BF@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0CD@@ioINILoader@@QAE_NAAY0CD@$$CBD_N@Z ; ioINILoader::LoadBool_e<35>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0CD@@ioINILoader@@QAE_NAAY0CD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -44						; size = 35
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0CD@@ioINILoader@@QAE_NAAY0CD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<35>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 59 03 00
	00		 je	 $LN96@LoadBool_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 42 03 00
	00		 je	 $LN95@LoadBool_e@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 2a 03 00
	00		 je	 $LN94@LoadBool_e@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 d6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 13 03 00
	00		 je	 $LN93@LoadBool_e@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 d7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 fb 02 00
	00		 je	 $LN92@LoadBool_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 d8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 e5 02 00
	00		 je	 $LN91@LoadBool_e@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 d9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 cf 02 00
	00		 je	 $LN90@LoadBool_e@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 da	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 b9 02 00
	00		 je	 $LN89@LoadBool_e@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 db	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 a3 02 00
	00		 je	 $LN88@LoadBool_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 dc	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 8d 02 00
	00		 je	 $LN87@LoadBool_e@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 dd	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 77 02 00
	00		 je	 $LN86@LoadBool_e@3
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 de	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 61 02 00
	00		 je	 $LN85@LoadBool_e@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 df	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 4b 02 00
	00		 je	 $LN84@LoadBool_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 35 02 00
	00		 je	 $LN83@LoadBool_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 1f 02 00
	00		 je	 $LN82@LoadBool_e@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 e2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 09 02 00
	00		 je	 $LN81@LoadBool_e@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 f3 01 00
	00		 je	 $LN80@LoadBool_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e4	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 dd 01 00
	00		 je	 $LN79@LoadBool_e@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 c7 01 00
	00		 je	 $LN78@LoadBool_e@3
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 e6	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 b1 01 00
	00		 je	 $LN77@LoadBool_e@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 e7	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 9b 01 00
	00		 je	 $LN76@LoadBool_e@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 e8	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 85 01 00
	00		 je	 $LN75@LoadBool_e@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 e9	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 6f 01 00
	00		 je	 $LN74@LoadBool_e@3
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 ea	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 59 01 00
	00		 je	 $LN73@LoadBool_e@3
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 40 01 00
	00		 je	 $LN72@LoadBool_e@3
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 27 01 00
	00		 je	 $LN71@LoadBool_e@3
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 0e 01 00
	00		 je	 $LN70@LoadBool_e@3
  001d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  001d5	88 55 ee	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	0f 84 f5 00 00
	00		 je	 $LN69@LoadBool_e@3
  001e3	32 d3		 xor	 dl, bl
  001e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	0f 84 dc 00 00
	00		 je	 $LN68@LoadBool_e@3
  001f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+28], dl
  001f9	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001fc	84 d2		 test	 dl, dl
  001fe	0f 84 c3 00 00
	00		 je	 $LN67@LoadBool_e@3
  00204	32 d1		 xor	 dl, cl
  00206	88 55 f1	 mov	 BYTE PTR __k$[ebp+29], dl
  00209	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  0020c	84 d2		 test	 dl, dl
  0020e	0f 84 aa 00 00
	00		 je	 $LN66@LoadBool_e@3
  00214	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00217	88 55 f2	 mov	 BYTE PTR __k$[ebp+30], dl
  0021a	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0021d	84 d2		 test	 dl, dl
  0021f	0f 84 91 00 00
	00		 je	 $LN65@LoadBool_e@3
  00225	32 d3		 xor	 dl, bl
  00227	88 55 f3	 mov	 BYTE PTR __k$[ebp+31], dl
  0022a	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0022d	84 d2		 test	 dl, dl
  0022f	74 7c		 je	 SHORT $LN64@LoadBool_e@3
  00231	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00234	88 55 f4	 mov	 BYTE PTR __k$[ebp+32], dl
  00237	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  0023a	84 d2		 test	 dl, dl
  0023c	74 67		 je	 SHORT $LN63@LoadBool_e@3
  0023e	32 d1		 xor	 dl, cl
  00240	80 78 22 00	 cmp	 BYTE PTR [eax+34], 0
  00244	88 55 f5	 mov	 BYTE PTR __k$[ebp+33], dl
  00247	0f 84 31 01 00
	00		 je	 $LN1@LoadBool_e@3
  0024d	8a 50 23	 mov	 dl, BYTE PTR [eax+35]
  00250	84 d2		 test	 dl, dl
  00252	74 49		 je	 SHORT $LN61@LoadBool_e@3
  00254	32 d3		 xor	 dl, bl
  00256	88 55 f7	 mov	 BYTE PTR __k$[ebp+35], dl
  00259	8a 50 24	 mov	 dl, BYTE PTR [eax+36]
  0025c	84 d2		 test	 dl, dl
  0025e	74 34		 je	 SHORT $LN60@LoadBool_e@3
  00260	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00263	88 55 f8	 mov	 BYTE PTR __k$[ebp+36], dl
  00266	8a 50 25	 mov	 dl, BYTE PTR [eax+37]
  00269	84 d2		 test	 dl, dl
  0026b	74 1f		 je	 SHORT $LN59@LoadBool_e@3
  0026d	8a 40 26	 mov	 al, BYTE PTR [eax+38]
  00270	32 d1		 xor	 dl, cl
  00272	88 55 f9	 mov	 BYTE PTR __k$[ebp+37], dl
  00275	84 c0		 test	 al, al
  00277	74 0a		 je	 SHORT $LN58@LoadBool_e@3
  00279	34 eb		 xor	 al, -21			; ffffffebH
  0027b	88 45 fa	 mov	 BYTE PTR __k$[ebp+38], al
  0027e	e9 fb 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN58@LoadBool_e@3:
  00283	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+38], -21 ; ffffffebH
  00287	e9 f2 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN59@LoadBool_e@3:
  0028c	88 4d f9	 mov	 BYTE PTR __k$[ebp+37], cl
  0028f	e9 ea 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN60@LoadBool_e@3:
  00294	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+36], -19 ; ffffffedH
  00298	e9 e1 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN61@LoadBool_e@3:
  0029d	88 5d f7	 mov	 BYTE PTR __k$[ebp+35], bl
  002a0	e9 d9 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN63@LoadBool_e@3:
  002a5	88 4d f5	 mov	 BYTE PTR __k$[ebp+33], cl
  002a8	e9 d1 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN64@LoadBool_e@3:
  002ad	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  002b1	e9 c8 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN65@LoadBool_e@3:
  002b6	88 5d f3	 mov	 BYTE PTR __k$[ebp+31], bl
  002b9	e9 c0 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN66@LoadBool_e@3:
  002be	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+30], -21 ; ffffffebH
  002c2	e9 b7 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN67@LoadBool_e@3:
  002c7	88 4d f1	 mov	 BYTE PTR __k$[ebp+29], cl
  002ca	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN68@LoadBool_e@3:
  002cf	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  002d3	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN69@LoadBool_e@3:
  002d8	88 5d ef	 mov	 BYTE PTR __k$[ebp+27], bl
  002db	e9 9e 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN70@LoadBool_e@3:
  002e0	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  002e4	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN71@LoadBool_e@3:
  002e9	88 4d ed	 mov	 BYTE PTR __k$[ebp+25], cl
  002ec	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN72@LoadBool_e@3:
  002f1	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002f5	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN73@LoadBool_e@3:
  002fa	88 5d eb	 mov	 BYTE PTR __k$[ebp+23], bl
  002fd	eb 7f		 jmp	 SHORT $LN1@LoadBool_e@3
$LN74@LoadBool_e@3:
  002ff	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00303	eb 79		 jmp	 SHORT $LN1@LoadBool_e@3
$LN75@LoadBool_e@3:
  00305	88 4d e9	 mov	 BYTE PTR __k$[ebp+21], cl
  00308	eb 74		 jmp	 SHORT $LN1@LoadBool_e@3
$LN76@LoadBool_e@3:
  0030a	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0030e	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@3
$LN77@LoadBool_e@3:
  00310	88 5d e7	 mov	 BYTE PTR __k$[ebp+19], bl
  00313	eb 69		 jmp	 SHORT $LN1@LoadBool_e@3
$LN78@LoadBool_e@3:
  00315	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00319	eb 63		 jmp	 SHORT $LN1@LoadBool_e@3
$LN79@LoadBool_e@3:
  0031b	88 4d e5	 mov	 BYTE PTR __k$[ebp+17], cl
  0031e	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@3
$LN80@LoadBool_e@3:
  00320	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00324	eb 58		 jmp	 SHORT $LN1@LoadBool_e@3
$LN81@LoadBool_e@3:
  00326	88 5d e3	 mov	 BYTE PTR __k$[ebp+15], bl
  00329	eb 53		 jmp	 SHORT $LN1@LoadBool_e@3
$LN82@LoadBool_e@3:
  0032b	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0032f	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@3
$LN83@LoadBool_e@3:
  00331	88 4d e1	 mov	 BYTE PTR __k$[ebp+13], cl
  00334	eb 48		 jmp	 SHORT $LN1@LoadBool_e@3
$LN84@LoadBool_e@3:
  00336	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0033a	eb 42		 jmp	 SHORT $LN1@LoadBool_e@3
$LN85@LoadBool_e@3:
  0033c	88 5d df	 mov	 BYTE PTR __k$[ebp+11], bl
  0033f	eb 3d		 jmp	 SHORT $LN1@LoadBool_e@3
$LN86@LoadBool_e@3:
  00341	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00345	eb 37		 jmp	 SHORT $LN1@LoadBool_e@3
$LN87@LoadBool_e@3:
  00347	88 4d dd	 mov	 BYTE PTR __k$[ebp+9], cl
  0034a	eb 32		 jmp	 SHORT $LN1@LoadBool_e@3
$LN88@LoadBool_e@3:
  0034c	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00350	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@3
$LN89@LoadBool_e@3:
  00352	88 5d db	 mov	 BYTE PTR __k$[ebp+7], bl
  00355	eb 27		 jmp	 SHORT $LN1@LoadBool_e@3
$LN90@LoadBool_e@3:
  00357	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0035b	eb 21		 jmp	 SHORT $LN1@LoadBool_e@3
$LN91@LoadBool_e@3:
  0035d	88 4d d9	 mov	 BYTE PTR __k$[ebp+5], cl
  00360	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@3
$LN92@LoadBool_e@3:
  00362	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00366	eb 16		 jmp	 SHORT $LN1@LoadBool_e@3
$LN93@LoadBool_e@3:
  00368	c6 45 d7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0036c	eb 10		 jmp	 SHORT $LN1@LoadBool_e@3
$LN94@LoadBool_e@3:
  0036e	c6 45 d6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00372	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@3
$LN95@LoadBool_e@3:
  00374	c6 45 d5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00378	eb 04		 jmp	 SHORT $LN1@LoadBool_e@3
$LN96@LoadBool_e@3:
  0037a	c6 45 d4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@3:
  0037e	6a 08		 push	 8
  00380	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  00383	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+34], 0
  00387	5a		 pop	 edx
$LL104@LoadBool_e@3:
  00388	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0038e	83 c0 04	 add	 eax, 4
  00391	4a		 dec	 edx
  00392	75 f4		 jne	 SHORT $LL104@LoadBool_e@3
  00394	6a 20		 push	 32			; 00000020H
  00396	58		 pop	 eax
$LL101@LoadBool_e@3:
  00397	8b c8		 mov	 ecx, eax
  00399	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0039f	79 05		 jns	 SHORT $LN111@LoadBool_e@3
  003a1	49		 dec	 ecx
  003a2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003a5	41		 inc	 ecx
$LN111@LoadBool_e@3:
  003a6	b2 ed		 mov	 dl, -19			; ffffffedH
  003a8	2a d1		 sub	 dl, cl
  003aa	30 54 05 d4	 xor	 BYTE PTR __k$[ebp+eax], dl
  003ae	40		 inc	 eax
  003af	83 f8 22	 cmp	 eax, 34			; 00000022H
  003b2	7c e3		 jl	 SHORT $LL101@LoadBool_e@3

; 103  : 		return LoadBool(_k, b);

  003b4	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  003b7	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  003ba	50		 push	 eax
  003bb	8b ce		 mov	 ecx, esi
  003bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  003c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c6	5e		 pop	 esi
  003c7	33 cd		 xor	 ecx, ebp
  003c9	5b		 pop	 ebx
  003ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003cf	c9		 leave
  003d0	c2 08 00	 ret	 8
??$LoadBool_e@$0CD@@ioINILoader@@QAE_NAAY0CD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<35>
_TEXT	ENDS
PUBLIC	??0ReflectDamageInfo@@QAE@ABU0@@Z		; ReflectDamageInfo::ReflectDamageInfo
; Function compile flags: /Ogsp
;	COMDAT ??0ReflectDamageInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0ReflectDamageInfo@@QAE@ABU0@@Z PROC			; ReflectDamageInfo::ReflectDamageInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
  00010	d9 47 28	 fld	 DWORD PTR [edi+40]
  00013	d9 5e 28	 fstp	 DWORD PTR [esi+40]
  00016	8b c6		 mov	 eax, esi
  00018	d9 47 2c	 fld	 DWORD PTR [edi+44]
  0001b	5f		 pop	 edi
  0001c	d9 5e 2c	 fstp	 DWORD PTR [esi+44]
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0ReflectDamageInfo@@QAE@ABU0@@Z ENDP			; ReflectDamageInfo::ReflectDamageInfo
_TEXT	ENDS
PUBLIC	??4ReflectDamageInfo@@QAEAAU0@ABU0@@Z		; ReflectDamageInfo::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4ReflectDamageInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4ReflectDamageInfo@@QAEAAU0@ABU0@@Z PROC		; ReflectDamageInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z
  00010	d9 47 28	 fld	 DWORD PTR [edi+40]
  00013	d9 5e 28	 fstp	 DWORD PTR [esi+40]
  00016	8b c6		 mov	 eax, esi
  00018	d9 47 2c	 fld	 DWORD PTR [edi+44]
  0001b	5f		 pop	 edi
  0001c	d9 5e 2c	 fstp	 DWORD PTR [esi+44]
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4ReflectDamageInfo@@QAEAAU0@ABU0@@Z ENDP		; ReflectDamageInfo::operator=
_TEXT	ENDS
PUBLIC	??_GReflectDamageInfo@@QAEPAXI@Z		; ReflectDamageInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GReflectDamageInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GReflectDamageInfo@@QAEPAXI@Z PROC			; ReflectDamageInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GReflectDamageInfo@@QAEPAXI@Z ENDP			; ReflectDamageInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z ; std::allocator<ReflectDamageInfo>::construct
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z
_TEXT	SEGMENT
$T527394 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z PROC ; std::allocator<ReflectDamageInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T527394[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0ReflectDamageInfo@@QAE@ABU0@@Z
$LN3@construct:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T527394[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@$$QAU3@@Z ENDP ; std::allocator<ReflectDamageInfo>::construct
PUBLIC	??0WeaponInfo@@QAE@XZ				; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??0WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??0WeaponInfo@@QAE@XZ PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx

; 64   : 	WeaponInfo()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 65   : 	{
; 66   : 		Init();

  0000c	33 c0		 xor	 eax, eax
  0000e	89 06		 mov	 DWORD PTR [esi], eax
  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00013	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00016	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00019	88 46 20	 mov	 BYTE PTR [esi+32], al
  0001c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 67   : 	}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??0WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??0ReflectDamageInfo@@QAE@XZ			; ReflectDamageInfo::ReflectDamageInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.h
;	COMDAT ??0ReflectDamageInfo@@QAE@XZ
_TEXT	SEGMENT
??0ReflectDamageInfo@@QAE@XZ PROC			; ReflectDamageInfo::ReflectDamageInfo, COMDAT
; _this$ = ecx

; 16   : 	ReflectDamageInfo()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo

; 17   : 	{
; 18   : 		m_WeaponInfo.Init();
; 19   : 
; 20   : 		m_fRangeMinDamage = 0.0f;

  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	33 c0		 xor	 eax, eax
  0000d	89 06		 mov	 DWORD PTR [esi], eax
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00015	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00018	88 46 20	 mov	 BYTE PTR [esi+32], al
  0001b	89 46 24	 mov	 DWORD PTR [esi+36], eax
  0001e	f3 0f 11 46 28	 movss	 DWORD PTR [esi+40], xmm0

; 21   : 		m_fRangeMaxDamage = 0.0f;

  00023	f3 0f 11 46 2c	 movss	 DWORD PTR [esi+44], xmm0

; 22   : 	}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??0ReflectDamageInfo@@QAE@XZ ENDP			; ReflectDamageInfo::ReflectDamageInfo
_TEXT	ENDS
PUBLIC	??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	05		 cmp	 edi, 89478485		; 05555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@IPAU1@@Z ; std::_Allocate<ReflectDamageInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 30	 imul	 edi, 48			; 00000030H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z ; std::allocator<ReflectDamageInfo>::construct<ReflectDamageInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z
_TEXT	SEGMENT
$T527524 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z PROC ; std::allocator<ReflectDamageInfo>::construct<ReflectDamageInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T527524[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0ReflectDamageInfo@@QAE@ABU0@@Z
$LN3@construct@2:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T527524[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUReflectDamageInfo@@@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@AAU2@@Z ENDP ; std::allocator<ReflectDamageInfo>::construct<ReflectDamageInfo &>
PUBLIC	??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4ReflectDamageInfo@@QAEAAU0@ABU0@@Z
  00012	83 45 10 30	 add	 DWORD PTR __Dest$[ebp], 48 ; 00000030H
  00016	83 c6 30	 add	 esi, 48			; 00000030H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>
_TEXT	ENDS
PUBLIC	??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z ; std::_Construct<ReflectDamageInfo,ReflectDamageInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z
_TEXT	SEGMENT
$T527552 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z PROC ; std::_Construct<ReflectDamageInfo,ReflectDamageInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T527552[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0ReflectDamageInfo@@QAE@ABU0@@Z
$LN3@Construct:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T527552[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z ENDP ; std::_Construct<ReflectDamageInfo,ReflectDamageInfo const &>
PUBLIC	??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z
_TEXT	SEGMENT
$T527587 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T527587[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0ReflectDamageInfo@@QAE@ABU0@@Z
$LN7@Cons_val:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T527587[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo>
PUBLIC	??$_Destroy@UReflectDamageInfo@@@std@@YAXPAUReflectDamageInfo@@@Z ; std::_Destroy<ReflectDamageInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UReflectDamageInfo@@@std@@YAXPAUReflectDamageInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UReflectDamageInfo@@@std@@YAXPAUReflectDamageInfo@@@Z PROC ; std::_Destroy<ReflectDamageInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UReflectDamageInfo@@@std@@YAXPAUReflectDamageInfo@@@Z ENDP ; std::_Destroy<ReflectDamageInfo>
_TEXT	ENDS
PUBLIC	?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z ; ioReflectDamageBuff::GetReflectAttack
EXTRN	_atexit:PROC
;	COMDAT ?KNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4U3@A
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_BSS	SEGMENT
?KNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4U3@A DB 028H DUP (?) ; `ioReflectDamageBuff::GetReflectAttack'::`2'::KNone
_BSS	ENDS
;	COMDAT ?$S1@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4IA
_BSS	SEGMENT
?$S1@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4IA DD 01H DUP (?) ; `ioReflectDamageBuff::GetReflectAttack'::`2'::$S1
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z$0
__ehfuncinfo$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.cpp
xdata$x	ENDS
;	COMDAT ?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_fDamage$ = 8						; size = 4
?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z PROC ; ioReflectDamageBuff::GetReflectAttack, COMDAT
; _this$ = ecx

; 142  : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 143  : 	static WeaponInfo KNone;

  0000e	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S1@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4IA, 1
  00015	bf 00 00 00 00	 mov	 edi, OFFSET ?KNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4U3@A
  0001a	75 1d		 jne	 SHORT $LN5@GetReflect
  0001c	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S1@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4IA, 1
  00023	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00027	8b cf		 mov	 ecx, edi
  00029	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo
  0002e	68 00 00 00 00	 push	 OFFSET ??__FKNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@YAXXZ ; `ioReflectDamageBuff::GetReflectAttack'::`2'::`dynamic atexit destructor for 'KNone''
  00033	e8 00 00 00 00	 call	 _atexit
  00038	59		 pop	 ecx
$LN5@GetReflect:

; 144  : 	ReflectDamageInfoVec::const_iterator iter = m_ReflectDamageInfoVec.begin();

  00039	8b 86 70 09 00
	00		 mov	 eax, DWORD PTR [esi+2416]

; 145  : 	for( ; iter != m_ReflectDamageInfoVec.end(); ++iter )

  0003f	8b b6 74 09 00
	00		 mov	 esi, DWORD PTR [esi+2420]
  00045	eb 2f		 jmp	 SHORT $LN39@GetReflect
$LL17@GetReflect:

; 146  : 	{
; 147  : 		const ReflectDamageInfo& rkInfo = *iter;
; 148  : 		if( rkInfo.m_fRangeMinDamage <= fDamage && fDamage <= rkInfo.m_fRangeMaxDamage )

  00047	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  0004c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fDamage$[ebp]
  00051	0f 5a c0	 cvtps2pd xmm0, xmm0
  00054	0f 5a c9	 cvtps2pd xmm1, xmm1
  00057	66 0f 2f c8	 comisd	 xmm1, xmm0
  0005b	72 16		 jb	 SHORT $LN3@GetReflect
  0005d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDamage$[ebp]
  00062	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00067	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0006d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00071	73 09		 jae	 SHORT $LN6@GetReflect
$LN3@GetReflect:

; 145  : 	for( ; iter != m_ReflectDamageInfoVec.end(); ++iter )

  00073	83 c0 30	 add	 eax, 48			; 00000030H
$LN39@GetReflect:
  00076	3b c6		 cmp	 eax, esi
  00078	75 cd		 jne	 SHORT $LL17@GetReflect

; 149  : 			return rkInfo.m_WeaponInfo;		
; 150  : 	}
; 151  : 
; 152  : 	return KNone;

  0007a	8b c7		 mov	 eax, edi
$LN6@GetReflect:

; 153  : }

  0007c	e8 00 00 00 00	 call	 __EH_epilog3
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S1@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4IA
  00005	83 e0 fe	 and	 eax, -2			; fffffffeH
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?$S1@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4IA, eax
  0000d	c3		 ret	 0
__ehhandler$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z ENDP ; ioReflectDamageBuff::GetReflectAttack
PUBLIC	??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z
_TEXT	SEGMENT
$T527728 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T527728[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@2
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0ReflectDamageInfo@@QAE@ABU0@@Z
$LN7@Cons_val@2:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T527728[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo &>
PUBLIC	??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00@Z ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$527746 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00@Z PROC ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$527746[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00@Z ENDP ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@ABU3@@Z ; std::allocator<ReflectDamageInfo>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@ABU3@@Z PROC ; std::allocator<ReflectDamageInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z ; std::_Construct<ReflectDamageInfo,ReflectDamageInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@ABU3@@Z ENDP ; std::allocator<ReflectDamageInfo>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@@Z ; std::allocator<ReflectDamageInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@@Z PROC ; std::allocator<ReflectDamageInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UReflectDamageInfo@@@std@@QAEXPAUReflectDamageInfo@@@Z ENDP ; std::allocator<ReflectDamageInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@ABU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@ABU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@ABU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z ; std::_Construct<ReflectDamageInfo,ReflectDamageInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@ABU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo const &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@@Z ; std::_Dest_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@@Z PROC ; std::_Dest_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN23@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 30	 add	 esi, 48			; 00000030H
$LN23@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$4
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z ; std::_Construct<ReflectDamageInfo,ReflectDamageInfo const &>
  00027	83 45 10 30	 add	 DWORD PTR __Dest$[ebp], 48 ; 00000030H
  0002b	83 45 08 30	 add	 DWORD PTR __First$[ebp], 48 ; 00000030H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN51@Uninit_cop
$LL3@Uninit_cop:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 30	 add	 esi, 48			; 00000030H
$LN51@Uninit_cop:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Uninit_cop:
$LN4@Uninit_cop:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN50@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
PUBLIC	??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo>,ReflectDamageInfo>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$4
__ehfuncinfo$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo>,ReflectDamageInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@U3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo>
  0002a	83 45 10 30	 add	 DWORD PTR __Dest$[ebp], 48 ; 00000030H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 30	 add	 esi, 48			; 00000030H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN35@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00044	83 c6 30	 add	 esi, 48			; 00000030H
$LN35@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00047	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004a	75 ef		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN36@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN34@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo>,ReflectDamageInfo>
PUBLIC	??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN27@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 30	 add	 esi, 48			; 00000030H
$LN27@Destroy_ra@2:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$528165 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528165[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Uninitialized_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$528172 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@@Z PROC ; std::_Uninitialized_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528172[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@U1@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo>,ReflectDamageInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@@Z ENDP ; std::_Uninitialized_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXPAUReflectDamageInfo@@0@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXPAUReflectDamageInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXPAUReflectDamageInfo@@0@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXPAUReflectDamageInfo@@0@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$528204 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$528204[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUReflectDamageInfo@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@PAU2@00@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Umove<ReflectDamageInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUReflectDamageInfo@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUReflectDamageInfo@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@PAU2@00@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Umove<ReflectDamageInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Uninitialized_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUReflectDamageInfo@@@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEPAUReflectDamageInfo@@PAU2@00@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Umove<ReflectDamageInfo *>
_TEXT	ENDS
PUBLIC	??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$528289 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 30		 push	 48			; 00000030H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$528289[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@std@@PAUReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@2@@std@@YAPAUReflectDamageInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UReflectDamageInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ReflectDamageInfo,std::allocator<ReflectDamageInfo> > >,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
PUBLIC	??1?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::~vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::~vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Tidy
??1?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::~vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$525338 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 55 55 55
	05		 cmp	 ebx, 89478485		; 05555555H
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN38@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 30		 push	 48			; 00000030H
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 70		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UReflectDamageInfo@@@std@@YAPAUReflectDamageInfo@@IPAU1@@Z ; std::_Allocate<ReflectDamageInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$525338[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$525338[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUReflectDamageInfo@@PAU1@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAPAUReflectDamageInfo@@PAU1@00AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Uninitialized_move<ReflectDamageInfo *,ReflectDamageInfo *,std::allocator<ReflectDamageInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 30		 push	 48			; 00000030H
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 17		 je	 SHORT $LN33@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0006f	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00072	50		 push	 eax
  00073	ff 76 04	 push	 DWORD PTR [esi+4]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0007c	ff 36		 push	 DWORD PTR [esi]
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00083	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00086	8b ce		 mov	 ecx, esi
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  0008e	6b db 30	 imul	 ebx, 48			; 00000030H

; 770  : 			this->_Mylast = _Ptr + _Size;

  00091	6b ff 30	 imul	 edi, 48			; 00000030H
  00094	8b 45 08	 mov	 eax, DWORD PTR __Ptr$525338[ebp]
  00097	03 d8		 add	 ebx, eax
  00099	03 f8		 add	 edi, eax
  0009b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0009e	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a3	e8 00 00 00 00	 call	 __EH_epilog3
  000a8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000ab	ff 75 08	 push	 DWORD PTR __Ptr$525338[ebp]
  000ae	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b3	59		 pop	 ecx

; 757  : 			_RERAISE;

  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN39@reserve:
$LN37@reserve:
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::reserve
PUBLIC	?erase@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@0@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$528452 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 03		 mov	 DWORD PTR [ebx], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 27		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	57		 push	 edi
  00018	ff 75 10	 push	 DWORD PTR __Cat$528452[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Move@PAUReflectDamageInfo@@PAU1@@std@@YAPAUReflectDamageInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ReflectDamageInfo *,ReflectDamageInfo *>
  00025	8b f8		 mov	 edi, eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00027	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0002a	50		 push	 eax
  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UReflectDamageInfo@@@std@@@std@@YAXPAUReflectDamageInfo@@0AAV?$allocator@UReflectDamageInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ReflectDamageInfo> >
  00034	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1211 : 			this->_Mylast = _Ptr;

  00037	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0003a	5f		 pop	 edi
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0003b	5e		 pop	 esi
  0003c	8b c3		 mov	 eax, ebx
  0003e	5b		 pop	 ebx

; 1214 : 		}

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::erase
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 30		 push	 48			; 00000030H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 30		 push	 48			; 00000030H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IBEII@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioReflectDamageBuff@@6B@			; ioReflectDamageBuff::`vftable'
PUBLIC	??0ioReflectDamageBuff@@QAE@XZ			; ioReflectDamageBuff::ioReflectDamageBuff
PUBLIC	??_R4ioReflectDamageBuff@@6B@			; ioReflectDamageBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioReflectDamageBuff@@@8			; ioReflectDamageBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioReflectDamageBuff@@8			; ioReflectDamageBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioReflectDamageBuff@@8			; ioReflectDamageBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioReflectDamageBuff@@8		; ioReflectDamageBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z ; ioReflectDamageBuff::LoadProperty
PUBLIC	?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ	; ioReflectDamageBuff::Clone
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioReflectDamageBuff@@UAEPAXI@Z:PROC		; ioReflectDamageBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioReflectDamageBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioReflectDamageBuff@@8 DD FLAT:??_R0?AVioReflectDamageBuff@@@8 ; ioReflectDamageBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioReflectDamageBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioReflectDamageBuff@@8
rdata$r	SEGMENT
??_R2ioReflectDamageBuff@@8 DD FLAT:??_R1A@?0A@EA@ioReflectDamageBuff@@8 ; ioReflectDamageBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioReflectDamageBuff@@8
rdata$r	SEGMENT
??_R3ioReflectDamageBuff@@8 DD 00H			; ioReflectDamageBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioReflectDamageBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioReflectDamageBuff@@@8
_DATA	SEGMENT
??_R0?AVioReflectDamageBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioReflectDamageBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioReflectDamageBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioReflectDamageBuff@@6B@
rdata$r	SEGMENT
??_R4ioReflectDamageBuff@@6B@ DD 00H			; ioReflectDamageBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioReflectDamageBuff@@@8
	DD	FLAT:??_R3ioReflectDamageBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioReflectDamageBuff@@6B@
CONST	SEGMENT
??_7ioReflectDamageBuff@@6B@ DD FLAT:??_R4ioReflectDamageBuff@@6B@ ; ioReflectDamageBuff::`vftable'
	DD	FLAT:?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioReflectDamageBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioReflectDamageBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioReflectDamageBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioReflectDamageBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioReflectDamageBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.cpp
CONST	ENDS
;	COMDAT ??0ioReflectDamageBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioReflectDamageBuff@@QAE@XZ PROC			; ioReflectDamageBuff::ioReflectDamageBuff, COMDAT
; _this$ = ecx

; 9    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioReflectDamageBuff@@6B@
  0000e	33 c9		 xor	 ecx, ecx
  00010	89 8e 70 09 00
	00		 mov	 DWORD PTR [esi+2416], ecx
  00016	89 8e 74 09 00
	00		 mov	 DWORD PTR [esi+2420], ecx
  0001c	89 8e 78 09 00
	00		 mov	 DWORD PTR [esi+2424], ecx

; 10   : }

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c3		 ret	 0
??0ioReflectDamageBuff@@QAE@XZ ENDP			; ioReflectDamageBuff::ioReflectDamageBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	??0ioReflectDamageBuff@@QAE@ABV0@@Z		; ioReflectDamageBuff::ioReflectDamageBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.cpp
xdata$x	SEGMENT
__unwindtable$??0ioReflectDamageBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioReflectDamageBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioReflectDamageBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioReflectDamageBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioReflectDamageBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioReflectDamageBuff@@QAE@ABV0@@Z PROC		; ioReflectDamageBuff::ioReflectDamageBuff, COMDAT
; _this$ = ecx

; 18   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioReflectDamageBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioReflectDamageBuff@@6B@
  00024	8a 87 6c 09 00
	00		 mov	 al, BYTE PTR [edi+2412]
  0002a	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al
  00030	8a 87 6d 09 00
	00		 mov	 al, BYTE PTR [edi+2413]
  00036	88 86 6d 09 00
	00		 mov	 BYTE PTR [esi+2413], al
  0003c	8a 87 6e 09 00
	00		 mov	 al, BYTE PTR [edi+2414]
  00042	81 c7 70 09 00
	00		 add	 edi, 2416		; 00000970H
  00048	57		 push	 edi
  00049	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  0004f	88 86 6e 09 00
	00		 mov	 BYTE PTR [esi+2414], al
  00055	e8 00 00 00 00	 call	 ??0?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >

; 19   : }

  0005a	8b c6		 mov	 eax, esi
  0005c	e8 00 00 00 00	 call	 __EH_epilog3
  00061	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioReflectDamageBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioReflectDamageBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioReflectDamageBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioReflectDamageBuff@@QAE@ABV0@@Z ENDP		; ioReflectDamageBuff::ioReflectDamageBuff
PUBLIC	??1ioReflectDamageBuff@@UAE@XZ			; ioReflectDamageBuff::~ioReflectDamageBuff
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioReflectDamageBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioReflectDamageBuff@@UAE@XZ$0
__ehfuncinfo$??1ioReflectDamageBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioReflectDamageBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.cpp
xdata$x	ENDS
;	COMDAT ??1ioReflectDamageBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioReflectDamageBuff@@UAE@XZ PROC			; ioReflectDamageBuff::~ioReflectDamageBuff, COMDAT
; _this$ = ecx

; 22   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioReflectDamageBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioReflectDamageBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 23   : }

  0001b	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00021	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Tidy
  00026	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00031	e8 00 00 00 00	 call	 __EH_epilog3
  00036	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioReflectDamageBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioReflectDamageBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioReflectDamageBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioReflectDamageBuff@@UAE@XZ ENDP			; ioReflectDamageBuff::~ioReflectDamageBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T528555 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ PROC	; ioReflectDamageBuff::Clone, COMDAT
; _this$ = ecx

; 73   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 74   : 	return new ioReflectDamageBuff( *this );

  0000e	68 80 09 00 00	 push	 2432			; 00000980H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T528555[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioReflectDamageBuff@@QAE@ABV0@@Z ; ioReflectDamageBuff::ioReflectDamageBuff
$LN3@Clone:

; 75   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T528555[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioReflectDamageBuff@@UAEPAVioBuff@@XZ ENDP	; ioReflectDamageBuff::Clone
PUBLIC	?push_back@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXABUReflectDamageInfo@@@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXABUReflectDamageInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXABUReflectDamageInfo@@@Z PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 30		 push	 48			; 00000030H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 30	 imul	 edi, 48			; 00000030H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UReflectDamageInfo@@@std@@UReflectDamageInfo@@AAU3@@std@@YAXAAV?$allocator@UReflectDamageInfo@@@0@PAUReflectDamageInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ReflectDamageInfo>,ReflectDamageInfo,ReflectDamageInfo &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@IAEXI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@UReflectDamageInfo@@ABU1@@std@@YAXPAUReflectDamageInfo@@ABU1@@Z ; std::_Construct<ReflectDamageInfo,ReflectDamageInfo const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back:

; 996  : 			++this->_Mylast;

  00061	83 46 04 30	 add	 DWORD PTR [esi+4], 48	; 00000030H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXABUReflectDamageInfo@@@Z ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXXZ ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T528608 = -4						; size = 4
?clear@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T528608[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@0@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::clear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioReflectDamageBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioReflectDamageBuff@@UAEPAXI@Z PROC			; ioReflectDamageBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioReflectDamageBuff@@UAE@XZ ; ioReflectDamageBuff::~ioReflectDamageBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioReflectDamageBuff@@UAEPAXI@Z ENDP			; ioReflectDamageBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_this$GSCopy$
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z$0
__ehfuncinfo$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioreflectdamagebuff.cpp
xdata$x	ENDS
;	COMDAT ?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_ReflectAttackInfo$524124 = -680			; size = 48
_this$GSCopy$ = -632					; size = 4
tv6348 = -628						; size = 4
$T528852 = -628						; size = 4
_iCnt$ = -628						; size = 4
tv8265 = -624						; size = 4
_szBuf$ = -620						; size = 260
_szKey$ = -360						; size = 260
___encStr$524585 = -100					; size = 39
__k$529220 = -96					; size = 35
___encStr$524889 = -56					; size = 33
___encStr$524737 = -56					; size = 33
___encStr$524433 = -56					; size = 30
___encStr$524281 = -52					; size = 29
__k$528885 = -48					; size = 24
___encStr$524128 = -48					; size = 22
__k$529095 = -44					; size = 21
__k$528680 = -44					; size = 19
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z PROC ; ioReflectDamageBuff::LoadProperty, COMDAT
; _this$ = ecx

; 26   : {

  00000	68 9c 02 00 00	 push	 668			; 0000029cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 27   : 	ioBuff::LoadProperty( rkLoader );

  00012	57		 push	 edi

; 69   : 	m_bEnableEscapeCatchAttackReflect = rkLoader.LoadBool_e( "enable_escape_catch_attack_reflect", false );	

  00013	89 8d 88 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  0001e	be 03 01 00 00	 mov	 esi, 259		; 00000103H
  00023	33 db		 xor	 ebx, ebx
  00025	56		 push	 esi
  00026	8d 85 99 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp+1]
  0002c	53		 push	 ebx
  0002d	50		 push	 eax
  0002e	88 9d 98 fe ff
	ff		 mov	 BYTE PTR _szKey$[ebp], bl
  00034	e8 00 00 00 00	 call	 _memset
  00039	56		 push	 esi
  0003a	8d 85 95 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00040	53		 push	 ebx
  00041	50		 push	 eax
  00042	88 9d 94 fd ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	6a 04		 push	 4
  00052	c7 45 d4 89 85
	98 8b		 mov	 DWORD PTR __k$528680[ebp], -1952938615 ; 8b988589H
  00059	c7 45 d8 8f 80
	8e b5		 mov	 DWORD PTR __k$528680[ebp+4], -1248952177 ; b58e808fH
  00060	c7 45 dc 89 83
	9c 84		 mov	 DWORD PTR __k$528680[ebp+8], -2070117495 ; 849c8389H
  00067	c7 45 e0 b2 9f
	9f 8b		 mov	 DWORD PTR __k$528680[ebp+12], -1952473166 ; 8b9f9fb2H
  0006e	66 c7 45 e4 99
	89		 mov	 WORD PTR __k$528680[ebp+16], 35225 ; 00008999H
  00074	8d 45 d4	 lea	 eax, DWORD PTR __k$528680[ebp]
  00077	88 5d e6	 mov	 BYTE PTR __k$528680[ebp+18], bl
  0007a	59		 pop	 ecx
$LL705@LoadProper:

; 28   : 
; 29   : 	char szKey[MAX_PATH] = "";
; 30   : 	char szBuf[MAX_PATH] = "";
; 31   : 
; 32   : 	m_bDisableDownState = rkLoader.LoadBool_e( "disable_down_state", false );	

  0007b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00081	83 c0 04	 add	 eax, 4
  00084	49		 dec	 ecx
  00085	75 f4		 jne	 SHORT $LL705@LoadProper
  00087	6a 10		 push	 16			; 00000010H
  00089	5e		 pop	 esi
$LL702@LoadProper:
  0008a	8b c6		 mov	 eax, esi
  0008c	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00091	79 05		 jns	 SHORT $LN1144@LoadProper
  00093	48		 dec	 eax
  00094	83 c8 fc	 or	 eax, -4			; fffffffcH
  00097	40		 inc	 eax
$LN1144@LoadProper:
  00098	b1 ed		 mov	 cl, -19			; ffffffedH
  0009a	2a c8		 sub	 cl, al
  0009c	30 4c 35 d4	 xor	 BYTE PTR __k$528680[ebp+esi], cl
  000a0	46		 inc	 esi
  000a1	83 fe 12	 cmp	 esi, 18			; 00000012H
  000a4	7c e4		 jl	 SHORT $LL702@LoadProper
  000a6	53		 push	 ebx
  000a7	8d 45 d4	 lea	 eax, DWORD PTR __k$528680[ebp]
  000aa	50		 push	 eax
  000ab	8b cf		 mov	 ecx, edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  000b3	8b b5 88 fd ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000b9	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al

; 33   : 	
; 34   : 	m_ReflectDamageInfoVec.clear();

  000bf	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  000c5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ca	50		 push	 eax
  000cb	52		 push	 edx
  000cc	8d 85 8c fd ff
	ff		 lea	 eax, DWORD PTR $T528852[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?erase@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@@2@0@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::erase
  000d8	6a 05		 push	 5

; 35   : 	int iCnt = rkLoader.LoadInt_e( "reflect_attack_type_cnt", 0 );	

  000da	c7 45 d0 9f 89
	8d 86		 mov	 DWORD PTR __k$528885[ebp], -2037544545 ; 868d899fH
  000e1	c7 45 d4 88 8f
	9f b5		 mov	 DWORD PTR __k$528885[ebp+4], -1247834232 ; b59f8f88H
  000e8	c7 45 d8 8c 98
	9f 8b		 mov	 DWORD PTR __k$528885[ebp+8], -1952474996 ; 8b9f988cH
  000ef	c7 45 dc 8e 87
	b4 9e		 mov	 DWORD PTR __k$528885[ebp+12], -1632335986 ; 9eb4878eH
  000f6	c7 45 e0 94 9c
	8e b5		 mov	 DWORD PTR __k$528885[ebp+16], -1248945004 ; b58e9c94H
  000fd	8d 45 d0	 lea	 eax, DWORD PTR __k$528885[ebp]
  00100	c7 45 e4 8e 82
	9f 00		 mov	 DWORD PTR __k$528885[ebp+20], 10453646 ; 009f828eH
  00107	59		 pop	 ecx
$LL829@LoadProper:
  00108	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0010e	83 c0 04	 add	 eax, 4
  00111	49		 dec	 ecx
  00112	75 f4		 jne	 SHORT $LL829@LoadProper
  00114	6a 14		 push	 20			; 00000014H
  00116	58		 pop	 eax
$LL826@LoadProper:
  00117	8b c8		 mov	 ecx, eax
  00119	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0011f	79 05		 jns	 SHORT $LN1145@LoadProper
  00121	49		 dec	 ecx
  00122	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00125	41		 inc	 ecx
$LN1145@LoadProper:
  00126	b2 ed		 mov	 dl, -19			; ffffffedH
  00128	2a d1		 sub	 dl, cl
  0012a	30 54 05 d0	 xor	 BYTE PTR __k$528885[ebp+eax], dl
  0012e	40		 inc	 eax
  0012f	83 f8 17	 cmp	 eax, 23			; 00000017H
  00132	7c e3		 jl	 SHORT $LL826@LoadProper
  00134	53		 push	 ebx
  00135	8d 45 d0	 lea	 eax, DWORD PTR __k$528885[ebp]
  00138	50		 push	 eax
  00139	8b cf		 mov	 ecx, edi
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00141	89 85 8c fd ff
	ff		 mov	 DWORD PTR _iCnt$[ebp], eax

; 36   : 		
; 37   : 	if( iCnt > 0 )

  00147	3b c3		 cmp	 eax, ebx
  00149	0f 8e bf 03 00
	00		 jle	 $LN595@LoadProper

; 38   : 		m_ReflectDamageInfoVec.reserve( iCnt );

  0014f	50		 push	 eax
  00150	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00156	e8 00 00 00 00	 call	 ?reserve@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXI@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::reserve

; 39   : 
; 40   : 	for( int i = 0; i < iCnt; ++i )

  0015b	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _iCnt$[ebp]
  00161	3b c3		 cmp	 eax, ebx
  00163	0f 8e a5 03 00
	00		 jle	 $LN595@LoadProper
  00169	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  0016f	c7 85 90 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv8265[ebp], 1
  00179	89 85 8c fd ff
	ff		 mov	 DWORD PTR tv6348[ebp], eax
$LL597@LoadProper:

; 41   : 	{
; 42   : 		ReflectDamageInfo ReflectAttackInfo;

  0017f	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR _ReflectAttackInfo$524124[ebp]
  00185	e8 00 00 00 00	 call	 ??0ReflectDamageInfo@@QAE@XZ ; ReflectDamageInfo::ReflectDamageInfo
  0018a	6a 05		 push	 5
  0018c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 43   : 		ReflectAttackInfo.m_WeaponInfo.Init();

  0018f	89 9d 58 fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp], ebx
  00195	89 9d 5c fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp+4], ebx
  0019b	89 9d 70 fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp+24], ebx
  001a1	89 9d 74 fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp+28], ebx
  001a7	88 9d 78 fd ff
	ff		 mov	 BYTE PTR _ReflectAttackInfo$524124[ebp+32], bl
  001ad	89 9d 7c fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp+36], ebx

; 44   : 		
; 45   : 		wsprintf_e( szKey, "reflect_attack%d_type", i+1  );

  001b3	c7 45 d0 9f 89
	8d 86		 mov	 DWORD PTR ___encStr$524128[ebp], -2037544545 ; 868d899fH
  001ba	c7 45 d4 88 8f
	9f b5		 mov	 DWORD PTR ___encStr$524128[ebp+4], -1247834232 ; b59f8f88H
  001c1	c7 45 d8 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$524128[ebp+8], -1952474996 ; 8b9f988cH
  001c8	c7 45 dc 8e 87
	ce 8e		 mov	 DWORD PTR ___encStr$524128[ebp+12], -1899067506 ; 8ece878eH
  001cf	c7 45 e0 b2 98
	92 9a		 mov	 DWORD PTR ___encStr$524128[ebp+16], -1701668686 ; 9a9298b2H
  001d6	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$524128[ebp]
  001d9	66 c7 45 e4 88
	00		 mov	 WORD PTR ___encStr$524128[ebp+20], 136 ; 00000088H
  001df	59		 pop	 ecx
$LL839@LoadProper:
  001e0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001e6	83 c0 04	 add	 eax, 4
  001e9	49		 dec	 ecx
  001ea	75 f4		 jne	 SHORT $LL839@LoadProper
  001ec	ff b5 90 fd ff
	ff		 push	 DWORD PTR tv8265[ebp]
  001f2	80 75 e4 ed	 xor	 BYTE PTR ___encStr$524128[ebp+20], -19 ; ffffffedH
  001f6	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$524128[ebp]
  001f9	50		 push	 eax
  001fa	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00200	50		 push	 eax
  00201	ff d6		 call	 esi
  00203	83 c4 0c	 add	 esp, 12			; 0000000cH

; 46   : 		ReflectAttackInfo.m_WeaponInfo.m_iWeaponIdx = rkLoader.LoadInt( szKey, 0 );

  00206	53		 push	 ebx
  00207	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0020d	50		 push	 eax
  0020e	8b cf		 mov	 ecx, edi
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00216	6a 07		 push	 7
  00218	89 85 58 fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp], eax

; 47   : 
; 48   : 		wsprintf_e( szKey, "reflect_attack%d_type_resist", i+1 );

  0021e	c7 45 cc 9f 89
	8d 86		 mov	 DWORD PTR ___encStr$524281[ebp], -2037544545 ; 868d899fH
  00225	c7 45 d0 88 8f
	9f b5		 mov	 DWORD PTR ___encStr$524281[ebp+4], -1247834232 ; b59f8f88H
  0022c	c7 45 d4 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$524281[ebp+8], -1952474996 ; 8b9f988cH
  00233	c7 45 d8 8e 87
	ce 8e		 mov	 DWORD PTR ___encStr$524281[ebp+12], -1899067506 ; 8ece878eH
  0023a	c7 45 dc b2 98
	92 9a		 mov	 DWORD PTR ___encStr$524281[ebp+16], -1701668686 ; 9a9298b2H
  00241	c7 45 e0 88 b3
	99 8f		 mov	 DWORD PTR ___encStr$524281[ebp+20], -1885752440 ; 8f99b388H
  00248	c7 45 e4 9e 85
	98 9e		 mov	 DWORD PTR ___encStr$524281[ebp+24], -1634171490 ; 9e98859eH
  0024f	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$524281[ebp]
  00252	88 5d e8	 mov	 BYTE PTR ___encStr$524281[ebp+28], bl
  00255	59		 pop	 ecx
$LL847@LoadProper:
  00256	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0025c	83 c0 04	 add	 eax, 4
  0025f	49		 dec	 ecx
  00260	75 f4		 jne	 SHORT $LL847@LoadProper
  00262	ff b5 90 fd ff
	ff		 push	 DWORD PTR tv8265[ebp]
  00268	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$524281[ebp]
  0026b	50		 push	 eax
  0026c	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00272	50		 push	 eax
  00273	ff d6		 call	 esi
  00275	83 c4 0c	 add	 esp, 12			; 0000000cH

; 49   : 		ReflectAttackInfo.m_WeaponInfo.m_iResistanceIdx = rkLoader.LoadInt( szKey, 0 );

  00278	53		 push	 ebx
  00279	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0027f	50		 push	 eax
  00280	8b cf		 mov	 ecx, edi
  00282	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00288	6a 07		 push	 7
  0028a	89 85 5c fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp+4], eax

; 50   : 
; 51   : 		wsprintf_e( szKey, "reflect_attack%d_type_wounded", i+1 );

  00290	c7 45 c8 9f 89
	8d 86		 mov	 DWORD PTR ___encStr$524433[ebp], -2037544545 ; 868d899fH
  00297	c7 45 cc 88 8f
	9f b5		 mov	 DWORD PTR ___encStr$524433[ebp+4], -1247834232 ; b59f8f88H
  0029e	c7 45 d0 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$524433[ebp+8], -1952474996 ; 8b9f988cH
  002a5	c7 45 d4 8e 87
	ce 8e		 mov	 DWORD PTR ___encStr$524433[ebp+12], -1899067506 ; 8ece878eH
  002ac	c7 45 d8 b2 98
	92 9a		 mov	 DWORD PTR ___encStr$524433[ebp+16], -1701668686 ; 9a9298b2H
  002b3	c7 45 dc 88 b3
	9c 85		 mov	 DWORD PTR ___encStr$524433[ebp+20], -2053327992 ; 859cb388H
  002ba	c7 45 e0 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$524433[ebp+24], -1886420328 ; 8f8f8298H
  002c1	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$524433[ebp]
  002c4	66 c7 45 e4 89
	00		 mov	 WORD PTR ___encStr$524433[ebp+28], 137 ; 00000089H
  002ca	59		 pop	 ecx
$LL855@LoadProper:
  002cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002d1	83 c0 04	 add	 eax, 4
  002d4	49		 dec	 ecx
  002d5	75 f4		 jne	 SHORT $LL855@LoadProper
  002d7	ff b5 90 fd ff
	ff		 push	 DWORD PTR tv8265[ebp]
  002dd	80 75 e4 ed	 xor	 BYTE PTR ___encStr$524433[ebp+28], -19 ; ffffffedH
  002e1	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$524433[ebp]
  002e4	50		 push	 eax
  002e5	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  002eb	50		 push	 eax
  002ec	ff d6		 call	 esi
  002ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 52   : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  002f1	68 04 01 00 00	 push	 260			; 00000104H
  002f6	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002fc	50		 push	 eax
  002fd	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00302	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00308	50		 push	 eax
  00309	8b cf		 mov	 ecx, edi
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 53   : 		ReflectAttackInfo.m_WeaponInfo.m_WoundedAnimation = szBuf;

  00311	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00317	50		 push	 eax
  00318	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _ReflectAttackInfo$524124[ebp+8]
  0031e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00324	6a 09		 push	 9

; 54   : 
; 55   : 		wsprintf_e( szKey, "reflect_attack%d_type_wounded_loop_ani", i+1 );

  00326	c7 45 9c 9f 89
	8d 86		 mov	 DWORD PTR ___encStr$524585[ebp], -2037544545 ; 868d899fH
  0032d	c7 45 a0 88 8f
	9f b5		 mov	 DWORD PTR ___encStr$524585[ebp+4], -1247834232 ; b59f8f88H
  00334	c7 45 a4 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$524585[ebp+8], -1952474996 ; 8b9f988cH
  0033b	c7 45 a8 8e 87
	ce 8e		 mov	 DWORD PTR ___encStr$524585[ebp+12], -1899067506 ; 8ece878eH
  00342	c7 45 ac b2 98
	92 9a		 mov	 DWORD PTR ___encStr$524585[ebp+16], -1701668686 ; 9a9298b2H
  00349	c7 45 b0 88 b3
	9c 85		 mov	 DWORD PTR ___encStr$524585[ebp+20], -2053327992 ; 859cb388H
  00350	c7 45 b4 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$524585[ebp+24], -1886420328 ; 8f8f8298H
  00357	c7 45 b8 89 b3
	87 85		 mov	 DWORD PTR ___encStr$524585[ebp+28], -2054704247 ; 8587b389H
  0035e	c7 45 bc 82 9c
	b4 8b		 mov	 DWORD PTR ___encStr$524585[ebp+32], -1951097726 ; 8bb49c82H
  00365	66 c7 45 c0 83
	85		 mov	 WORD PTR ___encStr$524585[ebp+36], 34179 ; 00008583H
  0036b	8d 45 9c	 lea	 eax, DWORD PTR ___encStr$524585[ebp]
  0036e	88 5d c2	 mov	 BYTE PTR ___encStr$524585[ebp+38], bl
  00371	59		 pop	 ecx
$LL863@LoadProper:
  00372	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00378	83 c0 04	 add	 eax, 4
  0037b	49		 dec	 ecx
  0037c	75 f4		 jne	 SHORT $LL863@LoadProper
  0037e	6a 24		 push	 36			; 00000024H
  00380	58		 pop	 eax
$LL860@LoadProper:
  00381	8b c8		 mov	 ecx, eax
  00383	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00389	79 05		 jns	 SHORT $LN1146@LoadProper
  0038b	49		 dec	 ecx
  0038c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0038f	41		 inc	 ecx
$LN1146@LoadProper:
  00390	b2 ed		 mov	 dl, -19			; ffffffedH
  00392	2a d1		 sub	 dl, cl
  00394	30 54 05 9c	 xor	 BYTE PTR ___encStr$524585[ebp+eax], dl
  00398	40		 inc	 eax
  00399	83 f8 26	 cmp	 eax, 38			; 00000026H
  0039c	7c e3		 jl	 SHORT $LL860@LoadProper
  0039e	ff b5 90 fd ff
	ff		 push	 DWORD PTR tv8265[ebp]
  003a4	8d 45 9c	 lea	 eax, DWORD PTR ___encStr$524585[ebp]
  003a7	50		 push	 eax
  003a8	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  003ae	50		 push	 eax
  003af	ff d6		 call	 esi
  003b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 56   : 		ReflectAttackInfo.m_WeaponInfo.m_bWoundedLoopAni  = rkLoader.LoadBool( szKey, false ); 

  003b4	53		 push	 ebx
  003b5	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  003bb	50		 push	 eax
  003bc	8b cf		 mov	 ecx, edi
  003be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  003c4	6a 08		 push	 8
  003c6	88 85 78 fd ff
	ff		 mov	 BYTE PTR _ReflectAttackInfo$524124[ebp+32], al

; 57   : 		ReflectAttackInfo.m_WeaponInfo.m_dwCallTime       = 0;

  003cc	89 9d 74 fd ff
	ff		 mov	 DWORD PTR _ReflectAttackInfo$524124[ebp+28], ebx

; 58   : 
; 59   : 		wsprintf_e( szKey, "reflect_attack%d_type_min_damage", i+1 );

  003d2	c7 45 c8 9f 89
	8d 86		 mov	 DWORD PTR ___encStr$524737[ebp], -2037544545 ; 868d899fH
  003d9	c7 45 cc 88 8f
	9f b5		 mov	 DWORD PTR ___encStr$524737[ebp+4], -1247834232 ; b59f8f88H
  003e0	c7 45 d0 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$524737[ebp+8], -1952474996 ; 8b9f988cH
  003e7	c7 45 d4 8e 87
	ce 8e		 mov	 DWORD PTR ___encStr$524737[ebp+12], -1899067506 ; 8ece878eH
  003ee	c7 45 d8 b2 98
	92 9a		 mov	 DWORD PTR ___encStr$524737[ebp+16], -1701668686 ; 9a9298b2H
  003f5	c7 45 dc 88 b3
	86 83		 mov	 DWORD PTR ___encStr$524737[ebp+20], -2088324216 ; 8386b388H
  003fc	c7 45 e0 83 b3
	8f 8b		 mov	 DWORD PTR ___encStr$524737[ebp+24], -1953516669 ; 8b8fb383H
  00403	c7 45 e4 80 8d
	8c 8f		 mov	 DWORD PTR ___encStr$524737[ebp+28], -1886614144 ; 8f8c8d80H
  0040a	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$524737[ebp]
  0040d	88 5d e8	 mov	 BYTE PTR ___encStr$524737[ebp+32], bl
  00410	59		 pop	 ecx
$LL871@LoadProper:
  00411	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00417	83 c0 04	 add	 eax, 4
  0041a	49		 dec	 ecx
  0041b	75 f4		 jne	 SHORT $LL871@LoadProper
  0041d	ff b5 90 fd ff
	ff		 push	 DWORD PTR tv8265[ebp]
  00423	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$524737[ebp]
  00426	50		 push	 eax
  00427	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0042d	50		 push	 eax
  0042e	ff d6		 call	 esi

; 60   : 		ReflectAttackInfo.m_fRangeMinDamage = rkLoader.LoadFloat( szKey, 0.0f );

  00430	0f 57 c0	 xorps	 xmm0, xmm0
  00433	59		 pop	 ecx
  00434	59		 pop	 ecx
  00435	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	50		 push	 eax
  00441	8b cf		 mov	 ecx, edi
  00443	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00449	d9 9d 80 fd ff
	ff		 fstp	 DWORD PTR _ReflectAttackInfo$524124[ebp+40]
  0044f	6a 08		 push	 8

; 61   : 
; 62   : 		wsprintf_e( szKey, "reflect_attack%d_type_max_damage", i+1 );

  00451	c7 45 c8 9f 89
	8d 86		 mov	 DWORD PTR ___encStr$524889[ebp], -2037544545 ; 868d899fH
  00458	c7 45 cc 88 8f
	9f b5		 mov	 DWORD PTR ___encStr$524889[ebp+4], -1247834232 ; b59f8f88H
  0045f	c7 45 d0 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$524889[ebp+8], -1952474996 ; 8b9f988cH
  00466	c7 45 d4 8e 87
	ce 8e		 mov	 DWORD PTR ___encStr$524889[ebp+12], -1899067506 ; 8ece878eH
  0046d	c7 45 d8 b2 98
	92 9a		 mov	 DWORD PTR ___encStr$524889[ebp+16], -1701668686 ; 9a9298b2H
  00474	c7 45 dc 88 b3
	86 8b		 mov	 DWORD PTR ___encStr$524889[ebp+20], -1954106488 ; 8b86b388H
  0047b	c7 45 e0 95 b3
	8f 8b		 mov	 DWORD PTR ___encStr$524889[ebp+24], -1953516651 ; 8b8fb395H
  00482	c7 45 e4 80 8d
	8c 8f		 mov	 DWORD PTR ___encStr$524889[ebp+28], -1886614144 ; 8f8c8d80H
  00489	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$524889[ebp]
  0048c	88 5d e8	 mov	 BYTE PTR ___encStr$524889[ebp+32], bl
  0048f	59		 pop	 ecx
$LL879@LoadProper:
  00490	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00496	83 c0 04	 add	 eax, 4
  00499	49		 dec	 ecx
  0049a	75 f4		 jne	 SHORT $LL879@LoadProper
  0049c	ff b5 90 fd ff
	ff		 push	 DWORD PTR tv8265[ebp]
  004a2	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$524889[ebp]
  004a5	50		 push	 eax
  004a6	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  004ac	50		 push	 eax
  004ad	ff d6		 call	 esi

; 63   : 		ReflectAttackInfo.m_fRangeMaxDamage = rkLoader.LoadFloat( szKey, 0.0f );

  004af	0f 57 c0	 xorps	 xmm0, xmm0
  004b2	59		 pop	 ecx
  004b3	59		 pop	 ecx
  004b4	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  004ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bf	50		 push	 eax
  004c0	8b cf		 mov	 ecx, edi
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004c8	d9 9d 84 fd ff
	ff		 fstp	 DWORD PTR _ReflectAttackInfo$524124[ebp+44]

; 64   : 
; 65   : 		m_ReflectDamageInfoVec.push_back( ReflectAttackInfo );

  004ce	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  004d4	8d 85 58 fd ff
	ff		 lea	 eax, DWORD PTR _ReflectAttackInfo$524124[ebp]
  004da	50		 push	 eax
  004db	81 c1 70 09 00
	00		 add	 ecx, 2416		; 00000970H
  004e1	e8 00 00 00 00	 call	 ?push_back@?$vector@UReflectDamageInfo@@V?$allocator@UReflectDamageInfo@@@std@@@std@@QAEXABUReflectDamageInfo@@@Z ; std::vector<ReflectDamageInfo,std::allocator<ReflectDamageInfo> >::push_back

; 66   : 	}

  004e6	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  004ea	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _ReflectAttackInfo$524124[ebp+8]
  004f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  004f6	ff 85 90 fd ff
	ff		 inc	 DWORD PTR tv8265[ebp]
  004fc	ff 8d 8c fd ff
	ff		 dec	 DWORD PTR tv6348[ebp]
  00502	0f 85 77 fc ff
	ff		 jne	 $LL597@LoadProper

; 39   : 
; 40   : 	for( int i = 0; i < iCnt; ++i )

  00508	8b b5 88 fd ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN595@LoadProper:

; 67   : 	
; 68   : 	m_bAirReflect					  = rkLoader.LoadBool_e( "reflect_enable_float", false );

  0050e	6a 05		 push	 5
  00510	c7 45 d4 9f 89
	8d 86		 mov	 DWORD PTR __k$529095[ebp], -2037544545 ; 868d899fH
  00517	c7 45 d8 88 8f
	9f b5		 mov	 DWORD PTR __k$529095[ebp+4], -1247834232 ; b59f8f88H
  0051e	c7 45 dc 88 82
	8a 88		 mov	 DWORD PTR __k$529095[ebp+8], -2004188536 ; 888a8288H
  00525	c7 45 e0 81 89
	b4 8c		 mov	 DWORD PTR __k$529095[ebp+12], -1934325375 ; 8cb48981H
  0052c	c7 45 e4 81 83
	8a 9e		 mov	 DWORD PTR __k$529095[ebp+16], -1635089535 ; 9e8a8381H
  00533	8d 45 d4	 lea	 eax, DWORD PTR __k$529095[ebp]
  00536	88 5d e8	 mov	 BYTE PTR __k$529095[ebp+20], bl
  00539	59		 pop	 ecx
$LL991@LoadProper:
  0053a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00540	83 c0 04	 add	 eax, 4
  00543	49		 dec	 ecx
  00544	75 f4		 jne	 SHORT $LL991@LoadProper
  00546	53		 push	 ebx
  00547	8d 45 d4	 lea	 eax, DWORD PTR __k$529095[ebp]
  0054a	50		 push	 eax
  0054b	8b cf		 mov	 ecx, edi
  0054d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00553	6a 08		 push	 8
  00555	88 86 6d 09 00
	00		 mov	 BYTE PTR [esi+2413], al

; 69   : 	m_bEnableEscapeCatchAttackReflect = rkLoader.LoadBool_e( "enable_escape_catch_attack_reflect", false );	

  0055b	c7 45 a0 88 82
	8a 88		 mov	 DWORD PTR __k$529220[ebp], -2004188536 ; 888a8288H
  00562	c7 45 a4 81 89
	b4 8f		 mov	 DWORD PTR __k$529220[ebp+4], -1883993727 ; 8fb48981H
  00569	c7 45 a8 9e 8f
	8a 9a		 mov	 DWORD PTR __k$529220[ebp+8], -1702195298 ; 9a8a8f9eH
  00570	c7 45 ac 88 b3
	88 8b		 mov	 DWORD PTR __k$529220[ebp+12], -1953975416 ; 8b88b388H
  00577	c7 45 b0 99 8f
	83 b5		 mov	 DWORD PTR __k$529220[ebp+16], -1249669223 ; b5838f99H
  0057e	c7 45 b4 8c 98
	9f 8b		 mov	 DWORD PTR __k$529220[ebp+20], -1952474996 ; 8b9f988cH
  00585	c7 45 b8 8e 87
	b4 98		 mov	 DWORD PTR __k$529220[ebp+24], -1732999282 ; 98b4878eH
  0058c	c7 45 bc 88 8a
	87 8f		 mov	 DWORD PTR __k$529220[ebp+28], -1886942584 ; 8f878a88H
  00593	66 c7 45 c0 8e
	98		 mov	 WORD PTR __k$529220[ebp+32], 39054 ; 0000988eH
  00599	8d 45 a0	 lea	 eax, DWORD PTR __k$529220[ebp]
  0059c	88 5d c2	 mov	 BYTE PTR __k$529220[ebp+34], bl
  0059f	59		 pop	 ecx
$LL1097@LoadProper:
  005a0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  005a6	83 c0 04	 add	 eax, 4
  005a9	49		 dec	 ecx
  005aa	75 f4		 jne	 SHORT $LL1097@LoadProper
  005ac	6a 20		 push	 32			; 00000020H
  005ae	58		 pop	 eax
$LL1094@LoadProper:
  005af	8b c8		 mov	 ecx, eax
  005b1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  005b7	79 05		 jns	 SHORT $LN1147@LoadProper
  005b9	49		 dec	 ecx
  005ba	83 c9 fc	 or	 ecx, -4			; fffffffcH
  005bd	41		 inc	 ecx
$LN1147@LoadProper:
  005be	b2 ed		 mov	 dl, -19			; ffffffedH
  005c0	2a d1		 sub	 dl, cl
  005c2	30 54 05 a0	 xor	 BYTE PTR __k$529220[ebp+eax], dl
  005c6	40		 inc	 eax
  005c7	83 f8 22	 cmp	 eax, 34			; 00000022H
  005ca	7c e3		 jl	 SHORT $LL1094@LoadProper
  005cc	53		 push	 ebx
  005cd	8d 45 a0	 lea	 eax, DWORD PTR __k$529220[ebp]
  005d0	50		 push	 eax
  005d1	8b cf		 mov	 ecx, edi
  005d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  005d9	88 86 6e 09 00
	00		 mov	 BYTE PTR [esi+2414], al

; 70   : }

  005df	e8 00 00 00 00	 call	 __EH_epilog3_GS
  005e4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z$0:
  00000	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR _ReflectAttackInfo$524124[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ReflectDamageInfo@@QAE@XZ
__ehhandler$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 54 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-684]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadProperty@ioReflectDamageBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioReflectDamageBuff::LoadProperty
; Function compile flags: /Ogsp
;	COMDAT ??__FKNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@YAXXZ
text$yd	SEGMENT
??__FKNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@YAXXZ PROC ; `ioReflectDamageBuff::GetReflectAttack'::`2'::`dynamic atexit destructor for 'KNone'', COMDAT
  00000	b9 08 00 00 00	 mov	 ecx, OFFSET ?KNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@4U3@A+8
  00005	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??__FKNone@?1??GetReflectAttack@ioReflectDamageBuff@@QAEABUWeaponInfo@@M@Z@YAXXZ ENDP ; `ioReflectDamageBuff::GetReflectAttack'::`2'::`dynamic atexit destructor for 'KNone''
text$yd	ENDS
END
