; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ItemResellWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7ItemResellWnd@@6B@				; ItemResellWnd::`vftable'
PUBLIC	??0ItemResellWnd@@QAE@XZ			; ItemResellWnd::ItemResellWnd
PUBLIC	??_R4ItemResellWnd@@6B@				; ItemResellWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVItemResellWnd@@@8			; ItemResellWnd `RTTI Type Descriptor'
PUBLIC	??_R3ItemResellWnd@@8				; ItemResellWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ItemResellWnd@@8				; ItemResellWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ItemResellWnd@@8			; ItemResellWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderFrame@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ; ItemResellWnd::AddRenderFrame
PUBLIC	?AddRenderImage@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; ItemResellWnd::AddRenderImage
PUBLIC	?OnRender@ItemResellWnd@@MAEXXZ			; ItemResellWnd::OnRender
PUBLIC	?OnRenderAfterChild@ItemResellWnd@@MAEXXZ	; ItemResellWnd::OnRenderAfterChild
PUBLIC	?iwm_command@ItemResellWnd@@UAEXPAVioWnd@@HK@Z	; ItemResellWnd::iwm_command
PUBLIC	?iwm_show@ItemResellWnd@@UAEXXZ			; ItemResellWnd::iwm_show
PUBLIC	?iwm_hide@ItemResellWnd@@UAEXXZ			; ItemResellWnd::iwm_hide
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	?ClearList@ioComplexStringPrinter@@QAEXXZ:PROC	; ioComplexStringPrinter::ClearList
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EItemResellWnd@@UAEPAXI@Z:PROC		; ItemResellWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\itemresellwnd.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ItemResellWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ItemResellWnd@@8 DD FLAT:??_R0?AVItemResellWnd@@@8 ; ItemResellWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ItemResellWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ItemResellWnd@@8
rdata$r	SEGMENT
??_R2ItemResellWnd@@8 DD FLAT:??_R1A@?0A@EA@ItemResellWnd@@8 ; ItemResellWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ItemResellWnd@@8
rdata$r	SEGMENT
??_R3ItemResellWnd@@8 DD 00H				; ItemResellWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ItemResellWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVItemResellWnd@@@8
_DATA	SEGMENT
??_R0?AVItemResellWnd@@@8 DD FLAT:??_7type_info@@6B@	; ItemResellWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVItemResellWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ItemResellWnd@@6B@
rdata$r	SEGMENT
??_R4ItemResellWnd@@6B@ DD 00H				; ItemResellWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVItemResellWnd@@@8
	DD	FLAT:??_R3ItemResellWnd@@8
rdata$r	ENDS
;	COMDAT ??_7ItemResellWnd@@6B@
CONST	SEGMENT
??_7ItemResellWnd@@6B@ DD FLAT:??_R4ItemResellWnd@@6B@	; ItemResellWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@ItemResellWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ItemResellWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ItemResellWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ItemResellWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ItemResellWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EItemResellWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ItemResellWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ItemResellWnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ItemResellWnd@@QAE@XZ$1
__ehfuncinfo$??0ItemResellWnd@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ItemResellWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ItemResellWnd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ItemResellWnd@@QAE@XZ PROC				; ItemResellWnd::ItemResellWnd, COMDAT
; _this$ = ecx

; 31   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ItemResellWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00017	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0001c	68 00 00 00 00	 push	 OFFSET ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  00021	6a 05		 push	 5
  00023	6a 20		 push	 32			; 00000020H
  00025	33 ff		 xor	 edi, edi
  00027	8d 9e 68 01 00
	00		 lea	 ebx, DWORD PTR [esi+360]
  0002d	53		 push	 ebx
  0002e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ItemResellWnd@@6B@
  00037	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0003c	6a 05		 push	 5

; 32   : 	m_pSellMark = NULL;

  0003e	89 be 08 02 00
	00		 mov	 DWORD PTR [esi+520], edi

; 33   : 	m_pReturnWnd = NULL;

  00044	89 be 0c 02 00
	00		 mov	 DWORD PTR [esi+524], edi

; 34   : 
; 35   : 	m_pBottomFrm = NULL;

  0004a	89 be 1c 02 00
	00		 mov	 DWORD PTR [esi+540], edi

; 36   : 	m_pEditFrm = NULL;

  00050	89 be 18 02 00
	00		 mov	 DWORD PTR [esi+536], edi

; 37   : 
; 38   : 	m_pPreEdit = NULL;

  00056	89 be 10 02 00
	00		 mov	 DWORD PTR [esi+528], edi

; 39   : 	m_pSellEdit = NULL;

  0005c	89 be 14 02 00
	00		 mov	 DWORD PTR [esi+532], edi
  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00066	5f		 pop	 edi
$LL3@ItemResell:

; 40   : 
; 41   : 	for( int i=0; i < MAX_INFO_LINE; ++i )
; 42   : 	{
; 43   : 		m_Desc[i].ClearList();

  00067	8b cb		 mov	 ecx, ebx
  00069	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList
  0006e	83 c3 20	 add	 ebx, 32			; 00000020H
  00071	4f		 dec	 edi
  00072	75 f3		 jne	 SHORT $LL3@ItemResell

; 44   : 	}
; 45   : }

  00074	8b c6		 mov	 eax, esi
  00076	e8 00 00 00 00	 call	 __EH_epilog3
  0007b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ItemResellWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??0ItemResellWnd@@QAE@XZ$1:
  00009	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0000e	6a 05		 push	 5
  00010	6a 20		 push	 32			; 00000020H
  00012	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00015	05 68 01 00 00	 add	 eax, 360		; 00000168H
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00020	c3		 ret	 0
__ehhandler$??0ItemResellWnd@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ItemResellWnd@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ItemResellWnd@@QAE@XZ ENDP				; ItemResellWnd::ItemResellWnd
PUBLIC	??1ItemResellWnd@@UAE@XZ			; ItemResellWnd::~ItemResellWnd
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ItemResellWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ItemResellWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ItemResellWnd@@UAE@XZ$1
__ehfuncinfo$??1ItemResellWnd@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ItemResellWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ItemResellWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
tv132 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ItemResellWnd@@UAE@XZ PROC				; ItemResellWnd::~ItemResellWnd, COMDAT
; _this$ = ecx

; 48   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ItemResellWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ItemResellWnd@@6B@

; 49   : 	SAFEDELETE(m_pSellMark);

  00017	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
  0001d	33 db		 xor	 ebx, ebx
  0001f	43		 inc	 ebx
  00020	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00023	85 c9		 test	 ecx, ecx
  00025	74 0d		 je	 SHORT $LN6@ItemResell@2
  00027	8b 01		 mov	 eax, DWORD PTR [ecx]
  00029	53		 push	 ebx
  0002a	ff 50 40	 call	 DWORD PTR [eax+64]
  0002d	83 a6 08 02 00
	00 00		 and	 DWORD PTR [esi+520], 0
$LN6@ItemResell@2:

; 50   : 	SAFEDELETE(m_pEditFrm);

  00034	8b 8e 18 02 00
	00		 mov	 ecx, DWORD PTR [esi+536]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 0d		 je	 SHORT $LN5@ItemResell@2
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	53		 push	 ebx
  00041	ff 50 40	 call	 DWORD PTR [eax+64]
  00044	83 a6 18 02 00
	00 00		 and	 DWORD PTR [esi+536], 0
$LN5@ItemResell@2:

; 51   : 	SAFEDELETE(m_pBottomFrm);

  0004b	8b 8e 1c 02 00
	00		 mov	 ecx, DWORD PTR [esi+540]
  00051	85 c9		 test	 ecx, ecx
  00053	74 0d		 je	 SHORT $LN4@ItemResell@2
  00055	8b 01		 mov	 eax, DWORD PTR [ecx]
  00057	53		 push	 ebx
  00058	ff 50 40	 call	 DWORD PTR [eax+64]
  0005b	83 a6 1c 02 00
	00 00		 and	 DWORD PTR [esi+540], 0
$LN4@ItemResell@2:

; 52   : 
; 53   : 	for( int i=0; i < MAX_INFO_LINE; ++i )

  00062	8d be 68 01 00
	00		 lea	 edi, DWORD PTR [esi+360]
  00068	8b df		 mov	 ebx, edi
  0006a	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR tv132[ebp], 5
$LL3@ItemResell@2:

; 54   : 	{
; 55   : 		m_Desc[i].ClearList();

  00071	8b cb		 mov	 ecx, ebx
  00073	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList
  00078	83 c3 20	 add	 ebx, 32			; 00000020H
  0007b	ff 4d f0	 dec	 DWORD PTR tv132[ebp]
  0007e	75 f1		 jne	 SHORT $LL3@ItemResell@2

; 56   : 	}
; 57   : }

  00080	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  00085	6a 05		 push	 5
  00087	6a 20		 push	 32			; 00000020H
  00089	57		 push	 edi
  0008a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008e	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00093	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00097	8b ce		 mov	 ecx, esi
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  0009f	e8 00 00 00 00	 call	 __EH_epilog3
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ItemResellWnd@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??1ItemResellWnd@@UAE@XZ$1:
  00009	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0000e	6a 05		 push	 5
  00010	6a 20		 push	 32			; 00000020H
  00012	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00015	05 68 01 00 00	 add	 eax, 360		; 00000168H
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00020	c3		 ret	 0
__ehhandler$??1ItemResellWnd@@UAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ItemResellWnd@@UAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ItemResellWnd@@UAE@XZ ENDP				; ItemResellWnd::~ItemResellWnd
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	??_R0?AVioEdit@@@8				; ioEdit `RTTI Type Descriptor'
PUBLIC	??_C@_0BI@JAPKNBOA@ItemResellWnd?3?3iwm_show?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	__imp_?SetString@ioInputBox@@QAEXPBD@Z:PROC
EXTRN	__imp_?GetSingleton@ioInputBox@@SAAAV1@XZ:PROC
EXTRN	__imp_?ClearString@ioEdit@@QAEXXZ:PROC
EXTRN	__imp_?m_pKeyFocusEdit@ioEdit@@2PAV1@A:DWORD
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z:PROC
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?SetWndPos@ioWnd@@QAEXHH@Z:PROC
EXTRN	__imp_?GetXPos@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioEdit@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\itemresellwnd.cpp
_DATA	SEGMENT
??_R0?AVioEdit@@@8 DD FLAT:??_7type_info@@6B@		; ioEdit `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEdit@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BI@JAPKNBOA@ItemResellWnd?3?3iwm_show?$AA@
CONST	SEGMENT
??_C@_0BI@JAPKNBOA@ItemResellWnd?3?3iwm_show?$AA@ DB 'ItemResellWnd::iwm_'
	DB	'show', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?iwm_show@ItemResellWnd@@UAEXXZ
_TEXT	SEGMENT
_pCancelBtn$ = -4					; size = 4
_pSellBtn$ = -4						; size = 4
?iwm_show@ItemResellWnd@@UAEXXZ PROC			; ItemResellWnd::iwm_show, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 90   : 	if( m_pBottomFrm )

  00008	8b 86 1c 02 00
	00		 mov	 eax, DWORD PTR [esi+540]
  0000e	57		 push	 edi
  0000f	85 c0		 test	 eax, eax
  00011	74 17		 je	 SHORT $LN9@iwm_show

; 91   : 		m_pBottomFrm->SetPosition( 0, GetHeight() - BOTTOM_FRAME_GAP );

  00013	8b 38		 mov	 edi, DWORD PTR [eax]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  0001b	8b 8e 1c 02 00
	00		 mov	 ecx, DWORD PTR [esi+540]
  00021	83 e8 41	 sub	 eax, 65			; 00000041H
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	ff 57 0c	 call	 DWORD PTR [edi+12]
$LN9@iwm_show:

; 92   : 
; 93   : 	ioWnd *pSellBtn = FindChildWnd( ID_RESELL );

  0002a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00030	6a 02		 push	 2
  00032	8b ce		 mov	 ecx, esi
  00034	ff d3		 call	 ebx
  00036	89 45 fc	 mov	 DWORD PTR _pSellBtn$[ebp], eax

; 94   : 	if( pSellBtn )

  00039	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0003e	85 c0		 test	 eax, eax
  00040	74 72		 je	 SHORT $LN12@iwm_show

; 95   : 	{
; 96   : 		pSellBtn->SetWndPos( pSellBtn->GetXPos(), GetHeight() - BUTTON_GAP );

  00042	8b ce		 mov	 ecx, esi
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _pSellBtn$[ebp]
  0004d	83 e8 30	 sub	 eax, 48			; 00000030H
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _pSellBtn$[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z

; 97   : 
; 98   : 		switch( m_dwSellActionType )

  00061	8b 86 64 01 00
	00		 mov	 eax, DWORD PTR [esi+356]
  00067	83 f8 01	 cmp	 eax, 1
  0006a	74 23		 je	 SHORT $LN5@iwm_show
  0006c	83 f8 02	 cmp	 eax, 2
  0006f	74 15		 je	 SHORT $LN3@iwm_show
  00071	76 41		 jbe	 SHORT $LN12@iwm_show
  00073	83 f8 04	 cmp	 eax, 4
  00076	76 17		 jbe	 SHORT $LN5@iwm_show
  00078	83 f8 05	 cmp	 eax, 5
  0007b	75 37		 jne	 SHORT $LN12@iwm_show

; 104  : 			break;
; 105  : 		case ACST_SELL_ACCESSORY:
; 106  : 			pSellBtn->SetTitleText( STR(1) );

  0007d	6a 00		 push	 0
  0007f	57		 push	 edi
  00080	6a 00		 push	 0
  00082	6a 01		 push	 1

; 107  : 			break;

  00084	eb 10		 jmp	 SHORT $LN13@iwm_show
$LN3@iwm_show:

; 108  : 		case ACST_DISASSEMBLE:
; 109  : 			pSellBtn->SetTitleText( STR(4) );

  00086	6a 00		 push	 0
  00088	57		 push	 edi
  00089	6a 00		 push	 0
  0008b	6a 04		 push	 4

; 110  : 			break;

  0008d	eb 07		 jmp	 SHORT $LN13@iwm_show
$LN5@iwm_show:

; 99   : 		{
; 100  : 		case ACST_SELL:
; 101  : 		case ACST_SELL_MEDAL:
; 102  : 		case ACST_SELL_COSTUME:
; 103  : 			pSellBtn->SetTitleText( STR(3) );

  0008f	6a 00		 push	 0
  00091	57		 push	 edi
  00092	6a 00		 push	 0
  00094	6a 03		 push	 3
$LN13@iwm_show:
  00096	57		 push	 edi
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JAPKNBOA@ItemResellWnd?3?3iwm_show?$AA@
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000a2	8b c8		 mov	 ecx, eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _pSellBtn$[ebp]
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z
$LN12@iwm_show:

; 111  : 		}
; 112  : 	}
; 113  : 
; 114  : 	ioWnd *pCancelBtn = FindChildWnd( ID_CANCEL );

  000b4	6a 03		 push	 3
  000b6	8b ce		 mov	 ecx, esi
  000b8	ff d3		 call	 ebx
  000ba	89 45 fc	 mov	 DWORD PTR _pCancelBtn$[ebp], eax

; 115  : 	if( pCancelBtn )

  000bd	85 c0		 test	 eax, eax
  000bf	74 1f		 je	 SHORT $LN2@iwm_show

; 116  : 		pCancelBtn->SetWndPos( pCancelBtn->GetXPos(), GetHeight() - BUTTON_GAP );

  000c1	8b ce		 mov	 ecx, esi
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _pCancelBtn$[ebp]
  000cc	83 e8 30	 sub	 eax, 48			; 00000030H
  000cf	50		 push	 eax
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _pCancelBtn$[ebp]
  000d9	50		 push	 eax
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z
$LN2@iwm_show:

; 117  : 
; 118  : 	ioEdit *pEdit = dynamic_cast<ioEdit*>( FindChildWnd( ID_SELL_EDIT ) );

  000e0	6a 00		 push	 0
  000e2	68 00 00 00 00	 push	 OFFSET ??_R0?AVioEdit@@@8
  000e7	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  000ec	6a 00		 push	 0
  000ee	6a 04		 push	 4
  000f0	8b ce		 mov	 ecx, esi
  000f2	ff d3		 call	 ebx
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ___RTDynamicCast
  000fa	8b d8		 mov	 ebx, eax
  000fc	83 c4 14	 add	 esp, 20			; 00000014H

; 119  : 	if( pEdit && pEdit->IsShow() )

  000ff	85 db		 test	 ebx, ebx
  00101	74 5d		 je	 SHORT $LN1@iwm_show
  00103	8b cb		 mov	 ecx, ebx
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0010b	84 c0		 test	 al, al
  0010d	74 51		 je	 SHORT $LN1@iwm_show

; 120  : 	{
; 121  : 		pEdit->SetWndPos( pEdit->GetXPos(), GetHeight() - EDIT_GAP );

  0010f	8b ce		 mov	 ecx, esi
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00117	83 e8 62	 sub	 eax, 98			; 00000062H
  0011a	50		 push	 eax
  0011b	8b cb		 mov	 ecx, ebx
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  00123	50		 push	 eax
  00124	8b cb		 mov	 ecx, ebx
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z

; 122  : 
; 123  : 		m_pPreEdit = ioEdit::m_pKeyFocusEdit;

  0012c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?m_pKeyFocusEdit@ioEdit@@2PAV1@A
  00131	8b 00		 mov	 eax, DWORD PTR [eax]

; 124  : 		pEdit->ClearString();

  00133	8b cb		 mov	 ecx, ebx
  00135	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearString@ioEdit@@QAEXXZ

; 125  : 		pEdit->SetKeyFocus();

  00141	8b 03		 mov	 eax, DWORD PTR [ebx]
  00143	8b cb		 mov	 ecx, ebx
  00145	ff 90 30 01 00
	00		 call	 DWORD PTR [eax+304]

; 126  : 		g_InputBox.SetString( "" );

  0014b	57		 push	 edi
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioInputBox@@SAAAV1@XZ
  00152	8b c8		 mov	 ecx, eax
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetString@ioInputBox@@QAEXPBD@Z

; 127  : 
; 128  : 		m_pSellEdit = pEdit;

  0015a	89 9e 14 02 00
	00		 mov	 DWORD PTR [esi+532], ebx
$LN1@iwm_show:
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx

; 129  : 	}
; 130  : }

  00163	c9		 leave
  00164	c3		 ret	 0
?iwm_show@ItemResellWnd@@UAEXXZ ENDP			; ItemResellWnd::iwm_show
_TEXT	ENDS
EXTRN	__imp_?GetParent@ioWnd@@QAEPAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_hide@ItemResellWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@ItemResellWnd@@UAEXXZ PROC			; ItemResellWnd::iwm_hide, COMDAT
; _this$ = ecx

; 133  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 134  : 	if( m_pPreEdit )	

  00003	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 24		 je	 SHORT $LN1@iwm_hide

; 135  : 	{
; 136  : 		ioWnd *pParent = m_pPreEdit->GetParent();

  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ

; 137  : 		if( pParent )

  00013	85 c0		 test	 eax, eax
  00015	74 1a		 je	 SHORT $LN1@iwm_hide

; 138  : 		{
; 139  : 			if( pParent->IsShow() )

  00017	8b c8		 mov	 ecx, eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0001f	84 c0		 test	 al, al
  00021	74 0e		 je	 SHORT $LN1@iwm_hide

; 140  : 				((ioEdit*)m_pPreEdit)->SetKeyFocus();	

  00023	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	ff 90 30 01 00
	00		 call	 DWORD PTR [eax+304]
$LN1@iwm_hide:

; 141  : 		}
; 142  : 	}	
; 143  : 	m_pPreEdit = NULL;

  00031	83 a6 10 02 00
	00 00		 and	 DWORD PTR [esi+528], 0
  00038	5e		 pop	 esi

; 144  : }

  00039	c3		 ret	 0
?iwm_hide@ItemResellWnd@@UAEXXZ ENDP			; ItemResellWnd::iwm_hide
_TEXT	ENDS
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?OnRenderAfterChild@ItemResellWnd@@MAEXXZ
_TEXT	SEGMENT
?OnRenderAfterChild@ItemResellWnd@@MAEXXZ PROC		; ItemResellWnd::OnRenderAfterChild, COMDAT
; _this$ = ecx

; 410  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 411  : 	int iXPos = GetDerivedPosX();

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 412  : 	int iYPos = GetDerivedPosY();

  0000a	8b ce		 mov	 ecx, esi
  0000c	8b f8		 mov	 edi, eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 413  : 
; 414  : 	enum
; 415  : 	{
; 416  : 		ICON_X		= 125,
; 417  : 		ICON_Y		= 98,
; 418  : 	};
; 419  : 
; 420  : 	if( m_pSellMark )

  00014	33 d2		 xor	 edx, edx
  00016	39 96 08 02 00
	00		 cmp	 DWORD PTR [esi+520], edx
  0001c	74 2f		 je	 SHORT $LN1@OnRenderAf

; 421  : 		m_pSellMark->Render( iXPos+ICON_X, iYPos+ICON_Y );

  0001e	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
  00024	8b 31		 mov	 esi, DWORD PTR [ecx]
  00026	52		 push	 edx
  00027	52		 push	 edx
  00028	52		 push	 edx
  00029	52		 push	 edx
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	51		 push	 ecx
  0002e	83 c0 62	 add	 eax, 98			; 00000062H
  00031	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00035	51		 push	 ecx
  00036	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003c	83 c7 7d	 add	 edi, 125		; 0000007dH
  0003f	0f 57 c0	 xorps	 xmm0, xmm0
  00042	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	ff 16		 call	 DWORD PTR [esi]
$LN1@OnRenderAf:

; 422  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	c3		 ret	 0
?OnRenderAfterChild@ItemResellWnd@@MAEXXZ ENDP		; ItemResellWnd::OnRenderAfterChild
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringValidateDestA@@YGJPBDII@Z
_TEXT	SEGMENT
_cchMax$ = 8						; size = 4
?StringValidateDestA@@YGJPBDII@Z PROC			; StringValidateDestA, COMDAT
; _cchDest$ = ecx

; 8721 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8722 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8723 : 
; 8724 :     if ((cchDest == 0) || (cchDest > cchMax))

  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN1@StringVali
  00009	3b 4d 08	 cmp	 ecx, DWORD PTR _cchMax$[ebp]
  0000c	76 05		 jbe	 SHORT $LN2@StringVali
$LN1@StringVali:

; 8725 :     {
; 8726 :         hr = STRSAFE_E_INVALID_PARAMETER;

  0000e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN2@StringVali:

; 8727 :     }
; 8728 : 
; 8729 :     return hr;
; 8730 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?StringValidateDestA@@YGJPBDII@Z ENDP			; StringValidateDestA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_pcchNewDestLength$ = 8					; size = 4
_pszSrc$ = 12						; size = 4
_cchToCopy$ = 16					; size = 4
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z PROC		; StringCopyWorkerA, COMDAT
; _pszDest$ = ecx
; _cchDest$ = eax

; 8947 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 8948 :     HRESULT hr = S_OK;

  00004	83 65 fc 00	 and	 DWORD PTR _hr$[ebp], 0
  00008	57		 push	 edi
  00009	8b f8		 mov	 edi, eax

; 8949 :     size_t cchNewDestLength = 0;

  0000b	33 c0		 xor	 eax, eax

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  0000d	85 ff		 test	 edi, edi
  0000f	74 23		 je	 SHORT $LN9@StringCopy

; 8948 :     HRESULT hr = S_OK;

  00011	53		 push	 ebx
  00012	8b 5d 10	 mov	 ebx, DWORD PTR _cchToCopy$[ebp]
  00015	56		 push	 esi

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  00016	8b 75 0c	 mov	 esi, DWORD PTR _pszSrc$[ebp]
  00019	2b f1		 sub	 esi, ecx
$LL4@StringCopy:
  0001b	85 db		 test	 ebx, ebx
  0001d	74 0f		 je	 SHORT $LN11@StringCopy
  0001f	8a 14 0e	 mov	 dl, BYTE PTR [esi+ecx]
  00022	84 d2		 test	 dl, dl
  00024	74 08		 je	 SHORT $LN11@StringCopy

; 8954 :     {
; 8955 :         *pszDest++ = *pszSrc++;

  00026	88 11		 mov	 BYTE PTR [ecx], dl
  00028	41		 inc	 ecx

; 8956 :         cchDest--;

  00029	4b		 dec	 ebx

; 8957 :         cchToCopy--;
; 8958 : 
; 8959 :         cchNewDestLength++;

  0002a	40		 inc	 eax
  0002b	4f		 dec	 edi
  0002c	75 ed		 jne	 SHORT $LL4@StringCopy
$LN11@StringCopy:
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 8960 :     }
; 8961 : 
; 8962 :     if (cchDest == 0)

  00030	85 ff		 test	 edi, edi
  00032	75 09		 jne	 SHORT $LN2@StringCopy
$LN9@StringCopy:

; 8963 :     {
; 8964 :         // we are going to truncate pszDest
; 8965 :         pszDest--;

  00034	49		 dec	 ecx

; 8966 :         cchNewDestLength--;

  00035	48		 dec	 eax

; 8967 : 
; 8968 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  00036	c7 45 fc 7a 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024774 ; 8007007aH
$LN2@StringCopy:

; 8969 :     }
; 8970 : 
; 8971 :     *pszDest = '\0';

  0003d	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 8972 : 
; 8973 :     if (pcchNewDestLength)

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00043	5f		 pop	 edi
  00044	85 c9		 test	 ecx, ecx
  00046	74 02		 je	 SHORT $LN1@StringCopy

; 8974 :     {
; 8975 :         *pcchNewDestLength = cchNewDestLength;

  00048	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringCopy:

; 8976 :     }
; 8977 : 
; 8978 :     return hr;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 8979 : }

  0004d	c9		 leave
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ENDP		; StringCopyWorkerA
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?SetCostume@InventoryIconBtn@@QAEX_N@Z		; InventoryIconBtn::SetCostume
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\myinventorywnd.h
;	COMDAT ?SetCostume@InventoryIconBtn@@QAEX_N@Z
_TEXT	SEGMENT
_bIsCostume$ = 8					; size = 1
?SetCostume@InventoryIconBtn@@QAEX_N@Z PROC		; InventoryIconBtn::SetCostume, COMDAT
; _this$ = ecx

; 554  : 	void SetCostume( bool bIsCostume ){ m_bIsCostume = bIsCostume; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bIsCostume$[ebp]
  00006	88 81 80 02 00
	00		 mov	 BYTE PTR [ecx+640], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCostume@InventoryIconBtn@@QAEX_N@Z ENDP		; InventoryIconBtn::SetCostume
_TEXT	ENDS
PUBLIC	?SetGradeType@InventoryIconBtn@@QAEXH@Z		; InventoryIconBtn::SetGradeType
; Function compile flags: /Ogsp
;	COMDAT ?SetGradeType@InventoryIconBtn@@QAEXH@Z
_TEXT	SEGMENT
_nGradeType$ = 8					; size = 4
?SetGradeType@InventoryIconBtn@@QAEXH@Z PROC		; InventoryIconBtn::SetGradeType, COMDAT
; _this$ = ecx

; 555  : 	void SetGradeType( int nGradeType ){ m_nGradeType = nGradeType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nGradeType$[ebp]
  00006	89 81 84 02 00
	00		 mov	 DWORD PTR [ecx+644], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetGradeType@InventoryIconBtn@@QAEXH@Z ENDP		; InventoryIconBtn::SetGradeType
_TEXT	ENDS
PUBLIC	?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GItemResellWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GItemResellWnd@@UAEPAXI@Z PROC			; ItemResellWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ItemResellWnd@@UAE@XZ ; ItemResellWnd::~ItemResellWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GItemResellWnd@@UAEPAXI@Z ENDP			; ItemResellWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z	; operator==<10>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z PROC	; operator==<10>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 0d 01 00
	00		 je	 $LN96@operator
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 f6 00 00
	00		 je	 $LN95@operator
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 df 00 00
	00		 je	 $LN94@operator
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 c8 00 00
	00		 je	 $LN93@operator
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 b1 00 00
	00		 je	 $LN92@operator
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 9a 00 00
	00		 je	 $LN91@operator
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 83 00 00
	00		 je	 $LN90@operator
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	74 70		 je	 SHORT $LN89@operator
  00093	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00096	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00099	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0009c	84 d2		 test	 dl, dl
  0009e	74 5d		 je	 SHORT $LN88@operator
  000a0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a3	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	0f 84 81 00 00
	00		 je	 $LN1@operator
  000b0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b3	84 d2		 test	 dl, dl
  000b5	74 40		 je	 SHORT $LN86@operator
  000b7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ba	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000bd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c0	84 d2		 test	 dl, dl
  000c2	74 2d		 je	 SHORT $LN85@operator
  000c4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c7	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ca	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000cd	84 d2		 test	 dl, dl
  000cf	74 1a		 je	 SHORT $LN84@operator
  000d1	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000da	84 c0		 test	 al, al
  000dc	74 07		 je	 SHORT $LN83@operator
  000de	34 ec		 xor	 al, -20			; ffffffecH
  000e0	88 45 f9	 mov	 BYTE PTR __t$[ebp+13], al
  000e3	eb 4c		 jmp	 SHORT $LN1@operator
$LN83@operator:
  000e5	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  000e9	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  000eb	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000ef	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  000f1	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000f5	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000f7	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000fb	eb 34		 jmp	 SHORT $LN1@operator
$LN88@operator:
  000fd	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00101	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  00103	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00107	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  00109	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0010d	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  0010f	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00113	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  00115	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00119	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  0011b	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0011f	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  00121	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00125	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00127	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0012b	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  0012d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  00131	6a 02		 push	 2
  00133	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00136	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+9], 0
  0013a	5a		 pop	 edx
$LL104@operator:
  0013b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00141	83 c0 04	 add	 eax, 4
  00144	4a		 dec	 edx
  00145	75 f4		 jne	 SHORT $LL104@operator
  00147	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0014b	56		 push	 esi
  0014c	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  00155	8a 08		 mov	 cl, BYTE PTR [eax]
  00157	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00159	75 1a		 jne	 SHORT $LN112@operator
  0015b	84 c9		 test	 cl, cl
  0015d	74 12		 je	 SHORT $LN113@operator
  0015f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00162	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00165	75 0e		 jne	 SHORT $LN112@operator
  00167	83 c0 02	 add	 eax, 2
  0016a	83 c6 02	 add	 esi, 2
  0016d	84 c9		 test	 cl, cl
  0016f	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  00171	33 c0		 xor	 eax, eax
  00173	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  00175	1b c0		 sbb	 eax, eax
  00177	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  0017a	33 c9		 xor	 ecx, ecx
  0017c	85 c0		 test	 eax, eax
  0017e	0f 94 c0	 sete	 al

; 148  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	c9		 leave
  0018d	c3		 ret	 0
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z ENDP	; operator==<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z	; operator==<8>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z PROC	; operator==<8>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 d7 00 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 c0 00 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 a9 00 00
	00		 je	 $LN94@operator@2
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 92 00 00
	00		 je	 $LN93@operator@2
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	74 7f		 je	 SHORT $LN92@operator@2
  00062	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00065	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00068	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006b	84 d2		 test	 dl, dl
  0006d	74 6c		 je	 SHORT $LN91@operator@2
  0006f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00078	84 d2		 test	 dl, dl
  0007a	74 59		 je	 SHORT $LN90@operator@2
  0007c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007f	80 78 07 00	 cmp	 BYTE PTR [eax+7], 0
  00083	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  00086	74 75		 je	 SHORT $LN1@operator@2
  00088	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0008b	84 d2		 test	 dl, dl
  0008d	74 40		 je	 SHORT $LN88@operator@2
  0008f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00092	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00095	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00098	84 d2		 test	 dl, dl
  0009a	74 2d		 je	 SHORT $LN87@operator@2
  0009c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009f	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a2	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a5	84 d2		 test	 dl, dl
  000a7	74 1a		 je	 SHORT $LN86@operator@2
  000a9	8a 40 0b	 mov	 al, BYTE PTR [eax+11]
  000ac	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000af	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b2	84 c0		 test	 al, al
  000b4	74 07		 je	 SHORT $LN85@operator@2
  000b6	34 ea		 xor	 al, -22			; ffffffeaH
  000b8	88 45 fb	 mov	 BYTE PTR __t$[ebp+11], al
  000bb	eb 40		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  000bd	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000c1	eb 3a		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  000c3	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000c7	eb 34		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  000c9	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000cd	eb 2e		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  000cf	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000d3	eb 28		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000d9	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000df	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  000e1	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000e5	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  000e7	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000eb	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  000ed	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000f1	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  000f3	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000f7	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  000f9	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  000fd	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  00104	6a 04		 push	 4
  00106	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+7], 0
  0010a	58		 pop	 eax
$LL101@operator@2:
  0010b	8b c8		 mov	 ecx, eax
  0010d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00113	79 05		 jns	 SHORT $LN115@operator@2
  00115	49		 dec	 ecx
  00116	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00119	41		 inc	 ecx
$LN115@operator@2:
  0011a	b2 ed		 mov	 dl, -19			; ffffffedH
  0011c	2a d1		 sub	 dl, cl
  0011e	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00122	40		 inc	 eax
  00123	83 f8 07	 cmp	 eax, 7
  00126	7c e3		 jl	 SHORT $LL101@operator@2
  00128	8b cf		 mov	 ecx, edi
  0012a	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00137	75 1a		 jne	 SHORT $LN112@operator@2
  00139	84 c9		 test	 cl, cl
  0013b	74 12		 je	 SHORT $LN113@operator@2
  0013d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00140	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00143	75 0e		 jne	 SHORT $LN112@operator@2
  00145	83 c0 02	 add	 eax, 2
  00148	83 c6 02	 add	 esi, 2
  0014b	84 c9		 test	 cl, cl
  0014d	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  0014f	33 c0		 xor	 eax, eax
  00151	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  00153	1b c0		 sbb	 eax, eax
  00155	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  00158	33 c9		 xor	 ecx, ecx
  0015a	85 c0		 test	 eax, eax
  0015c	0f 94 c0	 sete	 al

; 148  : }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c3		 ret	 0
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z ENDP	; operator==<8>
_TEXT	ENDS
PUBLIC	?StringCbCopyA@@YGJPADIPBD@Z			; StringCbCopyA
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
;	COMDAT ?StringCbCopyA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCbCopyA@@YGJPADIPBD@Z PROC			; StringCbCopyA, COMDAT

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 583  :     HRESULT hr;
; 584  :     size_t cchDest = cbDest / sizeof(char);
; 585  : 
; 586  :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _cbDest$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 08		 je	 SHORT $LN4@StringCbCo
  0000c	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00012	76 05		 jbe	 SHORT $LN5@StringCbCo
$LN4@StringCbCo:
  00014	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCbCo:

; 587  : 
; 588  :     if (SUCCEEDED(hr))

  00019	85 c0		 test	 eax, eax
  0001b	78 40		 js	 SHORT $LN1@StringCbCo

; 589  :     {
; 590  :         hr = StringCopyWorkerA(pszDest,
; 591  :                                cchDest,
; 592  :                                NULL,
; 593  :                                pszSrc,
; 594  :                                STRSAFE_MAX_LENGTH);

  0001d	8b 45 08	 mov	 eax, DWORD PTR _pszDest$[ebp]
  00020	53		 push	 ebx
  00021	33 db		 xor	 ebx, ebx
  00023	56		 push	 esi
  00024	8b f1		 mov	 esi, ecx
  00026	85 c9		 test	 ecx, ecx
  00028	74 26		 je	 SHORT $LN16@StringCbCo
  0002a	8b 55 10	 mov	 edx, DWORD PTR _pszSrc$[ebp]
  0002d	57		 push	 edi
  0002e	bf fe ff ff 7f	 mov	 edi, 2147483646		; 7ffffffeH
  00033	2b f9		 sub	 edi, ecx
  00035	2b d0		 sub	 edx, eax
$LL11@StringCbCo:
  00037	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 0d		 je	 SHORT $LN10@StringCbCo
  0003e	8a 0c 02	 mov	 cl, BYTE PTR [edx+eax]
  00041	84 c9		 test	 cl, cl
  00043	74 06		 je	 SHORT $LN10@StringCbCo
  00045	88 08		 mov	 BYTE PTR [eax], cl
  00047	40		 inc	 eax
  00048	4e		 dec	 esi
  00049	75 ec		 jne	 SHORT $LL11@StringCbCo
$LN10@StringCbCo:
  0004b	5f		 pop	 edi
  0004c	85 f6		 test	 esi, esi
  0004e	75 06		 jne	 SHORT $LN9@StringCbCo
$LN16@StringCbCo:
  00050	48		 dec	 eax
  00051	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringCbCo:
  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
  00059	5e		 pop	 esi
  0005a	8b c3		 mov	 eax, ebx
  0005c	5b		 pop	 ebx
$LN1@StringCbCo:

; 595  :     }
; 596  : 
; 597  :     return hr;
; 598  : }

  0005d	5d		 pop	 ebp
  0005e	c2 0c 00	 ret	 12			; 0000000cH
?StringCbCopyA@@YGJPADIPBD@Z ENDP			; StringCbCopyA
_TEXT	ENDS
PUBLIC	?IsEmpty@ioComplexStringPrinter@@QBE_NXZ	; ioComplexStringPrinter::IsEmpty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocomplexstringprinter.h
;	COMDAT ?IsEmpty@ioComplexStringPrinter@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@ioComplexStringPrinter@@QBE_NXZ PROC		; ioComplexStringPrinter::IsEmpty, COMDAT
; _this$ = ecx

; 124  : 	inline bool IsEmpty() const { return m_vPieceList.empty(); }

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00006	f7 d8		 neg	 eax
  00008	1b c0		 sbb	 eax, eax
  0000a	40		 inc	 eax
  0000b	c3		 ret	 0
?IsEmpty@ioComplexStringPrinter@@QBE_NXZ ENDP		; ioComplexStringPrinter::IsEmpty
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\itemresellwnd.cpp
;	COMDAT ?AddRenderImage@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__t$506062 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; ItemResellWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pImage$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 61   : 	if( szType == "sell_mark" )

  00019	6a 02		 push	 2
  0001b	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001e	c7 45 ec 9e 89
	87 86		 mov	 DWORD PTR __t$506062[ebp], -2037937762 ; 8687899eH
  00025	c7 45 f0 b2 81
	8a 98		 mov	 DWORD PTR __t$506062[ebp+4], -1735753294 ; 988a81b2H
  0002c	8d 45 ec	 lea	 eax, DWORD PTR __t$506062[ebp]
  0002f	66 c7 45 f4 86
	00		 mov	 WORD PTR __t$506062[ebp+8], 134 ; 00000086H
  00035	59		 pop	 ecx
$LL111@AddRenderI:
  00036	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003c	83 c0 04	 add	 eax, 4
  0003f	49		 dec	 ecx
  00040	75 f4		 jne	 SHORT $LL111@AddRenderI
  00042	80 75 f4 ed	 xor	 BYTE PTR __t$506062[ebp+8], -19 ; ffffffedH
  00046	8b cf		 mov	 ecx, edi
  00048	8d 75 ec	 lea	 esi, DWORD PTR __t$506062[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderI:
  00051	8a 08		 mov	 cl, BYTE PTR [eax]
  00053	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00055	75 1a		 jne	 SHORT $LN119@AddRenderI
  00057	84 c9		 test	 cl, cl
  00059	74 12		 je	 SHORT $LN120@AddRenderI
  0005b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0005e	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00061	75 0e		 jne	 SHORT $LN119@AddRenderI
  00063	83 c0 02	 add	 eax, 2
  00066	83 c6 02	 add	 esi, 2
  00069	84 c9		 test	 cl, cl
  0006b	75 e4		 jne	 SHORT $LL118@AddRenderI
$LN120@AddRenderI:
  0006d	33 c0		 xor	 eax, eax
  0006f	eb 05		 jmp	 SHORT $LN121@AddRenderI
$LN119@AddRenderI:
  00071	1b c0		 sbb	 eax, eax
  00073	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderI:
  00076	85 c0		 test	 eax, eax
  00078	75 23		 jne	 SHORT $LN3@AddRenderI

; 62   : 	{
; 63   : 		SAFEDELETE( m_pSellMark );

  0007a	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0007d	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
  00083	85 c9		 test	 ecx, ecx
  00085	74 0e		 je	 SHORT $LN2@AddRenderI
  00087	8b 01		 mov	 eax, DWORD PTR [ecx]
  00089	6a 01		 push	 1
  0008b	ff 50 40	 call	 DWORD PTR [eax+64]
  0008e	83 a6 08 02 00
	00 00		 and	 DWORD PTR [esi+520], 0
$LN2@AddRenderI:

; 64   : 		m_pSellMark = pImage;

  00095	89 9e 08 02 00
	00		 mov	 DWORD PTR [esi+520], ebx

; 65   : 	}
; 66   : 	else

  0009b	eb 0b		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 67   : 		ioWnd::AddRenderImage( szType, pImage );

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 68   : }

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	33 cd		 xor	 ecx, ebp
  000af	5b		 pop	 ebx
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	c9		 leave
  000b6	c2 08 00	 ret	 8
?AddRenderImage@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; ItemResellWnd::AddRenderImage
_TEXT	ENDS
PUBLIC	_szType$GSCopy$
PUBLIC	_pFrame$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderFrame@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
_TEXT	SEGMENT
_szType$GSCopy$ = -32					; size = 4
_pFrame$GSCopy$ = -28					; size = 4
_this$GSCopy$ = -24					; size = 4
__t$506333 = -20					; size = 8
__t$506208 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pFrame$ = 12						; size = 4
?AddRenderFrame@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z PROC ; ItemResellWnd::AddRenderFrame, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pFrame$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _szType$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi

; 72   : 	if( szType == "BottomFrm" )

  00018	6a 02		 push	 2
  0001a	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 78   : 	{
; 79   : 		SAFEDELETE( m_pEditFrm );

  0001d	89 45 e4	 mov	 DWORD PTR _pFrame$GSCopy$[ebp], eax
  00020	89 55 e0	 mov	 DWORD PTR _szType$GSCopy$[ebp], edx
  00023	c7 45 ec af 83
	9f 9e		 mov	 DWORD PTR __t$506208[ebp], -1633713233 ; 9e9f83afH
  0002a	c7 45 f0 82 81
	ad 98		 mov	 DWORD PTR __t$506208[ebp+4], -1733459582 ; 98ad8182H
  00031	8d 45 ec	 lea	 eax, DWORD PTR __t$506208[ebp]
  00034	66 c7 45 f4 80
	00		 mov	 WORD PTR __t$506208[ebp+8], 128 ; 00000080H
  0003a	59		 pop	 ecx
  0003b	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL116@AddRenderF:

; 72   : 	if( szType == "BottomFrm" )

  00040	31 38		 xor	 DWORD PTR [eax], edi
  00042	83 c0 04	 add	 eax, 4
  00045	49		 dec	 ecx
  00046	75 f8		 jne	 SHORT $LL116@AddRenderF
  00048	80 75 f4 ed	 xor	 BYTE PTR __t$506208[ebp+8], -19 ; ffffffedH
  0004c	8b ca		 mov	 ecx, edx
  0004e	8d 75 ec	 lea	 esi, DWORD PTR __t$506208[ebp]
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL234@AddRenderF:
  00057	8a 08		 mov	 cl, BYTE PTR [eax]
  00059	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0005b	75 1a		 jne	 SHORT $LN235@AddRenderF
  0005d	84 c9		 test	 cl, cl
  0005f	74 12		 je	 SHORT $LN236@AddRenderF
  00061	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00064	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00067	75 0e		 jne	 SHORT $LN235@AddRenderF
  00069	83 c0 02	 add	 eax, 2
  0006c	83 c6 02	 add	 esi, 2
  0006f	84 c9		 test	 cl, cl
  00071	75 e4		 jne	 SHORT $LL234@AddRenderF
$LN236@AddRenderF:
  00073	33 c0		 xor	 eax, eax
  00075	eb 05		 jmp	 SHORT $LN237@AddRenderF
$LN235@AddRenderF:
  00077	1b c0		 sbb	 eax, eax
  00079	83 d8 ff	 sbb	 eax, -1
$LN237@AddRenderF:
  0007c	85 c0		 test	 eax, eax
  0007e	75 29		 jne	 SHORT $LN233@AddRenderF

; 73   : 	{
; 74   : 		SAFEDELETE( m_pBottomFrm );

  00080	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00083	8b 8e 1c 02 00
	00		 mov	 ecx, DWORD PTR [esi+540]
  00089	85 c9		 test	 ecx, ecx
  0008b	74 0e		 je	 SHORT $LN5@AddRenderF
  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	6a 01		 push	 1
  00091	ff 50 40	 call	 DWORD PTR [eax+64]
  00094	83 a6 1c 02 00
	00 00		 and	 DWORD PTR [esi+540], 0
$LN5@AddRenderF:

; 75   : 		m_pBottomFrm = pFrame;

  0009b	8b 45 e4	 mov	 eax, DWORD PTR _pFrame$GSCopy$[ebp]
  0009e	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
  000a4	e9 9b 00 00 00	 jmp	 $LN1@AddRenderF
$LN233@AddRenderF:

; 76   : 	}
; 77   : 	else if( szType == "EditFrm" )

  000a9	6a 04		 push	 4
  000ab	c7 45 ec a8 88
	82 9e		 mov	 DWORD PTR __t$506333[ebp], -1635612504 ; 9e8288a8H
  000b2	31 7d ec	 xor	 DWORD PTR __t$506333[ebp], edi
  000b5	c7 45 f0 ab 9e
	86 00		 mov	 DWORD PTR __t$506333[ebp+4], 8822443 ; 00869eabH
  000bc	58		 pop	 eax
$LL219@AddRenderF:
  000bd	8b c8		 mov	 ecx, eax
  000bf	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000c5	79 05		 jns	 SHORT $LN242@AddRenderF
  000c7	49		 dec	 ecx
  000c8	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000cb	41		 inc	 ecx
$LN242@AddRenderF:
  000cc	b2 ed		 mov	 dl, -19			; ffffffedH
  000ce	2a d1		 sub	 dl, cl
  000d0	30 54 05 ec	 xor	 BYTE PTR __t$506333[ebp+eax], dl
  000d4	40		 inc	 eax
  000d5	83 f8 07	 cmp	 eax, 7
  000d8	7c e3		 jl	 SHORT $LL219@AddRenderF
  000da	8b 4d e0	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000dd	8d 75 ec	 lea	 esi, DWORD PTR __t$506333[ebp]
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL238@AddRenderF:
  000e6	8a 08		 mov	 cl, BYTE PTR [eax]
  000e8	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000ea	75 1a		 jne	 SHORT $LN239@AddRenderF
  000ec	84 c9		 test	 cl, cl
  000ee	74 12		 je	 SHORT $LN240@AddRenderF
  000f0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f3	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000f6	75 0e		 jne	 SHORT $LN239@AddRenderF
  000f8	83 c0 02	 add	 eax, 2
  000fb	83 c6 02	 add	 esi, 2
  000fe	84 c9		 test	 cl, cl
  00100	75 e4		 jne	 SHORT $LL238@AddRenderF
$LN240@AddRenderF:
  00102	33 c0		 xor	 eax, eax
  00104	eb 05		 jmp	 SHORT $LN241@AddRenderF
$LN239@AddRenderF:
  00106	1b c0		 sbb	 eax, eax
  00108	83 d8 ff	 sbb	 eax, -1
$LN241@AddRenderF:
  0010b	85 c0		 test	 eax, eax
  0010d	75 26		 jne	 SHORT $LN3@AddRenderF

; 78   : 	{
; 79   : 		SAFEDELETE( m_pEditFrm );

  0010f	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00112	8b 8e 18 02 00
	00		 mov	 ecx, DWORD PTR [esi+536]
  00118	85 c9		 test	 ecx, ecx
  0011a	74 0e		 je	 SHORT $LN2@AddRenderF
  0011c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011e	6a 01		 push	 1
  00120	ff 50 40	 call	 DWORD PTR [eax+64]
  00123	83 a6 18 02 00
	00 00		 and	 DWORD PTR [esi+536], 0
$LN2@AddRenderF:

; 80   : 		m_pEditFrm = pFrame;

  0012a	8b 45 e4	 mov	 eax, DWORD PTR _pFrame$GSCopy$[ebp]
  0012d	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax

; 81   : 	}
; 82   : 	else

  00133	eb 0f		 jmp	 SHORT $LN1@AddRenderF
$LN3@AddRenderF:

; 83   : 	{
; 84   : 		ioWnd::AddRenderFrame( szType, pFrame );

  00135	ff 75 e4	 push	 DWORD PTR _pFrame$GSCopy$[ebp]
  00138	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0013b	ff 75 e0	 push	 DWORD PTR _szType$GSCopy$[ebp]
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
$LN1@AddRenderF:

; 85   : 	}
; 86   : }

  00144	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00147	5f		 pop	 edi
  00148	33 cd		 xor	 ecx, ebp
  0014a	5e		 pop	 esi
  0014b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00150	c9		 leave
  00151	c2 08 00	 ret	 8
?AddRenderFrame@ItemResellWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ENDP ; ItemResellWnd::AddRenderFrame
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_R0?AVInventoryIconBtn@@@8			; InventoryIconBtn `RTTI Type Descriptor'
PUBLIC	?SetInfoAndShow@ItemResellWnd@@QAEXABVioHashString@@PAVioUIRenderImage@@HPAVioComplexStringPrinter@@PAVioWnd@@KK_NH@Z ; ItemResellWnd::SetInfoAndShow
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
EXTRN	?CopyFullText@ioComplexStringPrinter@@QBEXAAV1@@Z:PROC ; ioComplexStringPrinter::CopyFullText
EXTRN	?SetIcon@InventoryIconBtn@@QAE_NPAVioUIRenderImage@@MMHW4NumberType@1@@Z:PROC ; InventoryIconBtn::SetIcon
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_R0?AVInventoryIconBtn@@@8
_DATA	SEGMENT
??_R0?AVInventoryIconBtn@@@8 DD FLAT:??_7type_info@@6B@	; InventoryIconBtn `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInventoryIconBtn@@', 00H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\itemresellwnd.cpp
_DATA	ENDS
;	COMDAT ?SetInfoAndShow@ItemResellWnd@@QAEXABVioHashString@@PAVioUIRenderImage@@HPAVioComplexStringPrinter@@PAVioWnd@@KK_NH@Z
_TEXT	SEGMENT
_szTitle$ = 8						; size = 4
_pIcon$ = 12						; size = 4
_iIconNum$ = 16						; size = 4
_pPrinter$ = 20						; size = 4
_pReturnWnd$ = 24					; size = 4
tv436 = 28						; size = 4
tv434 = 28						; size = 4
_dwEditType$ = 28					; size = 4
_dwActionType$ = 32					; size = 4
_i$505263 = 36						; size = 4
_bIsCostume$ = 36					; size = 1
_nGradeType$ = 40					; size = 4
?SetInfoAndShow@ItemResellWnd@@QAEXABVioHashString@@PAVioUIRenderImage@@HPAVioComplexStringPrinter@@PAVioWnd@@KK_NH@Z PROC ; ItemResellWnd::SetInfoAndShow, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : #if defined( SRC_ID ) || defined( SRC_SEA )
; 151  : 	if( dwEditType == SELL_EDIT_EXTRAITEM )
; 152  : 		return;
; 153  : #endif
; 154  : 	m_dwSellEditType = dwEditType;

  00003	8b 45 1c	 mov	 eax, DWORD PTR _dwEditType$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 155  : 	m_dwSellActionType = dwActionType;
; 156  : 
; 157  : 	m_pReturnWnd = pReturnWnd;
; 158  : 
; 159  : 	SetTitleText( szTitle.c_str() );

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _szTitle$[ebp]
  0000d	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax
  00013	8b 45 20	 mov	 eax, DWORD PTR _dwActionType$[ebp]
  00016	57		 push	 edi
  00017	33 db		 xor	 ebx, ebx
  00019	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax
  0001f	8b 45 18	 mov	 eax, DWORD PTR _pReturnWnd$[ebp]
  00022	53		 push	 ebx
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00028	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00034	50		 push	 eax
  00035	8b ce		 mov	 ecx, esi
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z

; 160  : 
; 161  : 	InventoryIconBtn *pIconBtn = dynamic_cast<InventoryIconBtn*>(FindChildWnd(ID_ITEM_ICON));

  0003d	53		 push	 ebx
  0003e	68 00 00 00 00	 push	 OFFSET ??_R0?AVInventoryIconBtn@@@8
  00043	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00048	53		 push	 ebx
  00049	6a 0b		 push	 11			; 0000000bH
  0004b	8b ce		 mov	 ecx, esi
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ___RTDynamicCast
  00059	8b f8		 mov	 edi, eax
  0005b	83 c4 14	 add	 esp, 20			; 00000014H

; 162  : 	if( pIconBtn )

  0005e	3b fb		 cmp	 edi, ebx
  00060	74 55		 je	 SHORT $LN24@SetInfoAnd

; 163  : 	{
; 164  : 		pIconBtn->SetIcon( pIcon, FLOAT1, FLOAT1, iIconNum );

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	8b c8		 mov	 ecx, eax
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	53		 push	 ebx
  0006f	ff 75 10	 push	 DWORD PTR _iIconNum$[ebp]
  00072	89 4d 1c	 mov	 DWORD PTR tv436[ebp], ecx
  00075	db 45 1c	 fild	 DWORD PTR tv436[ebp]
  00078	85 c9		 test	 ecx, ecx
  0007a	79 06		 jns	 SHORT $LN33@SetInfoAnd
  0007c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@SetInfoAnd:
  00082	51		 push	 ecx
  00083	51		 push	 ecx
  00084	89 45 1c	 mov	 DWORD PTR tv434[ebp], eax
  00087	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0008b	db 45 1c	 fild	 DWORD PTR tv434[ebp]
  0008e	85 c0		 test	 eax, eax
  00090	79 06		 jns	 SHORT $LN34@SetInfoAnd
  00092	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@SetInfoAnd:
  00098	d9 1c 24	 fstp	 DWORD PTR [esp]
  0009b	ff 75 0c	 push	 DWORD PTR _pIcon$[ebp]
  0009e	8b cf		 mov	 ecx, edi
  000a0	e8 00 00 00 00	 call	 ?SetIcon@InventoryIconBtn@@QAE_NPAVioUIRenderImage@@MMHW4NumberType@1@@Z ; InventoryIconBtn::SetIcon

; 165  : 		pIconBtn->SetCostume( bIsCostume );

  000a5	8a 45 24	 mov	 al, BYTE PTR _bIsCostume$[ebp]
  000a8	88 87 80 02 00
	00		 mov	 BYTE PTR [edi+640], al

; 166  : 		pIconBtn->SetGradeType( nGradeType );

  000ae	8b 45 28	 mov	 eax, DWORD PTR _nGradeType$[ebp]
  000b1	89 87 84 02 00
	00		 mov	 DWORD PTR [edi+644], eax
$LN24@SetInfoAnd:

; 167  : 	}
; 168  : 
; 169  : 	for( int i=0; i < MAX_INFO_LINE; ++i )

  000b7	8b 7d 14	 mov	 edi, DWORD PTR _pPrinter$[ebp]
  000ba	89 5d 24	 mov	 DWORD PTR _i$505263[ebp], ebx
  000bd	8d 9e 68 01 00
	00		 lea	 ebx, DWORD PTR [esi+360]
  000c3	83 c7 0c	 add	 edi, 12			; 0000000cH
$LL14@SetInfoAnd:

; 170  : 	{
; 171  : 		m_Desc[i].ClearList();

  000c6	8b cb		 mov	 ecx, ebx
  000c8	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 172  : 
; 173  : 		if( pPrinter[i].IsEmpty() )

  000cd	8b 07		 mov	 eax, DWORD PTR [edi]
  000cf	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000d2	74 18		 je	 SHORT $LN31@SetInfoAnd

; 174  : 			break;
; 175  : 
; 176  : 		pPrinter[i].CopyFullText( m_Desc[i] );

  000d4	53		 push	 ebx
  000d5	8d 4f f4	 lea	 ecx, DWORD PTR [edi-12]
  000d8	e8 00 00 00 00	 call	 ?CopyFullText@ioComplexStringPrinter@@QBEXAAV1@@Z ; ioComplexStringPrinter::CopyFullText
  000dd	ff 45 24	 inc	 DWORD PTR _i$505263[ebp]
  000e0	83 c3 20	 add	 ebx, 32			; 00000020H
  000e3	83 c7 20	 add	 edi, 32			; 00000020H
  000e6	83 7d 24 05	 cmp	 DWORD PTR _i$505263[ebp], 5
  000ea	7c da		 jl	 SHORT $LL14@SetInfoAnd
$LN31@SetInfoAnd:

; 177  : 	}
; 178  : 
; 179  : 	switch( m_dwSellActionType )

  000ec	8b 86 64 01 00
	00		 mov	 eax, DWORD PTR [esi+356]
  000f2	83 f8 01	 cmp	 eax, 1
  000f5	74 0c		 je	 SHORT $LN8@SetInfoAnd
  000f7	83 f8 02	 cmp	 eax, 2
  000fa	74 34		 je	 SHORT $LN4@SetInfoAnd
  000fc	76 75		 jbe	 SHORT $LN5@SetInfoAnd
  000fe	83 f8 05	 cmp	 eax, 5
  00101	77 70		 ja	 SHORT $LN5@SetInfoAnd
$LN8@SetInfoAnd:

; 180  : 	{
; 181  : 	case ACST_SELL:
; 182  : 	case ACST_SELL_MEDAL:
; 183  : 	case ACST_SELL_COSTUME:
; 184  : 	case ACST_SELL_ACCESSORY:
; 185  : 		if( m_dwSellEditType == SELL_EDIT_NONE )

  00103	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
  00109	85 c0		 test	 eax, eax
  0010b	75 40		 jne	 SHORT $LN7@SetInfoAnd

; 186  : 		{
; 187  : 			SetSize( GetWidth(), NORMAL_HEIGHT );

  0010d	68 4d 01 00 00	 push	 333			; 0000014dH
$LN37@SetInfoAnd:
  00112	8b 3e		 mov	 edi, DWORD PTR [esi]
  00114	8b ce		 mov	 ecx, esi
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0011c	50		 push	 eax
  0011d	8b ce		 mov	 ecx, esi
  0011f	ff 57 2c	 call	 DWORD PTR [edi+44]

; 188  : 			HideChildWnd( ID_SELL_EDIT );

  00122	6a 00		 push	 0
  00124	6a 04		 push	 4
  00126	8b ce		 mov	 ecx, esi
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  0012e	eb 43		 jmp	 SHORT $LN5@SetInfoAnd
$LN4@SetInfoAnd:

; 194  : 		}
; 195  : 		break;
; 196  : 	case ACST_DISASSEMBLE:
; 197  : 		if( m_dwSellEditType == SELL_EDIT_NONE )

  00130	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
  00136	85 c0		 test	 eax, eax
  00138	75 07		 jne	 SHORT $LN3@SetInfoAnd

; 198  : 		{
; 199  : 			SetSize( GetWidth(), DIS_NORMAL_HEIGHT );

  0013a	68 39 01 00 00	 push	 313			; 00000139H

; 200  : 			HideChildWnd( ID_SELL_EDIT );

  0013f	eb d1		 jmp	 SHORT $LN37@SetInfoAnd
$LN3@SetInfoAnd:

; 201  : 		}
; 202  : 		else if( m_dwSellEditType == SELL_EDIT_EXTRAITEM )

  00141	83 f8 01	 cmp	 eax, 1
  00144	75 2d		 jne	 SHORT $LN5@SetInfoAnd

; 203  : 		{
; 204  : 			SetSize( GetWidth(), DIS_EDIT_HEIGHT );

  00146	68 72 01 00 00	 push	 370			; 00000172H

; 205  : 			ShowChildWnd( ID_SELL_EDIT );
; 206  : 		}
; 207  : 		break;

  0014b	eb 0a		 jmp	 SHORT $LN35@SetInfoAnd
$LN7@SetInfoAnd:

; 189  : 		}
; 190  : 		else if( m_dwSellEditType == SELL_EDIT_EXTRAITEM )

  0014d	83 f8 01	 cmp	 eax, 1
  00150	75 21		 jne	 SHORT $LN5@SetInfoAnd

; 191  : 		{
; 192  : 			SetSize( GetWidth(), EDIT_HEIGHT );

  00152	68 86 01 00 00	 push	 390			; 00000186H
$LN35@SetInfoAnd:
  00157	8b 3e		 mov	 edi, DWORD PTR [esi]
  00159	8b ce		 mov	 ecx, esi
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  00161	50		 push	 eax
  00162	8b ce		 mov	 ecx, esi
  00164	ff 57 2c	 call	 DWORD PTR [edi+44]

; 193  : 			ShowChildWnd( ID_SELL_EDIT );

  00167	6a 00		 push	 0
  00169	6a 04		 push	 4
  0016b	8b ce		 mov	 ecx, esi
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z
$LN5@SetInfoAnd:

; 208  : 	}
; 209  : 
; 210  : 	ShowWnd();

  00173	8b ce		 mov	 ecx, esi
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx

; 211  : }

  0017e	5d		 pop	 ebp
  0017f	c2 24 00	 ret	 36			; 00000024H
?SetInfoAndShow@ItemResellWnd@@QAEXABVioHashString@@PAVioUIRenderImage@@HPAVioComplexStringPrinter@@PAVioWnd@@KK_NH@Z ENDP ; ItemResellWnd::SetInfoAndShow
_TEXT	ENDS
PUBLIC	??_C@_0BL@HCGPMGAO@ItemResellWnd?3?3iwm_command?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	_pWnd$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ:PROC ; ioSP2GUIManager::SetMsgBox
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	__imp_?GetText@ioEdit@@QBEPBDXZ:PROC
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BL@HCGPMGAO@ItemResellWnd?3?3iwm_command?$AA@
CONST	SEGMENT
??_C@_0BL@HCGPMGAO@ItemResellWnd?3?3iwm_command?$AA@ DB 'ItemResellWnd::i'
	DB	'wm_command', 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?iwm_command@ItemResellWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$GSCopy$ = -792					; size = 4
_this$GSCopy$ = -788					; size = 4
_szText3$ = -784					; size = 260
_szText1$ = -524					; size = 260
_szText2$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@ItemResellWnd@@UAEXPAVioWnd@@HK@Z PROC	; ItemResellWnd::iwm_command, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 03 00
	00		 sub	 esp, 792		; 00000318H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _pWnd$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 215  : 	char szText1[MAX_PATH] = "";

  00019	be 03 01 00 00	 mov	 esi, 259		; 00000103H
  0001e	56		 push	 esi

; 225  : 			HideWnd();

  0001f	89 85 e8 fc ff
	ff		 mov	 DWORD PTR _pWnd$GSCopy$[ebp], eax
  00025	33 ff		 xor	 edi, edi
  00027	8d 85 f5 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp+1]
  0002d	8b d9		 mov	 ebx, ecx
  0002f	57		 push	 edi
  00030	50		 push	 eax

; 233  : 				{
; 234  : 				case ACST_SELL:
; 235  : 					StringCbCopy( szText1, sizeof(szText1), STR(1) );

  00031	89 9d ec fc ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00037	c6 85 f4 fd ff
	ff 00		 mov	 BYTE PTR _szText1$[ebp], 0
  0003e	e8 00 00 00 00	 call	 _memset
  00043	56		 push	 esi
  00044	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp+1]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szText2$[ebp], 0
  00053	e8 00 00 00 00	 call	 _memset
  00058	56		 push	 esi
  00059	8d 85 f1 fc ff
	ff		 lea	 eax, DWORD PTR _szText3$[ebp+1]
  0005f	57		 push	 edi
  00060	50		 push	 eax
  00061	c6 85 f0 fc ff
	ff 00		 mov	 BYTE PTR _szText3$[ebp], 0
  00068	e8 00 00 00 00	 call	 _memset
  0006d	8b 8d e8 fc ff
	ff		 mov	 ecx, DWORD PTR _pWnd$GSCopy$[ebp]
  00073	83 c4 24	 add	 esp, 36			; 00000024H
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ
  0007c	48		 dec	 eax
  0007d	0f 84 7e 02 00
	00		 je	 $LN20@iwm_comman

; 216  : 	char szText2[MAX_PATH] = "";
; 217  : 	char szText3[MAX_PATH] = "";
; 218  : 
; 219  : 	DWORD dwID = pWnd->GetID();
; 220  : 	switch( dwID )

  00083	48		 dec	 eax
  00084	74 50		 je	 SHORT $LN18@iwm_comman
  00086	48		 dec	 eax
  00087	0f 84 74 02 00
	00		 je	 $LN20@iwm_comman
  0008d	48		 dec	 eax
  0008e	0f 85 7b 02 00
	00		 jne	 $LN19@iwm_comman

; 282  : 	case ID_SELL_EDIT:
; 283  : 		if( cmd == IOED_INPUT )

  00094	83 7d 0c 22	 cmp	 DWORD PTR _cmd$[ebp], 34 ; 00000022H
  00098	0f 85 71 02 00
	00		 jne	 $LN19@iwm_comman

; 284  : 		{
; 285  : 			if( param == 0 || param == 1 )

  0009e	39 7d 10	 cmp	 DWORD PTR _param$[ebp], edi
  000a1	74 0a		 je	 SHORT $LN1@iwm_comman
  000a3	83 7d 10 01	 cmp	 DWORD PTR _param$[ebp], 1
  000a7	0f 85 62 02 00
	00		 jne	 $LN19@iwm_comman
$LN1@iwm_comman:

; 286  : 			{
; 287  : 				ioEdit *pEdit = dynamic_cast<ioEdit*>(pWnd);

  000ad	57		 push	 edi
  000ae	68 00 00 00 00	 push	 OFFSET ??_R0?AVioEdit@@@8
  000b3	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  000b8	57		 push	 edi
  000b9	ff b5 e8 fc ff
	ff		 push	 DWORD PTR _pWnd$GSCopy$[ebp]
  000bf	e8 00 00 00 00	 call	 ___RTDynamicCast

; 288  : 				pEdit->SetKeyFocus();

  000c4	8b 10		 mov	 edx, DWORD PTR [eax]
  000c6	83 c4 14	 add	 esp, 20			; 00000014H
  000c9	8b c8		 mov	 ecx, eax
  000cb	ff 92 30 01 00
	00		 call	 DWORD PTR [edx+304]

; 289  : 			}
; 290  : 		}
; 291  : 		break;

  000d1	e9 39 02 00 00	 jmp	 $LN19@iwm_comman
$LN18@iwm_comman:

; 226  : 		break;
; 227  : 	case ID_RESELL:
; 228  : 		if( cmd == IOBN_BTNUP )

  000d6	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  000da	0f 85 2f 02 00
	00		 jne	 $LN19@iwm_comman

; 229  : 		{
; 230  : 			if( m_dwSellEditType == SELL_EDIT_EXTRAITEM )

  000e0	33 c9		 xor	 ecx, ecx
  000e2	41		 inc	 ecx
  000e3	39 8b 60 01 00
	00		 cmp	 DWORD PTR [ebx+352], ecx
  000e9	0f 85 e7 01 00
	00		 jne	 $LN29@iwm_comman

; 231  : 			{
; 232  : 				switch( m_dwSellActionType )

  000ef	8b 83 64 01 00
	00		 mov	 eax, DWORD PTR [ebx+356]
  000f5	48		 dec	 eax
  000f6	74 14		 je	 SHORT $LN13@iwm_comman
  000f8	48		 dec	 eax
  000f9	0f 84 52 01 00
	00		 je	 $LN12@iwm_comman
  000ff	48		 dec	 eax
  00100	0f 84 f0 00 00
	00		 je	 $LN11@iwm_comman
  00106	48		 dec	 eax
  00107	74 03		 je	 SHORT $LN13@iwm_comman
  00109	48		 dec	 eax
  0010a	75 7b		 jne	 SHORT $LN14@iwm_comman
$LN13@iwm_comman:

; 233  : 				{
; 234  : 				case ACST_SELL:
; 235  : 					StringCbCopy( szText1, sizeof(szText1), STR(1) );

  0010c	57		 push	 edi
  0010d	51		 push	 ecx
  0010e	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00113	53		 push	 ebx
  00114	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BL@HCGPMGAO@ItemResellWnd?3?3iwm_command?$AA@
  00119	57		 push	 edi
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00120	8b c8		 mov	 ecx, eax
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00128	50		 push	 eax
  00129	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  0012e	56		 push	 esi
  0012f	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 236  : 					StringCbCopy( szText2, sizeof(szText2), STR(2) );

  0013b	6a 00		 push	 0
  0013d	6a 02		 push	 2
  0013f	53		 push	 ebx
  00140	57		 push	 edi
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00147	8b c8		 mov	 ecx, eax
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0014f	50		 push	 eax
  00150	56		 push	 esi
  00151	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 237  : 					StringCbCopy( szText3, sizeof(szText3), STR(3) );

  0015d	6a 00		 push	 0
  0015f	6a 03		 push	 3
$LN31@iwm_comman:
  00161	53		 push	 ebx
  00162	57		 push	 edi
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00169	8b c8		 mov	 ecx, eax
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00171	50		 push	 eax
  00172	56		 push	 esi
  00173	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _szText3$[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA
  0017f	8b 9d ec fc ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  00185	33 ff		 xor	 edi, edi
$LN14@iwm_comman:

; 249  : 				case ACST_SELL_COSTUME:
; 250  : 					StringCbCopy( szText1, sizeof(szText1), STR(1) );
; 251  : 					StringCbCopy( szText2, sizeof(szText2), STR(2) );
; 252  : 					StringCbCopy( szText3, sizeof(szText3), STR(3) );
; 253  : 					break;
; 254  : 				case ACST_SELL_ACCESSORY:
; 255  : 					StringCbCopy( szText1, sizeof(szText1), STR(1) );
; 256  : 					StringCbCopy( szText2, sizeof(szText2), STR(2) );
; 257  : 					StringCbCopy( szText3, sizeof(szText3), STR(3) );
; 258  : 					break;
; 259  : 				}
; 260  : 
; 261  : 				if( !m_pSellEdit || !m_pSellEdit->IsShow() )

  00187	8b 8b 14 02 00
	00		 mov	 ecx, DWORD PTR [ebx+532]
  0018d	3b cf		 cmp	 ecx, edi
  0018f	0f 84 28 01 00
	00		 je	 $LN7@iwm_comman
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0019b	84 c0		 test	 al, al
  0019d	0f 84 1a 01 00
	00		 je	 $LN7@iwm_comman

; 265  : 				}
; 266  : 
; 267  : 				ioEdit *pEdit = dynamic_cast<ioEdit*>(m_pSellEdit);

  001a3	57		 push	 edi
  001a4	68 00 00 00 00	 push	 OFFSET ??_R0?AVioEdit@@@8
  001a9	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  001ae	57		 push	 edi
  001af	ff b3 14 02 00
	00		 push	 DWORD PTR [ebx+532]
  001b5	e8 00 00 00 00	 call	 ___RTDynamicCast
  001ba	83 c4 14	 add	 esp, 20			; 00000014H

; 268  : 				if( strcmp( pEdit->GetText(), szText2 ) != 0 )

  001bd	8b c8		 mov	 ecx, eax
  001bf	8d b5 f8 fe ff
	ff		 lea	 esi, DWORD PTR _szText2$[ebp]
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetText@ioEdit@@QBEPBDXZ
$LL25@iwm_comman:
  001cb	8a 08		 mov	 cl, BYTE PTR [eax]
  001cd	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001cf	0f 85 d7 00 00
	00		 jne	 $LN26@iwm_comman
  001d5	84 c9		 test	 cl, cl
  001d7	74 16		 je	 SHORT $LN27@iwm_comman
  001d9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001dc	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001df	0f 85 c7 00 00
	00		 jne	 $LN26@iwm_comman
  001e5	83 c0 02	 add	 eax, 2
  001e8	83 c6 02	 add	 esi, 2
  001eb	84 c9		 test	 cl, cl
  001ed	75 dc		 jne	 SHORT $LL25@iwm_comman
$LN27@iwm_comman:
  001ef	33 c0		 xor	 eax, eax
  001f1	e9 bb 00 00 00	 jmp	 $LN28@iwm_comman
$LN11@iwm_comman:

; 244  : 				case ACST_SELL_MEDAL:
; 245  : 					StringCbCopy( szText1, sizeof(szText1), STR(10) );

  001f6	57		 push	 edi
  001f7	6a 0a		 push	 10			; 0000000aH
  001f9	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  001fe	53		 push	 ebx
  001ff	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BL@HCGPMGAO@ItemResellWnd?3?3iwm_command?$AA@
  00204	57		 push	 edi
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0020b	8b c8		 mov	 ecx, eax
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00213	50		 push	 eax
  00214	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  00219	56		 push	 esi
  0021a	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 246  : 					StringCbCopy( szText2, sizeof(szText2), STR(11) );

  00226	6a 00		 push	 0
  00228	6a 0b		 push	 11			; 0000000bH
  0022a	53		 push	 ebx
  0022b	57		 push	 edi
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00232	8b c8		 mov	 ecx, eax
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0023a	50		 push	 eax
  0023b	56		 push	 esi
  0023c	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp]
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 247  : 					StringCbCopy( szText3, sizeof(szText3), STR(12) );

  00248	6a 00		 push	 0
  0024a	6a 0c		 push	 12			; 0000000cH

; 248  : 					break;

  0024c	e9 10 ff ff ff	 jmp	 $LN31@iwm_comman
$LN12@iwm_comman:

; 238  : 					break;
; 239  : 				case ACST_DISASSEMBLE:
; 240  : 					StringCbCopy( szText1, sizeof(szText1), STR(7) );

  00251	57		 push	 edi
  00252	6a 07		 push	 7
  00254	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00259	53		 push	 ebx
  0025a	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BL@HCGPMGAO@ItemResellWnd?3?3iwm_command?$AA@
  0025f	57		 push	 edi
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00266	8b c8		 mov	 ecx, eax
  00268	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0026e	50		 push	 eax
  0026f	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  00274	56		 push	 esi
  00275	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 241  : 					StringCbCopy( szText2, sizeof(szText2), STR(8) );

  00281	6a 00		 push	 0
  00283	6a 08		 push	 8
  00285	53		 push	 ebx
  00286	57		 push	 edi
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0028d	8b c8		 mov	 ecx, eax
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00295	50		 push	 eax
  00296	56		 push	 esi
  00297	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp]
  0029d	50		 push	 eax
  0029e	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 242  : 					StringCbCopy( szText3, sizeof(szText3), STR(9) );

  002a3	6a 00		 push	 0
  002a5	6a 09		 push	 9

; 243  : 					break;

  002a7	e9 b5 fe ff ff	 jmp	 $LN31@iwm_comman
$LN26@iwm_comman:

; 268  : 				if( strcmp( pEdit->GetText(), szText2 ) != 0 )

  002ac	1b c0		 sbb	 eax, eax
  002ae	83 d8 ff	 sbb	 eax, -1
$LN28@iwm_comman:
  002b1	3b c7		 cmp	 eax, edi
  002b3	74 21		 je	 SHORT $LN29@iwm_comman

; 269  : 				{
; 270  : 					g_GUIMgr.SetMsgBox( MB_OK, NULL, szText3 );

  002b5	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _szText3$[ebp]

; 271  : 					return;

  002bb	eb 06		 jmp	 SHORT $LN32@iwm_comman
$LN7@iwm_comman:

; 262  : 				{
; 263  : 					g_GUIMgr.SetMsgBox( MB_OK, NULL, szText1 );

  002bd	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
$LN32@iwm_comman:
  002c3	50		 push	 eax
  002c4	57		 push	 edi
  002c5	57		 push	 edi
  002c6	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 ?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ ; ioSP2GUIManager::SetMsgBox
  002d1	83 c4 10	 add	 esp, 16			; 00000010H

; 264  : 					return;

  002d4	eb 39		 jmp	 SHORT $LN19@iwm_comman
$LN29@iwm_comman:

; 272  : 				}
; 273  : 			}
; 274  : 
; 275  : 			HideWnd();

  002d6	8b cb		 mov	 ecx, ebx
  002d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ

; 276  : 			if( m_pReturnWnd )

  002de	39 bb 0c 02 00
	00		 cmp	 DWORD PTR [ebx+524], edi
  002e4	74 29		 je	 SHORT $LN19@iwm_comman

; 277  : 			{
; 278  : 				m_pReturnWnd->iwm_command( this, cmd,  m_dwSellActionType );

  002e6	ff b3 64 01 00
	00		 push	 DWORD PTR [ebx+356]
  002ec	8b 83 0c 02 00
	00		 mov	 eax, DWORD PTR [ebx+524]
  002f2	8b 10		 mov	 edx, DWORD PTR [eax]
  002f4	6a 11		 push	 17			; 00000011H
  002f6	53		 push	 ebx
  002f7	8b c8		 mov	 ecx, eax
  002f9	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]

; 279  : 			}
; 280  : 		}
; 281  : 		break;

  002ff	eb 0e		 jmp	 SHORT $LN19@iwm_comman
$LN20@iwm_comman:

; 221  : 	{
; 222  : 	case ID_EXIT:
; 223  : 	case ID_CANCEL:
; 224  : 		if( cmd == IOBN_BTNUP )

  00301	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00305	75 08		 jne	 SHORT $LN19@iwm_comman

; 225  : 			HideWnd();

  00307	8b cb		 mov	 ecx, ebx
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN19@iwm_comman:

; 292  : 	}
; 293  : }

  0030f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00312	5f		 pop	 edi
  00313	5e		 pop	 esi
  00314	33 cd		 xor	 ecx, ebp
  00316	5b		 pop	 ebx
  00317	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031c	c9		 leave
  0031d	c2 0c 00	 ret	 12			; 0000000cH
?iwm_command@ItemResellWnd@@UAEXPAVioWnd@@HK@Z ENDP	; ItemResellWnd::iwm_command
_TEXT	ENDS
PUBLIC	__real@3f19999a
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	__real@3f266666
PUBLIC	??_C@_0BI@FLGJGMKB@ItemResellWnd?3?3OnRender?$AA@ ; `string'
PUBLIC	_this$GSCopy$
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@3f19999a
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_C@_0BI@FLGJGMKB@ItemResellWnd?3?3OnRender?$AA@
CONST	SEGMENT
??_C@_0BI@FLGJGMKB@ItemResellWnd?3?3OnRender?$AA@ DB 'ItemResellWnd::OnRe'
	DB	'nder', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRender@ItemResellWnd@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRender@ItemResellWnd@@MAEXXZ$0
__ehfuncinfo$?OnRender@ItemResellWnd@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnRender@ItemResellWnd@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\itemresellwnd.cpp
xdata$x	ENDS
;	COMDAT ?OnRender@ItemResellWnd@@MAEXXZ
_TEXT	SEGMENT
_iEditFrmXPos$505349 = -856				; size = 4
_kPrinter$505361 = -852					; size = 32
tv539 = -820						; size = 4
_iYPos$ = -820						; size = 4
_this$GSCopy$ = -816					; size = 4
_iXPos$ = -812						; size = 4
tv790 = -808						; size = 4
tv90 = -808						; size = 4
_iText1YPos$505347 = -808				; size = 4
tv703 = -804						; size = 4
tv161 = -804						; size = 4
_iEditFrmYPos$505350 = -804				; size = 4
tv788 = -800						; size = 4
tv701 = -800						; size = 4
_iText2YPos$505348 = -800				; size = 4
_szText3$ = -796					; size = 260
_szText1$ = -536					; size = 260
_szText2$ = -276					; size = 260
__$EHRec$ = -12						; size = 12
?OnRender@ItemResellWnd@@MAEXXZ PROC			; ItemResellWnd::OnRender, COMDAT
; _this$ = ecx

; 296  : {

  00000	68 4c 03 00 00	 push	 844			; 0000034cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnRender@ItemResellWnd@@MAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f9		 mov	 edi, ecx

; 297  : 	ioWnd::OnRender();
; 298  : 
; 299  : 	int iXPos = GetDerivedPosX();

  00011	89 bd d0 fc ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ
  0001d	8b cf		 mov	 ecx, edi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 300  : 	int iYPos = GetDerivedPosY();

  00025	8b cf		 mov	 ecx, edi
  00027	89 85 d4 fc ff
	ff		 mov	 DWORD PTR _iXPos$[ebp], eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 301  : 
; 302  : 	enum
; 303  : 	{
; 304  : 		DESC1_X		= 125,
; 305  : 		DESC1_Y		= 146,
; 306  : 		LINE1_GAP	= 23,
; 307  : 
; 308  : 		DESC2_X		= 125,
; 309  : 		DESC2_Y		= 199,
; 310  : 		LINE2_GAP	= 20,
; 311  : 	};
; 312  : 
; 313  : 	if( m_pBottomFrm )

  00033	33 f6		 xor	 esi, esi
  00035	8b d8		 mov	 ebx, eax
  00037	89 9d cc fc ff
	ff		 mov	 DWORD PTR _iYPos$[ebp], ebx
  0003d	39 b7 1c 02 00
	00		 cmp	 DWORD PTR [edi+540], esi
  00043	74 30		 je	 SHORT $LN19@OnRender

; 314  : 		m_pBottomFrm->Render( iXPos, iYPos, UI_RENDER_MULTIPLY );

  00045	8b 87 1c 02 00
	00		 mov	 eax, DWORD PTR [edi+540]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	56		 push	 esi
  0004e	56		 push	 esi
  0004f	56		 push	 esi
  00050	6a 08		 push	 8
  00052	51		 push	 ecx
  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	51		 push	 ecx
  00057	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  0005b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00061	66 0f 6e 85 d4
	fc ff ff	 movd	 xmm0, DWORD PTR _iXPos$[ebp]
  00069	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006c	8b c8		 mov	 ecx, eax
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	ff 12		 call	 DWORD PTR [edx]
$LN19@OnRender:

; 315  : 
; 316  : 
; 317  : 	// DESC1
; 318  : 	int i=0;
; 319  : 	for( i=0; i < 2; ++i )

  00075	8d 83 92 00 00
	00		 lea	 eax, DWORD PTR [ebx+146]
  0007b	89 85 e0 fc ff
	ff		 mov	 DWORD PTR tv701[ebp], eax
  00081	8d 87 74 01 00
	00		 lea	 eax, DWORD PTR [edi+372]
  00087	89 85 dc fc ff
	ff		 mov	 DWORD PTR tv703[ebp], eax
  0008d	c7 85 d8 fc ff
	ff 02 00 00 00	 mov	 DWORD PTR tv90[ebp], 2
$LL18@OnRender:

; 320  : 	{
; 321  : 		if( m_Desc[i].IsEmpty() )

  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0009c	74 3d		 je	 SHORT $LN17@OnRender

; 322  : 			continue;
; 323  : 
; 324  : 		m_Desc[i].PrintFullText( iXPos+DESC1_X, iYPos+DESC1_Y+(LINE1_GAP*i), TAT_CENTER );

  0009e	66 0f 6e 85 e0
	fc ff ff	 movd	 xmm0, DWORD PTR tv701[ebp]
  000a6	68 ff 00 00 00	 push	 255			; 000000ffH
  000ab	6a 01		 push	 1
  000ad	51		 push	 ecx
  000ae	51		 push	 ecx
  000af	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _iXPos$[ebp]
  000b5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000b8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000be	83 c1 7d	 add	 ecx, 125		; 0000007dH
  000c1	0f 57 c0	 xorps	 xmm0, xmm0
  000c4	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000c8	8d 48 f4	 lea	 ecx, DWORD PTR [eax-12]
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText
  000d5	8b 85 dc fc ff
	ff		 mov	 eax, DWORD PTR tv703[ebp]
$LN17@OnRender:

; 315  : 
; 316  : 
; 317  : 	// DESC1
; 318  : 	int i=0;
; 319  : 	for( i=0; i < 2; ++i )

  000db	83 85 e0 fc ff
	ff 17		 add	 DWORD PTR tv701[ebp], 23 ; 00000017H
  000e2	83 c0 20	 add	 eax, 32			; 00000020H
  000e5	ff 8d d8 fc ff
	ff		 dec	 DWORD PTR tv90[ebp]
  000eb	89 85 dc fc ff
	ff		 mov	 DWORD PTR tv703[ebp], eax
  000f1	75 a4		 jne	 SHORT $LL18@OnRender

; 325  : 	}
; 326  : 
; 327  : 	// DESC2
; 328  : 	for( i=2; i < MAX_INFO_LINE; ++i )

  000f3	8d 83 c7 00 00
	00		 lea	 eax, DWORD PTR [ebx+199]
  000f9	89 85 e0 fc ff
	ff		 mov	 DWORD PTR tv788[ebp], eax
  000ff	8d 87 b4 01 00
	00		 lea	 eax, DWORD PTR [edi+436]
  00105	89 85 d8 fc ff
	ff		 mov	 DWORD PTR tv790[ebp], eax
  0010b	c7 85 dc fc ff
	ff 03 00 00 00	 mov	 DWORD PTR tv161[ebp], 3
$LL14@OnRender:

; 329  : 	{
; 330  : 		if( m_Desc[i].IsEmpty() )

  00115	8b 08		 mov	 ecx, DWORD PTR [eax]
  00117	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0011a	74 3d		 je	 SHORT $LN13@OnRender

; 331  : 			continue;
; 332  : 
; 333  : 		m_Desc[i].PrintFullText( iXPos+DESC2_X, iYPos+DESC2_Y+(LINE2_GAP*(i-2)), TAT_CENTER );

  0011c	66 0f 6e 85 e0
	fc ff ff	 movd	 xmm0, DWORD PTR tv788[ebp]
  00124	68 ff 00 00 00	 push	 255			; 000000ffH
  00129	6a 01		 push	 1
  0012b	51		 push	 ecx
  0012c	51		 push	 ecx
  0012d	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _iXPos$[ebp]
  00133	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00136	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013c	83 c1 7d	 add	 ecx, 125		; 0000007dH
  0013f	0f 57 c0	 xorps	 xmm0, xmm0
  00142	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00146	8d 48 f4	 lea	 ecx, DWORD PTR [eax-12]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText
  00153	8b 85 d8 fc ff
	ff		 mov	 eax, DWORD PTR tv790[ebp]
$LN13@OnRender:

; 325  : 	}
; 326  : 
; 327  : 	// DESC2
; 328  : 	for( i=2; i < MAX_INFO_LINE; ++i )

  00159	83 85 e0 fc ff
	ff 14		 add	 DWORD PTR tv788[ebp], 20 ; 00000014H
  00160	83 c0 20	 add	 eax, 32			; 00000020H
  00163	ff 8d dc fc ff
	ff		 dec	 DWORD PTR tv161[ebp]
  00169	89 85 d8 fc ff
	ff		 mov	 DWORD PTR tv790[ebp], eax
  0016f	75 a4		 jne	 SHORT $LL14@OnRender

; 334  : 	}
; 335  : 
; 336  : 	char szText1[MAX_PATH] = "";

  00171	68 03 01 00 00	 push	 259			; 00000103H
  00176	8d 85 e9 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp+1]
  0017c	56		 push	 esi
  0017d	50		 push	 eax
  0017e	c6 85 e8 fd ff
	ff 00		 mov	 BYTE PTR _szText1$[ebp], 0
  00185	e8 00 00 00 00	 call	 _memset

; 337  : 	char szText2[MAX_PATH] = "";

  0018a	68 03 01 00 00	 push	 259			; 00000103H
  0018f	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp+1]
  00195	56		 push	 esi
  00196	50		 push	 eax
  00197	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _szText2$[ebp], 0
  0019e	e8 00 00 00 00	 call	 _memset

; 338  : 	char szText3[MAX_PATH] = "";

  001a3	68 03 01 00 00	 push	 259			; 00000103H
  001a8	8d 85 e5 fc ff
	ff		 lea	 eax, DWORD PTR _szText3$[ebp+1]
  001ae	56		 push	 esi
  001af	50		 push	 eax
  001b0	c6 85 e4 fc ff
	ff 00		 mov	 BYTE PTR _szText3$[ebp], 0
  001b7	e8 00 00 00 00	 call	 _memset

; 339  : 
; 340  : 	if( m_dwSellEditType == SELL_EDIT_EXTRAITEM )

  001bc	33 c9		 xor	 ecx, ecx
  001be	41		 inc	 ecx
  001bf	83 c4 24	 add	 esp, 36			; 00000024H
  001c2	39 8f 60 01 00
	00		 cmp	 DWORD PTR [edi+352], ecx
  001c8	0f 85 bd 02 00
	00		 jne	 $LN10@OnRender

; 341  : 	{
; 342  : 		int iText1YPos = iYPos + 269;

  001ce	8d 83 0d 01 00
	00		 lea	 eax, DWORD PTR [ebx+269]
  001d4	89 85 d8 fc ff
	ff		 mov	 DWORD PTR _iText1YPos$505347[ebp], eax

; 343  : 		int iText2YPos = iYPos + 292;

  001da	8d 83 24 01 00
	00		 lea	 eax, DWORD PTR [ebx+292]
  001e0	89 85 e0 fc ff
	ff		 mov	 DWORD PTR _iText2YPos$505348[ebp], eax

; 344  : 
; 345  : 		int iEditFrmXPos = iXPos + 17;

  001e6	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _iXPos$[ebp]
  001ec	83 c0 11	 add	 eax, 17			; 00000011H
  001ef	89 85 a8 fc ff
	ff		 mov	 DWORD PTR _iEditFrmXPos$505349[ebp], eax

; 346  : 		int iEditFrmYPos = iYPos + 288;
; 347  : 
; 348  : 		switch( m_dwSellActionType )

  001f5	8b 87 64 01 00
	00		 mov	 eax, DWORD PTR [edi+356]
  001fb	81 c3 20 01 00
	00		 add	 ebx, 288		; 00000120H
  00201	48		 dec	 eax
  00202	89 9d dc fc ff
	ff		 mov	 DWORD PTR _iEditFrmYPos$505350[ebp], ebx
  00208	74 14		 je	 SHORT $LN7@OnRender
  0020a	48		 dec	 eax
  0020b	0f 84 db 02 00
	00		 je	 $LN6@OnRender
  00211	48		 dec	 eax
  00212	0f 84 79 02 00
	00		 je	 $LN5@OnRender
  00218	48		 dec	 eax
  00219	74 03		 je	 SHORT $LN7@OnRender
  0021b	48		 dec	 eax
  0021c	75 7b		 jne	 SHORT $LN8@OnRender
$LN7@OnRender:

; 349  : 		{
; 350  : 		case ACST_SELL:
; 351  : 			StringCbCopy( szText1, sizeof(szText1), STR(1) );

  0021e	56		 push	 esi
  0021f	51		 push	 ecx
  00220	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00225	53		 push	 ebx
  00226	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BI@FLGJGMKB@ItemResellWnd?3?3OnRender?$AA@
  0022b	57		 push	 edi
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00232	8b c8		 mov	 ecx, eax
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0023a	50		 push	 eax
  0023b	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  00240	56		 push	 esi
  00241	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 352  : 			StringCbCopy( szText2, sizeof(szText2), STR(2) );

  0024d	6a 00		 push	 0
  0024f	6a 02		 push	 2
  00251	53		 push	 ebx
  00252	57		 push	 edi
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00259	8b c8		 mov	 ecx, eax
  0025b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00261	50		 push	 eax
  00262	56		 push	 esi
  00263	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 353  : 			StringCbCopy( szText3, sizeof(szText3), STR(3) );

  0026f	6a 00		 push	 0
  00271	6a 03		 push	 3
$LN37@OnRender:
  00273	53		 push	 ebx
  00274	57		 push	 edi
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0027b	8b c8		 mov	 ecx, eax
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00283	50		 push	 eax
  00284	56		 push	 esi
  00285	8d 85 e4 fc ff
	ff		 lea	 eax, DWORD PTR _szText3$[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA
$LN38@OnRender:
  00291	8b bd d0 fc ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00297	33 f6		 xor	 esi, esi
$LN8@OnRender:

; 370  : 		case ACST_SELL_COSTUME:
; 371  : 			StringCbCopy( szText1, sizeof(szText1), STR(1) );
; 372  : 			StringCbCopy( szText2, sizeof(szText2), STR(2) );
; 373  : 			StringCbCopy( szText3, sizeof(szText3), STR(3) );
; 374  : 			break;
; 375  : 		case ACST_SELL_ACCESSORY:
; 376  : 			StringCbCopy( szText1, sizeof(szText1), STR(1) );
; 377  : 			StringCbCopy( szText2, sizeof(szText2), STR(2) );
; 378  : 			StringCbCopy( szText3, sizeof(szText3), STR(3) );
; 379  : 			break;
; 380  : 		}
; 381  : 
; 382  : 		ioComplexStringPrinter kPrinter;

  00299	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  0029f	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 383  : 		kPrinter.SetBkColor( 0, 0, 0 );

  002a4	56		 push	 esi
  002a5	56		 push	 esi
  002a6	56		 push	 esi
  002a7	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  002ad	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  002b0	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 384  : 		kPrinter.SetTextStyle( TS_NORMAL );

  002b5	56		 push	 esi
  002b6	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  002bc	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 385  : 		kPrinter.SetTextColor( TCT_DEFAULT_DARKGRAY );

  002c1	bb 3a 3a 3a ff	 mov	 ebx, -12961222		; ff3a3a3aH
  002c6	53		 push	 ebx
  002c7	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  002cd	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 386  : 		kPrinter.AddTextPiece( FONT_SIZE_13, "[" );

  002d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_01OHGJGJJP@?$FL?$AA@
  002df	51		 push	 ecx
  002e0	8d 85 ac fc ff
	ff		 lea	 eax, DWORD PTR _kPrinter$505361[ebp]
  002e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002eb	50		 push	 eax
  002ec	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  002f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  : 		kPrinter.SetTextColor( TCT_DEFAULT_RED );

  002f4	68 00 16 b9 ff	 push	 -4647424		; ffb91600H
  002f9	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  002ff	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 388  : 		kPrinter.AddTextPiece( FONT_SIZE_13, szText1 );

  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0030c	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
  00312	50		 push	 eax
  00313	51		 push	 ecx
  00314	8d 85 ac fc ff
	ff		 lea	 eax, DWORD PTR _kPrinter$505361[ebp]
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  00325	83 c4 0c	 add	 esp, 12			; 0000000cH

; 389  : 		kPrinter.SetTextColor( TCT_DEFAULT_DARKGRAY );

  00328	53		 push	 ebx
  00329	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  0032f	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 390  : 		kPrinter.AddTextPiece( FONT_SIZE_13, szText2 );

  00334	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0033c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp]
  00342	50		 push	 eax
  00343	51		 push	 ecx
  00344	8d 85 ac fc ff
	ff		 lea	 eax, DWORD PTR _kPrinter$505361[ebp]
  0034a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 391  : 		kPrinter.PrintFullText( iXPos + 125, iText1YPos, TAT_CENTER );

  00355	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _iXPos$[ebp]
  0035b	66 0f 6e 8d d8
	fc ff ff	 movd	 xmm1, DWORD PTR _iText1YPos$505347[ebp]
  00363	83 c4 0c	 add	 esp, 12			; 0000000cH
  00366	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  0036b	53		 push	 ebx
  0036c	6a 01		 push	 1
  0036e	51		 push	 ecx
  0036f	51		 push	 ecx
  00370	83 c0 7d	 add	 eax, 125		; 0000007dH
  00373	0f 57 c0	 xorps	 xmm0, xmm0
  00376	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0037a	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0037d	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00383	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  00389	f3 0f 11 85 cc
	fc ff ff	 movss	 DWORD PTR tv539[ebp], xmm0
  00391	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00396	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 392  : 		kPrinter.ClearList();

  0039b	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  003a1	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 393  : 
; 394  : 		if( m_pEditFrm )

  003a6	39 b7 18 02 00
	00		 cmp	 DWORD PTR [edi+536], esi
  003ac	74 33		 je	 SHORT $LN2@OnRender

; 395  : 			m_pEditFrm->Render( iEditFrmXPos, iEditFrmYPos );

  003ae	66 0f 6e 85 dc
	fc ff ff	 movd	 xmm0, DWORD PTR _iEditFrmYPos$505350[ebp]
  003b6	8b 87 18 02 00
	00		 mov	 eax, DWORD PTR [edi+536]
  003bc	8b 10		 mov	 edx, DWORD PTR [eax]
  003be	56		 push	 esi
  003bf	56		 push	 esi
  003c0	56		 push	 esi
  003c1	56		 push	 esi
  003c2	51		 push	 ecx
  003c3	51		 push	 ecx
  003c4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003c7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003cd	66 0f 6e 85 a8
	fc ff ff	 movd	 xmm0, DWORD PTR _iEditFrmXPos$505349[ebp]
  003d5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003d8	8b c8		 mov	 ecx, eax
  003da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003df	ff 12		 call	 DWORD PTR [edx]
$LN2@OnRender:

; 396  : 
; 397  : 		if( m_pSellEdit != ioEdit::m_pKeyFocusEdit )

  003e1	8b 87 14 02 00
	00		 mov	 eax, DWORD PTR [edi+532]
  003e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?m_pKeyFocusEdit@ioEdit@@2PAV1@A
  003ed	3b 01		 cmp	 eax, DWORD PTR [ecx]
  003ef	0f 84 87 00 00
	00		 je	 $LN1@OnRender

; 398  : 		{
; 399  : 			kPrinter.SetBkColor( 0, 0, 0 );

  003f5	56		 push	 esi
  003f6	56		 push	 esi
  003f7	56		 push	 esi
  003f8	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  003fe	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 400  : 			kPrinter.SetTextStyle( TS_NORMAL );

  00403	56		 push	 esi
  00404	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  0040a	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 401  : 			kPrinter.SetTextColor( TCT_DEFAULT_LIGHTGRAY );

  0040f	68 a7 a7 a7 ff	 push	 -5789785		; ffa7a7a7H
  00414	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  0041a	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 402  : 			kPrinter.AddTextPiece( FONT_SIZE_12, szText3 );

  0041f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00427	8d 85 e4 fc ff
	ff		 lea	 eax, DWORD PTR _szText3$[ebp]
  0042d	50		 push	 eax
  0042e	51		 push	 ecx
  0042f	8d 85 ac fc ff
	ff		 lea	 eax, DWORD PTR _kPrinter$505361[ebp]
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	50		 push	 eax
  0043b	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 403  : 			kPrinter.PrintFullText( iXPos + 125, iText2YPos, TAT_CENTER );

  00440	66 0f 6e 85 e0
	fc ff ff	 movd	 xmm0, DWORD PTR _iText2YPos$505348[ebp]
  00448	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044b	53		 push	 ebx
  0044c	6a 01		 push	 1
  0044e	51		 push	 ecx
  0044f	51		 push	 ecx
  00450	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00453	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00459	f3 0f 10 85 cc
	fc ff ff	 movss	 xmm0, DWORD PTR tv539[ebp]
  00461	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  00467	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046c	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 404  : 			kPrinter.ClearList();

  00471	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  00477	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList
$LN1@OnRender:

; 405  : 		}
; 406  : 	}

  0047c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00480	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  00486	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN10@OnRender:

; 407  : }

  0048b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00490	c3		 ret	 0
$LN5@OnRender:

; 365  : 		case ACST_SELL_MEDAL:
; 366  : 			StringCbCopy( szText1, sizeof(szText1), STR(10) );

  00491	56		 push	 esi
  00492	6a 0a		 push	 10			; 0000000aH
  00494	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00499	53		 push	 ebx
  0049a	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BI@FLGJGMKB@ItemResellWnd?3?3OnRender?$AA@
  0049f	57		 push	 edi
  004a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  004a6	8b c8		 mov	 ecx, eax
  004a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  004ae	50		 push	 eax
  004af	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  004b4	56		 push	 esi
  004b5	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
  004bb	50		 push	 eax
  004bc	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 367  : 			StringCbCopy( szText2, sizeof(szText2), STR(11) );

  004c1	6a 00		 push	 0
  004c3	6a 0b		 push	 11			; 0000000bH
  004c5	53		 push	 ebx
  004c6	57		 push	 edi
  004c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  004cd	8b c8		 mov	 ecx, eax
  004cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  004d5	50		 push	 eax
  004d6	56		 push	 esi
  004d7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp]
  004dd	50		 push	 eax
  004de	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 368  : 			StringCbCopy( szText3, sizeof(szText3), STR(12) );

  004e3	6a 00		 push	 0
  004e5	6a 0c		 push	 12			; 0000000cH

; 369  : 			break;

  004e7	e9 87 fd ff ff	 jmp	 $LN37@OnRender
$LN6@OnRender:

; 354  : 			break;
; 355  : 		case ACST_DISASSEMBLE:
; 356  : 			StringCbCopy( szText1, sizeof(szText1), STR(7) );

  004ec	56		 push	 esi
  004ed	6a 07		 push	 7
  004ef	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  004f4	53		 push	 ebx
  004f5	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BI@FLGJGMKB@ItemResellWnd?3?3OnRender?$AA@
  004fa	57		 push	 edi
  004fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00501	8b c8		 mov	 ecx, eax
  00503	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00509	50		 push	 eax
  0050a	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  0050f	56		 push	 esi
  00510	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szText1$[ebp]
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 357  : 			StringCbCopy( szText2, sizeof(szText2), STR(8) );

  0051c	6a 00		 push	 0
  0051e	6a 08		 push	 8
  00520	53		 push	 ebx
  00521	57		 push	 edi
  00522	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00528	8b c8		 mov	 ecx, eax
  0052a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00530	50		 push	 eax
  00531	56		 push	 esi
  00532	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szText2$[ebp]
  00538	50		 push	 eax
  00539	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 358  : 			StringCbCopy( szText3, sizeof(szText3), STR(9) );

  0053e	6a 00		 push	 0
  00540	6a 09		 push	 9
  00542	53		 push	 ebx
  00543	57		 push	 edi
  00544	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0054a	8b c8		 mov	 ecx, eax
  0054c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00552	50		 push	 eax
  00553	56		 push	 esi
  00554	8d 85 e4 fc ff
	ff		 lea	 eax, DWORD PTR _szText3$[ebp]
  0055a	50		 push	 eax
  0055b	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 359  : 
; 360  : 			iText1YPos = iYPos + 249;

  00560	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  00566	8d 88 f9 00 00
	00		 lea	 ecx, DWORD PTR [eax+249]
  0056c	89 8d d8 fc ff
	ff		 mov	 DWORD PTR _iText1YPos$505347[ebp], ecx

; 361  : 			iText2YPos = iYPos + 272;

  00572	8d 88 10 01 00
	00		 lea	 ecx, DWORD PTR [eax+272]

; 362  : 
; 363  : 			iEditFrmYPos = iYPos + 268;

  00578	05 0c 01 00 00	 add	 eax, 268		; 0000010cH
  0057d	89 8d e0 fc ff
	ff		 mov	 DWORD PTR _iText2YPos$505348[ebp], ecx
  00583	89 85 dc fc ff
	ff		 mov	 DWORD PTR _iEditFrmYPos$505350[ebp], eax

; 364  : 			break;

  00589	e9 03 fd ff ff	 jmp	 $LN38@OnRender
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRender@ItemResellWnd@@MAEXXZ$0:
  00000	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$505361[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?OnRender@ItemResellWnd@@MAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a a4 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-860]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRender@ItemResellWnd@@MAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRender@ItemResellWnd@@MAEXXZ ENDP			; ItemResellWnd::OnRender
END
