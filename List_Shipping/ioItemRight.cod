; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioItemRight.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7ioItemRight@@6B@				; ioItemRight::`vftable'
PUBLIC	??0ioItemRight@@QAE@XZ				; ioItemRight::ioItemRight
PUBLIC	??_R4ioItemRight@@6B@				; ioItemRight::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioItemRight@@@8				; ioItemRight `RTTI Type Descriptor'
PUBLIC	??_R3ioItemRight@@8				; ioItemRight::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioItemRight@@8				; ioItemRight::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioItemRight@@8			; ioItemRight::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsRightValid@ioItemRight@@UBE_NXZ		; ioItemRight::IsRightValid
PUBLIC	?LoadProperty@ioItemRight@@UAEXAAVioINILoader@@@Z ; ioItemRight::LoadProperty
PUBLIC	?CheckPreCondition@ioItemRight@@UBE_NPAVioWnd@@@Z ; ioItemRight::CheckPreCondition
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
EXTRN	??_EioItemRight@@UAEPAXI@Z:PROC			; ioItemRight::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioItemRight@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitemright.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@ioItemRight@@8 DD FLAT:??_R0?AVioItemRight@@@8 ; ioItemRight::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioItemRight@@8
rdata$r	ENDS
;	COMDAT ??_R2ioItemRight@@8
rdata$r	SEGMENT
??_R2ioItemRight@@8 DD FLAT:??_R1A@?0A@EA@ioItemRight@@8 ; ioItemRight::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioItemRight@@8
rdata$r	SEGMENT
??_R3ioItemRight@@8 DD 00H				; ioItemRight::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioItemRight@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioItemRight@@@8
_DATA	SEGMENT
??_R0?AVioItemRight@@@8 DD FLAT:??_7type_info@@6B@	; ioItemRight `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioItemRight@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioItemRight@@6B@
rdata$r	SEGMENT
??_R4ioItemRight@@6B@ DD 00H				; ioItemRight::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioItemRight@@@8
	DD	FLAT:??_R3ioItemRight@@8
rdata$r	ENDS
;	COMDAT ??_7ioItemRight@@6B@
CONST	SEGMENT
??_7ioItemRight@@6B@ DD FLAT:??_R4ioItemRight@@6B@	; ioItemRight::`vftable'
	DD	FLAT:?IsRightValid@ioItemRight@@UBE_NXZ
	DD	FLAT:?LoadProperty@ioItemRight@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?CheckPreCondition@ioItemRight@@UBE_NPAVioWnd@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EioItemRight@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioItemRight@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0ioItemRight@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioItemRight@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioItemRight@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioItemRight@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioItemRight@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioItemRight@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioItemRight@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioItemRight@@QAE@XZ$5
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioItemRight@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioItemRight@@QAE@XZ PROC				; ioItemRight::ioItemRight, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioItemRight@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioItemRight@@6B@
  00020	ff d7		 call	 edi
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00029	ff d7		 call	 edi
  0002b	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0002e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00032	ff d7		 call	 edi
  00034	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00037	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0003b	ff d7		 call	 edi
  0003d	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00040	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00044	ff d7		 call	 edi
  00046	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00049	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0004d	ff d7		 call	 edi
  0004f	8d 4e 78	 lea	 ecx, DWORD PTR [esi+120]
  00052	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00056	ff d7		 call	 edi

; 9    : 	m_iLevel = -1;

  00058	83 4e 04 ff	 or	 DWORD PTR [esi+4], -1

; 10   : 	m_dwRightCode = 0;

  0005c	83 66 08 00	 and	 DWORD PTR [esi+8], 0

; 11   : 	m_RightState = RS_LOCKED;

  00060	c7 46 10 02 00
	00 00		 mov	 DWORD PTR [esi+16], 2

; 12   : }

  00067	8b c6		 mov	 eax, esi
  00069	e8 00 00 00 00	 call	 __EH_epilog3
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioItemRight@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioItemRight@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 28	 add	 ecx, 40			; 00000028H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioItemRight@@QAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 38	 add	 ecx, 56			; 00000038H
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioItemRight@@QAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 48	 add	 ecx, 72			; 00000048H
  0002a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioItemRight@@QAE@XZ$4:
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 58	 add	 ecx, 88			; 00000058H
  00036	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioItemRight@@QAE@XZ$5:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 68	 add	 ecx, 104		; 00000068H
  00042	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioItemRight@@QAE@XZ:
  00048	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00052	33 c8		 xor	 ecx, eax
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioItemRight@@QAE@XZ
  0005e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioItemRight@@QAE@XZ ENDP				; ioItemRight::ioItemRight
PUBLIC	??1ioItemRight@@UAE@XZ				; ioItemRight::~ioItemRight
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioItemRight@@UAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1ioItemRight@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioItemRight@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioItemRight@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioItemRight@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioItemRight@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioItemRight@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioItemRight@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioItemRight@@UAE@XZ$5
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioItemRight@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioItemRight@@UAE@XZ PROC				; ioItemRight::~ioItemRight, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioItemRight@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ioItemRight@@6B@

; 16   : }

  00017	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 4f 78	 lea	 ecx, DWORD PTR [edi+120]
  00020	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00027	ff d6		 call	 esi
  00029	8d 4f 68	 lea	 ecx, DWORD PTR [edi+104]
  0002c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00030	ff d6		 call	 esi
  00032	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  00035	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00039	ff d6		 call	 esi
  0003b	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
  0003e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00042	ff d6		 call	 esi
  00044	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004b	ff d6		 call	 esi
  0004d	8d 4f 28	 lea	 ecx, DWORD PTR [edi+40]
  00050	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00054	ff d6		 call	 esi
  00056	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0005d	ff d6		 call	 esi
  0005f	e8 00 00 00 00	 call	 __EH_epilog3
  00064	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioItemRight@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioItemRight@@UAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 28	 add	 ecx, 40			; 00000028H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioItemRight@@UAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 38	 add	 ecx, 56			; 00000038H
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioItemRight@@UAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 48	 add	 ecx, 72			; 00000048H
  0002a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioItemRight@@UAE@XZ$4:
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 58	 add	 ecx, 88			; 00000058H
  00036	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioItemRight@@UAE@XZ$5:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 68	 add	 ecx, 104		; 00000068H
  00042	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioItemRight@@UAE@XZ:
  00048	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00052	33 c8		 xor	 ecx, eax
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioItemRight@@UAE@XZ
  0005e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioItemRight@@UAE@XZ ENDP				; ioItemRight::~ioItemRight
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?IsRightValid@ioItemRight@@UBE_NXZ
_TEXT	SEGMENT
?IsRightValid@ioItemRight@@UBE_NXZ PROC			; ioItemRight::IsRightValid, COMDAT
; _this$ = ecx

; 20   : 	if( m_iLevel == -1 )

  00000	83 79 04 ff	 cmp	 DWORD PTR [ecx+4], -1

; 21   : 		return false;

  00004	74 16		 je	 SHORT $LN1@IsRightVal

; 22   : 
; 23   : 	if( m_dwRightCode != 0 && !m_Name.IsEmpty() )

  00006	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0000a	74 10		 je	 SHORT $LN1@IsRightVal
  0000c	83 c1 18	 add	 ecx, 24			; 00000018H
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00015	84 c0		 test	 al, al
  00017	75 03		 jne	 SHORT $LN1@IsRightVal

; 24   : 		return true;

  00019	fe c0		 inc	 al

; 27   : }

  0001b	c3		 ret	 0
$LN1@IsRightVal:

; 25   : 
; 26   : 	return false;

  0001c	32 c0		 xor	 al, al

; 27   : }

  0001e	c3		 ret	 0
?IsRightValid@ioItemRight@@UBE_NXZ ENDP			; ioItemRight::IsRightValid
_TEXT	ENDS
PUBLIC	?SetRightState@ioItemRight@@QAEXW4RightState@1@@Z ; ioItemRight::SetRightState
; Function compile flags: /Ogsp
;	COMDAT ?SetRightState@ioItemRight@@QAEXW4RightState@1@@Z
_TEXT	SEGMENT
_eState$ = 8						; size = 4
?SetRightState@ioItemRight@@QAEXW4RightState@1@@Z PROC	; ioItemRight::SetRightState, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 	m_RightState = eState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _eState$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 77   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetRightState@ioItemRight@@QAEXW4RightState@1@@Z ENDP	; ioItemRight::SetRightState
_TEXT	ENDS
PUBLIC	?HasDescImage@ioItemRight@@QBE_NXZ		; ioItemRight::HasDescImage
; Function compile flags: /Ogsp
;	COMDAT ?HasDescImage@ioItemRight@@QBE_NXZ
_TEXT	SEGMENT
?HasDescImage@ioItemRight@@QBE_NXZ PROC			; ioItemRight::HasDescImage, COMDAT
; _this$ = ecx

; 80   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 81   : 	if( !m_DescImageSet.IsEmpty() && !m_DescImageName.IsEmpty() )

  00003	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0000c	84 c0		 test	 al, al
  0000e	75 11		 jne	 SHORT $LN1@HasDescIma
  00010	8d 4e 78	 lea	 ecx, DWORD PTR [esi+120]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00019	84 c0		 test	 al, al
  0001b	75 04		 jne	 SHORT $LN1@HasDescIma

; 82   : 		return true;

  0001d	fe c0		 inc	 al
  0001f	5e		 pop	 esi

; 85   : }

  00020	c3		 ret	 0
$LN1@HasDescIma:

; 83   : 
; 84   : 	return false;

  00021	32 c0		 xor	 al, al
  00023	5e		 pop	 esi

; 85   : }

  00024	c3		 ret	 0
?HasDescImage@ioItemRight@@QBE_NXZ ENDP			; ioItemRight::HasDescImage
_TEXT	ENDS
PUBLIC	?CreateDescImage@ioItemRight@@QBEPAVioUIRenderImage@@XZ ; ioItemRight::CreateDescImage
EXTRN	__imp_?CreateImage@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@0_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?CreateDescImage@ioItemRight@@QBEPAVioUIRenderImage@@XZ
_TEXT	SEGMENT
?CreateDescImage@ioItemRight@@QBEPAVioUIRenderImage@@XZ PROC ; ioItemRight::CreateDescImage, COMDAT
; _this$ = ecx

; 88   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 89   : 	if( HasDescImage() )

  00003	e8 00 00 00 00	 call	 ?HasDescImage@ioItemRight@@QBE_NXZ ; ioItemRight::HasDescImage
  00008	84 c0		 test	 al, al
  0000a	74 1a		 je	 SHORT $LN1@CreateDesc

; 90   : 		return g_UIImageSetMgr.CreateImage( m_DescImageSet, m_DescImageName );

  0000c	8d 46 78	 lea	 eax, DWORD PTR [esi+120]
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	83 c6 68	 add	 esi, 104		; 00000068H
  00015	56		 push	 esi
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImage@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@0_N@Z
  00024	5e		 pop	 esi

; 93   : }

  00025	c3		 ret	 0
$LN1@CreateDesc:

; 91   : 	
; 92   : 	return NULL;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 93   : }

  00029	c3		 ret	 0
?CreateDescImage@ioItemRight@@QBEPAVioUIRenderImage@@XZ ENDP ; ioItemRight::CreateDescImage
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetMoney@ioMyInfo@@QBE_JXZ			; ioMyInfo::GetMoney
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetMoney@ioMyInfo@@QBE_JXZ
_TEXT	SEGMENT
?GetMoney@ioMyInfo@@QBE_JXZ PROC			; ioMyInfo::GetMoney, COMDAT
; _this$ = ecx

; 545  : 	__int64 GetMoney() const { return m_user_data.m_money; }

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00006	c3		 ret	 0
?GetMoney@ioMyInfo@@QBE_JXZ ENDP			; ioMyInfo::GetMoney
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioItemRight@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioItemRight@@UAEPAXI@Z PROC				; ioItemRight::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioItemRight@@UAE@XZ	; ioItemRight::~ioItemRight
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioItemRight@@UAEPAXI@Z ENDP				; ioItemRight::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BP@GGMKMECG@ioItemRight?3?3CheckPreCondition?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	?SetMsgBox@ioSP2GUIManager@@QAEXHPAVioWnd@@PBDH@Z:PROC ; ioSP2GUIManager::SetMsgBox
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
;	COMDAT ??_C@_0BP@GGMKMECG@ioItemRight?3?3CheckPreCondition?$AA@
CONST	SEGMENT
??_C@_0BP@GGMKMECG@ioItemRight?3?3CheckPreCondition?$AA@ DB 'ioItemRight:'
	DB	':CheckPreCondition', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitemright.cpp
CONST	ENDS
;	COMDAT ?CheckPreCondition@ioItemRight@@UBE_NPAVioWnd@@@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
?CheckPreCondition@ioItemRight@@UBE_NPAVioWnd@@@Z PROC	; ioItemRight::CheckPreCondition, COMDAT
; _this$ = ecx

; 60   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 61   : 	if( m_dwPreConditionCode == 0 )

  00003	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00007	75 04		 jne	 SHORT $LN2@CheckPreCo

; 62   : 		return true;

  00009	b0 01		 mov	 al, 1
  0000b	eb 54		 jmp	 SHORT $LN3@CheckPreCo
$LN2@CheckPreCo:

; 63   : 
; 64   : 	if( m_iSpendPeso > g_MyInfo.GetMoney())

  0000d	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00012	8b c8		 mov	 ecx, eax
  00014	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00017	99		 cdq
  00018	3b 51 34	 cmp	 edx, DWORD PTR [ecx+52]
  0001b	7c 42		 jl	 SHORT $LN1@CheckPreCo
  0001d	7f 05		 jg	 SHORT $LN9@CheckPreCo
  0001f	3b 41 30	 cmp	 eax, DWORD PTR [ecx+48]
  00022	76 3b		 jbe	 SHORT $LN1@CheckPreCo
$LN9@CheckPreCo:

; 65   : 	{
; 66   : 		int iTemp = (int)g_MyInfo.GetMoney();

  00024	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00029	8b 40 30	 mov	 eax, DWORD PTR [eax+48]

; 67   : 		g_GUIMgr.SetMsgBox( MB_OK, NULL, STR(1), m_iSpendPeso-iTemp);

  0002c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002f	2b c8		 sub	 ecx, eax
  00031	51		 push	 ecx
  00032	6a 00		 push	 0
  00034	6a 01		 push	 1
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GGMKMECG@ioItemRight?3?3CheckPreCondition?$AA@
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00046	8b c8		 mov	 ecx, eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?SetMsgBox@ioSP2GUIManager@@QAEXHPAVioWnd@@PBDH@Z ; ioSP2GUIManager::SetMsgBox
$LN1@CheckPreCo:

; 68   : 		return false;
; 69   : 	}
; 70   : 
; 71   : 	return false;

  0005f	32 c0		 xor	 al, al
$LN3@CheckPreCo:
  00061	5e		 pop	 esi

; 72   : }

  00062	c2 04 00	 ret	 4
?CheckPreCondition@ioItemRight@@UBE_NPAVioWnd@@@Z ENDP	; ioItemRight::CheckPreCondition
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$05@ioINILoader@@QAEHAAY05$$CBDH@Z	; ioINILoader::LoadInt_e<6>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$05@ioINILoader@@QAEHAAY05$$CBDH@Z
_TEXT	SEGMENT
__k$ = -16						; size = 6
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$05@ioINILoader@@QAEHAAY05$$CBDH@Z PROC	; ioINILoader::LoadInt_e<6>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 a9 00 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 f0	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 92 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 f1	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	74 7f		 je	 SHORT $LN94@LoadInt_e
  0003b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0003e	88 55 f2	 mov	 BYTE PTR __k$[ebp+2], dl
  00041	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00044	84 d2		 test	 dl, dl
  00046	74 6c		 je	 SHORT $LN93@LoadInt_e
  00048	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004b	88 55 f3	 mov	 BYTE PTR __k$[ebp+3], dl
  0004e	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00051	84 d2		 test	 dl, dl
  00053	74 59		 je	 SHORT $LN92@LoadInt_e
  00055	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00058	80 78 05 00	 cmp	 BYTE PTR [eax+5], 0
  0005c	88 55 f4	 mov	 BYTE PTR __k$[ebp+4], dl
  0005f	74 69		 je	 SHORT $LN1@LoadInt_e
  00061	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00064	84 d2		 test	 dl, dl
  00066	74 40		 je	 SHORT $LN90@LoadInt_e
  00068	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0006b	88 55 f6	 mov	 BYTE PTR __k$[ebp+6], dl
  0006e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00071	84 d2		 test	 dl, dl
  00073	74 2d		 je	 SHORT $LN89@LoadInt_e
  00075	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00078	88 55 f7	 mov	 BYTE PTR __k$[ebp+7], dl
  0007b	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0007e	84 d2		 test	 dl, dl
  00080	74 1a		 je	 SHORT $LN88@LoadInt_e
  00082	8a 40 09	 mov	 al, BYTE PTR [eax+9]
  00085	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00088	88 55 f8	 mov	 BYTE PTR __k$[ebp+8], dl
  0008b	84 c0		 test	 al, al
  0008d	74 07		 je	 SHORT $LN87@LoadInt_e
  0008f	34 ec		 xor	 al, -20			; ffffffecH
  00091	88 45 f9	 mov	 BYTE PTR __k$[ebp+9], al
  00094	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00096	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0009a	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  0009c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000a0	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  000a2	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000a6	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  000a8	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000ac	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  000ae	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000b2	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  000b4	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000b8	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  000ba	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  000be	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  000c0	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  000c4	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  000c6	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:

; 120  : 		return LoadInt(_k, i);

  000ca	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  000cd	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __k$[ebp], -353637139 ; eaebecedH
  000d4	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000d8	8d 45 f0	 lea	 eax, DWORD PTR __k$[ebp]
  000db	50		 push	 eax
  000dc	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+5], 0
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	c9		 leave
  000f1	c2 08 00	 ret	 8
??$LoadInt_e@$05@ioINILoader@@QAEHAAY05$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<6>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$04@ioINILoader@@QAEHAAY04$$CBDH@Z	; ioINILoader::LoadInt_e<5>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$04@ioINILoader@@QAEHAAY04$$CBDH@Z
_TEXT	SEGMENT
__k$ = -16						; size = 5
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$04@ioINILoader@@QAEHAAY04$$CBDH@Z PROC	; ioINILoader::LoadInt_e<5>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 92 00 00
	00		 je	 $LN96@LoadInt_e@2
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 f0	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	74 7f		 je	 SHORT $LN95@LoadInt_e@2
  0002a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0002d	88 55 f1	 mov	 BYTE PTR __k$[ebp+1], dl
  00030	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00033	84 d2		 test	 dl, dl
  00035	74 6c		 je	 SHORT $LN94@LoadInt_e@2
  00037	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0003a	88 55 f2	 mov	 BYTE PTR __k$[ebp+2], dl
  0003d	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00040	84 d2		 test	 dl, dl
  00042	74 59		 je	 SHORT $LN93@LoadInt_e@2
  00044	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00047	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  0004b	88 55 f3	 mov	 BYTE PTR __k$[ebp+3], dl
  0004e	74 63		 je	 SHORT $LN1@LoadInt_e@2
  00050	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00053	84 d2		 test	 dl, dl
  00055	74 40		 je	 SHORT $LN91@LoadInt_e@2
  00057	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0005a	88 55 f5	 mov	 BYTE PTR __k$[ebp+5], dl
  0005d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00060	84 d2		 test	 dl, dl
  00062	74 2d		 je	 SHORT $LN90@LoadInt_e@2
  00064	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00067	88 55 f6	 mov	 BYTE PTR __k$[ebp+6], dl
  0006a	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0006d	84 d2		 test	 dl, dl
  0006f	74 1a		 je	 SHORT $LN89@LoadInt_e@2
  00071	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  00074	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00077	88 55 f7	 mov	 BYTE PTR __k$[ebp+7], dl
  0007a	84 c0		 test	 al, al
  0007c	74 07		 je	 SHORT $LN88@LoadInt_e@2
  0007e	34 ed		 xor	 al, -19			; ffffffedH
  00080	88 45 f8	 mov	 BYTE PTR __k$[ebp+8], al
  00083	eb 2e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00085	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00089	eb 28		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0008b	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0008f	eb 22		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00091	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00095	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00097	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0009b	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0009d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000a1	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  000a3	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  000a7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  000a9	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  000ad	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  000af	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:

; 120  : 		return LoadInt(_k, i);

  000b3	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  000b6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __k$[ebp], -353637139 ; eaebecedH
  000bd	8d 45 f0	 lea	 eax, DWORD PTR __k$[ebp]
  000c0	50		 push	 eax
  000c1	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+4], 0
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	c9		 leave
  000d6	c2 08 00	 ret	 8
??$LoadInt_e@$04@ioINILoader@@QAEHAAY04$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<5>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ; ioINILoader::LoadInt_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<16>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadInt_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadInt_e@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadInt_e@3
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadInt_e@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadInt_e@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadInt_e@3
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadInt_e@3
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadInt_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadInt_e@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadInt_e@3
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadInt_e@3
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadInt_e@3
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadInt_e@3
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadInt_e@3
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadInt_e@3
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadInt_e@3
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadInt_e@3
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadInt_e@3
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadInt_e@3:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadInt_e@3:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadInt_e@3:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  001e6	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e9	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ec	50		 push	 eax
  001ed	8b ce		 mov	 ecx, esi
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5e		 pop	 esi
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	c9		 leave
  00201	c2 08 00	 ret	 8
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z ; ioINILoader::LoadInt_e<11>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<11>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadInt_e@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadInt_e@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadInt_e@4
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadInt_e@4
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadInt_e@4
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadInt_e@4
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadInt_e@4
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadInt_e@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadInt_e@4
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadInt_e@4
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadInt_e@4
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadInt_e@4
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadInt_e@4
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadInt_e@4
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadInt_e@4
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN83@LoadInt_e@4:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadInt_e@4:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadInt_e@4
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadInt_e@4:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadInt_e@4
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadInt_e@4:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  0017e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00181	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00184	50		 push	 eax
  00185	8b ce		 mov	 ecx, esi
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0018d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00190	33 cd		 xor	 ecx, ebp
  00192	5e		 pop	 esi
  00193	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00198	c9		 leave
  00199	c2 08 00	 ret	 8
??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$04@ioINILoader@@QAEXAAY04$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<5>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$04@ioINILoader@@QAEXAAY04$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -16						; size = 5
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$04@ioINILoader@@QAEXAAY04$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<5>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	84 d2		 test	 dl, dl
  0001f	0f 84 92 00 00
	00		 je	 $LN96@LoadString
  00025	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00028	88 55 f0	 mov	 BYTE PTR __k$[ebp], dl
  0002b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002e	84 d2		 test	 dl, dl
  00030	74 7f		 je	 SHORT $LN95@LoadString
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 f1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	74 6c		 je	 SHORT $LN94@LoadString
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 f2	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	74 59		 je	 SHORT $LN93@LoadString
  0004c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004f	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  00053	88 55 f3	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	74 63		 je	 SHORT $LN1@LoadString
  00058	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0005b	84 d2		 test	 dl, dl
  0005d	74 40		 je	 SHORT $LN91@LoadString
  0005f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00062	88 55 f5	 mov	 BYTE PTR __k$[ebp+5], dl
  00065	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00068	84 d2		 test	 dl, dl
  0006a	74 2d		 je	 SHORT $LN90@LoadString
  0006c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0006f	88 55 f6	 mov	 BYTE PTR __k$[ebp+6], dl
  00072	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00075	84 d2		 test	 dl, dl
  00077	74 1a		 je	 SHORT $LN89@LoadString
  00079	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  0007c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0007f	88 55 f7	 mov	 BYTE PTR __k$[ebp+7], dl
  00082	84 c0		 test	 al, al
  00084	74 07		 je	 SHORT $LN88@LoadString
  00086	34 ed		 xor	 al, -19			; ffffffedH
  00088	88 45 f8	 mov	 BYTE PTR __k$[ebp+8], al
  0008b	eb 2e		 jmp	 SHORT $LN1@LoadString
$LN88@LoadString:
  0008d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00091	eb 28		 jmp	 SHORT $LN1@LoadString
$LN89@LoadString:
  00093	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00097	eb 22		 jmp	 SHORT $LN1@LoadString
$LN90@LoadString:
  00099	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0009d	eb 1c		 jmp	 SHORT $LN1@LoadString
$LN91@LoadString:
  0009f	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000a3	eb 16		 jmp	 SHORT $LN1@LoadString
$LN93@LoadString:
  000a5	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000a9	eb 10		 jmp	 SHORT $LN1@LoadString
$LN94@LoadString:
  000ab	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  000af	eb 0a		 jmp	 SHORT $LN1@LoadString
$LN95@LoadString:
  000b1	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  000b5	eb 04		 jmp	 SHORT $LN1@LoadString
$LN96@LoadString:
  000b7	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString:

; 163  : 		LoadString(_k, d, b, i);

  000bb	ff 75 14	 push	 DWORD PTR _i$[ebp]
  000be	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __k$[ebp], -353637139 ; eaebecedH
  000c5	57		 push	 edi
  000c6	56		 push	 esi
  000c7	8d 45 f0	 lea	 eax, DWORD PTR __k$[ebp]
  000ca	50		 push	 eax
  000cb	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+4], 0
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  000d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d8	5f		 pop	 edi
  000d9	33 cd		 xor	 ecx, ebp
  000db	5e		 pop	 esi
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	c9		 leave
  000e2	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$04@ioINILoader@@QAEXAAY04$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<5>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<10>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<10>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	84 d2		 test	 dl, dl
  0001f	0f 84 0d 01 00
	00		 je	 $LN96@LoadString@2
  00025	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00028	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002e	84 d2		 test	 dl, dl
  00030	0f 84 f6 00 00
	00		 je	 $LN95@LoadString@2
  00036	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00039	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003c	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 df 00 00
	00		 je	 $LN94@LoadString@2
  00047	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004a	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004d	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 c8 00 00
	00		 je	 $LN93@LoadString@2
  00058	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005b	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005e	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 b1 00 00
	00		 je	 $LN92@LoadString@2
  00069	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006c	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006f	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 9a 00 00
	00		 je	 $LN91@LoadString@2
  0007a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007d	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00080	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00083	84 d2		 test	 dl, dl
  00085	0f 84 83 00 00
	00		 je	 $LN90@LoadString@2
  0008b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00091	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00094	84 d2		 test	 dl, dl
  00096	74 70		 je	 SHORT $LN89@LoadString@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	74 5d		 je	 SHORT $LN88@LoadString@2
  000a5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a8	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000ac	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	0f 84 81 00 00
	00		 je	 $LN1@LoadString@2
  000b5	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b8	84 d2		 test	 dl, dl
  000ba	74 40		 je	 SHORT $LN86@LoadString@2
  000bc	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000bf	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c2	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c5	84 d2		 test	 dl, dl
  000c7	74 2d		 je	 SHORT $LN85@LoadString@2
  000c9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cc	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 1a		 je	 SHORT $LN84@LoadString@2
  000d6	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000dc	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000df	84 c0		 test	 al, al
  000e1	74 07		 je	 SHORT $LN83@LoadString@2
  000e3	34 ec		 xor	 al, -20			; ffffffecH
  000e5	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e8	eb 4c		 jmp	 SHORT $LN1@LoadString@2
$LN83@LoadString@2:
  000ea	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000ee	eb 46		 jmp	 SHORT $LN1@LoadString@2
$LN84@LoadString@2:
  000f0	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000f4	eb 40		 jmp	 SHORT $LN1@LoadString@2
$LN85@LoadString@2:
  000f6	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000fa	eb 3a		 jmp	 SHORT $LN1@LoadString@2
$LN86@LoadString@2:
  000fc	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00100	eb 34		 jmp	 SHORT $LN1@LoadString@2
$LN88@LoadString@2:
  00102	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00106	eb 2e		 jmp	 SHORT $LN1@LoadString@2
$LN89@LoadString@2:
  00108	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0010c	eb 28		 jmp	 SHORT $LN1@LoadString@2
$LN90@LoadString@2:
  0010e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00112	eb 22		 jmp	 SHORT $LN1@LoadString@2
$LN91@LoadString@2:
  00114	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00118	eb 1c		 jmp	 SHORT $LN1@LoadString@2
$LN92@LoadString@2:
  0011a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0011e	eb 16		 jmp	 SHORT $LN1@LoadString@2
$LN93@LoadString@2:
  00120	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00124	eb 10		 jmp	 SHORT $LN1@LoadString@2
$LN94@LoadString@2:
  00126	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0012a	eb 0a		 jmp	 SHORT $LN1@LoadString@2
$LN95@LoadString@2:
  0012c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00130	eb 04		 jmp	 SHORT $LN1@LoadString@2
$LN96@LoadString@2:
  00132	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString@2:
  00136	6a 02		 push	 2
  00138	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0013b	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  0013f	5a		 pop	 edx
$LL104@LoadString@2:
  00140	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00146	83 c0 04	 add	 eax, 4
  00149	4a		 dec	 edx
  0014a	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  0014c	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0014f	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00153	57		 push	 edi
  00154	56		 push	 esi
  00155	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00158	50		 push	 eax
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$09@ioINILoader@@QAEXAAY09$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<10>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<15>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 75 01 00
	00		 je	 $LN96@LoadString@3
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 5e 01 00
	00		 je	 $LN95@LoadString@3
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 46 01 00
	00		 je	 $LN94@LoadString@3
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 2f 01 00
	00		 je	 $LN93@LoadString@3
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 18 01 00
	00		 je	 $LN92@LoadString@3
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 02 01 00
	00		 je	 $LN91@LoadString@3
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 ec 00 00
	00		 je	 $LN90@LoadString@3
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 d5 00 00
	00		 je	 $LN89@LoadString@3
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 be 00 00
	00		 je	 $LN88@LoadString@3
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 a8 00 00
	00		 je	 $LN87@LoadString@3
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 92 00 00
	00		 je	 $LN86@LoadString@3
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 7f		 je	 SHORT $LN85@LoadString@3
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 6c		 je	 SHORT $LN84@LoadString@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	74 5a		 je	 SHORT $LN83@LoadString@3
  000f8	32 d1		 xor	 dl, cl
  000fa	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000fe	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	0f 84 9a 00 00
	00		 je	 $LN111@LoadString@3
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 3e		 je	 SHORT $LN81@LoadString@3
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 2b		 je	 SHORT $LN80@LoadString@3
  0011b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011e	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00121	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00124	84 d2		 test	 dl, dl
  00126	74 19		 je	 SHORT $LN79@LoadString@3
  00128	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  0012b	32 d1		 xor	 dl, cl
  0012d	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00130	84 c0		 test	 al, al
  00132	74 07		 je	 SHORT $LN78@LoadString@3
  00134	34 eb		 xor	 al, -21			; ffffffebH
  00136	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00139	eb 66		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  0013b	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  0013f	eb 60		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  00141	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  00144	eb 5b		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  00146	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0014a	eb 55		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  0014c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00150	eb 4f		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  00152	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  00155	eb 4a		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  00157	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0015b	eb 44		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  0015d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00161	eb 3e		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  00163	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00167	eb 38		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  00169	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0016c	eb 33		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  0016e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00172	eb 2d		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  00174	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00178	eb 27		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  0017a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0017e	eb 21		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  00180	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00183	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  00185	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00189	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  0018b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0018f	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  00191	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00195	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  00197	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0019b	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  0019d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  001a1	6a 03		 push	 3
  001a3	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a6	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001aa	5a		 pop	 edx
$LL104@LoadString@3:
  001ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b1	83 c0 04	 add	 eax, 4
  001b4	4a		 dec	 edx
  001b5	75 f4		 jne	 SHORT $LL104@LoadString@3
  001b7	6a 0c		 push	 12			; 0000000cH
  001b9	58		 pop	 eax
$LL101@LoadString@3:
  001ba	8b c8		 mov	 ecx, eax
  001bc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001c2	79 05		 jns	 SHORT $LN112@LoadString@3
  001c4	49		 dec	 ecx
  001c5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c8	41		 inc	 ecx
$LN112@LoadString@3:
  001c9	b2 ed		 mov	 dl, -19			; ffffffedH
  001cb	2a d1		 sub	 dl, cl
  001cd	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001d1	40		 inc	 eax
  001d2	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001d5	7c e3		 jl	 SHORT $LL101@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  001d7	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001da	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001dd	57		 push	 edi
  001de	56		 push	 esi
  001df	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	5f		 pop	 edi
  001ed	33 cd		 xor	 ecx, ebp
  001ef	5e		 pop	 esi
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	c9		 leave
  001f6	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<15>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<16>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 8c 01 00
	00		 je	 $LN96@LoadString@4
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 75 01 00
	00		 je	 $LN95@LoadString@4
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 5e 01 00
	00		 je	 $LN94@LoadString@4
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 46 01 00
	00		 je	 $LN93@LoadString@4
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 2f 01 00
	00		 je	 $LN92@LoadString@4
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 18 01 00
	00		 je	 $LN91@LoadString@4
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 02 01 00
	00		 je	 $LN90@LoadString@4
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ec 00 00
	00		 je	 $LN89@LoadString@4
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 d5 00 00
	00		 je	 $LN88@LoadString@4
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 be 00 00
	00		 je	 $LN87@LoadString@4
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 a8 00 00
	00		 je	 $LN86@LoadString@4
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 92 00 00
	00		 je	 $LN85@LoadString@4
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	74 7f		 je	 SHORT $LN84@LoadString@4
  000ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f8	84 d2		 test	 dl, dl
  000fa	74 6c		 je	 SHORT $LN83@LoadString@4
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	74 5a		 je	 SHORT $LN82@LoadString@4
  00109	32 d1		 xor	 dl, cl
  0010b	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  0010f	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	0f 84 a0 00 00
	00		 je	 $LN111@LoadString@4
  00118	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0011b	84 d2		 test	 dl, dl
  0011d	74 3e		 je	 SHORT $LN80@LoadString@4
  0011f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00122	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 2b		 je	 SHORT $LN79@LoadString@4
  0012c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0012f	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00132	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00135	84 d2		 test	 dl, dl
  00137	74 19		 je	 SHORT $LN78@LoadString@4
  00139	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  0013c	32 d1		 xor	 dl, cl
  0013e	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00141	84 c0		 test	 al, al
  00143	74 07		 je	 SHORT $LN77@LoadString@4
  00145	34 ea		 xor	 al, -22			; ffffffeaH
  00147	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  0014a	eb 6c		 jmp	 SHORT $LN111@LoadString@4
$LN77@LoadString@4:
  0014c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00150	eb 66		 jmp	 SHORT $LN111@LoadString@4
$LN78@LoadString@4:
  00152	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  00155	eb 61		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  00157	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0015b	eb 5b		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  0015d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00161	eb 55		 jmp	 SHORT $LN111@LoadString@4
$LN82@LoadString@4:
  00163	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00166	eb 50		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  00168	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0016c	eb 4a		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  0016e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00172	eb 44		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  00174	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00178	eb 3e		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  0017a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0017d	eb 39		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  0017f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00183	eb 33		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  00185	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00189	eb 2d		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  0018b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0018f	eb 27		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  00191	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00194	eb 22		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  00196	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0019a	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  0019c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001a0	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  001a2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001a6	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  001a8	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ac	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  001ae	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001b2	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  001b4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  001b8	6a 03		 push	 3
  001ba	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001bd	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001c1	5a		 pop	 edx
$LL104@LoadString@4:
  001c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c8	83 c0 04	 add	 eax, 4
  001cb	4a		 dec	 edx
  001cc	75 f4		 jne	 SHORT $LL104@LoadString@4
  001ce	6a 0c		 push	 12			; 0000000cH
  001d0	58		 pop	 eax
$LL101@LoadString@4:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN112@LoadString@4
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN112@LoadString@4:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ec	7c e3		 jl	 SHORT $LL101@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  001ee	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	56		 push	 esi
  001f6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	5f		 pop	 edi
  00204	33 cd		 xor	 ecx, ebp
  00206	5e		 pop	 esi
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	c9		 leave
  0020d	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<11>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<11>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	84 d2		 test	 dl, dl
  00020	0f 84 1b 01 00
	00		 je	 $LN96@LoadString@5
  00026	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00029	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002f	84 d2		 test	 dl, dl
  00031	0f 84 04 01 00
	00		 je	 $LN95@LoadString@5
  00037	b3 ec		 mov	 bl, -20			; ffffffecH
  00039	32 d3		 xor	 dl, bl
  0003b	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003e	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00041	84 d2		 test	 dl, dl
  00043	0f 84 ec 00 00
	00		 je	 $LN94@LoadString@5
  00049	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004c	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004f	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00052	84 d2		 test	 dl, dl
  00054	0f 84 d5 00 00
	00		 je	 $LN93@LoadString@5
  0005a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005d	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00060	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00063	84 d2		 test	 dl, dl
  00065	0f 84 be 00 00
	00		 je	 $LN92@LoadString@5
  0006b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006e	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00071	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00074	84 d2		 test	 dl, dl
  00076	0f 84 a8 00 00
	00		 je	 $LN91@LoadString@5
  0007c	32 d3		 xor	 dl, bl
  0007e	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00081	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00084	84 d2		 test	 dl, dl
  00086	0f 84 92 00 00
	00		 je	 $LN90@LoadString@5
  0008c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008f	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00092	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00095	84 d2		 test	 dl, dl
  00097	74 7f		 je	 SHORT $LN89@LoadString@5
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 6c		 je	 SHORT $LN88@LoadString@5
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5a		 je	 SHORT $LN87@LoadString@5
  000b3	32 d3		 xor	 dl, bl
  000b5	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bc	0f 84 83 00 00
	00		 je	 $LN1@LoadString@5
  000c2	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c5	84 d2		 test	 dl, dl
  000c7	74 3e		 je	 SHORT $LN85@LoadString@5
  000c9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cc	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 2b		 je	 SHORT $LN84@LoadString@5
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 19		 je	 SHORT $LN83@LoadString@5
  000e3	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e6	32 d3		 xor	 dl, bl
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadString@5
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 4f		 jmp	 SHORT $LN1@LoadString@5
$LN82@LoadString@5:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 49		 jmp	 SHORT $LN1@LoadString@5
$LN83@LoadString@5:
  000fc	88 5d f9	 mov	 BYTE PTR __k$[ebp+13], bl
  000ff	eb 44		 jmp	 SHORT $LN1@LoadString@5
$LN84@LoadString@5:
  00101	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00105	eb 3e		 jmp	 SHORT $LN1@LoadString@5
$LN85@LoadString@5:
  00107	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010b	eb 38		 jmp	 SHORT $LN1@LoadString@5
$LN87@LoadString@5:
  0010d	88 5d f5	 mov	 BYTE PTR __k$[ebp+9], bl
  00110	eb 33		 jmp	 SHORT $LN1@LoadString@5
$LN88@LoadString@5:
  00112	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00116	eb 2d		 jmp	 SHORT $LN1@LoadString@5
$LN89@LoadString@5:
  00118	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011c	eb 27		 jmp	 SHORT $LN1@LoadString@5
$LN90@LoadString@5:
  0011e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00122	eb 21		 jmp	 SHORT $LN1@LoadString@5
$LN91@LoadString@5:
  00124	88 5d f1	 mov	 BYTE PTR __k$[ebp+5], bl
  00127	eb 1c		 jmp	 SHORT $LN1@LoadString@5
$LN92@LoadString@5:
  00129	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0012d	eb 16		 jmp	 SHORT $LN1@LoadString@5
$LN93@LoadString@5:
  0012f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00133	eb 10		 jmp	 SHORT $LN1@LoadString@5
$LN94@LoadString@5:
  00135	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00139	eb 0a		 jmp	 SHORT $LN1@LoadString@5
$LN95@LoadString@5:
  0013b	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0013f	eb 04		 jmp	 SHORT $LN1@LoadString@5
$LN96@LoadString@5:
  00141	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString@5:
  00145	6a 02		 push	 2
  00147	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014a	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  0014e	5a		 pop	 edx
$LL104@LoadString@5:
  0014f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00155	83 c0 04	 add	 eax, 4
  00158	4a		 dec	 edx
  00159	75 f4		 jne	 SHORT $LL104@LoadString@5
  0015b	6a 08		 push	 8
  0015d	58		 pop	 eax
$LL101@LoadString@5:
  0015e	8b d0		 mov	 edx, eax
  00160	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  00166	79 05		 jns	 SHORT $LN111@LoadString@5
  00168	4a		 dec	 edx
  00169	83 ca fc	 or	 edx, -4			; fffffffcH
  0016c	42		 inc	 edx
$LN111@LoadString@5:
  0016d	b3 ed		 mov	 bl, -19			; ffffffedH
  0016f	2a da		 sub	 bl, dl
  00171	30 5c 05 ec	 xor	 BYTE PTR __k$[ebp+eax], bl
  00175	40		 inc	 eax
  00176	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00179	7c e3		 jl	 SHORT $LL101@LoadString@5

; 163  : 		LoadString(_k, d, b, i);

  0017b	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0017e	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00181	57		 push	 edi
  00182	56		 push	 esi
  00183	50		 push	 eax
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	33 cd		 xor	 ecx, ebp
  00191	5b		 pop	 ebx
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	c9		 leave
  00198	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<11>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<12>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<12>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 32 01 00
	00		 je	 $LN96@LoadString@6
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 1b 01 00
	00		 je	 $LN95@LoadString@6
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 04 01 00
	00		 je	 $LN94@LoadString@6
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 ec 00 00
	00		 je	 $LN93@LoadString@6
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 d5 00 00
	00		 je	 $LN92@LoadString@6
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 be 00 00
	00		 je	 $LN91@LoadString@6
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 a8 00 00
	00		 je	 $LN90@LoadString@6
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 92 00 00
	00		 je	 $LN89@LoadString@6
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	74 7f		 je	 SHORT $LN88@LoadString@6
  000ac	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000af	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b2	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b5	84 d2		 test	 dl, dl
  000b7	74 6c		 je	 SHORT $LN87@LoadString@6
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	74 5a		 je	 SHORT $LN86@LoadString@6
  000c6	32 d1		 xor	 dl, cl
  000c8	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000cc	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	0f 84 89 00 00
	00		 je	 $LN111@LoadString@6
  000d5	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d8	84 d2		 test	 dl, dl
  000da	74 3e		 je	 SHORT $LN84@LoadString@6
  000dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000df	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 2b		 je	 SHORT $LN83@LoadString@6
  000e9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ec	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000ef	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f2	84 d2		 test	 dl, dl
  000f4	74 19		 je	 SHORT $LN82@LoadString@6
  000f6	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f9	32 d1		 xor	 dl, cl
  000fb	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000fe	84 c0		 test	 al, al
  00100	74 07		 je	 SHORT $LN81@LoadString@6
  00102	34 ea		 xor	 al, -22			; ffffffeaH
  00104	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  00107	eb 55		 jmp	 SHORT $LN111@LoadString@6
$LN81@LoadString@6:
  00109	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0010d	eb 4f		 jmp	 SHORT $LN111@LoadString@6
$LN82@LoadString@6:
  0010f	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  00112	eb 4a		 jmp	 SHORT $LN111@LoadString@6
$LN83@LoadString@6:
  00114	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00118	eb 44		 jmp	 SHORT $LN111@LoadString@6
$LN84@LoadString@6:
  0011a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0011e	eb 3e		 jmp	 SHORT $LN111@LoadString@6
$LN86@LoadString@6:
  00120	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  00123	eb 39		 jmp	 SHORT $LN111@LoadString@6
$LN87@LoadString@6:
  00125	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00129	eb 33		 jmp	 SHORT $LN111@LoadString@6
$LN88@LoadString@6:
  0012b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0012f	eb 2d		 jmp	 SHORT $LN111@LoadString@6
$LN89@LoadString@6:
  00131	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00135	eb 27		 jmp	 SHORT $LN111@LoadString@6
$LN90@LoadString@6:
  00137	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  0013a	eb 22		 jmp	 SHORT $LN111@LoadString@6
$LN91@LoadString@6:
  0013c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00140	eb 1c		 jmp	 SHORT $LN111@LoadString@6
$LN92@LoadString@6:
  00142	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00146	eb 16		 jmp	 SHORT $LN111@LoadString@6
$LN93@LoadString@6:
  00148	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0014c	eb 10		 jmp	 SHORT $LN111@LoadString@6
$LN94@LoadString@6:
  0014e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00152	eb 0a		 jmp	 SHORT $LN111@LoadString@6
$LN95@LoadString@6:
  00154	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00158	eb 04		 jmp	 SHORT $LN111@LoadString@6
$LN96@LoadString@6:
  0015a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@6:
  0015e	6a 02		 push	 2
  00160	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00163	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  00167	5a		 pop	 edx
$LL104@LoadString@6:
  00168	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0016e	83 c0 04	 add	 eax, 4
  00171	4a		 dec	 edx
  00172	75 f4		 jne	 SHORT $LL104@LoadString@6
  00174	6a 08		 push	 8
  00176	58		 pop	 eax
$LL101@LoadString@6:
  00177	8b c8		 mov	 ecx, eax
  00179	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017f	79 05		 jns	 SHORT $LN112@LoadString@6
  00181	49		 dec	 ecx
  00182	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00185	41		 inc	 ecx
$LN112@LoadString@6:
  00186	b2 ed		 mov	 dl, -19			; ffffffedH
  00188	2a d1		 sub	 dl, cl
  0018a	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  0018e	40		 inc	 eax
  0018f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00192	7c e3		 jl	 SHORT $LL101@LoadString@6

; 163  : 		LoadString(_k, d, b, i);

  00194	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00197	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0019a	57		 push	 edi
  0019b	56		 push	 esi
  0019c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0019f	50		 push	 eax
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5e		 pop	 esi
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	c9		 leave
  001b3	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<12>
_TEXT	ENDS
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitemright.cpp
;	COMDAT ?LoadProperty@ioItemRight@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -548				; size = 4
_szBuf$ = -544						; size = 520
__k$508214 = -24					; size = 16
__k$508089 = -24					; size = 15
__k$507464 = -24					; size = 16
__k$508464 = -20					; size = 12
__k$508339 = -20					; size = 11
__k$507964 = -20					; size = 10
__k$507618 = -20					; size = 11
__k$507826 = -16					; size = 5
__k$507701 = -16					; size = 5
__k$507339 = -16					; size = 5
__k$507214 = -16					; size = 6
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioItemRight@@UAEXAAVioINILoader@@@Z PROC	; ioItemRight::LoadProperty, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 02 00
	00		 sub	 esp, 548		; 00000224H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 31   : 	m_iLevel = rkLoader.LoadInt_e( "level", -1 );

  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _rkLoader$[ebp]
  00021	6a ff		 push	 -1
  00023	8d 45 f0	 lea	 eax, DWORD PTR __k$507214[ebp]
  00026	c7 45 f0 81 89
	9d 8f		 mov	 DWORD PTR __k$507214[ebp], -1885501055 ; 8f9d8981H
  0002d	bb ed ec eb ea	 mov	 ebx, -353637139		; eaebecedH
  00032	31 5d f0	 xor	 DWORD PTR __k$507214[ebp], ebx
  00035	50		 push	 eax

; 54   : 
; 55   : 	rkLoader.LoadString_e( "second_func", "", szBuf, MAX_PATH * 2 );

  00036	89 8d dc fd ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], ecx
  0003c	66 c7 45 f4 6c
	00		 mov	 WORD PTR __k$507214[ebp+4], 108 ; 0000006cH
  00042	ff d7		 call	 edi
  00044	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0004a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0004d	6a 00		 push	 0
  0004f	8d 45 f0	 lea	 eax, DWORD PTR __k$507339[ebp]
  00052	c7 45 f0 8e 83
	8f 8f		 mov	 DWORD PTR __k$507339[ebp], -1886420082 ; 8f8f838eH
  00059	31 5d f0	 xor	 DWORD PTR __k$507339[ebp], ebx
  0005c	50		 push	 eax
  0005d	c6 45 f4 00	 mov	 BYTE PTR __k$507339[ebp+4], 0
  00061	ff d7		 call	 edi
  00063	6a 03		 push	 3
  00065	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00068	c7 45 e8 83 89
	8e 8e		 mov	 DWORD PTR __k$507464[ebp], -1903261309 ; 8e8e8983H
  0006f	c7 45 ec b2 9e
	82 8d		 mov	 DWORD PTR __k$507464[ebp+4], -1920819534 ; 8d829eb2H
  00076	c7 45 f0 85 98
	b4 89		 mov	 DWORD PTR __k$507464[ebp+8], -1984653179 ; 89b49885H
  0007d	8d 45 e8	 lea	 eax, DWORD PTR __k$507464[ebp]
  00080	c7 45 f4 82 88
	8e 00		 mov	 DWORD PTR __k$507464[ebp+12], 9341058 ; 008e8882H
  00087	59		 pop	 ecx
$LL318@LoadProper:

; 32   : 	m_dwRightCode = rkLoader.LoadInt_e( "code", 0 );
; 33   : 	m_dwPreConditionCode = rkLoader.LoadInt_e( "need_right_code", 0 );

  00088	31 18		 xor	 DWORD PTR [eax], ebx
  0008a	83 c0 04	 add	 eax, 4
  0008d	49		 dec	 ecx
  0008e	75 f8		 jne	 SHORT $LL318@LoadProper
  00090	6a 0c		 push	 12			; 0000000cH
  00092	58		 pop	 eax
$LL315@LoadProper:
  00093	8b c8		 mov	 ecx, eax
  00095	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0009b	79 05		 jns	 SHORT $LN1213@LoadProper
  0009d	49		 dec	 ecx
  0009e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000a1	41		 inc	 ecx
$LN1213@LoadProper:
  000a2	b2 ed		 mov	 dl, -19			; ffffffedH
  000a4	2a d1		 sub	 dl, cl
  000a6	30 54 05 e8	 xor	 BYTE PTR __k$507464[ebp+eax], dl
  000aa	40		 inc	 eax
  000ab	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000ae	7c e3		 jl	 SHORT $LL315@LoadProper
  000b0	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000b6	6a 00		 push	 0
  000b8	8d 45 e8	 lea	 eax, DWORD PTR __k$507464[ebp]
  000bb	50		 push	 eax
  000bc	ff d7		 call	 edi
  000be	6a 02		 push	 2
  000c0	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 34   : 	m_iSpendPeso  = rkLoader.LoadInt_e( "spend_peso", -1);

  000c3	c7 45 ec 9e 9c
	8e 84		 mov	 DWORD PTR __k$507618[ebp], -2071028578 ; 848e9c9eH
  000ca	c7 45 f0 89 b3
	9b 8f		 mov	 DWORD PTR __k$507618[ebp+4], -1885621367 ; 8f9bb389H
  000d1	66 c7 45 f4 9e
	83		 mov	 WORD PTR __k$507618[ebp+8], 33694 ; 0000839eH
  000d7	8d 45 ec	 lea	 eax, DWORD PTR __k$507618[ebp]
  000da	c6 45 f6 00	 mov	 BYTE PTR __k$507618[ebp+10], 0
  000de	59		 pop	 ecx
$LL424@LoadProper:
  000df	31 18		 xor	 DWORD PTR [eax], ebx
  000e1	83 c0 04	 add	 eax, 4
  000e4	49		 dec	 ecx
  000e5	75 f8		 jne	 SHORT $LL424@LoadProper
  000e7	6a 08		 push	 8
  000e9	58		 pop	 eax
$LL421@LoadProper:
  000ea	8b c8		 mov	 ecx, eax
  000ec	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000f2	79 05		 jns	 SHORT $LN1214@LoadProper
  000f4	49		 dec	 ecx
  000f5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000f8	41		 inc	 ecx
$LN1214@LoadProper:
  000f9	b2 ed		 mov	 dl, -19			; ffffffedH
  000fb	2a d1		 sub	 dl, cl
  000fd	30 54 05 ec	 xor	 BYTE PTR __k$507618[ebp+eax], dl
  00101	40		 inc	 eax
  00102	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00105	7c e3		 jl	 SHORT $LL421@LoadProper
  00107	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0010d	6a ff		 push	 -1
  0010f	8d 45 ec	 lea	 eax, DWORD PTR __k$507618[ebp]
  00112	50		 push	 eax
  00113	ff d7		 call	 edi

; 35   : 
; 36   : 	char szBuf[MAX_PATH * 2];
; 37   : 	rkLoader.LoadString_e( "name", "", szBuf, MAX_PATH * 2 );

  00115	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0011b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  00121	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00124	68 08 02 00 00	 push	 520			; 00000208H
  00129	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0012f	50		 push	 eax
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00135	8d 45 f0	 lea	 eax, DWORD PTR __k$507701[ebp]
  00138	c7 45 f0 83 8d
	86 8f		 mov	 DWORD PTR __k$507701[ebp], -1887007357 ; 8f868d83H
  0013f	31 5d f0	 xor	 DWORD PTR __k$507701[ebp], ebx
  00142	50		 push	 eax
  00143	c6 45 f4 00	 mov	 BYTE PTR __k$507701[ebp+4], 0
  00147	ff d7		 call	 edi

; 38   : 	m_Name = szBuf;

  00149	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0014f	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00155	50		 push	 eax
  00156	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00159	ff d3		 call	 ebx

; 39   : 
; 40   : 	rkLoader.LoadString_e( "desc", "", szBuf, MAX_PATH * 2 );

  0015b	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00161	68 08 02 00 00	 push	 520			; 00000208H
  00166	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0016c	50		 push	 eax
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00172	8d 45 f0	 lea	 eax, DWORD PTR __k$507826[ebp]
  00175	c7 45 f0 89 89
	98 89		 mov	 DWORD PTR __k$507826[ebp], -1986492023 ; 89988989H
  0017c	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __k$507826[ebp], -353637139 ; eaebecedH
  00183	50		 push	 eax
  00184	c6 45 f4 00	 mov	 BYTE PTR __k$507826[ebp+4], 0
  00188	ff d7		 call	 edi

; 41   : 	m_Description = szBuf;

  0018a	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00190	50		 push	 eax
  00191	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00194	ff d3		 call	 ebx
  00196	6a 02		 push	 2

; 42   : 	
; 43   : 	rkLoader.LoadString_e( "type_desc", "", szBuf, MAX_PATH * 2 );

  00198	c7 45 ec 99 95
	9b 8f		 mov	 DWORD PTR __k$507964[ebp], -1885629031 ; 8f9b9599H
  0019f	c7 45 f0 b2 88
	8e 99		 mov	 DWORD PTR __k$507964[ebp+4], -1718712142 ; 998e88b2H
  001a6	8d 45 ec	 lea	 eax, DWORD PTR __k$507964[ebp]
  001a9	66 c7 45 f4 8e
	00		 mov	 WORD PTR __k$507964[ebp+8], 142 ; 0000008eH
  001af	59		 pop	 ecx
$LL742@LoadProper:
  001b0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b6	83 c0 04	 add	 eax, 4
  001b9	49		 dec	 ecx
  001ba	75 f4		 jne	 SHORT $LL742@LoadProper
  001bc	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001c2	80 75 f4 ed	 xor	 BYTE PTR __k$507964[ebp+8], -19 ; ffffffedH
  001c6	68 08 02 00 00	 push	 520			; 00000208H
  001cb	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001d1	50		 push	 eax
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001d7	8d 45 ec	 lea	 eax, DWORD PTR __k$507964[ebp]
  001da	50		 push	 eax
  001db	ff d7		 call	 edi

; 44   : 	m_TypeDesc = szBuf;

  001dd	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001e3	50		 push	 eax
  001e4	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  001e7	ff d3		 call	 ebx
  001e9	6a 03		 push	 3

; 45   : 
; 46   : 	rkLoader.LoadString_e( "desc_image_set", "", szBuf, MAX_PATH * 2 );

  001eb	c7 45 e8 89 89
	98 89		 mov	 DWORD PTR __k$508089[ebp], -1986492023 ; 89988989H
  001f2	c7 45 ec b2 85
	86 8b		 mov	 DWORD PTR __k$508089[ebp+4], -1954118222 ; 8b8685b2H
  001f9	c7 45 f0 8a 89
	b4 99		 mov	 DWORD PTR __k$508089[ebp+8], -1716221558 ; 99b4898aH
  00200	66 c7 45 f4 88
	98		 mov	 WORD PTR __k$508089[ebp+12], 39048 ; 00009888H
  00206	8d 45 e8	 lea	 eax, DWORD PTR __k$508089[ebp]
  00209	c6 45 f6 00	 mov	 BYTE PTR __k$508089[ebp+14], 0
  0020d	59		 pop	 ecx
$LL848@LoadProper:
  0020e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00214	83 c0 04	 add	 eax, 4
  00217	49		 dec	 ecx
  00218	75 f4		 jne	 SHORT $LL848@LoadProper
  0021a	6a 0c		 push	 12			; 0000000cH
  0021c	58		 pop	 eax
$LL845@LoadProper:
  0021d	8b c8		 mov	 ecx, eax
  0021f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00225	79 05		 jns	 SHORT $LN1215@LoadProper
  00227	49		 dec	 ecx
  00228	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0022b	41		 inc	 ecx
$LN1215@LoadProper:
  0022c	b2 ed		 mov	 dl, -19			; ffffffedH
  0022e	2a d1		 sub	 dl, cl
  00230	30 54 05 e8	 xor	 BYTE PTR __k$508089[ebp+eax], dl
  00234	40		 inc	 eax
  00235	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00238	7c e3		 jl	 SHORT $LL845@LoadProper
  0023a	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00240	68 08 02 00 00	 push	 520			; 00000208H
  00245	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0024b	50		 push	 eax
  0024c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00251	8d 45 e8	 lea	 eax, DWORD PTR __k$508089[ebp]
  00254	50		 push	 eax
  00255	ff d7		 call	 edi

; 47   : 	m_DescImageSet = szBuf;

  00257	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0025d	50		 push	 eax
  0025e	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00261	ff d3		 call	 ebx
  00263	6a 03		 push	 3

; 48   : 
; 49   : 	rkLoader.LoadString_e( "desc_image_name", "", szBuf, MAX_PATH * 2 );

  00265	c7 45 e8 89 89
	98 89		 mov	 DWORD PTR __k$508214[ebp], -1986492023 ; 89988989H
  0026c	c7 45 ec b2 85
	86 8b		 mov	 DWORD PTR __k$508214[ebp+4], -1954118222 ; 8b8685b2H
  00273	c7 45 f0 8a 89
	b4 84		 mov	 DWORD PTR __k$508214[ebp+8], -2068543094 ; 84b4898aH
  0027a	8d 45 e8	 lea	 eax, DWORD PTR __k$508214[ebp]
  0027d	c7 45 f4 8c 81
	8e 00		 mov	 DWORD PTR __k$508214[ebp+12], 9339276 ; 008e818cH
  00284	59		 pop	 ecx
$LL954@LoadProper:
  00285	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0028b	83 c0 04	 add	 eax, 4
  0028e	49		 dec	 ecx
  0028f	75 f4		 jne	 SHORT $LL954@LoadProper
  00291	6a 0c		 push	 12			; 0000000cH
  00293	58		 pop	 eax
$LL951@LoadProper:
  00294	8b c8		 mov	 ecx, eax
  00296	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0029c	79 05		 jns	 SHORT $LN1216@LoadProper
  0029e	49		 dec	 ecx
  0029f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002a2	41		 inc	 ecx
$LN1216@LoadProper:
  002a3	b2 ed		 mov	 dl, -19			; ffffffedH
  002a5	2a d1		 sub	 dl, cl
  002a7	30 54 05 e8	 xor	 BYTE PTR __k$508214[ebp+eax], dl
  002ab	40		 inc	 eax
  002ac	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  002af	7c e3		 jl	 SHORT $LL951@LoadProper
  002b1	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002b7	68 08 02 00 00	 push	 520			; 00000208H
  002bc	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002c2	50		 push	 eax
  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002c8	8d 45 e8	 lea	 eax, DWORD PTR __k$508214[ebp]
  002cb	50		 push	 eax
  002cc	ff d7		 call	 edi

; 50   : 	m_DescImageName = szBuf;

  002ce	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002d4	50		 push	 eax
  002d5	8d 4e 78	 lea	 ecx, DWORD PTR [esi+120]
  002d8	ff d3		 call	 ebx
  002da	6a 02		 push	 2

; 51   : 
; 52   : 	rkLoader.LoadString_e( "first_func", "", szBuf, MAX_PATH * 2 );

  002dc	c7 45 ec 8b 85
	99 99		 mov	 DWORD PTR __k$508339[ebp], -1717992053 ; 9999858bH
  002e3	c7 45 f0 99 b3
	8d 9f		 mov	 DWORD PTR __k$508339[ebp+4], -1618103399 ; 9f8db399H
  002ea	66 c7 45 f4 83
	8f		 mov	 WORD PTR __k$508339[ebp+8], 36739 ; 00008f83H
  002f0	8d 45 ec	 lea	 eax, DWORD PTR __k$508339[ebp]
  002f3	c6 45 f6 00	 mov	 BYTE PTR __k$508339[ebp+10], 0
  002f7	59		 pop	 ecx
$LL1060@LoadProper:
  002f8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002fe	83 c0 04	 add	 eax, 4
  00301	49		 dec	 ecx
  00302	75 f4		 jne	 SHORT $LL1060@LoadProper
  00304	6a 08		 push	 8
  00306	58		 pop	 eax
$LL1057@LoadProper:
  00307	8b c8		 mov	 ecx, eax
  00309	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0030f	79 05		 jns	 SHORT $LN1217@LoadProper
  00311	49		 dec	 ecx
  00312	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00315	41		 inc	 ecx
$LN1217@LoadProper:
  00316	b2 ed		 mov	 dl, -19			; ffffffedH
  00318	2a d1		 sub	 dl, cl
  0031a	30 54 05 ec	 xor	 BYTE PTR __k$508339[ebp+eax], dl
  0031e	40		 inc	 eax
  0031f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00322	7c e3		 jl	 SHORT $LL1057@LoadProper
  00324	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0032a	68 08 02 00 00	 push	 520			; 00000208H
  0032f	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00335	50		 push	 eax
  00336	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0033b	8d 45 ec	 lea	 eax, DWORD PTR __k$508339[ebp]
  0033e	50		 push	 eax
  0033f	ff d7		 call	 edi

; 53   : 	m_FirstFunc = szBuf;

  00341	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00347	50		 push	 eax
  00348	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  0034b	ff d3		 call	 ebx
  0034d	6a 02		 push	 2

; 54   : 
; 55   : 	rkLoader.LoadString_e( "second_func", "", szBuf, MAX_PATH * 2 );

  0034f	c7 45 ec 9e 89
	88 85		 mov	 DWORD PTR __k$508464[ebp], -2054649442 ; 8588899eH
  00356	c7 45 f0 83 88
	b4 8c		 mov	 DWORD PTR __k$508464[ebp+4], -1934325629 ; 8cb48883H
  0035d	8d 45 ec	 lea	 eax, DWORD PTR __k$508464[ebp]
  00360	c7 45 f4 98 82
	88 00		 mov	 DWORD PTR __k$508464[ebp+8], 8946328 ; 00888298H
  00367	59		 pop	 ecx
$LL1166@LoadProper:
  00368	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0036e	83 c0 04	 add	 eax, 4
  00371	49		 dec	 ecx
  00372	75 f4		 jne	 SHORT $LL1166@LoadProper
  00374	6a 08		 push	 8
  00376	58		 pop	 eax
$LL1163@LoadProper:
  00377	8b c8		 mov	 ecx, eax
  00379	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0037f	79 05		 jns	 SHORT $LN1218@LoadProper
  00381	49		 dec	 ecx
  00382	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00385	41		 inc	 ecx
$LN1218@LoadProper:
  00386	b2 ed		 mov	 dl, -19			; ffffffedH
  00388	2a d1		 sub	 dl, cl
  0038a	30 54 05 ec	 xor	 BYTE PTR __k$508464[ebp+eax], dl
  0038e	40		 inc	 eax
  0038f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00392	7c e3		 jl	 SHORT $LL1163@LoadProper
  00394	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0039a	68 08 02 00 00	 push	 520			; 00000208H
  0039f	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003a5	50		 push	 eax
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003ab	8d 45 ec	 lea	 eax, DWORD PTR __k$508464[ebp]
  003ae	50		 push	 eax
  003af	ff d7		 call	 edi

; 56   : 	m_SecondFunc = szBuf;

  003b1	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003b7	50		 push	 eax
  003b8	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  003bb	ff d3		 call	 ebx

; 57   : }

  003bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c0	5f		 pop	 edi
  003c1	5e		 pop	 esi
  003c2	33 cd		 xor	 ecx, ebp
  003c4	5b		 pop	 ebx
  003c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ca	c9		 leave
  003cb	c2 04 00	 ret	 4
?LoadProperty@ioItemRight@@UAEXAAVioINILoader@@@Z ENDP	; ioItemRight::LoadProperty
_TEXT	ENDS
END
