; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioEventUserManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BL@LCFCFC@Fail?5Create?5Event?5Node?5?3?$CFd?$AA@ ; `string'
PUBLIC	?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z ; EventUserManager::CreatEventUserNode
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?SetType@EventUserNode@@QAEXW4EventType@@@Z:PROC ; EventUserNode::SetType
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	??0HeroExpBoostEventUserNode@@QAE@XZ:PROC	; HeroExpBoostEventUserNode::HeroExpBoostEventUserNode
EXTRN	??0FreeDayEventUserNode@@QAE@XZ:PROC		; FreeDayEventUserNode::FreeDayEventUserNode
EXTRN	??0ConnectAndPlayTimeEventUserNode@@QAE@XZ:PROC	; ConnectAndPlayTimeEventUserNode::ConnectAndPlayTimeEventUserNode
EXTRN	??0LadderPointEventUserNode@@QAE@XZ:PROC	; LadderPointEventUserNode::LadderPointEventUserNode
EXTRN	??0EntryEventUserNode@@QAE@XZ:PROC		; EntryEventUserNode::EntryEventUserNode
EXTRN	??0ConnectionTimeSelectGiftEventUserNode@@QAE@XZ:PROC ; ConnectionTimeSelectGiftEventUserNode::ConnectionTimeSelectGiftEventUserNode
EXTRN	??0GradePresentEventUserNode@@QAE@XZ:PROC	; GradePresentEventUserNode::GradePresentEventUserNode
EXTRN	??0OneDayGiftEventUserNode@@QAE@XZ:PROC		; OneDayGiftEventUserNode::OneDayGiftEventUserNode
EXTRN	??0ConnectionTimeEventUserNode@@QAE@XZ:PROC	; ConnectionTimeEventUserNode::ConnectionTimeEventUserNode
EXTRN	??0ExerciseSoldierEventUserNode@@QAE@XZ:PROC	; ExerciseSoldierEventUserNode::ExerciseSoldierEventUserNode
EXTRN	??0FishingEventUserNode@@QAE@XZ:PROC		; FishingEventUserNode::FishingEventUserNode
EXTRN	??0BuyItemEventUserNode@@QAE@XZ:PROC		; BuyItemEventUserNode::BuyItemEventUserNode
EXTRN	??0ChristmasEventUserNode@@QAE@XZ:PROC		; ChristmasEventUserNode::ChristmasEventUserNode
EXTRN	??0PlayTimePresentEventUserNode@@QAE@XZ:PROC	; PlayTimePresentEventUserNode::PlayTimePresentEventUserNode
EXTRN	??0DormancyUserEvent@@QAE@XZ:PROC		; DormancyUserEvent::DormancyUserEvent
EXTRN	??0OneDayGoldItemEvent@@QAE@XZ:PROC		; OneDayGoldItemEvent::OneDayGoldItemEvent
EXTRN	??0ChanceMortmainCharEventUserNode@@QAE@XZ:PROC	; ChanceMortmainCharEventUserNode::ChanceMortmainCharEventUserNode
EXTRN	??0PCRoomEventUserNode@@QAE@XZ:PROC		; PCRoomEventUserNode::PCRoomEventUserNode
EXTRN	??0GradeUpEventUserNode@@QAE@XZ:PROC		; GradeUpEventUserNode::GradeUpEventUserNode
EXTRN	??0BuyCharNoLevelLimitEventUserNode@@QAE@XZ:PROC ; BuyCharNoLevelLimitEventUserNode::BuyCharNoLevelLimitEventUserNode
EXTRN	??0PesoBonusEventUserNode@@QAE@XZ:PROC		; PesoBonusEventUserNode::PesoBonusEventUserNode
EXTRN	??0ChildrenDayEventUserNode@@QAE@XZ:PROC	; ChildrenDayEventUserNode::ChildrenDayEventUserNode
EXTRN	??0PlayTimeEventUserNode@@QAE@XZ:PROC		; PlayTimeEventUserNode::PlayTimeEventUserNode
EXTRN	??0PesoEventUserNode@@QAE@XZ:PROC		; PesoEventUserNode::PesoEventUserNode
EXTRN	??0ExpEventUserNode@@QAE@XZ:PROC		; ExpEventUserNode::ExpEventUserNode
EXTRN	??0CoinEventUserNode@@QAE@XZ:PROC		; CoinEventUserNode::CoinEventUserNode
EXTRN	??0ProposalEventUserNode@@QAE@XZ:PROC		; ProposalEventUserNode::ProposalEventUserNode
EXTRN	??0EventUserNode@@QAE@XZ:PROC			; EventUserNode::EventUserNode
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT ??_C@_0BL@LCFCFC@Fail?5Create?5Event?5Node?5?3?$CFd?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioeventusermanager.cpp
CONST	SEGMENT
??_C@_0BL@LCFCFC@Fail?5Create?5Event?5Node?5?3?$CFd?$AA@ DB 'Fail Create '
	DB	'Event Node :%d', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z DD 019930522H
	DD	01dH
	DD	FLAT:__unwindtable$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$17
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$20
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$23
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$25
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$26
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$27
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$28
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T506364 = 8						; size = 4
$T506360 = 8						; size = 4
$T506356 = 8						; size = 4
$T506352 = 8						; size = 4
$T506348 = 8						; size = 4
$T506344 = 8						; size = 4
$T506340 = 8						; size = 4
$T506336 = 8						; size = 4
$T506332 = 8						; size = 4
$T506328 = 8						; size = 4
$T506324 = 8						; size = 4
$T506320 = 8						; size = 4
$T506316 = 8						; size = 4
$T506312 = 8						; size = 4
$T506308 = 8						; size = 4
$T506304 = 8						; size = 4
$T506300 = 8						; size = 4
$T506296 = 8						; size = 4
$T506292 = 8						; size = 4
$T506288 = 8						; size = 4
$T506284 = 8						; size = 4
$T506280 = 8						; size = 4
$T506276 = 8						; size = 4
$T506272 = 8						; size = 4
$T506268 = 8						; size = 4
$T506264 = 8						; size = 4
$T506260 = 8						; size = 4
$T506256 = 8						; size = 4
$T506252 = 8						; size = 4
_eEventType$ = 8					; size = 4
?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z PROC ; EventUserManager::CreatEventUserNode, COMDAT
; _this$ = ecx

; 55   : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 56   : 	EventUserNode *pNode = NULL;
; 57   : 
; 58   : 	switch( eEventType )

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _eEventType$[ebp]
  0000f	33 f6		 xor	 esi, esi
  00011	83 ff 29	 cmp	 edi, 41			; 00000029H
  00014	0f 87 34 04 00
	00		 ja	 $LN2@CreatEvent
  0001a	ff 24 bd 00 00
	00 00		 jmp	 DWORD PTR $LN126@CreatEvent[edi*4]
$LN32@CreatEvent:

; 59   : 	{
; 60   : 	case EVT_NONE:
; 61   : 		pNode = new EventUserNode;

  00021	6a 18		 push	 24			; 00000018H
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	59		 pop	 ecx
  00029	8b c8		 mov	 ecx, eax
  0002b	89 4d 08	 mov	 DWORD PTR $T506252[ebp], ecx
  0002e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
$LN125@CreatEvent:
  00032	85 c9		 test	 ecx, ecx
  00034	74 07		 je	 SHORT $LN37@CreatEvent
  00036	e8 00 00 00 00	 call	 ??0EventUserNode@@QAE@XZ ; EventUserNode::EventUserNode
  0003b	eb 02		 jmp	 SHORT $LN38@CreatEvent
$LN37@CreatEvent:
  0003d	33 c0		 xor	 eax, eax
$LN38@CreatEvent:
  0003f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	8b f0		 mov	 esi, eax

; 62   : 		break;

  00045	e9 1b 04 00 00	 jmp	 $LN33@CreatEvent
$LN31@CreatEvent:

; 63   : 	case EVT_PROPOSAL:
; 64   : 		pNode = new ProposalEventUserNode;

  0004a	6a 18		 push	 24			; 00000018H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	59		 pop	 ecx
  00052	8b c8		 mov	 ecx, eax
  00054	89 4d 08	 mov	 DWORD PTR $T506256[ebp], ecx
  00057	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005e	85 c9		 test	 ecx, ecx
  00060	74 db		 je	 SHORT $LN37@CreatEvent
  00062	e8 00 00 00 00	 call	 ??0ProposalEventUserNode@@QAE@XZ ; ProposalEventUserNode::ProposalEventUserNode
  00067	eb d6		 jmp	 SHORT $LN38@CreatEvent
$LN30@CreatEvent:

; 65   : 		break;
; 66   : 	case EVT_COIN:
; 67   : 		pNode = new CoinEventUserNode;

  00069	6a 18		 push	 24			; 00000018H
  0006b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00070	59		 pop	 ecx
  00071	8b c8		 mov	 ecx, eax
  00073	89 4d 08	 mov	 DWORD PTR $T506260[ebp], ecx
  00076	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 bc		 je	 SHORT $LN37@CreatEvent
  00081	e8 00 00 00 00	 call	 ??0CoinEventUserNode@@QAE@XZ ; CoinEventUserNode::CoinEventUserNode
  00086	eb b7		 jmp	 SHORT $LN38@CreatEvent
$LN29@CreatEvent:

; 68   : 		break;
; 69   : 	case EVT_EXP:
; 70   : 		pNode = new ExpEventUserNode;

  00088	6a 18		 push	 24			; 00000018H
  0008a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008f	59		 pop	 ecx
  00090	8b c8		 mov	 ecx, eax
  00092	89 4d 08	 mov	 DWORD PTR $T506264[ebp], ecx
  00095	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0009c	85 c9		 test	 ecx, ecx
  0009e	74 9d		 je	 SHORT $LN37@CreatEvent
  000a0	e8 00 00 00 00	 call	 ??0ExpEventUserNode@@QAE@XZ ; ExpEventUserNode::ExpEventUserNode
  000a5	eb 98		 jmp	 SHORT $LN38@CreatEvent
$LN28@CreatEvent:

; 71   : 		break;
; 72   : 	case EVT_PESO:
; 73   : 		pNode = new PesoEventUserNode;

  000a7	6a 18		 push	 24			; 00000018H
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	59		 pop	 ecx
  000af	8b c8		 mov	 ecx, eax
  000b1	89 4d 08	 mov	 DWORD PTR $T506268[ebp], ecx
  000b4	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  000bb	85 c9		 test	 ecx, ecx
  000bd	0f 84 7a ff ff
	ff		 je	 $LN37@CreatEvent
  000c3	e8 00 00 00 00	 call	 ??0PesoEventUserNode@@QAE@XZ ; PesoEventUserNode::PesoEventUserNode
  000c8	e9 72 ff ff ff	 jmp	 $LN38@CreatEvent
$LN27@CreatEvent:

; 74   : 		break;
; 75   : 	case EVT_PLAYTIME:
; 76   : 		pNode = new PlayTimeEventUserNode;

  000cd	6a 18		 push	 24			; 00000018H
  000cf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d4	59		 pop	 ecx
  000d5	8b c8		 mov	 ecx, eax
  000d7	89 4d 08	 mov	 DWORD PTR $T506272[ebp], ecx
  000da	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  000e1	85 c9		 test	 ecx, ecx
  000e3	0f 84 54 ff ff
	ff		 je	 $LN37@CreatEvent
  000e9	e8 00 00 00 00	 call	 ??0PlayTimeEventUserNode@@QAE@XZ ; PlayTimeEventUserNode::PlayTimeEventUserNode
  000ee	e9 4c ff ff ff	 jmp	 $LN38@CreatEvent
$LN26@CreatEvent:

; 77   : 		break;
; 78   : 	case EVT_CHILDRENDAY:
; 79   : 		pNode = new ChildrenDayEventUserNode;

  000f3	6a 18		 push	 24			; 00000018H
  000f5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000fa	59		 pop	 ecx
  000fb	8b c8		 mov	 ecx, eax
  000fd	89 4d 08	 mov	 DWORD PTR $T506276[ebp], ecx
  00100	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00107	85 c9		 test	 ecx, ecx
  00109	0f 84 2e ff ff
	ff		 je	 $LN37@CreatEvent
  0010f	e8 00 00 00 00	 call	 ??0ChildrenDayEventUserNode@@QAE@XZ ; ChildrenDayEventUserNode::ChildrenDayEventUserNode
  00114	e9 26 ff ff ff	 jmp	 $LN38@CreatEvent
$LN25@CreatEvent:

; 80   : 		break;
; 81   : 	case EVT_PESOBONUS:
; 82   : 		pNode = new PesoBonusEventUserNode;

  00119	6a 18		 push	 24			; 00000018H
  0011b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00120	59		 pop	 ecx
  00121	8b c8		 mov	 ecx, eax
  00123	89 4d 08	 mov	 DWORD PTR $T506280[ebp], ecx
  00126	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  0012d	85 c9		 test	 ecx, ecx
  0012f	0f 84 08 ff ff
	ff		 je	 $LN37@CreatEvent
  00135	e8 00 00 00 00	 call	 ??0PesoBonusEventUserNode@@QAE@XZ ; PesoBonusEventUserNode::PesoBonusEventUserNode
  0013a	e9 00 ff ff ff	 jmp	 $LN38@CreatEvent
$LN24@CreatEvent:

; 83   : 		break;
; 84   : 	case EVT_BUY_CHAR_NO_LEVEL_LIMIT:
; 85   : 		pNode = new BuyCharNoLevelLimitEventUserNode;

  0013f	6a 18		 push	 24			; 00000018H
  00141	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00146	59		 pop	 ecx
  00147	8b c8		 mov	 ecx, eax
  00149	89 4d 08	 mov	 DWORD PTR $T506284[ebp], ecx
  0014c	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  00153	85 c9		 test	 ecx, ecx
  00155	0f 84 e2 fe ff
	ff		 je	 $LN37@CreatEvent
  0015b	e8 00 00 00 00	 call	 ??0BuyCharNoLevelLimitEventUserNode@@QAE@XZ ; BuyCharNoLevelLimitEventUserNode::BuyCharNoLevelLimitEventUserNode
  00160	e9 da fe ff ff	 jmp	 $LN38@CreatEvent
$LN23@CreatEvent:

; 86   : 		break;
; 87   : 	case EVT_GRADEUP:
; 88   : 		pNode = new GradeUpEventUserNode;

  00165	6a 18		 push	 24			; 00000018H
  00167	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0016c	59		 pop	 ecx
  0016d	8b c8		 mov	 ecx, eax
  0016f	89 4d 08	 mov	 DWORD PTR $T506288[ebp], ecx
  00172	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  00179	85 c9		 test	 ecx, ecx
  0017b	0f 84 bc fe ff
	ff		 je	 $LN37@CreatEvent
  00181	e8 00 00 00 00	 call	 ??0GradeUpEventUserNode@@QAE@XZ ; GradeUpEventUserNode::GradeUpEventUserNode
  00186	e9 b4 fe ff ff	 jmp	 $LN38@CreatEvent
$LN22@CreatEvent:

; 89   : 		break;
; 90   : 	case EVT_PCROOM_BONUS:
; 91   : 		pNode = new PCRoomEventUserNode;

  0018b	6a 18		 push	 24			; 00000018H
  0018d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00192	59		 pop	 ecx
  00193	8b c8		 mov	 ecx, eax
  00195	89 4d 08	 mov	 DWORD PTR $T506292[ebp], ecx
  00198	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0019f	85 c9		 test	 ecx, ecx
  001a1	0f 84 96 fe ff
	ff		 je	 $LN37@CreatEvent
  001a7	e8 00 00 00 00	 call	 ??0PCRoomEventUserNode@@QAE@XZ ; PCRoomEventUserNode::PCRoomEventUserNode
  001ac	e9 8e fe ff ff	 jmp	 $LN38@CreatEvent
$LN21@CreatEvent:

; 92   : 		break;
; 93   : 	case EVT_CHANCE_MORTMAIN_CHAR:
; 94   : 		pNode = new ChanceMortmainCharEventUserNode;

  001b1	6a 18		 push	 24			; 00000018H
  001b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001b8	59		 pop	 ecx
  001b9	8b c8		 mov	 ecx, eax
  001bb	89 4d 08	 mov	 DWORD PTR $T506296[ebp], ecx
  001be	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  001c5	85 c9		 test	 ecx, ecx
  001c7	0f 84 70 fe ff
	ff		 je	 $LN37@CreatEvent
  001cd	e8 00 00 00 00	 call	 ??0ChanceMortmainCharEventUserNode@@QAE@XZ ; ChanceMortmainCharEventUserNode::ChanceMortmainCharEventUserNode
  001d2	e9 68 fe ff ff	 jmp	 $LN38@CreatEvent
$LN20@CreatEvent:

; 95   : 		break;
; 96   : 	case EVT_ONE_DAY_GOLD_ITEM:
; 97   : 		pNode = new OneDayGoldItemEvent;

  001d7	6a 18		 push	 24			; 00000018H
  001d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001de	59		 pop	 ecx
  001df	8b c8		 mov	 ecx, eax
  001e1	89 4d 08	 mov	 DWORD PTR $T506300[ebp], ecx
  001e4	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  001eb	85 c9		 test	 ecx, ecx
  001ed	0f 84 4a fe ff
	ff		 je	 $LN37@CreatEvent
  001f3	e8 00 00 00 00	 call	 ??0OneDayGoldItemEvent@@QAE@XZ ; OneDayGoldItemEvent::OneDayGoldItemEvent
  001f8	e9 42 fe ff ff	 jmp	 $LN38@CreatEvent
$LN19@CreatEvent:

; 98   : 		break;
; 99   : 	case EVT_DORMANCY_USER:
; 100  : 		pNode = new DormancyUserEvent;

  001fd	6a 18		 push	 24			; 00000018H
  001ff	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00204	59		 pop	 ecx
  00205	8b c8		 mov	 ecx, eax
  00207	89 4d 08	 mov	 DWORD PTR $T506304[ebp], ecx
  0020a	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00211	85 c9		 test	 ecx, ecx
  00213	0f 84 24 fe ff
	ff		 je	 $LN37@CreatEvent
  00219	e8 00 00 00 00	 call	 ??0DormancyUserEvent@@QAE@XZ ; DormancyUserEvent::DormancyUserEvent
  0021e	e9 1c fe ff ff	 jmp	 $LN38@CreatEvent
$LN18@CreatEvent:

; 101  : 		break;
; 102  : 	case EVT_PLAYTIME_PRESENT:
; 103  : 		pNode = new PlayTimePresentEventUserNode;

  00223	6a 18		 push	 24			; 00000018H
  00225	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0022a	59		 pop	 ecx
  0022b	8b c8		 mov	 ecx, eax
  0022d	89 4d 08	 mov	 DWORD PTR $T506308[ebp], ecx
  00230	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00237	85 c9		 test	 ecx, ecx
  00239	0f 84 fe fd ff
	ff		 je	 $LN37@CreatEvent
  0023f	e8 00 00 00 00	 call	 ??0PlayTimePresentEventUserNode@@QAE@XZ ; PlayTimePresentEventUserNode::PlayTimePresentEventUserNode
  00244	e9 f6 fd ff ff	 jmp	 $LN38@CreatEvent
$LN17@CreatEvent:

; 104  : 		break;
; 105  : 	case EVT_CHRISTMAS:
; 106  : 		pNode = new ChristmasEventUserNode;

  00249	6a 1c		 push	 28			; 0000001cH
  0024b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00250	59		 pop	 ecx
  00251	8b c8		 mov	 ecx, eax
  00253	89 4d 08	 mov	 DWORD PTR $T506312[ebp], ecx
  00256	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  0025d	85 c9		 test	 ecx, ecx
  0025f	0f 84 d8 fd ff
	ff		 je	 $LN37@CreatEvent
  00265	e8 00 00 00 00	 call	 ??0ChristmasEventUserNode@@QAE@XZ ; ChristmasEventUserNode::ChristmasEventUserNode
  0026a	e9 d0 fd ff ff	 jmp	 $LN38@CreatEvent
$LN16@CreatEvent:

; 107  : 		break;
; 108  : 	case EVT_BUY_ITEM:
; 109  : 	case EVT_BUY_ITEM_2:
; 110  : 	case EVT_BUY_ITEM_3:
; 111  : 		pNode = new BuyItemEventUserNode;

  0026f	6a 18		 push	 24			; 00000018H
  00271	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00276	59		 pop	 ecx
  00277	8b c8		 mov	 ecx, eax
  00279	89 4d 08	 mov	 DWORD PTR $T506316[ebp], ecx
  0027c	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00283	85 c9		 test	 ecx, ecx
  00285	0f 84 b2 fd ff
	ff		 je	 $LN37@CreatEvent
  0028b	e8 00 00 00 00	 call	 ??0BuyItemEventUserNode@@QAE@XZ ; BuyItemEventUserNode::BuyItemEventUserNode
  00290	e9 aa fd ff ff	 jmp	 $LN38@CreatEvent
$LN15@CreatEvent:

; 112  : 		break;
; 113  : 	case EVT_FISHING:
; 114  : 		pNode = new FishingEventUserNode;

  00295	6a 18		 push	 24			; 00000018H
  00297	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0029c	59		 pop	 ecx
  0029d	8b c8		 mov	 ecx, eax
  0029f	89 4d 08	 mov	 DWORD PTR $T506320[ebp], ecx
  002a2	c7 45 fc 11 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 17 ; 00000011H
  002a9	85 c9		 test	 ecx, ecx
  002ab	0f 84 8c fd ff
	ff		 je	 $LN37@CreatEvent
  002b1	e8 00 00 00 00	 call	 ??0FishingEventUserNode@@QAE@XZ ; FishingEventUserNode::FishingEventUserNode
  002b6	e9 84 fd ff ff	 jmp	 $LN38@CreatEvent
$LN14@CreatEvent:

; 115  : 		break;
; 116  : 	case EVT_EXERCISESOLDIER:
; 117  : 		pNode = new ExerciseSoldierEventUserNode;

  002bb	6a 18		 push	 24			; 00000018H
  002bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002c2	59		 pop	 ecx
  002c3	8b c8		 mov	 ecx, eax
  002c5	89 4d 08	 mov	 DWORD PTR $T506324[ebp], ecx
  002c8	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 18 ; 00000012H
  002cf	85 c9		 test	 ecx, ecx
  002d1	0f 84 66 fd ff
	ff		 je	 $LN37@CreatEvent
  002d7	e8 00 00 00 00	 call	 ??0ExerciseSoldierEventUserNode@@QAE@XZ ; ExerciseSoldierEventUserNode::ExerciseSoldierEventUserNode
  002dc	e9 5e fd ff ff	 jmp	 $LN38@CreatEvent
$LN13@CreatEvent:

; 118  : 		break;
; 119  : 	case EVT_CONNECTION_TIME:
; 120  : 		pNode = new ConnectionTimeEventUserNode;

  002e1	6a 18		 push	 24			; 00000018H
  002e3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002e8	59		 pop	 ecx
  002e9	8b c8		 mov	 ecx, eax
  002eb	89 4d 08	 mov	 DWORD PTR $T506328[ebp], ecx
  002ee	c7 45 fc 13 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 19 ; 00000013H
  002f5	85 c9		 test	 ecx, ecx
  002f7	0f 84 40 fd ff
	ff		 je	 $LN37@CreatEvent
  002fd	e8 00 00 00 00	 call	 ??0ConnectionTimeEventUserNode@@QAE@XZ ; ConnectionTimeEventUserNode::ConnectionTimeEventUserNode
  00302	e9 38 fd ff ff	 jmp	 $LN38@CreatEvent
$LN12@CreatEvent:

; 121  : 		break;
; 122  : 	case EVT_ONE_DAY_GIFT:
; 123  : 	case EVT_ONE_DAY_GIFT_2:
; 124  : 		pNode = new OneDayGiftEventUserNode;

  00307	6a 18		 push	 24			; 00000018H
  00309	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0030e	59		 pop	 ecx
  0030f	8b c8		 mov	 ecx, eax
  00311	89 4d 08	 mov	 DWORD PTR $T506332[ebp], ecx
  00314	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 20 ; 00000014H
  0031b	85 c9		 test	 ecx, ecx
  0031d	0f 84 1a fd ff
	ff		 je	 $LN37@CreatEvent
  00323	e8 00 00 00 00	 call	 ??0OneDayGiftEventUserNode@@QAE@XZ ; OneDayGiftEventUserNode::OneDayGiftEventUserNode
  00328	e9 12 fd ff ff	 jmp	 $LN38@CreatEvent
$LN11@CreatEvent:

; 125  : 		break;
; 126  : 	case EVT_GRADEUP_PRESENT:
; 127  : 		pNode = new GradePresentEventUserNode;

  0032d	6a 18		 push	 24			; 00000018H
  0032f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00334	59		 pop	 ecx
  00335	8b c8		 mov	 ecx, eax
  00337	89 4d 08	 mov	 DWORD PTR $T506336[ebp], ecx
  0033a	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 21 ; 00000015H
  00341	85 c9		 test	 ecx, ecx
  00343	0f 84 f4 fc ff
	ff		 je	 $LN37@CreatEvent
  00349	e8 00 00 00 00	 call	 ??0GradePresentEventUserNode@@QAE@XZ ; GradePresentEventUserNode::GradePresentEventUserNode
  0034e	e9 ec fc ff ff	 jmp	 $LN38@CreatEvent
$LN10@CreatEvent:

; 128  : 		break;
; 129  : 	case EVT_CONNECTION_TIME_SELECT_GIFT:
; 130  : 		pNode = new ConnectionTimeSelectGiftEventUserNode;

  00353	6a 18		 push	 24			; 00000018H
  00355	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0035a	59		 pop	 ecx
  0035b	8b c8		 mov	 ecx, eax
  0035d	89 4d 08	 mov	 DWORD PTR $T506340[ebp], ecx
  00360	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 22 ; 00000016H
  00367	85 c9		 test	 ecx, ecx
  00369	0f 84 ce fc ff
	ff		 je	 $LN37@CreatEvent
  0036f	e8 00 00 00 00	 call	 ??0ConnectionTimeSelectGiftEventUserNode@@QAE@XZ ; ConnectionTimeSelectGiftEventUserNode::ConnectionTimeSelectGiftEventUserNode
  00374	e9 c6 fc ff ff	 jmp	 $LN38@CreatEvent
$LN9@CreatEvent:

; 131  : 		break;
; 132  : 	case EVT_ENTRY:
; 133  : 		pNode = new EntryEventUserNode;

  00379	6a 18		 push	 24			; 00000018H
  0037b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00380	59		 pop	 ecx
  00381	8b c8		 mov	 ecx, eax
  00383	89 4d 08	 mov	 DWORD PTR $T506344[ebp], ecx
  00386	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 23 ; 00000017H
  0038d	85 c9		 test	 ecx, ecx
  0038f	0f 84 a8 fc ff
	ff		 je	 $LN37@CreatEvent
  00395	e8 00 00 00 00	 call	 ??0EntryEventUserNode@@QAE@XZ ; EntryEventUserNode::EntryEventUserNode
  0039a	e9 a0 fc ff ff	 jmp	 $LN38@CreatEvent
$LN8@CreatEvent:

; 134  : 		break;
; 135  : 	case EVT_LADDER_POINT:
; 136  : 		pNode = new LadderPointEventUserNode;

  0039f	6a 18		 push	 24			; 00000018H
  003a1	5e		 pop	 esi
  003a2	56		 push	 esi
  003a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003a8	59		 pop	 ecx
  003a9	8b c8		 mov	 ecx, eax
  003ab	89 4d 08	 mov	 DWORD PTR $T506348[ebp], ecx
  003ae	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  003b1	85 c9		 test	 ecx, ecx
  003b3	0f 84 84 fc ff
	ff		 je	 $LN37@CreatEvent
  003b9	e8 00 00 00 00	 call	 ??0LadderPointEventUserNode@@QAE@XZ ; LadderPointEventUserNode::LadderPointEventUserNode
  003be	e9 7c fc ff ff	 jmp	 $LN38@CreatEvent
$LN7@CreatEvent:

; 137  : 		break;
; 138  : 	case EVT_ANNOUNCE:
; 139  : 	case EVT_ENTRY_AFTER:
; 140  : 		pNode = new EventUserNode;

  003c3	6a 18		 push	 24			; 00000018H
  003c5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003ca	59		 pop	 ecx
  003cb	8b c8		 mov	 ecx, eax
  003cd	89 4d 08	 mov	 DWORD PTR $T506352[ebp], ecx
  003d0	c7 45 fc 19 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 25 ; 00000019H
  003d7	e9 56 fc ff ff	 jmp	 $LN125@CreatEvent
$LN6@CreatEvent:

; 141  : 		break;
; 142  : 	case EVT_CONNECT_AND_PLAYTIME:
; 143  : 		pNode = new ConnectAndPlayTimeEventUserNode;

  003dc	6a 18		 push	 24			; 00000018H
  003de	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003e3	59		 pop	 ecx
  003e4	8b c8		 mov	 ecx, eax
  003e6	89 4d 08	 mov	 DWORD PTR $T506356[ebp], ecx
  003e9	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  003f0	85 c9		 test	 ecx, ecx
  003f2	0f 84 45 fc ff
	ff		 je	 $LN37@CreatEvent
  003f8	e8 00 00 00 00	 call	 ??0ConnectAndPlayTimeEventUserNode@@QAE@XZ ; ConnectAndPlayTimeEventUserNode::ConnectAndPlayTimeEventUserNode
  003fd	e9 3d fc ff ff	 jmp	 $LN38@CreatEvent
$LN4@CreatEvent:

; 144  : 		break;
; 145  : 	case EVT_PLAZA_MONSTER:
; 146  : 	case EVT_EXP2:
; 147  : 	case EVT_PES02:
; 148  : 	case EVT_MODE_BONUS:
; 149  : 	case EVT_MODE_BONUS2:
; 150  : 		break;
; 151  : 	case EVT_FREEDAY_HERO:
; 152  : 		pNode = new FreeDayEventUserNode;

  00402	6a 18		 push	 24			; 00000018H
  00404	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00409	59		 pop	 ecx
  0040a	8b c8		 mov	 ecx, eax
  0040c	89 4d 08	 mov	 DWORD PTR $T506360[ebp], ecx
  0040f	c7 45 fc 1b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  00416	85 c9		 test	 ecx, ecx
  00418	0f 84 1f fc ff
	ff		 je	 $LN37@CreatEvent
  0041e	e8 00 00 00 00	 call	 ??0FreeDayEventUserNode@@QAE@XZ ; FreeDayEventUserNode::FreeDayEventUserNode
  00423	e9 17 fc ff ff	 jmp	 $LN38@CreatEvent
$LN3@CreatEvent:

; 153  : 		break;
; 154  : 	case EVT_HERO_EXP_BOOST:
; 155  : 		pNode = new HeroExpBoostEventUserNode;

  00428	6a 18		 push	 24			; 00000018H
  0042a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0042f	59		 pop	 ecx
  00430	8b c8		 mov	 ecx, eax
  00432	89 4d 08	 mov	 DWORD PTR $T506364[ebp], ecx
  00435	c7 45 fc 1c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0043c	85 c9		 test	 ecx, ecx
  0043e	0f 84 f9 fb ff
	ff		 je	 $LN37@CreatEvent
  00444	e8 00 00 00 00	 call	 ??0HeroExpBoostEventUserNode@@QAE@XZ ; HeroExpBoostEventUserNode::HeroExpBoostEventUserNode
  00449	e9 f1 fb ff ff	 jmp	 $LN38@CreatEvent
$LN2@CreatEvent:

; 156  : 		break;
; 157  : 	default:
; 158  : 		LOG.PrintTimeAndLog( 0, "Fail Create Event Node :%d", (int) eEventType );

  0044e	57		 push	 edi
  0044f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LCFCFC@Fail?5Create?5Event?5Node?5?3?$CFd?$AA@
  00454	6a 00		 push	 0
  00456	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0045c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00462	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@CreatEvent:

; 159  : 		break;
; 160  : 	}
; 161  : 
; 162  : 	if( pNode )

  00465	85 f6		 test	 esi, esi
  00467	74 08		 je	 SHORT $LN1@CreatEvent

; 163  : 		pNode->SetType( eEventType );

  00469	57		 push	 edi
  0046a	8b ce		 mov	 ecx, esi
  0046c	e8 00 00 00 00	 call	 ?SetType@EventUserNode@@QAEXW4EventType@@@Z ; EventUserNode::SetType
$LN1@CreatEvent:

; 164  : 
; 165  : 	return pNode;

  00471	8b c6		 mov	 eax, esi

; 166  : }

  00473	e8 00 00 00 00	 call	 __EH_epilog3
  00478	c2 04 00	 ret	 4
  0047b	90		 npad	 1
$LN126@CreatEvent:
  0047c	00 00 00 00	 DD	 $LN32@CreatEvent
  00480	00 00 00 00	 DD	 $LN31@CreatEvent
  00484	00 00 00 00	 DD	 $LN30@CreatEvent
  00488	00 00 00 00	 DD	 $LN29@CreatEvent
  0048c	00 00 00 00	 DD	 $LN28@CreatEvent
  00490	00 00 00 00	 DD	 $LN27@CreatEvent
  00494	00 00 00 00	 DD	 $LN26@CreatEvent
  00498	00 00 00 00	 DD	 $LN25@CreatEvent
  0049c	00 00 00 00	 DD	 $LN24@CreatEvent
  004a0	00 00 00 00	 DD	 $LN23@CreatEvent
  004a4	00 00 00 00	 DD	 $LN22@CreatEvent
  004a8	00 00 00 00	 DD	 $LN21@CreatEvent
  004ac	00 00 00 00	 DD	 $LN20@CreatEvent
  004b0	00 00 00 00	 DD	 $LN19@CreatEvent
  004b4	00 00 00 00	 DD	 $LN18@CreatEvent
  004b8	00 00 00 00	 DD	 $LN17@CreatEvent
  004bc	00 00 00 00	 DD	 $LN16@CreatEvent
  004c0	00 00 00 00	 DD	 $LN15@CreatEvent
  004c4	00 00 00 00	 DD	 $LN14@CreatEvent
  004c8	00 00 00 00	 DD	 $LN13@CreatEvent
  004cc	00 00 00 00	 DD	 $LN12@CreatEvent
  004d0	00 00 00 00	 DD	 $LN11@CreatEvent
  004d4	00 00 00 00	 DD	 $LN10@CreatEvent
  004d8	00 00 00 00	 DD	 $LN9@CreatEvent
  004dc	00 00 00 00	 DD	 $LN12@CreatEvent
  004e0	00 00 00 00	 DD	 $LN16@CreatEvent
  004e4	00 00 00 00	 DD	 $LN8@CreatEvent
  004e8	00 00 00 00	 DD	 $LN16@CreatEvent
  004ec	00 00 00 00	 DD	 $LN7@CreatEvent
  004f0	00 00 00 00	 DD	 $LN7@CreatEvent
  004f4	00 00 00 00	 DD	 $LN6@CreatEvent
  004f8	00 00 00 00	 DD	 $LN2@CreatEvent
  004fc	00 00 00 00	 DD	 $LN1@CreatEvent
  00500	00 00 00 00	 DD	 $LN1@CreatEvent
  00504	00 00 00 00	 DD	 $LN1@CreatEvent
  00508	00 00 00 00	 DD	 $LN1@CreatEvent
  0050c	00 00 00 00	 DD	 $LN1@CreatEvent
  00510	00 00 00 00	 DD	 $LN2@CreatEvent
  00514	00 00 00 00	 DD	 $LN2@CreatEvent
  00518	00 00 00 00	 DD	 $LN2@CreatEvent
  0051c	00 00 00 00	 DD	 $LN4@CreatEvent
  00520	00 00 00 00	 DD	 $LN3@CreatEvent
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T506252[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$1:
  0000a	ff 75 08	 push	 DWORD PTR $T506256[ebp]
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	59		 pop	 ecx
  00013	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$2:
  00014	ff 75 08	 push	 DWORD PTR $T506260[ebp]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	59		 pop	 ecx
  0001d	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$3:
  0001e	ff 75 08	 push	 DWORD PTR $T506264[ebp]
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	59		 pop	 ecx
  00027	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$4:
  00028	ff 75 08	 push	 DWORD PTR $T506268[ebp]
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	59		 pop	 ecx
  00031	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$5:
  00032	ff 75 08	 push	 DWORD PTR $T506272[ebp]
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	59		 pop	 ecx
  0003b	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$6:
  0003c	ff 75 08	 push	 DWORD PTR $T506276[ebp]
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00044	59		 pop	 ecx
  00045	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$7:
  00046	ff 75 08	 push	 DWORD PTR $T506280[ebp]
  00049	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004e	59		 pop	 ecx
  0004f	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$8:
  00050	ff 75 08	 push	 DWORD PTR $T506284[ebp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00058	59		 pop	 ecx
  00059	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$9:
  0005a	ff 75 08	 push	 DWORD PTR $T506288[ebp]
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00062	59		 pop	 ecx
  00063	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$10:
  00064	ff 75 08	 push	 DWORD PTR $T506292[ebp]
  00067	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006c	59		 pop	 ecx
  0006d	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$11:
  0006e	ff 75 08	 push	 DWORD PTR $T506296[ebp]
  00071	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00076	59		 pop	 ecx
  00077	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$12:
  00078	ff 75 08	 push	 DWORD PTR $T506300[ebp]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
  00081	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$13:
  00082	ff 75 08	 push	 DWORD PTR $T506304[ebp]
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	59		 pop	 ecx
  0008b	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$14:
  0008c	ff 75 08	 push	 DWORD PTR $T506308[ebp]
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00094	59		 pop	 ecx
  00095	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$15:
  00096	ff 75 08	 push	 DWORD PTR $T506312[ebp]
  00099	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009e	59		 pop	 ecx
  0009f	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$16:
  000a0	ff 75 08	 push	 DWORD PTR $T506316[ebp]
  000a3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a8	59		 pop	 ecx
  000a9	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$17:
  000aa	ff 75 08	 push	 DWORD PTR $T506320[ebp]
  000ad	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b2	59		 pop	 ecx
  000b3	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$18:
  000b4	ff 75 08	 push	 DWORD PTR $T506324[ebp]
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000bc	59		 pop	 ecx
  000bd	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$19:
  000be	ff 75 08	 push	 DWORD PTR $T506328[ebp]
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c6	59		 pop	 ecx
  000c7	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$20:
  000c8	ff 75 08	 push	 DWORD PTR $T506332[ebp]
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d0	59		 pop	 ecx
  000d1	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$21:
  000d2	ff 75 08	 push	 DWORD PTR $T506336[ebp]
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	59		 pop	 ecx
  000db	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$22:
  000dc	ff 75 08	 push	 DWORD PTR $T506340[ebp]
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	59		 pop	 ecx
  000e5	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$23:
  000e6	ff 75 08	 push	 DWORD PTR $T506344[ebp]
  000e9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ee	59		 pop	 ecx
  000ef	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$24:
  000f0	ff 75 08	 push	 DWORD PTR $T506348[ebp]
  000f3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000f8	59		 pop	 ecx
  000f9	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$25:
  000fa	ff 75 08	 push	 DWORD PTR $T506352[ebp]
  000fd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00102	59		 pop	 ecx
  00103	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$26:
  00104	ff 75 08	 push	 DWORD PTR $T506356[ebp]
  00107	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010c	59		 pop	 ecx
  0010d	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$27:
  0010e	ff 75 08	 push	 DWORD PTR $T506360[ebp]
  00111	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00116	59		 pop	 ecx
  00117	c3		 ret	 0
__unwindfunclet$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z$28:
  00118	ff 75 08	 push	 DWORD PTR $T506364[ebp]
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	59		 pop	 ecx
  00121	c3		 ret	 0
__ehhandler$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z:
  00122	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00126	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00129	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0012c	33 c8		 xor	 ecx, eax
  0012e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00133	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z
  00138	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z ENDP ; EventUserManager::CreatEventUserNode
PUBLIC	?size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEAAPAVEventUserNode@@I@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEAAPAVEventUserNode@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEAAPAVEventUserNode@@I@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEAAPAVEventUserNode@@I@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::operator[]
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEABQAVEventUserNode@@XZ ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEABQAVEventUserNode@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEABQAVEventUserNode@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEABQAVEventUserNode@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator++
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBE_NPBQAVEventUserNode@@@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBE_NPBQAVEventUserNode@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBE_NPBQAVEventUserNode@@@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBE_NPBQAVEventUserNode@@@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Inside
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXPAPAVEventUserNode@@0@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Orphan_range
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXPAPAVEventUserNode@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXPAPAVEventUserNode@@0@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXPAPAVEventUserNode@@0@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ ; std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >::~_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >::~_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >::~_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVEventUserNode@@@std@@QAE@XZ	; std::allocator<EventUserNode *>::allocator<EventUserNode *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVEventUserNode@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVEventUserNode@@@std@@QAE@XZ PROC	; std::allocator<EventUserNode *>::allocator<EventUserNode *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVEventUserNode@@@std@@QAE@XZ ENDP	; std::allocator<EventUserNode *>::allocator<EventUserNode *>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::capacity
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXXZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEXXZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVEventUserNode@@@std@@QAE@ABV01@@Z ; std::allocator<EventUserNode *>::allocator<EventUserNode *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVEventUserNode@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVEventUserNode@@@std@@QAE@ABV01@@Z PROC ; std::allocator<EventUserNode *>::allocator<EventUserNode *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVEventUserNode@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<EventUserNode *>::allocator<EventUserNode *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@I@Z ; std::allocator<EventUserNode *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@I@Z PROC ; std::allocator<EventUserNode *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@I@Z ENDP ; std::allocator<EventUserNode *>::deallocate
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVEventUserNode@@@std@@QBEIXZ ; std::allocator<EventUserNode *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVEventUserNode@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVEventUserNode@@@std@@QBEIXZ PROC ; std::allocator<EventUserNode *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVEventUserNode@@@std@@QBEIXZ ENDP ; std::allocator<EventUserNode *>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@H@std@@YAPAHAAH@Z			; std::addressof<int>
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@H@std@@YAPAHAAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@H@std@@YAPAHAAH@Z PROC			; std::addressof<int>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@H@std@@YAPAHAAH@Z ENDP			; std::addressof<int>
_TEXT	ENDS
PUBLIC	??$addressof@QAVEventUserNode@@@std@@YAPBQAVEventUserNode@@ABQAV1@@Z ; std::addressof<EventUserNode * const>
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@QAVEventUserNode@@@std@@YAPBQAVEventUserNode@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVEventUserNode@@@std@@YAPBQAVEventUserNode@@ABQAV1@@Z PROC ; std::addressof<EventUserNode * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVEventUserNode@@@std@@YAPBQAVEventUserNode@@ABQAV1@@Z ENDP ; std::addressof<EventUserNode * const>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVEventUserNode@@@std@@YAPAPAVEventUserNode@@IPAPAV1@@Z ; std::_Allocate<EventUserNode *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVEventUserNode@@@std@@YAPAPAVEventUserNode@@IPAPAV1@@Z
_TEXT	SEGMENT
$T506485 = -12						; size = 12
$T506490 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVEventUserNode@@@std@@YAPAPAVEventUserNode@@IPAPAV1@@Z PROC ; std::_Allocate<EventUserNode *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T506490[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T506490[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T506485[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T506485[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506485[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAVEventUserNode@@@std@@YAPAPAVEventUserNode@@IPAPAV1@@Z ENDP ; std::_Allocate<EventUserNode *>
_TEXT	ENDS
PUBLIC	??$forward@AAPAVEventUserNode@@@std@@YAAAPAVEventUserNode@@AAPAV1@@Z ; std::forward<EventUserNode * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAVEventUserNode@@@std@@YAAAPAVEventUserNode@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVEventUserNode@@@std@@YAAAPAVEventUserNode@@AAPAV1@@Z PROC ; std::forward<EventUserNode * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVEventUserNode@@@std@@YAAAPAVEventUserNode@@AAPAV1@@Z ENDP ; std::forward<EventUserNode * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVEventUserNode@@@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@AAPAV2@@Z ; std::allocator<EventUserNode *>::construct<EventUserNode * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAVEventUserNode@@@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVEventUserNode@@@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@AAPAV2@@Z PROC ; std::allocator<EventUserNode *>::construct<EventUserNode * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAVEventUserNode@@@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@AAPAV2@@Z ENDP ; std::allocator<EventUserNode *>::construct<EventUserNode * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVEventUserNode@@@std@@YAABQAVEventUserNode@@ABQAV1@@Z ; std::forward<EventUserNode * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAVEventUserNode@@@std@@YAABQAVEventUserNode@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVEventUserNode@@@std@@YAABQAVEventUserNode@@ABQAV1@@Z PROC ; std::forward<EventUserNode * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVEventUserNode@@@std@@YAABQAVEventUserNode@@ABQAV1@@Z ENDP ; std::forward<EventUserNode * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVEventUserNode@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVEventUserNode@@0@Z ; std::_Ptr_cat<EventUserNode *,EventUserNode *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVEventUserNode@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVEventUserNode@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVEventUserNode@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVEventUserNode@@0@Z PROC ; std::_Ptr_cat<EventUserNode *,EventUserNode *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAVEventUserNode@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVEventUserNode@@0@Z ENDP ; std::_Ptr_cat<EventUserNode *,EventUserNode *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<EventUserNode * *,EventUserNode * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<EventUserNode * *,EventUserNode * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<EventUserNode * *,EventUserNode * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<EventUserNode *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<EventUserNode *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<EventUserNode *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVEventUserNode@@ABQAV1@@std@@YAXPAPAVEventUserNode@@ABQAV1@@Z ; std::_Construct<EventUserNode *,EventUserNode * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@PAVEventUserNode@@ABQAV1@@std@@YAXPAPAVEventUserNode@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVEventUserNode@@ABQAV1@@std@@YAXPAPAVEventUserNode@@ABQAV1@@Z PROC ; std::_Construct<EventUserNode *,EventUserNode * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAVEventUserNode@@ABQAV1@@std@@YAXPAPAVEventUserNode@@ABQAV1@@Z ENDP ; std::_Construct<EventUserNode *,EventUserNode * const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVEventUserNode@@@std@@YAPAPAVEventUserNode@@PAPAV1@@Z ; std::_Val_type<EventUserNode * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVEventUserNode@@@std@@YAPAPAVEventUserNode@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVEventUserNode@@@std@@YAPAPAVEventUserNode@@PAPAV1@@Z PROC ; std::_Val_type<EventUserNode * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVEventUserNode@@@std@@YAPAPAVEventUserNode@@PAPAV1@@Z ENDP ; std::_Val_type<EventUserNode * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVEventUserNode@@PAV1@PAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<EventUserNode *,EventUserNode *,EventUserNode *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVEventUserNode@@PAV1@PAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVEventUserNode@@PAV1@PAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<EventUserNode *,EventUserNode *,EventUserNode *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAVEventUserNode@@PAV1@PAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<EventUserNode *,EventUserNode *,EventUserNode *>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?GetMaxDBValue@ioEventManager@@QBEHXZ		; ioEventManager::GetMaxDBValue
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioeventmanager.h
;	COMDAT ?GetMaxDBValue@ioEventManager@@QBEHXZ
_TEXT	SEGMENT
?GetMaxDBValue@ioEventManager@@QBEHXZ PROC		; ioEventManager::GetMaxDBValue, COMDAT
; _this$ = ecx

; 312  : 	int GetMaxDBValue() const { return m_iMaxDBValue; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetMaxDBValue@ioEventManager@@QBEHXZ ENDP		; ioEventManager::GetMaxDBValue
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T506561 = -12						; size = 12
$T506565 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@2
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T506565[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T506565[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T506561[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T506561[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506561[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
PUBLIC	?GetSize@EventUserManager@@QBEHXZ		; EventUserManager::GetSize
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioeventusermanager.cpp
;	COMDAT ?GetSize@EventUserManager@@QBEHXZ
_TEXT	SEGMENT
?GetSize@EventUserManager@@QBEHXZ PROC			; EventUserManager::GetSize, COMDAT
; _this$ = ecx

; 43   : 	return m_EventUserNodeVec.size();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 44   : }

  00009	c3		 ret	 0
?GetSize@EventUserManager@@QBEHXZ ENDP			; EventUserManager::GetSize
_TEXT	ENDS
PUBLIC	?GetType@EventUserManager@@QAE?AW4EventType@@H@Z ; EventUserManager::GetType
; Function compile flags: /Ogsp
;	COMDAT ?GetType@EventUserManager@@QAE?AW4EventType@@H@Z
_TEXT	SEGMENT
_iArray$ = 8						; size = 4
?GetType@EventUserManager@@QAE?AW4EventType@@H@Z PROC	; EventUserManager::GetType, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 	if( !COMPARE( iArray, 0, (int) m_EventUserNodeVec.size() ) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iArray$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 19		 js	 SHORT $LN1@GetType
  0000a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000d	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00010	c1 fa 02	 sar	 edx, 2
  00013	3b c2		 cmp	 eax, edx
  00015	7d 0c		 jge	 SHORT $LN1@GetType

; 50   : 
; 51   : 	return m_EventUserNodeVec[iArray]->GetType();

  00017	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001a	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0001d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001f	ff 10		 call	 DWORD PTR [eax]
  00021	eb 02		 jmp	 SHORT $LN3@GetType
$LN1@GetType:

; 49   : 		return EVT_NONE;

  00023	33 c0		 xor	 eax, eax
$LN3@GetType:

; 52   : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetType@EventUserManager@@QAE?AW4EventType@@H@Z ENDP	; EventUserManager::GetType
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEAAPAVEventUserNode@@XZ ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEAAPAVEventUserNode@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEAAPAVEventUserNode@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBEAAPAVEventUserNode@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@V?$allocator@PAVEventUserNode@@@1@@Z ; std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@V?$allocator@PAVEventUserNode@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@V?$allocator@PAVEventUserNode@@@1@@Z PROC ; std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@V?$allocator@PAVEventUserNode@@@1@@Z ENDP ; std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBEIXZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEII@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEII@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEII@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVEventUserNode@@@std@@QAEPAPAVEventUserNode@@I@Z ; std::allocator<EventUserNode *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVEventUserNode@@@std@@QAEPAPAVEventUserNode@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVEventUserNode@@@std@@QAEPAPAVEventUserNode@@I@Z PROC ; std::allocator<EventUserNode *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAVEventUserNode@@@std@@YAPAPAVEventUserNode@@IPAPAV1@@Z ; std::_Allocate<EventUserNode *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAVEventUserNode@@@std@@QAEPAPAVEventUserNode@@I@Z ENDP ; std::allocator<EventUserNode *>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@AAPAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@AAPAV2@@Z ; std::_Cons_val<std::allocator<EventUserNode *>,EventUserNode *,EventUserNode * &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@AAPAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@AAPAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<EventUserNode *>,EventUserNode *,EventUserNode * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@AAPAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<EventUserNode *>,EventUserNode *,EventUserNode * &>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00@Z ; std::_Move<EventUserNode * *,EventUserNode * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00@Z
_TEXT	SEGMENT
__Cat$506695 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00@Z PROC ; std::_Move<EventUserNode * *,EventUserNode * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$506695[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<EventUserNode * *,EventUserNode * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00@Z ENDP ; std::_Move<EventUserNode * *,EventUserNode * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@@Z ; std::_Destroy_range<std::allocator<EventUserNode *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@@Z PROC ; std::_Destroy_range<std::allocator<EventUserNode *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVEventUserNode@@@std@@@std@@YAXPAPAVEventUserNode@@0AAV?$allocator@PAVEventUserNode@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<EventUserNode *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z	; std::allocator<int>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z PROC	; std::allocator<int>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct@2:

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z ENDP	; std::allocator<int>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@ABQAV3@@Z ; std::allocator<EventUserNode *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@ABQAV3@@Z PROC ; std::allocator<EventUserNode *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@3:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVEventUserNode@@@std@@QAEXPAPAVEventUserNode@@ABQAV3@@Z ENDP ; std::allocator<EventUserNode *>::construct
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVEventUserNode@@PAPAV1@V?$allocator@PAVEventUserNode@@@std@@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@@Z ; std::_Uninitialized_move<EventUserNode * *,EventUserNode * *,std::allocator<EventUserNode *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVEventUserNode@@PAPAV1@V?$allocator@PAVEventUserNode@@@std@@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVEventUserNode@@PAPAV1@V?$allocator@PAVEventUserNode@@@std@@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@@Z PROC ; std::_Uninitialized_move<EventUserNode * *,EventUserNode * *,std::allocator<EventUserNode *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVEventUserNode@@PAPAV1@V?$allocator@PAVEventUserNode@@@std@@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@@Z ENDP ; std::_Uninitialized_move<EventUserNode * *,EventUserNode * *,std::allocator<EventUserNode *> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@H@std@@YAPAHIPAH@Z ; std::_Allocate<int>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::vector<EventUserNode *,std::allocator<EventUserNode *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::vector<EventUserNode *,std::allocator<EventUserNode *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::vector<EventUserNode *,std::allocator<EventUserNode *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@std@@QAE@PAPAVEventUserNode@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >::_Vector_iterator<std::_Vector_val<EventUserNode *,std::allocator<EventUserNode *> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXPAPAVEventUserNode@@0@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXPAPAVEventUserNode@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXPAPAVEventUserNode@@0@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXPAPAVEventUserNode@@0@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z ; std::_Cons_val<std::allocator<int>,int,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@ABQAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@ABQAV2@@Z ; std::_Cons_val<std::allocator<EventUserNode *>,EventUserNode *,EventUserNode * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@ABQAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@ABQAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<EventUserNode *>,EventUserNode *,EventUserNode * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@3:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVEventUserNode@@@std@@PAVEventUserNode@@ABQAV3@@std@@YAXAAV?$allocator@PAVEventUserNode@@@0@PAPAVEventUserNode@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<EventUserNode *>,EventUserNode *,EventUserNode * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVEventUserNode@@@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEPAPAVEventUserNode@@PAPAV2@00@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Umove<EventUserNode * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVEventUserNode@@@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEPAPAVEventUserNode@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVEventUserNode@@@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEPAPAVEventUserNode@@PAPAV2@00@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Umove<EventUserNode * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVEventUserNode@@PAPAV1@V?$allocator@PAVEventUserNode@@@std@@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@@Z ; std::_Uninitialized_move<EventUserNode * *,EventUserNode * *,std::allocator<EventUserNode *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVEventUserNode@@@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEPAPAVEventUserNode@@PAPAV2@00@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Umove<EventUserNode * *>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	?GetNodeSize@EventUserManager@@QBEHW4EventType@@@Z ; EventUserManager::GetNodeSize
EXTRN	?GetSize@EventUserNode@@QBEHXZ:PROC		; EventUserNode::GetSize
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioeventusermanager.cpp
;	COMDAT ?GetNodeSize@EventUserManager@@QBEHW4EventType@@@Z
_TEXT	SEGMENT
_eEventType$ = 8					; size = 4
?GetNodeSize@EventUserManager@@QBEHW4EventType@@@Z PROC	; EventUserManager::GetNodeSize, COMDAT
; _this$ = ecx

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 208  : 	for( EventUserNodeVec::const_iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000a	eb 0e		 jmp	 SHORT $LN34@GetNodeSiz
$LL13@GetNodeSiz:

; 209  : 	{
; 210  : 		if( (*it)->GetType() == eEventType )

  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	ff 10		 call	 DWORD PTR [eax]
  00012	3b 45 08	 cmp	 eax, DWORD PTR _eEventType$[ebp]
  00015	74 10		 je	 SHORT $LN32@GetNodeSiz

; 208  : 	for( EventUserNodeVec::const_iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00017	83 c6 04	 add	 esi, 4
$LN34@GetNodeSiz:
  0001a	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  0001d	75 ed		 jne	 SHORT $LL13@GetNodeSiz

; 212  : 	}
; 213  : 
; 214  : 	return 0;

  0001f	33 c0		 xor	 eax, eax
$LN5@GetNodeSiz:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 215  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN32@GetNodeSiz:

; 211  : 			return (*it)->GetSize();

  00027	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00029	e8 00 00 00 00	 call	 ?GetSize@EventUserNode@@QBEHXZ ; EventUserNode::GetSize
  0002e	eb f1		 jmp	 SHORT $LN5@GetNodeSiz
?GetNodeSize@EventUserManager@@QBEHW4EventType@@@Z ENDP	; EventUserManager::GetNodeSize
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@XZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::end
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@0@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$507181 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@0@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$507181[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAVEventUserNode@@PAPAV1@@std@@YAPAPAVEventUserNode@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<EventUserNode * *,EventUserNode * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@0@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXXZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXXZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXI@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXI@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAVEventUserNode@@@std@@YAPAPAVEventUserNode@@IPAPAV1@@Z ; std::_Allocate<EventUserNode *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVEventUserNode@@PAPAV1@V?$allocator@PAVEventUserNode@@@std@@@std@@YAPAPAVEventUserNode@@PAPAV1@00AAV?$allocator@PAVEventUserNode@@@0@@Z ; std::_Uninitialized_move<EventUserNode * *,EventUserNode * *,std::allocator<EventUserNode *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXI@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::reserve
_TEXT	ENDS
PUBLIC	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@H@std@@YAPAHIPAH@Z ; std::_Allocate<int>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve@2:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve@2:
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::reserve
_TEXT	ENDS
PUBLIC	?SetValue@EventUserManager@@QAEXW4EventType@@HH@Z ; EventUserManager::SetValue
EXTRN	?SetValue@EventUserNode@@QAEXHH@Z:PROC		; EventUserNode::SetValue
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioeventusermanager.cpp
;	COMDAT ?SetValue@EventUserManager@@QAEXW4EventType@@HH@Z
_TEXT	SEGMENT
_eEventType$ = 8					; size = 4
_iArray$ = 12						; size = 4
_iValue$ = 16						; size = 4
?SetValue@EventUserManager@@QAEXW4EventType@@HH@Z PROC	; EventUserManager::SetValue, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 170  : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000a	eb 0e		 jmp	 SHORT $LN44@SetValue
$LL17@SetValue:

; 171  : 	{
; 172  : 		if( (*it)->GetType() == eEventType )

  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	ff 10		 call	 DWORD PTR [eax]
  00012	3b 45 08	 cmp	 eax, DWORD PTR _eEventType$[ebp]
  00015	74 0a		 je	 SHORT $LN42@SetValue

; 170  : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00017	83 c6 04	 add	 esi, 4
$LN44@SetValue:
  0001a	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  0001d	75 ed		 jne	 SHORT $LL17@SetValue

; 171  : 	{
; 172  : 		if( (*it)->GetType() == eEventType )

  0001f	eb 0d		 jmp	 SHORT $LN2@SetValue
$LN42@SetValue:

; 173  : 		{
; 174  : 			(*it)->SetValue( iArray, iValue );

  00021	ff 75 10	 push	 DWORD PTR _iValue$[ebp]
  00024	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00026	ff 75 0c	 push	 DWORD PTR _iArray$[ebp]
  00029	e8 00 00 00 00	 call	 ?SetValue@EventUserNode@@QAEXHH@Z ; EventUserNode::SetValue
$LN2@SetValue:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 175  : 			break;
; 176  : 		}
; 177  : 	}
; 178  : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?SetValue@EventUserManager@@QAEXW4EventType@@HH@Z ENDP	; EventUserManager::SetValue
_TEXT	ENDS
PUBLIC	?GetValue@EventUserManager@@QAEHW4EventType@@H@Z ; EventUserManager::GetValue
EXTRN	?GetValue@EventUserNode@@QAEHH@Z:PROC		; EventUserNode::GetValue
; Function compile flags: /Ogsp
;	COMDAT ?GetValue@EventUserManager@@QAEHW4EventType@@H@Z
_TEXT	SEGMENT
_eEventType$ = 8					; size = 4
_iArray$ = 12						; size = 4
?GetValue@EventUserManager@@QAEHW4EventType@@H@Z PROC	; EventUserManager::GetValue, COMDAT
; _this$ = ecx

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 182  : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000a	eb 0e		 jmp	 SHORT $LN44@GetValue
$LL17@GetValue:

; 183  : 	{
; 184  : 		if( (*it)->GetType() == eEventType )

  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	ff 10		 call	 DWORD PTR [eax]
  00012	3b 45 08	 cmp	 eax, DWORD PTR _eEventType$[ebp]
  00015	74 10		 je	 SHORT $LN42@GetValue

; 182  : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00017	83 c6 04	 add	 esi, 4
$LN44@GetValue:
  0001a	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  0001d	75 ed		 jne	 SHORT $LL17@GetValue

; 187  : 		}
; 188  : 	}
; 189  : 
; 190  : 	return EVT_NONE;

  0001f	33 c0		 xor	 eax, eax
$LN5@GetValue:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 191  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN42@GetValue:

; 185  : 		{
; 186  : 			return (*it)->GetValue( iArray );

  00027	ff 75 0c	 push	 DWORD PTR _iArray$[ebp]
  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	e8 00 00 00 00	 call	 ?GetValue@EventUserNode@@QAEHH@Z ; EventUserNode::GetValue
  00031	eb ee		 jmp	 SHORT $LN5@GetValue
?GetValue@EventUserManager@@QAEHW4EventType@@H@Z ENDP	; EventUserManager::GetValue
_TEXT	ENDS
PUBLIC	?GetEventUserNode@EventUserManager@@QAEPAVEventUserNode@@W4EventType@@@Z ; EventUserManager::GetEventUserNode
; Function compile flags: /Ogsp
;	COMDAT ?GetEventUserNode@EventUserManager@@QAEPAVEventUserNode@@W4EventType@@@Z
_TEXT	SEGMENT
_eEventType$ = 8					; size = 4
?GetEventUserNode@EventUserManager@@QAEPAVEventUserNode@@W4EventType@@@Z PROC ; EventUserManager::GetEventUserNode, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 195  : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000a	eb 0e		 jmp	 SHORT $LN44@GetEventUs
$LL17@GetEventUs:

; 196  : 	{
; 197  : 		if( (*it)->GetType() == eEventType )

  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	ff 10		 call	 DWORD PTR [eax]
  00012	3b 45 08	 cmp	 eax, DWORD PTR _eEventType$[ebp]
  00015	74 10		 je	 SHORT $LN42@GetEventUs

; 195  : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00017	83 c6 04	 add	 esi, 4
$LN44@GetEventUs:
  0001a	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  0001d	75 ed		 jne	 SHORT $LL17@GetEventUs

; 200  : 		}
; 201  : 	}
; 202  : 
; 203  : 	return NULL;

  0001f	33 c0		 xor	 eax, eax
$LN5@GetEventUs:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 204  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN42@GetEventUs:

; 198  : 		{
; 199  : 			return (*it);

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	eb f6		 jmp	 SHORT $LN5@GetEventUs
?GetEventUserNode@EventUserManager@@QAEPAVEventUserNode@@W4EventType@@@Z ENDP ; EventUserManager::GetEventUserNode
_TEXT	ENDS
PUBLIC	??1?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::~vector<EventUserNode *,std::allocator<EventUserNode *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::~vector<EventUserNode *,std::allocator<EventUserNode *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Tidy
??1?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::~vector<EventUserNode *,std::allocator<EventUserNode *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T507715 = -4						; size = 4
?clear@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXXZ PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T507715[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@0@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXXZ ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXI@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXI@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IBEII@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXI@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXI@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN1@Reserve@2:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7EventUserManager@@6B@			; EventUserManager::`vftable'
PUBLIC	??0EventUserManager@@QAE@XZ			; EventUserManager::EventUserManager
PUBLIC	??_R4EventUserManager@@6B@			; EventUserManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVEventUserManager@@@8			; EventUserManager `RTTI Type Descriptor'
PUBLIC	??_R3EventUserManager@@8			; EventUserManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2EventUserManager@@8			; EventUserManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@EventUserManager@@8		; EventUserManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EEventUserManager@@UAEPAXI@Z:PROC		; EventUserManager::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@EventUserManager@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@EventUserManager@@8 DD FLAT:??_R0?AVEventUserManager@@@8 ; EventUserManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3EventUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R2EventUserManager@@8
rdata$r	SEGMENT
??_R2EventUserManager@@8 DD FLAT:??_R1A@?0A@EA@EventUserManager@@8 ; EventUserManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3EventUserManager@@8
rdata$r	SEGMENT
??_R3EventUserManager@@8 DD 00H				; EventUserManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2EventUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEventUserManager@@@8
_DATA	SEGMENT
??_R0?AVEventUserManager@@@8 DD FLAT:??_7type_info@@6B@	; EventUserManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEventUserManager@@', 00H
_DATA	ENDS
;	COMDAT ??_R4EventUserManager@@6B@
rdata$r	SEGMENT
??_R4EventUserManager@@6B@ DD 00H			; EventUserManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVEventUserManager@@@8
	DD	FLAT:??_R3EventUserManager@@8
rdata$r	ENDS
;	COMDAT ??_7EventUserManager@@6B@
CONST	SEGMENT
??_7EventUserManager@@6B@ DD FLAT:??_R4EventUserManager@@6B@ ; EventUserManager::`vftable'
	DD	FLAT:??_EEventUserManager@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioeventusermanager.cpp
CONST	ENDS
;	COMDAT ??0EventUserManager@@QAE@XZ
_TEXT	SEGMENT
??0EventUserManager@@QAE@XZ PROC			; EventUserManager::EventUserManager, COMDAT
; _this$ = ecx

; 6    : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7EventUserManager@@6B@
  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00010	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 7    : 
; 8    : }

  00013	c3		 ret	 0
??0EventUserManager@@QAE@XZ ENDP			; EventUserManager::EventUserManager
_TEXT	ENDS
PUBLIC	?Clear@EventUserManager@@QAEXXZ			; EventUserManager::Clear
; Function compile flags: /Ogsp
;	COMDAT ?Clear@EventUserManager@@QAEXXZ
_TEXT	SEGMENT
$T508020 = -4						; size = 4
?Clear@EventUserManager@@QAEXXZ PROC			; EventUserManager::Clear, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx

; 34   : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  00008	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0000b	57		 push	 edi
  0000c	eb 13		 jmp	 SHORT $LN67@Clear
$LL19@Clear:

; 35   : 	{
; 36   : 		SAFEDELETE( *it );

  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	85 c9		 test	 ecx, ecx
  00012	74 0a		 je	 SHORT $LN3@Clear
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	6a 01		 push	 1
  00018	ff 50 14	 call	 DWORD PTR [eax+20]
  0001b	83 26 00	 and	 DWORD PTR [esi], 0
$LN3@Clear:

; 34   : 	for(EventUserNodeVec::iterator it = m_EventUserNodeVec.begin(); it != m_EventUserNodeVec.end(); ++it)

  0001e	83 c6 04	 add	 esi, 4
$LN67@Clear:
  00021	3b 73 08	 cmp	 esi, DWORD PTR [ebx+8]
  00024	75 e8		 jne	 SHORT $LL19@Clear

; 37   : 	}
; 38   : 	m_EventUserNodeVec.clear();

  00026	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00029	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	8d 45 fc	 lea	 eax, DWORD PTR $T508020[ebp]
  00031	50		 push	 eax
  00032	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00035	e8 00 00 00 00	 call	 ?erase@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@@2@0@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::erase
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx

; 39   : }

  0003d	c9		 leave
  0003e	c3		 ret	 0
?Clear@EventUserManager@@QAEXXZ ENDP			; EventUserManager::Clear
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 635  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 636  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN41@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 17		 jmp	 SHORT $LN48@push_back
$LN4@push_back:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN41@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN48@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN41@push_back:

; 651  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXABQAVEventUserNode@@@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXABQAVEventUserNode@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXABQAVEventUserNode@@@Z PROC ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back@2
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXI@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back@2
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXI@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back@2
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back@2:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back@2:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXABQAVEventUserNode@@@Z ENDP ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::push_back
_TEXT	ENDS
PUBLIC	??1EventUserManager@@UAE@XZ			; EventUserManager::~EventUserManager
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1EventUserManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1EventUserManager@@UAE@XZ$0
__ehfuncinfo$??1EventUserManager@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1EventUserManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioeventusermanager.cpp
xdata$x	ENDS
;	COMDAT ??1EventUserManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1EventUserManager@@UAE@XZ PROC			; EventUserManager::~EventUserManager, COMDAT
; _this$ = ecx

; 11   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1EventUserManager@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7EventUserManager@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 12   : 	Clear();

  0001b	e8 00 00 00 00	 call	 ?Clear@EventUserManager@@QAEXXZ ; EventUserManager::Clear

; 13   : }

  00020	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00024	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@IAEXXZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::_Tidy
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1EventUserManager@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAE@XZ ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::~vector<EventUserNode *,std::allocator<EventUserNode *> >
__ehhandler$??1EventUserManager@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1EventUserManager@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1EventUserManager@@UAE@XZ ENDP			; EventUserManager::~EventUserManager
PUBLIC	?Init@EventUserManager@@QAEXXZ			; EventUserManager::Init
EXTRN	?SetSize@EventUserNode@@QAEXH@Z:PROC		; EventUserNode::SetSize
EXTRN	?GetType@ioEventManager@@QAE?AW4EventType@@H@Z:PROC ; ioEventManager::GetType
EXTRN	?GetSize@ioEventManager@@QBEHXZ:PROC		; ioEventManager::GetSize
EXTRN	?GetSingleton@ioEventManager@@SAAAV1@XZ:PROC	; ioEventManager::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?Init@EventUserManager@@QAEXXZ
_TEXT	SEGMENT
_iSize$ = -12						; size = 4
_pNode$505087 = -8					; size = 4
_i$505083 = -4						; size = 4
?Init@EventUserManager@@QAEXXZ PROC			; EventUserManager::Init, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 17   : 	Clear();

  00009	e8 00 00 00 00	 call	 ?Clear@EventUserManager@@QAEXXZ ; EventUserManager::Clear

; 18   : 	int iSize = g_EventMgr.GetSize();

  0000e	e8 00 00 00 00	 call	 ?GetSingleton@ioEventManager@@SAAAV1@XZ ; ioEventManager::GetSingleton
  00013	8b c8		 mov	 ecx, eax
  00015	e8 00 00 00 00	 call	 ?GetSize@ioEventManager@@QBEHXZ ; ioEventManager::GetSize

; 19   : 	for (int i = 0; i < iSize ; i++)

  0001a	83 65 fc 00	 and	 DWORD PTR _i$505083[ebp], 0
  0001e	89 45 f4	 mov	 DWORD PTR _iSize$[ebp], eax
  00021	85 c0		 test	 eax, eax
  00023	7e 66		 jle	 SHORT $LN3@Init
  00025	56		 push	 esi
  00026	57		 push	 edi
$LL12@Init:

; 20   : 	{
; 21   : 		EventUserNode *pNode = CreatEventUserNode( g_EventMgr.GetType( i ) );

  00027	ff 75 fc	 push	 DWORD PTR _i$505083[ebp]
  0002a	e8 00 00 00 00	 call	 ?GetSingleton@ioEventManager@@SAAAV1@XZ ; ioEventManager::GetSingleton
  0002f	8b c8		 mov	 ecx, eax
  00031	e8 00 00 00 00	 call	 ?GetType@ioEventManager@@QAE?AW4EventType@@H@Z ; ioEventManager::GetType
  00036	50		 push	 eax
  00037	8b cb		 mov	 ecx, ebx
  00039	e8 00 00 00 00	 call	 ?CreatEventUserNode@EventUserManager@@IAEPAVEventUserNode@@W4EventType@@@Z ; EventUserManager::CreatEventUserNode
  0003e	8b f0		 mov	 esi, eax
  00040	89 75 f8	 mov	 DWORD PTR _pNode$505087[ebp], esi

; 22   : 		if( pNode )

  00043	85 f6		 test	 esi, esi
  00045	74 37		 je	 SHORT $LN4@Init

; 23   : 		{
; 24   : 			if( !pNode->IsEmptyValue() )

  00047	8b 06		 mov	 eax, DWORD PTR [esi]
  00049	8b ce		 mov	 ecx, esi
  0004b	ff 50 0c	 call	 DWORD PTR [eax+12]
  0004e	84 c0		 test	 al, al
  00050	75 19		 jne	 SHORT $LN1@Init

; 25   : 				pNode->SetSize( g_EventMgr.GetMaxDBValue() + pNode->GetAddSize() );

  00052	e8 00 00 00 00	 call	 ?GetSingleton@ioEventManager@@SAAAV1@XZ ; ioEventManager::GetSingleton
  00057	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	8b ce		 mov	 ecx, esi
  0005e	ff 50 08	 call	 DWORD PTR [eax+8]
  00061	03 c7		 add	 eax, edi
  00063	50		 push	 eax
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?SetSize@EventUserNode@@QAEXH@Z ; EventUserNode::SetSize
$LN1@Init:

; 26   : 			pNode->Init();

  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	8b ce		 mov	 ecx, esi
  0006f	ff 50 04	 call	 DWORD PTR [eax+4]

; 27   : 			m_EventUserNodeVec.push_back( pNode );

  00072	8d 45 f8	 lea	 eax, DWORD PTR _pNode$505087[ebp]
  00075	50		 push	 eax
  00076	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00079	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVEventUserNode@@V?$allocator@PAVEventUserNode@@@std@@@std@@QAEXABQAVEventUserNode@@@Z ; std::vector<EventUserNode *,std::allocator<EventUserNode *> >::push_back
$LN4@Init:

; 19   : 	for (int i = 0; i < iSize ; i++)

  0007e	ff 45 fc	 inc	 DWORD PTR _i$505083[ebp]
  00081	8b 45 fc	 mov	 eax, DWORD PTR _i$505083[ebp]
  00084	3b 45 f4	 cmp	 eax, DWORD PTR _iSize$[ebp]
  00087	7c 9e		 jl	 SHORT $LL12@Init
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
$LN3@Init:
  0008b	5b		 pop	 ebx

; 28   : 		}
; 29   : 	}
; 30   : }

  0008c	c9		 leave
  0008d	c3		 ret	 0
?Init@EventUserManager@@QAEXXZ ENDP			; EventUserManager::Init
_TEXT	ENDS
PUBLIC	?GetSameClassEventTypeVec@EventUserManager@@QAEXW4EventType@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; EventUserManager::GetSameClassEventTypeVec
; Function compile flags: /Ogsp
;	COMDAT ?GetSameClassEventTypeVec@EventUserManager@@QAEXW4EventType@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
$T508307 = 8						; size = 4
$T508306 = 8						; size = 4
$T508305 = 8						; size = 4
$T508304 = 8						; size = 4
$T508303 = 8						; size = 4
_eParentEventType$ = 8					; size = 4
_rvEventTypeVec$ = 12					; size = 4
?GetSameClassEventTypeVec@EventUserManager@@QAEXW4EventType@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; EventUserManager::GetSameClassEventTypeVec, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  : 	if( eParentEventType == EVT_BUY_ITEM )

  00003	6a 10		 push	 16			; 00000010H
  00005	58		 pop	 eax
  00006	39 45 08	 cmp	 DWORD PTR _eParentEventType$[ebp], eax
  00009	75 2b		 jne	 SHORT $LN3@GetSameCla

; 220  : 	{
; 221  : 		rvEventTypeVec.push_back( EVT_BUY_ITEM );

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _rvEventTypeVec$[ebp]
  0000e	89 45 08	 mov	 DWORD PTR $T508303[ebp], eax
  00011	8d 45 08	 lea	 eax, DWORD PTR $T508303[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back

; 222  : 		rvEventTypeVec.push_back( EVT_BUY_ITEM_2 );

  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _rvEventTypeVec$[ebp]
  0001d	8d 45 08	 lea	 eax, DWORD PTR $T508304[ebp]
  00020	50		 push	 eax
  00021	c7 45 08 19 00
	00 00		 mov	 DWORD PTR $T508304[ebp], 25 ; 00000019H
  00028	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back

; 223  : 		rvEventTypeVec.push_back( EVT_BUY_ITEM_3 );

  0002d	c7 45 08 1b 00
	00 00		 mov	 DWORD PTR $T508305[ebp], 27 ; 0000001bH
  00034	eb 1e		 jmp	 SHORT $LN6@GetSameCla
$LN3@GetSameCla:

; 224  : 	}
; 225  : 	else if( eParentEventType == EVT_ONE_DAY_GIFT )

  00036	6a 14		 push	 20			; 00000014H
  00038	58		 pop	 eax
  00039	39 45 08	 cmp	 DWORD PTR _eParentEventType$[ebp], eax
  0003c	75 22		 jne	 SHORT $LN1@GetSameCla

; 226  : 	{
; 227  : 		rvEventTypeVec.push_back( EVT_ONE_DAY_GIFT );

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _rvEventTypeVec$[ebp]
  00041	89 45 08	 mov	 DWORD PTR $T508306[ebp], eax
  00044	8d 45 08	 lea	 eax, DWORD PTR $T508306[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back

; 228  : 		rvEventTypeVec.push_back( EVT_ONE_DAY_GIFT_2 );

  0004d	c7 45 08 18 00
	00 00		 mov	 DWORD PTR $T508307[ebp], 24 ; 00000018H
$LN6@GetSameCla:
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _rvEventTypeVec$[ebp]
  00057	8d 45 08	 lea	 eax, DWORD PTR $T508307[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
$LN1@GetSameCla:

; 229  : 	}
; 230  : }

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?GetSameClassEventTypeVec@EventUserManager@@QAEXW4EventType@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; EventUserManager::GetSameClassEventTypeVec
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GEventUserManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GEventUserManager@@UAEPAXI@Z PROC			; EventUserManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1EventUserManager@@UAE@XZ ; EventUserManager::~EventUserManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GEventUserManager@@UAEPAXI@Z ENDP			; EventUserManager::`scalar deleting destructor'
_TEXT	ENDS
END
