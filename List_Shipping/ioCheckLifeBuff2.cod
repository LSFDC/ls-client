; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioCheckLifeBuff2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ ; ioPlayStage::GetBaseCharList
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplaystage.h
;	COMDAT ?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ PROC ; ioPlayStage::GetBaseCharList, COMDAT
; _this$ = ecx

; 755  : 	const BaseCharList& GetBaseCharList() const { return m_BaseCharList; }

  00000	8d 41 2c	 lea	 eax, DWORD PTR [ecx+44]
  00003	c3		 ret	 0
?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ ENDP ; ioPlayStage::GetBaseCharList
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_7ioCheckLifeBuff2@@6B@			; ioCheckLifeBuff2::`vftable'
PUBLIC	??0ioCheckLifeBuff2@@QAE@XZ			; ioCheckLifeBuff2::ioCheckLifeBuff2
PUBLIC	??_R4ioCheckLifeBuff2@@6B@			; ioCheckLifeBuff2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioCheckLifeBuff2@@@8			; ioCheckLifeBuff2 `RTTI Type Descriptor'
PUBLIC	??_R3ioCheckLifeBuff2@@8			; ioCheckLifeBuff2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioCheckLifeBuff2@@8			; ioCheckLifeBuff2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioCheckLifeBuff2@@8		; ioCheckLifeBuff2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioCheckLifeBuff2@@UAEXAAVioINILoader@@@Z ; ioCheckLifeBuff2::LoadProperty
PUBLIC	?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ	; ioCheckLifeBuff2::Clone
PUBLIC	?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z ; ioCheckLifeBuff2::StartBuff
PUBLIC	?ApplyStartBuff@ioCheckLifeBuff2@@UAE_NPAVioBaseChar@@KK@Z ; ioCheckLifeBuff2::ApplyStartBuff
PUBLIC	?ProcessBuff@ioCheckLifeBuff2@@UAEXM@Z		; ioCheckLifeBuff2::ProcessBuff
PUBLIC	?EndBuff@ioCheckLifeBuff2@@UAEXXZ		; ioCheckLifeBuff2::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioCheckLifeBuff2@@UAEPAXI@Z:PROC		; ioCheckLifeBuff2::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iochecklifebuff2.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioCheckLifeBuff2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioCheckLifeBuff2@@8 DD FLAT:??_R0?AVioCheckLifeBuff2@@@8 ; ioCheckLifeBuff2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioCheckLifeBuff2@@8
rdata$r	ENDS
;	COMDAT ??_R2ioCheckLifeBuff2@@8
rdata$r	SEGMENT
??_R2ioCheckLifeBuff2@@8 DD FLAT:??_R1A@?0A@EA@ioCheckLifeBuff2@@8 ; ioCheckLifeBuff2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioCheckLifeBuff2@@8
rdata$r	SEGMENT
??_R3ioCheckLifeBuff2@@8 DD 00H				; ioCheckLifeBuff2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioCheckLifeBuff2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioCheckLifeBuff2@@@8
_DATA	SEGMENT
??_R0?AVioCheckLifeBuff2@@@8 DD FLAT:??_7type_info@@6B@	; ioCheckLifeBuff2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioCheckLifeBuff2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioCheckLifeBuff2@@6B@
rdata$r	SEGMENT
??_R4ioCheckLifeBuff2@@6B@ DD 00H			; ioCheckLifeBuff2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioCheckLifeBuff2@@@8
	DD	FLAT:??_R3ioCheckLifeBuff2@@8
rdata$r	ENDS
;	COMDAT ??_7ioCheckLifeBuff2@@6B@
CONST	SEGMENT
??_7ioCheckLifeBuff2@@6B@ DD FLAT:??_R4ioCheckLifeBuff2@@6B@ ; ioCheckLifeBuff2::`vftable'
	DD	FLAT:?LoadProperty@ioCheckLifeBuff2@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioCheckLifeBuff2@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioCheckLifeBuff2@@UAEXM@Z
	DD	FLAT:?EndBuff@ioCheckLifeBuff2@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioCheckLifeBuff2@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioCheckLifeBuff2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCheckLifeBuff2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCheckLifeBuff2@@QAE@XZ$1
__ehfuncinfo$??0ioCheckLifeBuff2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioCheckLifeBuff2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCheckLifeBuff2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioCheckLifeBuff2@@QAE@XZ PROC			; ioCheckLifeBuff2::ioCheckLifeBuff2, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCheckLifeBuff2@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCheckLifeBuff2@@6B@
  0002c	ff d7		 call	 edi
  0002e	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00034	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00038	ff d7		 call	 edi

; 11   : 	m_bSetCreaterBuff = false;

  0003a	c6 86 90 09 00
	00 00		 mov	 BYTE PTR [esi+2448], 0

; 12   : }

  00041	8b c6		 mov	 eax, esi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCheckLifeBuff2@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCheckLifeBuff2@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioCheckLifeBuff2@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCheckLifeBuff2@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCheckLifeBuff2@@QAE@XZ ENDP			; ioCheckLifeBuff2::ioCheckLifeBuff2
PUBLIC	??0ioCheckLifeBuff2@@QAE@ABV0@@Z		; ioCheckLifeBuff2::ioCheckLifeBuff2
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioCheckLifeBuff2@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCheckLifeBuff2@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCheckLifeBuff2@@QAE@ABV0@@Z$1
__ehfuncinfo$??0ioCheckLifeBuff2@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioCheckLifeBuff2@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCheckLifeBuff2@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioCheckLifeBuff2@@QAE@ABV0@@Z PROC			; ioCheckLifeBuff2::ioCheckLifeBuff2, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCheckLifeBuff2@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  0002a	50		 push	 eax
  0002b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCheckLifeBuff2@@6B@
  00037	ff d3		 call	 ebx
  00039	d9 87 7c 09 00
	00		 fld	 DWORD PTR [edi+2428]
  0003f	81 c7 80 09 00
	00		 add	 edi, 2432		; 00000980H
  00045	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]
  0004b	57		 push	 edi
  0004c	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00052	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00056	ff d3		 call	 ebx

; 20   : 	m_bSetCreaterBuff = false;

  00058	c6 86 90 09 00
	00 00		 mov	 BYTE PTR [esi+2448], 0

; 21   : }

  0005f	8b c6		 mov	 eax, esi
  00061	e8 00 00 00 00	 call	 __EH_epilog3
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCheckLifeBuff2@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCheckLifeBuff2@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioCheckLifeBuff2@@QAE@ABV0@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCheckLifeBuff2@@QAE@ABV0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCheckLifeBuff2@@QAE@ABV0@@Z ENDP			; ioCheckLifeBuff2::ioCheckLifeBuff2
PUBLIC	??1ioCheckLifeBuff2@@UAE@XZ			; ioCheckLifeBuff2::~ioCheckLifeBuff2
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioCheckLifeBuff2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioCheckLifeBuff2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioCheckLifeBuff2@@UAE@XZ$1
__ehfuncinfo$??1ioCheckLifeBuff2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioCheckLifeBuff2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioCheckLifeBuff2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioCheckLifeBuff2@@UAE@XZ PROC			; ioCheckLifeBuff2::~ioCheckLifeBuff2, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioCheckLifeBuff2@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCheckLifeBuff2@@6B@

; 25   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00023	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0002a	ff d7		 call	 edi
  0002c	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00032	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00036	ff d7		 call	 edi
  00038	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioCheckLifeBuff2@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioCheckLifeBuff2@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioCheckLifeBuff2@@UAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioCheckLifeBuff2@@UAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioCheckLifeBuff2@@UAE@XZ ENDP			; ioCheckLifeBuff2::~ioCheckLifeBuff2
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T531560 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ PROC		; ioCheckLifeBuff2::Clone, COMDAT
; _this$ = ecx

; 43   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 44   : 	return new ioCheckLifeBuff2( *this );

  0000e	68 94 09 00 00	 push	 2452			; 00000994H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T531560[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioCheckLifeBuff2@@QAE@ABV0@@Z ; ioCheckLifeBuff2::ioCheckLifeBuff2
$LN3@Clone:

; 45   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T531560[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioCheckLifeBuff2@@UAEPAVioBuff@@XZ ENDP		; ioCheckLifeBuff2::Clone
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioCheckLifeBuff2@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioCheckLifeBuff2@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioCheckLifeBuff2::ApplyStartBuff, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 83   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 09		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 84   : 		return false;
; 85   : 
; 86   : 	m_bSetCreaterBuff = false;

  00018	c6 86 90 09 00
	00 00		 mov	 BYTE PTR [esi+2448], 0

; 87   : 
; 88   : 	return true;

  0001f	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  00021	5e		 pop	 esi

; 89   : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioCheckLifeBuff2@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioCheckLifeBuff2::ApplyStartBuff
_TEXT	ENDS
EXTRN	?RemoveBuff@ioBaseChar@@QAE_NABVioHashString@@_N@Z:PROC ; ioBaseChar::RemoveBuff
EXTRN	?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetCreator
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioCheckLifeBuff2@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioCheckLifeBuff2@@UAEXXZ PROC			; ioCheckLifeBuff2::EndBuff, COMDAT
; _this$ = ecx

; 103  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 104  : 	ioBuff::EndBuff();

  00003	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff

; 105  : 
; 106  : 	if ( m_bSetCreaterBuff )

  00008	80 be 90 09 00
	00 00		 cmp	 BYTE PTR [esi+2448], 0
  0000f	74 1b		 je	 SHORT $LN1@EndBuff

; 107  : 	{
; 108  : 		ioBaseChar *pCreater = GetCreator();

  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator

; 109  : 		if ( pCreater )

  00018	85 c0		 test	 eax, eax
  0001a	74 10		 je	 SHORT $LN1@EndBuff

; 110  : 			pCreater->RemoveBuff( m_szCreaterBuff, true );

  0001c	6a 01		 push	 1
  0001e	81 c6 80 09 00
	00		 add	 esi, 2432		; 00000980H
  00024	56		 push	 esi
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 ?RemoveBuff@ioBaseChar@@QAE_NABVioHashString@@_N@Z ; ioBaseChar::RemoveBuff
$LN1@EndBuff:
  0002c	5e		 pop	 esi

; 111  : 	}
; 112  : }

  0002d	c3		 ret	 0
?EndBuff@ioCheckLifeBuff2@@UAEXXZ ENDP			; ioCheckLifeBuff2::EndBuff
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 41   : 		}

  00005	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3LengthSq
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv165 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3LengthSq, COMDAT

; 1725 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1726 : #ifdef D3DX_DEBUG
; 1727 :     if(!pV)
; 1728 :         return 0.0f;
; 1729 : #endif
; 1730 : 
; 1731 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  00006	d9 40 04	 fld	 DWORD PTR [eax+4]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0000e	d9 c1		 fld	 ST(1)
  00010	de ca		 fmulp	 ST(2), ST(0)
  00012	d9 c2		 fld	 ST(2)
  00014	de cb		 fmulp	 ST(3), ST(0)
  00016	d9 c9		 fxch	 ST(1)
  00018	de c2		 faddp	 ST(2), ST(0)
  0001a	d9 c0		 fld	 ST(0)
  0001c	de c9		 fmulp	 ST(1), ST(0)
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 5d 08	 fstp	 DWORD PTR tv165[ebp]
  00023	d9 45 08	 fld	 DWORD PTR tv165[ebp]

; 1732 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3LengthSq
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioCheckLifeBuff2@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioCheckLifeBuff2@@UAEPAXI@Z PROC			; ioCheckLifeBuff2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioCheckLifeBuff2@@UAE@XZ ; ioCheckLifeBuff2::~ioCheckLifeBuff2
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioCheckLifeBuff2@@UAEPAXI@Z ENDP			; ioCheckLifeBuff2::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?IsCheckBuff@ioCheckLifeBuff2@@IAE_NXZ		; ioCheckLifeBuff2::IsCheckBuff
EXTRN	?HasHideBuff@ioBaseChar@@QAE?B_NXZ:PROC		; ioBaseChar::HasHideBuff
EXTRN	?HasBuff@ioBaseChar@@QBE_NABVioHashString@@@Z:PROC ; ioBaseChar::HasBuff
EXTRN	?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z:PROC ; ioBaseChar::GetBaseChar
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iochecklifebuff2.cpp
;	COMDAT ?IsCheckBuff@ioCheckLifeBuff2@@IAE_NXZ
_TEXT	SEGMENT
?IsCheckBuff@ioCheckLifeBuff2@@IAE_NXZ PROC		; ioCheckLifeBuff2::IsCheckBuff, COMDAT
; _this$ = ecx

; 115  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 116  : 	ioBaseChar *pCreater = m_pOwner->GetBaseChar( m_CreateChar );

  00004	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0000a	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar
  00016	8b d8		 mov	 ebx, eax

; 117  : 	if( !pCreater || !pCreater->HasBuff( m_szCheckBuff ) )

  00018	85 db		 test	 ebx, ebx
  0001a	0f 84 d6 00 00
	00		 je	 $LN4@IsCheckBuf
  00020	8d 86 6c 09 00
	00		 lea	 eax, DWORD PTR [esi+2412]
  00026	50		 push	 eax
  00027	8b cb		 mov	 ecx, ebx
  00029	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@@Z ; ioBaseChar::HasBuff
  0002e	84 c0		 test	 al, al
  00030	0f 84 c0 00 00
	00		 je	 $LN4@IsCheckBuf

; 119  : 	
; 120  : 	if ( !m_pOwner )

  00036	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0003c	85 c9		 test	 ecx, ecx

; 121  : 		return true;

  0003e	0f 84 b2 00 00
	00		 je	 $LN4@IsCheckBuf

; 122  : 	
; 123  : 	if ( m_pOwner->HasHideBuff() )

  00044	e8 00 00 00 00	 call	 ?HasHideBuff@ioBaseChar@@QAE?B_NXZ ; ioBaseChar::HasHideBuff
  00049	84 c0		 test	 al, al

; 124  : 		return true;

  0004b	0f 85 a5 00 00
	00		 jne	 $LN4@IsCheckBuf

; 125  : 	
; 126  : 	D3DXVECTOR3 vDistance = pCreater->GetWorldPosition() - m_pOwner->GetWorldPosition();

  00051	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00057	8b 01		 mov	 eax, DWORD PTR [ecx]
  00059	57		 push	 edi
  0005a	ff 50 70	 call	 DWORD PTR [eax+112]
  0005d	8b f8		 mov	 edi, eax
  0005f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00061	8b cb		 mov	 ecx, ebx
  00063	ff 50 70	 call	 DWORD PTR [eax+112]
  00066	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  0006a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0006e	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00073	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]
  00078	0f 5a c0	 cvtps2pd xmm0, xmm0
  0007b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0007e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00082	0f 57 c9	 xorps	 xmm1, xmm1
  00085	66 0f 5a c8	 cvtpd2ps xmm1, xmm0
  00089	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0008e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00091	0f 5a d2	 cvtps2pd xmm2, xmm2
  00094	f2 0f 5c c2	 subsd	 xmm0, xmm2
  00098	0f 57 d2	 xorps	 xmm2, xmm2
  0009b	66 0f 5a d0	 cvtpd2ps xmm2, xmm0
  0009f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000a4	0f 5a db	 cvtps2pd xmm3, xmm3
  000a7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000aa	f2 0f 5c c3	 subsd	 xmm0, xmm3
  000ae	0f 57 db	 xorps	 xmm3, xmm3
  000b1	66 0f 5a d8	 cvtpd2ps xmm3, xmm0

; 127  : 	float fDist = D3DXVec3LengthSq( &vDistance );
; 128  : 	if ( (m_fCheckDist * m_fCheckDist) <= fDist )

  000b5	f3 0f 10 86 7c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2428]
  000bd	0f 5a c9	 cvtps2pd xmm1, xmm1
  000c0	0f 5a d2	 cvtps2pd xmm2, xmm2
  000c3	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  000c7	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  000cb	f2 0f 58 d1	 addsd	 xmm2, xmm1
  000cf	0f 5a db	 cvtps2pd xmm3, xmm3
  000d2	f2 0f 59 db	 mulsd	 xmm3, xmm3
  000d6	0f 57 c9	 xorps	 xmm1, xmm1
  000d9	f2 0f 58 d3	 addsd	 xmm2, xmm3
  000dd	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e0	66 0f 5a ca	 cvtpd2ps xmm1, xmm2
  000e4	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  000e8	0f 5a c9	 cvtps2pd xmm1, xmm1
  000eb	66 0f 2f c8	 comisd	 xmm1, xmm0
  000ef	5f		 pop	 edi

; 129  : 		return true;

  000f0	73 04		 jae	 SHORT $LN4@IsCheckBuf

; 130  : 	
; 131  : 	return false;

  000f2	32 c0		 xor	 al, al
  000f4	eb 02		 jmp	 SHORT $LN6@IsCheckBuf
$LN4@IsCheckBuf:

; 118  : 		return true;

  000f6	b0 01		 mov	 al, 1
$LN6@IsCheckBuf:
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx

; 132  : }

  000fa	c3		 ret	 0
?IsCheckBuff@ioCheckLifeBuff2@@IAE_NXZ ENDP		; ioCheckLifeBuff2::IsCheckBuff
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<11>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<11>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	84 d2		 test	 dl, dl
  00020	0f 84 1b 01 00
	00		 je	 $LN96@LoadString
  00026	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00029	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002f	84 d2		 test	 dl, dl
  00031	0f 84 04 01 00
	00		 je	 $LN95@LoadString
  00037	b3 ec		 mov	 bl, -20			; ffffffecH
  00039	32 d3		 xor	 dl, bl
  0003b	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003e	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00041	84 d2		 test	 dl, dl
  00043	0f 84 ec 00 00
	00		 je	 $LN94@LoadString
  00049	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004c	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004f	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00052	84 d2		 test	 dl, dl
  00054	0f 84 d5 00 00
	00		 je	 $LN93@LoadString
  0005a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005d	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00060	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00063	84 d2		 test	 dl, dl
  00065	0f 84 be 00 00
	00		 je	 $LN92@LoadString
  0006b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006e	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00071	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00074	84 d2		 test	 dl, dl
  00076	0f 84 a8 00 00
	00		 je	 $LN91@LoadString
  0007c	32 d3		 xor	 dl, bl
  0007e	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00081	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00084	84 d2		 test	 dl, dl
  00086	0f 84 92 00 00
	00		 je	 $LN90@LoadString
  0008c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008f	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00092	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00095	84 d2		 test	 dl, dl
  00097	74 7f		 je	 SHORT $LN89@LoadString
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 6c		 je	 SHORT $LN88@LoadString
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5a		 je	 SHORT $LN87@LoadString
  000b3	32 d3		 xor	 dl, bl
  000b5	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bc	0f 84 83 00 00
	00		 je	 $LN1@LoadString
  000c2	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c5	84 d2		 test	 dl, dl
  000c7	74 3e		 je	 SHORT $LN85@LoadString
  000c9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cc	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 2b		 je	 SHORT $LN84@LoadString
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 19		 je	 SHORT $LN83@LoadString
  000e3	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e6	32 d3		 xor	 dl, bl
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadString
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 4f		 jmp	 SHORT $LN1@LoadString
$LN82@LoadString:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 49		 jmp	 SHORT $LN1@LoadString
$LN83@LoadString:
  000fc	88 5d f9	 mov	 BYTE PTR __k$[ebp+13], bl
  000ff	eb 44		 jmp	 SHORT $LN1@LoadString
$LN84@LoadString:
  00101	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00105	eb 3e		 jmp	 SHORT $LN1@LoadString
$LN85@LoadString:
  00107	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010b	eb 38		 jmp	 SHORT $LN1@LoadString
$LN87@LoadString:
  0010d	88 5d f5	 mov	 BYTE PTR __k$[ebp+9], bl
  00110	eb 33		 jmp	 SHORT $LN1@LoadString
$LN88@LoadString:
  00112	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00116	eb 2d		 jmp	 SHORT $LN1@LoadString
$LN89@LoadString:
  00118	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011c	eb 27		 jmp	 SHORT $LN1@LoadString
$LN90@LoadString:
  0011e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00122	eb 21		 jmp	 SHORT $LN1@LoadString
$LN91@LoadString:
  00124	88 5d f1	 mov	 BYTE PTR __k$[ebp+5], bl
  00127	eb 1c		 jmp	 SHORT $LN1@LoadString
$LN92@LoadString:
  00129	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0012d	eb 16		 jmp	 SHORT $LN1@LoadString
$LN93@LoadString:
  0012f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00133	eb 10		 jmp	 SHORT $LN1@LoadString
$LN94@LoadString:
  00135	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00139	eb 0a		 jmp	 SHORT $LN1@LoadString
$LN95@LoadString:
  0013b	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0013f	eb 04		 jmp	 SHORT $LN1@LoadString
$LN96@LoadString:
  00141	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString:
  00145	6a 02		 push	 2
  00147	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014a	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  0014e	5a		 pop	 edx
$LL104@LoadString:
  0014f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00155	83 c0 04	 add	 eax, 4
  00158	4a		 dec	 edx
  00159	75 f4		 jne	 SHORT $LL104@LoadString
  0015b	6a 08		 push	 8
  0015d	58		 pop	 eax
$LL101@LoadString:
  0015e	8b d0		 mov	 edx, eax
  00160	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  00166	79 05		 jns	 SHORT $LN111@LoadString
  00168	4a		 dec	 edx
  00169	83 ca fc	 or	 edx, -4			; fffffffcH
  0016c	42		 inc	 edx
$LN111@LoadString:
  0016d	b3 ed		 mov	 bl, -19			; ffffffedH
  0016f	2a da		 sub	 bl, dl
  00171	30 5c 05 ec	 xor	 BYTE PTR __k$[ebp+eax], bl
  00175	40		 inc	 eax
  00176	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00179	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  0017b	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0017e	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00181	57		 push	 edi
  00182	56		 push	 esi
  00183	50		 push	 eax
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	33 cd		 xor	 ecx, ebp
  00191	5b		 pop	 ebx
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	c9		 leave
  00198	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ; ioINILoader::LoadFloat_e<11>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<11>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadFloat_
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadFloat_
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadFloat_
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadFloat_
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadFloat_
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadFloat_
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadFloat_
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadFloat_
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadFloat_
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadFloat_
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadFloat_
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadFloat_:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadFloat_
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadFloat_:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadFloat_
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadFloat_:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00183	51		 push	 ecx
  00184	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	33 cd		 xor	 ecx, ebp
  0019a	5e		 pop	 esi
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	c9		 leave
  001a1	c2 08 00	 ret	 8
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<11>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<13>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<13>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 4d 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 36 01 00
	00		 je	 $LN95@LoadString@2
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 1e 01 00
	00		 je	 $LN94@LoadString@2
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 07 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 f0 00 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 da 00 00
	00		 je	 $LN91@LoadString@2
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 c4 00 00
	00		 je	 $LN90@LoadString@2
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ad 00 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 96 00 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 80 00 00
	00		 je	 $LN87@LoadString@2
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	74 6e		 je	 SHORT $LN86@LoadString@2
  000cd	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d0	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d3	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d6	84 d2		 test	 dl, dl
  000d8	74 5b		 je	 SHORT $LN85@LoadString@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	0f 84 8f 00 00
	00		 je	 $LN111@LoadString@2
  000ea	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ed	84 d2		 test	 dl, dl
  000ef	74 3f		 je	 SHORT $LN83@LoadString@2
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f6	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f9	84 d2		 test	 dl, dl
  000fb	74 2d		 je	 SHORT $LN82@LoadString@2
  000fd	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00100	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00103	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00106	84 d2		 test	 dl, dl
  00108	74 1a		 je	 SHORT $LN81@LoadString@2
  0010a	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  0010d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00110	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00113	84 c0		 test	 al, al
  00115	74 07		 je	 SHORT $LN80@LoadString@2
  00117	34 ed		 xor	 al, -19			; ffffffedH
  00119	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  0011c	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  0011e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00122	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  00124	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00128	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  0012a	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0012e	eb 49		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  00130	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  00133	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  00135	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00139	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  0013b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0013f	eb 38		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00141	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00144	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  00146	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014a	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  0014c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00150	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00152	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00156	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  00158	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0015b	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  0015d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00161	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  00163	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00167	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  00169	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0016d	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  0016f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00173	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  00175	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  00179	6a 03		 push	 3
  0017b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0017e	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  00182	5a		 pop	 edx
$LL104@LoadString@2:
  00183	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00189	83 c0 04	 add	 eax, 4
  0018c	4a		 dec	 edx
  0018d	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  0018f	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00192	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00195	57		 push	 edi
  00196	56		 push	 esi
  00197	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019a	50		 push	 eax
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a4	5f		 pop	 edi
  001a5	33 cd		 xor	 ecx, ebp
  001a7	5e		 pop	 esi
  001a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ad	c9		 leave
  001ae	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<13>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iochecklifebuff2.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioCheckLifeBuff2@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -288				; size = 4
_szBuf$ = -284						; size = 260
__k$531997 = -24					; size = 13
__k$531872 = -24					; size = 11
__k$531747 = -24					; size = 11
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioCheckLifeBuff2@@UAEXAAVioINILoader@@@Z PROC ; ioCheckLifeBuff2::LoadProperty, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 29   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 37   : 
; 38   : 	rkLoader.LoadString_e( "creater_buff", "", szBuf, MAX_PATH );

  0001c	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  00027	68 03 01 00 00	 push	 259			; 00000103H
  0002c	8d 85 e5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00032	6a 00		 push	 0
  00034	50		 push	 eax
  00035	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  0003c	e8 00 00 00 00	 call	 _memset
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	6a 02		 push	 2
  00046	c7 45 e8 8e 84
	8e 89		 mov	 DWORD PTR __k$531747[ebp], -1987148658 ; 898e848eH
  0004d	c7 45 ec 86 b3
	89 9f		 mov	 DWORD PTR __k$531747[ebp+4], -1618365562 ; 9f89b386H
  00054	66 c7 45 f0 8b
	8a		 mov	 WORD PTR __k$531747[ebp+8], 35467 ; 00008a8bH
  0005a	8d 45 e8	 lea	 eax, DWORD PTR __k$531747[ebp]
  0005d	c6 45 f2 00	 mov	 BYTE PTR __k$531747[ebp+10], 0
  00061	59		 pop	 ecx
$LL106@LoadProper:

; 30   : 
; 31   : 	char szBuf[MAX_PATH] = "";
; 32   : 
; 33   : 	rkLoader.LoadString_e( "check_buff", "", szBuf, MAX_PATH );

  00062	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00068	83 c0 04	 add	 eax, 4
  0006b	49		 dec	 ecx
  0006c	75 f4		 jne	 SHORT $LL106@LoadProper
  0006e	6a 08		 push	 8
  00070	58		 pop	 eax
$LL103@LoadProper:
  00071	8b c8		 mov	 ecx, eax
  00073	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00079	79 05		 jns	 SHORT $LN333@LoadProper
  0007b	49		 dec	 ecx
  0007c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0007f	41		 inc	 ecx
$LN333@LoadProper:
  00080	b2 ed		 mov	 dl, -19			; ffffffedH
  00082	2a d1		 sub	 dl, cl
  00084	30 54 05 e8	 xor	 BYTE PTR __k$531747[ebp+eax], dl
  00088	40		 inc	 eax
  00089	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0008c	7c e3		 jl	 SHORT $LL103@LoadProper
  0008e	68 04 01 00 00	 push	 260			; 00000104H
  00093	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00099	50		 push	 eax
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0009f	8d 45 e8	 lea	 eax, DWORD PTR __k$531747[ebp]
  000a2	8b cf		 mov	 ecx, edi
  000a4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  000aa	50		 push	 eax
  000ab	ff d7		 call	 edi

; 34   : 	m_szCheckBuff = szBuf;

  000ad	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000b3	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000b9	50		 push	 eax
  000ba	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  000c0	ff d3		 call	 ebx
  000c2	6a 02		 push	 2

; 35   : 
; 36   : 	m_fCheckDist = rkLoader.LoadFloat_e( "check_dist", 0.0f );

  000c4	c7 45 e8 8e 84
	8e 89		 mov	 DWORD PTR __k$531872[ebp], -1987148658 ; 898e848eH
  000cb	c7 45 ec 86 b3
	8f 83		 mov	 DWORD PTR __k$531872[ebp+4], -2087734394 ; 838fb386H
  000d2	66 c7 45 f0 9e
	98		 mov	 WORD PTR __k$531872[ebp+8], 39070 ; 0000989eH
  000d8	8d 45 e8	 lea	 eax, DWORD PTR __k$531872[ebp]
  000db	c6 45 f2 00	 mov	 BYTE PTR __k$531872[ebp+10], 0
  000df	59		 pop	 ecx
$LL212@LoadProper:
  000e0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000e6	83 c0 04	 add	 eax, 4
  000e9	49		 dec	 ecx
  000ea	75 f4		 jne	 SHORT $LL212@LoadProper
  000ec	6a 08		 push	 8
  000ee	58		 pop	 eax
$LL209@LoadProper:
  000ef	8b c8		 mov	 ecx, eax
  000f1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000f7	79 05		 jns	 SHORT $LN334@LoadProper
  000f9	49		 dec	 ecx
  000fa	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000fd	41		 inc	 ecx
$LN334@LoadProper:
  000fe	b2 ed		 mov	 dl, -19			; ffffffedH
  00100	2a d1		 sub	 dl, cl
  00102	30 54 05 e8	 xor	 BYTE PTR __k$531872[ebp+eax], dl
  00106	40		 inc	 eax
  00107	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0010a	7c e3		 jl	 SHORT $LL209@LoadProper
  0010c	0f 57 c0	 xorps	 xmm0, xmm0
  0010f	51		 push	 ecx
  00110	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00116	8d 45 e8	 lea	 eax, DWORD PTR __k$531872[ebp]
  00119	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011e	50		 push	 eax
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00125	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]
  0012b	6a 03		 push	 3

; 37   : 
; 38   : 	rkLoader.LoadString_e( "creater_buff", "", szBuf, MAX_PATH );

  0012d	c7 45 e8 8e 9e
	8e 8b		 mov	 DWORD PTR __k$531997[ebp], -1953587570 ; 8b8e9e8eH
  00134	c7 45 ec 99 89
	99 b5		 mov	 DWORD PTR __k$531997[ebp+4], -1248228967 ; b5998999H
  0013b	c7 45 f0 8f 99
	8d 8c		 mov	 DWORD PTR __k$531997[ebp+8], -1936877169 ; 8c8d998fH
  00142	8d 45 e8	 lea	 eax, DWORD PTR __k$531997[ebp]
  00145	c6 45 f4 00	 mov	 BYTE PTR __k$531997[ebp+12], 0
  00149	59		 pop	 ecx
$LL318@LoadProper:
  0014a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00150	83 c0 04	 add	 eax, 4
  00153	49		 dec	 ecx
  00154	75 f4		 jne	 SHORT $LL318@LoadProper
  00156	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0015c	68 04 01 00 00	 push	 260			; 00000104H
  00161	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00167	50		 push	 eax
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0016d	8d 45 e8	 lea	 eax, DWORD PTR __k$531997[ebp]
  00170	50		 push	 eax
  00171	ff d7		 call	 edi

; 39   : 	m_szCreaterBuff = szBuf;

  00173	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00179	50		 push	 eax
  0017a	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00180	ff d3		 call	 ebx

; 40   : }

  00182	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00185	5f		 pop	 edi
  00186	5e		 pop	 esi
  00187	33 cd		 xor	 ecx, ebp
  00189	5b		 pop	 ebx
  0018a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018f	c9		 leave
  00190	c2 04 00	 ret	 4
?LoadProperty@ioCheckLifeBuff2@@UAEXAAVioINILoader@@@Z ENDP ; ioCheckLifeBuff2::LoadProperty
_TEXT	ENDS
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioCheckLifeBuff2@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioCheckLifeBuff2@@UAEXM@Z PROC		; ioCheckLifeBuff2::ProcessBuff, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 93   : 	if ( IsCheckBuff() )

  00006	e8 00 00 00 00	 call	 ?IsCheckBuff@ioCheckLifeBuff2@@IAE_NXZ ; ioCheckLifeBuff2::IsCheckBuff
  0000b	84 c0		 test	 al, al
  0000d	74 09		 je	 SHORT $LN1@ProcessBuf

; 94   : 	{
; 95   : 		SetReserveEndBuff();

  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 96   : 		return;

  00016	eb 12		 jmp	 SHORT $LN2@ProcessBuf
$LN1@ProcessBuf:

; 97   : 	}
; 98   : 
; 99   : 	ioBuff::ProcessBuff( fTimePerSec );

  00018	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0001d	51		 push	 ecx
  0001e	8b ce		 mov	 ecx, esi
  00020	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00025	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff
$LN2@ProcessBuf:
  0002a	5e		 pop	 esi

; 100  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?ProcessBuff@ioCheckLifeBuff2@@UAEXM@Z ENDP		; ioCheckLifeBuff2::ProcessBuff
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ PROC ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ENDP ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ PROC ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ENDP ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator!=
_TEXT	ENDS
EXTRN	?ReserveAddNewBuff@ioBaseChar@@QAEXABVioHashString@@00PAVioSkill@@_N@Z:PROC ; ioBaseChar::ReserveAddNewBuff
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?HasBuff@ioBaseChar@@QBE_NABVioHashString@@0@Z:PROC ; ioBaseChar::HasBuff
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z$1
__ehfuncinfo$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iochecklifebuff2.cpp
xdata$x	ENDS
;	COMDAT ?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T532151 = -44						; size = 16
$T532152 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_pCreater$ = 8						; size = 4
_pOwner$ = 8						; size = 4
?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z PROC	; ioCheckLifeBuff2::StartBuff, COMDAT
; _this$ = ecx

; 48   : {

  00000	6a 20		 push	 32			; 00000020H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 49   : 	ioBuff::StartBuff( pOwner );

  0000e	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00011	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 50   : 
; 51   : 	m_bSetCreaterBuff = false;
; 52   : 
; 53   : 	ioPlayStage *pStage = m_pOwner->GetCreator();

  00016	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  0001c	c6 86 90 09 00
	00 00		 mov	 BYTE PTR [esi+2448], 0
  00023	8b b8 44 03 00
	00		 mov	 edi, DWORD PTR [eax+836]

; 54   : 	if ( !pStage )

  00029	85 ff		 test	 edi, edi
  0002b	0f 84 91 00 00
	00		 je	 $LN1@StartBuff

; 55   : 		return;
; 56   : 
; 57   : 	const BaseCharList &pBaseCharList = pStage->GetBaseCharList();
; 58   : 	BaseCharList::const_iterator iter;
; 59   : 	for( iter = pBaseCharList.begin(); iter != pBaseCharList.end(); ++iter )

  00031	8b 5f 2c	 mov	 ebx, DWORD PTR [edi+44]
  00034	eb 20		 jmp	 SHORT $LN45@StartBuff
$LN24@StartBuff:

; 60   : 	{
; 61   : 		ioBaseChar *pChar = *iter;

  00036	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 62   : 		if( !pChar ) 

  00038	85 c9		 test	 ecx, ecx
  0003a	74 17		 je	 SHORT $LN5@StartBuff

; 63   : 			continue;
; 64   : 
; 65   : 		if ( pChar->HasBuff( m_CreateChar, m_Name ) )

  0003c	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  00042	50		 push	 eax
  00043	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@0@Z ; ioBaseChar::HasBuff
  0004f	84 c0		 test	 al, al
  00051	75 77		 jne	 SHORT $LN41@StartBuff
$LN5@StartBuff:

; 55   : 		return;
; 56   : 
; 57   : 	const BaseCharList &pBaseCharList = pStage->GetBaseCharList();
; 58   : 	BaseCharList::const_iterator iter;
; 59   : 	for( iter = pBaseCharList.begin(); iter != pBaseCharList.end(); ++iter )

  00053	83 c3 04	 add	 ebx, 4
$LN45@StartBuff:
  00056	3b 5f 30	 cmp	 ebx, DWORD PTR [edi+48]
  00059	75 db		 jne	 SHORT $LN24@StartBuff

; 69   : 		}
; 70   : 	}
; 71   : 
; 72   : 	ioBaseChar *pCreater = GetCreator();

  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator
  00062	89 45 08	 mov	 DWORD PTR _pCreater$[ebp], eax

; 73   : 	if ( pCreater )

  00065	85 c0		 test	 eax, eax
  00067	74 59		 je	 SHORT $LN1@StartBuff

; 74   : 	{
; 75   : 		//pCreater->AddNewBuff( m_szCreaterBuff, "", "", NULL );
; 76   : 		pCreater->ReserveAddNewBuff( m_szCreaterBuff, "", "", NULL );

  00069	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0006f	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00074	53		 push	 ebx
  00075	8d 4d d4	 lea	 ecx, DWORD PTR $T532151[ebp]
  00078	ff d7		 call	 edi
  0007a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	53		 push	 ebx
  0007f	8d 4d e4	 lea	 ecx, DWORD PTR $T532152[ebp]
  00082	ff d7		 call	 edi
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _pCreater$[ebp]
  00087	6a 00		 push	 0
  00089	6a 00		 push	 0
  0008b	8d 45 d4	 lea	 eax, DWORD PTR $T532151[ebp]
  0008e	50		 push	 eax
  0008f	8d 45 e4	 lea	 eax, DWORD PTR $T532152[ebp]
  00092	50		 push	 eax
  00093	8d 86 80 09 00
	00		 lea	 eax, DWORD PTR [esi+2432]
  00099	50		 push	 eax
  0009a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009e	e8 00 00 00 00	 call	 ?ReserveAddNewBuff@ioBaseChar@@QAEXABVioHashString@@00PAVioSkill@@_N@Z ; ioBaseChar::ReserveAddNewBuff
  000a3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000a9	8d 4d e4	 lea	 ecx, DWORD PTR $T532152[ebp]
  000ac	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b0	ff d7		 call	 edi
  000b2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000b6	8d 4d d4	 lea	 ecx, DWORD PTR $T532151[ebp]
  000b9	ff d7		 call	 edi

; 77   : 		m_bSetCreaterBuff = true;

  000bb	c6 86 90 09 00
	00 01		 mov	 BYTE PTR [esi+2448], 1
$LN1@StartBuff:

; 78   : 	}
; 79   : }

  000c2	e8 00 00 00 00	 call	 __EH_epilog3
  000c7	c2 04 00	 ret	 4
$LN41@StartBuff:

; 66   : 		{
; 67   : 			SetReserveEndBuff();

  000ca	8b ce		 mov	 ecx, esi
  000cc	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 68   : 			return;

  000d1	eb ef		 jmp	 SHORT $LN1@StartBuff
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T532151[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z$1:
  00009	8d 4d e4	 lea	 ecx, DWORD PTR $T532152[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StartBuff@ioCheckLifeBuff2@@UAEXPAVioBaseChar@@@Z ENDP	; ioCheckLifeBuff2::StartBuff
END
