; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\Login.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

EXTRN	__imp__GetWindowThreadProcessId@8:PROC
EXTRN	__imp__IsWindowVisible@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
;	COMDAT ?HandleFromPIDProc@@YGHPAUHWND__@@J@Z
_TEXT	SEGMENT
_pid$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
?HandleFromPIDProc@@YGHPAUHWND__@@J@Z PROC		; HandleFromPIDProc, COMDAT

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 31   : 	DWORD pid = 0;

  00004	83 65 fc 00	 and	 DWORD PTR _pid$[ebp], 0
  00008	56		 push	 esi

; 32   : 	HANDLEToHWNDInfo* Info = (HANDLEToHWNDInfo*)lParam;
; 33   : 	if( !IsWindowVisible( hwnd ) ) 

  00009	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  0000c	56		 push	 esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  00013	85 c0		 test	 eax, eax
  00015	75 05		 jne	 SHORT $LN2@HandleFrom
$LN5@HandleFrom:

; 34   : 		return TRUE;

  00017	33 c0		 xor	 eax, eax
  00019	40		 inc	 eax
  0001a	eb 1a		 jmp	 SHORT $LN3@HandleFrom
$LN2@HandleFrom:

; 35   : 
; 36   : 	//핸들 값으로 PID 값을 조회
; 37   : 	GetWindowThreadProcessId( hwnd, &pid );

  0001c	8d 45 fc	 lea	 eax, DWORD PTR _pid$[ebp]
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowThreadProcessId@8

; 38   : 
; 39   : 	if ( Info->m_dwProcessID != pid )

  00027	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	3b 4d fc	 cmp	 ecx, DWORD PTR _pid$[ebp]

; 40   : 		return TRUE;

  0002f	75 e6		 jne	 SHORT $LN5@HandleFrom

; 41   : 
; 42   : 	Info->m_hHwnd = hwnd;

  00031	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 43   : 	return FALSE;

  00034	33 c0		 xor	 eax, eax
$LN3@HandleFrom:
  00036	5e		 pop	 esi

; 44   : }

  00037	c9		 leave
  00038	c2 08 00	 ret	 8
?HandleFromPIDProc@@YGHPAUHWND__@@J@Z ENDP		; HandleFromPIDProc
_TEXT	ENDS
PUBLIC	?GetHandleFromPID@@YAPAUHWND__@@K@Z		; GetHandleFromPID
EXTRN	__imp__EnumWindows@8:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetHandleFromPID@@YAPAUHWND__@@K@Z
_TEXT	SEGMENT
_Info$ = -8						; size = 8
_pid$ = 8						; size = 4
?GetHandleFromPID@@YAPAUHWND__@@K@Z PROC		; GetHandleFromPID, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 48   : 	HANDLEToHWNDInfo Info;
; 49   : 
; 50   : 	if (pid == 0) 

  00005	8b 45 08	 mov	 eax, DWORD PTR _pid$[ebp]
  00008	85 c0		 test	 eax, eax
  0000a	75 02		 jne	 SHORT $LN1@GetHandleF

; 59   : }

  0000c	c9		 leave
  0000d	c3		 ret	 0
$LN1@GetHandleF:

; 51   : 		return NULL;
; 52   : 
; 53   : 	Info.m_dwProcessID = pid;
; 54   : 	Info.m_hHwnd       = NULL;

  0000e	83 65 fc 00	 and	 DWORD PTR _Info$[ebp+4], 0
  00012	89 45 f8	 mov	 DWORD PTR _Info$[ebp], eax

; 55   : 
; 56   : 	EnumWindows( HandleFromPIDProc, (LPARAM)&Info );

  00015	8d 45 f8	 lea	 eax, DWORD PTR _Info$[ebp]
  00018	50		 push	 eax
  00019	68 00 00 00 00	 push	 OFFSET ?HandleFromPIDProc@@YGHPAUHWND__@@J@Z ; HandleFromPIDProc
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 57   : 
; 58   : 	return Info.m_hHwnd;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _Info$[ebp+4]

; 59   : }

  00027	c9		 leave
  00028	c3		 ret	 0
?GetHandleFromPID@@YAPAUHWND__@@K@Z ENDP		; GetHandleFromPID
_TEXT	ENDS
PUBLIC	??0CLogin@@QAE@XZ				; CLogin::CLogin
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	_memset:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLogin@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLogin@@QAE@XZ$0
__ehfuncinfo$??0CLogin@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLogin@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0CLogin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLogin@@QAE@XZ PROC					; CLogin::CLogin, COMDAT
; _this$ = ecx

; 62   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0CLogin@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 8e 14 02 00
	00		 lea	 ecx, DWORD PTR [esi+532]
  0001d	ff d7		 call	 edi
  0001f	33 db		 xor	 ebx, ebx
  00021	8d 8e 24 02 00
	00		 lea	 ecx, DWORD PTR [esi+548]
  00027	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002a	ff d7		 call	 edi

; 63   : 	memset(m_szLoginKey, 0, sizeof(m_szLoginKey));

  0002c	68 08 02 00 00	 push	 520			; 00000208H
  00031	53		 push	 ebx
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _memset
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 64   : 	m_eLoginState = LS_NONE;

  0003b	89 9e 08 02 00
	00		 mov	 DWORD PTR [esi+520], ebx

; 65   : 	m_bSingleMode = false;

  00041	88 9e 0c 02 00
	00		 mov	 BYTE PTR [esi+524], bl

; 66   : 	m_dwSentUDPMsgTime = 0;

  00047	89 9e 10 02 00
	00		 mov	 DWORD PTR [esi+528], ebx

; 67   : 	m_iCheckCnt        = 0;

  0004d	89 9e 34 02 00
	00		 mov	 DWORD PTR [esi+564], ebx

; 68   : 	m_dwConnectPreTime = 0;

  00053	89 9e 38 02 00
	00		 mov	 DWORD PTR [esi+568], ebx

; 69   : 	m_iLoginResult	   = NULL;

  00059	89 9e 40 02 00
	00		 mov	 DWORD PTR [esi+576], ebx

; 70   : }

  0005f	8b c6		 mov	 eax, esi
  00061	e8 00 00 00 00	 call	 __EH_epilog3
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLogin@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 14 02 00
	00		 add	 ecx, 532		; 00000214H
  00009	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0CLogin@@QAE@XZ:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLogin@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLogin@@QAE@XZ ENDP					; CLogin::CLogin
PUBLIC	??1CLogin@@QAE@XZ				; CLogin::~CLogin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CLogin@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLogin@@QAE@XZ$0
__ehfuncinfo$??1CLogin@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CLogin@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1CLogin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLogin@@QAE@XZ PROC					; CLogin::~CLogin, COMDAT
; _this$ = ecx

; 73   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1CLogin@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   : 	
; 75   : }

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001b	8d 8f 24 02 00
	00		 lea	 ecx, DWORD PTR [edi+548]
  00021	ff d6		 call	 esi
  00023	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00027	8d 8f 14 02 00
	00		 lea	 ecx, DWORD PTR [edi+532]
  0002d	ff d6		 call	 esi
  0002f	e8 00 00 00 00	 call	 __EH_epilog3
  00034	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLogin@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 14 02 00
	00		 add	 ecx, 532		; 00000214H
  00009	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1CLogin@@QAE@XZ:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CLogin@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CLogin@@QAE@XZ ENDP					; CLogin::~CLogin
PUBLIC	?DebugWebLogin@CLogin@@QAEXAAPAD@Z		; CLogin::DebugWebLogin
; Function compile flags: /Ogsp
;	COMDAT ?DebugWebLogin@CLogin@@QAEXAAPAD@Z
_TEXT	SEGMENT
_szCmdLine$ = 8						; size = 4
?DebugWebLogin@CLogin@@QAEXAAPAD@Z PROC			; CLogin::DebugWebLogin, COMDAT
; _this$ = ecx

; 79   : #ifndef SHIPPING
; 80   : 	if(strncmp(szCmdLine, NORMAL_EXCUTE_CHECK, strlen(NORMAL_EXCUTE_CHECK)) == 0)
; 81   : 		return;
; 82   : 	FILE* fp = fopen("config/debug_connect.ini", "rt");
; 83   : 	if(fp == NULL) return;
; 84   : 	fclose(fp);
; 85   : 
; 86   : 	// load
; 87   : 	char szURL[MAX_PATH];
; 88   : 	ioINILoader_e kLoader( "config/debug_connect.ini" , false);
; 89   : 	kLoader.SetTitle_e("debug_connect");
; 90   : 	kLoader.LoadString_e("login_url", "", szURL, MAX_PATH );
; 91   : 
; 92   : 	PROCESS_INFORMATION IEProcessInfo;
; 93   : 	IELAUNCHURLINFO LunchInfo;
; 94   : 	ExcuteIE( IEProcessInfo, LunchInfo, szURL );
; 95   : 
; 96   : 	//핸들 값을 가져오기 위해서 대기
; 97   : 	::SleepEx( 500, FALSE );
; 98   : 
; 99   : 	DWORD dwPreTime  = timeGetTime();
; 100  : 	DWORD dwParentID = GetProcessIEParentID( IEProcessInfo.dwProcessId );
; 101  : 
; 102  : 	//IE 탭의 부모 핸들
; 103  : 	HWND hParentWnd  = GetHandleFromPID( dwParentID );
; 104  : 	
; 105  : 	while( true )
; 106  : 	{
; 107  : 		::SleepEx( 500, FALSE );
; 108  : 
; 109  : 		// activeX에서 값을 넣어줌
; 110  : 		kLoader.LoadString_e("login_key", "", m_szLoginKey, sizeof( m_szLoginKey ) );
; 111  : 
; 112  : 		if( strcmp( m_szLoginKey, "" ) != 0 )
; 113  : 		{
; 114  : 			szCmdLine = m_szLoginKey;
; 115  : 			kLoader.SaveString( "login_key", "" );
; 116  : 			PostMessage(  hParentWnd, WM_CLOSE , 0, 0 );			
; 117  : 			break;
; 118  : 		}
; 119  : 
; 120  : 		if( GetProcessVersion( dwParentID ) == NULL )
; 121  : 		{			
; 122  : 			PostMessage(  hParentWnd, WM_CLOSE , 0, 0 );			
; 123  : 			break;
; 124  : 		}
; 125  : 
; 126  : 		if( timeGetTime() - dwPreTime >= 300000 )
; 127  : 		{			
; 128  : 			PostMessage(  hParentWnd, WM_CLOSE , 0, 0 );			
; 129  : 			break;
; 130  : 		}
; 131  : 	}
; 132  : #endif
; 133  : }

  00000	c2 04 00	 ret	 4
?DebugWebLogin@CLogin@@QAEXAAPAD@Z ENDP			; CLogin::DebugWebLogin
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_DirName$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DeleteDirectoryInFile@CLogin@@IAE_NPBD0@Z	; CLogin::DeleteDirectoryInFile
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?DeleteDirectoryInFile@CLogin@@IAE_NPBD0@Z
_TEXT	SEGMENT
_DirName$GSCopy$ = -848					; size = 4
_wfd$ = -844						; size = 320
_fName$ = -524						; size = 260
_szPath$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_DirName$ = 8						; size = 4
_FileExten$ = 12					; size = 4
?DeleteDirectoryInFile@CLogin@@IAE_NPBD0@Z PROC		; CLogin::DeleteDirectoryInFile, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 03 00
	00		 sub	 esp, 848		; 00000350H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _FileExten$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _DirName$[ebp]

; 265  : 	WIN32_FIND_DATA wfd;
; 266  : 	HANDLE hHandle = 0L;
; 267  : 	char fName[MAX_PATH] = "";

  0001c	be 03 01 00 00	 mov	 esi, 259		; 00000103H
  00021	56		 push	 esi
  00022	8d 85 f5 fd ff
	ff		 lea	 eax, DWORD PTR _fName$[ebp+1]
  00028	6a 00		 push	 0
  0002a	50		 push	 eax

; 268  : 	char szPath[MAX_PATH] = "";
; 269  : 	strcat( szPath, DirName );

  0002b	89 bd b0 fc ff
	ff		 mov	 DWORD PTR _DirName$GSCopy$[ebp], edi
  00031	c6 85 f4 fd ff
	ff 00		 mov	 BYTE PTR _fName$[ebp], 0
  00038	e8 00 00 00 00	 call	 _memset
  0003d	56		 push	 esi
  0003e	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp+1]
  00044	6a 00		 push	 0
  00046	50		 push	 eax
  00047	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szPath$[ebp], 0
  0004e	e8 00 00 00 00	 call	 _memset
  00053	8b c7		 mov	 eax, edi
  00055	83 c4 18	 add	 esp, 24			; 00000018H
  00058	8b f0		 mov	 esi, eax
$LL11@DeleteDire:
  0005a	8a 08		 mov	 cl, BYTE PTR [eax]
  0005c	40		 inc	 eax
  0005d	84 c9		 test	 cl, cl
  0005f	75 f9		 jne	 SHORT $LL11@DeleteDire
  00061	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR _szPath$[ebp]
  00067	2b c6		 sub	 eax, esi
  00069	4f		 dec	 edi
$LL12@DeleteDire:
  0006a	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  0006d	47		 inc	 edi
  0006e	84 c9		 test	 cl, cl
  00070	75 f8		 jne	 SHORT $LL12@DeleteDire
  00072	8b c8		 mov	 ecx, eax
  00074	c1 e9 02	 shr	 ecx, 2
  00077	f3 a5		 rep movsd
  00079	8b c8		 mov	 ecx, eax
  0007b	83 e1 03	 and	 ecx, 3

; 270  : 	strcat( szPath, FileExten );

  0007e	8b c3		 mov	 eax, ebx
  00080	f3 a4		 rep movsb
  00082	8b c8		 mov	 ecx, eax
$LL13@DeleteDire:
  00084	8a 10		 mov	 dl, BYTE PTR [eax]
  00086	40		 inc	 eax
  00087	84 d2		 test	 dl, dl
  00089	75 f9		 jne	 SHORT $LL13@DeleteDire
  0008b	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR _szPath$[ebp]
  00091	2b c1		 sub	 eax, ecx
  00093	8b f1		 mov	 esi, ecx
  00095	4f		 dec	 edi
$LL14@DeleteDire:
  00096	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00099	47		 inc	 edi
  0009a	84 c9		 test	 cl, cl
  0009c	75 f8		 jne	 SHORT $LL14@DeleteDire
  0009e	8b c8		 mov	 ecx, eax
  000a0	c1 e9 02	 shr	 ecx, 2
  000a3	f3 a5		 rep movsd
  000a5	8b c8		 mov	 ecx, eax

; 271  : 	BOOL bLoopResult = true;
; 272  : 
; 273  : 	memset( &wfd, 0, sizeof( WIN32_FIND_DATA ) );

  000a7	68 40 01 00 00	 push	 320			; 00000140H
  000ac	8d 85 b4 fc ff
	ff		 lea	 eax, DWORD PTR _wfd$[ebp]
  000b2	83 e1 03	 and	 ecx, 3
  000b5	6a 00		 push	 0
  000b7	50		 push	 eax
  000b8	f3 a4		 rep movsb
  000ba	e8 00 00 00 00	 call	 _memset
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 274  : 	hHandle = FindFirstFile( szPath, &wfd );

  000c2	8d 85 b4 fc ff
	ff		 lea	 eax, DWORD PTR _wfd$[ebp]
  000c8	50		 push	 eax
  000c9	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  000cf	50		 push	 eax
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8

; 275  : 	if( strcmp( wfd.cFileName, "" ) != 0 )

  000d6	33 c9		 xor	 ecx, ecx
  000d8	41		 inc	 ecx
  000d9	8b d8		 mov	 ebx, eax
  000db	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000e0	8d b5 e0 fc ff
	ff		 lea	 esi, DWORD PTR _wfd$[ebp+44]
  000e6	33 c0		 xor	 eax, eax
  000e8	f3 a6		 repe cmpsb
  000ea	74 70		 je	 SHORT $LN2@DeleteDire
$LL3@DeleteDire:

; 276  : 	{
; 277  : 		while( bLoopResult )
; 278  : 		{
; 279  : 			if( !(wfd.dwFileAttributes&FILE_ATTRIBUTE_DIRECTORY) )

  000ec	f6 85 b4 fc ff
	ff 10		 test	 BYTE PTR _wfd$[ebp], 16	; 00000010H
  000f3	75 55		 jne	 SHORT $LN1@DeleteDire

; 280  : 			{
; 281  : 				strcpy( fName, DirName );

  000f5	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _DirName$GSCopy$[ebp]
  000fb	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _fName$[ebp]
  00101	2b d0		 sub	 edx, eax
$LL7@DeleteDire:
  00103	8a 08		 mov	 cl, BYTE PTR [eax]
  00105	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00108	40		 inc	 eax
  00109	84 c9		 test	 cl, cl
  0010b	75 f6		 jne	 SHORT $LL7@DeleteDire

; 282  : 				strcat( fName, wfd.cFileName );

  0010d	8d 85 e0 fc ff
	ff		 lea	 eax, DWORD PTR _wfd$[ebp+44]
  00113	8b d0		 mov	 edx, eax
$LL16@DeleteDire:
  00115	8a 08		 mov	 cl, BYTE PTR [eax]
  00117	40		 inc	 eax
  00118	84 c9		 test	 cl, cl
  0011a	75 f9		 jne	 SHORT $LL16@DeleteDire
  0011c	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _fName$[ebp]
  00122	2b c2		 sub	 eax, edx
  00124	4f		 dec	 edi
$LL17@DeleteDire:
  00125	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00128	47		 inc	 edi
  00129	84 c9		 test	 cl, cl
  0012b	75 f8		 jne	 SHORT $LL17@DeleteDire
  0012d	8b c8		 mov	 ecx, eax
  0012f	c1 e9 02	 shr	 ecx, 2
  00132	8b f2		 mov	 esi, edx
  00134	f3 a5		 rep movsd
  00136	8b c8		 mov	 ecx, eax

; 283  : 				DeleteFile( fName );

  00138	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _fName$[ebp]
  0013e	83 e1 03	 and	 ecx, 3
  00141	50		 push	 eax
  00142	f3 a4		 rep movsb
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
$LN1@DeleteDire:

; 284  : 			}
; 285  : 			bLoopResult = FindNextFile( hHandle, &wfd );

  0014a	8d 85 b4 fc ff
	ff		 lea	 eax, DWORD PTR _wfd$[ebp]
  00150	50		 push	 eax
  00151	53		 push	 ebx
  00152	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextFileA@8
  00158	85 c0		 test	 eax, eax
  0015a	75 90		 jne	 SHORT $LL3@DeleteDire
$LN2@DeleteDire:

; 286  : 		}
; 287  : 	}
; 288  : 	return true;
; 289  : }

  0015c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	33 cd		 xor	 ecx, ebp
  00163	b0 01		 mov	 al, 1
  00165	5b		 pop	 ebx
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c2 08 00	 ret	 8
?DeleteDirectoryInFile@CLogin@@IAE_NPBD0@Z ENDP		; CLogin::DeleteDirectoryInFile
_TEXT	ENDS
PUBLIC	??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ ; `CLogin::SetAdminSettings'::`2'::OptionRegInfo::~OptionRegInfo
; Function compile flags: /Ogsp
;	COMDAT ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
_TEXT	SEGMENT
??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ PROC ; `CLogin::SetAdminSettings'::`2'::OptionRegInfo::~OptionRegInfo, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ ENDP ; `CLogin::SetAdminSettings'::`2'::OptionRegInfo::~OptionRegInfo
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetProcessIEParentID@CLogin@@IAEHK@Z		; CLogin::GetProcessIEParentID
EXTRN	_Process32Next@8:PROC
EXTRN	_Process32First@8:PROC
EXTRN	_CreateToolhelp32Snapshot@8:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
;	COMDAT ?GetProcessIEParentID@CLogin@@IAEHK@Z
_TEXT	SEGMENT
_Entry$ = -300						; size = 296
__$ArrayPad$ = -4					; size = 4
_pid$ = 8						; size = 4
?GetProcessIEParentID@CLogin@@IAEHK@Z PROC		; CLogin::GetProcessIEParentID, COMDAT
; _this$ = ecx

; 822  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi

; 823  : 	PROCESSENTRY32 Entry = { sizeof(PROCESSENTRY32) };

  00015	68 24 01 00 00	 push	 292			; 00000124H
  0001a	33 db		 xor	 ebx, ebx
  0001c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _Entry$[ebp+4]
  00022	53		 push	 ebx
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memset
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 824  : 	Entry.dwSize = sizeof( Entry );
; 825  : 	HANDLE hSnapshot = CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS, 0 );

  0002c	53		 push	 ebx
  0002d	6a 02		 push	 2
  0002f	c7 85 d4 fe ff
	ff 28 01 00 00	 mov	 DWORD PTR _Entry$[ebp], 296 ; 00000128H
  00039	e8 00 00 00 00	 call	 _CreateToolhelp32Snapshot@8
  0003e	8b f0		 mov	 esi, eax

; 826  : 	
; 827  : 	bool bSuccess = false;
; 828  : 	Process32First( hSnapshot, &Entry );

  00040	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _Entry$[ebp]
  00046	50		 push	 eax
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 _Process32First@8
$LL6@GetProcess:

; 829  : 	do
; 830  : 	{
; 831  : 		if( Entry.th32ProcessID == pid )

  0004d	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _Entry$[ebp+8]
  00053	3b 45 08	 cmp	 eax, DWORD PTR _pid$[ebp]
  00056	75 02		 jne	 SHORT $LN5@GetProcess

; 832  : 		{
; 833  : 			bSuccess = true;

  00058	b3 01		 mov	 bl, 1
$LN5@GetProcess:

; 834  : 		}
; 835  : 	}
; 836  : 	while( Process32Next( hSnapshot, &Entry ) );

  0005a	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _Entry$[ebp]
  00060	50		 push	 eax
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _Process32Next@8
  00067	85 c0		 test	 eax, eax
  00069	75 e2		 jne	 SHORT $LL6@GetProcess

; 837  : 
; 838  : 	if( bSuccess )
; 839  : 		return Entry.th32ParentProcessID;
; 840  : 	else
; 841  : 		return 0;
; 842  : } 

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	0f b6 c3	 movzx	 eax, bl
  00071	f7 d8		 neg	 eax
  00073	1b c0		 sbb	 eax, eax
  00075	23 85 ec fe ff
	ff		 and	 eax, DWORD PTR _Entry$[ebp+24]
  0007b	5e		 pop	 esi
  0007c	33 cd		 xor	 ecx, ebp
  0007e	5b		 pop	 ebx
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	c9		 leave
  00085	c2 04 00	 ret	 4
?GetProcessIEParentID@CLogin@@IAEHK@Z ENDP		; CLogin::GetProcessIEParentID
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessOptions@CLogin@@QAE_NABVioHashString@@@Z ; CLogin::ProcessOptions
EXTRN	__imp_?Initialize@ioResourceLoader@@QAEX_N@Z:PROC
EXTRN	__imp_?GetInstance@ioResourceLoader@@SAAAV1@XZ:PROC
EXTRN	__imp__GetCurrentDirectoryA@8:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ProcessOptions@CLogin@@QAE_NABVioHashString@@@Z
_TEXT	SEGMENT
_szRootDir$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_szOptions$ = 8						; size = 4
?ProcessOptions@CLogin@@QAE_NABVioHashString@@@Z PROC	; CLogin::ProcessOptions, COMDAT
; _this$ = ecx

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 846  : 	char szRootDir[MAX_PATH];
; 847  : 	char szFullPath[MAX_PATH]="";
; 848  : 	::GetCurrentDirectory(MAX_PATH,szRootDir);

  00013	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szRootDir$[ebp]
  00019	50		 push	 eax
  0001a	68 04 01 00 00	 push	 260			; 00000104H
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentDirectoryA@8

; 849  : 
; 850  : #ifdef USE_IOP
; 851  : 	g_ResourceLoader.Initialize( true );
; 852  : 
; 853  : 		memset( szFullPath, 0, sizeof(szFullPath));
; 854  : 		StringCbPrintf_e( szFullPath, sizeof( szFullPath ), "%s\\rs.iop" , szRootDir );
; 855  : 
; 856  : 	if( !g_ResourceLoader.AddPackFile( szFullPath , "") )
; 857  : 		return false;
; 858  : 
; 859  : 	memset( szFullPath, 0, sizeof(szFullPath));
; 860  : 	StringCbPrintf( szFullPath, sizeof( szFullPath ), "%s\\map.iop" , szRootDir );
; 861  : 		
; 862  : 	if( !g_ResourceLoader.AddPackFile( szFullPath , "_map") )
; 863  : 		return false;
; 864  : 
; 865  : #else
; 866  : 	g_ResourceLoader.Initialize(false);

  00025	6a 00		 push	 0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetInstance@ioResourceLoader@@SAAAV1@XZ
  0002d	8b c8		 mov	 ecx, eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Initialize@ioResourceLoader@@QAEX_N@Z

; 867  : #endif
; 868  : 
; 869  : 	return true;
; 870  : }

  00035	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00038	33 cd		 xor	 ecx, ebp
  0003a	b0 01		 mov	 al, 1
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	c9		 leave
  00042	c2 04 00	 ret	 4
?ProcessOptions@CLogin@@QAE_NABVioHashString@@@Z ENDP	; CLogin::ProcessOptions
_TEXT	ENDS
PUBLIC	??_C@_0BH@CENBOLNM@_LOSTSAGA_AUTOUPGRADE_?$AA@	; `string'
PUBLIC	?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z		; CLogin::SendMsgToAutoUpgrade
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__FindWindowA@8:PROC
;	COMDAT ?cds@?4??SendMsgToAutoUpgrade@CLogin@@QAEXK@Z@4UtagCOPYDATASTRUCT@@A
_BSS	SEGMENT
?cds@?4??SendMsgToAutoUpgrade@CLogin@@QAEXK@Z@4UtagCOPYDATASTRUCT@@A DB 0cH DUP (?) ; `CLogin::SendMsgToAutoUpgrade'::`5'::cds
_BSS	ENDS
;	COMDAT ??_C@_0BH@CENBOLNM@_LOSTSAGA_AUTOUPGRADE_?$AA@
CONST	SEGMENT
??_C@_0BH@CENBOLNM@_LOSTSAGA_AUTOUPGRADE_?$AA@ DB '_LOSTSAGA_AUTOUPGRADE_'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z
_TEXT	SEGMENT
_dwWMTYPE$ = 8						; size = 4
?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z PROC		; CLogin::SendMsgToAutoUpgrade, COMDAT
; _this$ = ecx

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 874  : 	HWND hWnd = FindWindow(AUTPUPGRADE_CLASS_NAME,NULL);

  00003	6a 00		 push	 0
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CENBOLNM@_LOSTSAGA_AUTOUPGRADE_?$AA@
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindWindowA@8

; 875  : 	if(hWnd != NULL)

  00010	85 c0		 test	 eax, eax
  00012	74 27		 je	 SHORT $LN1@SendMsgToA

; 876  : 	{
; 877  : 		static COPYDATASTRUCT cds;
; 878  : 		cds.dwData = dwWMTYPE;

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _dwWMTYPE$[ebp]

; 879  : 		cds.cbData = 0;

  00017	83 25 04 00 00
	00 00		 and	 DWORD PTR ?cds@?4??SendMsgToAutoUpgrade@CLogin@@QAEXK@Z@4UtagCOPYDATASTRUCT@@A+4, 0

; 880  : 		cds.lpData = NULL;

  0001e	83 25 08 00 00
	00 00		 and	 DWORD PTR ?cds@?4??SendMsgToAutoUpgrade@CLogin@@QAEXK@Z@4UtagCOPYDATASTRUCT@@A+8, 0

; 881  : 		SendMessage(hWnd, WM_COPYDATA, 0,(LPARAM)&cds);

  00025	68 00 00 00 00	 push	 OFFSET ?cds@?4??SendMsgToAutoUpgrade@CLogin@@QAEXK@Z@4UtagCOPYDATASTRUCT@@A
  0002a	6a 00		 push	 0
  0002c	6a 4a		 push	 74			; 0000004aH
  0002e	50		 push	 eax
  0002f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?cds@?4??SendMsgToAutoUpgrade@CLogin@@QAEXK@Z@4UtagCOPYDATASTRUCT@@A, ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN1@SendMsgToA:

; 882  : 	}
; 883  : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ENDP		; CLogin::SendMsgToAutoUpgrade
_TEXT	ENDS
PUBLIC	?GetNumber@CLogin@@IAEHPAD@Z			; CLogin::GetNumber
EXTRN	__imp__atoi:PROC
EXTRN	__imp__IsCharLowerA@4:PROC
EXTRN	__imp__IsCharAlphaA@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetNumber@CLogin@@IAEHPAD@Z
_TEXT	SEGMENT
_szOneOption$ = 8					; size = 4
?GetNumber@CLogin@@IAEHPAD@Z PROC			; CLogin::GetNumber, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 902  : 	int iReturnValue = 0;
; 903  : 
; 904  : 	if( IsCharAlpha( szOneOption[0] ) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _szOneOption$[ebp]
  00007	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsCharAlphaA@4
  00011	85 c0		 test	 eax, eax
  00013	74 1b		 je	 SHORT $LN4@GetNumber

; 905  : 	{
; 906  : 		// a : 10, .... z: 35
; 907  : 		// A : 36, .... Z: 61
; 908  : 		if( IsCharLower( szOneOption[0]) )

  00015	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsCharLowerA@4
  0001f	85 c0		 test	 eax, eax

; 909  : 			iReturnValue = szOneOption[0] - 87; // a = 97 이므로 10을 만들기 위해서

  00021	0f be 06	 movsx	 eax, BYTE PTR [esi]
  00024	74 05		 je	 SHORT $LN3@GetNumber
  00026	83 e8 57	 sub	 eax, 87			; 00000057H

; 910  : 		else

  00029	eb 0d		 jmp	 SHORT $LN1@GetNumber
$LN3@GetNumber:

; 911  : 			iReturnValue = szOneOption[0] - 29; // A = 65 이므로 36을 만들기 위해서

  0002b	83 e8 1d	 sub	 eax, 29			; 0000001dH

; 912  : 
; 913  : 	}
; 914  : 	else

  0002e	eb 08		 jmp	 SHORT $LN1@GetNumber
$LN4@GetNumber:

; 915  : 		iReturnValue = atoi(szOneOption);

  00030	56		 push	 esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00037	59		 pop	 ecx
$LN1@GetNumber:
  00038	5e		 pop	 esi

; 916  : 
; 917  : 	return iReturnValue;
; 918  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?GetNumber@CLogin@@IAEHPAD@Z ENDP			; CLogin::GetNumber
_TEXT	ENDS
PUBLIC	?SetMyIP@CLogin@@QAEXPBD@Z			; CLogin::SetMyIP
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetMyIP@CLogin@@QAEXPBD@Z
_TEXT	SEGMENT
_szMyIP$ = 8						; size = 4
?SetMyIP@CLogin@@QAEXPBD@Z PROC				; CLogin::SetMyIP, COMDAT
; _this$ = ecx

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 922  : 	m_szMyIP = szMyIP;

  00003	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H

; 923  : }

  00009	5d		 pop	 ebp

; 922  : 	m_szMyIP = szMyIP;

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
?SetMyIP@CLogin@@QAEXPBD@Z ENDP				; CLogin::SetMyIP
_TEXT	ENDS
PUBLIC	?DisconnectDlgProc@@YGHPAUHWND__@@IIJ@Z		; DisconnectDlgProc
EXTRN	?LoginProc@ioApplication@@QAEHPAUHWND__@@IIJ@Z:PROC ; ioApplication::LoginProc
EXTRN	?GetSingleton@ioApplication@@SAAAV1@XZ:PROC	; ioApplication::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?DisconnectDlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hDlg$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?DisconnectDlgProc@@YGHPAUHWND__@@IIJ@Z PROC		; DisconnectDlgProc, COMDAT

; 1033 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1034 : 	return g_App.LoginProc( hDlg, message, wParam, lParam );

  00003	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _message$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _hDlg$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?LoginProc@ioApplication@@QAEHPAUHWND__@@IIJ@Z ; ioApplication::LoginProc

; 1035 : }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?DisconnectDlgProc@@YGHPAUHWND__@@IIJ@Z ENDP		; DisconnectDlgProc
_TEXT	ENDS
PUBLIC	?ShowDisconnectDlg@CLogin@@IAEXPAUHINSTANCE__@@@Z ; CLogin::ShowDisconnectDlg
EXTRN	__imp__CreateDialogParamA@20:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ShowDisconnectDlg@CLogin@@IAEXPAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
?ShowDisconnectDlg@CLogin@@IAEXPAUHINSTANCE__@@@Z PROC	; CLogin::ShowDisconnectDlg, COMDAT
; _this$ = ecx

; 1039 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1040 : 	CreateDialog( hInstance, MAKEINTRESOURCE(IDD_DISCONNECT), NULL, DisconnectDlgProc ); // 모달리스

  00003	6a 00		 push	 0
  00005	68 00 00 00 00	 push	 OFFSET ?DisconnectDlgProc@@YGHPAUHWND__@@IIJ@Z ; DisconnectDlgProc
  0000a	6a 00		 push	 0
  0000c	68 bf 00 00 00	 push	 191			; 000000bfH
  00011	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamA@20

; 1041 : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ShowDisconnectDlg@CLogin@@IAEXPAUHINSTANCE__@@@Z ENDP	; CLogin::ShowDisconnectDlg
_TEXT	ENDS
PUBLIC	??1ioINILoader_e@@QAE@XZ			; ioINILoader_e::~ioINILoader_e
EXTRN	__imp_??1ioINILoader@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1ioINILoader_e@@QAE@XZ
_TEXT	SEGMENT
??1ioINILoader_e@@QAE@XZ PROC				; ioINILoader_e::~ioINILoader_e, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
??1ioINILoader_e@@QAE@XZ ENDP				; ioINILoader_e::~ioINILoader_e
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
PUBLIC	??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
_TEXT	ENDS
PUBLIC	?GetSingletonPtr@?$Singleton@VioChannelingNodeManager@@@@SAPAVioChannelingNodeManager@@XZ ; Singleton<ioChannelingNodeManager>::GetSingletonPtr
EXTRN	?ms_Singleton@?$Singleton@VioChannelingNodeManager@@@@1PAVioChannelingNodeManager@@A:DWORD ; Singleton<ioChannelingNodeManager>::ms_Singleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ?GetSingletonPtr@?$Singleton@VioChannelingNodeManager@@@@SAPAVioChannelingNodeManager@@XZ
_TEXT	SEGMENT
?GetSingletonPtr@?$Singleton@VioChannelingNodeManager@@@@SAPAVioChannelingNodeManager@@XZ PROC ; Singleton<ioChannelingNodeManager>::GetSingletonPtr, COMDAT

; 48   : 		return ( ms_Singleton );

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioChannelingNodeManager@@@@1PAVioChannelingNodeManager@@A ; Singleton<ioChannelingNodeManager>::ms_Singleton

; 49   : 	}

  00005	c3		 ret	 0
?GetSingletonPtr@?$Singleton@VioChannelingNodeManager@@@@SAPAVioChannelingNodeManager@@XZ ENDP ; Singleton<ioChannelingNodeManager>::GetSingletonPtr
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z
_TEXT	SEGMENT
$T510884 = -12						; size = 12
$T510889 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z PROC ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T510889[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T510889[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T510884[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T510884[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T510884[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ENDP ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
_TEXT	ENDS
PUBLIC	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringLengthWorkerA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
?StringLengthWorkerA@@YGJPBDIPAI@Z PROC			; StringLengthWorkerA, COMDAT
; _psz$ = eax
; _cchMax$ = edx
; _pcchLength$ = edi

; 8549 : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax

; 8550 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8551 :     size_t cchOriginalMax = cchMax;

  00005	8b ca		 mov	 ecx, edx

; 8552 : 
; 8553 :     while (cchMax && (*psz != '\0'))

  00007	85 d2		 test	 edx, edx
  00009	74 0c		 je	 SHORT $LN11@StringLeng
$LL6@StringLeng:
  0000b	38 06		 cmp	 BYTE PTR [esi], al
  0000d	74 04		 je	 SHORT $LN5@StringLeng

; 8554 :     {
; 8555 :         psz++;

  0000f	46		 inc	 esi

; 8556 :         cchMax--;

  00010	4a		 dec	 edx
  00011	75 f8		 jne	 SHORT $LL6@StringLeng
$LN5@StringLeng:

; 8557 :     }
; 8558 : 
; 8559 :     if (cchMax == 0)

  00013	85 d2		 test	 edx, edx
  00015	75 05		 jne	 SHORT $LN4@StringLeng
$LN11@StringLeng:

; 8560 :     {
; 8561 :         // the string is longer than cchMax
; 8562 :         hr = STRSAFE_E_INVALID_PARAMETER;

  00017	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN4@StringLeng:
  0001c	5e		 pop	 esi

; 8563 :     }
; 8564 : 
; 8565 :     if (pcchLength)

  0001d	85 ff		 test	 edi, edi
  0001f	74 0c		 je	 SHORT $LN1@StringLeng

; 8566 :     {
; 8567 :         if (SUCCEEDED(hr))

  00021	85 c0		 test	 eax, eax
  00023	78 05		 js	 SHORT $LN2@StringLeng

; 8568 :         {
; 8569 :             *pcchLength = cchOriginalMax - cchMax;

  00025	2b ca		 sub	 ecx, edx
  00027	89 0f		 mov	 DWORD PTR [edi], ecx

; 8574 :         }
; 8575 :     }
; 8576 : 
; 8577 :     return hr;
; 8578 : }

  00029	c3		 ret	 0
$LN2@StringLeng:

; 8570 :         }
; 8571 :         else
; 8572 :         {
; 8573 :             *pcchLength = 0;

  0002a	83 27 00	 and	 DWORD PTR [edi], 0
$LN1@StringLeng:

; 8574 :         }
; 8575 :     }
; 8576 : 
; 8577 :     return hr;
; 8578 : }

  0002d	c3		 ret	 0
?StringLengthWorkerA@@YGJPBDIPAI@Z ENDP			; StringLengthWorkerA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringValidateDestA@@YGJPBDII@Z
_TEXT	SEGMENT
_cchMax$ = 8						; size = 4
?StringValidateDestA@@YGJPBDII@Z PROC			; StringValidateDestA, COMDAT
; _cchDest$ = ecx

; 8721 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8722 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8723 : 
; 8724 :     if ((cchDest == 0) || (cchDest > cchMax))

  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN1@StringVali
  00009	3b 4d 08	 cmp	 ecx, DWORD PTR _cchMax$[ebp]
  0000c	76 05		 jbe	 SHORT $LN2@StringVali
$LN1@StringVali:

; 8725 :     {
; 8726 :         hr = STRSAFE_E_INVALID_PARAMETER;

  0000e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN2@StringVali:

; 8727 :     }
; 8728 : 
; 8729 :     return hr;
; 8730 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?StringValidateDestA@@YGJPBDII@Z ENDP			; StringValidateDestA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringValidateDestAndLengthA@@YGJPBDIPAII@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cchMax$ = 12						; size = 4
?StringValidateDestAndLengthA@@YGJPBDIPAII@Z PROC	; StringValidateDestAndLengthA, COMDAT
; _cchDest$ = ecx
; _pcchDestLength$ = esi

; 8743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8744 :     HRESULT hr;
; 8745 : 
; 8746 :     hr = StringValidateDestA(pszDest, cchDest, cchMax);

  00003	33 c0		 xor	 eax, eax
  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN5@StringVali@2
  00009	3b 4d 0c	 cmp	 ecx, DWORD PTR _cchMax$[ebp]
  0000c	76 05		 jbe	 SHORT $LN6@StringVali@2
$LN5@StringVali@2:
  0000e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN6@StringVali@2:

; 8747 : 
; 8748 :     if (SUCCEEDED(hr))

  00013	85 c0		 test	 eax, eax
  00015	78 34		 js	 SHORT $LN2@StringVali@2

; 8749 :     {
; 8750 :         hr = StringLengthWorkerA(pszDest, cchDest, pcchDestLength);

  00017	8b 45 08	 mov	 eax, DWORD PTR _pszDest$[ebp]
  0001a	57		 push	 edi
  0001b	33 ff		 xor	 edi, edi
  0001d	8b d1		 mov	 edx, ecx
  0001f	85 c9		 test	 ecx, ecx
  00021	74 0d		 je	 SHORT $LN19@StringVali@2
$LL14@StringVali@2:
  00023	80 38 00	 cmp	 BYTE PTR [eax], 0
  00026	74 04		 je	 SHORT $LN13@StringVali@2
  00028	40		 inc	 eax
  00029	4a		 dec	 edx
  0002a	75 f7		 jne	 SHORT $LL14@StringVali@2
$LN13@StringVali@2:
  0002c	85 d2		 test	 edx, edx
  0002e	75 05		 jne	 SHORT $LN12@StringVali@2
$LN19@StringVali@2:
  00030	bf 57 00 07 80	 mov	 edi, -2147024809	; 80070057H
$LN12@StringVali@2:
  00035	85 f6		 test	 esi, esi
  00037	74 0d		 je	 SHORT $LN9@StringVali@2
  00039	85 ff		 test	 edi, edi
  0003b	78 06		 js	 SHORT $LN10@StringVali@2
  0003d	2b ca		 sub	 ecx, edx
  0003f	89 0e		 mov	 DWORD PTR [esi], ecx
  00041	eb 03		 jmp	 SHORT $LN9@StringVali@2
$LN10@StringVali@2:
  00043	83 26 00	 and	 DWORD PTR [esi], 0
$LN9@StringVali@2:
  00046	8b c7		 mov	 eax, edi
  00048	5f		 pop	 edi

; 8751 :     }
; 8752 :     else

  00049	eb 03		 jmp	 SHORT $LN1@StringVali@2
$LN2@StringVali@2:

; 8753 :     {
; 8754 :         *pcchDestLength = 0;

  0004b	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@StringVali@2:

; 8755 :     }
; 8756 : 
; 8757 :     return hr;
; 8758 : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?StringValidateDestAndLengthA@@YGJPBDIPAII@Z ENDP	; StringValidateDestAndLengthA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_pcchNewDestLength$ = 8					; size = 4
_pszSrc$ = 12						; size = 4
_cchToCopy$ = 16					; size = 4
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z PROC		; StringCopyWorkerA, COMDAT
; _pszDest$ = ecx
; _cchDest$ = eax

; 8947 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 8948 :     HRESULT hr = S_OK;

  00004	83 65 fc 00	 and	 DWORD PTR _hr$[ebp], 0
  00008	57		 push	 edi
  00009	8b f8		 mov	 edi, eax

; 8949 :     size_t cchNewDestLength = 0;

  0000b	33 c0		 xor	 eax, eax

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  0000d	85 ff		 test	 edi, edi
  0000f	74 23		 je	 SHORT $LN9@StringCopy

; 8948 :     HRESULT hr = S_OK;

  00011	53		 push	 ebx
  00012	8b 5d 10	 mov	 ebx, DWORD PTR _cchToCopy$[ebp]
  00015	56		 push	 esi

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  00016	8b 75 0c	 mov	 esi, DWORD PTR _pszSrc$[ebp]
  00019	2b f1		 sub	 esi, ecx
$LL4@StringCopy:
  0001b	85 db		 test	 ebx, ebx
  0001d	74 0f		 je	 SHORT $LN11@StringCopy
  0001f	8a 14 0e	 mov	 dl, BYTE PTR [esi+ecx]
  00022	84 d2		 test	 dl, dl
  00024	74 08		 je	 SHORT $LN11@StringCopy

; 8954 :     {
; 8955 :         *pszDest++ = *pszSrc++;

  00026	88 11		 mov	 BYTE PTR [ecx], dl
  00028	41		 inc	 ecx

; 8956 :         cchDest--;

  00029	4b		 dec	 ebx

; 8957 :         cchToCopy--;
; 8958 : 
; 8959 :         cchNewDestLength++;

  0002a	40		 inc	 eax
  0002b	4f		 dec	 edi
  0002c	75 ed		 jne	 SHORT $LL4@StringCopy
$LN11@StringCopy:
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 8960 :     }
; 8961 : 
; 8962 :     if (cchDest == 0)

  00030	85 ff		 test	 edi, edi
  00032	75 09		 jne	 SHORT $LN2@StringCopy
$LN9@StringCopy:

; 8963 :     {
; 8964 :         // we are going to truncate pszDest
; 8965 :         pszDest--;

  00034	49		 dec	 ecx

; 8966 :         cchNewDestLength--;

  00035	48		 dec	 eax

; 8967 : 
; 8968 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  00036	c7 45 fc 7a 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024774 ; 8007007aH
$LN2@StringCopy:

; 8969 :     }
; 8970 : 
; 8971 :     *pszDest = '\0';

  0003d	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 8972 : 
; 8973 :     if (pcchNewDestLength)

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00043	5f		 pop	 edi
  00044	85 c9		 test	 ecx, ecx
  00046	74 02		 je	 SHORT $LN1@StringCopy

; 8974 :     {
; 8975 :         *pcchNewDestLength = cchNewDestLength;

  00048	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringCopy:

; 8976 :     }
; 8977 : 
; 8978 :     return hr;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 8979 : }

  0004d	c9		 leave
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ENDP		; StringCopyWorkerA
_TEXT	ENDS
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z
_TEXT	SEGMENT
_pcchNewDestLength$ = 8					; size = 4
_pszFormat$ = 12					; size = 4
_argList$ = 16						; size = 4
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z PROC		; StringVPrintfWorkerA, COMDAT
; _pszDest$ = edi
; _cchDest$ = eax

; 9029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 9030 :     HRESULT hr = S_OK;
; 9031 :     int iRet;
; 9032 :     size_t cchMax;
; 9033 :     size_t cchNewDestLength = 0;
; 9034 : 
; 9035 :     // leave the last space for the null terminator
; 9036 :     cchMax = cchDest - 1;
; 9037 : 
; 9038 : #if (STRSAFE_USE_SECURE_CRT == 1) && !defined(STRSAFE_LIB_IMPL)
; 9039 :     iRet = _vsnprintf_s(pszDest, cchDest, cchMax, pszFormat, argList);
; 9040 : #else
; 9041 :     #pragma warning(push)
; 9042 :     #pragma warning(disable: __WARNING_BANNED_API_USAGE)// "STRSAFE not included"
; 9043 :     iRet = _vsnprintf(pszDest, cchMax, pszFormat, argList);

  00005	ff 75 10	 push	 DWORD PTR _argList$[ebp]
  00008	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  0000b	ff 75 0c	 push	 DWORD PTR _pszFormat$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 9044 :     #pragma warning(pop)
; 9045 : #endif
; 9046 :     // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 9047 : 
; 9048 :     if ((iRet < 0) || (((size_t)iRet) > cchMax))

  0001b	85 c0		 test	 eax, eax
  0001d	78 0b		 js	 SHORT $LN5@StringVPri
  0001f	3b c6		 cmp	 eax, esi
  00021	77 07		 ja	 SHORT $LN5@StringVPri

; 9058 :     }
; 9059 :     else if (((size_t)iRet) == cchMax)

  00023	75 0f		 jne	 SHORT $LN2@StringVPri

; 9060 :     {
; 9061 :         // need to null terminate the string
; 9062 :         pszDest += cchMax;
; 9063 :         *pszDest = '\0';

  00025	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9064 : 
; 9065 :         cchNewDestLength = cchMax;
; 9066 :     }
; 9067 :     else

  00028	eb 08		 jmp	 SHORT $LN9@StringVPri
$LN5@StringVPri:

; 9049 :     {
; 9050 :         // need to null terminate the string
; 9051 :         pszDest += cchMax;
; 9052 :         *pszDest = '\0';

  0002a	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9055 : 
; 9056 :         // we have truncated pszDest
; 9057 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  0002d	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringVPri:

; 9053 : 
; 9054 :         cchNewDestLength = cchMax;

  00032	8b c6		 mov	 eax, esi
$LN2@StringVPri:

; 9068 :     {
; 9069 :         cchNewDestLength = (size_t)iRet;
; 9070 :     }
; 9071 : 
; 9072 :     if (pcchNewDestLength)

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00037	85 c9		 test	 ecx, ecx
  00039	74 02		 je	 SHORT $LN1@StringVPri

; 9073 :     {
; 9074 :         *pcchNewDestLength = cchNewDestLength;

  0003b	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringVPri:
  0003d	5e		 pop	 esi

; 9075 :     }
; 9076 : 
; 9077 :     return hr;

  0003e	8b c3		 mov	 eax, ebx
  00040	5b		 pop	 ebx

; 9078 : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z ENDP		; StringVPrintfWorkerA
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetCPUName@Setting@@SAPADXZ			; Setting::GetCPUName
EXTRN	?m_szCPUName@Setting@@1PADA:BYTE		; Setting::m_szCPUName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\setting.h
;	COMDAT ?GetCPUName@Setting@@SAPADXZ
_TEXT	SEGMENT
?GetCPUName@Setting@@SAPADXZ PROC			; Setting::GetCPUName, COMDAT

; 195  : 	static char* GetCPUName() { return m_szCPUName; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?m_szCPUName@Setting@@1PADA ; Setting::m_szCPUName
  00005	c3		 ret	 0
?GetCPUName@Setting@@SAPADXZ ENDP			; Setting::GetCPUName
_TEXT	ENDS
PUBLIC	?GetSystemMemory@Setting@@SAHXZ			; Setting::GetSystemMemory
EXTRN	?m_iSystemMemory@Setting@@1HA:DWORD		; Setting::m_iSystemMemory
; Function compile flags: /Ogsp
;	COMDAT ?GetSystemMemory@Setting@@SAHXZ
_TEXT	SEGMENT
?GetSystemMemory@Setting@@SAHXZ PROC			; Setting::GetSystemMemory, COMDAT

; 199  : 	static int GetSystemMemory() { return m_iSystemMemory; }	// MBytes 단위

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iSystemMemory@Setting@@1HA ; Setting::m_iSystemMemory
  00005	c3		 ret	 0
?GetSystemMemory@Setting@@SAHXZ ENDP			; Setting::GetSystemMemory
_TEXT	ENDS
PUBLIC	?GetGraphicCardName@Setting@@SAPADXZ		; Setting::GetGraphicCardName
EXTRN	?m_szGraphicName@Setting@@1PADA:BYTE		; Setting::m_szGraphicName
; Function compile flags: /Ogsp
;	COMDAT ?GetGraphicCardName@Setting@@SAPADXZ
_TEXT	SEGMENT
?GetGraphicCardName@Setting@@SAPADXZ PROC		; Setting::GetGraphicCardName, COMDAT

; 201  : 	static char* GetGraphicCardName() { return m_szGraphicName; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?m_szGraphicName@Setting@@1PADA ; Setting::m_szGraphicName
  00005	c3		 ret	 0
?GetGraphicCardName@Setting@@SAPADXZ ENDP		; Setting::GetGraphicCardName
_TEXT	ENDS
PUBLIC	?GetOSVersion@Setting@@SAPADXZ			; Setting::GetOSVersion
EXTRN	?m_szOSVersion@Setting@@1PADA:BYTE		; Setting::m_szOSVersion
; Function compile flags: /Ogsp
;	COMDAT ?GetOSVersion@Setting@@SAPADXZ
_TEXT	SEGMENT
?GetOSVersion@Setting@@SAPADXZ PROC			; Setting::GetOSVersion, COMDAT

; 207  : 	static char* GetOSVersion() { return m_szOSVersion; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?m_szOSVersion@Setting@@1PADA ; Setting::m_szOSVersion
  00005	c3		 ret	 0
?GetOSVersion@Setting@@SAPADXZ ENDP			; Setting::GetOSVersion
_TEXT	ENDS
PUBLIC	?GetDXVersion@Setting@@SAPADXZ			; Setting::GetDXVersion
EXTRN	?m_szDirectXVersion@Setting@@1PADA:BYTE		; Setting::m_szDirectXVersion
; Function compile flags: /Ogsp
;	COMDAT ?GetDXVersion@Setting@@SAPADXZ
_TEXT	SEGMENT
?GetDXVersion@Setting@@SAPADXZ PROC			; Setting::GetDXVersion, COMDAT

; 208  : 	static char* GetDXVersion() { return m_szDirectXVersion; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?m_szDirectXVersion@Setting@@1PADA ; Setting::m_szDirectXVersion
  00005	c3		 ret	 0
?GetDXVersion@Setting@@SAPADXZ ENDP			; Setting::GetDXVersion
_TEXT	ENDS
PUBLIC	?SetReservedMode@Setting@@SAXH@Z		; Setting::SetReservedMode
EXTRN	?m_iReservedMode@Setting@@1HA:DWORD		; Setting::m_iReservedMode
; Function compile flags: /Ogsp
;	COMDAT ?SetReservedMode@Setting@@SAXH@Z
_TEXT	SEGMENT
_iMode$ = 8						; size = 4
?SetReservedMode@Setting@@SAXH@Z PROC			; Setting::SetReservedMode, COMDAT

; 406  : 	static void SetReservedMode( int iMode ) { m_iReservedMode = iMode; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iMode$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?m_iReservedMode@Setting@@1HA, eax ; Setting::m_iReservedMode
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetReservedMode@Setting@@SAXH@Z ENDP			; Setting::SetReservedMode
_TEXT	ENDS
PUBLIC	?FullScreen@Setting@@SA_NXZ			; Setting::FullScreen
EXTRN	?m_Option@Setting@@1USettingOption@@A:BYTE	; Setting::m_Option
; Function compile flags: /Ogsp
;	COMDAT ?FullScreen@Setting@@SA_NXZ
_TEXT	SEGMENT
?FullScreen@Setting@@SA_NXZ PROC			; Setting::FullScreen, COMDAT

; 408  : 	static bool FullScreen() { return m_Option.m_bFullScreen; }

  00000	a0 00 00 00 00	 mov	 al, BYTE PTR ?m_Option@Setting@@1USettingOption@@A
  00005	c3		 ret	 0
?FullScreen@Setting@@SA_NXZ ENDP			; Setting::FullScreen
_TEXT	ENDS
PUBLIC	?SetShowBoundBox@Setting@@SAX_N@Z		; Setting::SetShowBoundBox
; Function compile flags: /Ogsp
;	COMDAT ?SetShowBoundBox@Setting@@SAX_N@Z
_TEXT	SEGMENT
_bShow$ = 8						; size = 1
?SetShowBoundBox@Setting@@SAX_N@Z PROC			; Setting::SetShowBoundBox, COMDAT

; 412  : 	static void SetShowBoundBox( bool bShow ) { m_Option.m_bBoundBox = bShow; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bShow$[ebp]
  00006	a2 6e 00 00 00	 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+110, al
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetShowBoundBox@Setting@@SAX_N@Z ENDP			; Setting::SetShowBoundBox
_TEXT	ENDS
PUBLIC	?SetShowBoundSphere@Setting@@SAX_N@Z		; Setting::SetShowBoundSphere
; Function compile flags: /Ogsp
;	COMDAT ?SetShowBoundSphere@Setting@@SAX_N@Z
_TEXT	SEGMENT
_bShow$ = 8						; size = 1
?SetShowBoundSphere@Setting@@SAX_N@Z PROC		; Setting::SetShowBoundSphere, COMDAT

; 415  : 	static void SetShowBoundSphere( bool bShow ) { m_Option.m_bShowSphere = bShow; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bShow$[ebp]
  00006	a2 6f 00 00 00	 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+111, al
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetShowBoundSphere@Setting@@SAX_N@Z ENDP		; Setting::SetShowBoundSphere
_TEXT	ENDS
PUBLIC	?SetShowExtraInfo@Setting@@SAX_N@Z		; Setting::SetShowExtraInfo
; Function compile flags: /Ogsp
;	COMDAT ?SetShowExtraInfo@Setting@@SAX_N@Z
_TEXT	SEGMENT
_bShow$ = 8						; size = 1
?SetShowExtraInfo@Setting@@SAX_N@Z PROC			; Setting::SetShowExtraInfo, COMDAT

; 418  : 	static void SetShowExtraInfo( bool bShow ) { m_Option.m_bExtraInfo = bShow; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bShow$[ebp]
  00006	a2 70 00 00 00	 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+112, al
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetShowExtraInfo@Setting@@SAX_N@Z ENDP			; Setting::SetShowExtraInfo
_TEXT	ENDS
PUBLIC	?SetShowMemoryUsage@Setting@@SAX_N@Z		; Setting::SetShowMemoryUsage
; Function compile flags: /Ogsp
;	COMDAT ?SetShowMemoryUsage@Setting@@SAX_N@Z
_TEXT	SEGMENT
_bShow$ = 8						; size = 1
?SetShowMemoryUsage@Setting@@SAX_N@Z PROC		; Setting::SetShowMemoryUsage, COMDAT

; 421  : 	static void SetShowMemoryUsage( bool bShow ) { m_Option.m_bShowMemoryUsage = bShow; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bShow$[ebp]
  00006	a2 71 00 00 00	 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+113, al
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetShowMemoryUsage@Setting@@SAX_N@Z ENDP		; Setting::SetShowMemoryUsage
_TEXT	ENDS
PUBLIC	?SetModeSub@Setting@@SAXH@Z			; Setting::SetModeSub
; Function compile flags: /Ogsp
;	COMDAT ?SetModeSub@Setting@@SAXH@Z
_TEXT	SEGMENT
_iModeSub$ = 8						; size = 4
?SetModeSub@Setting@@SAXH@Z PROC			; Setting::SetModeSub, COMDAT

; 427  : 	static void SetModeSub( int iModeSub ) { m_Option.m_iModeSub = iModeSub; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iModeSub$[ebp]
  00006	a3 74 00 00 00	 mov	 DWORD PTR ?m_Option@Setting@@1USettingOption@@A+116, eax
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetModeSub@Setting@@SAXH@Z ENDP			; Setting::SetModeSub
_TEXT	ENDS
PUBLIC	?SetModeMap@Setting@@SAXH@Z			; Setting::SetModeMap
; Function compile flags: /Ogsp
;	COMDAT ?SetModeMap@Setting@@SAXH@Z
_TEXT	SEGMENT
_iModeMap$ = 8						; size = 4
?SetModeMap@Setting@@SAXH@Z PROC			; Setting::SetModeMap, COMDAT

; 430  : 	static void SetModeMap( int iModeMap ) { m_Option.m_iModeMap = iModeMap; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iModeMap$[ebp]
  00006	a3 78 00 00 00	 mov	 DWORD PTR ?m_Option@Setting@@1USettingOption@@A+120, eax
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetModeMap@Setting@@SAXH@Z ENDP			; Setting::SetModeMap
_TEXT	ENDS
PUBLIC	?GuildFolderDel@Setting@@SA_NXZ			; Setting::GuildFolderDel
; Function compile flags: /Ogsp
;	COMDAT ?GuildFolderDel@Setting@@SA_NXZ
_TEXT	SEGMENT
?GuildFolderDel@Setting@@SA_NXZ PROC			; Setting::GuildFolderDel, COMDAT

; 449  : 	static bool GuildFolderDel() { return m_Option.m_bGuildFolderDel; }

  00000	a0 90 00 00 00	 mov	 al, BYTE PTR ?m_Option@Setting@@1USettingOption@@A+144
  00005	c3		 ret	 0
?GuildFolderDel@Setting@@SA_NXZ ENDP			; Setting::GuildFolderDel
_TEXT	ENDS
PUBLIC	?SetGuildFolderDel@Setting@@SAX_N@Z		; Setting::SetGuildFolderDel
; Function compile flags: /Ogsp
;	COMDAT ?SetGuildFolderDel@Setting@@SAX_N@Z
_TEXT	SEGMENT
_bGuildFolderDel$ = 8					; size = 1
?SetGuildFolderDel@Setting@@SAX_N@Z PROC		; Setting::SetGuildFolderDel, COMDAT

; 450  : 	static void SetGuildFolderDel( bool bGuildFolderDel ){ m_Option.m_bGuildFolderDel = bGuildFolderDel; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bGuildFolderDel$[ebp]
  00006	a2 90 00 00 00	 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+144, al
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetGuildFolderDel@Setting@@SAX_N@Z ENDP		; Setting::SetGuildFolderDel
_TEXT	ENDS
PUBLIC	?GetInstance@ioApplication@@QBEPAUHINSTANCE__@@XZ ; ioApplication::GetInstance
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
;	COMDAT ?GetInstance@ioApplication@@QBEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
?GetInstance@ioApplication@@QBEPAUHINSTANCE__@@XZ PROC	; ioApplication::GetInstance, COMDAT
; _this$ = ecx

; 687  : 	HINSTANCE GetInstance() const { return m_hInstance; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetInstance@ioApplication@@QBEPAUHINSTANCE__@@XZ ENDP	; ioApplication::GetInstance
_TEXT	ENDS
PUBLIC	?SetAutoupgradeInfoININame@ioApplication@@QAEXABVioHashString@@@Z ; ioApplication::SetAutoupgradeInfoININame
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetAutoupgradeInfoININame@ioApplication@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
_rszAutoupgradeInfoININame$ = 8				; size = 4
?SetAutoupgradeInfoININame@ioApplication@@QAEXABVioHashString@@@Z PROC ; ioApplication::SetAutoupgradeInfoININame, COMDAT
; _this$ = ecx

; 931  : 	void SetAutoupgradeInfoININame( const ioHashString &rszAutoupgradeInfoININame) { m_szAutoupgradeInfoININame = rszAutoupgradeInfoININame; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 c1 08 06 00
	00		 add	 ecx, 1544		; 00000608H
  00009	5d		 pop	 ebp
  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
?SetAutoupgradeInfoININame@ioApplication@@QAEXABVioHashString@@@Z ENDP ; ioApplication::SetAutoupgradeInfoININame
_TEXT	ENDS
PUBLIC	?GetDeskTopWidth@ioApplication@@QBEHXZ		; ioApplication::GetDeskTopWidth
; Function compile flags: /Ogsp
;	COMDAT ?GetDeskTopWidth@ioApplication@@QBEHXZ
_TEXT	SEGMENT
?GetDeskTopWidth@ioApplication@@QBEHXZ PROC		; ioApplication::GetDeskTopWidth, COMDAT
; _this$ = ecx

; 935  : 	int GetDeskTopWidth() const { return m_iDeskTopWidth; }

  00000	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00003	c3		 ret	 0
?GetDeskTopWidth@ioApplication@@QBEHXZ ENDP		; ioApplication::GetDeskTopWidth
_TEXT	ENDS
PUBLIC	?GetDeskTopHeight@ioApplication@@QBEHXZ		; ioApplication::GetDeskTopHeight
; Function compile flags: /Ogsp
;	COMDAT ?GetDeskTopHeight@ioApplication@@QBEHXZ
_TEXT	SEGMENT
?GetDeskTopHeight@ioApplication@@QBEHXZ PROC		; ioApplication::GetDeskTopHeight, COMDAT
; _this$ = ecx

; 936  : 	int GetDeskTopHeight() const { return m_iDeskTopHeight; }

  00000	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00003	c3		 ret	 0
?GetDeskTopHeight@ioApplication@@QBEHXZ ENDP		; ioApplication::GetDeskTopHeight
_TEXT	ENDS
PUBLIC	?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ ; ioApplication::GetConnectedMoveMode
; Function compile flags: /Ogsp
;	COMDAT ?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ
_TEXT	SEGMENT
?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ PROC ; ioApplication::GetConnectedMoveMode, COMDAT
; _this$ = ecx

; 1225 : 	inline ConnectedMoveMode GetConnectedMoveMode(){ return static_cast<ConnectedMoveMode>( m_eConnectedMoveMode ); }

  00000	8b 81 ac 06 00
	00		 mov	 eax, DWORD PTR [ecx+1708]
  00006	c3		 ret	 0
?GetConnectedMoveMode@ioApplication@@QAE?AW4ConnectedMoveMode@1@XZ ENDP ; ioApplication::GetConnectedMoveMode
_TEXT	ENDS
PUBLIC	?SetStepByConnectTry@ioApplication@@QAEX_N@Z	; ioApplication::SetStepByConnectTry
; Function compile flags: /Ogsp
;	COMDAT ?SetStepByConnectTry@ioApplication@@QAEX_N@Z
_TEXT	SEGMENT
_bStepByConnectTry$ = 8					; size = 1
?SetStepByConnectTry@ioApplication@@QAEX_N@Z PROC	; ioApplication::SetStepByConnectTry, COMDAT
; _this$ = ecx

; 1229 : 	inline void SetStepByConnectTry( bool bStepByConnectTry ){ m_bStepByConnectTry = bStepByConnectTry ; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bStepByConnectTry$[ebp]
  00006	88 81 b8 06 00
	00		 mov	 BYTE PTR [ecx+1720], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetStepByConnectTry@ioApplication@@QAEX_N@Z ENDP	; ioApplication::SetStepByConnectTry
_TEXT	ENDS
PUBLIC	?GetPrivateID@ioMyInfo@@QBEABVioHashString@@XZ	; ioMyInfo::GetPrivateID
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetPrivateID@ioMyInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetPrivateID@ioMyInfo@@QBEABVioHashString@@XZ PROC	; ioMyInfo::GetPrivateID, COMDAT
; _this$ = ecx

; 516  : 	const ioHashString& GetPrivateID() const { return m_user_data.m_private_id; }  

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetPrivateID@ioMyInfo@@QBEABVioHashString@@XZ ENDP	; ioMyInfo::GetPrivateID
_TEXT	ENDS
PUBLIC	?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ	; ioMyInfo::GetPublicID
; Function compile flags: /Ogsp
;	COMDAT ?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ PROC	; ioMyInfo::GetPublicID, COMDAT
; _this$ = ecx

; 517  : 	const ioHashString& GetPublicID() const { return m_user_data.m_public_id; }    

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ ENDP	; ioMyInfo::GetPublicID
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside
$LN2@Inside:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T511074 = -12						; size = 12
$T511078 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate@2
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T511078[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T511078[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T511074[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T511074[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T511074[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?SetSetting@CLogin@@IAEXHH@Z			; CLogin::SetSetting
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
;	COMDAT ?SetSetting@CLogin@@IAEXHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
_iData$ = 12						; size = 4
?SetSetting@CLogin@@IAEXHH@Z PROC			; CLogin::SetSetting, COMDAT
; _this$ = ecx

; 445  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 446  : 	bool bData = ( (iData == 1) ? true : false );

  00003	8b 55 0c	 mov	 edx, DWORD PTR _iData$[ebp]

; 447  : 
; 448  : 	switch(iType)

  00006	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00009	83 fa 01	 cmp	 edx, 1
  0000c	0f 94 c1	 sete	 cl
  0000f	83 e8 04	 sub	 eax, 4
  00012	74 3a		 je	 SHORT $LN7@SetSetting
  00014	48		 dec	 eax
  00015	48		 dec	 eax
  00016	74 2e		 je	 SHORT $LN5@SetSetting
  00018	48		 dec	 eax
  00019	74 23		 je	 SHORT $LN4@SetSetting
  0001b	48		 dec	 eax
  0001c	74 18		 je	 SHORT $LN3@SetSetting
  0001e	83 e8 04	 sub	 eax, 4
  00021	74 0b		 je	 SHORT $LN2@SetSetting
  00023	48		 dec	 eax
  00024	75 2e		 jne	 SHORT $LN8@SetSetting

; 468  : 	case OT_GAME_MODE_MAP:
; 469  : 		Setting::SetModeMap( iData );

  00026	89 15 78 00 00
	00		 mov	 DWORD PTR ?m_Option@Setting@@1USettingOption@@A+120, edx

; 470  : 		break;

  0002c	eb 26		 jmp	 SHORT $LN8@SetSetting
$LN2@SetSetting:

; 465  : 	case OT_GAME_MODE_SUB:
; 466  : 		Setting::SetModeSub( iData );

  0002e	89 15 74 00 00
	00		 mov	 DWORD PTR ?m_Option@Setting@@1USettingOption@@A+116, edx

; 467  : 		break;

  00034	eb 1e		 jmp	 SHORT $LN8@SetSetting
$LN3@SetSetting:

; 462  : 	case OT_DEBUG_MEMORY_USAGE:
; 463  : 		Setting::SetShowMemoryUsage( bData );

  00036	88 0d 71 00 00
	00		 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+113, cl

; 464  : 		break;

  0003c	eb 16		 jmp	 SHORT $LN8@SetSetting
$LN4@SetSetting:

; 459  : 	case OT_DEBUG_SHOW_EXTRA_INFO:
; 460  : 		Setting::SetShowExtraInfo( bData );

  0003e	88 0d 70 00 00
	00		 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+112, cl

; 461  : 		break;

  00044	eb 0e		 jmp	 SHORT $LN8@SetSetting
$LN5@SetSetting:

; 452  : 		break;
; 453  : 	case OT_FULLSCREEN:
; 454  : //		Setting::SetFullScreen( bData );
; 455  : 		break;
; 456  : 	case OT_DEBUG_SHOW_BOUND_BOX:
; 457  : 		Setting::SetShowBoundBox( bData );

  00046	88 0d 6e 00 00
	00		 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+110, cl

; 458  : 		break;

  0004c	eb 06		 jmp	 SHORT $LN8@SetSetting
$LN7@SetSetting:

; 449  : 	{
; 450  : 	case OT_GAME_MODE:
; 451  : 		Setting::SetReservedMode( iData );

  0004e	89 15 00 00 00
	00		 mov	 DWORD PTR ?m_iReservedMode@Setting@@1HA, edx ; Setting::m_iReservedMode
$LN8@SetSetting:

; 471  : 	}
; 472  : }

  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?SetSetting@CLogin@@IAEXHH@Z ENDP			; CLogin::SetSetting
_TEXT	ENDS
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_0BO@PLCPCKEA@CLogin?3?3OnDisconnectAlreadyID?$AA@ ; `string'
PUBLIC	?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z ; CLogin::OnDisconnectAlreadyID
EXTRN	?g_bHappenError@@3_NA:BYTE			; g_bHappenError
EXTRN	?Initialize@Setting@@SAXABVioHashString@@@Z:PROC ; Setting::Initialize
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__imp_?SafeSprintf@@YAXPADHPBDZZ:PROC
EXTRN	?g_szErrorLog@@3PADA:BYTE			; g_szErrorLog
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	?g_iErrorNumber@@3HA:DWORD			; g_iErrorNumber
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PLCPCKEA@CLogin?3?3OnDisconnectAlreadyID?$AA@
CONST	SEGMENT
??_C@_0BO@PLCPCKEA@CLogin?3?3OnDisconnectAlreadyID?$AA@ DB 'CLogin::OnDis'
	DB	'connectAlreadyID', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z$0
__ehfuncinfo$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
$T511113 = -32						; size = 16
_iResult$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rkPacket$ = 8						; size = 4
?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z PROC ; CLogin::OnDisconnectAlreadyID, COMDAT
; _this$ = ecx

; 659  : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 660  : 	int iResult = 0;
; 661  : 	rkPacket >> iResult;

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00011	83 65 f0 00	 and	 DWORD PTR _iResult$[ebp], 0
  00015	8d 45 f0	 lea	 eax, DWORD PTR _iResult$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 662  : 	
; 663  : 	if( iResult == DISCONNECT_ALREADY_ID_OK )

  0001e	83 7d f0 01	 cmp	 DWORD PTR _iResult$[ebp], 1
  00022	75 06		 jne	 SHORT $LN3@OnDisconne

; 664  : 	{
; 665  : 		g_iErrorNumber = 307;
; 666  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(1) );

  00024	6a 00		 push	 0
  00026	6a 01		 push	 1
  00028	eb 0a		 jmp	 SHORT $LN8@OnDisconne
$LN3@OnDisconne:

; 667  : 	}
; 668  : 	else if( iResult == DISCONNECT_ALREADY_ID_EXCEPT )

  0002a	83 7d f0 02	 cmp	 DWORD PTR _iResult$[ebp], 2
  0002e	75 3a		 jne	 SHORT $LN1@OnDisconne

; 669  : 	{
; 670  : 		g_iErrorNumber = 307;
; 671  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(2) );

  00030	6a 00		 push	 0
  00032	6a 02		 push	 2
$LN8@OnDisconne:
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PLCPCKEA@CLogin?3?3OnDisconnectAlreadyID?$AA@
  0003e	c7 05 00 00 00
	00 33 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 307 ; g_iErrorNumber, 00000133H
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0004e	8b c8		 mov	 ecx, eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00056	50		 push	 eax
  00057	68 00 08 00 00	 push	 2048			; 00000800H
  0005c	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@OnDisconne:

; 672  : 	}
; 673  : 	
; 674  : 	SendMsgToAutoUpgrade(WM_MY_MSG_C_SUCCESS); // 자동업그레이드 에러창 없이

  0006a	68 30 05 00 00	 push	 1328			; 00000530H
  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 675  : 	m_eLoginState = LS_RECEIVE_MSG_ERROR;
; 676  : 	Setting::Initialize("error");

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  0007b	8d 4d e0	 lea	 ecx, DWORD PTR $T511113[ebp]
  0007e	c7 86 08 02 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+520], 4
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0008e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00092	8d 45 e0	 lea	 eax, DWORD PTR $T511113[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?Initialize@Setting@@SAXABVioHashString@@@Z ; Setting::Initialize
  0009b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	59		 pop	 ecx
  000a0	8d 4d e0	 lea	 ecx, DWORD PTR $T511113[ebp]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 677  : 	g_bHappenError = true;

  000a9	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bHappenError@@3_NA, 1 ; g_bHappenError

; 678  : }

  000b0	e8 00 00 00 00	 call	 __EH_epilog3
  000b5	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T511113[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnDisconnectAlreadyID@CLogin@@QAEXAAVSP2Packet@@@Z ENDP ; CLogin::OnDisconnectAlreadyID
PUBLIC	??_C@_0BF@FELLLALG@CLogin?3?3OnUDPConnect?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z	; CLogin::OnUDPConnect
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?MouseBusy@TCPNetwork@@YAX_N@Z:PROC		; TCPNetwork::MouseBusy
EXTRN	?SetModeType@ioApplication@@QAEXHHHW4PlazaType@@@Z:PROC ; ioApplication::SetModeType
EXTRN	?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z:PROC ; TCPNetwork::SendToServer
EXTRN	??6SP2Packet@@QAEAAV0@_N@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?SetNextStage@ioApplication@@QAEXW4GameStage@ioGameStage@@PBD@Z:PROC ; ioApplication::SetNextStage
EXTRN	?SetMyRoomType@ioMyRoomMode@@SAXW4MyRoomType@@@Z:PROC ; ioMyRoomMode::SetMyRoomType
EXTRN	?IsTutorialUser@ioMyInfo@@QAE_NXZ:PROC		; ioMyInfo::IsTutorialUser
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BF@FELLLALG@CLogin?3?3OnUDPConnect?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
CONST	SEGMENT
??_C@_0BF@FELLLALG@CLogin?3?3OnUDPConnect?$AA@ DB 'CLogin::OnUDPConnect', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z$1
__ehfuncinfo$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_kPacket$509110 = -65600				; size = 32792
_kPacket$509112 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rkPacket$ = 8						; size = 4
?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z PROC		; CLogin::OnUDPConnect, COMDAT
; _this$ = ecx

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 34 00 01 00	 mov	 eax, 65588		; 00010034H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 733  : 	if(m_eLoginState == LS_RECEIVE_MSG_NORMAL )

  00032	6a 05		 push	 5
  00034	8b d9		 mov	 ebx, ecx
  00036	5f		 pop	 edi
  00037	39 bb 08 02 00
	00		 cmp	 DWORD PTR [ebx+520], edi
  0003d	0f 84 6d 01 00
	00		 je	 $LN8@OnUDPConne

; 734  : 		return;
; 735  : 
; 736  : 	m_eLoginState = LS_RECEIVE_MSG_NORMAL;
; 737  : 	SendMsgToAutoUpgrade( WM_MY_MSG_C_SUCCESS );

  00043	68 30 05 00 00	 push	 1328			; 00000530H
  00048	89 bb 08 02 00
	00		 mov	 DWORD PTR [ebx+520], edi
  0004e	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 738  : 
; 739  : 	if( g_MyInfo.IsTutorialUser() == false )

  00053	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?IsTutorialUser@ioMyInfo@@QAE_NXZ ; ioMyInfo::IsTutorialUser
  0005f	84 c0		 test	 al, al
  00061	0f 85 3f 01 00
	00		 jne	 $LN4@OnUDPConne

; 740  : 	{
; 741  : 		switch( g_App.GetConnectedMoveMode() )

  00067	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  0006c	8b 80 ac 06 00
	00		 mov	 eax, DWORD PTR [eax+1708]
  00072	33 f6		 xor	 esi, esi
  00074	2b c6		 sub	 eax, esi
  00076	0f 84 aa 00 00
	00		 je	 $LN2@OnUDPConne
  0007c	48		 dec	 eax
  0007d	74 27		 je	 SHORT $LN1@OnUDPConne
  0007f	48		 dec	 eax
  00080	0f 85 20 01 00
	00		 jne	 $LN4@OnUDPConne

; 742  : 		{
; 743  : 		case ioApplication::CMM_LOBBY:
; 744  : 			{
; 745  : 				ioMyRoomMode::SetMyRoomType( MRT_LOBBY );

  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 ?SetMyRoomType@ioMyRoomMode@@SAXW4MyRoomType@@@Z ; ioMyRoomMode::SetMyRoomType

; 746  : 				g_App.SetNextStage( ioGameStage::GS_LOBBY, __FUNCTION__ );

  0008c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET ??_C@_0BF@FELLLALG@CLogin?3?3OnUDPConnect?$AA@
  00093	6a 02		 push	 2
  00095	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  0009a	8b c8		 mov	 ecx, eax
  0009c	e8 00 00 00 00	 call	 ?SetNextStage@ioApplication@@QAEXW4GameStage@ioGameStage@@PBD@Z ; ioApplication::SetNextStage

; 747  : 			}
; 748  : 			break;

  000a1	e9 00 01 00 00	 jmp	 $LN4@OnUDPConne
$LN1@OnUDPConne:

; 761  : 			break;
; 762  : 		case ioApplication::CMM_HEADQUARTER:
; 763  : 			{
; 764  : 				SP2Packet kPacket( CTPK_JOIN_HEADQUARTERS );

  000a6	68 20 01 00 00	 push	 288			; 00000120H
  000ab	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509112[ebp]
  000b1	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  000b6	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 765  : 				kPacket << g_MyInfo.GetPublicID() << -1 << false;

  000bd	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000c2	56		 push	 esi
  000c3	6a ff		 push	 -1
  000c5	83 c0 1c	 add	 eax, 28			; 0000001cH
  000c8	50		 push	 eax
  000c9	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509112[ebp]
  000cf	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<
  000d4	8b c8		 mov	 ecx, eax
  000d6	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<
  000db	8b c8		 mov	 ecx, eax
  000dd	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 766  : 				TCPNetwork::SendToServer( kPacket );

  000e2	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$509112[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 767  : 
; 768  : 				ioMyRoomMode::SetMyRoomType( MRT_FIND_MODE );

  000ee	57		 push	 edi
  000ef	e8 00 00 00 00	 call	 ?SetMyRoomType@ioMyRoomMode@@SAXW4MyRoomType@@@Z ; ioMyRoomMode::SetMyRoomType
  000f4	59		 pop	 ecx
  000f5	59		 pop	 ecx

; 769  : 				g_App.SetNextStage( ioGameStage::GS_FIND_MODE, __FUNCTION__ );

  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FELLLALG@CLogin?3?3OnUDPConnect?$AA@
  000fb	6a 03		 push	 3
  000fd	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00102	8b c8		 mov	 ecx, eax
  00104	e8 00 00 00 00	 call	 ?SetNextStage@ioApplication@@QAEXW4GameStage@ioGameStage@@PBD@Z ; ioApplication::SetNextStage

; 770  : 				g_App.SetModeType( 0, 0, 0, PT_NONE );

  00109	56		 push	 esi
  0010a	56		 push	 esi
  0010b	56		 push	 esi
  0010c	56		 push	 esi
  0010d	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00112	8b c8		 mov	 ecx, eax
  00114	e8 00 00 00 00	 call	 ?SetModeType@ioApplication@@QAEXHHHW4PlazaType@@@Z ; ioApplication::SetModeType

; 771  : 				g_App.SetStepByConnectTry( true );

  00119	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton

; 772  : 			}

  0011e	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509112[ebp]

; 773  : 			break;

  00124	eb 70		 jmp	 SHORT $LN21@OnUDPConne
$LN2@OnUDPConne:

; 749  : 		case ioApplication::CMM_PLAZA:
; 750  : 			{
; 751  : 				ioMyRoomMode::SetMyRoomType( MRT_FIND_MODE );

  00126	57		 push	 edi
  00127	e8 00 00 00 00	 call	 ?SetMyRoomType@ioMyRoomMode@@SAXW4MyRoomType@@@Z ; ioMyRoomMode::SetMyRoomType

; 752  : 				g_App.SetNextStage( ioGameStage::GS_FIND_MODE, __FUNCTION__ );

  0012c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET ??_C@_0BF@FELLLALG@CLogin?3?3OnUDPConnect?$AA@
  00133	6a 03		 push	 3
  00135	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  0013a	8b c8		 mov	 ecx, eax
  0013c	e8 00 00 00 00	 call	 ?SetNextStage@ioApplication@@QAEXW4GameStage@ioGameStage@@PBD@Z ; ioApplication::SetNextStage

; 753  : 				g_App.SetModeType( 0, 0, 0, PT_NONE );

  00141	56		 push	 esi
  00142	56		 push	 esi
  00143	56		 push	 esi
  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  0014a	8b c8		 mov	 ecx, eax
  0014c	e8 00 00 00 00	 call	 ?SetModeType@ioApplication@@QAEXHHHW4PlazaType@@@Z ; ioApplication::SetModeType

; 754  : 
; 755  : 				SP2Packet kPacket( CTPK_SEARCH_PLAZA_ROOM );

  00151	6a 75		 push	 117			; 00000075H
  00153	8d 8d c0 ff fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509110[ebp]
  00159	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 756  : 				kPacket << -2 << false;

  0015e	56		 push	 esi
  0015f	6a fe		 push	 -2			; fffffffeH
  00161	8d 8d c0 ff fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509110[ebp]
  00167	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0016a	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<
  0016f	8b c8		 mov	 ecx, eax
  00171	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 757  : 				TCPNetwork::SendToServer( kPacket );

  00176	8d 85 c0 ff fe
	ff		 lea	 eax, DWORD PTR _kPacket$509110[ebp]
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 758  : 				TCPNetwork::MouseBusy( true );

  00182	6a 01		 push	 1
  00184	e8 00 00 00 00	 call	 ?MouseBusy@TCPNetwork@@YAX_N@Z ; TCPNetwork::MouseBusy
  00189	59		 pop	 ecx
  0018a	59		 pop	 ecx

; 759  : 				g_App.SetStepByConnectTry( true );

  0018b	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton

; 760  : 			}

  00190	8d 8d c0 ff fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509110[ebp]
$LN21@OnUDPConne:
  00196	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0019a	c6 80 b8 06 00
	00 01		 mov	 BYTE PTR [eax+1720], 1
  001a1	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN4@OnUDPConne:

; 774  : 		}
; 775  : 	}
; 776  : 	m_iCheckCnt += 10000; 

  001a6	81 83 34 02 00
	00 10 27 00 00	 add	 DWORD PTR [ebx+564], 10000 ; 00002710H
$LN8@OnUDPConne:

; 777  : }

  001b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ba	59		 pop	 ecx
  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	5b		 pop	 ebx
  001be	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c1	33 cd		 xor	 ecx, ebp
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	c9		 leave
  001c9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z$1:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509112[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z$0:
  0000b	8d 8d c0 ff fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509110[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a bc ff fe
	ff		 mov	 ecx, DWORD PTR [edx-65604]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnUDPConnect@CLogin@@QAEXAAVSP2Packet@@@Z ENDP		; CLogin::OnUDPConnect
PUBLIC	__$ArrayPad$
PUBLIC	?SendUDPMsg@CLogin@@IAEXXZ			; CLogin::SendUDPMsg
EXTRN	?SendToServer@P2PNetwork@@YAXAAVSP2Packet@@@Z:PROC ; P2PNetwork::SendToServer
EXTRN	__imp__timeGetTime@0:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
xdata$x	SEGMENT
__unwindtable$?SendUDPMsg@CLogin@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendUDPMsg@CLogin@@IAEXXZ$0
__ehfuncinfo$?SendUDPMsg@CLogin@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendUDPMsg@CLogin@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?SendUDPMsg@CLogin@@IAEXXZ
_TEXT	SEGMENT
_kSendPacket$ = -32808					; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendUDPMsg@CLogin@@IAEXXZ PROC				; CLogin::SendUDPMsg, COMDAT
; _this$ = ecx

; 886  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SendUDPMsg@CLogin@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 1c 80 00 00	 mov	 eax, 32796		; 0000801cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b f1		 mov	 esi, ecx

; 887  : 	// udp 메세지는 실패할 수 있으므로 1초마다 보낸다.
; 888  : 	if(m_eLoginState != LS_SENT_UDP_MSG) return;

  00033	83 be 08 02 00
	00 02		 cmp	 DWORD PTR [esi+520], 2
  0003a	75 67		 jne	 SHORT $LN3@SendUDPMsg

; 889  : 	if(timeGetTime() - m_dwSentUDPMsgTime < 1000) return;

  0003c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__timeGetTime@0
  00042	ff d7		 call	 edi
  00044	2b 86 10 02 00
	00		 sub	 eax, DWORD PTR [esi+528]
  0004a	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0004f	72 52		 jb	 SHORT $LN3@SendUDPMsg

; 890  : 
; 891  : 	//UDP HOLE PUNCHING.
; 892  : 	SP2Packet kSendPacket( CUPK_CONNECT );

  00051	68 01 40 00 00	 push	 16385			; 00004001H
  00056	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  0005c	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00061	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 893  : 	kSendPacket << g_MyInfo.GetPublicID();

  00065	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0006a	83 c0 1c	 add	 eax, 28			; 0000001cH
  0006d	50		 push	 eax
  0006e	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  00074	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 894  : 	P2PNetwork::SendToServer( kSendPacket );

  00079	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kSendPacket$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?SendToServer@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendToServer
  00085	59		 pop	 ecx

; 895  : 
; 896  : 	m_dwSentUDPMsgTime = timeGetTime();

  00086	ff d7		 call	 edi

; 897  : 	m_iCheckCnt++;

  00088	ff 86 34 02 00
	00		 inc	 DWORD PTR [esi+564]

; 898  : }

  0008e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  00098	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  0009e	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN3@SendUDPMsg:
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	33 cd		 xor	 ecx, ebp
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	c9		 leave
  000bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendUDPMsg@CLogin@@IAEXXZ$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SendUDPMsg@CLogin@@IAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32808]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SendUDPMsg@CLogin@@IAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SendUDPMsg@CLogin@@IAEXXZ ENDP				; CLogin::SendUDPMsg
PUBLIC	??_C@_0BC@IJLMCPGL@CLogin?3?3LoginProc?$AA@	; `string'
PUBLIC	_hWnd$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z		; CLogin::LoginProc
EXTRN	__imp__SetForegroundWindow@4:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__SystemParametersInfoA@16:PROC
EXTRN	??6SP2Packet@@QAEAAV0@PAD@Z:PROC		; SP2Packet::operator<<
EXTRN	__imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ:PROC
EXTRN	?GetMyLocalIP@ioApplication@@QAEXPAD@Z:PROC	; ioApplication::GetMyLocalIP
EXTRN	__imp__DestroyWindow@4:PROC
;	COMDAT ??_C@_0BC@IJLMCPGL@CLogin?3?3LoginProc?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
CONST	SEGMENT
??_C@_0BC@IJLMCPGL@CLogin?3?3LoginProc?$AA@ DB 'CLogin::LoginProc', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z$0
__ehfuncinfo$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_winwidth$509342 = -32848				; size = 4
_hWnd$GSCopy$ = -32844					; size = 4
_kPacket$509355 = -32840				; size = 32792
_workrect$509339 = -48					; size = 16
_szLocalIP$509354 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z PROC		; CLogin::LoginProc, COMDAT
; _this$ = ecx

; 956  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 44 80 00 00	 mov	 eax, 32836		; 00008044H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 957  : 	switch(uMsg)

  00032	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00035	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  0003a	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]
  0003d	8b f1		 mov	 esi, ecx

; 974  : 
; 975  : 			// Now center it
; 976  : 			SetWindowPos( hWnd,
; 977  : 						  HWND_TOP,
; 978  : 						  workrect.left + (workwidth-winwidth) / 2,
; 979  : 						  workrect.top + (workheight-winheight) / 2,
; 980  : 						  winwidth, winheight, 
; 981  : 						  SWP_SHOWWINDOW);

  0003f	89 bd b4 7f ff
	ff		 mov	 DWORD PTR _hWnd$GSCopy$[ebp], edi
  00045	0f 84 0b 01 00
	00		 je	 $LN9@LoginProc

; 957  : 	switch(uMsg)

  0004b	48		 dec	 eax
  0004c	74 07		 je	 SHORT $LN8@LoginProc

; 1027 : 	}
; 1028 : 
; 1029 : 	return FALSE;

  0004e	33 c0		 xor	 eax, eax
  00050	e9 99 01 00 00	 jmp	 $LN12@LoginProc
$LN8@LoginProc:

; 992  : 	case WM_COMMAND:
; 993  : 		switch( LOWORD(wParam) )

  00055	0f b7 45 10	 movzx	 eax, WORD PTR _wParam$[ebp]
  00059	3d be 00 00 00	 cmp	 eax, 190		; 000000beH
  0005e	74 3b		 je	 SHORT $LN5@LoginProc
  00060	3d 05 04 00 00	 cmp	 eax, 1029		; 00000405H
  00065	0f 85 80 01 00
	00		 jne	 $LN6@LoginProc

; 1015 : 			break;
; 1016 : 		case ID_NO_DISCONNECT:
; 1017 : 			{
; 1018 : 				SendMsgToAutoUpgrade(WM_MY_MSG_C_SUCCESS); // 자동업그레이드 에러창 없이

  0006b	68 30 05 00 00	 push	 1328			; 00000530H
  00070	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 1019 : 				m_eLoginState = LS_RECEIVE_MSG_ERROR;
; 1020 : 
; 1021 : 				ZeroMemory( m_szLoginKey, sizeof( m_szLoginKey ) );

  00075	68 08 02 00 00	 push	 520			; 00000208H
  0007a	6a 00		 push	 0
  0007c	56		 push	 esi
  0007d	c7 86 08 02 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+520], 4
  00087	e8 00 00 00 00	 call	 _memset
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1022 : 				DestroyWindow( hWnd );

  0008f	57		 push	 edi
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 1023 : 			}
; 1024 : 			break;

  00096	e9 50 01 00 00	 jmp	 $LN6@LoginProc
$LN5@LoginProc:

; 994  : 		{
; 995  : 		case ID_DISCONNECT:
; 996  : 			{
; 997  : 				char szLocalIP[LENGTH_IP]="";

  0009b	33 c0		 xor	 eax, eax
  0009d	33 db		 xor	 ebx, ebx
  0009f	88 5d e0	 mov	 BYTE PTR _szLocalIP$509354[ebp], bl
  000a2	8d 7d e1	 lea	 edi, DWORD PTR _szLocalIP$509354[ebp+1]
  000a5	ab		 stosd
  000a6	ab		 stosd
  000a7	ab		 stosd
  000a8	66 ab		 stosw
  000aa	aa		 stosb

; 998  : 				g_App.GetMyLocalIP( szLocalIP );

  000ab	8d 45 e0	 lea	 eax, DWORD PTR _szLocalIP$509354[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  000b4	8b c8		 mov	 ecx, eax
  000b6	e8 00 00 00 00	 call	 ?GetMyLocalIP@ioApplication@@QAEXPAD@Z ; ioApplication::GetMyLocalIP

; 999  : 				SP2Packet kPacket( CTPK_DISCONNECT_ALREADY_ID );

  000bb	68 55 02 00 00	 push	 597			; 00000255H
  000c0	8d 8d b8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509355[ebp]
  000c6	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  000cb	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 1000 : 				if(ioLocalManager::GetLocalType() == ioLocalManager::LCT_TAIWAN ||
; 1001 : 					ioLocalManager::GetLocalType() == ioLocalManager::LCT_THAILAND )

  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  000d4	3d 10 9c 1a 1f	 cmp	 eax, 521837584		; 1f1a9c10H
  000d9	74 1f		 je	 SHORT $LN3@LoginProc
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  000e1	3d e3 f1 b0 2f	 cmp	 eax, 800125411		; 2fb0f1e3H
  000e6	74 12		 je	 SHORT $LN3@LoginProc

; 1004 : 				}
; 1005 : 				else
; 1006 : 				{
; 1007 : 					kPacket << m_szLoginKey << szLocalIP;

  000e8	8d 45 e0	 lea	 eax, DWORD PTR _szLocalIP$509354[ebp]
  000eb	50		 push	 eax
  000ec	56		 push	 esi
  000ed	8d 8d b8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509355[ebp]
  000f3	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  000f8	eb 18		 jmp	 SHORT $LN23@LoginProc
$LN3@LoginProc:

; 1002 : 				{
; 1003 : 					kPacket << g_MyInfo.GetPrivateID() << szLocalIP;

  000fa	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000ff	8d 4d e0	 lea	 ecx, DWORD PTR _szLocalIP$509354[ebp]
  00102	51		 push	 ecx
  00103	83 c0 0c	 add	 eax, 12			; 0000000cH
  00106	50		 push	 eax
  00107	8d 8d b8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509355[ebp]
  0010d	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<
$LN23@LoginProc:
  00112	8b c8		 mov	 ecx, eax
  00114	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<

; 1008 : 				}
; 1009 : 
; 1010 : 				TCPNetwork::SendToServer( kPacket );

  00119	8d 85 b8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$509355[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 1011 : 
; 1012 : 				ZeroMemory( m_szLoginKey, sizeof( m_szLoginKey ) );

  00125	c7 04 24 08 02
	00 00		 mov	 DWORD PTR [esp], 520	; 00000208H
  0012c	53		 push	 ebx
  0012d	56		 push	 esi
  0012e	e8 00 00 00 00	 call	 _memset
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1013 : 				DestroyWindow( hWnd );

  00136	ff b5 b4 7f ff
	ff		 push	 DWORD PTR _hWnd$GSCopy$[ebp]
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 1014 : 			}

  00142	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00146	8d 8d b8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509355[ebp]
  0014c	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet

; 1025 : 		}
; 1026 : 		return TRUE;

  00151	e9 95 00 00 00	 jmp	 $LN6@LoginProc
$LN9@LoginProc:

; 958  : 	{
; 959  : 	case WM_INITDIALOG:
; 960  : 		{
; 961  : 			//----------창 중간에 띄우기 ---------------------
; 962  : 			RECT workrect;
; 963  : 			// Find how large the desktop work area is
; 964  : 			SystemParametersInfo(SPI_GETWORKAREA, 0, &workrect, 0);

  00156	33 db		 xor	 ebx, ebx
  00158	53		 push	 ebx
  00159	8d 45 d0	 lea	 eax, DWORD PTR _workrect$509339[ebp]
  0015c	50		 push	 eax
  0015d	53		 push	 ebx
  0015e	6a 30		 push	 48			; 00000030H
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 965  : 			int workwidth  = workrect.right -  workrect.left;

  00166	8b 4d d8	 mov	 ecx, DWORD PTR _workrect$509339[ebp+8]
  00169	2b 4d d0	 sub	 ecx, DWORD PTR _workrect$509339[ebp]

; 966  : 			int workheight = workrect.bottom - workrect.top;

  0016c	8b 45 dc	 mov	 eax, DWORD PTR _workrect$509339[ebp+12]
  0016f	2b 45 d4	 sub	 eax, DWORD PTR _workrect$509339[ebp+4]

; 967  : 
; 968  : 			// And how big the window is
; 969  : 			int winwidth  = 245;

  00172	ba f5 00 00 00	 mov	 edx, 245		; 000000f5H
  00177	89 95 b0 7f ff
	ff		 mov	 DWORD PTR _winwidth$509342[ebp], edx

; 970  : 			int winheight = 155;

  0017d	8d 72 a6	 lea	 esi, DWORD PTR [edx-90]

; 971  : 			// Make sure it"s not bigger than the work area
; 972  : 			winwidth  = min(winwidth, workwidth);

  00180	3b ca		 cmp	 ecx, edx
  00182	7f 06		 jg	 SHORT $LN15@LoginProc
  00184	89 8d b0 7f ff
	ff		 mov	 DWORD PTR _winwidth$509342[ebp], ecx
$LN15@LoginProc:

; 973  : 			winheight = min(winheight, workheight);

  0018a	3b c6		 cmp	 eax, esi
  0018c	0f 4e f0	 cmovle	 esi, eax

; 974  : 
; 975  : 			// Now center it
; 976  : 			SetWindowPos( hWnd,
; 977  : 						  HWND_TOP,
; 978  : 						  workrect.left + (workwidth-winwidth) / 2,
; 979  : 						  workrect.top + (workheight-winheight) / 2,
; 980  : 						  winwidth, winheight, 
; 981  : 						  SWP_SHOWWINDOW);

  0018f	2b c6		 sub	 eax, esi
  00191	99		 cdq
  00192	2b c2		 sub	 eax, edx
  00194	6a 40		 push	 64			; 00000040H
  00196	d1 f8		 sar	 eax, 1
  00198	03 45 d4	 add	 eax, DWORD PTR _workrect$509339[ebp+4]
  0019b	56		 push	 esi
  0019c	ff b5 b0 7f ff
	ff		 push	 DWORD PTR _winwidth$509342[ebp]
  001a2	50		 push	 eax
  001a3	8b c1		 mov	 eax, ecx
  001a5	2b 85 b0 7f ff
	ff		 sub	 eax, DWORD PTR _winwidth$509342[ebp]
  001ab	99		 cdq
  001ac	2b c2		 sub	 eax, edx
  001ae	d1 f8		 sar	 eax, 1
  001b0	03 45 d0	 add	 eax, DWORD PTR _workrect$509339[ebp]
  001b3	50		 push	 eax
  001b4	53		 push	 ebx
  001b5	57		 push	 edi
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 982  : 			//----------------------------------------------------------
; 983  : #ifdef MESSAGEBOX_UNICODE
; 984  : 			std::wstring strText = CA2W(STR(1), COUNTRY_CODE_PAGE);
; 985  : 			SetDlgItemTextW(  hWnd, IDC_DISCONNECT , strText.c_str() );
; 986  : #else
; 987  : 			SetDlgItemText(  hWnd, IDC_DISCONNECT , STR(1) );

  001bc	53		 push	 ebx
  001bd	6a 01		 push	 1
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IJLMCPGL@CLogin?3?3LoginProc?$AA@
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  001cf	8b c8		 mov	 ecx, eax
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  001d7	50		 push	 eax
  001d8	68 06 04 00 00	 push	 1030			; 00000406H
  001dd	57		 push	 edi
  001de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 988  : #endif
; 989  : 			SetForegroundWindow( hWnd );

  001e4	57		 push	 edi
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4
$LN6@LoginProc:

; 990  : 		}
; 991  : 		return TRUE;

  001eb	33 c0		 xor	 eax, eax
  001ed	40		 inc	 eax
$LN12@LoginProc:

; 1030 : }

  001ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f8	59		 pop	 ecx
  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx
  001fc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ff	33 cd		 xor	 ecx, ebp
  00201	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00206	c9		 leave
  00207	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z$0:
  00000	8d 8d b8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509355[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a ac 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32852]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoginProc@CLogin@@QAEHPAUHWND__@@IIJ@Z ENDP		; CLogin::LoginProc
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$07@ioINILoader@@QAEXAAY07$$CBD@Z	; ioINILoader::SetTitle_e<8>
EXTRN	__imp_?SetTitle@ioINILoader@@QAEXPBD@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$SetTitle_e@$07@ioINILoader@@QAEXAAY07$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$07@ioINILoader@@QAEXAAY07$$CBD@Z PROC	; ioINILoader::SetTitle_e<8>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 d7 00 00
	00		 je	 $LN96@SetTitle_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 c0 00 00
	00		 je	 $LN95@SetTitle_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 a9 00 00
	00		 je	 $LN94@SetTitle_e
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 92 00 00
	00		 je	 $LN93@SetTitle_e
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	74 7f		 je	 SHORT $LN92@SetTitle_e
  00060	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00063	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00066	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00069	84 d2		 test	 dl, dl
  0006b	74 6c		 je	 SHORT $LN91@SetTitle_e
  0006d	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00070	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00073	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00076	84 d2		 test	 dl, dl
  00078	74 59		 je	 SHORT $LN90@SetTitle_e
  0007a	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007d	80 78 07 00	 cmp	 BYTE PTR [eax+7], 0
  00081	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	74 75		 je	 SHORT $LN1@SetTitle_e
  00086	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00089	84 d2		 test	 dl, dl
  0008b	74 40		 je	 SHORT $LN88@SetTitle_e
  0008d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00090	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00093	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00096	84 d2		 test	 dl, dl
  00098	74 2d		 je	 SHORT $LN87@SetTitle_e
  0009a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009d	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a3	84 d2		 test	 dl, dl
  000a5	74 1a		 je	 SHORT $LN86@SetTitle_e
  000a7	8a 40 0b	 mov	 al, BYTE PTR [eax+11]
  000aa	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ad	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b0	84 c0		 test	 al, al
  000b2	74 07		 je	 SHORT $LN85@SetTitle_e
  000b4	34 ea		 xor	 al, -22			; ffffffeaH
  000b6	88 45 fb	 mov	 BYTE PTR __t$[ebp+11], al
  000b9	eb 40		 jmp	 SHORT $LN1@SetTitle_e
$LN85@SetTitle_e:
  000bb	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000bf	eb 3a		 jmp	 SHORT $LN1@SetTitle_e
$LN86@SetTitle_e:
  000c1	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000c5	eb 34		 jmp	 SHORT $LN1@SetTitle_e
$LN87@SetTitle_e:
  000c7	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000cb	eb 2e		 jmp	 SHORT $LN1@SetTitle_e
$LN88@SetTitle_e:
  000cd	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000d1	eb 28		 jmp	 SHORT $LN1@SetTitle_e
$LN90@SetTitle_e:
  000d3	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000d7	eb 22		 jmp	 SHORT $LN1@SetTitle_e
$LN91@SetTitle_e:
  000d9	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000dd	eb 1c		 jmp	 SHORT $LN1@SetTitle_e
$LN92@SetTitle_e:
  000df	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000e3	eb 16		 jmp	 SHORT $LN1@SetTitle_e
$LN93@SetTitle_e:
  000e5	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000e9	eb 10		 jmp	 SHORT $LN1@SetTitle_e
$LN94@SetTitle_e:
  000eb	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000ef	eb 0a		 jmp	 SHORT $LN1@SetTitle_e
$LN95@SetTitle_e:
  000f1	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000f5	eb 04		 jmp	 SHORT $LN1@SetTitle_e
$LN96@SetTitle_e:
  000f7	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e:
  000fb	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  00102	6a 04		 push	 4
  00104	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+7], 0
  00108	58		 pop	 eax
$LL101@SetTitle_e:
  00109	8b c8		 mov	 ecx, eax
  0010b	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00111	79 05		 jns	 SHORT $LN111@SetTitle_e
  00113	49		 dec	 ecx
  00114	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00117	41		 inc	 ecx
$LN111@SetTitle_e:
  00118	b2 ed		 mov	 dl, -19			; ffffffedH
  0011a	2a d1		 sub	 dl, cl
  0011c	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00120	40		 inc	 eax
  00121	83 f8 07	 cmp	 eax, 7
  00124	7c e3		 jl	 SHORT $LL101@SetTitle_e

; 190  : 		SetTitle(_t);

  00126	8d 45 f0	 lea	 eax, DWORD PTR __t$[ebp]
  00129	50		 push	 eax
  0012a	8b ce		 mov	 ecx, esi
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  00132	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00135	33 cd		 xor	 ecx, ebp
  00137	5e		 pop	 esi
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	c9		 leave
  0013e	c2 04 00	 ret	 4
??$SetTitle_e@$07@ioINILoader@@QAEXAAY07$$CBD@Z ENDP	; ioINILoader::SetTitle_e<8>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$06@ioINILoader@@QAEHAAY06$$CBDH@Z	; ioINILoader::LoadInt_e<7>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$06@ioINILoader@@QAEHAAY06$$CBDH@Z
_TEXT	SEGMENT
__k$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$06@ioINILoader@@QAEHAAY06$$CBDH@Z PROC	; ioINILoader::LoadInt_e<7>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 c0 00 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 f0	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a9 00 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 f1	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 92 00 00
	00		 je	 $LN94@LoadInt_e
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 f2	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	74 7f		 je	 SHORT $LN93@LoadInt_e
  0004f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00052	88 55 f3	 mov	 BYTE PTR __k$[ebp+3], dl
  00055	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00058	84 d2		 test	 dl, dl
  0005a	74 6c		 je	 SHORT $LN92@LoadInt_e
  0005c	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005f	88 55 f4	 mov	 BYTE PTR __k$[ebp+4], dl
  00062	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00065	84 d2		 test	 dl, dl
  00067	74 59		 je	 SHORT $LN91@LoadInt_e
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00070	88 55 f5	 mov	 BYTE PTR __k$[ebp+5], dl
  00073	74 6f		 je	 SHORT $LN1@LoadInt_e
  00075	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00078	84 d2		 test	 dl, dl
  0007a	74 40		 je	 SHORT $LN89@LoadInt_e
  0007c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0007f	88 55 f7	 mov	 BYTE PTR __k$[ebp+7], dl
  00082	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00085	84 d2		 test	 dl, dl
  00087	74 2d		 je	 SHORT $LN88@LoadInt_e
  00089	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008c	88 55 f8	 mov	 BYTE PTR __k$[ebp+8], dl
  0008f	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00092	84 d2		 test	 dl, dl
  00094	74 1a		 je	 SHORT $LN87@LoadInt_e
  00096	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  00099	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009c	88 55 f9	 mov	 BYTE PTR __k$[ebp+9], dl
  0009f	84 c0		 test	 al, al
  000a1	74 07		 je	 SHORT $LN86@LoadInt_e
  000a3	34 eb		 xor	 al, -21			; ffffffebH
  000a5	88 45 fa	 mov	 BYTE PTR __k$[ebp+10], al
  000a8	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000aa	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000ae	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  000b0	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000b4	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  000b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000ba	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  000bc	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000c0	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  000c2	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000c6	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  000c8	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000cc	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  000ce	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000d2	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  000d4	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  000d8	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  000da	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  000de	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  000e0	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  000e4	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __k$[ebp], -353637139 ; eaebecedH
  000eb	6a 04		 push	 4
  000ed	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+6], 0
  000f1	58		 pop	 eax
$LL101@LoadInt_e:
  000f2	8b c8		 mov	 ecx, eax
  000f4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fa	79 05		 jns	 SHORT $LN111@LoadInt_e
  000fc	49		 dec	 ecx
  000fd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00100	41		 inc	 ecx
$LN111@LoadInt_e:
  00101	b2 ed		 mov	 dl, -19			; ffffffedH
  00103	2a d1		 sub	 dl, cl
  00105	30 54 05 f0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00109	40		 inc	 eax
  0010a	83 f8 06	 cmp	 eax, 6
  0010d	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  0010f	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00112	8d 45 f0	 lea	 eax, DWORD PTR __k$[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0011e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	33 cd		 xor	 ecx, ebp
  00123	5e		 pop	 esi
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	c9		 leave
  0012a	c2 08 00	 ret	 8
??$LoadInt_e@$06@ioINILoader@@QAEHAAY06$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<7>
_TEXT	ENDS
PUBLIC	??$encodeString@$0BJ@@ioINILoader_e@@AAEPADAAY0BJ@$$CBDPAD@Z ; ioINILoader_e::encodeString<25>
; Function compile flags: /Ogsp
;	COMDAT ??$encodeString@$0BJ@@ioINILoader_e@@AAEPADAAY0BJ@$$CBDPAD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_e$ = 12						; size = 4
??$encodeString@$0BJ@@ioINILoader_e@@AAEPADAAY0BJ@$$CBDPAD@Z PROC ; ioINILoader_e::encodeString<25>, COMDAT
; _this$ = ecx

; 215  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  : 		__ENCSTR(s, e);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00006	8a 11		 mov	 dl, BYTE PTR [ecx]
  00008	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  0000b	53		 push	 ebx
  0000c	84 d2		 test	 dl, dl
  0000e	0f 84 6a 04 00
	00		 je	 $LN96@encodeStri
  00014	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00017	88 10		 mov	 BYTE PTR [eax], dl
  00019	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0001c	84 d2		 test	 dl, dl
  0001e	0f 84 54 04 00
	00		 je	 $LN95@encodeStri
  00024	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00027	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0002a	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0002d	84 d2		 test	 dl, dl
  0002f	0f 84 3d 04 00
	00		 je	 $LN94@encodeStri
  00035	b3 eb		 mov	 bl, -21			; ffffffebH
  00037	32 d3		 xor	 dl, bl
  00039	88 50 02	 mov	 BYTE PTR [eax+2], dl
  0003c	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 25 04 00
	00		 je	 $LN93@encodeStri
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	88 50 03	 mov	 BYTE PTR [eax+3], dl
  0004d	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 0e 04 00
	00		 je	 $LN92@encodeStri
  00058	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005b	88 50 04	 mov	 BYTE PTR [eax+4], dl
  0005e	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 f7 03 00
	00		 je	 $LN91@encodeStri
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	88 50 05	 mov	 BYTE PTR [eax+5], dl
  0006f	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 e1 03 00
	00		 je	 $LN90@encodeStri
  0007a	32 d3		 xor	 dl, bl
  0007c	88 50 06	 mov	 BYTE PTR [eax+6], dl
  0007f	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00082	84 d2		 test	 dl, dl
  00084	0f 84 cb 03 00
	00		 je	 $LN89@encodeStri
  0008a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008d	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00090	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  00093	84 d2		 test	 dl, dl
  00095	0f 84 b4 03 00
	00		 je	 $LN88@encodeStri
  0009b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0009e	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a1	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000a4	84 d2		 test	 dl, dl
  000a6	0f 84 9d 03 00
	00		 je	 $LN87@encodeStri
  000ac	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000af	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b2	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000b5	84 d2		 test	 dl, dl
  000b7	0f 84 87 03 00
	00		 je	 $LN86@encodeStri
  000bd	32 d3		 xor	 dl, bl
  000bf	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c2	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000c5	84 d2		 test	 dl, dl
  000c7	0f 84 71 03 00
	00		 je	 $LN85@encodeStri
  000cd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d0	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000d3	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000d6	84 d2		 test	 dl, dl
  000d8	0f 84 5a 03 00
	00		 je	 $LN84@encodeStri
  000de	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e1	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000e4	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000e7	84 d2		 test	 dl, dl
  000e9	0f 84 43 03 00
	00		 je	 $LN83@encodeStri
  000ef	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f2	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000f5	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000f8	84 d2		 test	 dl, dl
  000fa	0f 84 2d 03 00
	00		 je	 $LN82@encodeStri
  00100	32 d3		 xor	 dl, bl
  00102	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  00105	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  00108	84 d2		 test	 dl, dl
  0010a	0f 84 17 03 00
	00		 je	 $LN81@encodeStri
  00110	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00113	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  00116	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00119	84 d2		 test	 dl, dl
  0011b	0f 84 00 03 00
	00		 je	 $LN80@encodeStri
  00121	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00124	88 50 10	 mov	 BYTE PTR [eax+16], dl
  00127	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  0012a	84 d2		 test	 dl, dl
  0012c	0f 84 e9 02 00
	00		 je	 $LN79@encodeStri
  00132	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00135	88 50 11	 mov	 BYTE PTR [eax+17], dl
  00138	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  0013b	84 d2		 test	 dl, dl
  0013d	0f 84 d3 02 00
	00		 je	 $LN78@encodeStri
  00143	32 d3		 xor	 dl, bl
  00145	88 50 12	 mov	 BYTE PTR [eax+18], dl
  00148	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  0014b	84 d2		 test	 dl, dl
  0014d	0f 84 bd 02 00
	00		 je	 $LN77@encodeStri
  00153	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00156	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00159	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  0015c	84 d2		 test	 dl, dl
  0015e	0f 84 a6 02 00
	00		 je	 $LN76@encodeStri
  00164	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00167	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0016a	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0016d	84 d2		 test	 dl, dl
  0016f	0f 84 8f 02 00
	00		 je	 $LN75@encodeStri
  00175	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00178	88 50 15	 mov	 BYTE PTR [eax+21], dl
  0017b	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  0017e	84 d2		 test	 dl, dl
  00180	0f 84 79 02 00
	00		 je	 $LN74@encodeStri
  00186	32 d3		 xor	 dl, bl
  00188	88 50 16	 mov	 BYTE PTR [eax+22], dl
  0018b	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  0018e	84 d2		 test	 dl, dl
  00190	0f 84 60 02 00
	00		 je	 $LN73@encodeStri
  00196	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00199	88 50 17	 mov	 BYTE PTR [eax+23], dl
  0019c	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  0019f	84 d2		 test	 dl, dl
  001a1	0f 84 46 02 00
	00		 je	 $LN72@encodeStri
  001a7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001aa	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001ad	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b0	84 d2		 test	 dl, dl
  001b2	0f 84 2c 02 00
	00		 je	 $LN71@encodeStri
  001b8	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001bb	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001be	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c1	84 d2		 test	 dl, dl
  001c3	0f 84 13 02 00
	00		 je	 $LN70@encodeStri
  001c9	32 d3		 xor	 dl, bl
  001cb	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001ce	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d1	84 d2		 test	 dl, dl
  001d3	0f 84 fa 01 00
	00		 je	 $LN69@encodeStri
  001d9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dc	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001df	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e2	84 d2		 test	 dl, dl
  001e4	0f 84 e0 01 00
	00		 je	 $LN68@encodeStri
  001ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ed	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f0	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001f3	84 d2		 test	 dl, dl
  001f5	0f 84 c6 01 00
	00		 je	 $LN67@encodeStri
  001fb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001fe	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00201	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  00204	84 d2		 test	 dl, dl
  00206	0f 84 ad 01 00
	00		 je	 $LN66@encodeStri
  0020c	32 d3		 xor	 dl, bl
  0020e	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00211	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  00214	84 d2		 test	 dl, dl
  00216	0f 84 94 01 00
	00		 je	 $LN65@encodeStri
  0021c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0021f	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00222	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  00225	84 d2		 test	 dl, dl
  00227	0f 84 7a 01 00
	00		 je	 $LN64@encodeStri
  0022d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00230	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00233	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  00236	84 d2		 test	 dl, dl
  00238	0f 84 60 01 00
	00		 je	 $LN63@encodeStri
  0023e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00241	88 50 21	 mov	 BYTE PTR [eax+33], dl
  00244	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  00247	84 d2		 test	 dl, dl
  00249	0f 84 47 01 00
	00		 je	 $LN62@encodeStri
  0024f	32 d3		 xor	 dl, bl
  00251	88 50 22	 mov	 BYTE PTR [eax+34], dl
  00254	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  00257	84 d2		 test	 dl, dl
  00259	0f 84 2e 01 00
	00		 je	 $LN61@encodeStri
  0025f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00262	88 50 23	 mov	 BYTE PTR [eax+35], dl
  00265	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  00268	84 d2		 test	 dl, dl
  0026a	0f 84 14 01 00
	00		 je	 $LN60@encodeStri
  00270	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00273	88 50 24	 mov	 BYTE PTR [eax+36], dl
  00276	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00279	84 d2		 test	 dl, dl
  0027b	0f 84 fa 00 00
	00		 je	 $LN59@encodeStri
  00281	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00284	88 50 25	 mov	 BYTE PTR [eax+37], dl
  00287	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  0028a	84 d2		 test	 dl, dl
  0028c	0f 84 e1 00 00
	00		 je	 $LN58@encodeStri
  00292	32 d3		 xor	 dl, bl
  00294	88 50 26	 mov	 BYTE PTR [eax+38], dl
  00297	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  0029a	84 d2		 test	 dl, dl
  0029c	0f 84 c8 00 00
	00		 je	 $LN57@encodeStri
  002a2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002a5	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002a8	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002ab	84 d2		 test	 dl, dl
  002ad	0f 84 ae 00 00
	00		 je	 $LN56@encodeStri
  002b3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002b6	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002b9	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002bc	84 d2		 test	 dl, dl
  002be	0f 84 94 00 00
	00		 je	 $LN55@encodeStri
  002c4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002c7	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002ca	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002cd	84 d2		 test	 dl, dl
  002cf	74 7f		 je	 SHORT $LN54@encodeStri
  002d1	32 d3		 xor	 dl, bl
  002d3	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002d6	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002d9	84 d2		 test	 dl, dl
  002db	74 6a		 je	 SHORT $LN53@encodeStri
  002dd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e0	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002e3	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002e6	84 d2		 test	 dl, dl
  002e8	74 54		 je	 SHORT $LN52@encodeStri
  002ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002ed	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f0	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002f3	84 d2		 test	 dl, dl
  002f5	74 3e		 je	 SHORT $LN51@encodeStri
  002f7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002fa	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  002fd	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00300	84 d2		 test	 dl, dl
  00302	74 29		 je	 SHORT $LN50@encodeStri
  00304	32 d3		 xor	 dl, bl
  00306	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00309	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  0030c	84 d2		 test	 dl, dl
  0030e	74 14		 je	 SHORT $LN49@encodeStri
  00310	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00313	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  00316	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00319	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0031c	88 48 30	 mov	 BYTE PTR [eax+48], cl
  0031f	e9 5d 01 00 00	 jmp	 $LN1@encodeStri
$LN49@encodeStri:
  00324	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  00328	e9 54 01 00 00	 jmp	 $LN1@encodeStri
$LN50@encodeStri:
  0032d	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00330	e9 4c 01 00 00	 jmp	 $LN1@encodeStri
$LN51@encodeStri:
  00335	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00339	e9 43 01 00 00	 jmp	 $LN1@encodeStri
$LN52@encodeStri:
  0033e	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00342	e9 3a 01 00 00	 jmp	 $LN1@encodeStri
$LN53@encodeStri:
  00347	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  0034b	e9 31 01 00 00	 jmp	 $LN1@encodeStri
$LN54@encodeStri:
  00350	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  00353	e9 29 01 00 00	 jmp	 $LN1@encodeStri
$LN55@encodeStri:
  00358	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  0035c	e9 20 01 00 00	 jmp	 $LN1@encodeStri
$LN56@encodeStri:
  00361	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  00365	e9 17 01 00 00	 jmp	 $LN1@encodeStri
$LN57@encodeStri:
  0036a	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  0036e	e9 0e 01 00 00	 jmp	 $LN1@encodeStri
$LN58@encodeStri:
  00373	88 58 26	 mov	 BYTE PTR [eax+38], bl
  00376	e9 06 01 00 00	 jmp	 $LN1@encodeStri
$LN59@encodeStri:
  0037b	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  0037f	e9 fd 00 00 00	 jmp	 $LN1@encodeStri
$LN60@encodeStri:
  00384	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  00388	e9 f4 00 00 00	 jmp	 $LN1@encodeStri
$LN61@encodeStri:
  0038d	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00391	e9 eb 00 00 00	 jmp	 $LN1@encodeStri
$LN62@encodeStri:
  00396	88 58 22	 mov	 BYTE PTR [eax+34], bl
  00399	e9 e3 00 00 00	 jmp	 $LN1@encodeStri
$LN63@encodeStri:
  0039e	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a2	e9 da 00 00 00	 jmp	 $LN1@encodeStri
$LN64@encodeStri:
  003a7	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003ab	e9 d1 00 00 00	 jmp	 $LN1@encodeStri
$LN65@encodeStri:
  003b0	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003b4	e9 c8 00 00 00	 jmp	 $LN1@encodeStri
$LN66@encodeStri:
  003b9	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003bc	e9 c0 00 00 00	 jmp	 $LN1@encodeStri
$LN67@encodeStri:
  003c1	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003c5	e9 b7 00 00 00	 jmp	 $LN1@encodeStri
$LN68@encodeStri:
  003ca	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003ce	e9 ae 00 00 00	 jmp	 $LN1@encodeStri
$LN69@encodeStri:
  003d3	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003d7	e9 a5 00 00 00	 jmp	 $LN1@encodeStri
$LN70@encodeStri:
  003dc	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003df	e9 9d 00 00 00	 jmp	 $LN1@encodeStri
$LN71@encodeStri:
  003e4	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003e8	e9 94 00 00 00	 jmp	 $LN1@encodeStri
$LN72@encodeStri:
  003ed	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f1	e9 8b 00 00 00	 jmp	 $LN1@encodeStri
$LN73@encodeStri:
  003f6	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  003fa	e9 82 00 00 00	 jmp	 $LN1@encodeStri
$LN74@encodeStri:
  003ff	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00402	eb 7d		 jmp	 SHORT $LN1@encodeStri
$LN75@encodeStri:
  00404	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  00408	eb 77		 jmp	 SHORT $LN1@encodeStri
$LN76@encodeStri:
  0040a	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  0040e	eb 71		 jmp	 SHORT $LN1@encodeStri
$LN77@encodeStri:
  00410	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  00414	eb 6b		 jmp	 SHORT $LN1@encodeStri
$LN78@encodeStri:
  00416	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00419	eb 66		 jmp	 SHORT $LN1@encodeStri
$LN79@encodeStri:
  0041b	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  0041f	eb 60		 jmp	 SHORT $LN1@encodeStri
$LN80@encodeStri:
  00421	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  00425	eb 5a		 jmp	 SHORT $LN1@encodeStri
$LN81@encodeStri:
  00427	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  0042b	eb 54		 jmp	 SHORT $LN1@encodeStri
$LN82@encodeStri:
  0042d	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00430	eb 4f		 jmp	 SHORT $LN1@encodeStri
$LN83@encodeStri:
  00432	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  00436	eb 49		 jmp	 SHORT $LN1@encodeStri
$LN84@encodeStri:
  00438	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  0043c	eb 43		 jmp	 SHORT $LN1@encodeStri
$LN85@encodeStri:
  0043e	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00442	eb 3d		 jmp	 SHORT $LN1@encodeStri
$LN86@encodeStri:
  00444	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00447	eb 38		 jmp	 SHORT $LN1@encodeStri
$LN87@encodeStri:
  00449	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  0044d	eb 32		 jmp	 SHORT $LN1@encodeStri
$LN88@encodeStri:
  0044f	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  00453	eb 2c		 jmp	 SHORT $LN1@encodeStri
$LN89@encodeStri:
  00455	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00459	eb 26		 jmp	 SHORT $LN1@encodeStri
$LN90@encodeStri:
  0045b	88 58 06	 mov	 BYTE PTR [eax+6], bl
  0045e	eb 21		 jmp	 SHORT $LN1@encodeStri
$LN91@encodeStri:
  00460	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  00464	eb 1b		 jmp	 SHORT $LN1@encodeStri
$LN92@encodeStri:
  00466	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  0046a	eb 15		 jmp	 SHORT $LN1@encodeStri
$LN93@encodeStri:
  0046c	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00470	eb 0f		 jmp	 SHORT $LN1@encodeStri
$LN94@encodeStri:
  00472	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  00476	eb 09		 jmp	 SHORT $LN1@encodeStri
$LN95@encodeStri:
  00478	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  0047c	eb 03		 jmp	 SHORT $LN1@encodeStri
$LN96@encodeStri:
  0047e	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN1@encodeStri:
  00481	6a 06		 push	 6
  00483	5a		 pop	 edx
  00484	8b c8		 mov	 ecx, eax
  00486	c6 40 18 00	 mov	 BYTE PTR [eax+24], 0
  0048a	5b		 pop	 ebx
$LL104@encodeStri:
  0048b	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00491	83 c1 04	 add	 ecx, 4
  00494	4a		 dec	 edx
  00495	75 f4		 jne	 SHORT $LL104@encodeStri

; 217  : 		return e;
; 218  : 	}

  00497	5d		 pop	 ebp
  00498	c2 08 00	 ret	 8
??$encodeString@$0BJ@@ioINILoader_e@@AAEPADAAY0BJ@$$CBDPAD@Z ENDP ; ioINILoader_e::encodeString<25>
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
_TEXT	ENDS
PUBLIC	?StringCbCopyA@@YGJPADIPBD@Z			; StringCbCopyA
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
;	COMDAT ?StringCbCopyA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCbCopyA@@YGJPADIPBD@Z PROC			; StringCbCopyA, COMDAT

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 583  :     HRESULT hr;
; 584  :     size_t cchDest = cbDest / sizeof(char);
; 585  : 
; 586  :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	33 c0		 xor	 eax, eax
  00005	39 45 0c	 cmp	 DWORD PTR _cbDest$[ebp], eax
  00008	74 09		 je	 SHORT $LN4@StringCbCo
  0000a	81 7d 0c ff ff
	ff 7f		 cmp	 DWORD PTR _cbDest$[ebp], 2147483647 ; 7fffffffH
  00011	76 05		 jbe	 SHORT $LN5@StringCbCo
$LN4@StringCbCo:
  00013	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCbCo:

; 587  : 
; 588  :     if (SUCCEEDED(hr))

  00018	85 c0		 test	 eax, eax
  0001a	78 15		 js	 SHORT $LN1@StringCbCo

; 589  :     {
; 590  :         hr = StringCopyWorkerA(pszDest,
; 591  :                                cchDest,
; 592  :                                NULL,
; 593  :                                pszSrc,
; 594  :                                STRSAFE_MAX_LENGTH);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _cbDest$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pszDest$[ebp]
  00022	68 fe ff ff 7f	 push	 2147483646		; 7ffffffeH
  00027	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ; StringCopyWorkerA
$LN1@StringCbCo:

; 595  :     }
; 596  : 
; 597  :     return hr;
; 598  : }

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
?StringCbCopyA@@YGJPADIPBD@Z ENDP			; StringCbCopyA
_TEXT	ENDS
PUBLIC	?StringCbCatA@@YGJPADIPBD@Z			; StringCbCatA
; Function compile flags: /Ogsp
;	COMDAT ?StringCbCatA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCbCatA@@YGJPADIPBD@Z PROC			; StringCbCatA, COMDAT

; 2449 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2450 :     HRESULT hr;
; 2451 :     size_t cchDestLength;
; 2452 :     size_t cchDest = cbDest / sizeof(char);
; 2453 : 
; 2454 :     hr = StringValidateDestAndLengthA(pszDest,
; 2455 :                                       cchDest,
; 2456 :                                       &cchDestLength,
; 2457 :                                       STRSAFE_MAX_CCH);

  00005	8b 75 0c	 mov	 esi, DWORD PTR _cbDest$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	57		 push	 edi
  0000b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00010	85 f6		 test	 esi, esi
  00012	74 04		 je	 SHORT $LN8@StringCbCa
  00014	3b f3		 cmp	 esi, ebx
  00016	76 05		 jbe	 SHORT $LN9@StringCbCa
$LN8@StringCbCa:
  00018	b9 57 00 07 80	 mov	 ecx, -2147024809	; 80070057H
$LN9@StringCbCa:
  0001d	8b 7d 08	 mov	 edi, DWORD PTR _pszDest$[ebp]
  00020	8b c1		 mov	 eax, ecx
  00022	85 c9		 test	 ecx, ecx
  00024	78 1b		 js	 SHORT $LN5@StringCbCa
  00026	33 c0		 xor	 eax, eax
  00028	8b d6		 mov	 edx, esi
  0002a	8b cf		 mov	 ecx, edi
  0002c	85 f6		 test	 esi, esi
  0002e	74 0c		 je	 SHORT $LN24@StringCbCa
$LL17@StringCbCa:
  00030	38 01		 cmp	 BYTE PTR [ecx], al
  00032	74 04		 je	 SHORT $LN16@StringCbCa
  00034	41		 inc	 ecx
  00035	4a		 dec	 edx
  00036	75 f8		 jne	 SHORT $LL17@StringCbCa
$LN16@StringCbCa:
  00038	85 d2		 test	 edx, edx
  0003a	75 23		 jne	 SHORT $LN23@StringCbCa
$LN24@StringCbCa:
  0003c	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCbCa:
  00041	33 c9		 xor	 ecx, ecx
$LN4@StringCbCa:

; 2458 :     
; 2459 :     if (SUCCEEDED(hr))

  00043	85 c0		 test	 eax, eax
  00045	78 11		 js	 SHORT $LN1@StringCbCa

; 2460 :     {
; 2461 :         hr = StringCopyWorkerA(pszDest + cchDestLength,
; 2462 :                                cchDest - cchDestLength,
; 2463 :                                NULL,
; 2464 :                                pszSrc,
; 2465 :                                STRSAFE_MAX_CCH);

  00047	53		 push	 ebx
  00048	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0004b	8b c6		 mov	 eax, esi
  0004d	2b c1		 sub	 eax, ecx
  0004f	6a 00		 push	 0
  00051	03 cf		 add	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ; StringCopyWorkerA
$LN1@StringCbCa:
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx

; 2466 :     }
; 2467 : 
; 2468 :     return hr;
; 2469 : }

  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN23@StringCbCa:

; 2450 :     HRESULT hr;
; 2451 :     size_t cchDestLength;
; 2452 :     size_t cchDest = cbDest / sizeof(char);
; 2453 : 
; 2454 :     hr = StringValidateDestAndLengthA(pszDest,
; 2455 :                                       cchDest,
; 2456 :                                       &cchDestLength,
; 2457 :                                       STRSAFE_MAX_CCH);

  0005f	8b ce		 mov	 ecx, esi
  00061	2b ca		 sub	 ecx, edx
  00063	eb de		 jmp	 SHORT $LN4@StringCbCa
?StringCbCatA@@YGJPADIPBD@Z ENDP			; StringCbCatA
_TEXT	ENDS
PUBLIC	?StringCbPrintfA@@YAJPADIPBDZZ			; StringCbPrintfA
; Function compile flags: /Ogsp
;	COMDAT ?StringCbPrintfA@@YAJPADIPBDZZ
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCbPrintfA@@YAJPADIPBDZZ PROC			; StringCbPrintfA, COMDAT

; 4767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4768 :     HRESULT hr;
; 4769 :     size_t cchDest = cbDest / sizeof(char);
; 4770 : 
; 4771 :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _cbDest$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 08		 je	 SHORT $LN4@StringCbPr
  0000c	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00012	76 05		 jbe	 SHORT $LN5@StringCbPr
$LN4@StringCbPr:
  00014	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCbPr:

; 4772 :     
; 4773 :     if (SUCCEEDED(hr))

  00019	85 c0		 test	 eax, eax
  0001b	78 39		 js	 SHORT $LN1@StringCbPr

; 4774 :     {
; 4775 :         va_list argList;
; 4776 : 
; 4777 :         va_start(argList, pszFormat);
; 4778 : 
; 4779 :         hr = StringVPrintfWorkerA(pszDest,
; 4780 :                                   cchDest,
; 4781 :                                   NULL,
; 4782 :                                   pszFormat,
; 4783 :                                   argList);

  0001d	53		 push	 ebx
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _pszDest$[ebp]
  00023	8d 45 14	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00026	50		 push	 eax
  00027	ff 75 10	 push	 DWORD PTR _pszFormat$[ebp]
  0002a	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	33 db		 xor	 ebx, ebx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	85 c0		 test	 eax, eax
  0003c	78 0b		 js	 SHORT $LN12@StringCbPr
  0003e	3b c6		 cmp	 eax, esi
  00040	77 07		 ja	 SHORT $LN12@StringCbPr
  00042	75 0d		 jne	 SHORT $LN9@StringCbPr
  00044	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  00047	eb 08		 jmp	 SHORT $LN9@StringCbPr
$LN12@StringCbPr:
  00049	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  0004c	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringCbPr:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	8b c3		 mov	 eax, ebx
  00055	5b		 pop	 ebx
$LN1@StringCbPr:

; 4784 : 
; 4785 :         va_end(argList);
; 4786 :     }
; 4787 : 
; 4788 :     return hr;
; 4789 : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?StringCbPrintfA@@YAJPADIPBDZZ ENDP			; StringCbPrintfA
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QBE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@_N@@QBE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QBE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QBE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??_C@_07JIFICGNG@ModeMap?$AA@			; `string'
PUBLIC	??_C@_07ELEFHNAF@ModeSub?$AA@			; `string'
PUBLIC	??_C@_0BA@OJBMJPOF@ShowMemoryUsage?$AA@		; `string'
PUBLIC	??_C@_0O@CPIJIAAI@ShowExtraInfo?$AA@		; `string'
PUBLIC	??_C@_0N@DBOPDCMD@ShowBoundBox?$AA@		; `string'
PUBLIC	??_C@_0L@CBCDGBIF@FullScreen?$AA@		; `string'
PUBLIC	??_C@_07HIEHALAI@PreMode?$AA@			; `string'
PUBLIC	_this$GSCopy$
PUBLIC	?SetAdminSettings@CLogin@@QAEXXZ		; CLogin::SetAdminSettings
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__imp_?At@ioHashString@@QBEDH@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?Length@ioHashString@@QBEHXZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_07JIFICGNG@ModeMap?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\setting.h
CONST	SEGMENT
??_C@_07JIFICGNG@ModeMap?$AA@ DB 'ModeMap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELEFHNAF@ModeSub?$AA@
CONST	SEGMENT
??_C@_07ELEFHNAF@ModeSub?$AA@ DB 'ModeSub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OJBMJPOF@ShowMemoryUsage?$AA@
CONST	SEGMENT
??_C@_0BA@OJBMJPOF@ShowMemoryUsage?$AA@ DB 'ShowMemoryUsage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CPIJIAAI@ShowExtraInfo?$AA@
CONST	SEGMENT
??_C@_0O@CPIJIAAI@ShowExtraInfo?$AA@ DB 'ShowExtraInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBOPDCMD@ShowBoundBox?$AA@
CONST	SEGMENT
??_C@_0N@DBOPDCMD@ShowBoundBox?$AA@ DB 'ShowBoundBox', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CBCDGBIF@FullScreen?$AA@
CONST	SEGMENT
??_C@_0L@CBCDGBIF@FullScreen?$AA@ DB 'FullScreen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HIEHALAI@PreMode?$AA@
CONST	SEGMENT
??_C@_07HIEHALAI@PreMode?$AA@ DB 'PreMode', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetAdminSettings@CLogin@@QAEXXZ DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$?SetAdminSettings@CLogin@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetAdminSettings@CLogin@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$5
	DD	02H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$7
	DD	03H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$9
	DD	04H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$11
	DD	05H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$13
	DD	06H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$15
	DD	07H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$17
	DD	08H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$19
	DD	09H
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$21
	DD	0aH
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$23
	DD	0bH
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$25
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$28
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?SetAdminSettings@CLogin@@QAEXXZ
_TEXT	SEGMENT
tv355 = -304						; size = 4
_this$GSCopy$ = -304					; size = 4
_szTempData$507160 = -300				; size = 2
_OptionRegInfos$ = -296					; size = 280
__$EHRec$ = -12						; size = 12
?SetAdminSettings@CLogin@@QAEXXZ PROC			; CLogin::SetAdminSettings, COMDAT
; _this$ = ecx

; 393  : {

  00000	68 24 01 00 00	 push	 292			; 00000124H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetAdminSettings@CLogin@@QAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 394  : 	typedef struct OptionRegInfo
; 395  : 	{
; 396  : 		ioHashString szValue;
; 397  : 		int iMaxData;
; 398  : 	}OptionRegInfo;
; 399  : 
; 400  : 	const OptionRegInfo OptionRegInfos[OT_MAX] = { 
; 401  : 		{"", -1},

  0000f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00015	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001b	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00020	57		 push	 edi
  00021	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp]
  00027	ff d6		 call	 esi
  00029	83 8d e8 fe ff
	ff ff		 or	 DWORD PTR _OptionRegInfos$[ebp+16], -1
  00030	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 402  : 		{"", -1},

  00034	57		 push	 edi
  00035	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+20]
  0003b	ff d6		 call	 esi
  0003d	83 8d fc fe ff
	ff ff		 or	 DWORD PTR _OptionRegInfos$[ebp+36], -1
  00044	33 db		 xor	 ebx, ebx
  00046	43		 inc	 ebx

; 403  : 		{"", -1},

  00047	57		 push	 edi
  00048	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+40]
  0004e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00051	ff d6		 call	 esi
  00053	83 8d 10 ff ff
	ff ff		 or	 DWORD PTR _OptionRegInfos$[ebp+56], -1

; 404  : 		{"", -1},

  0005a	57		 push	 edi
  0005b	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+60]
  00061	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00065	ff d6		 call	 esi
  00067	83 8d 24 ff ff
	ff ff		 or	 DWORD PTR _OptionRegInfos$[ebp+76], -1

; 405  : 		{"PreMode", 0}, // 아래에서 별도로 계산함.

  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_07HIEHALAI@PreMode?$AA@
  00073	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+80]
  00079	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007d	ff d6		 call	 esi
  0007f	83 a5 38 ff ff
	ff 00		 and	 DWORD PTR _OptionRegInfos$[ebp+96], 0

; 406  : 		{"FullScreen", 1},

  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CBCDGBIF@FullScreen?$AA@
  0008b	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+100]
  00091	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00095	ff d6		 call	 esi
  00097	89 9d 4c ff ff
	ff		 mov	 DWORD PTR _OptionRegInfos$[ebp+116], ebx

; 407  : 		{"ShowBoundBox", 1},

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBOPDCMD@ShowBoundBox?$AA@
  000a2	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+120]
  000a8	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000ac	ff d6		 call	 esi
  000ae	89 9d 60 ff ff
	ff		 mov	 DWORD PTR _OptionRegInfos$[ebp+136], ebx

; 408  : 		{"ShowExtraInfo", 1},

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CPIJIAAI@ShowExtraInfo?$AA@
  000b9	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+140]
  000bf	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000c3	ff d6		 call	 esi
  000c5	89 9d 74 ff ff
	ff		 mov	 DWORD PTR _OptionRegInfos$[ebp+156], ebx

; 409  : 		{"ShowMemoryUsage", 1},

  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OJBMJPOF@ShowMemoryUsage?$AA@
  000d0	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+160]
  000d6	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000da	ff d6		 call	 esi
  000dc	89 5d 88	 mov	 DWORD PTR _OptionRegInfos$[ebp+176], ebx

; 410  : 		{"",-1},

  000df	57		 push	 edi
  000e0	8d 4d 8c	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+180]
  000e3	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000e7	ff d6		 call	 esi
  000e9	83 4d 9c ff	 or	 DWORD PTR _OptionRegInfos$[ebp+196], -1

; 411  : 		{"",-1},

  000ed	57		 push	 edi
  000ee	8d 4d a0	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+200]
  000f1	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000f5	ff d6		 call	 esi
  000f7	83 4d b0 ff	 or	 DWORD PTR _OptionRegInfos$[ebp+216], -1

; 412  : 		{"",-1},

  000fb	57		 push	 edi
  000fc	8d 4d b4	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+220]
  000ff	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00103	ff d6		 call	 esi
  00105	83 4d c4 ff	 or	 DWORD PTR _OptionRegInfos$[ebp+236], -1

; 413  : 		{"ModeSub", 50}, 

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_07ELEFHNAF@ModeSub?$AA@
  0010e	8d 4d c8	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+240]
  00111	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00115	ff d6		 call	 esi
  00117	6a 32		 push	 50			; 00000032H
  00119	5f		 pop	 edi
  0011a	89 7d d8	 mov	 DWORD PTR _OptionRegInfos$[ebp+256], edi

; 414  : 		{"ModeMap", 50}, 

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_07JIFICGNG@ModeMap?$AA@
  00122	8d 4d dc	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+260]
  00125	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00129	ff d6		 call	 esi
  0012b	89 7d ec	 mov	 DWORD PTR _OptionRegInfos$[ebp+276], edi

; 415  : 	};
; 416  : 
; 417  : 	for (int i = 0; i < OT_MAX ; i++)

  0012e	8b b5 d0 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00134	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0013b	33 ff		 xor	 edi, edi
$LL8@SetAdminSe:

; 418  : 	{
; 419  : 		if(i >= m_szOptions.Length())

  0013d	8d 8e 14 02 00
	00		 lea	 ecx, DWORD PTR [esi+532]
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Length@ioHashString@@QBEHXZ
  00149	3b f8		 cmp	 edi, eax
  0014b	7d 6c		 jge	 SHORT $LN7@SetAdminSe

; 420  : 			continue;
; 421  : 		
; 422  : 		if(OptionRegInfos[i].szValue.IsEmpty())

  0014d	8b c7		 mov	 eax, edi
  0014f	6b c0 14	 imul	 eax, 20			; 00000014H
  00152	8d 8c 05 d8 fe
	ff ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+eax]
  00159	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv355[ebp], eax
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00165	84 c0		 test	 al, al
  00167	75 50		 jne	 SHORT $LN7@SetAdminSe

; 423  : 			continue;
; 424  : 
; 425  : 		char szTempData[2];
; 426  : 		szTempData[0] = m_szOptions.At(i);

  00169	57		 push	 edi
  0016a	8d 8e 14 02 00
	00		 lea	 ecx, DWORD PTR [esi+532]
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?At@ioHashString@@QBEDH@Z
  00176	88 85 d4 fe ff
	ff		 mov	 BYTE PTR _szTempData$507160[ebp], al

; 427  : 		szTempData[1] = '\0';
; 428  : 
; 429  : 		int iData = GetNumber( szTempData );

  0017c	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempData$507160[ebp]
  00182	50		 push	 eax
  00183	8b ce		 mov	 ecx, esi
  00185	c6 85 d5 fe ff
	ff 00		 mov	 BYTE PTR _szTempData$507160[ebp+1], 0
  0018c	e8 00 00 00 00	 call	 ?GetNumber@CLogin@@IAEHPAD@Z ; CLogin::GetNumber

; 430  : 
; 431  : 		if(i == OT_GAME_MODE)

  00191	83 ff 04	 cmp	 edi, 4
  00194	75 04		 jne	 SHORT $LN3@SetAdminSe

; 432  : 		{
; 433  : 			SetSetting(i, iData);

  00196	50		 push	 eax
  00197	57		 push	 edi
  00198	eb 18		 jmp	 SHORT $LN45@SetAdminSe
$LN3@SetAdminSe:

; 434  : 		}
; 435  : 		else if(COMPARE(iData, 0, OptionRegInfos[i].iMaxData+1))

  0019a	85 c0		 test	 eax, eax
  0019c	78 1b		 js	 SHORT $LN7@SetAdminSe
  0019e	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv355[ebp]
  001a4	8b 8c 0d e8 fe
	ff ff		 mov	 ecx, DWORD PTR _OptionRegInfos$[ebp+ecx+16]
  001ab	41		 inc	 ecx
  001ac	3b c1		 cmp	 eax, ecx
  001ae	7d 09		 jge	 SHORT $LN7@SetAdminSe

; 436  : 		{
; 437  : 			SetSetting(i, iData);

  001b0	50		 push	 eax
  001b1	57		 push	 edi
$LN45@SetAdminSe:
  001b2	8b ce		 mov	 ecx, esi
  001b4	e8 00 00 00 00	 call	 ?SetSetting@CLogin@@IAEXHH@Z ; CLogin::SetSetting
$LN7@SetAdminSe:

; 415  : 	};
; 416  : 
; 417  : 	for (int i = 0; i < OT_MAX ; i++)

  001b9	47		 inc	 edi
  001ba	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  001bd	0f 8c 7a ff ff
	ff		 jl	 $LL8@SetAdminSe

; 438  : 		}
; 439  : 	}
; 440  : 
; 441  : 	Setting::SetShowBoundSphere( false );
; 442  : }

  001c3	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001c7	68 00 00 00 00	 push	 OFFSET ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
  001cc	6a 0e		 push	 14			; 0000000eH
  001ce	6a 14		 push	 20			; 00000014H
  001d0	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _OptionRegInfos$[ebp]
  001d6	50		 push	 eax
  001d7	c6 05 6f 00 00
	00 00		 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+111, 0
  001de	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  001e3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001e8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$1:
  00000	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$3:
  0000b	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+20]
  00011	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$5:
  00016	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+40]
  0001c	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$7:
  00021	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+60]
  00027	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$9:
  0002c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+80]
  00032	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$11:
  00037	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+100]
  0003d	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$13:
  00042	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+120]
  00048	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$15:
  0004d	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+140]
  00053	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$17:
  00058	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+160]
  0005e	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$19:
  00063	8d 4d 8c	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+180]
  00066	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$21:
  0006b	8d 4d a0	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+200]
  0006e	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$23:
  00073	8d 4d b4	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+220]
  00076	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$25:
  0007b	8d 4d c8	 lea	 ecx, DWORD PTR _OptionRegInfos$[ebp+240]
  0007e	e9 00 00 00 00	 jmp	 ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
__unwindfunclet$?SetAdminSettings@CLogin@@QAEXXZ$28:
  00083	68 00 00 00 00	 push	 OFFSET ??1OptionRegInfo@?1??SetAdminSettings@CLogin@@QAEXXZ@QAE@XZ
  00088	6a 0e		 push	 14			; 0000000eH
  0008a	6a 14		 push	 20			; 00000014H
  0008c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _OptionRegInfos$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00098	c3		 ret	 0
__ehhandler$?SetAdminSettings@CLogin@@QAEXXZ:
  00099	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0009d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a0	8b 8a cc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-308]
  000a6	33 c8		 xor	 ecx, eax
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000b0	33 c8		 xor	 ecx, eax
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetAdminSettings@CLogin@@QAEXXZ
  000bc	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetAdminSettings@CLogin@@QAEXXZ ENDP			; CLogin::SetAdminSettings
PUBLIC	__$ArrayPad$
PUBLIC	?SendLogin@CLogin@@IAEXABVioHashString@@@Z	; CLogin::SendLogin
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z:PROC ; ioLocalManager::GetLocal
EXTRN	?GetSingleton@ioLocalManager@@SAAAV1@XZ:PROC	; ioLocalManager::GetSingleton
EXTRN	?IsTCPConnected@ioApplication@@QBE_NXZ:PROC	; ioApplication::IsTCPConnected
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendLogin@CLogin@@IAEXABVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendLogin@CLogin@@IAEXABVioHashString@@@Z$0
__ehfuncinfo$?SendLogin@CLogin@@IAEXABVioHashString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendLogin@CLogin@@IAEXABVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SendLogin@CLogin@@IAEXABVioHashString@@@Z
_TEXT	SEGMENT
_kPacket$507191 = -32824				; size = 32792
_szLocalIP$507190 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_szLoginKey$ = 8					; size = 4
?SendLogin@CLogin@@IAEXABVioHashString@@@Z PROC		; CLogin::SendLogin, COMDAT
; _this$ = ecx

; 475  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SendLogin@CLogin@@IAEXABVioHashString@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 2c 80 00 00	 mov	 eax, 32812		; 0000802cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b 7d 08	 mov	 edi, DWORD PTR _szLoginKey$[ebp]
  00034	8b f1		 mov	 esi, ecx

; 476  : 	if(m_eLoginState >= LS_SENT_MSG)

  00036	83 be 08 02 00
	00 01		 cmp	 DWORD PTR [esi+520], 1
  0003d	0f 8d de 00 00
	00		 jge	 $LN2@SendLogin

; 477  : 		return;
; 478  : 
; 479  : 	if( g_App.IsTCPConnected() )

  00043	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsTCPConnected@ioApplication@@QBE_NXZ ; ioApplication::IsTCPConnected
  0004f	84 c0		 test	 al, al
  00051	0f 84 ca 00 00
	00		 je	 $LN2@SendLogin

; 480  : 	{
; 481  : 		char szLocalIP[LENGTH_IP];
; 482  : 		g_App.GetMyLocalIP( szLocalIP );

  00057	8d 45 e0	 lea	 eax, DWORD PTR _szLocalIP$507190[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?GetMyLocalIP@ioApplication@@QAEXPAD@Z ; ioApplication::GetMyLocalIP

; 483  : 
; 484  : 		SP2Packet kPacket( CTPK_CONNECT );

  00067	6a 02		 push	 2
  00069	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507191[ebp]
  0006f	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00074	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 485  : 		kPacket << szLoginKey << szLocalIP << FILEVER << (int) ioLocalManager::GetLocalType();

  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  0007e	50		 push	 eax
  0007f	68 3d 32 00 00	 push	 12861			; 0000323dH
  00084	8d 45 e0	 lea	 eax, DWORD PTR _szLocalIP$507190[ebp]
  00087	50		 push	 eax
  00088	57		 push	 edi
  00089	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507191[ebp]
  0008f	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  0009b	8b c8		 mov	 ecx, eax
  0009d	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 486  : 		ioLocalParent *pLocal = g_LocalMgr.GetLocal( ioLocalManager::GetLocalType() );

  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?GetSingleton@ioLocalManager@@SAAAV1@XZ ; ioLocalManager::GetSingleton
  000b5	8b c8		 mov	 ecx, eax
  000b7	e8 00 00 00 00	 call	 ?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z ; ioLocalManager::GetLocal

; 487  : 		if( pLocal )

  000bc	85 c0		 test	 eax, eax
  000be	74 0e		 je	 SHORT $LN1@SendLogin

; 488  : 			pLocal->FillLoginData( kPacket );

  000c0	8b 10		 mov	 edx, DWORD PTR [eax]
  000c2	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507191[ebp]
  000c8	51		 push	 ecx
  000c9	8b c8		 mov	 ecx, eax
  000cb	ff 52 54	 call	 DWORD PTR [edx+84]
$LN1@SendLogin:

; 489  : 
; 490  : 		TCPNetwork::SendToServer( kPacket );

  000ce	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$507191[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 491  : 
; 492  : 		m_eLoginState = LS_SENT_MSG;
; 493  : 		SendMsgToAutoUpgrade(WM_MY_MSG_C_CONNECT);

  000da	8b ce		 mov	 ecx, esi
  000dc	c7 86 08 02 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+520], 1
  000e6	c7 04 24 2d 05
	00 00		 mov	 DWORD PTR [esp], 1325	; 0000052dH
  000ed	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 494  : 		m_dwConnectPreTime = timeGetTime();

  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 495  : 
; 496  : 		StringCbCopy( m_szLoginKey, sizeof( m_szLoginKey ), szLoginKey.c_str() );

  000f8	8b cf		 mov	 ecx, edi
  000fa	89 86 38 02 00
	00		 mov	 DWORD PTR [esi+568], eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00106	50		 push	 eax
  00107	68 08 02 00 00	 push	 520			; 00000208H
  0010c	56		 push	 esi
  0010d	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 497  : 	}

  00112	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00116	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507191[ebp]
  0011c	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN2@SendLogin:

; 498  : }

  00121	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00124	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012b	59		 pop	 ecx
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00131	33 cd		 xor	 ecx, ebp
  00133	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00138	c9		 leave
  00139	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendLogin@CLogin@@IAEXABVioHashString@@@Z$0:
  00000	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507191[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SendLogin@CLogin@@IAEXABVioHashString@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32824]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SendLogin@CLogin@@IAEXABVioHashString@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SendLogin@CLogin@@IAEXABVioHashString@@@Z ENDP		; CLogin::SendLogin
PUBLIC	??_C@_0L@JLPANJNL@CheckError?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z	; CLogin::SetLoginState
EXTRN	?SaveClientError@Help@@YAXHHH@Z:PROC		; Help::SaveClientError
EXTRN	?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z:PROC	; P2PNetwork::SendLog
EXTRN	??6SP2Packet@@QAEAAV0@PBD@Z:PROC		; SP2Packet::operator<<
;	COMDAT ??_C@_0L@JLPANJNL@CheckError?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
CONST	SEGMENT
??_C@_0L@JLPANJNL@CheckError?$AA@ DB 'CheckError', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z$0
__ehfuncinfo$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z
_TEXT	SEGMENT
_kPacket$509326 = -33628				; size = 32792
_szErrorLog$509172 = -836				; size = 780
___encStr$509176 = -56					; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eLoginState$ = 8					; size = 4
?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z PROC	; CLogin::SetLoginState, COMDAT
; _this$ = ecx

; 926  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 50 83 00 00	 mov	 eax, 33616		; 00008350H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 927  : 	if( eLoginState == LS_USER_CLICK_EXIT )

  00031	83 7d 08 03	 cmp	 DWORD PTR _eLoginState$[ebp], 3
  00035	8b f1		 mov	 esi, ecx
  00037	0f 85 6b 01 00
	00		 jne	 $LN100@SetLoginSt

; 928  : 	{
; 929  : 		if( m_eLoginState == LS_USER_CLICK_EXIT )

  0003d	8b 86 08 02 00
	00		 mov	 eax, DWORD PTR [esi+520]
  00043	83 f8 03	 cmp	 eax, 3
  00046	0f 84 65 01 00
	00		 je	 $LN105@SetLoginSt

; 930  : 			return;
; 931  : 
; 932  : 		if( m_eLoginState == LS_NONE     || 
; 933  : 			m_eLoginState == LS_SENT_MSG )

  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 34 01 00
	00		 je	 $LN101@SetLoginSt
  00054	83 f8 01	 cmp	 eax, 1
  00057	0f 84 2b 01 00
	00		 je	 $LN101@SetLoginSt

; 937  : 		}
; 938  : 		else
; 939  : 		{
; 940  : 			char szErrorLog[MAX_PATH*3]="";

  0005d	68 0b 03 00 00	 push	 779			; 0000030bH
  00062	8d 85 bd fc ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$509172[ebp+1]
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 85 bc fc ff
	ff 00		 mov	 BYTE PTR _szErrorLog$509172[ebp], 0
  00072	e8 00 00 00 00	 call	 _memset
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	6a 08		 push	 8

; 941  : 			StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "User Click Exit : %s/%s/%d/%d/%d", g_MyInfo.GetPublicID().c_str(), m_szMyIP.c_str(), m_iCheckCnt, (int) m_eLoginState, timeGetTime() - m_dwConnectPreTime ); //Except Extracting Hangeul

  0007c	c7 45 c8 b8 9f
	8e 98		 mov	 DWORD PTR ___encStr$509176[ebp], -1735483464 ; 988e9fb8H
  00083	c7 45 cc cd af
	87 83		 mov	 DWORD PTR ___encStr$509176[ebp+4], -2088259635 ; 8387afcdH
  0008a	c7 45 d0 8e 87
	cb af		 mov	 DWORD PTR ___encStr$509176[ebp+8], -1345615986 ; afcb878eH
  00091	c7 45 d4 95 85
	9f ca		 mov	 DWORD PTR ___encStr$509176[ebp+12], -895515243 ; ca9f8595H
  00098	c7 45 d8 d7 cc
	ce 99		 mov	 DWORD PTR ___encStr$509176[ebp+16], -1714500393 ; 99ceccd7H
  0009f	c7 45 dc c2 c9
	98 c5		 mov	 DWORD PTR ___encStr$509176[ebp+20], -979842622 ; c598c9c2H
  000a6	c7 45 e0 c8 88
	c4 cf		 mov	 DWORD PTR ___encStr$509176[ebp+24], -809203512 ; cfc488c8H
  000ad	c7 45 e4 89 c3
	ce 8e		 mov	 DWORD PTR ___encStr$509176[ebp+28], -1899052151 ; 8ecec389H
  000b4	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$509176[ebp]
  000b7	c6 45 e8 00	 mov	 BYTE PTR ___encStr$509176[ebp+32], 0
  000bb	59		 pop	 ecx
$LL113@SetLoginSt:
  000bc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c2	83 c0 04	 add	 eax, 4
  000c5	49		 dec	 ecx
  000c6	75 f4		 jne	 SHORT $LL113@SetLoginSt
  000c8	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000cd	8b f8		 mov	 edi, eax
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  000d5	2b 86 38 02 00
	00		 sub	 eax, DWORD PTR [esi+568]
  000db	8d 8e 24 02 00
	00		 lea	 ecx, DWORD PTR [esi+548]
  000e1	50		 push	 eax
  000e2	ff b6 08 02 00
	00		 push	 DWORD PTR [esi+520]
  000e8	ff b6 34 02 00
	00		 push	 DWORD PTR [esi+564]
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000f4	50		 push	 eax
  000f5	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000fe	50		 push	 eax
  000ff	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$509176[ebp]
  00102	50		 push	 eax
  00103	8d 85 bc fc ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$509172[ebp]
  00109	68 0c 03 00 00	 push	 780			; 0000030cH
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA
  00114	83 c4 20	 add	 esp, 32			; 00000020H

; 942  : 
; 943  : 			SP2Packet kPacket( LUPK_LOG );

  00117	68 00 90 00 00	 push	 36864			; 00009000H
  0011c	8d 8d a4 7c ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509326[ebp]
  00122	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00127	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 944  : 			kPacket << "CheckError";  // 로그 파일 타입

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JLPANJNL@CheckError?$AA@
  00130	8d 8d a4 7c ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509326[ebp]
  00136	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PBD@Z ; SP2Packet::operator<<

; 945  : 			kPacket << szErrorLog;

  0013b	8d 85 bc fc ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$509172[ebp]
  00141	50		 push	 eax
  00142	8d 8d a4 7c ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509326[ebp]
  00148	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<

; 946  : 			kPacket << 325;  // 오류번호

  0014d	68 45 01 00 00	 push	 325			; 00000145H
  00152	8d 8d a4 7c ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509326[ebp]
  00158	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 947  : 			kPacket << true; // write db

  0015d	6a 01		 push	 1
  0015f	8d 8d a4 7c ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509326[ebp]
  00165	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 948  : 			P2PNetwork::SendLog(kPacket);

  0016a	8d 85 a4 7c ff
	ff		 lea	 eax, DWORD PTR _kPacket$509326[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendLog

; 949  : 		}

  00176	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0017a	59		 pop	 ecx
  0017b	8d 8d a4 7c ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509326[ebp]
  00181	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
  00186	eb 20		 jmp	 SHORT $LN100@SetLoginSt
$LN101@SetLoginSt:

; 934  : 		{
; 935  : 			// 소켓통신이 안되는 구간이므로 ini 기록하고 나중에 전송.
; 936  : 			Help::SaveClientError( 325, (int) m_eLoginState, timeGetTime() - m_dwConnectPreTime );

  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  0018e	2b 86 38 02 00
	00		 sub	 eax, DWORD PTR [esi+568]
  00194	50		 push	 eax
  00195	ff b6 08 02 00
	00		 push	 DWORD PTR [esi+520]
  0019b	68 45 01 00 00	 push	 325			; 00000145H
  001a0	e8 00 00 00 00	 call	 ?SaveClientError@Help@@YAXHHH@Z ; Help::SaveClientError
  001a5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN100@SetLoginSt:

; 950  : 	}
; 951  : 
; 952  : 	m_eLoginState = eLoginState;

  001a8	8b 45 08	 mov	 eax, DWORD PTR _eLoginState$[ebp]
  001ab	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
$LN105@SetLoginSt:

; 953  : }

  001b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001bb	59		 pop	 ecx
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c1	33 cd		 xor	 ecx, ebp
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	c9		 leave
  001c9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z$0:
  00000	8d 8d a4 7c ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509326[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a a4 7c ff
	ff		 mov	 ecx, DWORD PTR [edx-33628]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetLoginState@CLogin@@QAEXW4LOGIN_STATE@1@@Z ENDP	; CLogin::SetLoginState
PUBLIC	?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 49 92 24
	09		 cmp	 edi, 153391689		; 09249249H
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 1c	 imul	 edi, 28			; 0000001cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buy
_TEXT	ENDS
PUBLIC	??$?0$0BJ@@ioINILoader_e@@QAE@AAY0BJ@$$CBD_N@Z	; ioINILoader_e::ioINILoader_e<25>
EXTRN	__imp_??0ioINILoader@@QAE@PBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$?0$0BJ@@ioINILoader_e@@QAE@AAY0BJ@$$CBD_N@Z
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_b$ = 12						; size = 1
??$?0$0BJ@@ioINILoader_e@@QAE@AAY0BJ@$$CBD_N@Z PROC	; ioINILoader_e::ioINILoader_e<25>, COMDAT
; _this$ = ecx

; 224  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _fn$[ebp]
  0000a	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000c	8d 86 50 03 00
	00		 lea	 eax, DWORD PTR [esi+848]
  00012	84 d2		 test	 dl, dl
  00014	0f 84 6a 04 00
	00		 je	 $LN99@ioINILoade
  0001a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0001d	88 10		 mov	 BYTE PTR [eax], dl
  0001f	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00022	84 d2		 test	 dl, dl
  00024	0f 84 54 04 00
	00		 je	 $LN98@ioINILoade
  0002a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0002d	88 50 01	 mov	 BYTE PTR [eax+1], dl
  00030	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00033	84 d2		 test	 dl, dl
  00035	0f 84 3d 04 00
	00		 je	 $LN97@ioINILoade
  0003b	b3 eb		 mov	 bl, -21			; ffffffebH
  0003d	32 d3		 xor	 dl, bl
  0003f	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00042	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  00045	84 d2		 test	 dl, dl
  00047	0f 84 25 04 00
	00		 je	 $LN96@ioINILoade
  0004d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00050	88 50 03	 mov	 BYTE PTR [eax+3], dl
  00053	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 0e 04 00
	00		 je	 $LN95@ioINILoade
  0005e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00061	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00064	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 f7 03 00
	00		 je	 $LN94@ioINILoade
  0006f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00072	88 50 05	 mov	 BYTE PTR [eax+5], dl
  00075	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 e1 03 00
	00		 je	 $LN93@ioINILoade
  00080	32 d3		 xor	 dl, bl
  00082	88 50 06	 mov	 BYTE PTR [eax+6], dl
  00085	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 cb 03 00
	00		 je	 $LN92@ioINILoade
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00096	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 b4 03 00
	00		 je	 $LN91@ioINILoade
  000a1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a4	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a7	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000aa	84 d2		 test	 dl, dl
  000ac	0f 84 9d 03 00
	00		 je	 $LN90@ioINILoade
  000b2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b5	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b8	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000bb	84 d2		 test	 dl, dl
  000bd	0f 84 87 03 00
	00		 je	 $LN89@ioINILoade
  000c3	32 d3		 xor	 dl, bl
  000c5	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c8	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000cb	84 d2		 test	 dl, dl
  000cd	0f 84 71 03 00
	00		 je	 $LN88@ioINILoade
  000d3	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d6	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000d9	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000dc	84 d2		 test	 dl, dl
  000de	0f 84 5a 03 00
	00		 je	 $LN87@ioINILoade
  000e4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e7	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000ea	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000ed	84 d2		 test	 dl, dl
  000ef	0f 84 43 03 00
	00		 je	 $LN86@ioINILoade
  000f5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f8	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000fb	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000fe	84 d2		 test	 dl, dl
  00100	0f 84 2d 03 00
	00		 je	 $LN85@ioINILoade
  00106	32 d3		 xor	 dl, bl
  00108	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  0010b	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  0010e	84 d2		 test	 dl, dl
  00110	0f 84 17 03 00
	00		 je	 $LN84@ioINILoade
  00116	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00119	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  0011c	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  0011f	84 d2		 test	 dl, dl
  00121	0f 84 00 03 00
	00		 je	 $LN83@ioINILoade
  00127	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012a	88 50 10	 mov	 BYTE PTR [eax+16], dl
  0012d	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00130	84 d2		 test	 dl, dl
  00132	0f 84 e9 02 00
	00		 je	 $LN82@ioINILoade
  00138	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0013b	88 50 11	 mov	 BYTE PTR [eax+17], dl
  0013e	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  00141	84 d2		 test	 dl, dl
  00143	0f 84 d3 02 00
	00		 je	 $LN81@ioINILoade
  00149	32 d3		 xor	 dl, bl
  0014b	88 50 12	 mov	 BYTE PTR [eax+18], dl
  0014e	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  00151	84 d2		 test	 dl, dl
  00153	0f 84 bd 02 00
	00		 je	 $LN80@ioINILoade
  00159	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015c	88 50 13	 mov	 BYTE PTR [eax+19], dl
  0015f	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  00162	84 d2		 test	 dl, dl
  00164	0f 84 a6 02 00
	00		 je	 $LN79@ioINILoade
  0016a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016d	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00170	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00173	84 d2		 test	 dl, dl
  00175	0f 84 8f 02 00
	00		 je	 $LN78@ioINILoade
  0017b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0017e	88 50 15	 mov	 BYTE PTR [eax+21], dl
  00181	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  00184	84 d2		 test	 dl, dl
  00186	0f 84 79 02 00
	00		 je	 $LN77@ioINILoade
  0018c	32 d3		 xor	 dl, bl
  0018e	88 50 16	 mov	 BYTE PTR [eax+22], dl
  00191	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  00194	84 d2		 test	 dl, dl
  00196	0f 84 60 02 00
	00		 je	 $LN76@ioINILoade
  0019c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0019f	88 50 17	 mov	 BYTE PTR [eax+23], dl
  001a2	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  001a5	84 d2		 test	 dl, dl
  001a7	0f 84 46 02 00
	00		 je	 $LN75@ioINILoade
  001ad	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b0	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001b3	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b6	84 d2		 test	 dl, dl
  001b8	0f 84 2c 02 00
	00		 je	 $LN74@ioINILoade
  001be	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c1	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001c4	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c7	84 d2		 test	 dl, dl
  001c9	0f 84 13 02 00
	00		 je	 $LN73@ioINILoade
  001cf	32 d3		 xor	 dl, bl
  001d1	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001d4	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d7	84 d2		 test	 dl, dl
  001d9	0f 84 fa 01 00
	00		 je	 $LN72@ioINILoade
  001df	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e2	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001e5	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e8	84 d2		 test	 dl, dl
  001ea	0f 84 e0 01 00
	00		 je	 $LN71@ioINILoade
  001f0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f3	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f6	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001f9	84 d2		 test	 dl, dl
  001fb	0f 84 c6 01 00
	00		 je	 $LN70@ioINILoade
  00201	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00204	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00207	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  0020a	84 d2		 test	 dl, dl
  0020c	0f 84 ad 01 00
	00		 je	 $LN69@ioINILoade
  00212	32 d3		 xor	 dl, bl
  00214	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00217	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  0021a	84 d2		 test	 dl, dl
  0021c	0f 84 94 01 00
	00		 je	 $LN68@ioINILoade
  00222	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00225	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00228	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  0022b	84 d2		 test	 dl, dl
  0022d	0f 84 7a 01 00
	00		 je	 $LN67@ioINILoade
  00233	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00236	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00239	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  0023c	84 d2		 test	 dl, dl
  0023e	0f 84 60 01 00
	00		 je	 $LN66@ioINILoade
  00244	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00247	88 50 21	 mov	 BYTE PTR [eax+33], dl
  0024a	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  0024d	84 d2		 test	 dl, dl
  0024f	0f 84 47 01 00
	00		 je	 $LN65@ioINILoade
  00255	32 d3		 xor	 dl, bl
  00257	88 50 22	 mov	 BYTE PTR [eax+34], dl
  0025a	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  0025d	84 d2		 test	 dl, dl
  0025f	0f 84 2e 01 00
	00		 je	 $LN64@ioINILoade
  00265	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00268	88 50 23	 mov	 BYTE PTR [eax+35], dl
  0026b	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  0026e	84 d2		 test	 dl, dl
  00270	0f 84 14 01 00
	00		 je	 $LN63@ioINILoade
  00276	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00279	88 50 24	 mov	 BYTE PTR [eax+36], dl
  0027c	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  0027f	84 d2		 test	 dl, dl
  00281	0f 84 fa 00 00
	00		 je	 $LN62@ioINILoade
  00287	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0028a	88 50 25	 mov	 BYTE PTR [eax+37], dl
  0028d	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  00290	84 d2		 test	 dl, dl
  00292	0f 84 e1 00 00
	00		 je	 $LN61@ioINILoade
  00298	32 d3		 xor	 dl, bl
  0029a	88 50 26	 mov	 BYTE PTR [eax+38], dl
  0029d	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  002a0	84 d2		 test	 dl, dl
  002a2	0f 84 c8 00 00
	00		 je	 $LN60@ioINILoade
  002a8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002ab	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002ae	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002b1	84 d2		 test	 dl, dl
  002b3	0f 84 ae 00 00
	00		 je	 $LN59@ioINILoade
  002b9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002bc	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002bf	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002c2	84 d2		 test	 dl, dl
  002c4	0f 84 94 00 00
	00		 je	 $LN58@ioINILoade
  002ca	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002cd	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002d0	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002d3	84 d2		 test	 dl, dl
  002d5	74 7f		 je	 SHORT $LN57@ioINILoade
  002d7	32 d3		 xor	 dl, bl
  002d9	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002dc	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002df	84 d2		 test	 dl, dl
  002e1	74 6a		 je	 SHORT $LN56@ioINILoade
  002e3	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e6	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002e9	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002ec	84 d2		 test	 dl, dl
  002ee	74 54		 je	 SHORT $LN55@ioINILoade
  002f0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002f3	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f6	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002f9	84 d2		 test	 dl, dl
  002fb	74 3e		 je	 SHORT $LN54@ioINILoade
  002fd	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00300	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  00303	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00306	84 d2		 test	 dl, dl
  00308	74 29		 je	 SHORT $LN53@ioINILoade
  0030a	32 d3		 xor	 dl, bl
  0030c	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  0030f	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  00312	84 d2		 test	 dl, dl
  00314	74 14		 je	 SHORT $LN52@ioINILoade
  00316	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00319	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  0031c	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  0031f	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00322	88 48 30	 mov	 BYTE PTR [eax+48], cl
  00325	e9 5d 01 00 00	 jmp	 $LN4@ioINILoade
$LN52@ioINILoade:
  0032a	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  0032e	e9 54 01 00 00	 jmp	 $LN4@ioINILoade
$LN53@ioINILoade:
  00333	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00336	e9 4c 01 00 00	 jmp	 $LN4@ioINILoade
$LN54@ioINILoade:
  0033b	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  0033f	e9 43 01 00 00	 jmp	 $LN4@ioINILoade
$LN55@ioINILoade:
  00344	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00348	e9 3a 01 00 00	 jmp	 $LN4@ioINILoade
$LN56@ioINILoade:
  0034d	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  00351	e9 31 01 00 00	 jmp	 $LN4@ioINILoade
$LN57@ioINILoade:
  00356	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  00359	e9 29 01 00 00	 jmp	 $LN4@ioINILoade
$LN58@ioINILoade:
  0035e	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  00362	e9 20 01 00 00	 jmp	 $LN4@ioINILoade
$LN59@ioINILoade:
  00367	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  0036b	e9 17 01 00 00	 jmp	 $LN4@ioINILoade
$LN60@ioINILoade:
  00370	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  00374	e9 0e 01 00 00	 jmp	 $LN4@ioINILoade
$LN61@ioINILoade:
  00379	88 58 26	 mov	 BYTE PTR [eax+38], bl
  0037c	e9 06 01 00 00	 jmp	 $LN4@ioINILoade
$LN62@ioINILoade:
  00381	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  00385	e9 fd 00 00 00	 jmp	 $LN4@ioINILoade
$LN63@ioINILoade:
  0038a	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  0038e	e9 f4 00 00 00	 jmp	 $LN4@ioINILoade
$LN64@ioINILoade:
  00393	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00397	e9 eb 00 00 00	 jmp	 $LN4@ioINILoade
$LN65@ioINILoade:
  0039c	88 58 22	 mov	 BYTE PTR [eax+34], bl
  0039f	e9 e3 00 00 00	 jmp	 $LN4@ioINILoade
$LN66@ioINILoade:
  003a4	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a8	e9 da 00 00 00	 jmp	 $LN4@ioINILoade
$LN67@ioINILoade:
  003ad	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003b1	e9 d1 00 00 00	 jmp	 $LN4@ioINILoade
$LN68@ioINILoade:
  003b6	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003ba	e9 c8 00 00 00	 jmp	 $LN4@ioINILoade
$LN69@ioINILoade:
  003bf	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003c2	e9 c0 00 00 00	 jmp	 $LN4@ioINILoade
$LN70@ioINILoade:
  003c7	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003cb	e9 b7 00 00 00	 jmp	 $LN4@ioINILoade
$LN71@ioINILoade:
  003d0	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003d4	e9 ae 00 00 00	 jmp	 $LN4@ioINILoade
$LN72@ioINILoade:
  003d9	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003dd	e9 a5 00 00 00	 jmp	 $LN4@ioINILoade
$LN73@ioINILoade:
  003e2	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003e5	e9 9d 00 00 00	 jmp	 $LN4@ioINILoade
$LN74@ioINILoade:
  003ea	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003ee	e9 94 00 00 00	 jmp	 $LN4@ioINILoade
$LN75@ioINILoade:
  003f3	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f7	e9 8b 00 00 00	 jmp	 $LN4@ioINILoade
$LN76@ioINILoade:
  003fc	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  00400	e9 82 00 00 00	 jmp	 $LN4@ioINILoade
$LN77@ioINILoade:
  00405	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00408	eb 7d		 jmp	 SHORT $LN4@ioINILoade
$LN78@ioINILoade:
  0040a	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  0040e	eb 77		 jmp	 SHORT $LN4@ioINILoade
$LN79@ioINILoade:
  00410	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  00414	eb 71		 jmp	 SHORT $LN4@ioINILoade
$LN80@ioINILoade:
  00416	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  0041a	eb 6b		 jmp	 SHORT $LN4@ioINILoade
$LN81@ioINILoade:
  0041c	88 58 12	 mov	 BYTE PTR [eax+18], bl
  0041f	eb 66		 jmp	 SHORT $LN4@ioINILoade
$LN82@ioINILoade:
  00421	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  00425	eb 60		 jmp	 SHORT $LN4@ioINILoade
$LN83@ioINILoade:
  00427	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  0042b	eb 5a		 jmp	 SHORT $LN4@ioINILoade
$LN84@ioINILoade:
  0042d	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  00431	eb 54		 jmp	 SHORT $LN4@ioINILoade
$LN85@ioINILoade:
  00433	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00436	eb 4f		 jmp	 SHORT $LN4@ioINILoade
$LN86@ioINILoade:
  00438	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  0043c	eb 49		 jmp	 SHORT $LN4@ioINILoade
$LN87@ioINILoade:
  0043e	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  00442	eb 43		 jmp	 SHORT $LN4@ioINILoade
$LN88@ioINILoade:
  00444	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00448	eb 3d		 jmp	 SHORT $LN4@ioINILoade
$LN89@ioINILoade:
  0044a	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  0044d	eb 38		 jmp	 SHORT $LN4@ioINILoade
$LN90@ioINILoade:
  0044f	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  00453	eb 32		 jmp	 SHORT $LN4@ioINILoade
$LN91@ioINILoade:
  00455	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  00459	eb 2c		 jmp	 SHORT $LN4@ioINILoade
$LN92@ioINILoade:
  0045b	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  0045f	eb 26		 jmp	 SHORT $LN4@ioINILoade
$LN93@ioINILoade:
  00461	88 58 06	 mov	 BYTE PTR [eax+6], bl
  00464	eb 21		 jmp	 SHORT $LN4@ioINILoade
$LN94@ioINILoade:
  00466	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  0046a	eb 1b		 jmp	 SHORT $LN4@ioINILoade
$LN95@ioINILoade:
  0046c	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  00470	eb 15		 jmp	 SHORT $LN4@ioINILoade
$LN96@ioINILoade:
  00472	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00476	eb 0f		 jmp	 SHORT $LN4@ioINILoade
$LN97@ioINILoade:
  00478	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  0047c	eb 09		 jmp	 SHORT $LN4@ioINILoade
$LN98@ioINILoade:
  0047e	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  00482	eb 03		 jmp	 SHORT $LN4@ioINILoade
$LN99@ioINILoade:
  00484	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN4@ioINILoade:
  00487	6a 06		 push	 6
  00489	8b c8		 mov	 ecx, eax
  0048b	c6 40 18 00	 mov	 BYTE PTR [eax+24], 0
  0048f	5a		 pop	 edx
$LL107@ioINILoade:
  00490	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00496	83 c1 04	 add	 ecx, 4
  00499	4a		 dec	 edx
  0049a	75 f4		 jne	 SHORT $LL107@ioINILoade
  0049c	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0049f	8b ce		 mov	 ecx, esi
  004a1	50		 push	 eax
  004a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z

; 225  : 	}

  004a8	8b c6		 mov	 eax, esi
  004aa	5e		 pop	 esi
  004ab	5b		 pop	 ebx
  004ac	5d		 pop	 ebp
  004ad	c2 08 00	 ret	 8
??$?0$0BJ@@ioINILoader_e@@QAE@AAY0BJ@$$CBD_N@Z ENDP	; ioINILoader_e::ioINILoader_e<25>
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
_TEXT	ENDS
PUBLIC	?IsExitProgram@ioApplication@@QBE_NXZ		; ioApplication::IsExitProgram
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
;	COMDAT ?IsExitProgram@ioApplication@@QBE_NXZ
_TEXT	SEGMENT
_value$511684 = -1					; size = 1
?IsExitProgram@ioApplication@@QBE_NXZ PROC		; ioApplication::IsExitProgram, COMDAT
; _this$ = ecx

; 680  : 	bool IsExitProgram() const { return m_bProgramExit; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$511684[ebp]
  00007	50		 push	 eax
  00008	81 c1 3c 05 00
	00		 add	 ecx, 1340		; 0000053cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$511684[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsExitProgram@ioApplication@@QBE_NXZ ENDP		; ioApplication::IsExitProgram
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??_C@_0BC@OPDAJLDI@CLogin?3?3LoginLoop?$AA@	; `string'
PUBLIC	_szKey$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z	; CLogin::LoginLoop
EXTRN	__imp_?SafeSprintf@@YAXPADHPBD11H1@Z:PROC
EXTRN	__imp_?SafeSprintf@@YAXPADHPBD1@Z:PROC
EXTRN	?GetAllProcessName@Help@@YA_NPADH@Z:PROC	; Help::GetAllProcessName
EXTRN	__imp__SleepEx@8:PROC
EXTRN	?IsNetworkPlaying@P2PNetwork@@YA_NXZ:PROC	; P2PNetwork::IsNetworkPlaying
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__PeekMessageA@20:PROC
;	COMDAT ??_C@_0BC@OPDAJLDI@CLogin?3?3LoginLoop?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
??_C@_0BC@OPDAJLDI@CLogin?3?3LoginLoop?$AA@ DB 'CLogin::LoginLoop', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$3
__ehfuncinfo$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z
_TEXT	SEGMENT
_msg$ = -34164						; size = 28
$T511894 = -34136					; size = 16
$T511893 = -34136					; size = 16
$T511892 = -34136					; size = 16
_dwPastTime$507108 = -34120				; size = 4
_szKey$GSCopy$ = -34116					; size = 4
$T511916 = -34116					; size = 4
_value$511926 = -34109					; size = 1
_value$511909 = -34109					; size = 1
_kPacket$507125 = -34108				; size = 32792
_szErrorLog$507124 = -1316				; size = 780
_szAllProcessName$507123 = -536				; size = 520
_szAllProcessName$507118 = -536				; size = 520
_szAllProcessName$507114 = -536				; size = 520
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_szKey$ = 8						; size = 4
?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z PROC	; CLogin::LoginLoop, COMDAT
; _this$ = ecx

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 68 85 00 00	 mov	 eax, 34152		; 00008568H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 45 08	 mov	 eax, DWORD PTR _szKey$[ebp]

; 293  : 	MSG msg;
; 294  : 	m_dwConnectPreTime = timeGetTime();

  00035	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__timeGetTime@0
  0003b	8b f1		 mov	 esi, ecx

; 343  : 			{
; 344  : 				SendMsgToAutoUpgrade(WM_MY_MSG_C_ERROR);

  0003d	89 85 bc 7a ff
	ff		 mov	 DWORD PTR _szKey$GSCopy$[ebp], eax
  00043	ff d7		 call	 edi
  00045	89 86 38 02 00
	00		 mov	 DWORD PTR [esi+568], eax
  0004b	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00050	8d 88 3c 05 00
	00		 lea	 ecx, DWORD PTR [eax+1340]
  00056	8d 85 c3 7a ff
	ff		 lea	 eax, DWORD PTR _value$511909[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00062	33 db		 xor	 ebx, ebx
  00064	e9 01 01 00 00	 jmp	 $LN42@LoginLoop
$LL16@LoginLoop:

; 298  : 	{
; 299  : 		if( PeekMessage( &msg, NULL, 0, 0, PM_NOREMOVE ) )

  00069	53		 push	 ebx
  0006a	53		 push	 ebx
  0006b	53		 push	 ebx
  0006c	53		 push	 ebx
  0006d	8d 85 8c 7a ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0007a	85 c0		 test	 eax, eax
  0007c	74 37		 je	 SHORT $LN14@LoginLoop

; 300  : 		{
; 301  : 			if( !GetMessage( &msg, NULL, 0, 0 ) )

  0007e	53		 push	 ebx
  0007f	53		 push	 ebx
  00080	53		 push	 ebx
  00081	8d 85 8c 7a ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessageA@16
  0008e	85 c0		 test	 eax, eax
  00090	0f 84 e0 00 00
	00		 je	 $LN15@LoginLoop

; 302  : 			{
; 303  : 				break;
; 304  : 			}
; 305  : 
; 306  : 			TranslateMessage( &msg );

  00096	8d 85 8c 7a ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateMessage@4

; 307  : 			DispatchMessage( &msg );

  000a3	8d 85 8c 7a ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  000a9	50		 push	 eax
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4

; 308  : 			continue;

  000b0	e9 9e 00 00 00	 jmp	 $LN38@LoginLoop
$LN14@LoginLoop:

; 309  : 		}
; 310  : 		else
; 311  : 		{
; 312  : 			switch(m_eLoginState)

  000b5	8b 86 08 02 00
	00		 mov	 eax, DWORD PTR [esi+520]
  000bb	83 e8 03	 sub	 eax, 3
  000be	0f 84 b6 01 00
	00		 je	 $LN9@LoginLoop
  000c4	48		 dec	 eax
  000c5	0f 84 af 01 00
	00		 je	 $LN9@LoginLoop
  000cb	48		 dec	 eax
  000cc	0f 84 df 03 00
	00		 je	 $LN7@LoginLoop

; 320  : 			}
; 321  : 
; 322  : 			DWORD dwPastTime = timeGetTime() - m_dwConnectPreTime;

  000d2	ff d7		 call	 edi
  000d4	2b 86 38 02 00
	00		 sub	 eax, DWORD PTR [esi+568]
  000da	89 85 b8 7a ff
	ff		 mov	 DWORD PTR _dwPastTime$507108[ebp], eax

; 323  : 		
; 324  : 			enum { MAX_WAIT_MS = 600000, }; // 10분
; 325  : 
; 326  : 			if( !g_App.IsTCPConnected() && ( dwPastTime >= MAX_WAIT_MS ) ) // TCP 연결 실패

  000e0	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  000e5	8b c8		 mov	 ecx, eax
  000e7	e8 00 00 00 00	 call	 ?IsTCPConnected@ioApplication@@QBE_NXZ ; ioApplication::IsTCPConnected
  000ec	84 c0		 test	 al, al
  000ee	b8 c0 27 09 00	 mov	 eax, 600000		; 000927c0H
  000f3	75 0c		 jne	 SHORT $LN6@LoginLoop
  000f5	39 85 b8 7a ff
	ff		 cmp	 DWORD PTR _dwPastTime$507108[ebp], eax
  000fb	0f 83 b1 00 00
	00		 jae	 $LN36@LoginLoop
$LN6@LoginLoop:

; 339  : 				return false;
; 340  : 			}
; 341  : 
; 342  : 			if( ( m_eLoginState == LS_SENT_MSG ) && ( dwPastTime >= MAX_WAIT_MS ) ) // TCP 응답 못 받음.

  00101	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
  00107	83 f9 01	 cmp	 ecx, 1
  0010a	75 0c		 jne	 SHORT $LN5@LoginLoop
  0010c	39 85 b8 7a ff
	ff		 cmp	 DWORD PTR _dwPastTime$507108[ebp], eax
  00112	0f 83 69 01 00
	00		 jae	 $LN37@LoginLoop
$LN5@LoginLoop:

; 356  : 			}
; 357  : 
; 358  : 			if( ( ( m_eLoginState == LS_SENT_UDP_MSG ) && ( dwPastTime >= MAX_WAIT_MS ) ) || !P2PNetwork::IsNetworkPlaying()  ) // UDP 실패

  00118	83 f9 02	 cmp	 ecx, 2
  0011b	75 0c		 jne	 SHORT $LN2@LoginLoop
  0011d	39 85 b8 7a ff
	ff		 cmp	 DWORD PTR _dwPastTime$507108[ebp], eax
  00123	0f 83 e5 01 00
	00		 jae	 $LN3@LoginLoop
$LN2@LoginLoop:
  00129	e8 00 00 00 00	 call	 ?IsNetworkPlaying@P2PNetwork@@YA_NXZ ; P2PNetwork::IsNetworkPlaying
  0012e	84 c0		 test	 al, al
  00130	0f 84 d8 01 00
	00		 je	 $LN3@LoginLoop

; 377  : 			}
; 378  : 
; 379  : 			SendUDPMsg();

  00136	8b ce		 mov	 ecx, esi
  00138	e8 00 00 00 00	 call	 ?SendUDPMsg@CLogin@@IAEXXZ ; CLogin::SendUDPMsg

; 380  : 			SendLogin(szKey);

  0013d	ff b5 bc 7a ff
	ff		 push	 DWORD PTR _szKey$GSCopy$[ebp]
  00143	8b ce		 mov	 ecx, esi
  00145	e8 00 00 00 00	 call	 ?SendLogin@CLogin@@IAEXABVioHashString@@@Z ; CLogin::SendLogin

; 381  : 		}
; 382  : 
; 383  : 		::SleepEx(1, FALSE);

  0014a	53		 push	 ebx
  0014b	6a 01		 push	 1
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SleepEx@8
$LN38@LoginLoop:

; 295  : 
; 296  : 	// 중간에 다운으로 프로그램이 종료되야하는 상황에서도 계속 루프가 돌아서.. 무한루프대신에 살아있는지로 체크
; 297  : 	while( !g_App.IsExitProgram() )

  00153	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00158	8d 8d c3 7a ff
	ff		 lea	 ecx, DWORD PTR _value$511909[ebp]
  0015e	51		 push	 ecx
  0015f	8d 88 3c 05 00
	00		 lea	 ecx, DWORD PTR [eax+1340]
  00165	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
$LN42@LoginLoop:
  0016a	38 9d c3 7a ff
	ff		 cmp	 BYTE PTR _value$511909[ebp], bl
  00170	0f 84 f3 fe ff
	ff		 je	 $LL16@LoginLoop
$LN15@LoginLoop:

; 384  : 	}
; 385  : 
; 386  : 	if( g_App.IsExitProgram() )

  00176	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  0017b	8d 8d c3 7a ff
	ff		 lea	 ecx, DWORD PTR _value$511926[ebp]
  00181	51		 push	 ecx
  00182	8d 88 3c 05 00
	00		 lea	 ecx, DWORD PTR [eax+1340]
  00188	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  0018d	38 9d c3 7a ff
	ff		 cmp	 BYTE PTR _value$511926[ebp], bl
  00193	0f 94 c0	 sete	 al
$LN1@LoginLoop:

; 387  : 		return false;
; 388  : 
; 389  : 	return true;
; 390  : }

  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a7	33 cd		 xor	 ecx, ebp
  001a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ae	c9		 leave
  001af	c2 04 00	 ret	 4
$LN36@LoginLoop:

; 327  : 			{
; 328  : 				SendMsgToAutoUpgrade(WM_MY_MSG_C_ERROR);

  001b2	68 2f 05 00 00	 push	 1327			; 0000052fH
  001b7	8b ce		 mov	 ecx, esi
  001b9	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 329  : 				Setting::Initialize("error");

  001be	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  001c3	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511892[ebp]
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  001cf	8d 85 a8 7a ff
	ff		 lea	 eax, DWORD PTR $T511892[ebp]
  001d5	50		 push	 eax
  001d6	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  001d9	e8 00 00 00 00	 call	 ?Initialize@Setting@@SAXABVioHashString@@@Z ; Setting::Initialize
  001de	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001e2	59		 pop	 ecx
  001e3	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511892[ebp]
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 330  : 				g_bHappenError = true;
; 331  : 				g_iErrorNumber = 303; // 오류번호
; 332  : 
; 333  : 				char szAllProcessName[MAX_PATH*2]="";

  001ef	68 07 02 00 00	 push	 519			; 00000207H
  001f4	8d 85 e9 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507114[ebp+1]
  001fa	53		 push	 ebx
  001fb	50		 push	 eax
  001fc	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bHappenError@@3_NA, 1 ; g_bHappenError
  00203	c7 05 00 00 00
	00 2f 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 303 ; g_iErrorNumber, 0000012fH
  0020d	88 9d e8 fd ff
	ff		 mov	 BYTE PTR _szAllProcessName$507114[ebp], bl
  00213	e8 00 00 00 00	 call	 _memset

; 334  : 				Help::GetAllProcessName( szAllProcessName, sizeof( szAllProcessName ) );

  00218	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507114[ebp]
  0021e	68 08 02 00 00	 push	 520			; 00000208H
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ?GetAllProcessName@Help@@YA_NPADH@Z ; Help::GetAllProcessName
  00229	83 c4 14	 add	 esp, 20			; 00000014H

; 335  : 				SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(1), szAllProcessName );

  0022c	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507114[ebp]
  00232	50		 push	 eax
  00233	53		 push	 ebx
  00234	6a 01		 push	 1
$LN43@LoginLoop:
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OPDAJLDI@CLogin?3?3LoginLoop?$AA@
  00240	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00246	8b c8		 mov	 ecx, eax
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0024e	50		 push	 eax
  0024f	68 00 08 00 00	 push	 2048			; 00000800H
  00254	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  00259	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBD1@Z
  0025f	83 c4 10	 add	 esp, 16			; 00000010H

; 336  : 
; 337  : 				// 소켓통신이 안되는 구간이므로 ini 기록하고 나중에 전송.
; 338  : 				Help::SaveClientError( g_iErrorNumber, timeGetTime() - m_dwConnectPreTime, 0 );

  00262	53		 push	 ebx
  00263	ff d7		 call	 edi
  00265	2b 86 38 02 00
	00		 sub	 eax, DWORD PTR [esi+568]
  0026b	50		 push	 eax
  0026c	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iErrorNumber@@3HA ; g_iErrorNumber
  00272	e8 00 00 00 00	 call	 ?SaveClientError@Help@@YAXHHH@Z ; Help::SaveClientError
  00277	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@LoginLoop:

; 313  : 			{
; 314  : 			case LS_RECEIVE_MSG_ERROR:
; 315  : 				return false;

  0027a	32 c0		 xor	 al, al
  0027c	e9 15 ff ff ff	 jmp	 $LN1@LoginLoop
$LN37@LoginLoop:

; 343  : 			{
; 344  : 				SendMsgToAutoUpgrade(WM_MY_MSG_C_ERROR);

  00281	68 2f 05 00 00	 push	 1327			; 0000052fH
  00286	8b ce		 mov	 ecx, esi
  00288	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 345  : 				Setting::Initialize("error");

  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  00292	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511893[ebp]
  00298	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0029e	8d 85 a8 7a ff
	ff		 lea	 eax, DWORD PTR $T511893[ebp]
  002a4	50		 push	 eax
  002a5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  002ac	e8 00 00 00 00	 call	 ?Initialize@Setting@@SAXABVioHashString@@@Z ; Setting::Initialize
  002b1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002b5	59		 pop	 ecx
  002b6	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511893[ebp]
  002bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 346  : 				g_bHappenError = true;
; 347  : 				g_iErrorNumber = 324; // 오류번호
; 348  : 
; 349  : 				char szAllProcessName[MAX_PATH*2]="";

  002c2	68 07 02 00 00	 push	 519			; 00000207H
  002c7	8d 85 e9 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507118[ebp+1]
  002cd	53		 push	 ebx
  002ce	50		 push	 eax
  002cf	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bHappenError@@3_NA, 1 ; g_bHappenError
  002d6	c7 05 00 00 00
	00 44 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 324 ; g_iErrorNumber, 00000144H
  002e0	88 9d e8 fd ff
	ff		 mov	 BYTE PTR _szAllProcessName$507118[ebp], bl
  002e6	e8 00 00 00 00	 call	 _memset

; 350  : 				Help::GetAllProcessName( szAllProcessName, sizeof( szAllProcessName ) );

  002eb	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507118[ebp]
  002f1	68 08 02 00 00	 push	 520			; 00000208H
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 ?GetAllProcessName@Help@@YA_NPADH@Z ; Help::GetAllProcessName
  002fc	83 c4 14	 add	 esp, 20			; 00000014H

; 351  : 				SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(4), szAllProcessName );

  002ff	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507118[ebp]
  00305	50		 push	 eax
  00306	53		 push	 ebx
  00307	6a 04		 push	 4

; 352  : 
; 353  : 				// 소켓통신이 안되는 구간이므로 ini 기록하고 나중에 전송.
; 354  : 				Help::SaveClientError( g_iErrorNumber, timeGetTime() - m_dwConnectPreTime, 0 );
; 355  : 				return false;

  00309	e9 28 ff ff ff	 jmp	 $LN43@LoginLoop
$LN3@LoginLoop:

; 359  : 			{
; 360  : 				SendMsgToAutoUpgrade(WM_MY_MSG_C_ERROR);

  0030e	68 2f 05 00 00	 push	 1327			; 0000052fH
  00313	8b ce		 mov	 ecx, esi
  00315	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 361  : 				Setting::Initialize("error");

  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  0031f	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511894[ebp]
  00325	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0032b	6a 02		 push	 2
  0032d	5f		 pop	 edi
  0032e	8d 85 a8 7a ff
	ff		 lea	 eax, DWORD PTR $T511894[ebp]
  00334	50		 push	 eax
  00335	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00338	e8 00 00 00 00	 call	 ?Initialize@Setting@@SAXABVioHashString@@@Z ; Setting::Initialize
  0033d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00341	59		 pop	 ecx
  00342	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511894[ebp]
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 362  : 				g_bHappenError = true;
; 363  : 				g_iErrorNumber = 304;
; 364  : 				char szAllProcessName[MAX_PATH*2]="";

  0034e	68 07 02 00 00	 push	 519			; 00000207H
  00353	8d 85 e9 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507123[ebp+1]
  00359	53		 push	 ebx
  0035a	50		 push	 eax
  0035b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bHappenError@@3_NA, 1 ; g_bHappenError
  00362	c7 05 00 00 00
	00 30 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 304 ; g_iErrorNumber, 00000130H
  0036c	88 9d e8 fd ff
	ff		 mov	 BYTE PTR _szAllProcessName$507123[ebp], bl
  00372	e8 00 00 00 00	 call	 _memset

; 365  : 				Help::GetAllProcessName( szAllProcessName, sizeof( szAllProcessName ) );

  00377	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507123[ebp]
  0037d	68 08 02 00 00	 push	 520			; 00000208H
  00382	50		 push	 eax
  00383	e8 00 00 00 00	 call	 ?GetAllProcessName@Help@@YA_NPADH@Z ; Help::GetAllProcessName
  00388	83 c4 14	 add	 esp, 20			; 00000014H

; 366  : 				SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(2), szAllProcessName );

  0038b	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507123[ebp]
  00391	50		 push	 eax
  00392	53		 push	 ebx
  00393	57		 push	 edi
  00394	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0039a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0039f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OPDAJLDI@CLogin?3?3LoginLoop?$AA@
  003a4	ff d7		 call	 edi
  003a6	8b c8		 mov	 ecx, eax
  003a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  003ae	50		 push	 eax
  003af	68 00 08 00 00	 push	 2048			; 00000800H
  003b4	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  003b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBD1@Z

; 367  : 				char szErrorLog[MAX_PATH*3]="";

  003bf	68 0b 03 00 00	 push	 779			; 0000030bH
  003c4	8d 85 dd fa ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$507124[ebp+1]
  003ca	53		 push	 ebx
  003cb	50		 push	 eax
  003cc	88 9d dc fa ff
	ff		 mov	 BYTE PTR _szErrorLog$507124[ebp], bl
  003d2	e8 00 00 00 00	 call	 _memset
  003d7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 368  : 				SafeSprintf(szErrorLog, sizeof(szErrorLog), STR(3), g_MyInfo.GetPublicID().c_str(), m_szMyIP.c_str(), m_iCheckCnt, szAllProcessName );

  003da	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  003df	89 85 bc 7a ff
	ff		 mov	 DWORD PTR $T511916[ebp], eax
  003e5	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szAllProcessName$507123[ebp]
  003eb	50		 push	 eax
  003ec	ff b6 34 02 00
	00		 push	 DWORD PTR [esi+564]
  003f2	8d 8e 24 02 00
	00		 lea	 ecx, DWORD PTR [esi+548]
  003f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  003fe	8b 8d bc 7a ff
	ff		 mov	 ecx, DWORD PTR $T511916[ebp]
  00404	50		 push	 eax
  00405	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00408	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0040e	50		 push	 eax
  0040f	53		 push	 ebx
  00410	6a 03		 push	 3
  00412	5e		 pop	 esi
  00413	56		 push	 esi
  00414	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00419	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OPDAJLDI@CLogin?3?3LoginLoop?$AA@
  0041e	ff d7		 call	 edi
  00420	8b c8		 mov	 ecx, eax
  00422	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00428	50		 push	 eax
  00429	8d 85 dc fa ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$507124[ebp]
  0042f	68 0c 03 00 00	 push	 780			; 0000030cH
  00434	50		 push	 eax
  00435	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBD11H1@Z
  0043b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 369  : 				SP2Packet kPacket( LUPK_LOG );

  0043e	68 00 90 00 00	 push	 36864			; 00009000H
  00443	8d 8d c4 7a ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507125[ebp]
  00449	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 370  : 				kPacket << "CheckError";  // 로그 파일 타입

  0044e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JLPANJNL@CheckError?$AA@
  00453	8d 8d c4 7a ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507125[ebp]
  00459	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0045c	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PBD@Z ; SP2Packet::operator<<

; 371  : 				kPacket << szErrorLog;

  00461	8d 85 dc fa ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$507124[ebp]
  00467	50		 push	 eax
  00468	8d 8d c4 7a ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507125[ebp]
  0046e	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<

; 372  : 				kPacket << 304;  // 오류번호

  00473	68 30 01 00 00	 push	 304			; 00000130H
  00478	8d 8d c4 7a ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507125[ebp]
  0047e	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 373  : 				kPacket << true; // write db

  00483	6a 01		 push	 1
  00485	8d 8d c4 7a ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507125[ebp]
  0048b	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 374  : 				P2PNetwork::SendLog(kPacket);

  00490	8d 85 c4 7a ff
	ff		 lea	 eax, DWORD PTR _kPacket$507125[ebp]
  00496	50		 push	 eax
  00497	e8 00 00 00 00	 call	 ?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendLog

; 375  : 
; 376  : 				return false;

  0049c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  004a0	59		 pop	 ecx
  004a1	8d 8d c4 7a ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507125[ebp]
  004a7	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
  004ac	e9 c9 fd ff ff	 jmp	 $LN9@LoginLoop
$LN7@LoginLoop:

; 316  : 			case LS_USER_CLICK_EXIT:
; 317  : 				return false;
; 318  : 			case LS_RECEIVE_MSG_NORMAL:
; 319  : 				return true;

  004b1	b0 01		 mov	 al, 1
  004b3	e9 de fc ff ff	 jmp	 $LN1@LoginLoop
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$0:
  00000	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511892[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$1:
  0000c	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511893[ebp]
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$2:
  00018	8d 8d a8 7a ff
	ff		 lea	 ecx, DWORD PTR $T511894[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z$3:
  00024	8d 8d c4 7a ff
	ff		 lea	 ecx, DWORD PTR _kPacket$507125[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z:
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 8a 88 7a ff
	ff		 mov	 ecx, DWORD PTR [edx-34168]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z
  00052	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoginLoop@CLogin@@QAE_NABVioHashString@@@Z ENDP	; CLogin::LoginLoop
PUBLIC	??_C@_0CB@EKOBKKJJ@Software?2Mozilla?2Mozilla?5Firefox@ ; `string'
PUBLIC	??_C@_0P@IANJKHJL@CurrentVersion?$AA@		; `string'
PUBLIC	??_C@_0EC@MNJHMJHI@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_01DNKMNLPK@?$HM?$AA@			; `string'
PUBLIC	??_C@_0CF@JGKEMPBN@Software?2Microsoft?2Internet?5Expl@ ; `string'
PUBLIC	??_C@_07NGFJPNPN@Version?$AA@			; `string'
PUBLIC	??_C@_06OIKPMLAG@PCInfo?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SendPCInfo@CLogin@@IAEXXZ			; CLogin::SendPCInfo
EXTRN	?Width@Setting@@SAHXZ:PROC			; Setting::Width
EXTRN	?Height@Setting@@SAHXZ:PROC			; Setting::Height
EXTRN	?RegReadString@Help@@YA_NPAUHKEY__@@PBD11PADK@Z:PROC ; Help::RegReadString
EXTRN	__imp_?SaveInt@ioINILoader@@QAEXPBDH@Z:PROC
EXTRN	?GetGradeLevel@ioMyInfo@@QAEHXZ:PROC		; ioMyInfo::GetGradeLevel
EXTRN	?CreateDefaultSettingINI@Help@@YAXXZ:PROC	; Help::CreateDefaultSettingINI
;	COMDAT ??_C@_0CB@EKOBKKJJ@Software?2Mozilla?2Mozilla?5Firefox@
CONST	SEGMENT
??_C@_0CB@EKOBKKJJ@Software?2Mozilla?2Mozilla?5Firefox@ DB 'Software\Mozi'
	DB	'lla\Mozilla Firefox', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IANJKHJL@CurrentVersion?$AA@
CONST	SEGMENT
??_C@_0P@IANJKHJL@CurrentVersion?$AA@ DB 'CurrentVersion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@MNJHMJHI@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0EC@MNJHMJHI@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Uninstall\Google Chrome', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01DNKMNLPK@?$HM?$AA@
CONST	SEGMENT
??_C@_01DNKMNLPK@?$HM?$AA@ DB '|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JGKEMPBN@Software?2Microsoft?2Internet?5Expl@
CONST	SEGMENT
??_C@_0CF@JGKEMPBN@Software?2Microsoft?2Internet?5Expl@ DB 'Software\Micr'
	DB	'osoft\Internet Explorer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGFJPNPN@Version?$AA@
CONST	SEGMENT
??_C@_07NGFJPNPN@Version?$AA@ DB 'Version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIKPMLAG@PCInfo?$AA@
CONST	SEGMENT
??_C@_06OIKPMLAG@PCInfo?$AA@ DB 'PCInfo', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendPCInfo@CLogin@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendPCInfo@CLogin@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SendPCInfo@CLogin@@IAEXXZ$1
__ehfuncinfo$?SendPCInfo@CLogin@@IAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SendPCInfo@CLogin@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SendPCInfo@CLogin@@IAEXXZ
_TEXT	SEGMENT
$T512463 = -34776					; size = 4
_kPacket$ = -34772					; size = 32792
_kIniLoder$ = -1980					; size = 912
_szDesktopWH$ = -1068					; size = 260
_szGameWH$ = -808					; size = 260
_szWebVersion$ = -548					; size = 260
_szTotalWebVersion$ = -288				; size = 260
__k$512329 = -28					; size = 7
__t$512253 = -28					; size = 8
___encStr$509576 = -28					; size = 6
___encStr$509423 = -28					; size = 6
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendPCInfo@CLogin@@IAEXXZ PROC				; CLogin::SendPCInfo, COMDAT
; _this$ = ecx

; 1044 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SendPCInfo@CLogin@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 cc 87 00 00	 mov	 eax, 34764		; 000087ccH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1045 : 	enum 
; 1046 : 	{
; 1047 : 		SEND_NONE   = 0,
; 1048 : 		SEND_FIRST  = 1,
; 1049 : 		SEND_SECOND = 2,
; 1050 : 		SEND_GRADE_LEVEL = 15, 
; 1051 : 	};
; 1052 : 
; 1053 : 	// check
; 1054 : 	Help::CreateDefaultSettingINI();

  00032	e8 00 00 00 00	 call	 ?CreateDefaultSettingINI@Help@@YAXXZ ; Help::CreateDefaultSettingINI

; 1055 : 	ioINILoader_e kIniLoder("Save\\default\\setting.ini",false);

  00037	33 db		 xor	 ebx, ebx
  00039	6a 06		 push	 6
  0003b	c7 85 94 fb ff
	ff be 8d 9d 8f	 mov	 DWORD PTR _kIniLoder$[ebp+848], -1885499970 ; 8f9d8dbeH
  00045	c7 85 98 fb ff
	ff b1 88 8e 8c	 mov	 DWORD PTR _kIniLoder$[ebp+852], -1936815951 ; 8c8e88b1H
  0004f	c7 85 9c fb ff
	ff 8c 99 87 9e	 mov	 DWORD PTR _kIniLoder$[ebp+856], -1635280500 ; 9e87998cH
  00059	c7 85 a0 fb ff
	ff b1 9f 8e 9e	 mov	 DWORD PTR _kIniLoder$[ebp+860], -1634820175 ; 9e8e9fb1H
  00063	c7 85 a4 fb ff
	ff 99 85 85 8d	 mov	 DWORD PTR _kIniLoder$[ebp+864], -1920629351 ; 8d858599H
  0006d	c7 85 a8 fb ff
	ff c3 85 85 83	 mov	 DWORD PTR _kIniLoder$[ebp+868], -2088401469 ; 838585c3H
  00077	8d 85 94 fb ff
	ff		 lea	 eax, DWORD PTR _kIniLoder$[ebp+848]
  0007d	88 9d ac fb ff
	ff		 mov	 BYTE PTR _kIniLoder$[ebp+872], bl
  00083	59		 pop	 ecx
$LL314@SendPCInfo:
  00084	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0008a	83 c0 04	 add	 eax, 4
  0008d	49		 dec	 ecx
  0008e	75 f4		 jne	 SHORT $LL314@SendPCInfo
  00090	53		 push	 ebx
  00091	8d 85 94 fb ff
	ff		 lea	 eax, DWORD PTR _kIniLoder$[ebp+848]
  00097	50		 push	 eax
  00098	8d 8d 44 f8 ff
	ff		 lea	 ecx, DWORD PTR _kIniLoder$[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z

; 1056 : 	kIniLoder.SetTitle_e("Setting");

  000a4	be ed ec eb ea	 mov	 esi, -353637139		; eaebecedH
  000a9	6a 04		 push	 4
  000ab	c7 45 e4 be 89
	9f 9e		 mov	 DWORD PTR __t$512253[ebp], -1633711682 ; 9e9f89beH
  000b2	31 75 e4	 xor	 DWORD PTR __t$512253[ebp], esi
  000b5	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000b8	c7 45 e8 84 82
	8c 00		 mov	 DWORD PTR __t$512253[ebp+4], 9208452 ; 008c8284H
  000bf	5f		 pop	 edi
$LL417@SendPCInfo:
  000c0	8b c7		 mov	 eax, edi
  000c2	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000c7	79 05		 jns	 SHORT $LN591@SendPCInfo
  000c9	48		 dec	 eax
  000ca	83 c8 fc	 or	 eax, -4			; fffffffcH
  000cd	40		 inc	 eax
$LN591@SendPCInfo:
  000ce	b1 ed		 mov	 cl, -19			; ffffffedH
  000d0	2a c8		 sub	 cl, al
  000d2	30 4c 3d e4	 xor	 BYTE PTR __t$512253[ebp+edi], cl
  000d6	47		 inc	 edi
  000d7	83 ff 07	 cmp	 edi, 7
  000da	7c e4		 jl	 SHORT $LL417@SendPCInfo
  000dc	8d 45 e4	 lea	 eax, DWORD PTR __t$512253[ebp]
  000df	50		 push	 eax
  000e0	8d 8d 44 f8 ff
	ff		 lea	 ecx, DWORD PTR _kIniLoder$[ebp]
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 1057 : 	int iSendType = kIniLoder.LoadInt_e("PCInfo", SEND_NONE );

  000ec	c7 45 e4 bd af
	a2 84		 mov	 DWORD PTR __k$512329[ebp], -2069712963 ; 84a2afbdH
  000f3	31 75 e4	 xor	 DWORD PTR __k$512329[ebp], esi
  000f6	6a 04		 push	 4
  000f8	66 c7 45 e8 8b
	83		 mov	 WORD PTR __k$512329[ebp+4], 33675 ; 0000838bH
  000fe	88 5d ea	 mov	 BYTE PTR __k$512329[ebp+6], bl
  00101	5e		 pop	 esi
$LL523@SendPCInfo:
  00102	8b c6		 mov	 eax, esi
  00104	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00109	79 05		 jns	 SHORT $LN592@SendPCInfo
  0010b	48		 dec	 eax
  0010c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0010f	40		 inc	 eax
$LN592@SendPCInfo:
  00110	b1 ed		 mov	 cl, -19			; ffffffedH
  00112	2a c8		 sub	 cl, al
  00114	30 4c 35 e4	 xor	 BYTE PTR __k$512329[ebp+esi], cl
  00118	46		 inc	 esi
  00119	83 fe 06	 cmp	 esi, 6
  0011c	7c e4		 jl	 SHORT $LL523@SendPCInfo
  0011e	53		 push	 ebx
  0011f	8d 45 e4	 lea	 eax, DWORD PTR __k$512329[ebp]
  00122	50		 push	 eax
  00123	8d 8d 44 f8 ff
	ff		 lea	 ecx, DWORD PTR _kIniLoder$[ebp]
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 1058 : 	if( iSendType == SEND_SECOND )

  0012f	83 f8 02	 cmp	 eax, 2

; 1059 : 		return;

  00132	0f 84 7d 02 00
	00		 je	 $LN593@SendPCInfo

; 1060 : 	else if( iSendType == SEND_FIRST )

  00138	83 f8 01	 cmp	 eax, 1
  0013b	75 1f		 jne	 SHORT $LN201@SendPCInfo

; 1061 : 	{
; 1062 : 		if( g_MyInfo.GetGradeLevel() < SEND_GRADE_LEVEL )

  0013d	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00142	8b c8		 mov	 ecx, eax
  00144	e8 00 00 00 00	 call	 ?GetGradeLevel@ioMyInfo@@QAEHXZ ; ioMyInfo::GetGradeLevel

; 1063 : 			return;

  00149	8d 8d 44 f8 ff
	ff		 lea	 ecx, DWORD PTR _kIniLoder$[ebp]
  0014f	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00152	0f 8c 63 02 00
	00		 jl	 $LN594@SendPCInfo

; 1064 : 
; 1065 : 		kIniLoder.SaveInt( "PCInfo", SEND_SECOND );

  00158	6a 02		 push	 2

; 1066 : 	}
; 1067 : 	else

  0015a	eb 08		 jmp	 SHORT $LN595@SendPCInfo
$LN201@SendPCInfo:

; 1068 : 	{
; 1069 : 		kIniLoder.SaveInt( "PCInfo", SEND_FIRST );

  0015c	6a 01		 push	 1
  0015e	8d 8d 44 f8 ff
	ff		 lea	 ecx, DWORD PTR _kIniLoder$[ebp]
$LN595@SendPCInfo:
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_06OIKPMLAG@PCInfo?$AA@
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SaveInt@ioINILoader@@QAEXPBDH@Z

; 1070 : 	}
; 1071 : 
; 1072 : 	// web version
; 1073 : 	char szTotalWebVersion[MAX_PATH]="";

  0016f	bf 03 01 00 00	 mov	 edi, 259		; 00000103H
  00174	57		 push	 edi
  00175	8d 85 e1 fe ff
	ff		 lea	 eax, DWORD PTR _szTotalWebVersion$[ebp+1]
  0017b	53		 push	 ebx
  0017c	50		 push	 eax
  0017d	88 9d e0 fe ff
	ff		 mov	 BYTE PTR _szTotalWebVersion$[ebp], bl
  00183	e8 00 00 00 00	 call	 _memset

; 1074 : 	char szWebVersion[MAX_PATH]="";

  00188	57		 push	 edi
  00189	8d 85 dd fd ff
	ff		 lea	 eax, DWORD PTR _szWebVersion$[ebp+1]
  0018f	53		 push	 ebx
  00190	50		 push	 eax
  00191	88 9d dc fd ff
	ff		 mov	 BYTE PTR _szWebVersion$[ebp], bl
  00197	e8 00 00 00 00	 call	 _memset

; 1075 : 	Help::RegReadString( HKEY_LOCAL_MACHINE, "Software\\Microsoft\\Internet Explorer", "Version", "", szWebVersion, sizeof(szWebVersion) );

  0019c	8d 77 01	 lea	 esi, DWORD PTR [edi+1]
  0019f	56		 push	 esi
  001a0	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _szWebVersion$[ebp]
  001a6	50		 push	 eax
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_07NGFJPNPN@Version?$AA@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JGKEMPBN@Software?2Microsoft?2Internet?5Expl@
  001b6	68 02 00 00 80	 push	 -2147483646		; 80000002H
  001bb	e8 00 00 00 00	 call	 ?RegReadString@Help@@YA_NPAUHKEY__@@PBD11PADK@Z ; Help::RegReadString
  001c0	83 c4 30	 add	 esp, 48			; 00000030H

; 1076 : 	StringCbCat( szTotalWebVersion, sizeof( szTotalWebVersion ), szWebVersion );

  001c3	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _szWebVersion$[ebp]
  001c9	50		 push	 eax
  001ca	56		 push	 esi
  001cb	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTotalWebVersion$[ebp]
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?StringCbCatA@@YGJPADIPBD@Z ; StringCbCatA

; 1077 : 	StringCbCat( szTotalWebVersion, sizeof( szTotalWebVersion ), "|" );

  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_01DNKMNLPK@?$HM?$AA@
  001dc	56		 push	 esi
  001dd	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTotalWebVersion$[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?StringCbCatA@@YGJPADIPBD@Z ; StringCbCatA

; 1078 : 	Help::RegReadString( HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Google Chrome", "Version", "", szWebVersion, sizeof(szWebVersion) );

  001e9	56		 push	 esi
  001ea	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _szWebVersion$[ebp]
  001f0	50		 push	 eax
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_07NGFJPNPN@Version?$AA@
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@MNJHMJHI@Software?2Microsoft?2Windows?2Curre@
  00200	68 01 00 00 80	 push	 -2147483647		; 80000001H
  00205	e8 00 00 00 00	 call	 ?RegReadString@Help@@YA_NPAUHKEY__@@PBD11PADK@Z ; Help::RegReadString
  0020a	83 c4 18	 add	 esp, 24			; 00000018H

; 1079 : 	StringCbCat( szTotalWebVersion, sizeof( szTotalWebVersion ), szWebVersion );

  0020d	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _szWebVersion$[ebp]
  00213	50		 push	 eax
  00214	56		 push	 esi
  00215	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTotalWebVersion$[ebp]
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 ?StringCbCatA@@YGJPADIPBD@Z ; StringCbCatA

; 1080 : 	StringCbCat( szTotalWebVersion, sizeof( szTotalWebVersion ), "|" );

  00221	68 00 00 00 00	 push	 OFFSET ??_C@_01DNKMNLPK@?$HM?$AA@
  00226	56		 push	 esi
  00227	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTotalWebVersion$[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?StringCbCatA@@YGJPADIPBD@Z ; StringCbCatA

; 1081 : 	Help::RegReadString( HKEY_LOCAL_MACHINE, "Software\\Mozilla\\Mozilla Firefox", "CurrentVersion", "", szWebVersion, sizeof(szWebVersion) );

  00233	56		 push	 esi
  00234	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _szWebVersion$[ebp]
  0023a	50		 push	 eax
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00240	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IANJKHJL@CurrentVersion?$AA@
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EKOBKKJJ@Software?2Mozilla?2Mozilla?5Firefox@
  0024a	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0024f	e8 00 00 00 00	 call	 ?RegReadString@Help@@YA_NPAUHKEY__@@PBD11PADK@Z ; Help::RegReadString
  00254	83 c4 18	 add	 esp, 24			; 00000018H

; 1082 : 	StringCbCat( szTotalWebVersion, sizeof( szTotalWebVersion ), szWebVersion );

  00257	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _szWebVersion$[ebp]
  0025d	50		 push	 eax
  0025e	56		 push	 esi
  0025f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTotalWebVersion$[ebp]
  00265	50		 push	 eax
  00266	e8 00 00 00 00	 call	 ?StringCbCatA@@YGJPADIPBD@Z ; StringCbCatA

; 1083 : 
; 1084 : 	char szDesktopWH[MAX_PATH]="";

  0026b	57		 push	 edi
  0026c	8d 85 d5 fb ff
	ff		 lea	 eax, DWORD PTR _szDesktopWH$[ebp+1]
  00272	53		 push	 ebx
  00273	50		 push	 eax
  00274	88 9d d4 fb ff
	ff		 mov	 BYTE PTR _szDesktopWH$[ebp], bl
  0027a	e8 00 00 00 00	 call	 _memset

; 1085 : 	StringCbPrintf_e( szDesktopWH, sizeof( szDesktopWH ), "%d*%d", g_App.GetDeskTopWidth(), g_App.GetDeskTopHeight() );

  0027f	c7 45 e4 c8 88
	c1 cf		 mov	 DWORD PTR ___encStr$509423[ebp], -809400120 ; cfc188c8H
  00286	81 75 e4 ed ec
	eb ea		 xor	 DWORD PTR ___encStr$509423[ebp], -353637139 ; eaebecedH
  0028d	66 c7 45 e8 64
	00		 mov	 WORD PTR ___encStr$509423[ebp+4], 100 ; 00000064H
  00293	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00298	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  0029b	89 85 28 78 ff
	ff		 mov	 DWORD PTR $T512463[ebp], eax
  002a1	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  002a6	ff b5 28 78 ff
	ff		 push	 DWORD PTR $T512463[ebp]
  002ac	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  002af	50		 push	 eax
  002b0	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$509423[ebp]
  002b3	50		 push	 eax
  002b4	8d 85 d4 fb ff
	ff		 lea	 eax, DWORD PTR _szDesktopWH$[ebp]
  002ba	56		 push	 esi
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 1086 : 	char szGameWH[MAX_PATH]="";

  002c1	57		 push	 edi
  002c2	8d 85 d9 fc ff
	ff		 lea	 eax, DWORD PTR _szGameWH$[ebp+1]
  002c8	53		 push	 ebx
  002c9	50		 push	 eax
  002ca	88 9d d8 fc ff
	ff		 mov	 BYTE PTR _szGameWH$[ebp], bl
  002d0	e8 00 00 00 00	 call	 _memset

; 1087 : 	StringCbPrintf_e( szGameWH, sizeof( szGameWH ), "%d*%d", Setting::Width(), Setting::Height() );

  002d5	c7 45 e4 c8 88
	c1 cf		 mov	 DWORD PTR ___encStr$509576[ebp], -809400120 ; cfc188c8H
  002dc	81 75 e4 ed ec
	eb ea		 xor	 DWORD PTR ___encStr$509576[ebp], -353637139 ; eaebecedH
  002e3	83 c4 2c	 add	 esp, 44			; 0000002cH
  002e6	66 c7 45 e8 64
	00		 mov	 WORD PTR ___encStr$509576[ebp+4], 100 ; 00000064H
  002ec	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  002f7	50		 push	 eax
  002f8	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$509576[ebp]
  002fb	50		 push	 eax
  002fc	8d 85 d8 fc ff
	ff		 lea	 eax, DWORD PTR _szGameWH$[ebp]
  00302	56		 push	 esi
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA
  00309	83 c4 14	 add	 esp, 20			; 00000014H

; 1088 : 
; 1089 : 	// send
; 1090 : 	SP2Packet kPacket( CTPK_PCINFO );

  0030c	68 57 02 00 00	 push	 599			; 00000257H
  00311	8d 8d 2c 78 ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00317	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 1091 : 	kPacket << Setting::GetOSVersion() << Setting::GetDXVersion() << Setting::GetCPUName() << Setting::GetSystemMemory() 
; 1092 : 		    << Setting::GetGraphicCardName() << szTotalWebVersion << szDesktopWH << szGameWH << Setting::FullScreen();

  0031c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?m_Option@Setting@@1USettingOption@@A
  00323	50		 push	 eax
  00324	8d 85 d8 fc ff
	ff		 lea	 eax, DWORD PTR _szGameWH$[ebp]
  0032a	50		 push	 eax
  0032b	8d 85 d4 fb ff
	ff		 lea	 eax, DWORD PTR _szDesktopWH$[ebp]
  00331	50		 push	 eax
  00332	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTotalWebVersion$[ebp]
  00338	50		 push	 eax
  00339	68 00 00 00 00	 push	 OFFSET ?m_szGraphicName@Setting@@1PADA ; Setting::m_szGraphicName
  0033e	ff 35 00 00 00
	00		 push	 DWORD PTR ?m_iSystemMemory@Setting@@1HA ; Setting::m_iSystemMemory
  00344	8d 8d 2c 78 ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  0034a	68 00 00 00 00	 push	 OFFSET ?m_szCPUName@Setting@@1PADA ; Setting::m_szCPUName
  0034f	68 00 00 00 00	 push	 OFFSET ?m_szDirectXVersion@Setting@@1PADA ; Setting::m_szDirectXVersion
  00354	68 00 00 00 00	 push	 OFFSET ?m_szOSVersion@Setting@@1PADA ; Setting::m_szOSVersion
  00359	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0035d	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  00362	8b c8		 mov	 ecx, eax
  00364	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  00369	8b c8		 mov	 ecx, eax
  0036b	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  00370	8b c8		 mov	 ecx, eax
  00372	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<
  00377	8b c8		 mov	 ecx, eax
  00379	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  0037e	8b c8		 mov	 ecx, eax
  00380	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  00385	8b c8		 mov	 ecx, eax
  00387	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  0038c	8b c8		 mov	 ecx, eax
  0038e	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<
  00393	8b c8		 mov	 ecx, eax
  00395	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 1093 : 	TCPNetwork::SendToServer( kPacket );

  0039a	8d 85 2c 78 ff
	ff		 lea	 eax, DWORD PTR _kPacket$[ebp]
  003a0	50		 push	 eax
  003a1	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer
  003a6	59		 pop	 ecx

; 1094 : 
; 1095 : }

  003a7	8d 8d 2c 78 ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  003ad	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  003b0	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN593@SendPCInfo:
  003b5	8d 8d 44 f8 ff
	ff		 lea	 ecx, DWORD PTR _kIniLoder$[ebp]
$LN594@SendPCInfo:
  003bb	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  003bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
  003c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003cf	59		 pop	 ecx
  003d0	5f		 pop	 edi
  003d1	5e		 pop	 esi
  003d2	5b		 pop	 ebx
  003d3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003d6	33 cd		 xor	 ecx, ebp
  003d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003dd	c9		 leave
  003de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendPCInfo@CLogin@@IAEXXZ$0:
  00000	8d 8d 44 f8 ff
	ff		 lea	 ecx, DWORD PTR _kIniLoder$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ioINILoader_e@@QAE@XZ
__unwindfunclet$?SendPCInfo@CLogin@@IAEXXZ$1:
  0000b	8d 8d 2c 78 ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SendPCInfo@CLogin@@IAEXXZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 24 78 ff
	ff		 mov	 ecx, DWORD PTR [edx-34780]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SendPCInfo@CLogin@@IAEXXZ
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SendPCInfo@CLogin@@IAEXXZ ENDP				; CLogin::SendPCInfo
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	6a 00		 push	 0
  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0N@FFLLELEL@Block?5LogOut?$AA@		; `string'
PUBLIC	??_C@_06ENCNLCH@Guild?2?$AA@			; `string'
PUBLIC	??_C@_03EMIMMIHL@?$CK?4?$CK?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z ; CLogin::_OnConnectOK
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	?SendMgameShutDownDate@ioMyInfo@@QAEXXZ:PROC	; ioMyInfo::SendMgameShutDownDate
EXTRN	?SaveSetting@Setting@@SAXABVioHashString@@_N@Z:PROC ; Setting::SaveSetting
EXTRN	?LoadList@ioVoiceDisableListManager@@QAEXXZ:PROC ; ioVoiceDisableListManager::LoadList
EXTRN	?GetSingleton@ioVoiceDisableListManager@@SAAAV1@XZ:PROC ; ioVoiceDisableListManager::GetSingleton
EXTRN	?Load@ioKeyManager@@QAEXXZ:PROC			; ioKeyManager::Load
EXTRN	?GetSingleton@ioKeyManager@@SAAAV1@XZ:PROC	; ioKeyManager::GetSingleton
EXTRN	?LoadBlackList@ioBlackListManager@@QAEXXZ:PROC	; ioBlackListManager::LoadBlackList
EXTRN	?GetSingleton@ioBlackListManager@@SAAAV1@XZ:PROC ; ioBlackListManager::GetSingleton
EXTRN	?GetBlockType@ioMyInfo@@QBE?AW4BlockType@@XZ:PROC ; ioMyInfo::GetBlockType
EXTRN	?SetUserData@ioMyInfo@@QAEXAAVSP2Packet@@AAK@Z:PROC ; ioMyInfo::SetUserData
EXTRN	?SetPrivateID@ioMyInfo@@QAEXVioHashString@@@Z:PROC ; ioMyInfo::SetPrivateID
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
;	COMDAT ??_C@_0N@FFLLELEL@Block?5LogOut?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
CONST	SEGMENT
??_C@_0N@FFLLELEL@Block?5LogOut?$AA@ DB 'Block LogOut', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENCNLCH@Guild?2?$AA@
CONST	SEGMENT
??_C@_06ENCNLCH@Guild?2?$AA@ DB 'Guild\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EMIMMIHL@?$CK?4?$CK?$AA@
CONST	SEGMENT
??_C@_03EMIMMIHL@?$CK?4?$CK?$AA@ DB '*.*', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z$1
__ehfuncinfo$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
$T512607 = -32816					; size = 4
_dwPublicIDHashCode$ = -32812				; size = 4
_kSendPacket$ = -32808					; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_szID$ = 8						; size = 4
_rkPacket$ = 12						; size = 4
?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z PROC ; CLogin::_OnConnectOK, COMDAT
; _this$ = ecx

; 681  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 24 80 00 00	 mov	 eax, 32804		; 00008024H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 45 08	 mov	 eax, DWORD PTR _szID$[ebp]
  00035	8b 7d 0c	 mov	 edi, DWORD PTR _rkPacket$[ebp]

; 682  : 	DWORD dwPublicIDHashCode = 0;
; 683  : 	g_MyInfo.SetPrivateID(szID);

  00038	83 ec 10	 sub	 esp, 16			; 00000010H
  0003b	8b f1		 mov	 esi, ecx
  0003d	8b cc		 mov	 ecx, esp
  0003f	89 a5 d0 7f ff
	ff		 mov	 DWORD PTR $T512607[ebp], esp
  00045	33 db		 xor	 ebx, ebx
  00047	50		 push	 eax
  00048	89 9d d4 7f ff
	ff		 mov	 DWORD PTR _dwPublicIDHashCode$[ebp], ebx
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00054	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00057	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0005c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?SetPrivateID@ioMyInfo@@QAEXVioHashString@@@Z ; ioMyInfo::SetPrivateID

; 684  : 	g_MyInfo.SetUserData( rkPacket, dwPublicIDHashCode );	

  00067	8d 85 d4 7f ff
	ff		 lea	 eax, DWORD PTR _dwPublicIDHashCode$[ebp]
  0006d	50		 push	 eax
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ?SetUserData@ioMyInfo@@QAEXAAVSP2Packet@@AAK@Z ; ioMyInfo::SetUserData

; 685  : 	Setting::Initialize( g_MyInfo.GetPublicID() );

  0007b	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00080	83 c0 1c	 add	 eax, 28			; 0000001cH
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?Initialize@Setting@@SAXABVioHashString@@@Z ; Setting::Initialize
  00089	59		 pop	 ecx

; 686  : 
; 687  : 
; 688  : 
; 689  : 
; 690  : 	if( g_MyInfo.GetBlockType() == BKT_BLOCK ||
; 691  : 		g_MyInfo.GetBlockType() == BKT_NONE )

  0008a	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0008f	8b c8		 mov	 ecx, eax
  00091	e8 00 00 00 00	 call	 ?GetBlockType@ioMyInfo@@QBE?AW4BlockType@@XZ ; ioMyInfo::GetBlockType
  00096	83 f8 64	 cmp	 eax, 100		; 00000064H
  00099	0f 84 f1 00 00
	00		 je	 $LN3@OnConnectO
  0009f	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000a4	8b c8		 mov	 ecx, eax
  000a6	e8 00 00 00 00	 call	 ?GetBlockType@ioMyInfo@@QBE?AW4BlockType@@XZ ; ioMyInfo::GetBlockType
  000ab	83 f8 ff	 cmp	 eax, -1
  000ae	0f 84 dc 00 00
	00		 je	 $LN3@OnConnectO

; 695  : 	}
; 696  : 
; 697  : #ifndef SHIPPING // ADMIN
; 698  : 	SetAdminSettings();
; 699  : #endif
; 700  : 
; 701  : 	g_BlackListManager.LoadBlackList();

  000b4	e8 00 00 00 00	 call	 ?GetSingleton@ioBlackListManager@@SAAAV1@XZ ; ioBlackListManager::GetSingleton
  000b9	8b c8		 mov	 ecx, eax
  000bb	e8 00 00 00 00	 call	 ?LoadBlackList@ioBlackListManager@@QAEXXZ ; ioBlackListManager::LoadBlackList

; 702  : 	g_KeyManager.Load();

  000c0	e8 00 00 00 00	 call	 ?GetSingleton@ioKeyManager@@SAAAV1@XZ ; ioKeyManager::GetSingleton
  000c5	8b c8		 mov	 ecx, eax
  000c7	e8 00 00 00 00	 call	 ?Load@ioKeyManager@@QAEXXZ ; ioKeyManager::Load

; 703  : 	g_VoiceDisableListManager.LoadList();

  000cc	e8 00 00 00 00	 call	 ?GetSingleton@ioVoiceDisableListManager@@SAAAV1@XZ ; ioVoiceDisableListManager::GetSingleton
  000d1	8b c8		 mov	 ecx, eax
  000d3	e8 00 00 00 00	 call	 ?LoadList@ioVoiceDisableListManager@@QAEXXZ ; ioVoiceDisableListManager::LoadList

; 704  : 
; 705  : 	//UDP HOLE PUNCHING.
; 706  : 	SP2Packet kSendPacket( CUPK_CONNECT );

  000d8	68 01 40 00 00	 push	 16385			; 00004001H
  000dd	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  000e3	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  000e8	43		 inc	 ebx
  000e9	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 707  : 	kSendPacket << g_MyInfo.GetPublicID();

  000ec	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000f1	83 c0 1c	 add	 eax, 28			; 0000001cH
  000f4	50		 push	 eax
  000f5	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  000fb	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 708  : 	P2PNetwork::SendToServer( kSendPacket );

  00100	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kSendPacket$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?SendToServer@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendToServer

; 709  : 
; 710  : 	m_dwSentUDPMsgTime = timeGetTime();

  0010c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__timeGetTime@0
  00112	59		 pop	 ecx
  00113	ff d7		 call	 edi
  00115	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax

; 711  : 	m_eLoginState      = LS_SENT_UDP_MSG;

  0011b	c7 86 08 02 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+520], 2

; 712  : 	m_iCheckCnt        = 1; 

  00125	89 9e 34 02 00
	00		 mov	 DWORD PTR [esi+564], ebx

; 713  : 	m_dwConnectPreTime = timeGetTime();

  0012b	ff d7		 call	 edi
  0012d	89 86 38 02 00
	00		 mov	 DWORD PTR [esi+568], eax

; 714  : 
; 715  : 	//클베때 길드 마크들로 인해 길드 폴더를 최소 1회는 삭제해야한다. 
; 716  : 	if( Setting::GuildFolderDel() )

  00133	80 3d 90 00 00
	00 00		 cmp	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+144, 0
  0013a	74 2e		 je	 SHORT $LN1@OnConnectO

; 717  : 	{
; 718  : 		if( DeleteDirectoryInFile( "Guild\\", "*.*" ) )

  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_03EMIMMIHL@?$CK?4?$CK?$AA@
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_06ENCNLCH@Guild?2?$AA@
  00146	8b ce		 mov	 ecx, esi
  00148	e8 00 00 00 00	 call	 ?DeleteDirectoryInFile@CLogin@@IAE_NPBD0@Z ; CLogin::DeleteDirectoryInFile
  0014d	84 c0		 test	 al, al
  0014f	74 19		 je	 SHORT $LN1@OnConnectO

; 719  : 		{
; 720  : 			Setting::SetGuildFolderDel( false );

  00151	c6 05 90 00 00
	00 00		 mov	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+144, 0

; 721  : 			Setting::SaveSetting( g_MyInfo.GetPublicID() );		

  00158	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0015d	83 c0 1c	 add	 eax, 28			; 0000001cH
  00160	6a 00		 push	 0
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?SaveSetting@Setting@@SAXABVioHashString@@_N@Z ; Setting::SaveSetting
  00168	59		 pop	 ecx
  00169	59		 pop	 ecx
$LN1@OnConnectO:

; 722  : 		}
; 723  : 	}
; 724  : 
; 725  : 	SendPCInfo();

  0016a	8b ce		 mov	 ecx, esi
  0016c	e8 00 00 00 00	 call	 ?SendPCInfo@CLogin@@IAEXXZ ; CLogin::SendPCInfo

; 726  : 	g_MyInfo.SendMgameShutDownDate();

  00171	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00176	8b c8		 mov	 ecx, eax
  00178	e8 00 00 00 00	 call	 ?SendMgameShutDownDate@ioMyInfo@@QAEXXZ ; ioMyInfo::SendMgameShutDownDate

; 727  : 
; 728  : 	return true;

  0017d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00181	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  00187	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
  0018c	8a c3		 mov	 al, bl
  0018e	eb 17		 jmp	 SHORT $LN5@OnConnectO
$LN3@OnConnectO:

; 692  : 	{
; 693  : 		LOG.PrintTimeAndLog( 0, "Block LogOut" );

  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FFLLELEL@Block?5LogOut?$AA@
  00195	53		 push	 ebx
  00196	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  001a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 694  : 		return false;

  001a5	32 c0		 xor	 al, al
$LN5@OnConnectO:

; 729  : }

  001a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b1	59		 pop	 ecx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b8	33 cd		 xor	 ecx, ebp
  001ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bf	c9		 leave
  001c0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z$0:
  00000	8b 8d d0 7f ff
	ff		 mov	 ecx, DWORD PTR $T512607[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z$1:
  0000c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kSendPacket$[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a cc 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32820]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z ENDP ; CLogin::_OnConnectOK
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 64   : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??_C@_0BO@NHEEDHHK@?$CFs?1Login?5Fail?5?$CIip?5is?5blocked?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BO@DKAIBPDO@ip?5is?5blocked?4?$AN?6?$AN?6?$CIError?3329?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CD@EBKALEKF@Gameserver?5is?5full?4?$AN?6?$AN?6?$CIError?332@ ; `string'
PUBLIC	??_C@_08HOILBPAM@Error?5?3?5?$AA@		; `string'
PUBLIC	??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@	; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z		; CLogin::OnConnect
EXTRN	?GetNode@ioChannelingNodeManager@@QAEPAVioChannelingNodeParent@@W4ChannelingType@@@Z:PROC ; ioChannelingNodeManager::GetNode
EXTRN	?GetSingleton@ioChannelingNodeManager@@SAAAV1@XZ:PROC ; ioChannelingNodeManager::GetSingleton
EXTRN	?GetChannelingType@ioMyInfo@@QBE?AW4ChannelingType@@XZ:PROC ; ioMyInfo::GetChannelingType
EXTRN	??5SP2Packet@@QAEAAV0@AA_N@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAVioHashString@@@Z:PROC	; SP2Packet::operator>>
;	COMDAT ??_C@_0BO@NHEEDHHK@?$CFs?1Login?5Fail?5?$CIip?5is?5blocked?$CJ?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0BO@NHEEDHHK@?$CFs?1Login?5Fail?5?$CIip?5is?5blocked?$CJ?$AA@ DB '%'
	DB	's/Login Fail (ip is blocked)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DKAIBPDO@ip?5is?5blocked?4?$AN?6?$AN?6?$CIError?3329?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@DKAIBPDO@ip?5is?5blocked?4?$AN?6?$AN?6?$CIError?3329?$CJ?$AA@ DB 'i'
	DB	'p is blocked.', 0dH, 0aH, 0dH, 0aH, '(Error:329)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EBKALEKF@Gameserver?5is?5full?4?$AN?6?$AN?6?$CIError?332@
CONST	SEGMENT
??_C@_0CD@EBKALEKF@Gameserver?5is?5full?4?$AN?6?$AN?6?$CIError?332@ DB 'G'
	DB	'ameserver is full.', 0dH, 0aH, 0dH, 0aH, '(Error:329)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOILBPAM@Error?5?3?5?$AA@
CONST	SEGMENT
??_C@_08HOILBPAM@Error?5?3?5?$AA@ DB 'Error : ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
CONST	SEGMENT
??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@ DB 'CLogin::OnConnect', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_sError$507827 = -66224					; size = 16
_szID$ = -66208						; size = 16
_iLoginResult$ = -66192					; size = 4
_bError$507824 = -66185					; size = 1
_this$GSCopy$ = -66184					; size = 4
_kPacket$509061 = -66180				; size = 32792
_kPacket$509070 = -33388				; size = 32792
_szAddError$507831 = -596				; size = 260
_szErrorLog$ = -336					; size = 260
___encStr$507991 = -76					; size = 9
___encStr$507838 = -72					; size = 3
$T512755 = -68						; size = 4
___encStr$508908 = -60					; size = 35
___encStr$508755 = -60					; size = 37
___encStr$508602 = -60					; size = 37
___encStr$507674 = -60					; size = 35
___encStr$507212 = -60					; size = 35
___encStr$508449 = -56					; size = 31
___encStr$508143 = -56					; size = 32
___encStr$507518 = -56					; size = 31
___encStr$508296 = -52					; size = 27
___encStr$507365 = -52					; size = 29
$T512756 = -36						; size = 16
_sServerError$507826 = -36				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rkPacket$ = 8						; size = 4
?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z PROC		; CLogin::OnConnect, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 a4 02 01 00	 mov	 eax, 66212		; 000102a4H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 502  : 	int iLoginResult = 0;
; 503  : 	ioHashString szID;

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00038	8b 75 08	 mov	 esi, DWORD PTR _rkPacket$[ebp]
  0003b	89 8d 78 fd fe
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00041	33 db		 xor	 ebx, ebx
  00043	8d 8d 60 fd fe
	ff		 lea	 ecx, DWORD PTR _szID$[ebp]
  00049	89 9d 70 fd fe
	ff		 mov	 DWORD PTR _iLoginResult$[ebp], ebx
  0004f	ff d7		 call	 edi

; 504  : 	char szErrorLog[MAX_PATH]="";

  00051	68 03 01 00 00	 push	 259			; 00000103H
  00056	8d 85 b1 fe ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$[ebp+1]
  0005c	53		 push	 ebx
  0005d	50		 push	 eax
  0005e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00061	88 9d b0 fe ff
	ff		 mov	 BYTE PTR _szErrorLog$[ebp], bl
  00067	e8 00 00 00 00	 call	 _memset
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 505  : 	
; 506  : 	rkPacket >> iLoginResult >> szID;

  0006f	8d 85 60 fd fe
	ff		 lea	 eax, DWORD PTR _szID$[ebp]
  00075	50		 push	 eax
  00076	8d 85 70 fd fe
	ff		 lea	 eax, DWORD PTR _iLoginResult$[ebp]
  0007c	50		 push	 eax
  0007d	8b ce		 mov	 ecx, esi
  0007f	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  00084	8b c8		 mov	 ecx, eax
  00086	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAVioHashString@@@Z ; SP2Packet::operator>>

; 507  : 
; 508  : #ifdef SRC_EU
; 509  : 	if(iLoginResult == CONNECT_OK) 
; 510  : 	{
; 511  : 		iLoginResult = g_LocalMgr.NexonCertification(m_hWnd);
; 512  : 	}
; 513  : #endif
; 514  : 	m_iLoginResult = iLoginResult;

  0008b	8b 85 70 fd fe
	ff		 mov	 eax, DWORD PTR _iLoginResult$[ebp]
  00091	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00097	89 81 40 02 00
	00		 mov	 DWORD PTR [ecx+576], eax

; 515  : 	switch( iLoginResult )

  0009d	48		 dec	 eax
  0009e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a1	0f 87 61 09 00
	00		 ja	 $LN1214@OnConnect
  000a7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1394@OnConnect[eax*4]
$LN1213@OnConnect:

; 516  : 	{
; 517  : 	case CONNECT_OK:
; 518  : 		SendMsgToAutoUpgrade(WM_MY_MSG_C_CONNECT_OK);

  000ae	68 2e 05 00 00	 push	 1326			; 0000052eH
  000b3	8b f9		 mov	 edi, ecx
  000b5	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 519  : 		if( !_OnConnectOK( szID, rkPacket ) )

  000ba	56		 push	 esi
  000bb	8d 85 60 fd fe
	ff		 lea	 eax, DWORD PTR _szID$[ebp]
  000c1	50		 push	 eax
  000c2	8b cf		 mov	 ecx, edi
  000c4	e8 00 00 00 00	 call	 ?_OnConnectOK@CLogin@@IAE_NABVioHashString@@AAVSP2Packet@@@Z ; CLogin::_OnConnectOK
  000c9	84 c0		 test	 al, al
  000cb	0f 85 37 09 00
	00		 jne	 $LN1214@OnConnect

; 520  : 		{
; 521  : 			iLoginResult = CONNECT_EXCEPT; // happen except
; 522  : 			g_iErrorNumber = 322;
; 523  : 			SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(1) );

  000d1	53		 push	 ebx
  000d2	6a 01		 push	 1
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  000de	c7 85 70 fd fe
	ff 05 00 00 00	 mov	 DWORD PTR _iLoginResult$[ebp], 5
  000e8	c7 05 00 00 00
	00 42 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 322 ; g_iErrorNumber, 00000142H
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000f8	8b c8		 mov	 ecx, eax
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00100	50		 push	 eax
  00101	68 00 08 00 00	 push	 2048			; 00000800H
  00106	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	6a 08		 push	 8

; 524  : 			StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (block user connect)", m_szMyIP.c_str());

  00116	c7 45 c4 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$507212[ebp], -1497063480 ; a6c49fc8H
  0011d	c7 45 c8 82 8b
	82 84		 mov	 DWORD PTR ___encStr$507212[ebp+4], -2071819390 ; 84828b82H
  00124	c7 45 cc cd aa
	8a 83		 mov	 DWORD PTR ___encStr$507212[ebp+8], -2088064307 ; 838aaacdH
  0012b	c7 45 d0 81 cc
	c3 88		 mov	 DWORD PTR ___encStr$507212[ebp+12], -2000434047 ; 88c3cc81H
  00132	c7 45 d4 81 83
	88 81		 mov	 DWORD PTR ___encStr$507212[ebp+16], -2121759871 ; 81888381H
  00139	c7 45 d8 cd 99
	98 8f		 mov	 DWORD PTR ___encStr$507212[ebp+20], -1885824563 ; 8f9899cdH
  00140	c7 45 dc 9f cc
	88 85		 mov	 DWORD PTR ___encStr$507212[ebp+24], -2054632289 ; 8588cc9fH
  00147	c7 45 e0 83 82
	8e 89		 mov	 DWORD PTR ___encStr$507212[ebp+28], -1987149181 ; 898e8283H
  0014e	66 c7 45 e4 99
	c5		 mov	 WORD PTR ___encStr$507212[ebp+32], 50585 ; 0000c599H
  00154	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$507212[ebp]
  00157	88 5d e6	 mov	 BYTE PTR ___encStr$507212[ebp+34], bl
  0015a	59		 pop	 ecx
$LL1230@OnConnect:
  0015b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00161	83 c0 04	 add	 eax, 4
  00164	49		 dec	 ecx
  00165	75 f4		 jne	 SHORT $LL1230@OnConnect
  00167	6a 20		 push	 32			; 00000020H
  00169	5e		 pop	 esi
$LL1227@OnConnect:
  0016a	8b c6		 mov	 eax, esi
  0016c	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00171	79 05		 jns	 SHORT $LN1378@OnConnect
  00173	48		 dec	 eax
  00174	83 c8 fc	 or	 eax, -4			; fffffffcH
  00177	40		 inc	 eax
$LN1378@OnConnect:
  00178	b1 ed		 mov	 cl, -19			; ffffffedH
  0017a	2a c8		 sub	 cl, al
  0017c	30 4c 35 c4	 xor	 BYTE PTR ___encStr$507212[ebp+esi], cl
  00180	46		 inc	 esi
  00181	83 fe 22	 cmp	 esi, 34			; 00000022H
  00184	7c e4		 jl	 SHORT $LL1227@OnConnect
  00186	8d 8f 24 02 00
	00		 lea	 ecx, DWORD PTR [edi+548]
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00192	50		 push	 eax
  00193	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$507212[ebp]
  00196	50		 push	 eax
  00197	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$[ebp]
  0019d	68 04 01 00 00	 push	 260			; 00000104H
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 525  : 			m_iLoginResult = CONNECT_BLOCK_ID;	

  001a8	c7 87 40 02 00
	00 0c 00 00 00	 mov	 DWORD PTR [edi+576], 12	; 0000000cH

; 526  : 		}
; 527  : 		break;

  001b2	e9 4e 08 00 00	 jmp	 $LN1386@OnConnect
$LN1112@OnConnect:

; 528  : 	case CONNECT_ID_NOT:
; 529  : 		g_iErrorNumber = 305;
; 530  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(2) );

  001b7	53		 push	 ebx
  001b8	6a 02		 push	 2
  001ba	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  001c4	c7 05 00 00 00
	00 31 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 305 ; g_iErrorNumber, 00000131H
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  001d4	8b c8		 mov	 ecx, eax
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  001dc	50		 push	 eax
  001dd	68 00 08 00 00	 push	 2048			; 00000800H
  001e2	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  001ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f0	6a 07		 push	 7

; 531  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (Not exist ID)", m_szMyIP.c_str());

  001f2	c7 45 cc c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$507365[ebp], -1497063480 ; a6c49fc8H
  001f9	c7 45 d0 82 8b
	82 84		 mov	 DWORD PTR ___encStr$507365[ebp+4], -2071819390 ; 84828b82H
  00200	c7 45 d4 cd aa
	8a 83		 mov	 DWORD PTR ___encStr$507365[ebp+8], -2088064307 ; 838aaacdH
  00207	c7 45 d8 81 cc
	c3 a4		 mov	 DWORD PTR ___encStr$507365[ebp+12], -1530671999 ; a4c3cc81H
  0020e	c7 45 dc 82 98
	cb 8f		 mov	 DWORD PTR ___encStr$507365[ebp+16], -1882482558 ; 8fcb9882H
  00215	c7 45 e0 95 85
	98 9e		 mov	 DWORD PTR ___encStr$507365[ebp+20], -1634171499 ; 9e988595H
  0021c	c7 45 e4 cd a5
	af c3		 mov	 DWORD PTR ___encStr$507365[ebp+24], -1011898931 ; c3afa5cdH
  00223	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$507365[ebp]
  00226	88 5d e8	 mov	 BYTE PTR ___encStr$507365[ebp+28], bl
  00229	59		 pop	 ecx
$LL1238@OnConnect:
  0022a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00230	83 c0 04	 add	 eax, 4
  00233	49		 dec	 ecx
  00234	75 f4		 jne	 SHORT $LL1238@OnConnect
  00236	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0023c	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00248	50		 push	 eax
  00249	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$507365[ebp]
$LN1389@OnConnect:
  0024c	50		 push	 eax

; 532  : 		break;

  0024d	e9 a2 07 00 00	 jmp	 $LN1387@OnConnect
$LN1012@OnConnect:

; 533  : 	case CONNECT_PW_NOT:
; 534  : 		g_iErrorNumber = 306;
; 535  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(3) );

  00252	53		 push	 ebx
  00253	6a 03		 push	 3
  00255	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  0025f	c7 05 00 00 00
	00 32 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 306 ; g_iErrorNumber, 00000132H
  00269	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0026f	8b c8		 mov	 ecx, eax
  00271	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00277	50		 push	 eax
  00278	68 00 08 00 00	 push	 2048			; 00000800H
  0027d	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  00282	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  00288	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028b	6a 07		 push	 7

; 536  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (Wrong password)", m_szMyIP.c_str());

  0028d	c7 45 c8 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$507518[ebp], -1497063480 ; a6c49fc8H
  00294	c7 45 cc 82 8b
	82 84		 mov	 DWORD PTR ___encStr$507518[ebp+4], -2071819390 ; 84828b82H
  0029b	c7 45 d0 cd aa
	8a 83		 mov	 DWORD PTR ___encStr$507518[ebp+8], -2088064307 ; 838aaacdH
  002a2	c7 45 d4 81 cc
	c3 bd		 mov	 DWORD PTR ___encStr$507518[ebp+12], -1111241599 ; bdc3cc81H
  002a9	c7 45 d8 9f 83
	85 8d		 mov	 DWORD PTR ___encStr$507518[ebp+16], -1920629857 ; 8d85839fH
  002b0	c7 45 dc cd 9c
	8a 99		 mov	 DWORD PTR ___encStr$507518[ebp+20], -1718969139 ; 998a9ccdH
  002b7	c7 45 e0 9e 9b
	84 98		 mov	 DWORD PTR ___encStr$507518[ebp+24], -1736139874 ; 98849b9eH
  002be	66 c7 45 e4 89
	c5		 mov	 WORD PTR ___encStr$507518[ebp+28], 50569 ; 0000c589H
  002c4	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$507518[ebp]
  002c7	88 5d e6	 mov	 BYTE PTR ___encStr$507518[ebp+30], bl
  002ca	59		 pop	 ecx
$LL1246@OnConnect:
  002cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002d1	83 c0 04	 add	 eax, 4
  002d4	49		 dec	 ecx
  002d5	75 f4		 jne	 SHORT $LL1246@OnConnect
  002d7	6a 1c		 push	 28			; 0000001cH
  002d9	5e		 pop	 esi
$LL1243@OnConnect:
  002da	8b c6		 mov	 eax, esi
  002dc	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  002e1	79 05		 jns	 SHORT $LN1379@OnConnect
  002e3	48		 dec	 eax
  002e4	83 c8 fc	 or	 eax, -4			; fffffffcH
  002e7	40		 inc	 eax
$LN1379@OnConnect:
  002e8	b1 ed		 mov	 cl, -19			; ffffffedH
  002ea	2a c8		 sub	 cl, al
  002ec	30 4c 35 c8	 xor	 BYTE PTR ___encStr$507518[ebp+esi], cl
  002f0	46		 inc	 esi
  002f1	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  002f4	7c e4		 jl	 SHORT $LL1243@OnConnect
$LN1391@OnConnect:
  002f6	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002fc	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H
  00302	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00308	50		 push	 eax
  00309	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$507518[ebp]

; 537  : 		break;

  0030c	e9 3b ff ff ff	 jmp	 $LN1389@OnConnect
$LN912@OnConnect:

; 538  : 	case CONNECT_ID_ALREADY:
; 539  : 		// 가레나는 프라이빗 아이디를 Temp로 지정한채로 시작하므로 중복로그인시 이미 로그인한 상대를 끊어내기 위해 미리 저장해둔다.
; 540  : 		if(ioLocalManager::GetLocalType() == ioLocalManager::LCT_TAIWAN ||
; 541  : 			ioLocalManager::GetLocalType() == ioLocalManager::LCT_THAILAND)

  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  00317	3d 10 9c 1a 1f	 cmp	 eax, 521837584		; 1f1a9c10H
  0031c	74 0d		 je	 SHORT $LN910@OnConnect
  0031e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  00324	3d e3 f1 b0 2f	 cmp	 eax, 800125411		; 2fb0f1e3H
  00329	75 28		 jne	 SHORT $LN911@OnConnect
$LN910@OnConnect:

; 542  : 		{
; 543  : 			g_MyInfo.SetPrivateID(szID);

  0032b	83 ec 10	 sub	 esp, 16			; 00000010H
  0032e	8d 85 60 fd fe
	ff		 lea	 eax, DWORD PTR _szID$[ebp]
  00334	8b cc		 mov	 ecx, esp
  00336	89 65 bc	 mov	 DWORD PTR $T512755[ebp], esp
  00339	50		 push	 eax
  0033a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00340	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00344	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00349	8b c8		 mov	 ecx, eax
  0034b	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0034e	e8 00 00 00 00	 call	 ?SetPrivateID@ioMyInfo@@QAEXVioHashString@@@Z ; ioMyInfo::SetPrivateID
$LN911@OnConnect:

; 544  : 		}
; 545  : 
; 546  : 		ShowDisconnectDlg( g_App.GetInstance() );

  00353	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00358	8b bd 78 fd fe
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  0035e	ff 70 04	 push	 DWORD PTR [eax+4]
  00361	8b cf		 mov	 ecx, edi
  00363	e8 00 00 00 00	 call	 ?ShowDisconnectDlg@CLogin@@IAEXPAUHINSTANCE__@@@Z ; CLogin::ShowDisconnectDlg

; 547  : 		g_iErrorNumber = 307;
; 548  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(4) );

  00368	53		 push	 ebx
  00369	6a 04		 push	 4
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  00375	c7 05 00 00 00
	00 33 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 307 ; g_iErrorNumber, 00000133H
  0037f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00385	8b c8		 mov	 ecx, eax
  00387	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0038d	50		 push	 eax
  0038e	68 00 08 00 00	 push	 2048			; 00000800H
  00393	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  00398	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  0039e	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a1	6a 08		 push	 8

; 549  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (duplicated connect)", m_szMyIP.c_str());

  003a3	c7 45 c4 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$507674[ebp], -1497063480 ; a6c49fc8H
  003aa	c7 45 c8 82 8b
	82 84		 mov	 DWORD PTR ___encStr$507674[ebp+4], -2071819390 ; 84828b82H
  003b1	c7 45 cc cd aa
	8a 83		 mov	 DWORD PTR ___encStr$507674[ebp+8], -2088064307 ; 838aaacdH
  003b8	c7 45 d0 81 cc
	c3 8e		 mov	 DWORD PTR ___encStr$507674[ebp+12], -1899770751 ; 8ec3cc81H
  003bf	c7 45 d4 98 9c
	87 83		 mov	 DWORD PTR ___encStr$507674[ebp+16], -2088264552 ; 83879c98H
  003c6	c7 45 d8 8e 8d
	9f 8f		 mov	 DWORD PTR ___encStr$507674[ebp+20], -1885368946 ; 8f9f8d8eH
  003cd	c7 45 dc 89 cc
	88 85		 mov	 DWORD PTR ___encStr$507674[ebp+24], -2054632311 ; 8588cc89H
  003d4	c7 45 e0 83 82
	8e 89		 mov	 DWORD PTR ___encStr$507674[ebp+28], -1987149181 ; 898e8283H
  003db	66 c7 45 e4 99
	c5		 mov	 WORD PTR ___encStr$507674[ebp+32], 50585 ; 0000c599H
  003e1	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$507674[ebp]
  003e4	88 5d e6	 mov	 BYTE PTR ___encStr$507674[ebp+34], bl
  003e7	59		 pop	 ecx
$LL1256@OnConnect:
  003e8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003ee	83 c0 04	 add	 eax, 4
  003f1	49		 dec	 ecx
  003f2	75 f4		 jne	 SHORT $LL1256@OnConnect
  003f4	6a 20		 push	 32			; 00000020H
  003f6	5e		 pop	 esi
$LL1253@OnConnect:
  003f7	8b c6		 mov	 eax, esi
  003f9	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  003fe	79 05		 jns	 SHORT $LN1380@OnConnect
  00400	48		 dec	 eax
  00401	83 c8 fc	 or	 eax, -4			; fffffffcH
  00404	40		 inc	 eax
$LN1380@OnConnect:
  00405	b1 ed		 mov	 cl, -19			; ffffffedH
  00407	2a c8		 sub	 cl, al
  00409	30 4c 35 c4	 xor	 BYTE PTR ___encStr$507674[ebp+esi], cl
  0040d	46		 inc	 esi
  0040e	83 fe 22	 cmp	 esi, 34			; 00000022H
  00411	7c e4		 jl	 SHORT $LL1253@OnConnect
  00413	8d 8f 24 02 00
	00		 lea	 ecx, DWORD PTR [edi+548]
$LN1392@OnConnect:
  00419	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0041f	50		 push	 eax
  00420	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$507674[ebp]

; 550  : 		break;

  00423	e9 24 fe ff ff	 jmp	 $LN1389@OnConnect
$LN810@OnConnect:

; 551  : 	case CONNECT_EXCEPT:
; 552  : 		{
; 553  : 			g_iErrorNumber = 308;
; 554  : 			SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(5) );

  00428	53		 push	 ebx
  00429	6a 05		 push	 5
  0042b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00430	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  00435	c7 05 00 00 00
	00 34 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 308 ; g_iErrorNumber, 00000134H
  0043f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00445	8b c8		 mov	 ecx, eax
  00447	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0044d	50		 push	 eax
  0044e	68 00 08 00 00	 push	 2048			; 00000800H
  00453	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  00458	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  0045e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 555  : 
; 556  : 			// 파트너사 에러 출력
; 557  : 			bool bError = false;
; 558  : 			rkPacket >> bError;

  00461	8d 85 77 fd fe
	ff		 lea	 eax, DWORD PTR _bError$507824[ebp]
  00467	50		 push	 eax
  00468	8b ce		 mov	 ecx, esi
  0046a	88 9d 77 fd fe
	ff		 mov	 BYTE PTR _bError$507824[ebp], bl
  00470	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>

; 559  : 			if( bError )

  00475	38 9d 77 fd fe
	ff		 cmp	 BYTE PTR _bError$507824[ebp], bl
  0047b	0f 84 75 01 00
	00		 je	 $LN606@OnConnect

; 560  : 			{
; 561  : 				ioHashString sServerError;

  00481	8d 4d dc	 lea	 ecx, DWORD PTR _sServerError$507826[ebp]
  00484	ff d7		 call	 edi

; 562  : 				rkPacket >> sServerError;

  00486	8d 45 dc	 lea	 eax, DWORD PTR _sServerError$507826[ebp]
  00489	50		 push	 eax
  0048a	8b ce		 mov	 ecx, esi
  0048c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00490	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAVioHashString@@@Z ; SP2Packet::operator>>

; 563  : 
; 564  : 				ioHashString sError = "Error : ";

  00495	68 00 00 00 00	 push	 OFFSET ??_C@_08HOILBPAM@Error?5?3?5?$AA@
  0049a	8d 8d 50 fd fe
	ff		 lea	 ecx, DWORD PTR _sError$507827[ebp]
  004a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  004a6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 565  : 				ioLocalParent *pLocal = g_LocalMgr.GetLocal( ioLocalManager::GetLocalType() );

  004aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  004b0	50		 push	 eax
  004b1	e8 00 00 00 00	 call	 ?GetSingleton@ioLocalManager@@SAAAV1@XZ ; ioLocalManager::GetSingleton
  004b6	8b c8		 mov	 ecx, eax
  004b8	e8 00 00 00 00	 call	 ?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z ; ioLocalManager::GetLocal

; 566  : 				if( pLocal ) 

  004bd	3b c3		 cmp	 eax, ebx
  004bf	74 18		 je	 SHORT $LN808@OnConnect

; 567  : 					sError = pLocal->GetBillingErrorMent(sServerError);

  004c1	8b 10		 mov	 edx, DWORD PTR [eax]
  004c3	8d 4d dc	 lea	 ecx, DWORD PTR _sServerError$507826[ebp]
  004c6	51		 push	 ecx
  004c7	8b c8		 mov	 ecx, eax
  004c9	ff 52 70	 call	 DWORD PTR [edx+112]
  004cc	50		 push	 eax
  004cd	8d 8d 50 fd fe
	ff		 lea	 ecx, DWORD PTR _sError$507827[ebp]
  004d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
$LN808@OnConnect:

; 568  : 				char szAddError[MAX_PATH]="";

  004d9	68 03 01 00 00	 push	 259			; 00000103H
  004de	8d 85 ad fd ff
	ff		 lea	 eax, DWORD PTR _szAddError$507831[ebp+1]
  004e4	53		 push	 ebx
  004e5	50		 push	 eax
  004e6	88 9d ac fd ff
	ff		 mov	 BYTE PTR _szAddError$507831[ebp], bl
  004ec	e8 00 00 00 00	 call	 _memset
  004f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 569  : 
; 570  : 				ioChannelingNodeParent *pNode = NULL;
; 571  : 
; 572  : 				if(g_ChannelingMgrPtr)

  004f4	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VioChannelingNodeManager@@@@1PAVioChannelingNodeManager@@A, ebx ; Singleton<ioChannelingNodeManager>::ms_Singleton
  004fa	74 78		 je	 SHORT $LN705@OnConnect

; 573  : 					pNode = g_ChannelingMgr.GetNode( g_MyInfo.GetChannelingType() );

  004fc	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00501	8b c8		 mov	 ecx, eax
  00503	e8 00 00 00 00	 call	 ?GetChannelingType@ioMyInfo@@QBE?AW4ChannelingType@@XZ ; ioMyInfo::GetChannelingType
  00508	50		 push	 eax
  00509	e8 00 00 00 00	 call	 ?GetSingleton@ioChannelingNodeManager@@SAAAV1@XZ ; ioChannelingNodeManager::GetSingleton
  0050e	8b c8		 mov	 ecx, eax
  00510	e8 00 00 00 00	 call	 ?GetNode@ioChannelingNodeManager@@QAEPAVioChannelingNodeParent@@W4ChannelingType@@@Z ; ioChannelingNodeManager::GetNode

; 574  : 
; 575  : 				if( pNode && pNode->GetType() == CNT_NEXON )					

  00515	3b c3		 cmp	 eax, ebx
  00517	74 5b		 je	 SHORT $LN705@OnConnect
  00519	8b 10		 mov	 edx, DWORD PTR [eax]
  0051b	8b c8		 mov	 ecx, eax
  0051d	ff 12		 call	 DWORD PTR [edx]
  0051f	3d 20 03 00 00	 cmp	 eax, 800		; 00000320H
  00524	75 4e		 jne	 SHORT $LN705@OnConnect

; 576  : 				{
; 577  : 					StringCbPrintf_e( szAddError, sizeof( szAddError ), "%s", sError.c_str() ); //Except Extracting Hangeul

  00526	66 c7 45 b8 c8
	9f		 mov	 WORD PTR ___encStr$507838[ebp], 40904 ; 00009fc8H
  0052c	88 5d ba	 mov	 BYTE PTR ___encStr$507838[ebp+2], bl
  0052f	33 f6		 xor	 esi, esi
$LL1263@OnConnect:
  00531	8b c6		 mov	 eax, esi
  00533	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00538	79 05		 jns	 SHORT $LN1381@OnConnect
  0053a	48		 dec	 eax
  0053b	83 c8 fc	 or	 eax, -4			; fffffffcH
  0053e	40		 inc	 eax
$LN1381@OnConnect:
  0053f	b1 ed		 mov	 cl, -19			; ffffffedH
  00541	2a c8		 sub	 cl, al
  00543	30 4c 35 b8	 xor	 BYTE PTR ___encStr$507838[ebp+esi], cl
  00547	46		 inc	 esi
  00548	83 fe 02	 cmp	 esi, 2
  0054b	7c e4		 jl	 SHORT $LL1263@OnConnect
  0054d	8d 8d 50 fd fe
	ff		 lea	 ecx, DWORD PTR _sError$507827[ebp]
  00553	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00559	50		 push	 eax
  0055a	8d 45 b8	 lea	 eax, DWORD PTR ___encStr$507838[ebp]
  0055d	50		 push	 eax
  0055e	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _szAddError$507831[ebp]
  00564	68 04 01 00 00	 push	 260			; 00000104H
  00569	50		 push	 eax
  0056a	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA
  0056f	83 c4 10	 add	 esp, 16			; 00000010H

; 578  : 					StringCbCat( g_szErrorLog, sizeof( g_szErrorLog ), szAddError );
; 579  : 				}
; 580  : 				else

  00572	eb 52		 jmp	 SHORT $LN1388@OnConnect
$LN705@OnConnect:

; 581  : 				{
; 582  : 					StringCbPrintf_e( szAddError, sizeof( szAddError ), "\r\n\r\n%s%s", sError.c_str(), sServerError.c_str() ); //Except Extracting Hangeul

  00574	6a 02		 push	 2
  00576	c7 45 b4 e0 e6
	e6 e0		 mov	 DWORD PTR ___encStr$507991[ebp], -521738528 ; e0e6e6e0H
  0057d	c7 45 b8 c8 9f
	ce 99		 mov	 DWORD PTR ___encStr$507991[ebp+4], -1714511928 ; 99ce9fc8H
  00584	8d 45 b4	 lea	 eax, DWORD PTR ___encStr$507991[ebp]
  00587	88 5d bc	 mov	 BYTE PTR ___encStr$507991[ebp+8], bl
  0058a	59		 pop	 ecx
$LL1274@OnConnect:
  0058b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00591	83 c0 04	 add	 eax, 4
  00594	49		 dec	 ecx
  00595	75 f4		 jne	 SHORT $LL1274@OnConnect
  00597	8d 4d dc	 lea	 ecx, DWORD PTR _sServerError$507826[ebp]
  0059a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  005a0	50		 push	 eax
  005a1	8d 8d 50 fd fe
	ff		 lea	 ecx, DWORD PTR _sError$507827[ebp]
  005a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  005ad	50		 push	 eax
  005ae	8d 45 b4	 lea	 eax, DWORD PTR ___encStr$507991[ebp]
  005b1	50		 push	 eax
  005b2	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _szAddError$507831[ebp]
  005b8	68 04 01 00 00	 push	 260			; 00000104H
  005bd	50		 push	 eax
  005be	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA
  005c3	83 c4 14	 add	 esp, 20			; 00000014H
$LN1388@OnConnect:

; 583  : 					StringCbCat( g_szErrorLog, sizeof( g_szErrorLog ), szAddError );

  005c6	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _szAddError$507831[ebp]
  005cc	50		 push	 eax
  005cd	68 00 08 00 00	 push	 2048			; 00000800H
  005d2	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  005d7	e8 00 00 00 00	 call	 ?StringCbCatA@@YGJPADIPBD@Z ; StringCbCatA

; 584  : 				}
; 585  : 			}

  005dc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  005e2	8d 8d 50 fd fe
	ff		 lea	 ecx, DWORD PTR _sError$507827[ebp]
  005e8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  005ec	ff d6		 call	 esi
  005ee	8d 4d dc	 lea	 ecx, DWORD PTR _sServerError$507826[ebp]
  005f1	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  005f4	ff d6		 call	 esi
$LN606@OnConnect:

; 586  : 
; 587  : 			StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (occur exception)", m_szMyIP.c_str());

  005f6	6a 07		 push	 7
  005f8	c7 45 c8 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$508143[ebp], -1497063480 ; a6c49fc8H
  005ff	c7 45 cc 82 8b
	82 84		 mov	 DWORD PTR ___encStr$508143[ebp+4], -2071819390 ; 84828b82H
  00606	c7 45 d0 cd aa
	8a 83		 mov	 DWORD PTR ___encStr$508143[ebp+8], -2088064307 ; 838aaacdH
  0060d	c7 45 d4 81 cc
	c3 85		 mov	 DWORD PTR ___encStr$508143[ebp+12], -2050765695 ; 85c3cc81H
  00614	c7 45 d8 8e 8f
	9e 98		 mov	 DWORD PTR ___encStr$508143[ebp+16], -1734439026 ; 989e8f8eH
  0061b	c7 45 dc cd 89
	93 89		 mov	 DWORD PTR ___encStr$508143[ebp+20], -1986819635 ; 899389cdH
  00622	c7 45 e0 88 9c
	9f 83		 mov	 DWORD PTR ___encStr$508143[ebp+24], -2086691704 ; 839f9c88H
  00629	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$508143[ebp]
  0062c	c7 45 e4 82 82
	c2 00		 mov	 DWORD PTR ___encStr$508143[ebp+28], 12747394 ; 00c28282H
  00633	59		 pop	 ecx
$LL1282@OnConnect:
  00634	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0063a	83 c0 04	 add	 eax, 4
  0063d	49		 dec	 ecx
  0063e	75 f4		 jne	 SHORT $LL1282@OnConnect
  00640	6a 1c		 push	 28			; 0000001cH
  00642	5e		 pop	 esi
$LL1279@OnConnect:
  00643	8b c6		 mov	 eax, esi
  00645	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0064a	79 05		 jns	 SHORT $LN1382@OnConnect
  0064c	48		 dec	 eax
  0064d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00650	40		 inc	 eax
$LN1382@OnConnect:
  00651	b1 ed		 mov	 cl, -19			; ffffffedH
  00653	2a c8		 sub	 cl, al
  00655	30 4c 35 c8	 xor	 BYTE PTR ___encStr$508143[ebp+esi], cl
  00659	46		 inc	 esi
  0065a	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  0065d	7c e4		 jl	 SHORT $LL1279@OnConnect
  0065f	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00665	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H
  0066b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00671	50		 push	 eax
  00672	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$508143[ebp]

; 588  : 		}
; 589  : 		break;

  00675	e9 d2 fb ff ff	 jmp	 $LN1389@OnConnect
$LN507@OnConnect:

; 590  : 	case CONNECT_EXPIRE_KEY:
; 591  : 		g_iErrorNumber = 309;
; 592  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(6) );

  0067a	53		 push	 ebx
  0067b	6a 06		 push	 6
  0067d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00682	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  00687	c7 05 00 00 00
	00 35 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 309 ; g_iErrorNumber, 00000135H
  00691	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00697	8b c8		 mov	 ecx, eax
  00699	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0069f	50		 push	 eax
  006a0	68 00 08 00 00	 push	 2048			; 00000800H
  006a5	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  006aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  006b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b3	6a 06		 push	 6

; 593  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (expire key)", m_szMyIP.c_str());

  006b5	c7 45 cc c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$508296[ebp], -1497063480 ; a6c49fc8H
  006bc	c7 45 d0 82 8b
	82 84		 mov	 DWORD PTR ___encStr$508296[ebp+4], -2071819390 ; 84828b82H
  006c3	c7 45 d4 cd aa
	8a 83		 mov	 DWORD PTR ___encStr$508296[ebp+8], -2088064307 ; 838aaacdH
  006ca	c7 45 d8 81 cc
	c3 8f		 mov	 DWORD PTR ___encStr$508296[ebp+12], -1882993535 ; 8fc3cc81H
  006d1	c7 45 dc 95 9c
	82 98		 mov	 DWORD PTR ___encStr$508296[ebp+16], -1736270699 ; 98829c95H
  006d8	c7 45 e0 88 cc
	80 8f		 mov	 DWORD PTR ___encStr$508296[ebp+20], -1887384440 ; 8f80cc88H
  006df	66 c7 45 e4 94
	c5		 mov	 WORD PTR ___encStr$508296[ebp+24], 50580 ; 0000c594H
  006e5	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$508296[ebp]
  006e8	88 5d e6	 mov	 BYTE PTR ___encStr$508296[ebp+26], bl
  006eb	59		 pop	 ecx
$LL1290@OnConnect:
  006ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  006f2	83 c0 04	 add	 eax, 4
  006f5	49		 dec	 ecx
  006f6	75 f4		 jne	 SHORT $LL1290@OnConnect
  006f8	6a 18		 push	 24			; 00000018H
  006fa	5e		 pop	 esi
$LL1287@OnConnect:
  006fb	8b c6		 mov	 eax, esi
  006fd	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00702	79 05		 jns	 SHORT $LN1383@OnConnect
  00704	48		 dec	 eax
  00705	83 c8 fc	 or	 eax, -4			; fffffffcH
  00708	40		 inc	 eax
$LN1383@OnConnect:
  00709	b1 ed		 mov	 cl, -19			; ffffffedH
  0070b	2a c8		 sub	 cl, al
  0070d	30 4c 35 cc	 xor	 BYTE PTR ___encStr$508296[ebp+esi], cl
  00711	46		 inc	 esi
  00712	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  00715	7c e4		 jl	 SHORT $LL1287@OnConnect
  00717	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0071d	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H
  00723	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00729	50		 push	 eax
  0072a	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$508296[ebp]

; 594  : 		break;

  0072d	e9 1a fb ff ff	 jmp	 $LN1389@OnConnect
$LN407@OnConnect:

; 595  : 	case CONNECT_EXITING_SERVER:
; 596  : 		g_iErrorNumber = 310;
; 597  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(7) );

  00732	53		 push	 ebx
  00733	6a 07		 push	 7
  00735	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0073a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  0073f	c7 05 00 00 00
	00 36 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 310 ; g_iErrorNumber, 00000136H
  00749	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0074f	8b c8		 mov	 ecx, eax
  00751	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00757	50		 push	 eax
  00758	68 00 08 00 00	 push	 2048			; 00000800H
  0075d	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  00762	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  00768	83 c4 0c	 add	 esp, 12			; 0000000cH
  0076b	6a 07		 push	 7

; 598  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (exiting server)", m_szMyIP.c_str());

  0076d	c7 45 c8 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$508449[ebp], -1497063480 ; a6c49fc8H
  00774	c7 45 cc 82 8b
	82 84		 mov	 DWORD PTR ___encStr$508449[ebp+4], -2071819390 ; 84828b82H
  0077b	c7 45 d0 cd aa
	8a 83		 mov	 DWORD PTR ___encStr$508449[ebp+8], -2088064307 ; 838aaacdH
  00782	c7 45 d4 81 cc
	c3 8f		 mov	 DWORD PTR ___encStr$508449[ebp+12], -1882993535 ; 8fc3cc81H
  00789	c7 45 d8 95 85
	9f 83		 mov	 DWORD PTR ___encStr$508449[ebp+16], -2086697579 ; 839f8595H
  00790	c7 45 dc 83 8b
	cb 99		 mov	 DWORD PTR ___encStr$508449[ebp+20], -1714713725 ; 99cb8b83H
  00797	c7 45 e0 88 9e
	9d 8f		 mov	 DWORD PTR ___encStr$508449[ebp+24], -1885495672 ; 8f9d9e88H
  0079e	66 c7 45 e4 9f
	c5		 mov	 WORD PTR ___encStr$508449[ebp+28], 50591 ; 0000c59fH
  007a4	8d 45 c8	 lea	 eax, DWORD PTR ___encStr$508449[ebp]
  007a7	88 5d e6	 mov	 BYTE PTR ___encStr$508449[ebp+30], bl
  007aa	59		 pop	 ecx
$LL1298@OnConnect:
  007ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  007b1	83 c0 04	 add	 eax, 4
  007b4	49		 dec	 ecx
  007b5	75 f4		 jne	 SHORT $LL1298@OnConnect
  007b7	6a 1c		 push	 28			; 0000001cH
  007b9	5e		 pop	 esi
$LL1295@OnConnect:
  007ba	8b c6		 mov	 eax, esi
  007bc	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  007c1	79 05		 jns	 SHORT $LN1384@OnConnect
  007c3	48		 dec	 eax
  007c4	83 c8 fc	 or	 eax, -4			; fffffffcH
  007c7	40		 inc	 eax
$LN1384@OnConnect:
  007c8	b1 ed		 mov	 cl, -19			; ffffffedH
  007ca	2a c8		 sub	 cl, al
  007cc	30 4c 35 c8	 xor	 BYTE PTR ___encStr$508449[ebp+esi], cl
  007d0	46		 inc	 esi
  007d1	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  007d4	7c e4		 jl	 SHORT $LL1295@OnConnect

; 599  : 		break;

  007d6	e9 1b fb ff ff	 jmp	 $LN1391@OnConnect
$LN307@OnConnect:

; 600  : 	case CONNECT_WRONG_CLIENT_VER:
; 601  : 		g_iErrorNumber = 312;
; 602  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(8) );

  007db	53		 push	 ebx
  007dc	6a 08		 push	 8
  007de	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  007e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  007e8	c7 05 00 00 00
	00 38 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 312 ; g_iErrorNumber, 00000138H
  007f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  007f8	8b c8		 mov	 ecx, eax
  007fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00800	50		 push	 eax
  00801	68 00 08 00 00	 push	 2048			; 00000800H
  00806	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  0080b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  00811	83 c4 0c	 add	 esp, 12			; 0000000cH
  00814	6a 09		 push	 9

; 603  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (wrong client version)", m_szMyIP.c_str());

  00816	c7 45 c4 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$508602[ebp], -1497063480 ; a6c49fc8H
  0081d	c7 45 c8 82 8b
	82 84		 mov	 DWORD PTR ___encStr$508602[ebp+4], -2071819390 ; 84828b82H
  00824	c7 45 cc cd aa
	8a 83		 mov	 DWORD PTR ___encStr$508602[ebp+8], -2088064307 ; 838aaacdH
  0082b	c7 45 d0 81 cc
	c3 9d		 mov	 DWORD PTR ___encStr$508602[ebp+12], -1648112511 ; 9dc3cc81H
  00832	c7 45 d4 9f 83
	85 8d		 mov	 DWORD PTR ___encStr$508602[ebp+16], -1920629857 ; 8d85839fH
  00839	c7 45 d8 cd 8f
	87 83		 mov	 DWORD PTR ___encStr$508602[ebp+20], -2088267827 ; 83878fcdH
  00840	c7 45 dc 88 82
	9f ca		 mov	 DWORD PTR ___encStr$508602[ebp+24], -895516024 ; ca9f8288H
  00847	c7 45 e0 9b 89
	99 99		 mov	 DWORD PTR ___encStr$508602[ebp+28], -1717991013 ; 9999899bH
  0084e	c7 45 e4 84 83
	85 c3		 mov	 DWORD PTR ___encStr$508602[ebp+32], -1014660220 ; c3858384H
  00855	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$508602[ebp]
  00858	88 5d e8	 mov	 BYTE PTR ___encStr$508602[ebp+36], bl
  0085b	59		 pop	 ecx
$LL1306@OnConnect:
  0085c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00862	83 c0 04	 add	 eax, 4
  00865	49		 dec	 ecx
  00866	75 f4		 jne	 SHORT $LL1306@OnConnect
$LN1393@OnConnect:
  00868	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0086e	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H
  00874	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0087a	50		 push	 eax
  0087b	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$508602[ebp]

; 604  : 		break;

  0087e	e9 c9 f9 ff ff	 jmp	 $LN1389@OnConnect
$LN207@OnConnect:

; 605  : 	case CONNECT_WRONG_LOCAL_VER:
; 606  : 		g_iErrorNumber = 323;
; 607  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), STR(9) );

  00883	53		 push	 ebx
  00884	6a 09		 push	 9
  00886	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0088b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LEFKMNIO@CLogin?3?3OnConnect?$AA@
  00890	c7 05 00 00 00
	00 43 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 323 ; g_iErrorNumber, 00000143H
  0089a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  008a0	8b c8		 mov	 ecx, eax
  008a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  008a8	50		 push	 eax
  008a9	68 00 08 00 00	 push	 2048			; 00000800H
  008ae	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  008b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  008b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  008bc	6a 09		 push	 9

; 608  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (wrong client version)", m_szMyIP.c_str());

  008be	c7 45 c4 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$508755[ebp], -1497063480 ; a6c49fc8H
  008c5	c7 45 c8 82 8b
	82 84		 mov	 DWORD PTR ___encStr$508755[ebp+4], -2071819390 ; 84828b82H
  008cc	c7 45 cc cd aa
	8a 83		 mov	 DWORD PTR ___encStr$508755[ebp+8], -2088064307 ; 838aaacdH
  008d3	c7 45 d0 81 cc
	c3 9d		 mov	 DWORD PTR ___encStr$508755[ebp+12], -1648112511 ; 9dc3cc81H
  008da	c7 45 d4 9f 83
	85 8d		 mov	 DWORD PTR ___encStr$508755[ebp+16], -1920629857 ; 8d85839fH
  008e1	c7 45 d8 cd 8f
	87 83		 mov	 DWORD PTR ___encStr$508755[ebp+20], -2088267827 ; 83878fcdH
  008e8	c7 45 dc 88 82
	9f ca		 mov	 DWORD PTR ___encStr$508755[ebp+24], -895516024 ; ca9f8288H
  008ef	c7 45 e0 9b 89
	99 99		 mov	 DWORD PTR ___encStr$508755[ebp+28], -1717991013 ; 9999899bH
  008f6	c7 45 e4 84 83
	85 c3		 mov	 DWORD PTR ___encStr$508755[ebp+32], -1014660220 ; c3858384H
  008fd	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$508755[ebp]
  00900	88 5d e8	 mov	 BYTE PTR ___encStr$508755[ebp+36], bl
  00903	59		 pop	 ecx
$LL1314@OnConnect:
  00904	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0090a	83 c0 04	 add	 eax, 4
  0090d	49		 dec	 ecx
  0090e	75 f4		 jne	 SHORT $LL1314@OnConnect

; 609  : 		break;

  00910	e9 53 ff ff ff	 jmp	 $LN1393@OnConnect
$LN107@OnConnect:

; 610  : 	case CONNECT_GAMESERVER_FULL:
; 611  : 		g_iErrorNumber = 329;
; 612  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), "Gameserver is full.\r\n\r\n(Error:329)" );

  00915	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EBKALEKF@Gameserver?5is?5full?4?$AN?6?$AN?6?$CIError?332@
  0091a	68 00 08 00 00	 push	 2048			; 00000800H
  0091f	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  00924	c7 05 00 00 00
	00 49 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 329 ; g_iErrorNumber, 00000149H
  0092e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ
  00934	83 c4 0c	 add	 esp, 12			; 0000000cH
  00937	6a 08		 push	 8

; 613  : 		StringCbPrintf_e(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (Gameserver is full)", m_szMyIP.c_str());

  00939	c7 45 c4 c8 9f
	c4 a6		 mov	 DWORD PTR ___encStr$508908[ebp], -1497063480 ; a6c49fc8H
  00940	c7 45 c8 82 8b
	82 84		 mov	 DWORD PTR ___encStr$508908[ebp+4], -2071819390 ; 84828b82H
  00947	c7 45 cc cd aa
	8a 83		 mov	 DWORD PTR ___encStr$508908[ebp+8], -2088064307 ; 838aaacdH
  0094e	c7 45 d0 81 cc
	c3 ad		 mov	 DWORD PTR ___encStr$508908[ebp+12], -1379677055 ; adc3cc81H
  00955	c7 45 d4 8c 81
	8e 99		 mov	 DWORD PTR ___encStr$508908[ebp+16], -1718713972 ; 998e818cH
  0095c	c7 45 d8 88 9e
	9d 8f		 mov	 DWORD PTR ___encStr$508908[ebp+20], -1885495672 ; 8f9d9e88H
  00963	c7 45 dc 9f cc
	82 99		 mov	 DWORD PTR ___encStr$508908[ebp+24], -1719481185 ; 9982cc9fH
  0096a	c7 45 e0 cd 8a
	9e 86		 mov	 DWORD PTR ___encStr$508908[ebp+28], -2036430131 ; 869e8acdH
  00971	66 c7 45 e4 81
	c5		 mov	 WORD PTR ___encStr$508908[ebp+32], 50561 ; 0000c581H
  00977	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$508908[ebp]
  0097a	88 5d e6	 mov	 BYTE PTR ___encStr$508908[ebp+34], bl
  0097d	59		 pop	 ecx
$LL1322@OnConnect:
  0097e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00984	83 c0 04	 add	 eax, 4
  00987	49		 dec	 ecx
  00988	75 f4		 jne	 SHORT $LL1322@OnConnect
  0098a	6a 20		 push	 32			; 00000020H
  0098c	5e		 pop	 esi
$LL1319@OnConnect:
  0098d	8b c6		 mov	 eax, esi
  0098f	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00994	79 05		 jns	 SHORT $LN1385@OnConnect
  00996	48		 dec	 eax
  00997	83 c8 fc	 or	 eax, -4			; fffffffcH
  0099a	40		 inc	 eax
$LN1385@OnConnect:
  0099b	b1 ed		 mov	 cl, -19			; ffffffedH
  0099d	2a c8		 sub	 cl, al
  0099f	30 4c 35 c4	 xor	 BYTE PTR ___encStr$508908[ebp+esi], cl
  009a3	46		 inc	 esi
  009a4	83 fe 22	 cmp	 esi, 34			; 00000022H
  009a7	7c e4		 jl	 SHORT $LL1319@OnConnect
  009a9	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  009af	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H

; 614  : 		break;

  009b5	e9 5f fa ff ff	 jmp	 $LN1392@OnConnect
$LN7@OnConnect:

; 615  : 	case CONNECT_BLOCK_IP:
; 616  : 		g_iErrorNumber = 329;
; 617  : 		SafeSprintf( g_szErrorLog, sizeof(g_szErrorLog), "ip is blocked.\r\n\r\n(Error:329)" );

  009ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DKAIBPDO@ip?5is?5blocked?4?$AN?6?$AN?6?$CIError?3329?$CJ?$AA@
  009bf	68 00 08 00 00	 push	 2048			; 00000800H
  009c4	68 00 00 00 00	 push	 OFFSET ?g_szErrorLog@@3PADA ; g_szErrorLog
  009c9	c7 05 00 00 00
	00 49 01 00 00	 mov	 DWORD PTR ?g_iErrorNumber@@3HA, 329 ; g_iErrorNumber, 00000149H
  009d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBDZZ

; 618  : 		StringCbPrintf(szErrorLog, sizeof(szErrorLog), "%s/Login Fail (ip is blocked)", m_szMyIP.c_str());		

  009d9	8b 8d 78 fd fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  009df	83 c4 0c	 add	 esp, 12			; 0000000cH
  009e2	81 c1 24 02 00
	00		 add	 ecx, 548		; 00000224H
  009e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  009ee	50		 push	 eax
  009ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NHEEDHHK@?$CFs?1Login?5Fail?5?$CIip?5is?5blocked?$CJ?$AA@
$LN1387@OnConnect:
  009f4	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$[ebp]
  009fa	68 04 01 00 00	 push	 260			; 00000104H
  009ff	50		 push	 eax
  00a00	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA
$LN1386@OnConnect:
  00a05	83 c4 10	 add	 esp, 16			; 00000010H
$LN1214@OnConnect:

; 619  : 		break;
; 620  : 	}
; 621  : 
; 622  : 	if( iLoginResult == CONNECT_ID_ALREADY ) // 로그만 전송 후 리턴

  00a08	6a 04		 push	 4
  00a0a	5f		 pop	 edi
  00a0b	39 bd 70 fd fe
	ff		 cmp	 DWORD PTR _iLoginResult$[ebp], edi
  00a11	75 6c		 jne	 SHORT $LN6@OnConnect

; 623  : 	{
; 624  :  		SP2Packet kPacket( LUPK_LOG );

  00a13	68 00 90 00 00	 push	 36864			; 00009000H
  00a18	8d 8d 7c fd fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509061[ebp]
  00a1e	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 625  :  		kPacket << "CheckError";    // 로그 파일 타입

  00a23	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JLPANJNL@CheckError?$AA@
  00a28	8d 8d 7c fd fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509061[ebp]
  00a2e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00a32	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PBD@Z ; SP2Packet::operator<<

; 626  :  		kPacket << szErrorLog;

  00a37	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$[ebp]
  00a3d	50		 push	 eax
  00a3e	8d 8d 7c fd fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509061[ebp]
  00a44	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<

; 627  :  		kPacket << g_iErrorNumber;  // 오류번호

  00a49	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iErrorNumber@@3HA ; g_iErrorNumber
  00a4f	8d 8d 7c fd fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509061[ebp]
  00a55	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 628  :  		kPacket << true;            // write db

  00a5a	6a 01		 push	 1
  00a5c	8d 8d 7c fd fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509061[ebp]
  00a62	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 629  :  		P2PNetwork::SendLog(kPacket);

  00a67	8d 85 7c fd fe
	ff		 lea	 eax, DWORD PTR _kPacket$509061[ebp]
  00a6d	50		 push	 eax
  00a6e	e8 00 00 00 00	 call	 ?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendLog
  00a73	59		 pop	 ecx

; 630  : 		return; 

  00a74	8d 8d 7c fd fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509061[ebp]
  00a7a	e9 df 00 00 00	 jmp	 $LN1390@OnConnect
$LN6@OnConnect:

; 631  : 	}
; 632  : 
; 633  : 	ZeroMemory( m_szLoginKey, sizeof( m_szLoginKey ) );

  00a7f	8b b5 78 fd fe
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00a85	68 08 02 00 00	 push	 520			; 00000208H
  00a8a	53		 push	 ebx
  00a8b	56		 push	 esi
  00a8c	e8 00 00 00 00	 call	 _memset
  00a91	83 c4 0c	 add	 esp, 12			; 0000000cH

; 634  : 
; 635  : 	if( iLoginResult != CONNECT_OK )

  00a94	83 bd 70 fd fe
	ff 01		 cmp	 DWORD PTR _iLoginResult$[ebp], 1
  00a9b	0f 84 c5 00 00
	00		 je	 $LN5@OnConnect

; 636  : 	{
; 637  : 		switch( iLoginResult )

  00aa1	83 bd 70 fd fe
	ff 0b		 cmp	 DWORD PTR _iLoginResult$[ebp], 11 ; 0000000bH
  00aa8	75 0c		 jne	 SHORT $LN1@OnConnect

; 638  : 		{
; 639  : 		case CONNECT_BLOCK_IP:
; 640  : 			SendMsgToAutoUpgrade(WM_MY_MSG_C_IP_BLOCK);

  00aaa	68 31 05 00 00	 push	 1329			; 00000531H
  00aaf	8b ce		 mov	 ecx, esi
  00ab1	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade
$LN1@OnConnect:

; 641  : 		default:
; 642  : 			SendMsgToAutoUpgrade(WM_MY_MSG_C_ERROR);

  00ab6	68 2f 05 00 00	 push	 1327			; 0000052fH
  00abb	8b ce		 mov	 ecx, esi
  00abd	e8 00 00 00 00	 call	 ?SendMsgToAutoUpgrade@CLogin@@QAEXK@Z ; CLogin::SendMsgToAutoUpgrade

; 643  : 		}
; 644  : 		
; 645  : 		m_eLoginState = LS_RECEIVE_MSG_ERROR;
; 646  : 		Setting::Initialize("error");

  00ac2	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  00ac7	8d 4d dc	 lea	 ecx, DWORD PTR $T512756[ebp]
  00aca	89 be 08 02 00
	00		 mov	 DWORD PTR [esi+520], edi
  00ad0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00ad6	8d 45 dc	 lea	 eax, DWORD PTR $T512756[ebp]
  00ad9	50		 push	 eax
  00ada	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00ade	e8 00 00 00 00	 call	 ?Initialize@Setting@@SAXABVioHashString@@@Z ; Setting::Initialize
  00ae3	59		 pop	 ecx
  00ae4	8d 4d dc	 lea	 ecx, DWORD PTR $T512756[ebp]
  00ae7	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00aea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 647  : 		g_bHappenError = true;
; 648  : 
; 649  : 		SP2Packet kPacket( LUPK_LOG );

  00af0	68 00 90 00 00	 push	 36864			; 00009000H
  00af5	8d 8d 94 7d ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509070[ebp]
  00afb	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bHappenError@@3_NA, 1 ; g_bHappenError
  00b02	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 650  : 		kPacket << "CheckError";    // 로그 파일 타입

  00b07	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JLPANJNL@CheckError?$AA@
  00b0c	8d 8d 94 7d ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509070[ebp]
  00b12	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00b16	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PBD@Z ; SP2Packet::operator<<

; 651  : 		kPacket << szErrorLog;

  00b1b	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szErrorLog$[ebp]
  00b21	50		 push	 eax
  00b22	8d 8d 94 7d ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509070[ebp]
  00b28	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<

; 652  : 		kPacket << g_iErrorNumber;  // 오류번호

  00b2d	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iErrorNumber@@3HA ; g_iErrorNumber
  00b33	8d 8d 94 7d ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509070[ebp]
  00b39	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 653  : 		kPacket << true;            // write db

  00b3e	6a 01		 push	 1
  00b40	8d 8d 94 7d ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509070[ebp]
  00b46	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 654  : 		P2PNetwork::SendLog(kPacket);

  00b4b	8d 85 94 7d ff
	ff		 lea	 eax, DWORD PTR _kPacket$509070[ebp]
  00b51	50		 push	 eax
  00b52	e8 00 00 00 00	 call	 ?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendLog
  00b57	59		 pop	 ecx

; 655  : 	}

  00b58	8d 8d 94 7d ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509070[ebp]
$LN1390@OnConnect:
  00b5e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00b61	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN5@OnConnect:

; 656  : }

  00b66	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00b6a	8d 8d 60 fd fe
	ff		 lea	 ecx, DWORD PTR _szID$[ebp]
  00b70	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00b76	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b79	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b80	59		 pop	 ecx
  00b81	5f		 pop	 edi
  00b82	5e		 pop	 esi
  00b83	5b		 pop	 ebx
  00b84	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b87	33 cd		 xor	 ecx, ebp
  00b89	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b8e	c9		 leave
  00b8f	c2 04 00	 ret	 4
  00b92	8b ff		 npad	 2
$LN1394@OnConnect:
  00b94	00 00 00 00	 DD	 $LN1213@OnConnect
  00b98	00 00 00 00	 DD	 $LN1112@OnConnect
  00b9c	00 00 00 00	 DD	 $LN1012@OnConnect
  00ba0	00 00 00 00	 DD	 $LN912@OnConnect
  00ba4	00 00 00 00	 DD	 $LN810@OnConnect
  00ba8	00 00 00 00	 DD	 $LN507@OnConnect
  00bac	00 00 00 00	 DD	 $LN407@OnConnect
  00bb0	00 00 00 00	 DD	 $LN307@OnConnect
  00bb4	00 00 00 00	 DD	 $LN207@OnConnect
  00bb8	00 00 00 00	 DD	 $LN107@OnConnect
  00bbc	00 00 00 00	 DD	 $LN7@OnConnect
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$0:
  00000	8d 8d 60 fd fe
	ff		 lea	 ecx, DWORD PTR _szID$[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$1:
  0000c	8b 4d bc	 mov	 ecx, DWORD PTR $T512755[ebp]
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$2:
  00015	8d 4d dc	 lea	 ecx, DWORD PTR _sServerError$507826[ebp]
  00018	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$3:
  0001e	8d 8d 50 fd fe
	ff		 lea	 ecx, DWORD PTR _sError$507827[ebp]
  00024	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$4:
  0002a	8d 8d 7c fd fe
	ff		 lea	 ecx, DWORD PTR _kPacket$509061[ebp]
  00030	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$5:
  00035	8d 4d dc	 lea	 ecx, DWORD PTR $T512756[ebp]
  00038	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z$6:
  0003e	8d 8d 94 7d ff
	ff		 lea	 ecx, DWORD PTR _kPacket$509070[ebp]
  00044	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z:
  00049	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00050	8b 8a 4c fd fe
	ff		 mov	 ecx, DWORD PTR [edx-66228]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00060	33 c8		 xor	 ecx, eax
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z
  0006c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnConnect@CLogin@@QAEXAAVSP2Packet@@@Z ENDP		; CLogin::OnConnect
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 543  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 544  : 		_Tidy();

  00004	33 c0		 xor	 eax, eax

; 545  : 		assign(_Right, 0, npos);

  00006	6a ff		 push	 -1
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00015	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00018	88 06		 mov	 BYTE PTR [esi], al
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 546  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
_TEXT	ENDS
PUBLIC	??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0
__ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
$T513095 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T513095[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@Construct:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T513095[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 288  : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0e		 jmp	 SHORT $LN21@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	6a 00		 push	 0
  0000b	6a 01		 push	 1
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00014	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN21@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00017	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001a	75 ed		 jne	 SHORT $LL3@Destroy_ra
  0001c	5e		 pop	 esi

; 98   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z PROC ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z ENDP ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$513288 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$513288[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00027	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  0002b	83 45 08 1c	 add	 DWORD PTR __First$[ebp], 28 ; 0000001cH
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN50@Uninit_cop
$LL3@Uninit_cop:

; 379  : 		_Dest_val(_Al, _Next);

  00038	6a 01		 push	 1
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00041	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN50@Uninit_cop:

; 380  : 	_RERAISE;

  00044	6a 00		 push	 0
  00046	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00049	75 ed		 jne	 SHORT $LL3@Uninit_cop
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN51@Uninit_cop:
$LN4@Uninit_cop:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN49@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Cat$513410 = 12					; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	ff 75 0c	 push	 DWORD PTR __Cat$513410[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1271 : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$513419 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$513419[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
__Cat$513441 = -4					; size = 1
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	74 21		 je	 SHORT $LN10@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00012	ff 75 fc	 push	 DWORD PTR __Cat$513441[ebp]
  00015	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00018	50		 push	 eax
  00019	ff 76 04	 push	 DWORD PTR [esi+4]
  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00023	ff 36		 push	 DWORD PTR [esi]
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  0002d	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00030	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  00034	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00038	5e		 pop	 esi

; 1312 : 		}

  00039	c9		 leave
  0003a	c3		 ret	 0
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@0PAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@0PAV21@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$513462 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@0PAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$513462[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@0PAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$513552 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 1c		 push	 28			; 0000001cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$513552[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@0@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CLogin::ParseExpandValue
EXTRN	__imp_?Split@ioStringConverter@@SAABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0H@Z:PROC
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szININame$507067 = -116				; size = 16
_szNexonPassport$ = -100				; size = 16
_szBillingUserKey$ = -84				; size = 16
_vStringVector$ = -68					; size = 16
_iSize$ = -52						; size = 4
_i$507062 = -48						; size = 4
_szDelims$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
_rszExpandValue$ = 8					; size = 4
?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CLogin::ParseExpandValue, COMDAT
; _this$ = ecx

; 197  : {

  00000	6a 68		 push	 104			; 00000068H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR _rszExpandValue$[ebp]

; 198  : 	// expand value안에 확장 타입이 있음
; 199  : 	// EDEW3940FVDP4950,10,20,30,1,autoupgrade_info.ini,300,39eidko2043049dkk
; 200  : 	// EDEW3940FVDP4950 : check value / 
; 201  : 	// 10 : 램 512M 이하에서 쓰레기 파일이 10메가를 넘으면 쓰레기 파일 정리 (10 숫자는 가변)
; 202  : 	// 20 : 램 512M~1G  에서 쓰레기 파일이 20메가를 넘으면 쓰레기 파일 정리 (20 숫자는 가변)
; 203  : 	// 30 : 램 1G   이상에서 쓰레기 파일이 30메가를 넘으면 쓰레기 파일 정리 (30 숫자는 가변)
; 204  : 	// 1  : 최적화를 클릭해도 최적화를 하지 않는 기준 용량 나타내면 1메가   (1  숫자는 가변)
; 205  : 	// autoupgrade_info.ini : ini 파일 이름 ( 채널링 마다 다르다 )
; 206  : 	// 300: ChannelingType 
; 207  : 	// 39eidko2043049dkk : mgame OTP 값.
; 208  : 	// 1 : 게시판 사용 가능 여부 1 : 사용 가능     0 : 사용 불가 ( 일반유저는 무조건 1 )
; 209  : 	// 119483910 : 로컬 타입 ( LocalType )
; 210  : 	// 1a1204966af942deb5d299bf19741f02 : OGP Key
; 211  : 	// 스팀 아이디
; 212  : 	
; 213  : 	// parse
; 214  : 	enum 
; 215  : 	{ 
; 216  : 		INI_NAME_POS = 5, 
; 217  : 		NEXON_PASSPORT = 9,
; 218  : 		OGP_KEY_POS = 10,
; 219  : #ifdef STEAM_ATTACH
; 220  : 		STEAM_ENABLE_POS = 11,
; 221  : #endif
; 222  : 	};
; 223  : 
; 224  : 	std::string szDelims = CMD_EXPAND_SECTION_TOKEN;

  0000f	6a 01		 push	 1
  00011	33 db		 xor	 ebx, ebx
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  00018	8d 4d d4	 lea	 ecx, DWORD PTR _szDelims$[ebp]
  0001b	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _szDelims$[ebp+20], 15 ; 0000000fH
  00022	89 5d e4	 mov	 DWORD PTR _szDelims$[ebp+16], ebx
  00025	88 5d d4	 mov	 BYTE PTR _szDelims$[ebp], bl
  00028	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 225  : 	StringVector vStringVector =  ioStringConverter::Split( rszExpandValue, szDelims );

  0002d	53		 push	 ebx
  0002e	8d 45 d4	 lea	 eax, DWORD PTR _szDelims$[ebp]
  00031	50		 push	 eax
  00032	56		 push	 esi
  00033	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Split@ioStringConverter@@SAABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0H@Z
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	50		 push	 eax
  00040	8d 4d bc	 lea	 ecx, DWORD PTR _vStringVector$[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 226  : 	int iSize = vStringVector.size();

  00048	8b 45 c0	 mov	 eax, DWORD PTR _vStringVector$[ebp+4]
  0004b	2b 45 bc	 sub	 eax, DWORD PTR _vStringVector$[ebp]
  0004e	6a 1c		 push	 28			; 0000001cH
  00050	99		 cdq
  00051	59		 pop	 ecx
  00052	f7 f9		 idiv	 ecx

; 227  : 	ioHashString szBillingUserKey;

  00054	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0005a	8d 4d ac	 lea	 ecx, DWORD PTR _szBillingUserKey$[ebp]
  0005d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00061	89 45 cc	 mov	 DWORD PTR _iSize$[ebp], eax
  00064	ff d6		 call	 esi

; 228  : 	ioHashString szNexonPassport;

  00066	8d 4d 9c	 lea	 ecx, DWORD PTR _szNexonPassport$[ebp]
  00069	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006d	ff d6		 call	 esi

; 229  : #ifdef STEAM_ATTACH
; 230  : 	ioHashString szSteamEnable;
; 231  : #endif
; 232  : 	for (int i = 0; i < iSize ; i++)

  0006f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00075	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00079	89 5d d0	 mov	 DWORD PTR _i$507062[ebp], ebx
  0007c	39 5d cc	 cmp	 DWORD PTR _iSize$[ebp], ebx
  0007f	0f 8e 90 00 00
	00		 jle	 $LN7@ParseExpan
  00085	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
$LL9@ParseExpan:

; 233  : 	{
; 234  : 		if( i == INI_NAME_POS )

  0008b	83 7d d0 05	 cmp	 DWORD PTR _i$507062[ebp], 5
  0008f	75 3e		 jne	 SHORT $LN6@ParseExpan

; 235  : 		{
; 236  : 			ioHashString szININame = vStringVector[i].c_str();

  00091	8b 45 bc	 mov	 eax, DWORD PTR _vStringVector$[ebp]
  00094	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  00099	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0009d	72 02		 jb	 SHORT $LN55@ParseExpan
  0009f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@ParseExpan:
  000a1	50		 push	 eax
  000a2	8d 4d 8c	 lea	 ecx, DWORD PTR _szININame$507067[ebp]
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000ab	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 237  : 			g_App.SetAutoupgradeInfoININame( szININame );

  000af	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  000b4	8d 4d 8c	 lea	 ecx, DWORD PTR _szININame$507067[ebp]
  000b7	51		 push	 ecx
  000b8	8d 88 08 06 00
	00		 lea	 ecx, DWORD PTR [eax+1544]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 238  : 		}

  000c4	8d 4d 8c	 lea	 ecx, DWORD PTR _szININame$507067[ebp]
  000c7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000cb	ff d6		 call	 esi
  000cd	eb 37		 jmp	 SHORT $LN8@ParseExpan
$LN6@ParseExpan:

; 239  : 		else if( i == NEXON_PASSPORT )

  000cf	83 7d d0 09	 cmp	 DWORD PTR _i$507062[ebp], 9
  000d3	75 15		 jne	 SHORT $LN4@ParseExpan

; 240  : 		{
; 241  : 			szNexonPassport = vStringVector[i].c_str();

  000d5	8b 45 bc	 mov	 eax, DWORD PTR _vStringVector$[ebp]
  000d8	05 fc 00 00 00	 add	 eax, 252		; 000000fcH
  000dd	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000e1	72 02		 jb	 SHORT $LN65@ParseExpan
  000e3	8b 00		 mov	 eax, DWORD PTR [eax]
$LN65@ParseExpan:
  000e5	8d 4d 9c	 lea	 ecx, DWORD PTR _szNexonPassport$[ebp]
  000e8	eb 19		 jmp	 SHORT $LN86@ParseExpan
$LN4@ParseExpan:

; 242  : 		}
; 243  : 		else if( i == OGP_KEY_POS )

  000ea	83 7d d0 0a	 cmp	 DWORD PTR _i$507062[ebp], 10 ; 0000000aH
  000ee	75 16		 jne	 SHORT $LN8@ParseExpan

; 244  : 		{
; 245  : 			szBillingUserKey = vStringVector[i].c_str();

  000f0	8b 45 bc	 mov	 eax, DWORD PTR _vStringVector$[ebp]
  000f3	05 18 01 00 00	 add	 eax, 280		; 00000118H
  000f8	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000fc	72 02		 jb	 SHORT $LN73@ParseExpan
  000fe	8b 00		 mov	 eax, DWORD PTR [eax]
$LN73@ParseExpan:
  00100	8d 4d ac	 lea	 ecx, DWORD PTR _szBillingUserKey$[ebp]
$LN86@ParseExpan:
  00103	50		 push	 eax
  00104	ff d7		 call	 edi
$LN8@ParseExpan:

; 229  : #ifdef STEAM_ATTACH
; 230  : 	ioHashString szSteamEnable;
; 231  : #endif
; 232  : 	for (int i = 0; i < iSize ; i++)

  00106	ff 45 d0	 inc	 DWORD PTR _i$507062[ebp]
  00109	8b 45 d0	 mov	 eax, DWORD PTR _i$507062[ebp]
  0010c	3b 45 cc	 cmp	 eax, DWORD PTR _iSize$[ebp]
  0010f	0f 8c 76 ff ff
	ff		 jl	 $LL9@ParseExpan
$LN7@ParseExpan:

; 246  : 		}
; 247  : #ifdef STEAM_ATTACH
; 248  : 		else if( i == STEAM_ENABLE_POS )
; 249  : 		{
; 250  : 			szSteamEnable = vStringVector[i].c_str();
; 251  : 			//g_App.SteamEnable(szSteamEnable);
; 252  : 		}
; 253  : #endif
; 254  : 	}
; 255  : 
; 256  : 	ioLocalParent *pLocal = g_LocalMgr.GetLocal( ioLocalManager::GetLocalType() );

  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?GetSingleton@ioLocalManager@@SAAAV1@XZ ; ioLocalManager::GetSingleton
  00121	8b c8		 mov	 ecx, eax
  00123	e8 00 00 00 00	 call	 ?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z ; ioLocalManager::GetLocal

; 257  : 	if( pLocal )

  00128	3b c3		 cmp	 eax, ebx
  0012a	74 0b		 je	 SHORT $LN1@ParseExpan

; 258  : 	{
; 259  : 		pLocal->SetLoginData( szBillingUserKey );

  0012c	8b 10		 mov	 edx, DWORD PTR [eax]
  0012e	8d 4d ac	 lea	 ecx, DWORD PTR _szBillingUserKey$[ebp]
  00131	51		 push	 ecx
  00132	8b c8		 mov	 ecx, eax
  00134	ff 52 4c	 call	 DWORD PTR [edx+76]
$LN1@ParseExpan:

; 260  : 	}
; 261  : }

  00137	8d 4d 9c	 lea	 ecx, DWORD PTR _szNexonPassport$[ebp]
  0013a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013e	ff d6		 call	 esi
  00140	8d 4d ac	 lea	 ecx, DWORD PTR _szBillingUserKey$[ebp]
  00143	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00147	ff d6		 call	 esi
  00149	8d 4d bc	 lea	 ecx, DWORD PTR _vStringVector$[ebp]
  0014c	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0014f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  00154	53		 push	 ebx
  00155	6a 01		 push	 1
  00157	8d 4d d4	 lea	 ecx, DWORD PTR _szDelims$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0015f	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00164	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _szDelims$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR _vStringVector$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d ac	 lea	 ecx, DWORD PTR _szBillingUserKey$[ebp]
  00013	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00019	8d 4d 9c	 lea	 ecx, DWORD PTR _szNexonPassport$[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00022	8d 4d 8c	 lea	 ecx, DWORD PTR _szININame$507067[ebp]
  00025	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CLogin::ParseExpandValue
PUBLIC	??_C@_0BB@LLBBMPIK@EDEW3940FVDP4950?$AA@	; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	_iPortOnCmd$GSCopy$
PUBLIC	_szIPOnCmd$GSCopy$
PUBLIC	_szOptinosOnCmd$GSCopy$
PUBLIC	_szKeyOnCmd$GSCopy$
PUBLIC	?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z ; CLogin::ParseCmd
EXTRN	__imp__strncmp:PROC
EXTRN	__imp___atoi64:PROC
;	COMDAT ??_C@_0BB@LLBBMPIK@EDEW3940FVDP4950?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BB@LLBBMPIK@EDEW3940FVDP4950?$AA@ DB 'EDEW3940FVDP4950', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$3
__ehfuncinfo$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\login.cpp
xdata$x	ENDS
;	COMDAT ?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z
_TEXT	SEGMENT
_szCheck$ = -412					; size = 16
_szIPOnCmd$GSCopy$ = -396				; size = 4
_iSize$ = -392						; size = 4
_iPortOnCmd$GSCopy$ = -388				; size = 4
_this$ = -384						; size = 4
_vStringVector$ = -380					; size = 16
_szKeyOnCmd$GSCopy$ = -364				; size = 4
_szOptinosOnCmd$GSCopy$ = -360				; size = 4
_iIPAndPort$ = -356					; size = 8
_szCopiedCmd$ = -348					; size = 28
_szDelims$ = -320					; size = 28
_szIP$ = -292						; size = 260
___encStr$506891 = -32					; size = 12
__$EHRec$ = -12						; size = 12
_szCmdLine$ = 8						; size = 4
_szKeyOnCmd$ = 12					; size = 4
_szOptinosOnCmd$ = 16					; size = 4
_szIPOnCmd$ = 20					; size = 4
_iPortOnCmd$ = 24					; size = 4
?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z PROC	; CLogin::ParseCmd, COMDAT
; _this$ = ecx

; 137  : {

  00000	68 90 01 00 00	 push	 400			; 00000190H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	89 8d 80 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  00015	8b 45 0c	 mov	 eax, DWORD PTR _szKeyOnCmd$[ebp]
  00018	8b 7d 08	 mov	 edi, DWORD PTR _szCmdLine$[ebp]

; 186  : 		return false;

  0001b	89 85 94 fe ff
	ff		 mov	 DWORD PTR _szKeyOnCmd$GSCopy$[ebp], eax
  00021	8b 45 10	 mov	 eax, DWORD PTR _szOptinosOnCmd$[ebp]
  00024	89 85 98 fe ff
	ff		 mov	 DWORD PTR _szOptinosOnCmd$GSCopy$[ebp], eax
  0002a	8b 45 14	 mov	 eax, DWORD PTR _szIPOnCmd$[ebp]
  0002d	89 85 74 fe ff
	ff		 mov	 DWORD PTR _szIPOnCmd$GSCopy$[ebp], eax
  00033	8b 45 18	 mov	 eax, DWORD PTR _iPortOnCmd$[ebp]
  00036	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _szCheck$[ebp]
  0003c	89 85 7c fe ff
	ff		 mov	 DWORD PTR _iPortOnCmd$GSCopy$[ebp], eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00048	6a 0f		 push	 15			; 0000000fH
  0004a	5e		 pop	 esi
  0004b	33 db		 xor	 ebx, ebx
  0004d	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00051	57		 push	 edi
  00052	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _szCopiedCmd$[ebp]
  00058	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0005b	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR _iIPAndPort$[ebp], xmm0
  00063	89 b5 b8 fe ff
	ff		 mov	 DWORD PTR _szCopiedCmd$[ebp+20], esi
  00069	89 9d b4 fe ff
	ff		 mov	 DWORD PTR _szCopiedCmd$[ebp+16], ebx
  0006f	88 9d a4 fe ff
	ff		 mov	 BYTE PTR _szCopiedCmd$[ebp], bl
  00075	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007a	6a 01		 push	 1
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
  00081	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szDelims$[ebp]
  00087	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008b	89 b5 d4 fe ff
	ff		 mov	 DWORD PTR _szDelims$[ebp+20], esi
  00091	89 9d d0 fe ff
	ff		 mov	 DWORD PTR _szDelims$[ebp+16], ebx
  00097	88 9d c0 fe ff
	ff		 mov	 BYTE PTR _szDelims$[ebp], bl
  0009d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a2	53		 push	 ebx
  000a3	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _szDelims$[ebp]
  000a9	50		 push	 eax
  000aa	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _szCopiedCmd$[ebp]
  000b0	50		 push	 eax
  000b1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Split@ioStringConverter@@SAABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0H@Z
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000be	50		 push	 eax
  000bf	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _vStringVector$[ebp]
  000c5	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  000ca	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _vStringVector$[ebp+4]
  000d0	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _vStringVector$[ebp]
  000d6	2b c1		 sub	 eax, ecx
  000d8	6a 1c		 push	 28			; 0000001cH
  000da	99		 cdq
  000db	5e		 pop	 esi
  000dc	f7 fe		 idiv	 esi
  000de	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000e4	33 f6		 xor	 esi, esi
  000e6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ea	89 85 78 fe ff
	ff		 mov	 DWORD PTR _iSize$[ebp], eax
  000f0	3b c3		 cmp	 eax, ebx
  000f2	0f 8e 92 00 00
	00		 jle	 $LN110@ParseCmd
$LL112@ParseCmd:

; 159  : 	{
; 160  : 		if( i == CT_EXPAND )

  000f8	3b f3		 cmp	 esi, ebx
  000fa	75 24		 jne	 SHORT $LN109@ParseCmd

; 161  : 		{
; 162  : 			szCheck = vStringVector[i].c_str();

  000fc	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00100	72 02		 jb	 SHORT $LN183@ParseCmd
  00102	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN183@ParseCmd:
  00104	51		 push	 ecx
  00105	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _szCheck$[ebp]
  0010b	ff d7		 call	 edi

; 163  : 			ParseExpandValue( vStringVector[i] );

  0010d	ff b5 84 fe ff
	ff		 push	 DWORD PTR _vStringVector$[ebp]
  00113	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?ParseExpandValue@CLogin@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CLogin::ParseExpandValue
  0011e	eb 57		 jmp	 SHORT $LN264@ParseCmd
$LN109@ParseCmd:

; 164  : 		}
; 165  : 		else if( i == CT_KEY )

  00120	83 fe 01	 cmp	 esi, 1
  00123	75 16		 jne	 SHORT $LN107@ParseCmd

; 166  : 			szKeyOnCmd = vStringVector[i].c_str();

  00125	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00128	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0012c	72 02		 jb	 SHORT $LN193@ParseCmd
  0012e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN193@ParseCmd:
  00130	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _szKeyOnCmd$GSCopy$[ebp]
$LN267@ParseCmd:
  00136	50		 push	 eax
  00137	ff d7		 call	 edi
  00139	eb 3c		 jmp	 SHORT $LN264@ParseCmd
$LN107@ParseCmd:

; 167  : 		else if( i == CT_OPTIONS )

  0013b	83 fe 02	 cmp	 esi, 2
  0013e	75 13		 jne	 SHORT $LN105@ParseCmd

; 168  : 			szOptinosOnCmd = vStringVector[i].c_str();

  00140	8d 41 38	 lea	 eax, DWORD PTR [ecx+56]
  00143	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00147	72 02		 jb	 SHORT $LN201@ParseCmd
  00149	8b 00		 mov	 eax, DWORD PTR [eax]
$LN201@ParseCmd:
  0014b	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _szOptinosOnCmd$GSCopy$[ebp]
  00151	eb e3		 jmp	 SHORT $LN267@ParseCmd
$LN105@ParseCmd:

; 169  : 		else if( i == CT_IPPORT )

  00153	83 fe 03	 cmp	 esi, 3
  00156	75 25		 jne	 SHORT $LN111@ParseCmd

; 170  : 			iIPAndPort = _atoi64( vStringVector[i].c_str() );

  00158	8d 41 54	 lea	 eax, DWORD PTR [ecx+84]
  0015b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0015f	72 02		 jb	 SHORT $LN209@ParseCmd
  00161	8b 00		 mov	 eax, DWORD PTR [eax]
$LN209@ParseCmd:
  00163	50		 push	 eax
  00164	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___atoi64
  0016a	59		 pop	 ecx
  0016b	89 85 9c fe ff
	ff		 mov	 DWORD PTR _iIPAndPort$[ebp], eax
  00171	89 95 a0 fe ff
	ff		 mov	 DWORD PTR _iIPAndPort$[ebp+4], edx
$LN264@ParseCmd:
  00177	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _vStringVector$[ebp]
$LN111@ParseCmd:

; 138  : 	// cmd : check key option gameserverid
; 139  : 	enum CmdType 
; 140  : 	{
; 141  : 		CT_EXPAND = 0,
; 142  : 		CT_KEY    = 1,
; 143  : 		CT_OPTIONS= 2,
; 144  : 		CT_IPPORT = 3,
; 145  : 	};
; 146  : 
; 147  : 	ioHashString szCheck;
; 148  : 	__int64 iIPAndPort = 0;
; 149  : 
; 150  : 	std::string szCopiedCmd = szCmdLine; 
; 151  : 	std::string szDelims    = CMD_SECTION_TOKEN;
; 152  : 	StringVector vStringVector = ioStringConverter::Split( szCopiedCmd, szDelims );
; 153  : 	int iSize = vStringVector.size();
; 154  : #ifdef LOCAL_DBG
; 155  : 	return true;
; 156  : #endif
; 157  : 	// cmd parsing
; 158  : 	for(int i = 0; i < iSize; i++)

  0017d	46		 inc	 esi
  0017e	3b b5 78 fe ff
	ff		 cmp	 esi, DWORD PTR _iSize$[ebp]
  00184	0f 8c 6e ff ff
	ff		 jl	 $LL112@ParseCmd
$LN110@ParseCmd:

; 171  : 	}
; 172  : 	
; 173  : 	unsigned char szIPAndPort[MAX_PATH];
; 174  : 	memset( szIPAndPort, 0, MAX_PATH );
; 175  : 	memcpy(szIPAndPort, &iIPAndPort, 8);
; 176  : 
; 177  : 	char szIP[MAX_PATH];
; 178  : 	StringCbPrintf_e(szIP, sizeof( szIP ), "%d.%d.%d.%d", szIPAndPort[0], szIPAndPort[1], szIPAndPort[2], szIPAndPort[3]);

  0018a	6a 02		 push	 2
  0018c	c7 45 e0 c8 88
	c5 cf		 mov	 DWORD PTR ___encStr$506891[ebp], -809137976 ; cfc588c8H
  00193	c7 45 e4 89 c2
	ce 8e		 mov	 DWORD PTR ___encStr$506891[ebp+4], -1899052407 ; 8ecec289H
  0019a	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$506891[ebp]
  0019d	c7 45 e8 c3 c9
	8f 00		 mov	 DWORD PTR ___encStr$506891[ebp+8], 9423299 ; 008fc9c3H
  001a4	59		 pop	 ecx
$LL216@ParseCmd:
  001a5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ab	83 c0 04	 add	 eax, 4
  001ae	49		 dec	 ecx
  001af	75 f4		 jne	 SHORT $LL216@ParseCmd
  001b1	6a 08		 push	 8
  001b3	5e		 pop	 esi
$LL213@ParseCmd:
  001b4	8b c6		 mov	 eax, esi
  001b6	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  001bb	79 05		 jns	 SHORT $LN263@ParseCmd
  001bd	48		 dec	 eax
  001be	83 c8 fc	 or	 eax, -4			; fffffffcH
  001c1	40		 inc	 eax
$LN263@ParseCmd:
  001c2	b1 ed		 mov	 cl, -19			; ffffffedH
  001c4	2a c8		 sub	 cl, al
  001c6	30 4c 35 e0	 xor	 BYTE PTR ___encStr$506891[ebp+esi], cl
  001ca	46		 inc	 esi
  001cb	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  001ce	7c e4		 jl	 SHORT $LL213@ParseCmd
  001d0	0f b6 85 9f fe
	ff ff		 movzx	 eax, BYTE PTR _iIPAndPort$[ebp+3]
  001d7	50		 push	 eax
  001d8	0f b6 85 9e fe
	ff ff		 movzx	 eax, BYTE PTR _iIPAndPort$[ebp+2]
  001df	50		 push	 eax
  001e0	0f b6 85 9d fe
	ff ff		 movzx	 eax, BYTE PTR _iIPAndPort$[ebp+1]
  001e7	50		 push	 eax
  001e8	0f b6 85 9c fe
	ff ff		 movzx	 eax, BYTE PTR _iIPAndPort$[ebp]
  001ef	50		 push	 eax
  001f0	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$506891[ebp]
  001f3	50		 push	 eax
  001f4	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szIP$[ebp]
  001fa	68 04 01 00 00	 push	 260			; 00000104H
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 179  : 	szIPOnCmd = szIP;

  00205	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _szIPOnCmd$GSCopy$[ebp]
  0020b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0020e	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szIP$[ebp]
  00214	50		 push	 eax
  00215	ff d7		 call	 edi

; 180  : 	memcpy(&iPortOnCmd, &szIPAndPort[4], 4);

  00217	8b 85 7c fe ff
	ff		 mov	 eax, DWORD PTR _iPortOnCmd$GSCopy$[ebp]
  0021d	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _iIPAndPort$[ebp+4]
  00223	89 08		 mov	 DWORD PTR [eax], ecx

; 181  : 
; 182  : 	// cmd check
; 183  : 	if(szCheck.IsEmpty() 
; 184  : 	|| szKeyOnCmd.IsEmpty()
; 185  : 	|| szOptinosOnCmd.IsEmpty() )

  00225	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _szCheck$[ebp]
  0022b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00231	84 c0		 test	 al, al
  00233	0f 85 80 00 00
	00		 jne	 $LN2@ParseCmd
  00239	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _szKeyOnCmd$GSCopy$[ebp]
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00245	84 c0		 test	 al, al
  00247	75 70		 jne	 SHORT $LN2@ParseCmd
  00249	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _szOptinosOnCmd$GSCopy$[ebp]
  0024f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00255	84 c0		 test	 al, al
  00257	75 60		 jne	 SHORT $LN2@ParseCmd

; 187  : 
; 188  : 
; 189  : 
; 190  : 	if(strncmp(szCheck.c_str(), NORMAL_EXCUTE_CHECK, strlen(NORMAL_EXCUTE_CHECK)) != 0)

  00259	6a 10		 push	 16			; 00000010H
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LLBBMPIK@EDEW3940FVDP4950?$AA@
  00260	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _szCheck$[ebp]
  00266	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0026c	50		 push	 eax
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  00273	83 c4 0c	 add	 esp, 12			; 0000000cH

; 191  : 		return false;

  00276	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0027a	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _vStringVector$[ebp]
  00280	85 c0		 test	 eax, eax
  00282	75 3f		 jne	 SHORT $LN266@ParseCmd

; 192  : 
; 193  : 	return true;

  00284	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  00289	53		 push	 ebx
  0028a	6a 01		 push	 1
  0028c	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szDelims$[ebp]
  00292	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00297	53		 push	 ebx
  00298	6a 01		 push	 1
  0029a	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _szCopiedCmd$[ebp]
  002a0	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  002a5	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002a9	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _szCheck$[ebp]
  002af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  002b5	b0 01		 mov	 al, 1
  002b7	eb 3d		 jmp	 SHORT $LN113@ParseCmd
$LN2@ParseCmd:

; 186  : 		return false;

  002b9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  002bd	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _vStringVector$[ebp]
$LN266@ParseCmd:
  002c3	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  002c8	53		 push	 ebx
  002c9	6a 01		 push	 1
  002cb	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szDelims$[ebp]
  002d1	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  002d6	53		 push	 ebx
  002d7	6a 01		 push	 1
  002d9	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _szCopiedCmd$[ebp]
  002df	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  002e4	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002e8	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _szCheck$[ebp]
  002ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  002f4	32 c0		 xor	 al, al
$LN113@ParseCmd:

; 194  : }

  002f6	e8 00 00 00 00	 call	 __EH_epilog3_GS
  002fb	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$0:
  00000	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _szCheck$[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$1:
  0000c	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _szCopiedCmd$[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$2:
  00017	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szDelims$[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z$3:
  00022	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _vStringVector$[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z:
  0002d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00031	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00034	8b 8a 60 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-416]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z
  00050	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseCmd@CLogin@@QAE_NPBDAAVioHashString@@11AAH@Z ENDP	; CLogin::ParseCmd
END
