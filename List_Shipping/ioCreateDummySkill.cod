; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioCreateDummySkill.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	?OnSkillStart@ioCreateDummySkill@@UAE_NPAVioBaseChar@@@Z ; ioCreateDummySkill::OnSkillStart
EXTRN	?OnSkillStart@ioAttackSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::OnSkillStart
EXTRN	?ChangeSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N@Z:PROC ; ioBaseChar::ChangeSkillWeaponMesh
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z:PROC	; ioBaseChar::ShowWeaponItemMesh
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreatedummyskill.cpp
;	COMDAT ?OnSkillStart@ioCreateDummySkill@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?OnSkillStart@ioCreateDummySkill@@UAE_NPAVioBaseChar@@@Z PROC ; ioCreateDummySkill::OnSkillStart, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 57   : 	m_bSetHandMesh = false;

  00007	33 db		 xor	 ebx, ebx
  00009	57		 push	 edi
  0000a	88 9e 0a 0f 00
	00		 mov	 BYTE PTR [esi+3850], bl

; 58   : 
; 59   : 	// 기본 무기 손에서 제거
; 60   : 	if( m_bUseItemMesh )

  00010	38 9e 08 0f 00
	00		 cmp	 BYTE PTR [esi+3848], bl
  00016	74 0a		 je	 SHORT $LN3@OnSkillSta

; 61   : 	{
; 62   : 		pChar->ShowWeaponItemMesh( false );

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  0001b	53		 push	 ebx
  0001c	53		 push	 ebx
  0001d	e8 00 00 00 00	 call	 ?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z ; ioBaseChar::ShowWeaponItemMesh
$LN3@OnSkillSta:

; 63   : 	}
; 64   : 
; 65   : 	if( !m_bSetHandMesh && m_bUseItemMesh && !m_HandMesh.IsEmpty() )

  00022	38 9e 0a 0f 00
	00		 cmp	 BYTE PTR [esi+3850], bl
  00028	75 33		 jne	 SHORT $LN6@OnSkillSta
  0002a	38 9e 08 0f 00
	00		 cmp	 BYTE PTR [esi+3848], bl
  00030	74 2b		 je	 SHORT $LN6@OnSkillSta
  00032	8d be f8 0e 00
	00		 lea	 edi, DWORD PTR [esi+3832]
  00038	8b cf		 mov	 ecx, edi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00040	84 c0		 test	 al, al
  00042	75 19		 jne	 SHORT $LN6@OnSkillSta

; 66   : 	{
; 67   : 		pChar->ChangeSkillWeaponMesh( this, m_HandMesh, m_bVisibleEquipMesh );

  00044	0f b6 86 09 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3849]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  0004e	50		 push	 eax
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ?ChangeSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N@Z ; ioBaseChar::ChangeSkillWeaponMesh

; 68   : 		m_bSetHandMesh = true;

  00056	c6 86 0a 0f 00
	00 01		 mov	 BYTE PTR [esi+3850], 1
$LN6@OnSkillSta:

; 69   : 	}
; 70   : 
; 71   : 	m_SkillState = SS_NONE;
; 72   : 	m_iDummyIndex = -1;
; 73   : 
; 74   : 	if( !ioAttackSkill::OnSkillStart( pChar ) )

  0005d	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00060	83 8e 28 11 00
	00 ff		 or	 DWORD PTR [esi+4392], -1
  00067	8b ce		 mov	 ecx, esi
  00069	89 9e e4 10 00
	00		 mov	 DWORD PTR [esi+4324], ebx
  0006f	e8 00 00 00 00	 call	 ?OnSkillStart@ioAttackSkill@@UAE_NPAVioBaseChar@@@Z ; ioAttackSkill::OnSkillStart
  00074	5f		 pop	 edi
  00075	84 c0		 test	 al, al
  00077	5e		 pop	 esi
  00078	0f 95 c0	 setne	 al
  0007b	5b		 pop	 ebx

; 75   : 		return false;
; 76   : 	
; 77   : 	return true;
; 78   : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?OnSkillStart@ioCreateDummySkill@@UAE_NPAVioBaseChar@@@Z ENDP ; ioCreateDummySkill::OnSkillStart
_TEXT	ENDS
PUBLIC	?OnSkillEnd@ioCreateDummySkill@@UAEXPAVioBaseChar@@@Z ; ioCreateDummySkill::OnSkillEnd
EXTRN	?RestoreSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N2@Z:PROC ; ioBaseChar::RestoreSkillWeaponMesh
EXTRN	?OnSkillEnd@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::OnSkillEnd
; Function compile flags: /Ogsp
;	COMDAT ?OnSkillEnd@ioCreateDummySkill@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?OnSkillEnd@ioCreateDummySkill@@UAEXPAVioBaseChar@@@Z PROC ; ioCreateDummySkill::OnSkillEnd, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 110  : 	ioAttackSkill::OnSkillEnd( pChar );

  00005	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?OnSkillEnd@ioAttackSkill@@UAEXPAVioBaseChar@@@Z ; ioAttackSkill::OnSkillEnd

; 111  : 	
; 112  : 	// 기본무기 장착
; 113  : 	if( m_bUseItemMesh )

  0000f	80 be 08 0f 00
	00 00		 cmp	 BYTE PTR [esi+3848], 0
  00016	74 0c		 je	 SHORT $LN2@OnSkillEnd

; 114  : 	{
; 115  : 		pChar->ShowWeaponItemMesh( true );

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  0001b	6a 00		 push	 0
  0001d	6a 01		 push	 1
  0001f	e8 00 00 00 00	 call	 ?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z ; ioBaseChar::ShowWeaponItemMesh
$LN2@OnSkillEnd:

; 116  : 	}
; 117  : 	
; 118  : 	if( !m_HandMesh.IsEmpty() )

  00024	8d be f8 0e 00
	00		 lea	 edi, DWORD PTR [esi+3832]
  0002a	8b cf		 mov	 ecx, edi
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00032	84 c0		 test	 al, al
  00034	75 14		 jne	 SHORT $LN1@OnSkillEnd

; 119  : 	{
; 120  : 		pChar->RestoreSkillWeaponMesh( this, m_HandMesh, m_bVisibleEquipMesh );

  00036	0f b6 86 09 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3849]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00040	6a 00		 push	 0
  00042	50		 push	 eax
  00043	57		 push	 edi
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?RestoreSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N2@Z ; ioBaseChar::RestoreSkillWeaponMesh
$LN1@OnSkillEnd:

; 121  : 	}
; 122  : 	
; 123  : 	m_bSetHandMesh = false;

  0004a	5f		 pop	 edi
  0004b	c6 86 0a 0f 00
	00 00		 mov	 BYTE PTR [esi+3850], 0
  00052	5e		 pop	 esi

; 124  : }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?OnSkillEnd@ioCreateDummySkill@@UAEXPAVioBaseChar@@@Z ENDP ; ioCreateDummySkill::OnSkillEnd
_TEXT	ENDS
PUBLIC	?AttackSkillFire@ioCreateDummySkill@@MAEXPAVioBaseChar@@@Z ; ioCreateDummySkill::AttackSkillFire
EXTRN	?AttackSkillFire@ioAttackSkill@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::AttackSkillFire
; Function compile flags: /Ogsp
;	COMDAT ?AttackSkillFire@ioCreateDummySkill@@MAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?AttackSkillFire@ioCreateDummySkill@@MAEXPAVioBaseChar@@@Z PROC ; ioCreateDummySkill::AttackSkillFire, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 128  : 	ioAttackSkill::AttackSkillFire( pChar );

  00004	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?AttackSkillFire@ioAttackSkill@@MAEXPAVioBaseChar@@@Z ; ioAttackSkill::AttackSkillFire

; 129  : 
; 130  : 	m_SkillState = SS_ACTION;

  0000e	c7 86 e4 10 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4324], 1
  00018	5e		 pop	 esi

; 131  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?AttackSkillFire@ioCreateDummySkill@@MAEXPAVioBaseChar@@@Z ENDP ; ioCreateDummySkill::AttackSkillFire
_TEXT	ENDS
PUBLIC	?CheckUseItemMesh@ioCreateDummySkill@@UAE_NXZ	; ioCreateDummySkill::CheckUseItemMesh
; Function compile flags: /Ogsp
;	COMDAT ?CheckUseItemMesh@ioCreateDummySkill@@UAE_NXZ
_TEXT	SEGMENT
?CheckUseItemMesh@ioCreateDummySkill@@UAE_NXZ PROC	; ioCreateDummySkill::CheckUseItemMesh, COMDAT
; _this$ = ecx

; 135  : 	return m_bUseItemMesh;

  00000	8a 81 08 0f 00
	00		 mov	 al, BYTE PTR [ecx+3848]

; 136  : }

  00006	c3		 ret	 0
?CheckUseItemMesh@ioCreateDummySkill@@UAE_NXZ ENDP	; ioCreateDummySkill::CheckUseItemMesh
_TEXT	ENDS
PUBLIC	?ApplyAttributeToWeapon@ioCreateDummySkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ; ioCreateDummySkill::ApplyAttributeToWeapon
EXTRN	?ApplyAttributeToWeapon@ioSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z:PROC ; ioSkill::ApplyAttributeToWeapon
; Function compile flags: /Ogsp
;	COMDAT ?ApplyAttributeToWeapon@ioCreateDummySkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
_pStage$ = 12						; size = 4
?ApplyAttributeToWeapon@ioCreateDummySkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z PROC ; ioCreateDummySkill::ApplyAttributeToWeapon, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  : }

  00003	5d		 pop	 ebp

; 180  : 	ioSkill::ApplyAttributeToWeapon( pWeapon, pStage );

  00004	e9 00 00 00 00	 jmp	 ?ApplyAttributeToWeapon@ioSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ; ioSkill::ApplyAttributeToWeapon
?ApplyAttributeToWeapon@ioCreateDummySkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ENDP ; ioCreateDummySkill::ApplyAttributeToWeapon
_TEXT	ENDS
PUBLIC	?IsSkillMotionEnd@ioCreateDummySkill@@UBE_NKPAVioBaseChar@@@Z ; ioCreateDummySkill::IsSkillMotionEnd
; Function compile flags: /Ogsp
;	COMDAT ?IsSkillMotionEnd@ioCreateDummySkill@@UBE_NKPAVioBaseChar@@@Z
_TEXT	SEGMENT
_dwActionStop$ = 8					; size = 4
_pOwner$ = 12						; size = 4
?IsSkillMotionEnd@ioCreateDummySkill@@UBE_NKPAVioBaseChar@@@Z PROC ; ioCreateDummySkill::IsSkillMotionEnd, COMDAT
; _this$ = ecx

; 193  : 	if( m_dwPreDelayStartTime > 0 )

  00000	83 b9 20 02 00
	00 00		 cmp	 DWORD PTR [ecx+544], 0

; 194  : 		return false;

  00007	77 16		 ja	 SHORT $LN3@IsSkillMot

; 195  : 	
; 196  : 	switch( m_SkillState )

  00009	8b 89 e4 10 00
	00		 mov	 ecx, DWORD PTR [ecx+4324]
  0000f	85 c9		 test	 ecx, ecx
  00011	78 0c		 js	 SHORT $LN3@IsSkillMot
  00013	33 c0		 xor	 eax, eax
  00015	40		 inc	 eax
  00016	3b c8		 cmp	 ecx, eax
  00018	7e 05		 jle	 SHORT $LN3@IsSkillMot
  0001a	83 f9 03	 cmp	 ecx, 3

; 197  : 	{
; 198  : 	case SS_NONE:
; 199  : 	case SS_ACTION:
; 200  : 		return false;	
; 201  : 	case SS_END:
; 202  : 		return true;

  0001d	74 02		 je	 SHORT $LN6@IsSkillMot
$LN3@IsSkillMot:

; 203  : 	}
; 204  : 
; 205  : 	return false;

  0001f	32 c0		 xor	 al, al
$LN6@IsSkillMot:

; 206  : }

  00021	c2 08 00	 ret	 8
?IsSkillMotionEnd@ioCreateDummySkill@@UBE_NKPAVioBaseChar@@@Z ENDP ; ioCreateDummySkill::IsSkillMotionEnd
_TEXT	ENDS
PUBLIC	?SetSkillEndState@ioCreateDummySkill@@QAEXPAVioBaseChar@@@Z ; ioCreateDummySkill::SetSkillEndState
; Function compile flags: /Ogsp
;	COMDAT ?SetSkillEndState@ioCreateDummySkill@@QAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?SetSkillEndState@ioCreateDummySkill@@QAEXPAVioBaseChar@@@Z PROC ; ioCreateDummySkill::SetSkillEndState, COMDAT
; _this$ = ecx

; 249  : 	m_SkillState = SS_END;	

  00000	c7 81 e4 10 00
	00 03 00 00 00	 mov	 DWORD PTR [ecx+4324], 3

; 250  : }

  0000a	c2 04 00	 ret	 4
?SetSkillEndState@ioCreateDummySkill@@QAEXPAVioBaseChar@@@Z ENDP ; ioCreateDummySkill::SetSkillEndState
_TEXT	ENDS
PUBLIC	?IsUseActiveCnt@ioCreateDummySkill@@UBE_NXZ	; ioCreateDummySkill::IsUseActiveCnt
; Function compile flags: /Ogsp
;	COMDAT ?IsUseActiveCnt@ioCreateDummySkill@@UBE_NXZ
_TEXT	SEGMENT
?IsUseActiveCnt@ioCreateDummySkill@@UBE_NXZ PROC	; ioCreateDummySkill::IsUseActiveCnt, COMDAT
; _this$ = ecx

; 254  : 	return m_bSetUseActiveCnt;

  00000	8a 81 60 11 00
	00		 mov	 al, BYTE PTR [ecx+4448]

; 255  : }

  00006	c3		 ret	 0
?IsUseActiveCnt@ioCreateDummySkill@@UBE_NXZ ENDP	; ioCreateDummySkill::IsUseActiveCnt
_TEXT	ENDS
PUBLIC	?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z ; ioCreateDummySkill::GetCurActiveCnt
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	?GetCurDummyCharCnt@ioDummyCharManager@@QAEHPAVioBaseChar@@VioHashString@@@Z:PROC ; ioDummyCharManager::GetCurDummyCharCnt
EXTRN	?GetSingleton@ioDummyCharManager@@SAAAV1@XZ:PROC ; ioDummyCharManager::GetSingleton
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z$0
__ehfuncinfo$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T531885 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z PROC ; ioCreateDummySkill::GetCurActiveCnt, COMDAT
; _this$ = ecx

; 263  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 264  : 	return g_DummyCharMgr.GetCurDummyCharCnt( pOwner, m_DummyCharName );

  0000c	83 ec 10	 sub	 esp, 16			; 00000010H
  0000f	8d 81 18 11 00
	00		 lea	 eax, DWORD PTR [ecx+4376]
  00015	8b cc		 mov	 ecx, esp
  00017	89 65 f0	 mov	 DWORD PTR $T531885[ebp], esp
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00024	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00028	e8 00 00 00 00	 call	 ?GetSingleton@ioDummyCharManager@@SAAAV1@XZ ; ioDummyCharManager::GetSingleton
  0002d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ?GetCurDummyCharCnt@ioDummyCharManager@@QAEHPAVioBaseChar@@VioHashString@@@Z ; ioDummyCharManager::GetCurDummyCharCnt

; 265  : }

  00038	e8 00 00 00 00	 call	 __EH_epilog3
  0003d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR $T531885[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z ENDP ; ioCreateDummySkill::GetCurActiveCnt
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??D@YA?AUD3DXVECTOR3@@MABU0@@Z			; operator*
; Function compile flags: /Ogsp
;	COMDAT ??D@YA?AUD3DXVECTOR3@@MABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AUD3DXVECTOR3@@MABU0@@Z PROC			; operator*, COMDAT

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0000b	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00012	0f 5a c0	 cvtps2pd xmm0, xmm0
  00015	0f 5a c9	 cvtps2pd xmm1, xmm1
  00018	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0001c	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00021	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00025	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00029	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00031	0f 5a c9	 cvtps2pd xmm1, xmm1
  00034	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00038	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00041	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00046	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00051	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00055	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00059	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 408  : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
??D@YA?AUD3DXVECTOR3@@MABU0@@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetName@ioSkill@@QBEABVioHashString@@XZ	; ioSkill::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?GetName@ioSkill@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioSkill@@QBEABVioHashString@@XZ PROC		; ioSkill::GetName, COMDAT
; _this$ = ecx

; 414  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?GetName@ioSkill@@QBEABVioHashString@@XZ ENDP		; ioSkill::GetName
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`vftable'
PUBLIC	??1?$CEncrypt@K@@UAE@XZ				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
PUBLIC	??_R4?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@K@@@8			; CEncrypt<unsigned long> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@K@@8			; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1ccddaabb@@UAE@XZ:PROC			; ccddaabb::~ccddaabb
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CEncrypt@K@@UAEPAXI@Z:PROC		; CEncrypt<unsigned long>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@K@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@K@@8 DD FLAT:??_R0?AV?$CEncrypt@K@@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@K@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@K@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@K@@8 DD 00H				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@K@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@K@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<unsigned long> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@K@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@K@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@K@@6B@ DD 00H				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@K@@@8
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@K@@6B@
CONST	SEGMENT
??_7?$CEncrypt@K@@6B@ DD FLAT:??_R4?$CEncrypt@K@@6B@	; CEncrypt<unsigned long>::`vftable'
	DD	FLAT:??_E?$CEncrypt@K@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@K@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@K@@UAE@XZ PROC				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@K@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@K@@UAE@XZ ENDP				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@H@@6B@				; CEncrypt<int>::`vftable'
PUBLIC	??1?$CEncrypt@H@@UAE@XZ				; CEncrypt<int>::~CEncrypt<int>
PUBLIC	??_R4?$CEncrypt@H@@6B@				; CEncrypt<int>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@H@@@8			; CEncrypt<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@H@@8				; CEncrypt<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@H@@8				; CEncrypt<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@H@@8			; CEncrypt<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CEncrypt@H@@UAEPAXI@Z:PROC		; CEncrypt<int>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@H@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@H@@8 DD FLAT:??_R0?AV?$CEncrypt@H@@@8 ; CEncrypt<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@H@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@H@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@H@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@H@@8 ; CEncrypt<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@H@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@H@@8 DD 00H				; CEncrypt<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@H@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@H@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@H@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@H@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@H@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@H@@6B@ DD 00H				; CEncrypt<int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@H@@@8
	DD	FLAT:??_R3?$CEncrypt@H@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@H@@6B@
CONST	SEGMENT
??_7?$CEncrypt@H@@6B@ DD FLAT:??_R4?$CEncrypt@H@@6B@	; CEncrypt<int>::`vftable'
	DD	FLAT:??_E?$CEncrypt@H@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@H@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@H@@UAE@XZ PROC				; CEncrypt<int>::~CEncrypt<int>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@H@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@H@@UAE@XZ ENDP				; CEncrypt<int>::~CEncrypt<int>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_G?$CEncrypt@K@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@K@@UAEPAXI@Z PROC			; CEncrypt<unsigned long>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@K@@UAEPAXI@Z ENDP			; CEncrypt<unsigned long>::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$CEncrypt@H@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@H@@UAEPAXI@Z PROC			; CEncrypt<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@H@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar@2
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar@2:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@H@@UAEPAXI@Z ENDP			; CEncrypt<int>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@K@@AAEXXZ			; CEncrypt<unsigned long>::Init
EXTRN	?Setup@ccddaabb@@QAEXPBDHH@Z:PROC		; ccddaabb::Setup
EXTRN	__imp__rand:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@K@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@K@@AAEXXZ PROC				; CEncrypt<unsigned long>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@K@@AAEXXZ ENDP				; CEncrypt<unsigned long>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z	; CEncrypt<int>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z PROC	; CEncrypt<int>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ENDP	; CEncrypt<int>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@H@@AAEXXZ			; CEncrypt<int>::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@H@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@H@@AAEXXZ PROC				; CEncrypt<int>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init@2
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init@2:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init@2:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init@2
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init@2:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init@2

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@H@@AAEXXZ ENDP				; CEncrypt<int>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z	; CEncrypt<int>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z PROC	; CEncrypt<int>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 837  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 838  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 839  : 		*value = *((int*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 840  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ENDP	; CEncrypt<int>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_7ioCreateDummySkill@@6B@			; ioCreateDummySkill::`vftable'
PUBLIC	??1ioCreateDummySkill@@UAE@XZ			; ioCreateDummySkill::~ioCreateDummySkill
PUBLIC	??_R4ioCreateDummySkill@@6B@			; ioCreateDummySkill::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioCreateDummySkill@@@8			; ioCreateDummySkill `RTTI Type Descriptor'
PUBLIC	??_R3ioCreateDummySkill@@8			; ioCreateDummySkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioCreateDummySkill@@8			; ioCreateDummySkill::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioCreateDummySkill@@8		; ioCreateDummySkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioAttackSkill@@8			; ioAttackSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioAttackSkill@@@8			; ioAttackSkill `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackSkill@@8				; ioAttackSkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackSkill@@8				; ioAttackSkill::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSkill@@8			; ioSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioSkill@@@8				; ioSkill `RTTI Type Descriptor'
PUBLIC	??_R3ioSkill@@8					; ioSkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSkill@@8					; ioSkill::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioCreateDummySkill@@UAEXAAVioINILoader@@@Z ; ioCreateDummySkill::LoadProperty
PUBLIC	?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ	; ioCreateDummySkill::Clone
PUBLIC	?IsProtected@ioCreateDummySkill@@UBE_NH@Z	; ioCreateDummySkill::IsProtected
PUBLIC	?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ ; ioSkill::GetDefenseSkillBreakeType
PUBLIC	?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ		; ioSkill::GetSkillEndNextJumpAmt
PUBLIC	?GetSkillEndNextLandRate@ioSkill@@UBEMXZ	; ioSkill::GetSkillEndNextLandRate
PUBLIC	?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ ; ioSkill::GetSkillEndNextJumpMustEnable
PUBLIC	?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ ; ioSkill::EnableChangeGrapplingTargetPos
PUBLIC	?OnProcessState@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioCreateDummySkill::OnProcessState
PUBLIC	?ApplyExtraSkillInfo@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z ; ioCreateDummySkill::ApplyExtraSkillInfo
PUBLIC	?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z ; ioSkill::IsInvisibleBottomCircle
PUBLIC	?IsCanJumpingSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanJumpingSkill
PUBLIC	?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ	; ioSkill::IsCanJumpingSkillOnBlowWound
PUBLIC	?IsCanDownSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanDownSkill
PUBLIC	?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanBlowWoundSkill
PUBLIC	?IsCanWoundSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanWoundSkill
PUBLIC	?GetMaxActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z ; ioCreateDummySkill::GetMaxActiveCnt
EXTRN	??1ioAttackSkill@@UAE@XZ:PROC			; ioAttackSkill::~ioAttackSkill
EXTRN	?GetTypeID@ioAttackSkill@@UBEHXZ:PROC		; ioAttackSkill::GetTypeID
EXTRN	?IsCanSwitchSkill@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanSwitchSkill
EXTRN	?IsCanSemiSwitchSkill@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsCanSemiSwitchSkill
EXTRN	?IsCanCancelBySkill@ioSkill@@UBE_NPAVioBaseChar@@AAH@Z:PROC ; ioSkill::IsCanCancelBySkill
EXTRN	?IsCanUseZeroHP@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseZeroHP
EXTRN	?IsCanUseSkillWithCrown@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseSkillWithCrown
EXTRN	?IsCanUseBoss@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseBoss
EXTRN	?IsCanUseFootball@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanUseFootball
EXTRN	?IsCanUseGangSiMode@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsCanUseGangSiMode
EXTRN	?IsCanUseByWeaponType@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseByWeaponType
EXTRN	?IsCanUseThunderBirdHold@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseThunderBirdHold
EXTRN	?IsCanUseLimitHP@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseLimitHP
EXTRN	?IsCanUseSkill@ioAttackSkill@@UAE_NPAVioBaseChar@@_N@Z:PROC ; ioAttackSkill::IsCanUseSkill
EXTRN	?IsOnOffEnable@ioSkill@@UAE_NXZ:PROC		; ioSkill::IsOnOffEnable
EXTRN	?IsCanDefenseStateSkill@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsCanDefenseStateSkill
EXTRN	?SetDefenseStateSkill@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::SetDefenseStateSkill
EXTRN	?HasBuff@ioSkill@@UBE_NH@Z:PROC			; ioSkill::HasBuff
EXTRN	?GetBuffType@ioSkill@@UAEHH@Z:PROC		; ioSkill::GetBuffType
EXTRN	?IsEnableReserve@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsEnableReserve
EXTRN	?IsCharSkipState@ioSkill@@UBE?AW4SkillCharColType@@XZ:PROC ; ioSkill::IsCharSkipState
EXTRN	?IsEntityCollisionSkipState@ioSkill@@UBE_NXZ:PROC ; ioSkill::IsEntityCollisionSkipState
EXTRN	?IsEndState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsEndState
EXTRN	?IsAttackEndState@ioAttackSkill@@UBE_NXZ:PROC	; ioAttackSkill::IsAttackEndState
EXTRN	?IsJumpState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsJumpState
EXTRN	?IsDownState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsDownState
EXTRN	?IsNoDropState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsNoDropState
EXTRN	?IsCanSendControl@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanSendControl
EXTRN	?IsSkipState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsSkipState
EXTRN	?GetSkillMoveRate@ioSkill@@UBEMXZ:PROC		; ioSkill::GetSkillMoveRate
EXTRN	?SetSkillGrapplingState@ioSkill@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioSkill::SetSkillGrapplingState
EXTRN	?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@0@Z:PROC ; ioSkill::GetGrapplingTargetPos
EXTRN	?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioSkill::GetGrapplingTargetPos
EXTRN	?GetSkillWoundGrapplingInfo@ioSkill@@UAE?AUGrapplingSkillWoundedInfo@@XZ:PROC ; ioSkill::GetSkillWoundGrapplingInfo
EXTRN	?SetCreateWeaponDependency@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z:PROC ; ioSkill::SetCreateWeaponDependency
EXTRN	?SetNextSkillState@ioSkill@@UAEXPAVioBaseChar@@PAVioWeapon@@@Z:PROC ; ioSkill::SetNextSkillState
EXTRN	?OnSkillEndByWounded@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::OnSkillEndByWounded
EXTRN	?OnProcessNotUseSkill@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z:PROC ; ioSkill::OnProcessNotUseSkill
EXTRN	?OnSkillItemRelease@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::OnSkillItemRelease
EXTRN	?ApplyEquipSlotSkillExtraInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioSkill::ApplyEquipSlotSkillExtraInfo
EXTRN	?ApplyExtraPassiveSkillInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioSkill::ApplyExtraPassiveSkillInfo
EXTRN	?StartPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::StartPreDelayEffect
EXTRN	?EndPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::EndPreDelayEffect
EXTRN	?IsUseAutoTargetValue@ioAttackSkill@@UAE_NXZ:PROC ; ioAttackSkill::IsUseAutoTargetValue
EXTRN	?IsAutoTargetDownState@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsAutoTargetDownState
EXTRN	?CheckUseBuff@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::CheckUseBuff
EXTRN	?CheckUseActiveCount@ioSkill@@UAE_NXZ:PROC	; ioSkill::CheckUseActiveCount
EXTRN	?CheckAniRotate@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::CheckAniRotate
EXTRN	?IsEnableDashCheck@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsEnableDashCheck
EXTRN	?IsEnableMultiActive@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsEnableMultiActive
EXTRN	?GetAutoTargetValue@ioSkill@@UAEXAAM00@Z:PROC	; ioSkill::GetAutoTargetValue
EXTRN	?GetSkillGravityRate@ioSkill@@UAEMXZ:PROC	; ioSkill::GetSkillGravityRate
EXTRN	?GetSkillMotionName@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetSkillMotionName
EXTRN	?HasSkillMotion@ioSkill@@UBE_NXZ:PROC		; ioSkill::HasSkillMotion
EXTRN	?GetSkillMotionRate@ioSkill@@UBEMXZ:PROC	; ioSkill::GetSkillMotionRate
EXTRN	?IsPreDelayProtect@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsPreDelayProtect
EXTRN	?GetPreDelayAniName@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayAniName
EXTRN	?GetPreDelayTime@ioSkill@@UBEKXZ:PROC		; ioSkill::GetPreDelayTime
EXTRN	?GetPreDelayOwnerEffect@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayOwnerEffect
EXTRN	?GetPreDelayOtherEffect@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayOtherEffect
EXTRN	?SetCancelSkill@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::SetCancelSkill
EXTRN	?ClearAirJump@ioSkill@@MAEXXZ:PROC		; ioSkill::ClearAirJump
EXTRN	?SetAirJump@ioSkill@@MAEXPAVioBaseChar@@HM@Z:PROC ; ioSkill::SetAirJump
EXTRN	?CheckAirJump@ioSkill@@MAEXPAVioBaseChar@@@Z:PROC ; ioSkill::CheckAirJump
EXTRN	?UseActiveCount@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::UseActiveCount
EXTRN	?GetMaxActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z:PROC ; ioSkill::GetMaxActiveCount
EXTRN	?GetCurActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z:PROC ; ioSkill::GetCurActiveCount
EXTRN	?HideHPGauge@ioSkill@@UAE_NXZ:PROC		; ioSkill::HideHPGauge
EXTRN	?SetInfoByApplyWeapon@ioSkill@@UAEXPAVioBaseChar@@0K_N@Z:PROC ; ioSkill::SetInfoByApplyWeapon
EXTRN	?SetCollisionByApplySkill@ioSkill@@UAEXXZ:PROC	; ioSkill::SetCollisionByApplySkill
EXTRN	?SetChargingRateForWeapon@ioSkill@@UAEXPAVioWeapon@@@Z:PROC ; ioSkill::SetChargingRateForWeapon
EXTRN	?CheckExceptionCamera@ioSkill@@UAE_NXZ:PROC	; ioSkill::CheckExceptionCamera
EXTRN	?GetExceptionCameraPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioSkill::GetExceptionCameraPos
EXTRN	?IsFixedExceptionCamera@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsFixedExceptionCamera
EXTRN	??_EioCreateDummySkill@@UAEPAXI@Z:PROC		; ioCreateDummySkill::`vector deleting destructor'
EXTRN	?StartPreDelayAnimation@ioAttackSkill@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::StartPreDelayAnimation
EXTRN	?GetAttackTimeRate@ioAttackSkill@@MBEMXZ:PROC	; ioAttackSkill::GetAttackTimeRate
EXTRN	?GetAttackEndTimeRate@ioAttackSkill@@MBEMXZ:PROC ; ioAttackSkill::GetAttackEndTimeRate
EXTRN	?LoadNormalAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadNormalAttribute
EXTRN	?LoadDownAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadDownAttribute
EXTRN	?LoadJumpAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadJumpAttribute
EXTRN	?GetAttribute@ioAttackSkill@@UAEAAUAttackAttribute@@XZ:PROC ; ioAttackSkill::GetAttribute
EXTRN	?GetAttributeConst@ioAttackSkill@@UBEABUAttackAttribute@@XZ:PROC ; ioAttackSkill::GetAttributeConst
EXTRN	?IsCanStateEscape@ioAttackSkill@@UBE_NXZ:PROC	; ioAttackSkill::IsCanStateEscape
EXTRN	?IsCanStateEscapeOnStand@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnStand
EXTRN	?IsCanStateEscapeOnAir@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnAir
EXTRN	?IsCanStateEscapeOnDown@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnDown
;	COMDAT ??_R2ioSkill@@8
rdata$r	SEGMENT
??_R2ioSkill@@8 DD FLAT:??_R1A@?0A@EA@ioSkill@@8	; ioSkill::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioSkill@@8
rdata$r	SEGMENT
??_R3ioSkill@@8 DD 00H					; ioSkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSkill@@@8
_DATA	SEGMENT
??_R0?AVioSkill@@@8 DD FLAT:??_7type_info@@6B@		; ioSkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSkill@@8 DD FLAT:??_R0?AVioSkill@@@8	; ioSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackSkill@@8
rdata$r	SEGMENT
??_R2ioAttackSkill@@8 DD FLAT:??_R1A@?0A@EA@ioAttackSkill@@8 ; ioAttackSkill::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackSkill@@8
rdata$r	SEGMENT
??_R3ioAttackSkill@@8 DD 00H				; ioAttackSkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackSkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackSkill@@@8
_DATA	SEGMENT
??_R0?AVioAttackSkill@@@8 DD FLAT:??_7type_info@@6B@	; ioAttackSkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackSkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackSkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackSkill@@8 DD FLAT:??_R0?AVioAttackSkill@@@8 ; ioAttackSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackSkill@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioCreateDummySkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioCreateDummySkill@@8 DD FLAT:??_R0?AVioCreateDummySkill@@@8 ; ioCreateDummySkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioCreateDummySkill@@8
rdata$r	ENDS
;	COMDAT ??_R2ioCreateDummySkill@@8
rdata$r	SEGMENT
??_R2ioCreateDummySkill@@8 DD FLAT:??_R1A@?0A@EA@ioCreateDummySkill@@8 ; ioCreateDummySkill::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioAttackSkill@@8
	DD	FLAT:??_R1A@?0A@EA@ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R3ioCreateDummySkill@@8
rdata$r	SEGMENT
??_R3ioCreateDummySkill@@8 DD 00H			; ioCreateDummySkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioCreateDummySkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioCreateDummySkill@@@8
_DATA	SEGMENT
??_R0?AVioCreateDummySkill@@@8 DD FLAT:??_7type_info@@6B@ ; ioCreateDummySkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioCreateDummySkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioCreateDummySkill@@6B@
rdata$r	SEGMENT
??_R4ioCreateDummySkill@@6B@ DD 00H			; ioCreateDummySkill::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioCreateDummySkill@@@8
	DD	FLAT:??_R3ioCreateDummySkill@@8
rdata$r	ENDS
;	COMDAT ??_7ioCreateDummySkill@@6B@
CONST	SEGMENT
??_7ioCreateDummySkill@@6B@ DD FLAT:??_R4ioCreateDummySkill@@6B@ ; ioCreateDummySkill::`vftable'
	DD	FLAT:?LoadProperty@ioCreateDummySkill@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ
	DD	FLAT:?GetTypeID@ioAttackSkill@@UBEHXZ
	DD	FLAT:?IsProtected@ioCreateDummySkill@@UBE_NH@Z
	DD	FLAT:?IsCanSwitchSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanSemiSwitchSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanCancelBySkill@ioSkill@@UBE_NPAVioBaseChar@@AAH@Z
	DD	FLAT:?IsCanUseZeroHP@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseSkillWithCrown@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseBoss@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseFootball@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanUseGangSiMode@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanUseByWeaponType@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseThunderBirdHold@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseLimitHP@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseSkill@ioAttackSkill@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsOnOffEnable@ioSkill@@UAE_NXZ
	DD	FLAT:?IsCanDefenseStateSkill@ioSkill@@UAE_NXZ
	DD	FLAT:?SetDefenseStateSkill@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ
	DD	FLAT:?HasBuff@ioSkill@@UBE_NH@Z
	DD	FLAT:?GetBuffType@ioSkill@@UAEHH@Z
	DD	FLAT:?IsEnableReserve@ioSkill@@UBE_NXZ
	DD	FLAT:?IsSkillMotionEnd@ioCreateDummySkill@@UBE_NKPAVioBaseChar@@@Z
	DD	FLAT:?IsCharSkipState@ioSkill@@UBE?AW4SkillCharColType@@XZ
	DD	FLAT:?IsEntityCollisionSkipState@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ
	DD	FLAT:?GetSkillEndNextLandRate@ioSkill@@UBEMXZ
	DD	FLAT:?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ
	DD	FLAT:?IsEndState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsAttackEndState@ioAttackSkill@@UBE_NXZ
	DD	FLAT:?IsJumpState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsDownState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsNoDropState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanSendControl@ioSkill@@UBE_NXZ
	DD	FLAT:?IsSkipState@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillMoveRate@ioSkill@@UBEMXZ
	DD	FLAT:?SetSkillGrapplingState@ioSkill@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@0@Z
	DD	FLAT:?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillWoundGrapplingInfo@ioSkill@@UAE?AUGrapplingSkillWoundedInfo@@XZ
	DD	FLAT:?SetCreateWeaponDependency@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?SetNextSkillState@ioSkill@@UAEXPAVioBaseChar@@PAVioWeapon@@@Z
	DD	FLAT:?OnSkillStart@ioCreateDummySkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?OnProcessState@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?OnSkillEndByWounded@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnSkillEnd@ioCreateDummySkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnProcessNotUseSkill@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?OnSkillItemRelease@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyAttributeToWeapon@ioCreateDummySkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z
	DD	FLAT:?ApplyExtraSkillInfo@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyEquipSlotSkillExtraInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyExtraPassiveSkillInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?StartPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?EndPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseAutoTargetValue@ioAttackSkill@@UAE_NXZ
	DD	FLAT:?IsAutoTargetDownState@ioSkill@@UAE_NXZ
	DD	FLAT:?CheckUseBuff@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckUseItemMesh@ioCreateDummySkill@@UAE_NXZ
	DD	FLAT:?CheckUseActiveCount@ioSkill@@UAE_NXZ
	DD	FLAT:?CheckAniRotate@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableDashCheck@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableMultiActive@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAutoTargetValue@ioSkill@@UAEXAAM00@Z
	DD	FLAT:?IsCanJumpingSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanDownSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanWoundSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillGravityRate@ioSkill@@UAEMXZ
	DD	FLAT:?GetSkillMotionName@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?HasSkillMotion@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillMotionRate@ioSkill@@UBEMXZ
	DD	FLAT:?IsPreDelayProtect@ioSkill@@UBE_NXZ
	DD	FLAT:?GetPreDelayAniName@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?GetPreDelayTime@ioSkill@@UBEKXZ
	DD	FLAT:?GetPreDelayOwnerEffect@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?GetPreDelayOtherEffect@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?SetCancelSkill@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearAirJump@ioSkill@@MAEXXZ
	DD	FLAT:?SetAirJump@ioSkill@@MAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioSkill@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?UseActiveCount@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetMaxActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?GetCurActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?HideHPGauge@ioSkill@@UAE_NXZ
	DD	FLAT:?SetInfoByApplyWeapon@ioSkill@@UAEXPAVioBaseChar@@0K_N@Z
	DD	FLAT:?SetCollisionByApplySkill@ioSkill@@UAEXXZ
	DD	FLAT:?SetChargingRateForWeapon@ioSkill@@UAEXPAVioWeapon@@@Z
	DD	FLAT:?CheckExceptionCamera@ioSkill@@UAE_NXZ
	DD	FLAT:?GetExceptionCameraPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsFixedExceptionCamera@ioSkill@@UAE_NXZ
	DD	FLAT:?IsUseActiveCnt@ioCreateDummySkill@@UBE_NXZ
	DD	FLAT:?GetMaxActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z
	DD	FLAT:?GetCurActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z
	DD	FLAT:??_EioCreateDummySkill@@UAEPAXI@Z
	DD	FLAT:?StartPreDelayAnimation@ioAttackSkill@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?AttackSkillFire@ioCreateDummySkill@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackTimeRate@ioAttackSkill@@MBEMXZ
	DD	FLAT:?GetAttackEndTimeRate@ioAttackSkill@@MBEMXZ
	DD	FLAT:?LoadNormalAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?LoadDownAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?LoadJumpAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?GetAttribute@ioAttackSkill@@UAEAAUAttackAttribute@@XZ
	DD	FLAT:?GetAttributeConst@ioAttackSkill@@UBEABUAttackAttribute@@XZ
	DD	FLAT:?IsCanStateEscape@ioAttackSkill@@UBE_NXZ
	DD	FLAT:?IsCanStateEscapeOnStand@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanStateEscapeOnAir@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanStateEscapeOnDown@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioCreateDummySkill@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioCreateDummySkill@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioCreateDummySkill@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioCreateDummySkill@@UAE@XZ$2
__ehfuncinfo$??1ioCreateDummySkill@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1ioCreateDummySkill@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreatedummyskill.cpp
xdata$x	ENDS
;	COMDAT ??1ioCreateDummySkill@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioCreateDummySkill@@UAE@XZ PROC			; ioCreateDummySkill::~ioCreateDummySkill, COMDAT
; _this$ = ecx

; 32   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioCreateDummySkill@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateDummySkill@@6B@

; 33   : }

  00017	8d 8e 3c 11 00
	00		 lea	 ecx, DWORD PTR [esi+4412]
  0001d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00024	c7 86 30 11 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4400], OFFSET ??_7?$CEncrypt@H@@6B@
  0002e	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00033	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00039	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00043	8d 8e f4 10 00
	00		 lea	 ecx, DWORD PTR [esi+4340]
  00049	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0004d	c7 86 e8 10 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4328], OFFSET ??_7?$CEncrypt@K@@6B@
  00057	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0005c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
  00067	e8 00 00 00 00	 call	 __EH_epilog3
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioCreateDummySkill@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??1ioCreateDummySkill@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioCreateDummySkill@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 18 11 00
	00		 add	 ecx, 4376		; 00001118H
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioCreateDummySkill@@UAE@XZ:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioCreateDummySkill@@UAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioCreateDummySkill@@UAE@XZ ENDP			; ioCreateDummySkill::~ioCreateDummySkill
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ
_TEXT	SEGMENT
?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ PROC ; ioSkill::GetDefenseSkillBreakeType, COMDAT
; _this$ = ecx

; 327  : 	virtual DefenseBreakType GetDefenseSkillBreakeType() const { return m_eDefenseSkillBreakType; }

  00000	8b 81 30 0e 00
	00		 mov	 eax, DWORD PTR [ecx+3632]
  00006	c3		 ret	 0
?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ ENDP ; ioSkill::GetDefenseSkillBreakeType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ
_TEXT	SEGMENT
?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ PROC		; ioSkill::GetSkillEndNextJumpAmt, COMDAT
; _this$ = ecx

; 335  : 	virtual float GetSkillEndNextJumpAmt() const { return m_fSkillEndNextJumpAmt; }

  00000	d9 81 4c 05 00
	00		 fld	 DWORD PTR [ecx+1356]
  00006	c3		 ret	 0
?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ ENDP		; ioSkill::GetSkillEndNextJumpAmt
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextLandRate@ioSkill@@UBEMXZ
_TEXT	SEGMENT
?GetSkillEndNextLandRate@ioSkill@@UBEMXZ PROC		; ioSkill::GetSkillEndNextLandRate, COMDAT
; _this$ = ecx

; 336  : 	virtual float GetSkillEndNextLandRate() const { return m_fSkillEndNextLandRate; }

  00000	d9 81 50 05 00
	00		 fld	 DWORD PTR [ecx+1360]
  00006	c3		 ret	 0
?GetSkillEndNextLandRate@ioSkill@@UBEMXZ ENDP		; ioSkill::GetSkillEndNextLandRate
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ
_TEXT	SEGMENT
?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ PROC ; ioSkill::GetSkillEndNextJumpMustEnable, COMDAT
; _this$ = ecx

; 337  : 	virtual SkillEndJumpType GetSkillEndNextJumpMustEnable(){ return SEJT_DEFAULT; }

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ ENDP ; ioSkill::GetSkillEndNextJumpMustEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ PROC	; ioSkill::EnableChangeGrapplingTargetPos, COMDAT
; _this$ = ecx

; 355  : 	virtual bool EnableChangeGrapplingTargetPos() const { return m_bChangeGrapplingTargetPos; }

  00000	8a 81 40 09 00
	00		 mov	 al, BYTE PTR [ecx+2368]
  00006	c3		 ret	 0
?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ ENDP	; ioSkill::EnableChangeGrapplingTargetPos
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z PROC ; ioSkill::IsInvisibleBottomCircle, COMDAT
; _this$ = ecx

; 393  : 	virtual bool IsInvisibleBottomCircle( ioBaseChar *pChar ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSkill::IsInvisibleBottomCircle
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<19>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<19>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadInt_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadInt_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadInt_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadInt_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadInt_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadInt_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadInt_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadInt_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadInt_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadInt_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadInt_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadInt_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00229	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<19>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<16>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<16>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 8c 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 75 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 5e 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 46 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 2f 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 18 01 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 02 01 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ec 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 d5 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 be 00 00
	00		 je	 $LN87@LoadString
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 a8 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 92 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	74 7f		 je	 SHORT $LN84@LoadString
  000ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f8	84 d2		 test	 dl, dl
  000fa	74 6c		 je	 SHORT $LN83@LoadString
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	74 5a		 je	 SHORT $LN82@LoadString
  00109	32 d1		 xor	 dl, cl
  0010b	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  0010f	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	0f 84 a0 00 00
	00		 je	 $LN111@LoadString
  00118	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0011b	84 d2		 test	 dl, dl
  0011d	74 3e		 je	 SHORT $LN80@LoadString
  0011f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00122	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 2b		 je	 SHORT $LN79@LoadString
  0012c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0012f	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00132	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00135	84 d2		 test	 dl, dl
  00137	74 19		 je	 SHORT $LN78@LoadString
  00139	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  0013c	32 d1		 xor	 dl, cl
  0013e	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00141	84 c0		 test	 al, al
  00143	74 07		 je	 SHORT $LN77@LoadString
  00145	34 ea		 xor	 al, -22			; ffffffeaH
  00147	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  0014a	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0014c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00150	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  00152	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  00155	eb 61		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00157	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0015b	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  0015d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00161	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00163	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00166	eb 50		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00168	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0016c	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0016e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00172	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  00174	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00178	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  0017a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0017d	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0017f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00183	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  00185	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00189	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  0018b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0018f	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00191	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00194	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00196	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0019a	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  0019c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001a0	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001a2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001a6	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001a8	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ac	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001ae	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001b2	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001b4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001b8	6a 03		 push	 3
  001ba	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001bd	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001c1	5a		 pop	 edx
$LL104@LoadString:
  001c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c8	83 c0 04	 add	 eax, 4
  001cb	4a		 dec	 edx
  001cc	75 f4		 jne	 SHORT $LL104@LoadString
  001ce	6a 0c		 push	 12			; 0000000cH
  001d0	58		 pop	 eax
$LL101@LoadString:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN112@LoadString
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN112@LoadString:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ec	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001ee	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	56		 push	 esi
  001f6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	5f		 pop	 edi
  00204	33 cd		 xor	 ecx, ebp
  00206	5e		 pop	 esi
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	c9		 leave
  0020d	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ; ioINILoader::LoadFloat_e<18>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<18>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadFloat_
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadFloat_
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadFloat_
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadFloat_
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadFloat_
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadFloat_
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadFloat_
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadFloat_
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadFloat_:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001f8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001fd	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00201	51		 push	 ecx
  00202	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	50		 push	 eax
  0020b	8b ce		 mov	 ecx, esi
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00213	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00216	33 cd		 xor	 ecx, ebp
  00218	5e		 pop	 esi
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	c9		 leave
  0021f	c2 08 00	 ret	 8
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ; ioINILoader::LoadInt_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<15>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadInt_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadInt_e@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadInt_e@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadInt_e@2
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadInt_e@2
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadInt_e@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadInt_e@2
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadInt_e@2
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadInt_e@2
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadInt_e@2:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadInt_e@2:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  001cf	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ; ioINILoader::LoadBool_e<15>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<15>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadBool_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadBool_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadBool_e
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadBool_e
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadBool_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadBool_e
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadBool_e
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadBool_e
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadBool_e:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadBool_e
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadBool_e:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadBool_e
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadBool_e:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001cf	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<15>
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@XZ				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
EXTRN	??0ccddaabb@@QAE@XZ:PROC			; ccddaabb::ccddaabb
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@K@@QAE@XZ PROC				; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@XZ ENDP				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
PUBLIC	??B?$CEncrypt@K@@QBEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QBEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QBEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QBEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QBE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QBE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QBE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QBE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@H@@QAE@XZ				; CEncrypt<int>::CEncrypt<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@H@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@H@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@H@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@H@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@H@@QAE@XZ PROC				; CEncrypt<int>::CEncrypt<int>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@H@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@H@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@H@@AAEXXZ ; CEncrypt<int>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@H@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@H@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@H@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@H@@QAE@XZ ENDP				; CEncrypt<int>::CEncrypt<int>
PUBLIC	??B?$CEncrypt@H@@QAEHXZ				; CEncrypt<int>::operator int
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@H@@QAEHXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@H@@QAEHXZ PROC				; CEncrypt<int>::operator int, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@H@@QAEHXZ ENDP				; CEncrypt<int>::operator int
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@H@@QBEHXZ				; CEncrypt<int>::operator int
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@H@@QBEHXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@H@@QBEHXZ PROC				; CEncrypt<int>::operator int, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@H@@QBEHXZ ENDP				; CEncrypt<int>::operator int
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@H@@QAEHH@Z			; CEncrypt<int>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@H@@QAEHH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@H@@QAEHH@Z PROC				; CEncrypt<int>::operator=, COMDAT
; _this$ = ecx

; 843  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 845  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 846  : #ifdef _NOTUSE
; 847  : 		m_value = inValue;
; 848  : 		Debug();
; 849  : #endif
; 850  : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 851  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@H@@QAEHH@Z ENDP				; CEncrypt<int>::operator=
_TEXT	ENDS
PUBLIC	??0ioCreateDummySkill@@QAE@XZ			; ioCreateDummySkill::ioCreateDummySkill
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioAttackSkill@@QAE@XZ:PROC			; ioAttackSkill::ioAttackSkill
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreatedummyskill.cpp
xdata$x	SEGMENT
__unwindtable$??0ioCreateDummySkill@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCreateDummySkill@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCreateDummySkill@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioCreateDummySkill@@QAE@XZ$2
__ehfuncinfo$??0ioCreateDummySkill@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioCreateDummySkill@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCreateDummySkill@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioCreateDummySkill@@QAE@XZ PROC			; ioCreateDummySkill::ioCreateDummySkill, COMDAT
; _this$ = ecx

; 11   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCreateDummySkill@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioAttackSkill@@QAE@XZ ; ioAttackSkill::ioAttackSkill
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateDummySkill@@6B@
  00026	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0002b	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00031	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0003b	8d 8e 30 11 00
	00		 lea	 ecx, DWORD PTR [esi+4400]
  00041	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00045	e8 00 00 00 00	 call	 ??0?$CEncrypt@H@@QAE@XZ	; CEncrypt<int>::CEncrypt<int>

; 12   : 	m_bSetHandMesh = false;
; 13   : 	m_SkillState = SS_NONE;

  0004a	83 a6 e4 10 00
	00 00		 and	 DWORD PTR [esi+4324], 0

; 14   : 	m_iDummyIndex = -1;

  00051	83 8e 28 11 00
	00 ff		 or	 DWORD PTR [esi+4392], -1
  00058	c6 86 0a 0f 00
	00 00		 mov	 BYTE PTR [esi+3850], 0

; 15   : }

  0005f	8b c6		 mov	 eax, esi
  00061	e8 00 00 00 00	 call	 __EH_epilog3
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCreateDummySkill@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??0ioCreateDummySkill@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioCreateDummySkill@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 18 11 00
	00		 add	 ecx, 4376		; 00001118H
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioCreateDummySkill@@QAE@XZ:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCreateDummySkill@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCreateDummySkill@@QAE@XZ ENDP			; ioCreateDummySkill::ioCreateDummySkill
; Function compile flags: /Ogsp
;	COMDAT ??_GioCreateDummySkill@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioCreateDummySkill@@UAEPAXI@Z PROC			; ioCreateDummySkill::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioCreateDummySkill@@UAE@XZ ; ioCreateDummySkill::~ioCreateDummySkill
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioCreateDummySkill@@UAEPAXI@Z ENDP			; ioCreateDummySkill::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioAttackSkill@@UAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreatedummyskill.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioCreateDummySkill@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_value$532691 = -292					; size = 4
_value$532310 = -292					; size = 4
_szBuf$ = -288						; size = 260
__k$532453 = -28					; size = 18
__k$532328 = -28					; size = 16
__k$532198 = -28					; size = 19
__k$532778 = -24					; size = 15
__k$532591 = -24					; size = 15
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioCreateDummySkill@@UAEXAAVioINILoader@@@Z PROC ; ioCreateDummySkill::LoadProperty, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 37   : 	ioAttackSkill::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioAttackSkill@@UAEXAAVioINILoader@@@Z ; ioAttackSkill::LoadProperty

; 38   : 
; 39   : 	char szBuf[MAX_PATH];
; 40   : 		
; 41   : 	m_dwSkillProtectTime = (DWORD)rkLoader.LoadInt_e( "skill_protect_time", 0 );

  00021	33 db		 xor	 ebx, ebx
  00023	6a 04		 push	 4
  00025	c7 45 e4 9e 87
	82 86		 mov	 DWORD PTR __k$532198[ebp], -2038265954 ; 8682879eH
  0002c	c7 45 e8 81 b3
	9b 98		 mov	 DWORD PTR __k$532198[ebp+4], -1734626431 ; 989bb381H
  00033	c7 45 ec 82 98
	8e 89		 mov	 DWORD PTR __k$532198[ebp+8], -1987143550 ; 898e9882H
  0003a	c7 45 f0 99 b3
	9f 83		 mov	 DWORD PTR __k$532198[ebp+12], -2086685799 ; 839fb399H
  00041	66 c7 45 f4 80
	89		 mov	 WORD PTR __k$532198[ebp+16], 35200 ; 00008980H
  00047	8d 45 e4	 lea	 eax, DWORD PTR __k$532198[ebp]
  0004a	88 5d f6	 mov	 BYTE PTR __k$532198[ebp+18], bl
  0004d	59		 pop	 ecx
$LL106@LoadProper:
  0004e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00054	83 c0 04	 add	 eax, 4
  00057	49		 dec	 ecx
  00058	75 f4		 jne	 SHORT $LL106@LoadProper
  0005a	6a 10		 push	 16			; 00000010H
  0005c	58		 pop	 eax
$LL103@LoadProper:
  0005d	8b c8		 mov	 ecx, eax
  0005f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00065	79 05		 jns	 SHORT $LN557@LoadProper
  00067	49		 dec	 ecx
  00068	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0006b	41		 inc	 ecx
$LN557@LoadProper:
  0006c	b2 ed		 mov	 dl, -19			; ffffffedH
  0006e	2a d1		 sub	 dl, cl
  00070	30 54 05 e4	 xor	 BYTE PTR __k$532198[ebp+eax], dl
  00074	40		 inc	 eax
  00075	83 f8 12	 cmp	 eax, 18			; 00000012H
  00078	7c e3		 jl	 SHORT $LL103@LoadProper
  0007a	53		 push	 ebx
  0007b	8d 45 e4	 lea	 eax, DWORD PTR __k$532198[ebp]
  0007e	50		 push	 eax
  0007f	8b cf		 mov	 ecx, edi
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00087	89 85 dc fe ff
	ff		 mov	 DWORD PTR _value$532310[ebp], eax
  0008d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _value$532310[ebp]
  00093	50		 push	 eax
  00094	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  0009a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  0009f	6a 03		 push	 3

; 42   : 	
; 43   : 	rkLoader.LoadString_e( "dummy_char_name", "", szBuf, MAX_PATH );

  000a1	c7 45 e4 89 99
	86 87		 mov	 DWORD PTR __k$532328[ebp], -2021222007 ; 87869989H
  000a8	c7 45 e8 94 b3
	88 82		 mov	 DWORD PTR __k$532328[ebp+4], -2104970348 ; 8288b394H
  000af	c7 45 ec 8c 9e
	b4 84		 mov	 DWORD PTR __k$532328[ebp+8], -2068537716 ; 84b49e8cH
  000b6	8d 45 e4	 lea	 eax, DWORD PTR __k$532328[ebp]
  000b9	c7 45 f0 8c 81
	8e 00		 mov	 DWORD PTR __k$532328[ebp+12], 9339276 ; 008e818cH
  000c0	59		 pop	 ecx
$LL214@LoadProper:
  000c1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c7	83 c0 04	 add	 eax, 4
  000ca	49		 dec	 ecx
  000cb	75 f4		 jne	 SHORT $LL214@LoadProper
  000cd	6a 0c		 push	 12			; 0000000cH
  000cf	58		 pop	 eax
$LL211@LoadProper:
  000d0	8b c8		 mov	 ecx, eax
  000d2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d8	79 05		 jns	 SHORT $LN558@LoadProper
  000da	49		 dec	 ecx
  000db	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000de	41		 inc	 ecx
$LN558@LoadProper:
  000df	b2 ed		 mov	 dl, -19			; ffffffedH
  000e1	2a d1		 sub	 dl, cl
  000e3	30 54 05 e4	 xor	 BYTE PTR __k$532328[ebp+eax], dl
  000e7	40		 inc	 eax
  000e8	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000eb	7c e3		 jl	 SHORT $LL211@LoadProper
  000ed	68 04 01 00 00	 push	 260			; 00000104H
  000f2	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000fe	8d 45 e4	 lea	 eax, DWORD PTR __k$532328[ebp]
  00101	50		 push	 eax
  00102	8b cf		 mov	 ecx, edi
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 44   : 	m_DummyCharName = szBuf;

  0010a	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00110	50		 push	 eax
  00111	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0011d	6a 04		 push	 4

; 45   : 	m_fDummyCharOffset	= rkLoader.LoadFloat_e( "dummy_char_offset", 0.0f );

  0011f	c7 45 e4 89 99
	86 87		 mov	 DWORD PTR __k$532453[ebp], -2021222007 ; 87869989H
  00126	c7 45 e8 94 b3
	88 82		 mov	 DWORD PTR __k$532453[ebp+4], -2104970348 ; 8288b394H
  0012d	c7 45 ec 8c 9e
	b4 85		 mov	 DWORD PTR __k$532453[ebp+8], -2051760500 ; 85b49e8cH
  00134	c7 45 f0 8b 8a
	98 8f		 mov	 DWORD PTR __k$532453[ebp+12], -1885828469 ; 8f988a8bH
  0013b	8d 45 e4	 lea	 eax, DWORD PTR __k$532453[ebp]
  0013e	66 c7 45 f4 99
	00		 mov	 WORD PTR __k$532453[ebp+16], 153 ; 00000099H
  00144	59		 pop	 ecx
$LL320@LoadProper:
  00145	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014b	83 c0 04	 add	 eax, 4
  0014e	49		 dec	 ecx
  0014f	75 f4		 jne	 SHORT $LL320@LoadProper
  00151	0f 57 c0	 xorps	 xmm0, xmm0
  00154	80 75 f4 ed	 xor	 BYTE PTR __k$532453[ebp+16], -19 ; ffffffedH
  00158	51		 push	 ecx
  00159	8d 45 e4	 lea	 eax, DWORD PTR __k$532453[ebp]
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	50		 push	 eax
  00162	8b cf		 mov	 ecx, edi
  00164	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0016a	d9 9e 2c 11 00
	00		 fstp	 DWORD PTR [esi+4396]
  00170	6a 03		 push	 3

; 46   : 	m_nMaxCreateCnt = rkLoader.LoadInt_e( "max_create_cnt", 0 );

  00172	c7 45 e8 80 8d
	93 b5		 mov	 DWORD PTR __k$532591[ebp], -1248621184 ; b5938d80H
  00179	c7 45 ec 8e 9e
	8e 8b		 mov	 DWORD PTR __k$532591[ebp+4], -1953587570 ; 8b8e9e8eH
  00180	c7 45 f0 99 89
	b4 89		 mov	 DWORD PTR __k$532591[ebp+8], -1984656999 ; 89b48999H
  00187	66 c7 45 f4 83
	98		 mov	 WORD PTR __k$532591[ebp+12], 39043 ; 00009883H
  0018d	8d 45 e8	 lea	 eax, DWORD PTR __k$532591[ebp]
  00190	88 5d f6	 mov	 BYTE PTR __k$532591[ebp+14], bl
  00193	59		 pop	 ecx
$LL426@LoadProper:
  00194	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0019a	83 c0 04	 add	 eax, 4
  0019d	49		 dec	 ecx
  0019e	75 f4		 jne	 SHORT $LL426@LoadProper
  001a0	6a 0c		 push	 12			; 0000000cH
  001a2	58		 pop	 eax
$LL423@LoadProper:
  001a3	8b c8		 mov	 ecx, eax
  001a5	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ab	79 05		 jns	 SHORT $LN559@LoadProper
  001ad	49		 dec	 ecx
  001ae	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001b1	41		 inc	 ecx
$LN559@LoadProper:
  001b2	b2 ed		 mov	 dl, -19			; ffffffedH
  001b4	2a d1		 sub	 dl, cl
  001b6	30 54 05 e8	 xor	 BYTE PTR __k$532591[ebp+eax], dl
  001ba	40		 inc	 eax
  001bb	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001be	7c e3		 jl	 SHORT $LL423@LoadProper
  001c0	53		 push	 ebx
  001c1	8d 45 e8	 lea	 eax, DWORD PTR __k$532591[ebp]
  001c4	50		 push	 eax
  001c5	8b cf		 mov	 ecx, edi
  001c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  001cd	89 85 dc fe ff
	ff		 mov	 DWORD PTR _value$532691[ebp], eax
  001d3	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _value$532691[ebp]
  001d9	50		 push	 eax
  001da	8d 8e 30 11 00
	00		 lea	 ecx, DWORD PTR [esi+4400]
  001e0	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool
  001e5	6a 03		 push	 3

; 47   : 	m_bSetUseActiveCnt = rkLoader.LoadBool_e( "use_active_cnt", true );

  001e7	c7 45 e8 98 9f
	8e b5		 mov	 DWORD PTR __k$532778[ebp], -1248944232 ; b58e9f98H
  001ee	c7 45 ec 8c 8f
	9f 83		 mov	 DWORD PTR __k$532778[ebp+4], -2086695028 ; 839f8f8cH
  001f5	c7 45 f0 9b 89
	b4 89		 mov	 DWORD PTR __k$532778[ebp+8], -1984656997 ; 89b4899bH
  001fc	66 c7 45 f4 83
	98		 mov	 WORD PTR __k$532778[ebp+12], 39043 ; 00009883H
  00202	8d 45 e8	 lea	 eax, DWORD PTR __k$532778[ebp]
  00205	88 5d f6	 mov	 BYTE PTR __k$532778[ebp+14], bl
  00208	59		 pop	 ecx
$LL534@LoadProper:
  00209	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020f	83 c0 04	 add	 eax, 4
  00212	49		 dec	 ecx
  00213	75 f4		 jne	 SHORT $LL534@LoadProper
  00215	6a 0c		 push	 12			; 0000000cH
  00217	58		 pop	 eax
$LL531@LoadProper:
  00218	8b c8		 mov	 ecx, eax
  0021a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00220	79 05		 jns	 SHORT $LN560@LoadProper
  00222	49		 dec	 ecx
  00223	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00226	41		 inc	 ecx
$LN560@LoadProper:
  00227	b2 ed		 mov	 dl, -19			; ffffffedH
  00229	2a d1		 sub	 dl, cl
  0022b	30 54 05 e8	 xor	 BYTE PTR __k$532778[ebp+eax], dl
  0022f	40		 inc	 eax
  00230	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00233	7c e3		 jl	 SHORT $LL531@LoadProper
  00235	6a 01		 push	 1
  00237	8d 45 e8	 lea	 eax, DWORD PTR __k$532778[ebp]
  0023a	50		 push	 eax
  0023b	8b cf		 mov	 ecx, edi
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 48   : }

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	88 86 60 11 00
	00		 mov	 BYTE PTR [esi+4448], al
  0024d	5e		 pop	 esi
  0024e	33 cd		 xor	 ecx, ebp
  00250	5b		 pop	 ebx
  00251	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00256	c9		 leave
  00257	c2 04 00	 ret	 4
?LoadProperty@ioCreateDummySkill@@UAEXAAVioINILoader@@@Z ENDP ; ioCreateDummySkill::LoadProperty
_TEXT	ENDS
PUBLIC	_rkPacket$GSCopy$
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?CheckMaxCreateDummyCnt@ioDummyCharManager@@QAE_NPAVioBaseChar@@PAVioDummyChar@@H@Z:PROC ; ioDummyCharManager::CheckMaxCreateDummyCnt
EXTRN	?SetControlSkillName@ioDummyChar@@QAEXABVioHashString@@@Z:PROC ; ioDummyChar::SetControlSkillName
EXTRN	?CreateDummyChar@ioPlayStage@@QAEPAVioDummyChar@@ABVioHashString@@H0ABUD3DXVECTOR3@@MK_N@Z:PROC ; ioPlayStage::CreateDummyChar
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator>>
EXTRN	?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z:PROC ; ioBaseChar::SetTargetRotToRotate
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyExtraSkillInfo@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_qtRot$530628 = -44					; size = 16
_iType$ = -28						; size = 4
_rkPacket$GSCopy$ = -24					; size = 4
_pStage$GSCopy$ = -20					; size = 4
_value$532864 = -20					; size = 4
_vPos$530629 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
_rkPacket$ = 16						; size = 4
?ApplyExtraSkillInfo@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z PROC ; ioCreateDummySkill::ApplyExtraSkillInfo, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pChar$[ebp]
  00017	56		 push	 esi
  00018	8b 75 10	 mov	 esi, DWORD PTR _rkPacket$[ebp]
  0001b	57		 push	 edi
  0001c	8b f9		 mov	 edi, ecx

; 172  : 				g_DummyCharMgr.CheckMaxCreateDummyCnt( pChar, pDummy, m_nMaxCreateCnt);

  0001e	89 45 ec	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00021	89 75 e8	 mov	 DWORD PTR _rkPacket$GSCopy$[ebp], esi
  00024	85 db		 test	 ebx, ebx
  00026	0f 84 c9 00 00
	00		 je	 $LN1@ApplyExtra

; 140  : 	if( !pChar || !pStage ) 

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 c1 00 00
	00		 je	 $LN1@ApplyExtra

; 141  : 		return;
; 142  : 
; 143  : 	int iType;
; 144  : 	rkPacket >> iType;

  00034	8d 45 e4	 lea	 eax, DWORD PTR _iType$[ebp]
  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 145  : 
; 146  : 	switch( iType )

  0003f	8b 45 e4	 mov	 eax, DWORD PTR _iType$[ebp]
  00042	48		 dec	 eax
  00043	48		 dec	 eax
  00044	0f 85 ab 00 00
	00		 jne	 $LN1@ApplyExtra

; 147  : 	{		
; 148  : 	case SS_CREATE_DUMMY:
; 149  : 		{
; 150  : 			if( m_DummyCharName.IsEmpty() ) 

  0004a	8d 8f 18 11 00
	00		 lea	 ecx, DWORD PTR [edi+4376]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00056	84 c0		 test	 al, al
  00058	0f 85 97 00 00
	00		 jne	 $LN1@ApplyExtra

; 151  : 				return;
; 152  : 
; 153  : 			D3DXQUATERNION qtRot;
; 154  : 			rkPacket >> qtRot;

  0005e	8d 45 d4	 lea	 eax, DWORD PTR _qtRot$530628[ebp]
  00061	50		 push	 eax
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 155  : 
; 156  : 			pChar->SetTargetRotToRotate( qtRot, true, false );

  00069	6a 00		 push	 0
  0006b	6a 01		 push	 1
  0006d	8d 45 d4	 lea	 eax, DWORD PTR _qtRot$530628[ebp]
  00070	50		 push	 eax
  00071	8b cb		 mov	 ecx, ebx
  00073	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 157  : 
; 158  : 			D3DXVECTOR3 vPos;
; 159  : 			rkPacket >> vPos;

  00078	8d 45 f0	 lea	 eax, DWORD PTR _vPos$530629[ebp]
  0007b	50		 push	 eax
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 160  : 			rkPacket >> m_iDummyIndex;

  00083	8b 4d e8	 mov	 ecx, DWORD PTR _rkPacket$GSCopy$[ebp]
  00086	8d b7 28 11 00
	00		 lea	 esi, DWORD PTR [edi+4392]
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 161  : 									
; 162  : 			ioDummyChar *pDummy = pStage->CreateDummyChar( m_DummyCharName, m_iDummyIndex,
; 163  : 				pChar->GetCharName(),
; 164  : 				vPos,
; 165  : 				0.0f,
; 166  : 				0, true );

  00092	0f 57 c0	 xorps	 xmm0, xmm0
  00095	6a 01		 push	 1
  00097	6a 00		 push	 0
  00099	51		 push	 ecx
  0009a	8b 4d ec	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	8d 45 f0	 lea	 eax, DWORD PTR _vPos$530629[ebp]
  000a5	50		 push	 eax
  000a6	8d 83 d4 02 00
	00		 lea	 eax, DWORD PTR [ebx+724]
  000ac	50		 push	 eax
  000ad	ff 36		 push	 DWORD PTR [esi]
  000af	8d 87 18 11 00
	00		 lea	 eax, DWORD PTR [edi+4376]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?CreateDummyChar@ioPlayStage@@QAEPAVioDummyChar@@ABVioHashString@@H0ABUD3DXVECTOR3@@MK_N@Z ; ioPlayStage::CreateDummyChar
  000bb	8b f0		 mov	 esi, eax

; 167  : 
; 168  : 			if( pDummy )

  000bd	85 f6		 test	 esi, esi
  000bf	74 0b		 je	 SHORT $LN2@ApplyExtra

; 169  : 				pDummy->SetControlSkillName( GetName() );

  000c1	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  000c4	50		 push	 eax
  000c5	8b ce		 mov	 ecx, esi
  000c7	e8 00 00 00 00	 call	 ?SetControlSkillName@ioDummyChar@@QAEXABVioHashString@@@Z ; ioDummyChar::SetControlSkillName
$LN2@ApplyExtra:

; 170  : 
; 171  : 			if ( m_bSetUseActiveCnt )

  000cc	80 bf 60 11 00
	00 00		 cmp	 BYTE PTR [edi+4448], 0
  000d3	74 20		 je	 SHORT $LN1@ApplyExtra

; 172  : 				g_DummyCharMgr.CheckMaxCreateDummyCnt( pChar, pDummy, m_nMaxCreateCnt);

  000d5	8d 45 ec	 lea	 eax, DWORD PTR _value$532864[ebp]
  000d8	50		 push	 eax
  000d9	8d 8f 30 11 00
	00		 lea	 ecx, DWORD PTR [edi+4400]
  000df	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  000e4	ff 75 ec	 push	 DWORD PTR _value$532864[ebp]
  000e7	56		 push	 esi
  000e8	53		 push	 ebx
  000e9	e8 00 00 00 00	 call	 ?GetSingleton@ioDummyCharManager@@SAAAV1@XZ ; ioDummyCharManager::GetSingleton
  000ee	8b c8		 mov	 ecx, eax
  000f0	e8 00 00 00 00	 call	 ?CheckMaxCreateDummyCnt@ioDummyCharManager@@QAE_NPAVioBaseChar@@PAVioDummyChar@@H@Z ; ioDummyCharManager::CheckMaxCreateDummyCnt
$LN1@ApplyExtra:

; 173  : 		}
; 174  : 		break;
; 175  : 	}
; 176  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	33 cd		 xor	 ecx, ebp
  000fc	5b		 pop	 ebx
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	c9		 leave
  00103	c2 0c 00	 ret	 12			; 0000000cH
?ApplyExtraSkillInfo@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z ENDP ; ioCreateDummySkill::ApplyExtraSkillInfo
_TEXT	ENDS
EXTRN	?IsProtected@ioSkill@@UBE_NH@Z:PROC		; ioSkill::IsProtected
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?IsProtected@ioCreateDummySkill@@UBE_NH@Z
_TEXT	SEGMENT
_value$532886 = -8					; size = 4
_value$532880 = -4					; size = 4
_value$532875 = -4					; size = 4
_iDefenseBreakType$ = 8					; size = 4
?IsProtected@ioCreateDummySkill@@UBE_NH@Z PROC		; ioCreateDummySkill::IsProtected, COMDAT
; _this$ = ecx

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx

; 185  : 	if( m_dwSkillProtectTime > 0 && m_dwSkillStartTime + m_dwSkillProtectTime > FRAMEGETTIME() )

  00009	8d 45 fc	 lea	 eax, DWORD PTR _value$532875[ebp]
  0000c	50		 push	 eax
  0000d	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  00013	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00018	83 7d fc 00	 cmp	 DWORD PTR _value$532875[ebp], 0
  0001c	76 3a		 jbe	 SHORT $LN1@IsProtecte
  0001e	8d 45 fc	 lea	 eax, DWORD PTR _value$532880[ebp]
  00021	50		 push	 eax
  00022	8d 8e 94 0e 00
	00		 lea	 ecx, DWORD PTR [esi+3732]
  00028	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0002d	8d 45 f8	 lea	 eax, DWORD PTR _value$532886[ebp]
  00030	50		 push	 eax
  00031	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  00037	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00042	8b c8		 mov	 ecx, eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0004a	8b 55 f8	 mov	 edx, DWORD PTR _value$532886[ebp]
  0004d	03 55 fc	 add	 edx, DWORD PTR _value$532880[ebp]
  00050	3b d0		 cmp	 edx, eax
  00052	76 04		 jbe	 SHORT $LN1@IsProtecte

; 186  : 		return true;

  00054	b0 01		 mov	 al, 1
  00056	eb 0a		 jmp	 SHORT $LN2@IsProtecte
$LN1@IsProtecte:

; 187  : 
; 188  : 	return ioSkill::IsProtected( iDefenseBreakType );

  00058	ff 75 08	 push	 DWORD PTR _iDefenseBreakType$[ebp]
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?IsProtected@ioSkill@@UBE_NH@Z ; ioSkill::IsProtected
$LN2@IsProtecte:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 189  : }

  00064	c9		 leave
  00065	c2 04 00	 ret	 4
?IsProtected@ioCreateDummySkill@@UBE_NH@Z ENDP		; ioCreateDummySkill::IsProtected
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioCreateDummySkill::CreateDummyChar
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?GetCurLocalIndex@ioDummyCharManager@@QAEHXZ:PROC ; ioDummyCharManager::GetCurLocalIndex
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	__chkstk:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z$0
__ehfuncinfo$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreatedummyskill.cpp
xdata$x	ENDS
;	COMDAT ?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
$T532909 = -32860					; size = 4
tv436 = -32856						; size = 4
$T532908 = -32856					; size = 4
_pStage$GSCopy$ = -32852				; size = 4
_value$532936 = -32852					; size = 4
tv471 = -32848						; size = 4
$T532907 = -32848					; size = 4
_pDummy$ = -32848					; size = 4
_kPacket$530675 = -32844				; size = 32792
$T530665 = -52						; size = 12
_vDir$ = -40						; size = 12
_vPos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioCreateDummySkill::CreateDummyChar, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 50 80 00 00	 mov	 eax, 32848		; 00008050H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 75 08	 mov	 esi, DWORD PTR _pChar$[ebp]
  00035	8b 45 0c	 mov	 eax, DWORD PTR _pStage$[ebp]
  00038	8b f9		 mov	 edi, ecx

; 235  : 	{
; 236  : 		SP2Packet kPacket( CUPK_SKILL_EXTRA_INFO );

  0003a	89 85 ac 7f ff
	ff		 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00040	85 f6		 test	 esi, esi
  00042	0f 84 5f 02 00
	00		 je	 $LN5@CreateDumm

; 210  : 	if( !pChar || !pStage || !pChar->IsNeedProcess() ) 

  00048	85 c0		 test	 eax, eax
  0004a	0f 84 57 02 00
	00		 je	 $LN5@CreateDumm
  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	8b ce		 mov	 ecx, esi
  00054	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0005a	84 c0		 test	 al, al
  0005c	0f 84 45 02 00
	00		 je	 $LN5@CreateDumm

; 211  : 		return;
; 212  : 
; 213  : 	if( m_DummyCharName.IsEmpty() ) 

  00062	8d 8f 18 11 00
	00		 lea	 ecx, DWORD PTR [edi+4376]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0006e	84 c0		 test	 al, al
  00070	0f 85 31 02 00
	00		 jne	 $LN5@CreateDumm

; 214  : 		return;
; 215  : 		
; 216  : 	D3DXVECTOR3 vDir = pChar->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	0f 57 c0	 xorps	 xmm0, xmm0
  0007e	89 85 b0 7f ff
	ff		 mov	 DWORD PTR tv471[ebp], eax
  00084	db 85 b0 7f ff
	ff		 fild	 DWORD PTR tv471[ebp]
  0008a	f3 0f 11 45 cc	 movss	 DWORD PTR $T530665[ebp], xmm0
  0008f	f3 0f 11 45 d0	 movss	 DWORD PTR $T530665[ebp+4], xmm0
  00094	85 c0		 test	 eax, eax
  00096	79 06		 jns	 SHORT $LN37@CreateDumm
  00098	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN37@CreateDumm:
  0009e	8d 45 cc	 lea	 eax, DWORD PTR $T530665[ebp]
  000a1	d9 e0		 fchs
  000a3	50		 push	 eax
  000a4	d9 5d d4	 fstp	 DWORD PTR $T530665[ebp+8]
  000a7	8d 9e a4 06 00
	00		 lea	 ebx, DWORD PTR [esi+1700]
  000ad	8d 45 d8	 lea	 eax, DWORD PTR _vDir$[ebp]
  000b0	53		 push	 ebx
  000b1	50		 push	 eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 217  : 	D3DXVECTOR3 vPos = pChar->GetWorldPosition() + ( m_fDummyCharOffset * vDir );

  000b8	f3 0f 10 87 2c
	11 00 00	 movss	 xmm0, DWORD PTR [edi+4396]
  000c0	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _vDir$[ebp]
  000c5	8b 06		 mov	 eax, DWORD PTR [esi]
  000c7	0f 5a c8	 cvtps2pd xmm1, xmm0
  000ca	0f 5a d2	 cvtps2pd xmm2, xmm2
  000cd	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000d1	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000d5	f3 0f 11 8d a4
	7f ff ff	 movss	 DWORD PTR $T532909[ebp], xmm1
  000dd	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _vDir$[ebp+4]
  000e2	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e5	0f 5a d0	 cvtps2pd xmm2, xmm0
  000e8	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000ec	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000f0	f3 0f 11 8d a8
	7f ff ff	 movss	 DWORD PTR $T532908[ebp], xmm1
  000f8	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _vDir$[ebp+8]
  000fd	0f 5a c0	 cvtps2pd xmm0, xmm0
  00100	0f 5a c9	 cvtps2pd xmm1, xmm1
  00103	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00107	0f 57 c0	 xorps	 xmm0, xmm0
  0010a	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00111	8b ce		 mov	 ecx, esi
  00113	f3 0f 11 85 b0
	7f ff ff	 movss	 DWORD PTR $T532907[ebp], xmm0
  0011b	ff 50 70	 call	 DWORD PTR [eax+112]
  0011e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00122	f3 0f 10 8d a4
	7f ff ff	 movss	 xmm1, DWORD PTR $T532909[ebp]
  0012a	f3 0f 10 95 a8
	7f ff ff	 movss	 xmm2, DWORD PTR $T532908[ebp]
  00132	f3 0f 10 9d b0
	7f ff ff	 movss	 xmm3, DWORD PTR $T532907[ebp]
  0013a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0013d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00140	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00144	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00149	0f 5a d2	 cvtps2pd xmm2, xmm2
  0014c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0014f	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00153	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00158	0f 5a d2	 cvtps2pd xmm2, xmm2
  0015b	0f 5a db	 cvtps2pd xmm3, xmm3
  0015e	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00162	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00166	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0016a	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0016e	f3 0f 11 45 e4	 movss	 DWORD PTR _vPos$[ebp], xmm0
  00173	f3 0f 11 4d e8	 movss	 DWORD PTR _vPos$[ebp+4], xmm1
  00178	f3 0f 11 55 ec	 movss	 DWORD PTR _vPos$[ebp+8], xmm2

; 218  : 
; 219  : 	int iCurIndex = g_DummyCharMgr.GetCurLocalIndex();

  0017d	e8 00 00 00 00	 call	 ?GetSingleton@ioDummyCharManager@@SAAAV1@XZ ; ioDummyCharManager::GetSingleton
  00182	8b c8		 mov	 ecx, eax
  00184	e8 00 00 00 00	 call	 ?GetCurLocalIndex@ioDummyCharManager@@QAEHXZ ; ioDummyCharManager::GetCurLocalIndex

; 220  : 	m_iDummyIndex = iCurIndex;
; 221  : 
; 222  : 	ioDummyChar *pDummy = pStage->CreateDummyChar( m_DummyCharName, m_iDummyIndex,
; 223  : 												   pChar->GetCharName(),
; 224  : 												   vPos,
; 225  : 												   0.0f,
; 226  : 												   0, true );

  00189	0f 57 c0	 xorps	 xmm0, xmm0
  0018c	6a 01		 push	 1
  0018e	6a 00		 push	 0
  00190	8d 8e d4 02 00
	00		 lea	 ecx, DWORD PTR [esi+724]
  00196	51		 push	 ecx
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	8d 55 e4	 lea	 edx, DWORD PTR _vPos$[ebp]
  0019f	52		 push	 edx
  001a0	51		 push	 ecx
  001a1	50		 push	 eax
  001a2	89 87 28 11 00
	00		 mov	 DWORD PTR [edi+4392], eax
  001a8	8d 87 18 11 00
	00		 lea	 eax, DWORD PTR [edi+4376]
  001ae	89 8d a8 7f ff
	ff		 mov	 DWORD PTR tv436[ebp], ecx
  001b4	8b 8d ac 7f ff
	ff		 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?CreateDummyChar@ioPlayStage@@QAEPAVioDummyChar@@ABVioHashString@@H0ABUD3DXVECTOR3@@MK_N@Z ; ioPlayStage::CreateDummyChar
  001c0	8b c8		 mov	 ecx, eax
  001c2	89 8d b0 7f ff
	ff		 mov	 DWORD PTR _pDummy$[ebp], ecx

; 227  : 
; 228  : 	if( pDummy )

  001c8	85 c9		 test	 ecx, ecx
  001ca	74 09		 je	 SHORT $LN3@CreateDumm

; 229  : 		pDummy->SetControlSkillName( GetName() );

  001cc	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ?SetControlSkillName@ioDummyChar@@QAEXABVioHashString@@@Z ; ioDummyChar::SetControlSkillName
$LN3@CreateDumm:

; 230  : 
; 231  : 	if ( m_bSetUseActiveCnt )

  001d5	80 bf 60 11 00
	00 00		 cmp	 BYTE PTR [edi+4448], 0
  001dc	74 2b		 je	 SHORT $LN2@CreateDumm

; 232  : 		g_DummyCharMgr.CheckMaxCreateDummyCnt( pChar, pDummy, m_nMaxCreateCnt);

  001de	8d 85 ac 7f ff
	ff		 lea	 eax, DWORD PTR _value$532936[ebp]
  001e4	50		 push	 eax
  001e5	8d 8f 30 11 00
	00		 lea	 ecx, DWORD PTR [edi+4400]
  001eb	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  001f0	ff b5 ac 7f ff
	ff		 push	 DWORD PTR _value$532936[ebp]
  001f6	ff b5 b0 7f ff
	ff		 push	 DWORD PTR _pDummy$[ebp]
  001fc	56		 push	 esi
  001fd	e8 00 00 00 00	 call	 ?GetSingleton@ioDummyCharManager@@SAAAV1@XZ ; ioDummyCharManager::GetSingleton
  00202	8b c8		 mov	 ecx, eax
  00204	e8 00 00 00 00	 call	 ?CheckMaxCreateDummyCnt@ioDummyCharManager@@QAE_NPAVioBaseChar@@PAVioDummyChar@@H@Z ; ioDummyCharManager::CheckMaxCreateDummyCnt
$LN2@CreateDumm:

; 233  : 
; 234  : 	if( pChar->IsNeedSendNetwork() )

  00209	8b 06		 mov	 eax, DWORD PTR [esi]
  0020b	8b ce		 mov	 ecx, esi
  0020d	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00213	84 c0		 test	 al, al
  00215	0f 84 8c 00 00
	00		 je	 $LN5@CreateDumm

; 235  : 	{
; 236  : 		SP2Packet kPacket( CUPK_SKILL_EXTRA_INFO );

  0021b	68 39 41 00 00	 push	 16697			; 00004139H
  00220	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  00226	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 237  : 		kPacket << pChar->GetCharName();

  0022b	ff b5 a8 7f ff
	ff		 push	 DWORD PTR tv436[ebp]
  00231	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00235	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  0023b	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 238  : 		kPacket << GetName();

  00240	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00243	50		 push	 eax
  00244	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  0024a	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 239  : 		kPacket << SS_CREATE_DUMMY;

  0024f	6a 02		 push	 2
  00251	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  00257	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 240  : 		kPacket << pChar->GetTargetRot();

  0025c	53		 push	 ebx
  0025d	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  00263	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 241  : 		kPacket << vPos;

  00268	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  0026b	50		 push	 eax
  0026c	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  00272	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 242  : 		kPacket << m_iDummyIndex;

  00277	ff b7 28 11 00
	00		 push	 DWORD PTR [edi+4392]
  0027d	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  00283	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 243  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  00288	8d 85 b4 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$530675[ebp]
  0028e	6a 00		 push	 0
  00290	50		 push	 eax
  00291	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 244  : 	}

  00296	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0029a	59		 pop	 ecx
  0029b	59		 pop	 ecx
  0029c	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  002a2	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN5@CreateDumm:

; 245  : }

  002a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b1	59		 pop	 ecx
  002b2	5f		 pop	 edi
  002b3	5e		 pop	 esi
  002b4	5b		 pop	 ebx
  002b5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b8	33 cd		 xor	 ecx, ebp
  002ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bf	c9		 leave
  002c0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z$0:
  00000	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530675[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a a0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32864]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioCreateDummySkill::CreateDummyChar
; Function compile flags: /Ogsp
;	COMDAT ?GetMaxActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$532965 = -4					; size = 4
_pChar$ = 8						; size = 4
?GetMaxActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z PROC ; ioCreateDummySkill::GetMaxActiveCnt, COMDAT
; _this$ = ecx

; 258  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 259  : 	return m_nMaxCreateCnt; 

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$532965[ebp]
  00007	50		 push	 eax
  00008	81 c1 30 11 00
	00		 add	 ecx, 4400		; 00001130H
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00013	8b 45 fc	 mov	 eax, DWORD PTR _value$532965[ebp]

; 260  : }

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?GetMaxActiveCnt@ioCreateDummySkill@@UBEHPAVioBaseChar@@@Z ENDP ; ioCreateDummySkill::GetMaxActiveCnt
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@ABV0@@Z			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$532978 = 8					; size = 4
_value$532973 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@K@@QAE@ABV0@@Z PROC			; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$532973[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00036	8b 45 08	 mov	 eax, DWORD PTR _value$532973[ebp]
  00039	89 45 08	 mov	 DWORD PTR _value$532978[ebp], eax
  0003c	8d 45 08	 lea	 eax, DWORD PTR _value$532978[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 124  : 	}

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@ABV0@@Z ENDP			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
PUBLIC	??0?$CEncrypt@H@@QAE@ABV0@@Z			; CEncrypt<int>::CEncrypt<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@H@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@H@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@H@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@H@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$532997 = 8					; size = 4
_value$532992 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@H@@QAE@ABV0@@Z PROC			; CEncrypt<int>::CEncrypt<int>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@H@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@H@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@H@@AAEXXZ ; CEncrypt<int>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$532992[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00036	8b 45 08	 mov	 eax, DWORD PTR _value$532992[ebp]
  00039	89 45 08	 mov	 DWORD PTR _value$532997[ebp], eax
  0003c	8d 45 08	 lea	 eax, DWORD PTR _value$532997[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 124  : 	}

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@H@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@H@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@H@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@H@@QAE@ABV0@@Z ENDP			; CEncrypt<int>::CEncrypt<int>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?IsCanJumpingSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$533010 = -1					; size = 1
?IsCanJumpingSkill@ioSkill@@UBE_NXZ PROC		; ioSkill::IsCanJumpingSkill, COMDAT
; _this$ = ecx

; 431  : 	virtual bool IsCanJumpingSkill() const { return m_bEnableJumpingSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$533010[ebp]
  00007	50		 push	 eax
  00008	81 c1 9c 03 00
	00		 add	 ecx, 924		; 0000039cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$533010[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanJumpingSkill@ioSkill@@UBE_NXZ ENDP		; ioSkill::IsCanJumpingSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$533017 = -1					; size = 1
?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ PROC	; ioSkill::IsCanJumpingSkillOnBlowWound, COMDAT
; _this$ = ecx

; 432  : 	virtual bool IsCanJumpingSkillOnBlowWound() const { return m_bEnableJumpingSkillOnBlowWound; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$533017[ebp]
  00007	50		 push	 eax
  00008	81 c1 cc 03 00
	00		 add	 ecx, 972		; 000003ccH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$533017[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ ENDP	; ioSkill::IsCanJumpingSkillOnBlowWound
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanDownSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$533024 = -1					; size = 1
?IsCanDownSkill@ioSkill@@UBE_NXZ PROC			; ioSkill::IsCanDownSkill, COMDAT
; _this$ = ecx

; 437  : 	virtual bool IsCanDownSkill() const { return m_bEnableDownSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$533024[ebp]
  00007	50		 push	 eax
  00008	81 c1 5c 04 00
	00		 add	 ecx, 1116		; 0000045cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$533024[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanDownSkill@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsCanDownSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$533031 = -1					; size = 1
?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ PROC		; ioSkill::IsCanBlowWoundSkill, COMDAT
; _this$ = ecx

; 440  : 	virtual bool IsCanBlowWoundSkill() const { return m_bEnableBlowWoundSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$533031[ebp]
  00007	50		 push	 eax
  00008	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$533031[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ ENDP		; ioSkill::IsCanBlowWoundSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanWoundSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$533038 = -1					; size = 1
?IsCanWoundSkill@ioSkill@@UBE_NXZ PROC			; ioSkill::IsCanWoundSkill, COMDAT
; _this$ = ecx

; 446  : 	virtual bool IsCanWoundSkill() const { return m_bEnableWoundSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$533038[ebp]
  00007	50		 push	 eax
  00008	81 c1 54 05 00
	00		 add	 ecx, 1364		; 00000554H
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$533038[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanWoundSkill@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsCanWoundSkill
_TEXT	ENDS
PUBLIC	??0ioCreateDummySkill@@QAE@ABV0@@Z		; ioCreateDummySkill::ioCreateDummySkill
EXTRN	??0ioAttackSkill@@QAE@ABV0@@Z:PROC		; ioAttackSkill::ioAttackSkill
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreatedummyskill.cpp
xdata$x	SEGMENT
__unwindtable$??0ioCreateDummySkill@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCreateDummySkill@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCreateDummySkill@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioCreateDummySkill@@QAE@ABV0@@Z$2
__ehfuncinfo$??0ioCreateDummySkill@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioCreateDummySkill@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCreateDummySkill@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioCreateDummySkill@@QAE@ABV0@@Z PROC			; ioCreateDummySkill::ioCreateDummySkill, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCreateDummySkill@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioAttackSkill@@QAE@ABV0@@Z ; ioAttackSkill::ioAttackSkill
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 e8 10 00
	00		 lea	 eax, DWORD PTR [edi+4328]
  00024	50		 push	 eax
  00025	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateDummySkill@@6B@
  00031	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00036	8d 87 18 11 00
	00		 lea	 eax, DWORD PTR [edi+4376]
  0003c	50		 push	 eax
  0003d	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0004d	d9 87 2c 11 00
	00		 fld	 DWORD PTR [edi+4396]
  00053	8d 87 30 11 00
	00		 lea	 eax, DWORD PTR [edi+4400]
  00059	d9 9e 2c 11 00
	00		 fstp	 DWORD PTR [esi+4396]
  0005f	50		 push	 eax
  00060	8d 8e 30 11 00
	00		 lea	 ecx, DWORD PTR [esi+4400]
  00066	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006a	e8 00 00 00 00	 call	 ??0?$CEncrypt@H@@QAE@ABV0@@Z ; CEncrypt<int>::CEncrypt<int>
  0006f	8a 87 60 11 00
	00		 mov	 al, BYTE PTR [edi+4448]

; 25   : 	m_bSetHandMesh = false;
; 26   : 
; 27   : 	m_SkillState = SS_NONE;

  00075	83 a6 e4 10 00
	00 00		 and	 DWORD PTR [esi+4324], 0

; 28   : 	m_iDummyIndex = -1;	

  0007c	83 8e 28 11 00
	00 ff		 or	 DWORD PTR [esi+4392], -1
  00083	88 86 60 11 00
	00		 mov	 BYTE PTR [esi+4448], al
  00089	c6 86 0a 0f 00
	00 00		 mov	 BYTE PTR [esi+3850], 0

; 29   : }

  00090	8b c6		 mov	 eax, esi
  00092	e8 00 00 00 00	 call	 __EH_epilog3
  00097	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCreateDummySkill@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??0ioCreateDummySkill@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioCreateDummySkill@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 18 11 00
	00		 add	 ecx, 4376		; 00001118H
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioCreateDummySkill@@QAE@ABV0@@Z:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCreateDummySkill@@QAE@ABV0@@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCreateDummySkill@@QAE@ABV0@@Z ENDP			; ioCreateDummySkill::ioCreateDummySkill
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ$0
__ehfuncinfo$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ
_TEXT	SEGMENT
$T533055 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ PROC	; ioCreateDummySkill::Clone, COMDAT
; _this$ = ecx

; 51   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 52   : 	return new ioCreateDummySkill( *this );

  0000e	68 64 11 00 00	 push	 4452			; 00001164H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T533055[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioCreateDummySkill@@QAE@ABV0@@Z ; ioCreateDummySkill::ioCreateDummySkill
$LN3@Clone:

; 53   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T533055[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioCreateDummySkill@@UAEPAVioSkill@@XZ ENDP	; ioCreateDummySkill::Clone
; Function compile flags: /Ogsp
;	COMDAT ?OnProcessState@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?OnProcessState@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioCreateDummySkill::OnProcessState, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 82   : 	DWORD dwCurTime = FRAMEGETTIME();

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000d	8b c8		 mov	 ecx, eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00015	8b f8		 mov	 edi, eax

; 83   : 	
; 84   : 	switch( m_SkillState )

  00017	8b 86 e4 10 00
	00		 mov	 eax, DWORD PTR [esi+4324]
  0001d	83 e8 00	 sub	 eax, 0
  00020	74 1c		 je	 SHORT $LN4@OnProcessS
  00022	48		 dec	 eax
  00023	75 50		 jne	 SHORT $LN3@OnProcessS

; 94   : 			}
; 95   : 		}
; 96   : 		break;
; 97   : 	case SS_ACTION:
; 98   : 		{
; 99   : 			CreateDummyChar( pChar, pStage );

  00025	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  00028	8b ce		 mov	 ecx, esi
  0002a	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  0002d	e8 00 00 00 00	 call	 ?CreateDummyChar@ioCreateDummySkill@@IAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioCreateDummySkill::CreateDummyChar

; 100  : 			SetSkillEndState( pChar );

  00032	c7 86 e4 10 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+4324], 3

; 101  : 		}
; 102  : 		break;

  0003c	eb 37		 jmp	 SHORT $LN3@OnProcessS
$LN4@OnProcessS:

; 85   : 	{
; 86   : 	case SS_NONE:
; 87   : 		{
; 88   : 			DWORD dwPreDelay = GetPreDelayTime();

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8b ce		 mov	 ecx, esi
  00042	ff 90 34 01 00
	00		 call	 DWORD PTR [eax+308]

; 89   : 			if( m_dwPreDelayStartTime + dwPreDelay < dwCurTime )

  00048	8b 96 20 02 00
	00		 mov	 edx, DWORD PTR [esi+544]
  0004e	03 d0		 add	 edx, eax
  00050	3b d7		 cmp	 edx, edi
  00052	73 21		 jae	 SHORT $LN3@OnProcessS

; 90   : 			{
; 91   : 				m_dwPreDelayStartTime = 0;
; 92   : 				AttackSkillFire( pChar );

  00054	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	83 a6 20 02 00
	00 00		 and	 DWORD PTR [esi+544], 0
  00060	8b ce		 mov	 ecx, esi
  00062	ff 90 8c 01 00
	00		 call	 DWORD PTR [eax+396]

; 93   : 				EndPreDelayEffect( pChar );

  00068	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	8b ce		 mov	 ecx, esi
  0006f	ff 90 dc 00 00
	00		 call	 DWORD PTR [eax+220]
$LN3@OnProcessS:
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi

; 103  : 	case SS_END:
; 104  : 		break;
; 105  : 	}
; 106  : }

  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
?OnProcessState@ioCreateDummySkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioCreateDummySkill::OnProcessState
_TEXT	ENDS
END
