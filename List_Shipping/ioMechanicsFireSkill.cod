; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioMechanicsFireSkill.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?return360@@YAIXZ				; return360
; Function compile flags: /Ogsp
;	COMDAT ?return360@@YAIXZ
_TEXT	SEGMENT
?return360@@YAIXZ PROC					; return360, COMDAT

; 27   : 	__forceinline unsigned int return360() { __asm mov eax, 360 };

  00000	b8 68 01 00 00	 mov	 eax, 360		; 00000168H
  00005	c3		 ret	 0
?return360@@YAIXZ ENDP					; return360
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	_acosf
EXTRN	__fltused:DWORD
EXTRN	__CIacos:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIacos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetCurJumpPowerAmt
; Function compile flags: /Ogsp
;	COMDAT ?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_fAmt$ = 8						; size = 4
?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z PROC		; ioBaseChar::SetCurJumpPowerAmt, COMDAT
; _this$ = ecx

; 2628 : 	inline void SetCurJumpPowerAmt( float fAmt ) { m_fCurJumpPowerAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	f3 0f 11 81 90
	0e 00 00	 movss	 DWORD PTR [ecx+3728], xmm0
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z ENDP		; ioBaseChar::SetCurJumpPowerAmt
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	?OnSkillEnd@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::OnSkillEnd
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	?RestoreSkillProtection@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::RestoreSkillProtection
EXTRN	?SetMoveDirByRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioBaseChar::SetMoveDirByRotate
EXTRN	?SetSkillMoveEnable@ioBaseChar@@QAEX_N0@Z:PROC	; ioBaseChar::SetSkillMoveEnable
EXTRN	?EndMapEffect@ioBaseChar@@QAEXK_N@Z:PROC	; ioBaseChar::EndMapEffect
EXTRN	?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z:PROC ; ioBaseChar::EndEffect
EXTRN	?RestoreSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N2@Z:PROC ; ioBaseChar::RestoreSkillWeaponMesh
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z:PROC	; ioBaseChar::ShowWeaponItemMesh
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
;	COMDAT ?OnSkillEnd@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?OnSkillEnd@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::OnSkillEnd, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 380  : 	// 기본무기 장착
; 381  : 	if( m_bUseItemMesh && pChar )

  00007	33 db		 xor	 ebx, ebx
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  0000d	38 9e 08 0f 00
	00		 cmp	 BYTE PTR [esi+3848], bl
  00013	74 0e		 je	 SHORT $LN7@OnSkillEnd
  00015	3b fb		 cmp	 edi, ebx
  00017	74 0a		 je	 SHORT $LN7@OnSkillEnd

; 382  : 		pChar->ShowWeaponItemMesh( true );

  00019	53		 push	 ebx
  0001a	6a 01		 push	 1
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z ; ioBaseChar::ShowWeaponItemMesh
$LN7@OnSkillEnd:

; 383  : 
; 384  : 	if( !m_HandMesh.IsEmpty() && pChar )

  00023	8d 8e f8 0e 00
	00		 lea	 ecx, DWORD PTR [esi+3832]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0002f	84 c0		 test	 al, al
  00031	75 1c		 jne	 SHORT $LN6@OnSkillEnd
  00033	3b fb		 cmp	 edi, ebx
  00035	74 18		 je	 SHORT $LN6@OnSkillEnd

; 385  : 		pChar->RestoreSkillWeaponMesh( this, m_HandMesh, m_bVisibleEquipMesh );

  00037	0f b6 86 09 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3849]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	8d 86 f8 0e 00
	00		 lea	 eax, DWORD PTR [esi+3832]
  00046	50		 push	 eax
  00047	56		 push	 esi
  00048	8b cf		 mov	 ecx, edi
  0004a	e8 00 00 00 00	 call	 ?RestoreSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N2@Z ; ioBaseChar::RestoreSkillWeaponMesh
$LN6@OnSkillEnd:

; 386  : 
; 387  : 	m_bSetHandMesh = false;
; 388  : 
; 389  : 	EndPreDelayEffect( pChar );

  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	57		 push	 edi
  00052	8b ce		 mov	 ecx, esi
  00054	88 9e 0a 0f 00
	00		 mov	 BYTE PTR [esi+3850], bl
  0005a	ff 90 dc 00 00
	00		 call	 DWORD PTR [eax+220]

; 390  : 	if( pChar )

  00060	3b fb		 cmp	 edi, ebx
  00062	74 12		 je	 SHORT $LN5@OnSkillEnd

; 391  : 		pChar->EndEffect( m_SkillEffectName );

  00064	6a 01		 push	 1
  00066	6a 01		 push	 1
  00068	8d 86 b8 01 00
	00		 lea	 eax, DWORD PTR [esi+440]
  0006e	50		 push	 eax
  0006f	8b cf		 mov	 ecx, edi
  00071	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect
$LN5@OnSkillEnd:

; 392  : 
; 393  : 	if( m_dwSkillMapEffect != -1 )

  00076	8b 86 1c 02 00
	00		 mov	 eax, DWORD PTR [esi+540]
  0007c	83 f8 ff	 cmp	 eax, -1
  0007f	74 15		 je	 SHORT $LN4@OnSkillEnd

; 394  : 	{
; 395  : 		if( pChar )

  00081	3b fb		 cmp	 edi, ebx
  00083	74 0a		 je	 SHORT $LN3@OnSkillEnd

; 396  : 			pChar->EndMapEffect( m_dwSkillMapEffect );

  00085	6a 01		 push	 1
  00087	50		 push	 eax
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ?EndMapEffect@ioBaseChar@@QAEXK_N@Z ; ioBaseChar::EndMapEffect
$LN3@OnSkillEnd:

; 397  : 		m_dwSkillMapEffect = -1;

  0008f	83 8e 1c 02 00
	00 ff		 or	 DWORD PTR [esi+540], -1
$LN4@OnSkillEnd:

; 398  : 	}
; 399  : 
; 400  : 	//
; 401  : 	m_bReduceGauge = false;

  00096	88 9e 50 03 00
	00		 mov	 BYTE PTR [esi+848], bl

; 402  : 
; 403  : 	if( pChar )

  0009c	3b fb		 cmp	 edi, ebx
  0009e	74 74		 je	 SHORT $LN2@OnSkillEnd

; 404  : 	{
; 405  : 		pChar->EndEffect( m_ChargeEffect, false );

  000a0	6a 01		 push	 1
  000a2	53		 push	 ebx
  000a3	8d 86 a8 12 00
	00		 lea	 eax, DWORD PTR [esi+4776]
  000a9	50		 push	 eax
  000aa	8b cf		 mov	 ecx, edi
  000ac	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 406  : 		pChar->EndEffect( m_ChargeMaxEffect, false );

  000b1	6a 01		 push	 1
  000b3	53		 push	 ebx
  000b4	8d 86 b8 12 00
	00		 lea	 eax, DWORD PTR [esi+4792]
  000ba	50		 push	 eax
  000bb	8b cf		 mov	 ecx, edi
  000bd	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 407  : 		pChar->EndEffect( m_ChargeUpEffect, false );

  000c2	6a 01		 push	 1
  000c4	53		 push	 ebx
  000c5	8d 86 c0 13 00
	00		 lea	 eax, DWORD PTR [esi+5056]
  000cb	50		 push	 eax
  000cc	8b cf		 mov	 ecx, edi
  000ce	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 408  : 		pChar->EndEffect( m_ChargeDownEffect, false );

  000d3	6a 01		 push	 1
  000d5	53		 push	 ebx
  000d6	8d 86 d0 13 00
	00		 lea	 eax, DWORD PTR [esi+5072]
  000dc	50		 push	 eax
  000dd	8b cf		 mov	 ecx, edi
  000df	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 409  : 
; 410  : 		m_dwChargeEffect = 0;
; 411  : 		m_dwChargeMaxEffect = 0;
; 412  : 		m_dwUpDownEffect = 0;
; 413  : 
; 414  : 		pChar->SetSkillMoveEnable( false, false );

  000e4	53		 push	 ebx
  000e5	53		 push	 ebx
  000e6	8b cf		 mov	 ecx, edi
  000e8	89 9e c8 12 00
	00		 mov	 DWORD PTR [esi+4808], ebx
  000ee	89 9e cc 12 00
	00		 mov	 DWORD PTR [esi+4812], ebx
  000f4	89 9e e0 13 00
	00		 mov	 DWORD PTR [esi+5088], ebx
  000fa	e8 00 00 00 00	 call	 ?SetSkillMoveEnable@ioBaseChar@@QAEX_N0@Z ; ioBaseChar::SetSkillMoveEnable

; 415  : 		pChar->SetMoveDirByRotate( pChar->GetTargetRot() );

  000ff	8d 87 a4 06 00
	00		 lea	 eax, DWORD PTR [edi+1700]
  00105	50		 push	 eax
  00106	8b cf		 mov	 ecx, edi
  00108	e8 00 00 00 00	 call	 ?SetMoveDirByRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z ; ioBaseChar::SetMoveDirByRotate

; 416  : 		pChar->RestoreSkillProtection();

  0010d	8b cf		 mov	 ecx, edi
  0010f	e8 00 00 00 00	 call	 ?RestoreSkillProtection@ioBaseChar@@QAEXXZ ; ioBaseChar::RestoreSkillProtection
$LN2@OnSkillEnd:

; 417  : 	}
; 418  : 
; 419  : 	m_SkillUseType = SUT_NORMAL;

  00114	89 5e 74	 mov	 DWORD PTR [esi+116], ebx

; 420  : 	m_CurDirKey = ioUserKeyInput::DKI_NONE;

  00117	89 9e 18 14 00
	00		 mov	 DWORD PTR [esi+5144], ebx

; 421  : 	m_PreDirKey = ioUserKeyInput::DKI_NONE;

  0011d	89 9e 14 14 00
	00		 mov	 DWORD PTR [esi+5140], ebx

; 422  : 
; 423  : 	if( !m_SkillEndEffectName.IsEmpty() && pChar )

  00123	81 c6 e8 01 00
	00		 add	 esi, 488		; 000001e8H
  00129	8b ce		 mov	 ecx, esi
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00131	84 c0		 test	 al, al
  00133	75 0f		 jne	 SHORT $LN1@OnSkillEnd
  00135	3b fb		 cmp	 edi, ebx
  00137	74 0b		 je	 SHORT $LN1@OnSkillEnd

; 424  : 		pChar->AttachEffect( m_SkillEndEffectName );

  00139	6a 01		 push	 1
  0013b	53		 push	 ebx
  0013c	56		 push	 esi
  0013d	8b cf		 mov	 ecx, edi
  0013f	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect
$LN1@OnSkillEnd:
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx

; 425  : }

  00147	5d		 pop	 ebp
  00148	c2 04 00	 ret	 4
?OnSkillEnd@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::OnSkillEnd
_TEXT	ENDS
PUBLIC	?CheckUseItemMesh@ioMechanicsFireSkill@@UAE_NXZ	; ioMechanicsFireSkill::CheckUseItemMesh
; Function compile flags: /Ogsp
;	COMDAT ?CheckUseItemMesh@ioMechanicsFireSkill@@UAE_NXZ
_TEXT	SEGMENT
?CheckUseItemMesh@ioMechanicsFireSkill@@UAE_NXZ PROC	; ioMechanicsFireSkill::CheckUseItemMesh, COMDAT
; _this$ = ecx

; 584  : 	return m_bUseItemMesh;

  00000	8a 81 08 0f 00
	00		 mov	 al, BYTE PTR [ecx+3848]

; 585  : }

  00006	c3		 ret	 0
?CheckUseItemMesh@ioMechanicsFireSkill@@UAE_NXZ ENDP	; ioMechanicsFireSkill::CheckUseItemMesh
_TEXT	ENDS
PUBLIC	?SetEndState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::SetEndState
; Function compile flags: /Ogsp
;	COMDAT ?SetEndState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?SetEndState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::SetEndState, COMDAT
; _this$ = ecx

; 709  : 	m_SkillState = SS_END;

  00000	c7 81 e4 10 00
	00 03 00 00 00	 mov	 DWORD PTR [ecx+4324], 3

; 710  : }

  0000a	c2 04 00	 ret	 4
?SetEndState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::SetEndState
_TEXT	ENDS
PUBLIC	?IsSkillMotionEnd@ioMechanicsFireSkill@@UBE_NKPAVioBaseChar@@@Z ; ioMechanicsFireSkill::IsSkillMotionEnd
; Function compile flags: /Ogsp
;	COMDAT ?IsSkillMotionEnd@ioMechanicsFireSkill@@UBE_NKPAVioBaseChar@@@Z
_TEXT	SEGMENT
_dwActionStop$ = 8					; size = 4
_pOwner$ = 12						; size = 4
?IsSkillMotionEnd@ioMechanicsFireSkill@@UBE_NKPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::IsSkillMotionEnd, COMDAT
; _this$ = ecx

; 742  : 	if( m_dwPreDelayStartTime > 0 )

  00000	83 b9 20 02 00
	00 00		 cmp	 DWORD PTR [ecx+544], 0
  00007	76 04		 jbe	 SHORT $LN5@IsSkillMot
$LN8@IsSkillMot:

; 743  : 		return false;

  00009	32 c0		 xor	 al, al
  0000b	eb 11		 jmp	 SHORT $LN6@IsSkillMot
$LN5@IsSkillMot:

; 744  : 
; 745  : 	switch( m_SkillState )

  0000d	8b 89 e4 10 00
	00		 mov	 ecx, DWORD PTR [ecx+4324]
  00013	85 c9		 test	 ecx, ecx
  00015	78 05		 js	 SHORT $LN3@IsSkillMot
  00017	83 f9 02	 cmp	 ecx, 2

; 746  : 	{
; 747  : 	case SS_NONE:
; 748  : 	case SS_CHARGE:
; 749  : 	case SS_ACTION:
; 750  : 		return false;

  0001a	7e ed		 jle	 SHORT $LN8@IsSkillMot
$LN3@IsSkillMot:

; 751  : 	case SS_END:
; 752  : 		return true;
; 753  : 	}
; 754  : 
; 755  : 	return true;

  0001c	b0 01		 mov	 al, 1
$LN6@IsSkillMot:

; 756  : }

  0001e	c2 08 00	 ret	 8
?IsSkillMotionEnd@ioMechanicsFireSkill@@UBE_NKPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::IsSkillMotionEnd
_TEXT	ENDS
PUBLIC	?IsNoDropState@ioMechanicsFireSkill@@UBE_NXZ	; ioMechanicsFireSkill::IsNoDropState
; Function compile flags: /Ogsp
;	COMDAT ?IsNoDropState@ioMechanicsFireSkill@@UBE_NXZ
_TEXT	SEGMENT
?IsNoDropState@ioMechanicsFireSkill@@UBE_NXZ PROC	; ioMechanicsFireSkill::IsNoDropState, COMDAT
; _this$ = ecx

; 780  : 	return true;

  00000	b0 01		 mov	 al, 1

; 781  : }

  00002	c3		 ret	 0
?IsNoDropState@ioMechanicsFireSkill@@UBE_NXZ ENDP	; ioMechanicsFireSkill::IsNoDropState
_TEXT	ENDS
PUBLIC	?IsJumpSkill@ioMechanicsFireSkill@@QAE_NXZ	; ioMechanicsFireSkill::IsJumpSkill
; Function compile flags: /Ogsp
;	COMDAT ?IsJumpSkill@ioMechanicsFireSkill@@QAE_NXZ
_TEXT	SEGMENT
?IsJumpSkill@ioMechanicsFireSkill@@QAE_NXZ PROC		; ioMechanicsFireSkill::IsJumpSkill, COMDAT
; _this$ = ecx

; 809  : 	return m_bJumpSkill;

  00000	8a 81 1c 14 00
	00		 mov	 al, BYTE PTR [ecx+5148]

; 810  : }

  00006	c3		 ret	 0
?IsJumpSkill@ioMechanicsFireSkill@@QAE_NXZ ENDP		; ioMechanicsFireSkill::IsJumpSkill
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC		; D3DXVec3Dot, COMDAT

; 1736 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1737 : #ifdef D3DX_DEBUG
; 1738 :     if(!pV1 || !pV2)
; 1739 :         return 0.0f;
; 1740 : #endif
; 1741 : 
; 1742 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00009	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0000f	d9 00		 fld	 DWORD PTR [eax]
  00011	d8 09		 fmul	 DWORD PTR [ecx]
  00013	de c1		 faddp	 ST(1), ST(0)
  00015	d9 40 08	 fld	 DWORD PTR [eax+8]
  00018	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0001b	de c1		 faddp	 ST(1), ST(0)
  0001d	d9 5d 08	 fstp	 DWORD PTR tv188[ebp]
  00020	d9 45 08	 fld	 DWORD PTR tv188[ebp]

; 1743 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00006	56		 push	 esi
  00007	57		 push	 edi

; 1748 :     D3DXVECTOR3 v;
; 1749 : 
; 1750 : #ifdef D3DX_DEBUG
; 1751 :     if(!pOut || !pV1 || !pV2)
; 1752 :         return NULL;
; 1753 : #endif
; 1754 : 
; 1755 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00008	8b 45 0c	 mov	 eax, DWORD PTR _pV1$[ebp]
  0000b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00010	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00018	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0001d	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00022	0f 5a e8	 cvtps2pd xmm5, xmm0
  00025	0f 5a e1	 cvtps2pd xmm4, xmm1
  00028	0f 5a f2	 cvtps2pd xmm6, xmm2
  0002b	f2 0f 59 e5	 mulsd	 xmm4, xmm5

; 1756 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0002f	0f 5a d2	 cvtps2pd xmm2, xmm2
  00032	0f 5a c9	 cvtps2pd xmm1, xmm1
  00035	0f 5a eb	 cvtps2pd xmm5, xmm3
  00038	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  0003c	f2 0f 5c e5	 subsd	 xmm4, xmm5
  00040	f3 0f 10 28	 movss	 xmm5, DWORD PTR [eax]

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00044	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00047	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  0004b	f3 0f 11 65 f4	 movss	 DWORD PTR _v$[ebp], xmm4
  00050	f3 0f 10 21	 movss	 xmm4, DWORD PTR [ecx]
  00054	0f 5a f4	 cvtps2pd xmm6, xmm4
  00057	f2 0f 59 f2	 mulsd	 xmm6, xmm2
  0005b	0f 5a d5	 cvtps2pd xmm2, xmm5
  0005e	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00062	f2 0f 5c f2	 subsd	 xmm6, xmm2
  00066	66 0f 5a ce	 cvtpd2ps xmm1, xmm6
  0006a	f3 0f 11 4d f8	 movss	 DWORD PTR _v$[ebp+4], xmm1
  0006f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00072	0f 5a d3	 cvtps2pd xmm2, xmm3
  00075	0f 5a cd	 cvtps2pd xmm1, xmm5
  00078	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0007c	8d 75 f4	 lea	 esi, DWORD PTR _v$[ebp]
  0007f	8b f8		 mov	 edi, eax
  00081	0f 5a d4	 cvtps2pd xmm2, xmm4
  00084	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00088	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0008c	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00090	f3 0f 11 45 fc	 movss	 DWORD PTR _v$[ebp+8], xmm0
  00095	a5		 movsd
  00096	a5		 movsd
  00097	a5		 movsd
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi

; 1760 :     return pOut;
; 1761 : }

  0009a	c9		 leave
  0009b	c3		 ret	 0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?return57@@YAIXZ				; return57
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
;	COMDAT ?return57@@YAIXZ
_TEXT	SEGMENT
?return57@@YAIXZ PROC					; return57, COMDAT

; 15   : __forceinline unsigned int return57() { __asm mov eax, 57 };

  00000	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  00005	c3		 ret	 0
?return57@@YAIXZ ENDP					; return57
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?GetName@ioSkill@@QBEABVioHashString@@XZ	; ioSkill::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?GetName@ioSkill@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioSkill@@QBEABVioHashString@@XZ PROC		; ioSkill::GetName, COMDAT
; _this$ = ecx

; 414  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?GetName@ioSkill@@QBEABVioHashString@@XZ ENDP		; ioSkill::GetName
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@M@@6B@				; CEncrypt<float>::`vftable'
PUBLIC	??1?$CEncrypt@M@@UAE@XZ				; CEncrypt<float>::~CEncrypt<float>
PUBLIC	??_R4?$CEncrypt@M@@6B@				; CEncrypt<float>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@M@@@8			; CEncrypt<float> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@M@@8				; CEncrypt<float>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@M@@8				; CEncrypt<float>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@M@@8			; CEncrypt<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1ccddaabb@@UAE@XZ:PROC			; ccddaabb::~ccddaabb
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CEncrypt@M@@UAEPAXI@Z:PROC		; CEncrypt<float>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@M@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@M@@8 DD FLAT:??_R0?AV?$CEncrypt@M@@@8 ; CEncrypt<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@M@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@M@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@M@@8 ; CEncrypt<float>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@M@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@M@@8 DD 00H				; CEncrypt<float>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@M@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@M@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<float> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@M@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@M@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@M@@6B@ DD 00H				; CEncrypt<float>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@M@@@8
	DD	FLAT:??_R3?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@M@@6B@
CONST	SEGMENT
??_7?$CEncrypt@M@@6B@ DD FLAT:??_R4?$CEncrypt@M@@6B@	; CEncrypt<float>::`vftable'
	DD	FLAT:??_E?$CEncrypt@M@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@M@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@M@@UAE@XZ PROC				; CEncrypt<float>::~CEncrypt<float>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@M@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@M@@UAE@XZ ENDP				; CEncrypt<float>::~CEncrypt<float>
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`vftable'
PUBLIC	??1?$CEncrypt@K@@UAE@XZ				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
PUBLIC	??_R4?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@K@@@8			; CEncrypt<unsigned long> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@K@@8			; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CEncrypt@K@@UAEPAXI@Z:PROC		; CEncrypt<unsigned long>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@K@@8 DD FLAT:??_R0?AV?$CEncrypt@K@@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@K@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@K@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@K@@8 DD 00H				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@K@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@K@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<unsigned long> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@K@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@K@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@K@@6B@ DD 00H				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@K@@@8
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@K@@6B@
CONST	SEGMENT
??_7?$CEncrypt@K@@6B@ DD FLAT:??_R4?$CEncrypt@K@@6B@	; CEncrypt<unsigned long>::`vftable'
	DD	FLAT:??_E?$CEncrypt@K@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@K@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@K@@UAE@XZ PROC				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@K@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@K@@UAE@XZ ENDP				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@_N@@6B@				; CEncrypt<bool>::`vftable'
PUBLIC	??1?$CEncrypt@_N@@UAE@XZ			; CEncrypt<bool>::~CEncrypt<bool>
PUBLIC	??_R4?$CEncrypt@_N@@6B@				; CEncrypt<bool>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@_N@@@8			; CEncrypt<bool> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@_N@@8				; CEncrypt<bool>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@_N@@8				; CEncrypt<bool>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@_N@@8			; CEncrypt<bool>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CEncrypt@_N@@UAEPAXI@Z:PROC		; CEncrypt<bool>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@_N@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@_N@@8 DD FLAT:??_R0?AV?$CEncrypt@_N@@@8 ; CEncrypt<bool>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@_N@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@_N@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@_N@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@_N@@8 ; CEncrypt<bool>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@_N@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@_N@@8 DD 00H				; CEncrypt<bool>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@_N@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@_N@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@_N@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<bool> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@_N@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@_N@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@_N@@6B@ DD 00H				; CEncrypt<bool>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@_N@@@8
	DD	FLAT:??_R3?$CEncrypt@_N@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@_N@@6B@
CONST	SEGMENT
??_7?$CEncrypt@_N@@6B@ DD FLAT:??_R4?$CEncrypt@_N@@6B@	; CEncrypt<bool>::`vftable'
	DD	FLAT:??_E?$CEncrypt@_N@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@_N@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@_N@@UAE@XZ PROC				; CEncrypt<bool>::~CEncrypt<bool>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@_N@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@_N@@UAE@XZ ENDP				; CEncrypt<bool>::~CEncrypt<bool>
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@H@@6B@				; CEncrypt<int>::`vftable'
PUBLIC	??1?$CEncrypt@H@@UAE@XZ				; CEncrypt<int>::~CEncrypt<int>
PUBLIC	??_R4?$CEncrypt@H@@6B@				; CEncrypt<int>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@H@@@8			; CEncrypt<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@H@@8				; CEncrypt<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@H@@8				; CEncrypt<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@H@@8			; CEncrypt<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CEncrypt@H@@UAEPAXI@Z:PROC		; CEncrypt<int>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@H@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@H@@8 DD FLAT:??_R0?AV?$CEncrypt@H@@@8 ; CEncrypt<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@H@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@H@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@H@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@H@@8 ; CEncrypt<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@H@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@H@@8 DD 00H				; CEncrypt<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@H@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@H@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@H@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@H@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@H@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@H@@6B@ DD 00H				; CEncrypt<int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@H@@@8
	DD	FLAT:??_R3?$CEncrypt@H@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@H@@6B@
CONST	SEGMENT
??_7?$CEncrypt@H@@6B@ DD FLAT:??_R4?$CEncrypt@H@@6B@	; CEncrypt<int>::`vftable'
	DD	FLAT:??_E?$CEncrypt@H@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@H@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@H@@UAE@XZ PROC				; CEncrypt<int>::~CEncrypt<int>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@H@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@H@@UAE@XZ ENDP				; CEncrypt<int>::~CEncrypt<int>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_G?$CEncrypt@M@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@M@@UAEPAXI@Z PROC			; CEncrypt<float>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@M@@UAEPAXI@Z ENDP			; CEncrypt<float>::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$CEncrypt@K@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@K@@UAEPAXI@Z PROC			; CEncrypt<unsigned long>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar@2
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar@2:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@K@@UAEPAXI@Z ENDP			; CEncrypt<unsigned long>::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$CEncrypt@_N@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@_N@@UAEPAXI@Z PROC			; CEncrypt<bool>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@_N@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar@3
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar@3:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@_N@@UAEPAXI@Z ENDP			; CEncrypt<bool>::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$CEncrypt@H@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@H@@UAEPAXI@Z PROC			; CEncrypt<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@H@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar@4
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar@4:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@H@@UAEPAXI@Z ENDP			; CEncrypt<int>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@M@@AAEXXZ			; CEncrypt<float>::Init
EXTRN	?Setup@ccddaabb@@QAEXPBDHH@Z:PROC		; ccddaabb::Setup
EXTRN	__imp__rand:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@M@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@M@@AAEXXZ PROC				; CEncrypt<float>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@M@@AAEXXZ ENDP				; CEncrypt<float>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@K@@AAEXXZ			; CEncrypt<unsigned long>::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@K@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@K@@AAEXXZ PROC				; CEncrypt<unsigned long>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init@2
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init@2:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init@2:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init@2
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init@2:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init@2

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@K@@AAEXXZ ENDP				; CEncrypt<unsigned long>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z PROC	; CEncrypt<bool>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@3
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@3:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ENDP	; CEncrypt<bool>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@_N@@AAEXXZ			; CEncrypt<bool>::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@_N@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@_N@@AAEXXZ PROC			; CEncrypt<bool>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	33 c0		 xor	 eax, eax
  00024	40		 inc	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init@3
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init@3:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init@3:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init@3
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init@3:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init@3

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@_N@@AAEXXZ ENDP			; CEncrypt<bool>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z	; CEncrypt<int>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z PROC	; CEncrypt<int>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@4
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@4:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ENDP	; CEncrypt<int>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@H@@AAEXXZ			; CEncrypt<int>::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@H@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@H@@AAEXXZ PROC				; CEncrypt<int>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init@4
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init@4:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init@4:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init@4
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init@4:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init@4

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@H@@AAEXXZ ENDP				; CEncrypt<int>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z	; CEncrypt<int>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z PROC	; CEncrypt<int>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 837  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 838  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 839  : 		*value = *((int*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 840  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ENDP	; CEncrypt<int>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_7ioMechanicsFireSkill@@6B@			; ioMechanicsFireSkill::`vftable'
PUBLIC	??1ioMechanicsFireSkill@@UAE@XZ			; ioMechanicsFireSkill::~ioMechanicsFireSkill
PUBLIC	??_R4ioMechanicsFireSkill@@6B@			; ioMechanicsFireSkill::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioMechanicsFireSkill@@@8		; ioMechanicsFireSkill `RTTI Type Descriptor'
PUBLIC	??_R3ioMechanicsFireSkill@@8			; ioMechanicsFireSkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioMechanicsFireSkill@@8			; ioMechanicsFireSkill::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioMechanicsFireSkill@@8		; ioMechanicsFireSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioAttackSkill@@8			; ioAttackSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioAttackSkill@@@8			; ioAttackSkill `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackSkill@@8				; ioAttackSkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackSkill@@8				; ioAttackSkill::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSkill@@8			; ioSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioSkill@@@8				; ioSkill `RTTI Type Descriptor'
PUBLIC	??_R3ioSkill@@8					; ioSkill::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSkill@@8					; ioSkill::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioMechanicsFireSkill@@UAEXAAVioINILoader@@@Z ; ioMechanicsFireSkill::LoadProperty
PUBLIC	?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ	; ioMechanicsFireSkill::Clone
PUBLIC	?IsProtected@ioMechanicsFireSkill@@UBE_NH@Z	; ioMechanicsFireSkill::IsProtected
PUBLIC	?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ ; ioSkill::GetDefenseSkillBreakeType
PUBLIC	?IsEnableReserve@ioMechanicsFireSkill@@UBE_NXZ	; ioMechanicsFireSkill::IsEnableReserve
PUBLIC	?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ		; ioSkill::GetSkillEndNextJumpAmt
PUBLIC	?GetSkillEndNextLandRate@ioSkill@@UBEMXZ	; ioSkill::GetSkillEndNextLandRate
PUBLIC	?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ ; ioSkill::GetSkillEndNextJumpMustEnable
PUBLIC	?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ ; ioSkill::EnableChangeGrapplingTargetPos
PUBLIC	?OnSkillStart@ioMechanicsFireSkill@@UAE_NPAVioBaseChar@@@Z ; ioMechanicsFireSkill::OnSkillStart
PUBLIC	?OnProcessState@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z ; ioMechanicsFireSkill::OnProcessState
PUBLIC	?ApplyAttributeToWeapon@ioMechanicsFireSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ; ioMechanicsFireSkill::ApplyAttributeToWeapon
PUBLIC	?ApplyExtraSkillInfo@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z ; ioMechanicsFireSkill::ApplyExtraSkillInfo
PUBLIC	?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z ; ioSkill::IsInvisibleBottomCircle
PUBLIC	?IsCanJumpingSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanJumpingSkill
PUBLIC	?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ	; ioSkill::IsCanJumpingSkillOnBlowWound
PUBLIC	?IsCanDownSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanDownSkill
PUBLIC	?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanBlowWoundSkill
PUBLIC	?IsCanWoundSkill@ioSkill@@UBE_NXZ		; ioSkill::IsCanWoundSkill
PUBLIC	?IsUseActiveCnt@ioSkill@@UBE_NXZ		; ioSkill::IsUseActiveCnt
PUBLIC	?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z	; ioSkill::GetMaxActiveCnt
PUBLIC	?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z	; ioSkill::GetCurActiveCnt
PUBLIC	?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::AttackSkillFire
EXTRN	??1ioAttackSkill@@UAE@XZ:PROC			; ioAttackSkill::~ioAttackSkill
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	?GetTypeID@ioAttackSkill@@UBEHXZ:PROC		; ioAttackSkill::GetTypeID
EXTRN	?IsCanSwitchSkill@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanSwitchSkill
EXTRN	?IsCanSemiSwitchSkill@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsCanSemiSwitchSkill
EXTRN	?IsCanCancelBySkill@ioSkill@@UBE_NPAVioBaseChar@@AAH@Z:PROC ; ioSkill::IsCanCancelBySkill
EXTRN	?IsCanUseZeroHP@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseZeroHP
EXTRN	?IsCanUseSkillWithCrown@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseSkillWithCrown
EXTRN	?IsCanUseBoss@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseBoss
EXTRN	?IsCanUseFootball@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanUseFootball
EXTRN	?IsCanUseGangSiMode@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsCanUseGangSiMode
EXTRN	?IsCanUseByWeaponType@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseByWeaponType
EXTRN	?IsCanUseThunderBirdHold@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseThunderBirdHold
EXTRN	?IsCanUseLimitHP@ioSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsCanUseLimitHP
EXTRN	?IsCanUseSkill@ioAttackSkill@@UAE_NPAVioBaseChar@@_N@Z:PROC ; ioAttackSkill::IsCanUseSkill
EXTRN	?IsOnOffEnable@ioSkill@@UAE_NXZ:PROC		; ioSkill::IsOnOffEnable
EXTRN	?IsCanDefenseStateSkill@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsCanDefenseStateSkill
EXTRN	?SetDefenseStateSkill@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::SetDefenseStateSkill
EXTRN	?HasBuff@ioSkill@@UBE_NH@Z:PROC			; ioSkill::HasBuff
EXTRN	?GetBuffType@ioSkill@@UAEHH@Z:PROC		; ioSkill::GetBuffType
EXTRN	?IsCharSkipState@ioSkill@@UBE?AW4SkillCharColType@@XZ:PROC ; ioSkill::IsCharSkipState
EXTRN	?IsEntityCollisionSkipState@ioSkill@@UBE_NXZ:PROC ; ioSkill::IsEntityCollisionSkipState
EXTRN	?IsEndState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsEndState
EXTRN	?IsAttackEndState@ioAttackSkill@@UBE_NXZ:PROC	; ioAttackSkill::IsAttackEndState
EXTRN	?IsJumpState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsJumpState
EXTRN	?IsDownState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsDownState
EXTRN	?IsCanSendControl@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsCanSendControl
EXTRN	?IsSkipState@ioSkill@@UBE_NXZ:PROC		; ioSkill::IsSkipState
EXTRN	?GetSkillMoveRate@ioSkill@@UBEMXZ:PROC		; ioSkill::GetSkillMoveRate
EXTRN	?SetSkillGrapplingState@ioSkill@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioSkill::SetSkillGrapplingState
EXTRN	?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@0@Z:PROC ; ioSkill::GetGrapplingTargetPos
EXTRN	?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioSkill::GetGrapplingTargetPos
EXTRN	?GetSkillWoundGrapplingInfo@ioSkill@@UAE?AUGrapplingSkillWoundedInfo@@XZ:PROC ; ioSkill::GetSkillWoundGrapplingInfo
EXTRN	?SetCreateWeaponDependency@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z:PROC ; ioSkill::SetCreateWeaponDependency
EXTRN	?SetNextSkillState@ioSkill@@UAEXPAVioBaseChar@@PAVioWeapon@@@Z:PROC ; ioSkill::SetNextSkillState
EXTRN	?OnSkillEndByWounded@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::OnSkillEndByWounded
EXTRN	?OnProcessNotUseSkill@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z:PROC ; ioSkill::OnProcessNotUseSkill
EXTRN	?OnSkillItemRelease@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::OnSkillItemRelease
EXTRN	?ApplyEquipSlotSkillExtraInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioSkill::ApplyEquipSlotSkillExtraInfo
EXTRN	?ApplyExtraPassiveSkillInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioSkill::ApplyExtraPassiveSkillInfo
EXTRN	?StartPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::StartPreDelayEffect
EXTRN	?EndPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackSkill::EndPreDelayEffect
EXTRN	?IsUseAutoTargetValue@ioAttackSkill@@UAE_NXZ:PROC ; ioAttackSkill::IsUseAutoTargetValue
EXTRN	?IsAutoTargetDownState@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsAutoTargetDownState
EXTRN	?CheckUseBuff@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::CheckUseBuff
EXTRN	?CheckUseActiveCount@ioSkill@@UAE_NXZ:PROC	; ioSkill::CheckUseActiveCount
EXTRN	?CheckAniRotate@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::CheckAniRotate
EXTRN	?IsEnableDashCheck@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsEnableDashCheck
EXTRN	?IsEnableMultiActive@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::IsEnableMultiActive
EXTRN	?GetAutoTargetValue@ioSkill@@UAEXAAM00@Z:PROC	; ioSkill::GetAutoTargetValue
EXTRN	?GetSkillGravityRate@ioSkill@@UAEMXZ:PROC	; ioSkill::GetSkillGravityRate
EXTRN	?GetSkillMotionName@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetSkillMotionName
EXTRN	?HasSkillMotion@ioSkill@@UBE_NXZ:PROC		; ioSkill::HasSkillMotion
EXTRN	?GetSkillMotionRate@ioSkill@@UBEMXZ:PROC	; ioSkill::GetSkillMotionRate
EXTRN	?IsPreDelayProtect@ioSkill@@UBE_NXZ:PROC	; ioSkill::IsPreDelayProtect
EXTRN	?GetPreDelayAniName@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayAniName
EXTRN	?GetPreDelayTime@ioSkill@@UBEKXZ:PROC		; ioSkill::GetPreDelayTime
EXTRN	?GetPreDelayOwnerEffect@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayOwnerEffect
EXTRN	?GetPreDelayOtherEffect@ioSkill@@UBEABVioHashString@@XZ:PROC ; ioSkill::GetPreDelayOtherEffect
EXTRN	?SetCancelSkill@ioSkill@@UAEXPAVioBaseChar@@@Z:PROC ; ioSkill::SetCancelSkill
EXTRN	?ClearAirJump@ioSkill@@MAEXXZ:PROC		; ioSkill::ClearAirJump
EXTRN	?SetAirJump@ioSkill@@MAEXPAVioBaseChar@@HM@Z:PROC ; ioSkill::SetAirJump
EXTRN	?CheckAirJump@ioSkill@@MAEXPAVioBaseChar@@@Z:PROC ; ioSkill::CheckAirJump
EXTRN	?UseActiveCount@ioSkill@@UAE_NPAVioBaseChar@@@Z:PROC ; ioSkill::UseActiveCount
EXTRN	?GetMaxActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z:PROC ; ioSkill::GetMaxActiveCount
EXTRN	?GetCurActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z:PROC ; ioSkill::GetCurActiveCount
EXTRN	?HideHPGauge@ioSkill@@UAE_NXZ:PROC		; ioSkill::HideHPGauge
EXTRN	?SetInfoByApplyWeapon@ioSkill@@UAEXPAVioBaseChar@@0K_N@Z:PROC ; ioSkill::SetInfoByApplyWeapon
EXTRN	?SetCollisionByApplySkill@ioSkill@@UAEXXZ:PROC	; ioSkill::SetCollisionByApplySkill
EXTRN	?SetChargingRateForWeapon@ioSkill@@UAEXPAVioWeapon@@@Z:PROC ; ioSkill::SetChargingRateForWeapon
EXTRN	?CheckExceptionCamera@ioSkill@@UAE_NXZ:PROC	; ioSkill::CheckExceptionCamera
EXTRN	?GetExceptionCameraPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioSkill::GetExceptionCameraPos
EXTRN	?IsFixedExceptionCamera@ioSkill@@UAE_NXZ:PROC	; ioSkill::IsFixedExceptionCamera
EXTRN	??_EioMechanicsFireSkill@@UAEPAXI@Z:PROC	; ioMechanicsFireSkill::`vector deleting destructor'
EXTRN	?StartPreDelayAnimation@ioAttackSkill@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::StartPreDelayAnimation
EXTRN	?GetAttackTimeRate@ioAttackSkill@@MBEMXZ:PROC	; ioAttackSkill::GetAttackTimeRate
EXTRN	?GetAttackEndTimeRate@ioAttackSkill@@MBEMXZ:PROC ; ioAttackSkill::GetAttackEndTimeRate
EXTRN	?LoadNormalAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadNormalAttribute
EXTRN	?LoadDownAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadDownAttribute
EXTRN	?LoadJumpAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadJumpAttribute
EXTRN	?GetAttribute@ioAttackSkill@@UAEAAUAttackAttribute@@XZ:PROC ; ioAttackSkill::GetAttribute
EXTRN	?GetAttributeConst@ioAttackSkill@@UBEABUAttackAttribute@@XZ:PROC ; ioAttackSkill::GetAttributeConst
EXTRN	?IsCanStateEscape@ioAttackSkill@@UBE_NXZ:PROC	; ioAttackSkill::IsCanStateEscape
EXTRN	?IsCanStateEscapeOnStand@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnStand
EXTRN	?IsCanStateEscapeOnAir@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnAir
EXTRN	?IsCanStateEscapeOnDown@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z:PROC ; ioAttackSkill::IsCanStateEscapeOnDown
;	COMDAT ??_R2ioSkill@@8
rdata$r	SEGMENT
??_R2ioSkill@@8 DD FLAT:??_R1A@?0A@EA@ioSkill@@8	; ioSkill::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioSkill@@8
rdata$r	SEGMENT
??_R3ioSkill@@8 DD 00H					; ioSkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSkill@@@8
_DATA	SEGMENT
??_R0?AVioSkill@@@8 DD FLAT:??_7type_info@@6B@		; ioSkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSkill@@8 DD FLAT:??_R0?AVioSkill@@@8	; ioSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackSkill@@8
rdata$r	SEGMENT
??_R2ioAttackSkill@@8 DD FLAT:??_R1A@?0A@EA@ioAttackSkill@@8 ; ioAttackSkill::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackSkill@@8
rdata$r	SEGMENT
??_R3ioAttackSkill@@8 DD 00H				; ioAttackSkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackSkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackSkill@@@8
_DATA	SEGMENT
??_R0?AVioAttackSkill@@@8 DD FLAT:??_7type_info@@6B@	; ioAttackSkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackSkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackSkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackSkill@@8 DD FLAT:??_R0?AVioAttackSkill@@@8 ; ioAttackSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackSkill@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioMechanicsFireSkill@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioMechanicsFireSkill@@8 DD FLAT:??_R0?AVioMechanicsFireSkill@@@8 ; ioMechanicsFireSkill::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioMechanicsFireSkill@@8
rdata$r	ENDS
;	COMDAT ??_R2ioMechanicsFireSkill@@8
rdata$r	SEGMENT
??_R2ioMechanicsFireSkill@@8 DD FLAT:??_R1A@?0A@EA@ioMechanicsFireSkill@@8 ; ioMechanicsFireSkill::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioAttackSkill@@8
	DD	FLAT:??_R1A@?0A@EA@ioSkill@@8
rdata$r	ENDS
;	COMDAT ??_R3ioMechanicsFireSkill@@8
rdata$r	SEGMENT
??_R3ioMechanicsFireSkill@@8 DD 00H			; ioMechanicsFireSkill::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioMechanicsFireSkill@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioMechanicsFireSkill@@@8
_DATA	SEGMENT
??_R0?AVioMechanicsFireSkill@@@8 DD FLAT:??_7type_info@@6B@ ; ioMechanicsFireSkill `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioMechanicsFireSkill@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioMechanicsFireSkill@@6B@
rdata$r	SEGMENT
??_R4ioMechanicsFireSkill@@6B@ DD 00H			; ioMechanicsFireSkill::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioMechanicsFireSkill@@@8
	DD	FLAT:??_R3ioMechanicsFireSkill@@8
rdata$r	ENDS
;	COMDAT ??_7ioMechanicsFireSkill@@6B@
CONST	SEGMENT
??_7ioMechanicsFireSkill@@6B@ DD FLAT:??_R4ioMechanicsFireSkill@@6B@ ; ioMechanicsFireSkill::`vftable'
	DD	FLAT:?LoadProperty@ioMechanicsFireSkill@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ
	DD	FLAT:?GetTypeID@ioAttackSkill@@UBEHXZ
	DD	FLAT:?IsProtected@ioMechanicsFireSkill@@UBE_NH@Z
	DD	FLAT:?IsCanSwitchSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanSemiSwitchSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanCancelBySkill@ioSkill@@UBE_NPAVioBaseChar@@AAH@Z
	DD	FLAT:?IsCanUseZeroHP@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseSkillWithCrown@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseBoss@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseFootball@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanUseGangSiMode@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanUseByWeaponType@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseThunderBirdHold@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseLimitHP@ioSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUseSkill@ioAttackSkill@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsOnOffEnable@ioSkill@@UAE_NXZ
	DD	FLAT:?IsCanDefenseStateSkill@ioSkill@@UAE_NXZ
	DD	FLAT:?SetDefenseStateSkill@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ
	DD	FLAT:?HasBuff@ioSkill@@UBE_NH@Z
	DD	FLAT:?GetBuffType@ioSkill@@UAEHH@Z
	DD	FLAT:?IsEnableReserve@ioMechanicsFireSkill@@UBE_NXZ
	DD	FLAT:?IsSkillMotionEnd@ioMechanicsFireSkill@@UBE_NKPAVioBaseChar@@@Z
	DD	FLAT:?IsCharSkipState@ioSkill@@UBE?AW4SkillCharColType@@XZ
	DD	FLAT:?IsEntityCollisionSkipState@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ
	DD	FLAT:?GetSkillEndNextLandRate@ioSkill@@UBEMXZ
	DD	FLAT:?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ
	DD	FLAT:?IsEndState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsAttackEndState@ioAttackSkill@@UBE_NXZ
	DD	FLAT:?IsJumpState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsDownState@ioSkill@@UBE_NXZ
	DD	FLAT:?IsNoDropState@ioMechanicsFireSkill@@UBE_NXZ
	DD	FLAT:?IsCanSendControl@ioSkill@@UBE_NXZ
	DD	FLAT:?IsSkipState@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillMoveRate@ioSkill@@UBEMXZ
	DD	FLAT:?SetSkillGrapplingState@ioSkill@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@0@Z
	DD	FLAT:?GetGrapplingTargetPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillWoundGrapplingInfo@ioSkill@@UAE?AUGrapplingSkillWoundedInfo@@XZ
	DD	FLAT:?SetCreateWeaponDependency@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?SetNextSkillState@ioSkill@@UAEXPAVioBaseChar@@PAVioWeapon@@@Z
	DD	FLAT:?OnSkillStart@ioMechanicsFireSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?OnProcessState@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?OnSkillEndByWounded@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnSkillEnd@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnProcessNotUseSkill@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
	DD	FLAT:?OnSkillItemRelease@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyAttributeToWeapon@ioMechanicsFireSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z
	DD	FLAT:?ApplyExtraSkillInfo@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyEquipSlotSkillExtraInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyExtraPassiveSkillInfo@ioSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?StartPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?EndPreDelayEffect@ioAttackSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseAutoTargetValue@ioAttackSkill@@UAE_NXZ
	DD	FLAT:?IsAutoTargetDownState@ioSkill@@UAE_NXZ
	DD	FLAT:?CheckUseBuff@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckUseItemMesh@ioMechanicsFireSkill@@UAE_NXZ
	DD	FLAT:?CheckUseActiveCount@ioSkill@@UAE_NXZ
	DD	FLAT:?CheckAniRotate@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableDashCheck@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableMultiActive@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAutoTargetValue@ioSkill@@UAEXAAM00@Z
	DD	FLAT:?IsCanJumpingSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanDownSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?IsCanWoundSkill@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillGravityRate@ioSkill@@UAEMXZ
	DD	FLAT:?GetSkillMotionName@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?HasSkillMotion@ioSkill@@UBE_NXZ
	DD	FLAT:?GetSkillMotionRate@ioSkill@@UBEMXZ
	DD	FLAT:?IsPreDelayProtect@ioSkill@@UBE_NXZ
	DD	FLAT:?GetPreDelayAniName@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?GetPreDelayTime@ioSkill@@UBEKXZ
	DD	FLAT:?GetPreDelayOwnerEffect@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?GetPreDelayOtherEffect@ioSkill@@UBEABVioHashString@@XZ
	DD	FLAT:?SetCancelSkill@ioSkill@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearAirJump@ioSkill@@MAEXXZ
	DD	FLAT:?SetAirJump@ioSkill@@MAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioSkill@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?UseActiveCount@ioSkill@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetMaxActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?GetCurActiveCount@ioSkill@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?HideHPGauge@ioSkill@@UAE_NXZ
	DD	FLAT:?SetInfoByApplyWeapon@ioSkill@@UAEXPAVioBaseChar@@0K_N@Z
	DD	FLAT:?SetCollisionByApplySkill@ioSkill@@UAEXXZ
	DD	FLAT:?SetChargingRateForWeapon@ioSkill@@UAEXPAVioWeapon@@@Z
	DD	FLAT:?CheckExceptionCamera@ioSkill@@UAE_NXZ
	DD	FLAT:?GetExceptionCameraPos@ioSkill@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsFixedExceptionCamera@ioSkill@@UAE_NXZ
	DD	FLAT:?IsUseActiveCnt@ioSkill@@UBE_NXZ
	DD	FLAT:?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
	DD	FLAT:?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
	DD	FLAT:??_EioMechanicsFireSkill@@UAEPAXI@Z
	DD	FLAT:?StartPreDelayAnimation@ioAttackSkill@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackTimeRate@ioAttackSkill@@MBEMXZ
	DD	FLAT:?GetAttackEndTimeRate@ioAttackSkill@@MBEMXZ
	DD	FLAT:?LoadNormalAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?LoadDownAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?LoadJumpAttribute@ioAttackSkill@@MAEXAAVioINILoader@@@Z
	DD	FLAT:?GetAttribute@ioAttackSkill@@UAEAAUAttackAttribute@@XZ
	DD	FLAT:?GetAttributeConst@ioAttackSkill@@UBEABUAttackAttribute@@XZ
	DD	FLAT:?IsCanStateEscape@ioAttackSkill@@UBE_NXZ
	DD	FLAT:?IsCanStateEscapeOnStand@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanStateEscapeOnAir@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanStateEscapeOnDown@ioAttackSkill@@UBE_NPAVioBaseChar@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioMechanicsFireSkill@@UAE@XZ DD 019930522H
	DD	014H
	DD	FLAT:__unwindtable$??1ioMechanicsFireSkill@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioMechanicsFireSkill@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$18
	DD	012H
	DD	FLAT:__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$19
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
xdata$x	ENDS
;	COMDAT ??1ioMechanicsFireSkill@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioMechanicsFireSkill@@UAE@XZ PROC			; ioMechanicsFireSkill::~ioMechanicsFireSkill, COMDAT
; _this$ = ecx

; 74   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioMechanicsFireSkill@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioMechanicsFireSkill@@6B@

; 75   : }

  00017	bf 00 00 00 00	 mov	 edi, OFFSET ??_7?$CEncrypt@K@@6B@
  0001c	8d 8e f0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5104]
  00022	c7 45 fc 13 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 19 ; 00000013H
  00029	89 be e4 13 00
	00		 mov	 DWORD PTR [esi+5092], edi
  0002f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00034	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003a	8d 8e d0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5072]
  00040	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00044	ff d3		 call	 ebx
  00046	8d 8e c0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5056]
  0004c	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00050	ff d3		 call	 ebx
  00052	8d 8e 9c 13 00
	00		 lea	 ecx, DWORD PTR [esi+5020]
  00058	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0005c	c7 86 90 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5008], OFFSET ??_7?$CEncrypt@M@@6B@
  00066	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0006b	8d 8e 6c 13 00
	00		 lea	 ecx, DWORD PTR [esi+4972]
  00071	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00075	c7 86 60 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4960], OFFSET ??_7?$CEncrypt@_N@@6B@
  0007f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00084	8d 8e 3c 13 00
	00		 lea	 ecx, DWORD PTR [esi+4924]
  0008a	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  0008e	c7 86 30 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4912], OFFSET ??_7?$CEncrypt@_N@@6B@
  00098	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0009d	8d 8e 0c 13 00
	00		 lea	 ecx, DWORD PTR [esi+4876]
  000a3	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  000a7	c7 86 00 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4864], OFFSET ??_7?$CEncrypt@_N@@6B@
  000b1	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  000b6	8d 8e dc 12 00
	00		 lea	 ecx, DWORD PTR [esi+4828]
  000bc	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  000c0	c7 86 d0 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4816], OFFSET ??_7?$CEncrypt@_N@@6B@
  000ca	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  000cf	8d 8e b8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4792]
  000d5	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  000d9	ff d3		 call	 ebx
  000db	8d 8e a8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4776]
  000e1	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  000e5	ff d3		 call	 ebx
  000e7	8d 8e 84 12 00
	00		 lea	 ecx, DWORD PTR [esi+4740]
  000ed	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000f1	89 be 78 12 00
	00		 mov	 DWORD PTR [esi+4728], edi
  000f7	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  000fc	8d 8e 54 12 00
	00		 lea	 ecx, DWORD PTR [esi+4692]
  00102	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00106	89 be 48 12 00
	00		 mov	 DWORD PTR [esi+4680], edi
  0010c	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00111	8d 8e 24 12 00
	00		 lea	 ecx, DWORD PTR [esi+4644]
  00117	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0011b	89 be 18 12 00
	00		 mov	 DWORD PTR [esi+4632], edi
  00121	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00126	8d 8e f4 11 00
	00		 lea	 ecx, DWORD PTR [esi+4596]
  0012c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00130	89 be e8 11 00
	00		 mov	 DWORD PTR [esi+4584], edi
  00136	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0013b	8d 8e c4 11 00
	00		 lea	 ecx, DWORD PTR [esi+4548]
  00141	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00145	89 be b8 11 00
	00		 mov	 DWORD PTR [esi+4536], edi
  0014b	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00150	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00154	8d 8e a8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4520]
  0015a	ff d3		 call	 ebx
  0015c	8d 8e 84 11 00
	00		 lea	 ecx, DWORD PTR [esi+4484]
  00162	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00166	89 be 78 11 00
	00		 mov	 DWORD PTR [esi+4472], edi
  0016c	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00171	8d 8e 54 11 00
	00		 lea	 ecx, DWORD PTR [esi+4436]
  00177	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0017b	89 be 48 11 00
	00		 mov	 DWORD PTR [esi+4424], edi
  00181	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00186	bf 00 00 00 00	 mov	 edi, OFFSET ??_7?$CEncrypt@H@@6B@
  0018b	8d 8e 24 11 00
	00		 lea	 ecx, DWORD PTR [esi+4388]
  00191	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00195	89 be 18 11 00
	00		 mov	 DWORD PTR [esi+4376], edi
  0019b	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  001a0	8d 8e f4 10 00
	00		 lea	 ecx, DWORD PTR [esi+4340]
  001a6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001aa	89 be e8 10 00
	00		 mov	 DWORD PTR [esi+4328], edi
  001b0	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  001b5	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001b9	8b ce		 mov	 ecx, esi
  001bb	e8 00 00 00 00	 call	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
  001c0	e8 00 00 00 00	 call	 __EH_epilog3
  001c5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@H@@UAE@XZ	; CEncrypt<int>::~CEncrypt<int>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 18 11 00
	00		 add	 ecx, 4376		; 00001118H
  0001f	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@H@@UAE@XZ	; CEncrypt<int>::~CEncrypt<int>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 48 11 00
	00		 add	 ecx, 4424		; 00001148H
  0002d	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$4:
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 78 11 00
	00		 add	 ecx, 4472		; 00001178H
  0003b	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$5:
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 a8 11 00
	00		 add	 ecx, 4520		; 000011a8H
  00049	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$6:
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	81 c1 b8 11 00
	00		 add	 ecx, 4536		; 000011b8H
  00058	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$7:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 e8 11 00
	00		 add	 ecx, 4584		; 000011e8H
  00066	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$8:
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	81 c1 18 12 00
	00		 add	 ecx, 4632		; 00001218H
  00074	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$9:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	81 c1 48 12 00
	00		 add	 ecx, 4680		; 00001248H
  00082	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$10:
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	81 c1 78 12 00
	00		 add	 ecx, 4728		; 00001278H
  00090	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$11:
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 a8 12 00
	00		 add	 ecx, 4776		; 000012a8H
  0009e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$12:
  000a4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	81 c1 b8 12 00
	00		 add	 ecx, 4792		; 000012b8H
  000ad	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$13:
  000b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	81 c1 d0 12 00
	00		 add	 ecx, 4816		; 000012d0H
  000bc	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$14:
  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	81 c1 00 13 00
	00		 add	 ecx, 4864		; 00001300H
  000ca	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$15:
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	81 c1 30 13 00
	00		 add	 ecx, 4912		; 00001330H
  000d8	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$16:
  000dd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	81 c1 60 13 00
	00		 add	 ecx, 4960		; 00001360H
  000e6	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$17:
  000eb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	81 c1 90 13 00
	00		 add	 ecx, 5008		; 00001390H
  000f4	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$18:
  000f9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	81 c1 c0 13 00
	00		 add	 ecx, 5056		; 000013c0H
  00102	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioMechanicsFireSkill@@UAE@XZ$19:
  00108	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	81 c1 d0 13 00
	00		 add	 ecx, 5072		; 000013d0H
  00111	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioMechanicsFireSkill@@UAE@XZ:
  00117	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0011b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0011e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00121	33 c8		 xor	 ecx, eax
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioMechanicsFireSkill@@UAE@XZ
  0012d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioMechanicsFireSkill@@UAE@XZ ENDP			; ioMechanicsFireSkill::~ioMechanicsFireSkill
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ
_TEXT	SEGMENT
?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ PROC ; ioSkill::GetDefenseSkillBreakeType, COMDAT
; _this$ = ecx

; 327  : 	virtual DefenseBreakType GetDefenseSkillBreakeType() const { return m_eDefenseSkillBreakType; }

  00000	8b 81 30 0e 00
	00		 mov	 eax, DWORD PTR [ecx+3632]
  00006	c3		 ret	 0
?GetDefenseSkillBreakeType@ioSkill@@UBE?AW4DefenseBreakType@@XZ ENDP ; ioSkill::GetDefenseSkillBreakeType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ
_TEXT	SEGMENT
?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ PROC		; ioSkill::GetSkillEndNextJumpAmt, COMDAT
; _this$ = ecx

; 335  : 	virtual float GetSkillEndNextJumpAmt() const { return m_fSkillEndNextJumpAmt; }

  00000	d9 81 4c 05 00
	00		 fld	 DWORD PTR [ecx+1356]
  00006	c3		 ret	 0
?GetSkillEndNextJumpAmt@ioSkill@@UBEMXZ ENDP		; ioSkill::GetSkillEndNextJumpAmt
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextLandRate@ioSkill@@UBEMXZ
_TEXT	SEGMENT
?GetSkillEndNextLandRate@ioSkill@@UBEMXZ PROC		; ioSkill::GetSkillEndNextLandRate, COMDAT
; _this$ = ecx

; 336  : 	virtual float GetSkillEndNextLandRate() const { return m_fSkillEndNextLandRate; }

  00000	d9 81 50 05 00
	00		 fld	 DWORD PTR [ecx+1360]
  00006	c3		 ret	 0
?GetSkillEndNextLandRate@ioSkill@@UBEMXZ ENDP		; ioSkill::GetSkillEndNextLandRate
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ
_TEXT	SEGMENT
?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ PROC ; ioSkill::GetSkillEndNextJumpMustEnable, COMDAT
; _this$ = ecx

; 337  : 	virtual SkillEndJumpType GetSkillEndNextJumpMustEnable(){ return SEJT_DEFAULT; }

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetSkillEndNextJumpMustEnable@ioSkill@@UAE?AW4SkillEndJumpType@@XZ ENDP ; ioSkill::GetSkillEndNextJumpMustEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ PROC	; ioSkill::EnableChangeGrapplingTargetPos, COMDAT
; _this$ = ecx

; 355  : 	virtual bool EnableChangeGrapplingTargetPos() const { return m_bChangeGrapplingTargetPos; }

  00000	8a 81 40 09 00
	00		 mov	 al, BYTE PTR [ecx+2368]
  00006	c3		 ret	 0
?EnableChangeGrapplingTargetPos@ioSkill@@UBE_NXZ ENDP	; ioSkill::EnableChangeGrapplingTargetPos
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z PROC ; ioSkill::IsInvisibleBottomCircle, COMDAT
; _this$ = ecx

; 393  : 	virtual bool IsInvisibleBottomCircle( ioBaseChar *pChar ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsInvisibleBottomCircle@ioSkill@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSkill::IsInvisibleBottomCircle
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsUseActiveCnt@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
?IsUseActiveCnt@ioSkill@@UBE_NXZ PROC			; ioSkill::IsUseActiveCnt, COMDAT
; _this$ = ecx

; 544  : 	virtual bool IsUseActiveCnt() const { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsUseActiveCnt@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsUseActiveCnt
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z PROC	; ioSkill::GetMaxActiveCnt, COMDAT
; _this$ = ecx

; 545  : 	virtual int GetMaxActiveCnt( ioBaseChar *pChar ) const { return 0; }

  00000	33 c0		 xor	 eax, eax
  00002	c2 04 00	 ret	 4
?GetMaxActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z ENDP	; ioSkill::GetMaxActiveCnt
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z PROC	; ioSkill::GetCurActiveCnt, COMDAT
; _this$ = ecx

; 546  : 	virtual int GetCurActiveCnt( ioBaseChar *pChar ) const { return 0; }

  00000	33 c0		 xor	 eax, eax
  00002	c2 04 00	 ret	 4
?GetCurActiveCnt@ioSkill@@UBEHPAVioBaseChar@@@Z ENDP	; ioSkill::GetCurActiveCnt
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	?ApplyAttributeToWeapon@ioSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z:PROC ; ioSkill::ApplyAttributeToWeapon
EXTRN	___security_cookie:DWORD
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
CONST	ENDS
;	COMDAT ?ApplyAttributeToWeapon@ioMechanicsFireSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
tv172 = -32						; size = 4
_vAttDir$530893 = -28					; size = 12
$T530895 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pWeapon$ = 8						; size = 4
_pStage$ = 12						; size = 4
?ApplyAttributeToWeapon@ioMechanicsFireSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z PROC ; ioMechanicsFireSkill::ApplyAttributeToWeapon, COMDAT
; _this$ = ecx

; 569  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]

; 570  : 	if( !pWeapon ) return;

  00017	85 f6		 test	 esi, esi
  00019	74 61		 je	 SHORT $LN1@ApplyAttri

; 571  : 
; 572  : 	ioSkill::ApplyAttributeToWeapon( pWeapon, pStage );

  0001b	50		 push	 eax
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ?ApplyAttributeToWeapon@ioSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ; ioSkill::ApplyAttributeToWeapon

; 573  : 
; 574  : 	ioBaseChar *pOwner = pWeapon->GetOwner();

  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  00029	8b c8		 mov	 ecx, eax

; 575  : 	if( pOwner )

  0002b	85 c9		 test	 ecx, ecx
  0002d	74 4d		 je	 SHORT $LN1@ApplyAttri

; 576  : 	{
; 577  : 		D3DXVECTOR3 vAttDir =  pOwner->GetTargetRot() * D3DXVECTOR3(0.0f, 0.0f, -FLOAT1);

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	89 45 e0	 mov	 DWORD PTR tv172[ebp], eax
  0003a	db 45 e0	 fild	 DWORD PTR tv172[ebp]
  0003d	f3 0f 11 45 f0	 movss	 DWORD PTR $T530895[ebp], xmm0
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR $T530895[ebp+4], xmm0
  00047	85 c0		 test	 eax, eax
  00049	79 06		 jns	 SHORT $LN11@ApplyAttri
  0004b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN11@ApplyAttri:
  00051	8d 45 f0	 lea	 eax, DWORD PTR $T530895[ebp]
  00054	d9 e0		 fchs
  00056	50		 push	 eax
  00057	d9 5d f8	 fstp	 DWORD PTR $T530895[ebp+8]
  0005a	81 c1 a4 06 00
	00		 add	 ecx, 1700		; 000006a4H
  00060	51		 push	 ecx
  00061	8d 45 e4	 lea	 eax, DWORD PTR _vAttDir$530893[ebp]
  00064	50		 push	 eax
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 578  : 		pWeapon->SetMoveDir( vAttDir );

  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	8d 4d e4	 lea	 ecx, DWORD PTR _vAttDir$530893[ebp]
  00073	51		 push	 ecx
  00074	8b ce		 mov	 ecx, esi
  00076	ff 90 b0 00 00
	00		 call	 DWORD PTR [eax+176]
$LN1@ApplyAttri:

; 579  : 	}
; 580  : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	5e		 pop	 esi
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	c9		 leave
  00088	c2 08 00	 ret	 8
?ApplyAttributeToWeapon@ioMechanicsFireSkill@@UAEXPAVioWeapon@@PAVioPlayStage@@@Z ENDP ; ioMechanicsFireSkill::ApplyAttributeToWeapon
_TEXT	ENDS
PUBLIC	??D?$CEncrypt@M@@QAEMABM@Z			; CEncrypt<float>::operator*
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??D?$CEncrypt@M@@QAEMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
tv130 = 8						; size = 4
_inValue$ = 8						; size = 4
??D?$CEncrypt@M@@QAEMABM@Z PROC				; CEncrypt<float>::operator*, COMDAT
; _this$ = ecx

; 1685 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1686 : 		type value;
; 1687 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1688 : #ifdef _NOTUSE
; 1689 : 		Debug();
; 1690 : #endif
; 1691 : 		return value * inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	d9 00		 fld	 DWORD PTR [eax]
  00012	d8 4d fc	 fmul	 DWORD PTR _value$[ebp]
  00015	d9 5d 08	 fstp	 DWORD PTR tv130[ebp]
  00018	d9 45 08	 fld	 DWORD PTR tv130[ebp]

; 1692 : 	}

  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
??D?$CEncrypt@M@@QAEMABM@Z ENDP				; CEncrypt<float>::operator*
_TEXT	ENDS
PUBLIC	??8?$CEncrypt@K@@QAE_NABH@Z			; CEncrypt<unsigned long>::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$CEncrypt@K@@QAE_NABH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??8?$CEncrypt@K@@QAE_NABH@Z PROC			; CEncrypt<unsigned long>::operator==, COMDAT
; _this$ = ecx

; 976  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 977  : 		
; 978  : 		type value;
; 979  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 980  : #ifdef _NOTUSE
; 981  : 		Debug();
; 982  : #endif
; 983  : 		return (value == inValue);

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00010	8b 55 fc	 mov	 edx, DWORD PTR _value$[ebp]
  00013	33 c0		 xor	 eax, eax
  00015	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00017	0f 94 c0	 sete	 al

; 984  : 	} 

  0001a	c9		 leave
  0001b	c2 04 00	 ret	 4
??8?$CEncrypt@K@@QAE_NABH@Z ENDP			; CEncrypt<unsigned long>::operator==
_TEXT	ENDS
PUBLIC	??O?$CEncrypt@K@@QAE_NABH@Z			; CEncrypt<unsigned long>::operator>
; Function compile flags: /Ogsp
;	COMDAT ??O?$CEncrypt@K@@QAE_NABH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??O?$CEncrypt@K@@QAE_NABH@Z PROC			; CEncrypt<unsigned long>::operator>, COMDAT
; _this$ = ecx

; 1009 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1010 : 		
; 1011 : 		type value;
; 1012 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1013 : #ifdef _NOTUSE
; 1014 : 		Debug();
; 1015 : #endif
; 1016 : 		return (value > inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1017 : 	}		

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??O?$CEncrypt@K@@QAE_NABH@Z ENDP			; CEncrypt<unsigned long>::operator>
_TEXT	ENDS
PUBLIC	??H?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??H?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator+, COMDAT
; _this$ = ecx

; 1285 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1286 : 		type value;
; 1287 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1288 : #ifdef _NOTUSE
; 1289 : 		Debug();
; 1290 : #endif
; 1291 : 		return value + inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 45 fc	 add	 eax, DWORD PTR _value$[ebp]

; 1292 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??H?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator+
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKM@Z			; CEncrypt<unsigned long>::operator=
EXTRN	__ftol2:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKM@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 __ftol2
  0000e	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1656 : 		EncryptValueToPool((char*)&value);

  00011	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00014	50		 push	 eax
  00015	8b ce		 mov	 ecx, esi
  00017	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001f	5e		 pop	 esi

; 1662 : 	}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKM@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??8?$CEncrypt@H@@QAE_NABH@Z			; CEncrypt<int>::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$CEncrypt@H@@QAE_NABH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??8?$CEncrypt@H@@QAE_NABH@Z PROC			; CEncrypt<int>::operator==, COMDAT
; _this$ = ecx

; 976  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 977  : 		
; 978  : 		type value;
; 979  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 980  : #ifdef _NOTUSE
; 981  : 		Debug();
; 982  : #endif
; 983  : 		return (value == inValue);

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00010	8b 55 fc	 mov	 edx, DWORD PTR _value$[ebp]
  00013	33 c0		 xor	 eax, eax
  00015	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00017	0f 94 c0	 sete	 al

; 984  : 	} 

  0001a	c9		 leave
  0001b	c2 04 00	 ret	 4
??8?$CEncrypt@H@@QAE_NABH@Z ENDP			; CEncrypt<int>::operator==
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@H@@QAE_NABH@Z			; CEncrypt<int>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@H@@QAE_NABH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@H@@QAE_NABH@Z PROC			; CEncrypt<int>::operator<, COMDAT
; _this$ = ecx

; 987  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 988  : 		
; 989  : 		type value;
; 990  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 991  : #ifdef _NOTUSE
; 992  : 		Debug();
; 993  : #endif
; 994  : 		return (value < inValue);

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00010	8b 55 fc	 mov	 edx, DWORD PTR _value$[ebp]
  00013	33 c0		 xor	 eax, eax
  00015	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00017	0f 9c c0	 setl	 al

; 995  : 	} 

  0001a	c9		 leave
  0001b	c2 04 00	 ret	 4
??M?$CEncrypt@H@@QAE_NABH@Z ENDP			; CEncrypt<int>::operator<
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<19>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<19>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadInt_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadInt_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadInt_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadInt_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadInt_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadInt_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadInt_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadInt_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadInt_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadInt_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadInt_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadInt_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00229	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ; ioINILoader::LoadInt_e<13>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<13>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@LoadInt_e@2
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@LoadInt_e@2
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@LoadInt_e@2
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@LoadInt_e@2
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@LoadInt_e@2
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@LoadInt_e@2
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@LoadInt_e@2
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  00128	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00139	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  00144	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00150	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00155	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00161	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@LoadInt_e@2:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00187	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	50		 push	 eax
  0018e	8b ce		 mov	 ecx, esi
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	5e		 pop	 esi
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	c9		 leave
  001a2	c2 08 00	 ret	 8
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<11>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<11>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	84 d2		 test	 dl, dl
  00020	0f 84 1b 01 00
	00		 je	 $LN96@LoadString
  00026	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00029	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002f	84 d2		 test	 dl, dl
  00031	0f 84 04 01 00
	00		 je	 $LN95@LoadString
  00037	b3 ec		 mov	 bl, -20			; ffffffecH
  00039	32 d3		 xor	 dl, bl
  0003b	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003e	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00041	84 d2		 test	 dl, dl
  00043	0f 84 ec 00 00
	00		 je	 $LN94@LoadString
  00049	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004c	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004f	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00052	84 d2		 test	 dl, dl
  00054	0f 84 d5 00 00
	00		 je	 $LN93@LoadString
  0005a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005d	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00060	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00063	84 d2		 test	 dl, dl
  00065	0f 84 be 00 00
	00		 je	 $LN92@LoadString
  0006b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006e	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00071	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00074	84 d2		 test	 dl, dl
  00076	0f 84 a8 00 00
	00		 je	 $LN91@LoadString
  0007c	32 d3		 xor	 dl, bl
  0007e	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00081	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00084	84 d2		 test	 dl, dl
  00086	0f 84 92 00 00
	00		 je	 $LN90@LoadString
  0008c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008f	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00092	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00095	84 d2		 test	 dl, dl
  00097	74 7f		 je	 SHORT $LN89@LoadString
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 6c		 je	 SHORT $LN88@LoadString
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5a		 je	 SHORT $LN87@LoadString
  000b3	32 d3		 xor	 dl, bl
  000b5	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bc	0f 84 83 00 00
	00		 je	 $LN1@LoadString
  000c2	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c5	84 d2		 test	 dl, dl
  000c7	74 3e		 je	 SHORT $LN85@LoadString
  000c9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cc	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 2b		 je	 SHORT $LN84@LoadString
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 19		 je	 SHORT $LN83@LoadString
  000e3	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e6	32 d3		 xor	 dl, bl
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadString
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 4f		 jmp	 SHORT $LN1@LoadString
$LN82@LoadString:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 49		 jmp	 SHORT $LN1@LoadString
$LN83@LoadString:
  000fc	88 5d f9	 mov	 BYTE PTR __k$[ebp+13], bl
  000ff	eb 44		 jmp	 SHORT $LN1@LoadString
$LN84@LoadString:
  00101	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00105	eb 3e		 jmp	 SHORT $LN1@LoadString
$LN85@LoadString:
  00107	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010b	eb 38		 jmp	 SHORT $LN1@LoadString
$LN87@LoadString:
  0010d	88 5d f5	 mov	 BYTE PTR __k$[ebp+9], bl
  00110	eb 33		 jmp	 SHORT $LN1@LoadString
$LN88@LoadString:
  00112	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00116	eb 2d		 jmp	 SHORT $LN1@LoadString
$LN89@LoadString:
  00118	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011c	eb 27		 jmp	 SHORT $LN1@LoadString
$LN90@LoadString:
  0011e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00122	eb 21		 jmp	 SHORT $LN1@LoadString
$LN91@LoadString:
  00124	88 5d f1	 mov	 BYTE PTR __k$[ebp+5], bl
  00127	eb 1c		 jmp	 SHORT $LN1@LoadString
$LN92@LoadString:
  00129	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0012d	eb 16		 jmp	 SHORT $LN1@LoadString
$LN93@LoadString:
  0012f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00133	eb 10		 jmp	 SHORT $LN1@LoadString
$LN94@LoadString:
  00135	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00139	eb 0a		 jmp	 SHORT $LN1@LoadString
$LN95@LoadString:
  0013b	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0013f	eb 04		 jmp	 SHORT $LN1@LoadString
$LN96@LoadString:
  00141	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString:
  00145	6a 02		 push	 2
  00147	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014a	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  0014e	5a		 pop	 edx
$LL104@LoadString:
  0014f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00155	83 c0 04	 add	 eax, 4
  00158	4a		 dec	 edx
  00159	75 f4		 jne	 SHORT $LL104@LoadString
  0015b	6a 08		 push	 8
  0015d	58		 pop	 eax
$LL101@LoadString:
  0015e	8b d0		 mov	 edx, eax
  00160	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  00166	79 05		 jns	 SHORT $LN111@LoadString
  00168	4a		 dec	 edx
  00169	83 ca fc	 or	 edx, -4			; fffffffcH
  0016c	42		 inc	 edx
$LN111@LoadString:
  0016d	b3 ed		 mov	 bl, -19			; ffffffedH
  0016f	2a da		 sub	 bl, dl
  00171	30 5c 05 ec	 xor	 BYTE PTR __k$[ebp+eax], bl
  00175	40		 inc	 eax
  00176	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00179	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  0017b	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0017e	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00181	57		 push	 edi
  00182	56		 push	 esi
  00183	50		 push	 eax
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	33 cd		 xor	 ecx, ebp
  00191	5b		 pop	 ebx
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	c9		 leave
  00198	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ; ioINILoader::LoadInt_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<16>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadInt_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadInt_e@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadInt_e@3
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadInt_e@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadInt_e@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadInt_e@3
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadInt_e@3
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadInt_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadInt_e@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadInt_e@3
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadInt_e@3
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadInt_e@3
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadInt_e@3
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadInt_e@3
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadInt_e@3
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadInt_e@3
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadInt_e@3
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadInt_e@3
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadInt_e@3:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadInt_e@3:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadInt_e@3:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  001e6	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e9	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ec	50		 push	 eax
  001ed	8b ce		 mov	 ecx, esi
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5e		 pop	 esi
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	c9		 leave
  00201	c2 08 00	 ret	 8
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z ; ioINILoader::LoadInt_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<21>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadInt_e@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadInt_e@4
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadInt_e@4
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadInt_e@4
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadInt_e@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadInt_e@4
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadInt_e@4
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadInt_e@4
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadInt_e@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadInt_e@4
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadInt_e@4
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadInt_e@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadInt_e@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadInt_e@4
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadInt_e@4
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadInt_e@4
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadInt_e@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadInt_e@4
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadInt_e@4
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadInt_e@4
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadInt_e@4
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadInt_e@4
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadInt_e@4
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadInt_e@4
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadInt_e@4
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN72@LoadInt_e@4:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN73@LoadInt_e@4:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadInt_e@4
$LN74@LoadInt_e@4:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadInt_e@4
$LN75@LoadInt_e@4:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN77@LoadInt_e@4:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadInt_e@4
$LN78@LoadInt_e@4:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadInt_e@4
$LN79@LoadInt_e@4:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN83@LoadInt_e@4:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadInt_e@4:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  00232	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00235	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00238	50		 push	 eax
  00239	8b ce		 mov	 ecx, esi
  0023b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00241	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00244	5e		 pop	 esi
  00245	33 cd		 xor	 ecx, ebp
  00247	5b		 pop	 ebx
  00248	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024d	c9		 leave
  0024e	c2 08 00	 ret	 8
??$LoadInt_e@$0BF@@ioINILoader@@QAEHAAY0BF@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<21>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<14>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 64 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 4d 01 00
	00		 je	 $LN95@LoadString@2
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 36 01 00
	00		 je	 $LN94@LoadString@2
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 1e 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 07 01 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 f0 00 00
	00		 je	 $LN91@LoadString@2
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 da 00 00
	00		 je	 $LN90@LoadString@2
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 c4 00 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 ad 00 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 96 00 00
	00		 je	 $LN87@LoadString@2
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 80 00 00
	00		 je	 $LN86@LoadString@2
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 6e		 je	 SHORT $LN85@LoadString@2
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 5b		 je	 SHORT $LN84@LoadString@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	0f 84 95 00 00
	00		 je	 $LN111@LoadString@2
  000fb	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fe	84 d2		 test	 dl, dl
  00100	74 3f		 je	 SHORT $LN82@LoadString@2
  00102	32 d1		 xor	 dl, cl
  00104	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 2d		 je	 SHORT $LN81@LoadString@2
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 1a		 je	 SHORT $LN80@LoadString@2
  0011b	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  0011e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00121	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00124	84 c0		 test	 al, al
  00126	74 07		 je	 SHORT $LN79@LoadString@2
  00128	34 ec		 xor	 al, -20			; ffffffecH
  0012a	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  0012d	eb 61		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  0012f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00133	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  00135	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00139	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  0013b	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0013f	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  00141	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00144	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  00146	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0014a	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  0014c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00150	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  00152	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00155	eb 39		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00157	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0015b	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  0015d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00161	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  00163	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00167	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00169	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0016c	eb 22		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  0016e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00172	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  00174	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00178	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  0017a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0017e	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  00180	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00184	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00186	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0018a	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  0018c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  00190	6a 03		 push	 3
  00192	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00195	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00199	5a		 pop	 edx
$LL104@LoadString@2:
  0019a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a0	83 c0 04	 add	 eax, 4
  001a3	4a		 dec	 edx
  001a4	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  001a6	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ac	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b0	57		 push	 edi
  001b1	56		 push	 esi
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	50		 push	 eax
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bf	5f		 pop	 edi
  001c0	33 cd		 xor	 ecx, ebp
  001c2	5e		 pop	 esi
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	c9		 leave
  001c9	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<14>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<18>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<18>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 be 01 00
	00		 je	 $LN96@LoadString@3
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 a7 01 00
	00		 je	 $LN95@LoadString@3
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 90 01 00
	00		 je	 $LN94@LoadString@3
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 78 01 00
	00		 je	 $LN93@LoadString@3
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 61 01 00
	00		 je	 $LN92@LoadString@3
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 4a 01 00
	00		 je	 $LN91@LoadString@3
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 34 01 00
	00		 je	 $LN90@LoadString@3
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 1e 01 00
	00		 je	 $LN89@LoadString@3
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 07 01 00
	00		 je	 $LN88@LoadString@3
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 f0 00 00
	00		 je	 $LN87@LoadString@3
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 da 00 00
	00		 je	 $LN86@LoadString@3
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 c4 00 00
	00		 je	 $LN85@LoadString@3
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 ad 00 00
	00		 je	 $LN84@LoadString@3
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 96 00 00
	00		 je	 $LN83@LoadString@3
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 80 00 00
	00		 je	 $LN82@LoadString@3
  00115	32 d1		 xor	 dl, cl
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 6e		 je	 SHORT $LN81@LoadString@3
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 5b		 je	 SHORT $LN80@LoadString@3
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00135	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00138	0f 84 ac 00 00
	00		 je	 $LN111@LoadString@3
  0013e	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00141	84 d2		 test	 dl, dl
  00143	74 3f		 je	 SHORT $LN78@LoadString@3
  00145	32 d1		 xor	 dl, cl
  00147	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 2d		 je	 SHORT $LN77@LoadString@3
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 1a		 je	 SHORT $LN76@LoadString@3
  0015e	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00161	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00164	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00167	84 c0		 test	 al, al
  00169	74 07		 je	 SHORT $LN75@LoadString@3
  0016b	34 ec		 xor	 al, -20			; ffffffecH
  0016d	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00170	eb 78		 jmp	 SHORT $LN111@LoadString@3
$LN75@LoadString@3:
  00172	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00176	eb 72		 jmp	 SHORT $LN111@LoadString@3
$LN76@LoadString@3:
  00178	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0017c	eb 6c		 jmp	 SHORT $LN111@LoadString@3
$LN77@LoadString@3:
  0017e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00182	eb 66		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  00184	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  00187	eb 61		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  00189	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0018d	eb 5b		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  0018f	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00193	eb 55		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  00195	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00198	eb 50		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  0019a	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0019e	eb 4a		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  001a0	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a4	eb 44		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  001a6	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001aa	eb 3e		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  001ac	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001af	eb 39		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  001b1	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001b5	eb 33		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  001b7	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001bb	eb 2d		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  001bd	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001c1	eb 27		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  001c3	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001c6	eb 22		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  001c8	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001cc	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  001ce	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001d2	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  001d4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d8	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  001da	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001de	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  001e0	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001e4	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  001e6	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  001ea	6a 04		 push	 4
  001ec	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001f3	5a		 pop	 edx
$LL104@LoadString@3:
  001f4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fa	83 c0 04	 add	 eax, 4
  001fd	4a		 dec	 edx
  001fe	75 f4		 jne	 SHORT $LL104@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  00200	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00203	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00206	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0020a	57		 push	 edi
  0020b	56		 push	 esi
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	50		 push	 eax
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00216	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00219	5f		 pop	 edi
  0021a	33 cd		 xor	 ecx, ebp
  0021c	5e		 pop	 esi
  0021d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00222	c9		 leave
  00223	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<18>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<15>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 75 01 00
	00		 je	 $LN96@LoadString@4
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 5e 01 00
	00		 je	 $LN95@LoadString@4
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 46 01 00
	00		 je	 $LN94@LoadString@4
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 2f 01 00
	00		 je	 $LN93@LoadString@4
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 18 01 00
	00		 je	 $LN92@LoadString@4
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 02 01 00
	00		 je	 $LN91@LoadString@4
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 ec 00 00
	00		 je	 $LN90@LoadString@4
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 d5 00 00
	00		 je	 $LN89@LoadString@4
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 be 00 00
	00		 je	 $LN88@LoadString@4
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 a8 00 00
	00		 je	 $LN87@LoadString@4
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 92 00 00
	00		 je	 $LN86@LoadString@4
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 7f		 je	 SHORT $LN85@LoadString@4
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 6c		 je	 SHORT $LN84@LoadString@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	74 5a		 je	 SHORT $LN83@LoadString@4
  000f8	32 d1		 xor	 dl, cl
  000fa	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000fe	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	0f 84 9a 00 00
	00		 je	 $LN111@LoadString@4
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 3e		 je	 SHORT $LN81@LoadString@4
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 2b		 je	 SHORT $LN80@LoadString@4
  0011b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011e	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00121	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00124	84 d2		 test	 dl, dl
  00126	74 19		 je	 SHORT $LN79@LoadString@4
  00128	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  0012b	32 d1		 xor	 dl, cl
  0012d	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00130	84 c0		 test	 al, al
  00132	74 07		 je	 SHORT $LN78@LoadString@4
  00134	34 eb		 xor	 al, -21			; ffffffebH
  00136	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00139	eb 66		 jmp	 SHORT $LN111@LoadString@4
$LN78@LoadString@4:
  0013b	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  0013f	eb 60		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  00141	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  00144	eb 5b		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  00146	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0014a	eb 55		 jmp	 SHORT $LN111@LoadString@4
$LN81@LoadString@4:
  0014c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00150	eb 4f		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  00152	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  00155	eb 4a		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  00157	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0015b	eb 44		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  0015d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00161	eb 3e		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  00163	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00167	eb 38		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  00169	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0016c	eb 33		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  0016e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00172	eb 2d		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  00174	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00178	eb 27		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  0017a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0017e	eb 21		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  00180	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00183	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  00185	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00189	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  0018b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0018f	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  00191	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00195	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  00197	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0019b	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  0019d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  001a1	6a 03		 push	 3
  001a3	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a6	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001aa	5a		 pop	 edx
$LL104@LoadString@4:
  001ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b1	83 c0 04	 add	 eax, 4
  001b4	4a		 dec	 edx
  001b5	75 f4		 jne	 SHORT $LL104@LoadString@4
  001b7	6a 0c		 push	 12			; 0000000cH
  001b9	58		 pop	 eax
$LL101@LoadString@4:
  001ba	8b c8		 mov	 ecx, eax
  001bc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001c2	79 05		 jns	 SHORT $LN112@LoadString@4
  001c4	49		 dec	 ecx
  001c5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c8	41		 inc	 ecx
$LN112@LoadString@4:
  001c9	b2 ed		 mov	 dl, -19			; ffffffedH
  001cb	2a d1		 sub	 dl, cl
  001cd	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001d1	40		 inc	 eax
  001d2	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001d5	7c e3		 jl	 SHORT $LL101@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  001d7	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001da	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001dd	57		 push	 edi
  001de	56		 push	 esi
  001df	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	5f		 pop	 edi
  001ed	33 cd		 xor	 ecx, ebp
  001ef	5e		 pop	 esi
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	c9		 leave
  001f6	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<15>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<17>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 a7 01 00
	00		 je	 $LN96@LoadString@5
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 90 01 00
	00		 je	 $LN95@LoadString@5
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 78 01 00
	00		 je	 $LN94@LoadString@5
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 61 01 00
	00		 je	 $LN93@LoadString@5
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 4a 01 00
	00		 je	 $LN92@LoadString@5
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 34 01 00
	00		 je	 $LN91@LoadString@5
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 1e 01 00
	00		 je	 $LN90@LoadString@5
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 07 01 00
	00		 je	 $LN89@LoadString@5
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 f0 00 00
	00		 je	 $LN88@LoadString@5
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 da 00 00
	00		 je	 $LN87@LoadString@5
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 c4 00 00
	00		 je	 $LN86@LoadString@5
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 ad 00 00
	00		 je	 $LN85@LoadString@5
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 96 00 00
	00		 je	 $LN84@LoadString@5
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 80 00 00
	00		 je	 $LN83@LoadString@5
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	74 6e		 je	 SHORT $LN82@LoadString@5
  00110	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00113	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00116	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00119	84 d2		 test	 dl, dl
  0011b	74 5b		 je	 SHORT $LN81@LoadString@5
  0011d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00120	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	0f 84 a6 00 00
	00		 je	 $LN111@LoadString@5
  0012d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00130	84 d2		 test	 dl, dl
  00132	74 3f		 je	 SHORT $LN79@LoadString@5
  00134	32 d1		 xor	 dl, cl
  00136	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00139	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013c	84 d2		 test	 dl, dl
  0013e	74 2d		 je	 SHORT $LN78@LoadString@5
  00140	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00143	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00146	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00149	84 d2		 test	 dl, dl
  0014b	74 1a		 je	 SHORT $LN77@LoadString@5
  0014d	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00150	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00153	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00156	84 c0		 test	 al, al
  00158	74 07		 je	 SHORT $LN76@LoadString@5
  0015a	34 ed		 xor	 al, -19			; ffffffedH
  0015c	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  0015f	eb 72		 jmp	 SHORT $LN111@LoadString@5
$LN76@LoadString@5:
  00161	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00165	eb 6c		 jmp	 SHORT $LN111@LoadString@5
$LN77@LoadString@5:
  00167	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0016b	eb 66		 jmp	 SHORT $LN111@LoadString@5
$LN78@LoadString@5:
  0016d	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00171	eb 60		 jmp	 SHORT $LN111@LoadString@5
$LN79@LoadString@5:
  00173	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00176	eb 5b		 jmp	 SHORT $LN111@LoadString@5
$LN81@LoadString@5:
  00178	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0017c	eb 55		 jmp	 SHORT $LN111@LoadString@5
$LN82@LoadString@5:
  0017e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00182	eb 4f		 jmp	 SHORT $LN111@LoadString@5
$LN83@LoadString@5:
  00184	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  00187	eb 4a		 jmp	 SHORT $LN111@LoadString@5
$LN84@LoadString@5:
  00189	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0018d	eb 44		 jmp	 SHORT $LN111@LoadString@5
$LN85@LoadString@5:
  0018f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00193	eb 3e		 jmp	 SHORT $LN111@LoadString@5
$LN86@LoadString@5:
  00195	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00199	eb 38		 jmp	 SHORT $LN111@LoadString@5
$LN87@LoadString@5:
  0019b	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  0019e	eb 33		 jmp	 SHORT $LN111@LoadString@5
$LN88@LoadString@5:
  001a0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001a4	eb 2d		 jmp	 SHORT $LN111@LoadString@5
$LN89@LoadString@5:
  001a6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001aa	eb 27		 jmp	 SHORT $LN111@LoadString@5
$LN90@LoadString@5:
  001ac	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001b0	eb 21		 jmp	 SHORT $LN111@LoadString@5
$LN91@LoadString@5:
  001b2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001b5	eb 1c		 jmp	 SHORT $LN111@LoadString@5
$LN92@LoadString@5:
  001b7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001bb	eb 16		 jmp	 SHORT $LN111@LoadString@5
$LN93@LoadString@5:
  001bd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001c1	eb 10		 jmp	 SHORT $LN111@LoadString@5
$LN94@LoadString@5:
  001c3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001c7	eb 0a		 jmp	 SHORT $LN111@LoadString@5
$LN95@LoadString@5:
  001c9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001cd	eb 04		 jmp	 SHORT $LN111@LoadString@5
$LN96@LoadString@5:
  001cf	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@5:
  001d3	6a 04		 push	 4
  001d5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001dc	5a		 pop	 edx
$LL104@LoadString@5:
  001dd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001e3	83 c0 04	 add	 eax, 4
  001e6	4a		 dec	 edx
  001e7	75 f4		 jne	 SHORT $LL104@LoadString@5

; 163  : 		LoadString(_k, d, b, i);

  001e9	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001ec	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ef	57		 push	 edi
  001f0	56		 push	 esi
  001f1	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f4	50		 push	 eax
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fe	5f		 pop	 edi
  001ff	33 cd		 xor	 ecx, ebp
  00201	5e		 pop	 esi
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	c9		 leave
  00208	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0N@@ioINILoader@@QAEMAAY0N@$$CBDM@Z ; ioINILoader::LoadFloat_e<13>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0N@@ioINILoader@@QAEMAAY0N@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0N@@ioINILoader@@QAEMAAY0N@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<13>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@LoadFloat_
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@LoadFloat_
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@LoadFloat_
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@LoadFloat_
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@LoadFloat_
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@LoadFloat_
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@LoadFloat_
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00128	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00139	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00144	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00150	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00155	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00161	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@LoadFloat_:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00187	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0018c	51		 push	 ecx
  0018d	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00190	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00195	50		 push	 eax
  00196	8b ce		 mov	 ecx, esi
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0019e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a1	33 cd		 xor	 ecx, ebp
  001a3	5e		 pop	 esi
  001a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a9	c9		 leave
  001aa	c2 08 00	 ret	 8
??$LoadFloat_e@$0N@@ioINILoader@@QAEMAAY0N@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<13>
_TEXT	ENDS
PUBLIC	??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z ; ioEntityGroup::GetAnimationEventTime_e<13>
EXTRN	__imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z$0
__ehfuncinfo$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
_TEXT	SEGMENT
$T533927 = -56						; size = 16
$T533926 = -40						; size = 4
_szEncEventType$ = -36					; size = 13
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z PROC ; ioEntityGroup::GetAnimationEventTime_e<13>, COMDAT
; _this$ = ecx

; 414  : 	{

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 415  : 		_ENCSTR(szEventType, szEncEventType);

  00011	8a 08		 mov	 cl, BYTE PTR [eax]
  00013	84 c9		 test	 cl, cl
  00015	0f 84 49 01 00
	00		 je	 $LN96@GetAnimati
  0001b	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0001e	88 4d dc	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00021	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00024	84 c9		 test	 cl, cl
  00026	0f 84 32 01 00
	00		 je	 $LN95@GetAnimati
  0002c	80 f1 ec	 xor	 cl, -20			; ffffffecH
  0002f	88 4d dd	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00032	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00035	84 c9		 test	 cl, cl
  00037	0f 84 1b 01 00
	00		 je	 $LN94@GetAnimati
  0003d	b2 eb		 mov	 dl, -21			; ffffffebH
  0003f	32 ca		 xor	 cl, dl
  00041	88 4d de	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00044	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00047	84 c9		 test	 cl, cl
  00049	0f 84 03 01 00
	00		 je	 $LN93@GetAnimati
  0004f	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00052	88 4d df	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00055	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00058	84 c9		 test	 cl, cl
  0005a	0f 84 ec 00 00
	00		 je	 $LN92@GetAnimati
  00060	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00063	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00066	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00069	84 c9		 test	 cl, cl
  0006b	0f 84 d5 00 00
	00		 je	 $LN91@GetAnimati
  00071	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00074	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  00077	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0007a	84 c9		 test	 cl, cl
  0007c	0f 84 bf 00 00
	00		 je	 $LN90@GetAnimati
  00082	32 ca		 xor	 cl, dl
  00084	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  00087	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008a	84 c9		 test	 cl, cl
  0008c	0f 84 a9 00 00
	00		 je	 $LN89@GetAnimati
  00092	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00095	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  00098	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009b	84 c9		 test	 cl, cl
  0009d	0f 84 92 00 00
	00		 je	 $LN88@GetAnimati
  000a3	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000a6	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000a9	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000ac	84 c9		 test	 cl, cl
  000ae	74 7f		 je	 SHORT $LN87@GetAnimati
  000b0	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b3	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b6	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000b9	84 c9		 test	 cl, cl
  000bb	74 6d		 je	 SHORT $LN86@GetAnimati
  000bd	32 ca		 xor	 cl, dl
  000bf	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c2	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000c5	84 c9		 test	 cl, cl
  000c7	74 5b		 je	 SHORT $LN85@GetAnimati
  000c9	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000cc	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d0	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+11], cl
  000d3	0f 84 8f 00 00
	00		 je	 $LN1@GetAnimati
  000d9	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000dc	84 c9		 test	 cl, cl
  000de	74 3e		 je	 SHORT $LN83@GetAnimati
  000e0	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e3	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e6	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000e9	84 c9		 test	 cl, cl
  000eb	74 2c		 je	 SHORT $LN82@GetAnimati
  000ed	32 ca		 xor	 cl, dl
  000ef	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f2	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  000f5	84 c9		 test	 cl, cl
  000f7	74 1a		 je	 SHORT $LN81@GetAnimati
  000f9	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  000fc	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000ff	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+15], cl
  00102	84 c0		 test	 al, al
  00104	74 07		 je	 SHORT $LN80@GetAnimati
  00106	34 ed		 xor	 al, -19			; ffffffedH
  00108	88 45 ec	 mov	 BYTE PTR _szEncEventType$[ebp+16], al
  0010b	eb 5b		 jmp	 SHORT $LN1@GetAnimati
$LN80@GetAnimati:
  0010d	c6 45 ec ed	 mov	 BYTE PTR _szEncEventType$[ebp+16], -19 ; ffffffedH
  00111	eb 55		 jmp	 SHORT $LN1@GetAnimati
$LN81@GetAnimati:
  00113	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  00117	eb 4f		 jmp	 SHORT $LN1@GetAnimati
$LN82@GetAnimati:
  00119	88 55 ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], dl
  0011c	eb 4a		 jmp	 SHORT $LN1@GetAnimati
$LN83@GetAnimati:
  0011e	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00122	eb 44		 jmp	 SHORT $LN1@GetAnimati
$LN85@GetAnimati:
  00124	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+11], -22 ; ffffffeaH
  00128	eb 3e		 jmp	 SHORT $LN1@GetAnimati
$LN86@GetAnimati:
  0012a	88 55 e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], dl
  0012d	eb 39		 jmp	 SHORT $LN1@GetAnimati
$LN87@GetAnimati:
  0012f	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00133	eb 33		 jmp	 SHORT $LN1@GetAnimati
$LN88@GetAnimati:
  00135	c6 45 e4 ed	 mov	 BYTE PTR _szEncEventType$[ebp+8], -19 ; ffffffedH
  00139	eb 2d		 jmp	 SHORT $LN1@GetAnimati
$LN89@GetAnimati:
  0013b	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  0013f	eb 27		 jmp	 SHORT $LN1@GetAnimati
$LN90@GetAnimati:
  00141	88 55 e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], dl
  00144	eb 22		 jmp	 SHORT $LN1@GetAnimati
$LN91@GetAnimati:
  00146	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  0014a	eb 1c		 jmp	 SHORT $LN1@GetAnimati
$LN92@GetAnimati:
  0014c	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp+4], -19 ; ffffffedH
  00150	eb 16		 jmp	 SHORT $LN1@GetAnimati
$LN93@GetAnimati:
  00152	c6 45 df ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00156	eb 10		 jmp	 SHORT $LN1@GetAnimati
$LN94@GetAnimati:
  00158	c6 45 de eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  0015c	eb 0a		 jmp	 SHORT $LN1@GetAnimati
$LN95@GetAnimati:
  0015e	c6 45 dd ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  00162	eb 04		 jmp	 SHORT $LN1@GetAnimati
$LN96@GetAnimati:
  00164	c6 45 dc ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati:
  00168	6a 03		 push	 3
  0016a	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0016d	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$[ebp+12], 0
  00171	59		 pop	 ecx
$LL105@GetAnimati:
  00172	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00178	83 c0 04	 add	 eax, 4
  0017b	49		 dec	 ecx
  0017c	75 f4		 jne	 SHORT $LL105@GetAnimati

; 416  : 		return GetAnimationEventTime(id, szEncEventType);

  0017e	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00181	50		 push	 eax
  00182	8d 4d c8	 lea	 ecx, DWORD PTR $T533927[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0018b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0018f	8d 45 c8	 lea	 eax, DWORD PTR $T533927[ebp]
  00192	50		 push	 eax
  00193	ff 75 08	 push	 DWORD PTR _id$[ebp]
  00196	8b ce		 mov	 ecx, esi
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  0019e	d9 5d d8	 fstp	 DWORD PTR $T533926[ebp]
  001a1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a5	8d 4d c8	 lea	 ecx, DWORD PTR $T533927[ebp]
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001ae	d9 45 d8	 fld	 DWORD PTR $T533926[ebp]

; 417  : 	}

  001b1	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001b6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T533927[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTime_e@$0N@@ioEntityGroup@@QAEMHAAY0N@$$CBD@Z ENDP ; ioEntityGroup::GetAnimationEventTime_e<13>
PUBLIC	??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z ; ioEntityGroup::GetAnimationEventTime_e<12>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z$0
__ehfuncinfo$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
_TEXT	SEGMENT
$T533959 = -52						; size = 16
$T533958 = -36						; size = 4
_szEncEventType$ = -32					; size = 12
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z PROC ; ioEntityGroup::GetAnimationEventTime_e<12>, COMDAT
; _this$ = ecx

; 414  : 	{

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 415  : 		_ENCSTR(szEventType, szEncEventType);

  00011	8a 08		 mov	 cl, BYTE PTR [eax]
  00013	84 c9		 test	 cl, cl
  00015	0f 84 36 01 00
	00		 je	 $LN96@GetAnimati@2
  0001b	b2 ed		 mov	 dl, -19			; ffffffedH
  0001d	32 ca		 xor	 cl, dl
  0001f	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00022	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00025	84 c9		 test	 cl, cl
  00027	0f 84 1e 01 00
	00		 je	 $LN95@GetAnimati@2
  0002d	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00030	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00033	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00036	84 c9		 test	 cl, cl
  00038	0f 84 07 01 00
	00		 je	 $LN94@GetAnimati@2
  0003e	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00041	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00044	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00047	84 c9		 test	 cl, cl
  00049	0f 84 f0 00 00
	00		 je	 $LN93@GetAnimati@2
  0004f	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00052	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00055	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00058	84 c9		 test	 cl, cl
  0005a	0f 84 da 00 00
	00		 je	 $LN92@GetAnimati@2
  00060	32 ca		 xor	 cl, dl
  00062	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00065	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00068	84 c9		 test	 cl, cl
  0006a	0f 84 c4 00 00
	00		 je	 $LN91@GetAnimati@2
  00070	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00073	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  00076	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00079	84 c9		 test	 cl, cl
  0007b	0f 84 ad 00 00
	00		 je	 $LN90@GetAnimati@2
  00081	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00084	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  00087	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008a	84 c9		 test	 cl, cl
  0008c	0f 84 96 00 00
	00		 je	 $LN89@GetAnimati@2
  00092	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00095	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  00098	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009b	84 c9		 test	 cl, cl
  0009d	0f 84 80 00 00
	00		 je	 $LN88@GetAnimati@2
  000a3	32 ca		 xor	 cl, dl
  000a5	88 4d e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000a8	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000ab	84 c9		 test	 cl, cl
  000ad	74 6e		 je	 SHORT $LN87@GetAnimati@2
  000af	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b2	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b5	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000b8	84 c9		 test	 cl, cl
  000ba	74 5b		 je	 SHORT $LN86@GetAnimati@2
  000bc	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000bf	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c3	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c6	0f 84 89 00 00
	00		 je	 $LN1@GetAnimati@2
  000cc	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  000cf	84 c9		 test	 cl, cl
  000d1	74 3f		 je	 SHORT $LN84@GetAnimati@2
  000d3	32 ca		 xor	 cl, dl
  000d5	88 4d ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], cl
  000d8	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000db	84 c9		 test	 cl, cl
  000dd	74 2d		 je	 SHORT $LN83@GetAnimati@2
  000df	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e2	88 4d ed	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e5	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000e8	84 c9		 test	 cl, cl
  000ea	74 1a		 je	 SHORT $LN82@GetAnimati@2
  000ec	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000ef	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000f2	88 4d ee	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f5	84 c0		 test	 al, al
  000f7	74 07		 je	 SHORT $LN81@GetAnimati@2
  000f9	34 ea		 xor	 al, -22			; ffffffeaH
  000fb	88 45 ef	 mov	 BYTE PTR _szEncEventType$[ebp+15], al
  000fe	eb 55		 jmp	 SHORT $LN1@GetAnimati@2
$LN81@GetAnimati@2:
  00100	c6 45 ef ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  00104	eb 4f		 jmp	 SHORT $LN1@GetAnimati@2
$LN82@GetAnimati@2:
  00106	c6 45 ee eb	 mov	 BYTE PTR _szEncEventType$[ebp+14], -21 ; ffffffebH
  0010a	eb 49		 jmp	 SHORT $LN1@GetAnimati@2
$LN83@GetAnimati@2:
  0010c	c6 45 ed ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00110	eb 43		 jmp	 SHORT $LN1@GetAnimati@2
$LN84@GetAnimati@2:
  00112	88 55 ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], dl
  00115	eb 3e		 jmp	 SHORT $LN1@GetAnimati@2
$LN86@GetAnimati@2:
  00117	c6 45 ea eb	 mov	 BYTE PTR _szEncEventType$[ebp+10], -21 ; ffffffebH
  0011b	eb 38		 jmp	 SHORT $LN1@GetAnimati@2
$LN87@GetAnimati@2:
  0011d	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00121	eb 32		 jmp	 SHORT $LN1@GetAnimati@2
$LN88@GetAnimati@2:
  00123	88 55 e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], dl
  00126	eb 2d		 jmp	 SHORT $LN1@GetAnimati@2
$LN89@GetAnimati@2:
  00128	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  0012c	eb 27		 jmp	 SHORT $LN1@GetAnimati@2
$LN90@GetAnimati@2:
  0012e	c6 45 e6 eb	 mov	 BYTE PTR _szEncEventType$[ebp+6], -21 ; ffffffebH
  00132	eb 21		 jmp	 SHORT $LN1@GetAnimati@2
$LN91@GetAnimati@2:
  00134	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  00138	eb 1b		 jmp	 SHORT $LN1@GetAnimati@2
$LN92@GetAnimati@2:
  0013a	88 55 e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], dl
  0013d	eb 16		 jmp	 SHORT $LN1@GetAnimati@2
$LN93@GetAnimati@2:
  0013f	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00143	eb 10		 jmp	 SHORT $LN1@GetAnimati@2
$LN94@GetAnimati@2:
  00145	c6 45 e2 eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  00149	eb 0a		 jmp	 SHORT $LN1@GetAnimati@2
$LN95@GetAnimati@2:
  0014b	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  0014f	eb 04		 jmp	 SHORT $LN1@GetAnimati@2
$LN96@GetAnimati@2:
  00151	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati@2:
  00155	6a 02		 push	 2
  00157	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0015a	c6 45 eb 00	 mov	 BYTE PTR _szEncEventType$[ebp+11], 0
  0015e	59		 pop	 ecx
$LL105@GetAnimati@2:
  0015f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00165	83 c0 04	 add	 eax, 4
  00168	49		 dec	 ecx
  00169	75 f4		 jne	 SHORT $LL105@GetAnimati@2
  0016b	6a 08		 push	 8
  0016d	58		 pop	 eax
$LL102@GetAnimati@2:
  0016e	8b c8		 mov	 ecx, eax
  00170	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00176	79 05		 jns	 SHORT $LN113@GetAnimati@2
  00178	49		 dec	 ecx
  00179	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017c	41		 inc	 ecx
$LN113@GetAnimati@2:
  0017d	b2 ed		 mov	 dl, -19			; ffffffedH
  0017f	2a d1		 sub	 dl, cl
  00181	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$[ebp+eax], dl
  00185	40		 inc	 eax
  00186	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00189	7c e3		 jl	 SHORT $LL102@GetAnimati@2

; 416  : 		return GetAnimationEventTime(id, szEncEventType);

  0018b	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0018e	50		 push	 eax
  0018f	8d 4d cc	 lea	 ecx, DWORD PTR $T533959[ebp]
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00198	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0019c	8d 45 cc	 lea	 eax, DWORD PTR $T533959[ebp]
  0019f	50		 push	 eax
  001a0	ff 75 08	 push	 DWORD PTR _id$[ebp]
  001a3	8b ce		 mov	 ecx, esi
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  001ab	d9 5d dc	 fstp	 DWORD PTR $T533958[ebp]
  001ae	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001b2	8d 4d cc	 lea	 ecx, DWORD PTR $T533959[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001bb	d9 45 dc	 fld	 DWORD PTR $T533958[ebp]

; 417  : 	}

  001be	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001c3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T533959[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z ENDP ; ioEntityGroup::GetAnimationEventTime_e<12>
PUBLIC	__real@3fd2ee0d320154cb
PUBLIC	__real@41f0000000000000
PUBLIC	??$RADtoDEG@M@@YAMM@Z				; RADtoDEG<float>
;	COMDAT __real@3fd2ee0d320154cb
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3fd2ee0d320154cb DQ 03fd2ee0d320154cbr	; 0.29578
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$RADtoDEG@M@@YAMM@Z
_TEXT	SEGMENT
tv130 = -4						; size = 4
tv75 = 8						; size = 4
_val$ = 8						; size = 4
??$RADtoDEG@M@@YAMM@Z PROC				; RADtoDEG<float>, COMDAT

; 18   : type  RADtoDEG (type val) {return (type) (val * (return57() + 0.2957795132)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  00009	89 45 fc	 mov	 DWORD PTR tv130[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv130[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN5@RADtoDEG
  00013	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$LN5@RADtoDEG:
  00019	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd2ee0d320154cb
  0001f	d8 4d 08	 fmul	 DWORD PTR _val$[ebp]
  00022	d9 5d 08	 fstp	 DWORD PTR tv75[ebp]
  00025	d9 45 08	 fld	 DWORD PTR tv75[ebp]
  00028	c9		 leave
  00029	c3		 ret	 0
??$RADtoDEG@M@@YAMM@Z ENDP				; RADtoDEG<float>
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@M@@QAE@XZ				; CEncrypt<float>::CEncrypt<float>
EXTRN	??0ccddaabb@@QAE@XZ:PROC			; ccddaabb::ccddaabb
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@M@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@M@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@M@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@M@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@M@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@M@@QAE@XZ PROC				; CEncrypt<float>::CEncrypt<float>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@M@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@M@@AAEXXZ ; CEncrypt<float>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@M@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@M@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@M@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@M@@QAE@XZ ENDP				; CEncrypt<float>::CEncrypt<float>
PUBLIC	??B?$CEncrypt@M@@QBEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@M@@QBEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QBEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QBEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@XZ				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@K@@QAE@XZ PROC				; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@XZ ENDP				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QBEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QBEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QBEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QBEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKH@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKH@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 843  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 845  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 846  : #ifdef _NOTUSE
; 847  : 		m_value = inValue;
; 848  : 		Debug();
; 849  : #endif
; 850  : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 851  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKH@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@_N@@QAE@XZ			; CEncrypt<bool>::CEncrypt<bool>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@_N@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@_N@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@_N@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@_N@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@_N@@QAE@XZ PROC				; CEncrypt<bool>::CEncrypt<bool>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@_N@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@_N@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@_N@@AAEXXZ ; CEncrypt<bool>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@_N@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@_N@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@_N@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@_N@@QAE@XZ ENDP				; CEncrypt<bool>::CEncrypt<bool>
PUBLIC	??B?$CEncrypt@_N@@QAE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QAE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QAE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QAE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QBE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QBE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QBE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QBE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@_N@@QAE_N_N@Z			; CEncrypt<bool>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@_N@@QAE_N_N@Z
_TEXT	SEGMENT
_inValue$ = 8						; size = 1
_value$ = 11						; size = 1
??4?$CEncrypt@_N@@QAE_N_N@Z PROC			; CEncrypt<bool>::operator=, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		type value = inValue;

  00003	8a 45 08	 mov	 al, BYTE PTR _inValue$[ebp]
  00006	88 45 0b	 mov	 BYTE PTR _value$[ebp], al

; 227  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 0b	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 228  : #ifdef _NOTUSE
; 229  : 		m_value = inValue;
; 230  : 		Debug();
; 231  : #endif
; 232  : 		return value;

  00012	8a 45 0b	 mov	 al, BYTE PTR _value$[ebp]

; 233  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@_N@@QAE_N_N@Z ENDP			; CEncrypt<bool>::operator=
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@H@@QAE@XZ				; CEncrypt<int>::CEncrypt<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@H@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@H@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@H@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@H@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@H@@QAE@XZ PROC				; CEncrypt<int>::CEncrypt<int>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@H@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@H@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@H@@AAEXXZ ; CEncrypt<int>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@H@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@H@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@H@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@H@@QAE@XZ ENDP				; CEncrypt<int>::CEncrypt<int>
PUBLIC	??B?$CEncrypt@H@@QAEHXZ				; CEncrypt<int>::operator int
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@H@@QAEHXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@H@@QAEHXZ PROC				; CEncrypt<int>::operator int, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@H@@QAEHXZ ENDP				; CEncrypt<int>::operator int
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@H@@QBEHXZ				; CEncrypt<int>::operator int
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@H@@QBEHXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@H@@QBEHXZ PROC				; CEncrypt<int>::operator int, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@H@@QBEHXZ ENDP				; CEncrypt<int>::operator int
_TEXT	ENDS
PUBLIC	??E?$CEncrypt@H@@QAEHH@Z			; CEncrypt<int>::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$CEncrypt@H@@QAEHH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
___formal$ = 8						; size = 4
??E?$CEncrypt@H@@QAEHH@Z PROC				; CEncrypt<int>::operator++, COMDAT
; _this$ = ecx

; 190  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 191  : 		type value;
; 192  : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 193  : 		++value;

  00010	ff 45 fc	 inc	 DWORD PTR _value$[ebp]

; 194  : 		EncryptValueToPool((char*)&value);

  00013	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00016	50		 push	 eax
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 195  : #ifdef _NOTUSE
; 196  : 		++m_value;
; 197  : 		Debug();
; 198  : #endif
; 199  : 		return value;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]
  00021	5e		 pop	 esi

; 200  : 	}	

  00022	c9		 leave
  00023	c2 04 00	 ret	 4
??E?$CEncrypt@H@@QAEHH@Z ENDP				; CEncrypt<int>::operator++
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@H@@QAEHH@Z			; CEncrypt<int>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@H@@QAEHH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@H@@QAEHH@Z PROC				; CEncrypt<int>::operator=, COMDAT
; _this$ = ecx

; 843  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 845  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 846  : #ifdef _NOTUSE
; 847  : 		m_value = inValue;
; 848  : 		Debug();
; 849  : #endif
; 850  : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 851  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@H@@QAEHH@Z ENDP				; CEncrypt<int>::operator=
_TEXT	ENDS
PUBLIC	?SetGravityAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetGravityAmt
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?SetGravityAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_value$534064 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetGravityAmt@ioBaseChar@@QAEXM@Z PROC			; ioBaseChar::SetGravityAmt, COMDAT
; _this$ = ecx

; 2631 : 	inline void SetGravityAmt( float fAmt ) { m_fGravityAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	8d 45 08	 lea	 eax, DWORD PTR _value$534064[ebp]
  0000b	50		 push	 eax
  0000c	81 c1 e8 0b 00
	00		 add	 ecx, 3048		; 00000be8H
  00012	f3 0f 11 45 08	 movss	 DWORD PTR _value$534064[ebp], xmm0
  00017	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetGravityAmt@ioBaseChar@@QAEXM@Z ENDP			; ioBaseChar::SetGravityAmt
_TEXT	ENDS
PUBLIC	??0ioMechanicsFireSkill@@QAE@XZ			; ioMechanicsFireSkill::ioMechanicsFireSkill
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioAttackSkill@@QAE@XZ:PROC			; ioAttackSkill::ioAttackSkill
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__ehfuncinfo$??0ioMechanicsFireSkill@@QAE@XZ DD 019930522H
	DD	015H
	DD	FLAT:__unwindtable$??0ioMechanicsFireSkill@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioMechanicsFireSkill@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$18
	DD	012H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$19
	DD	013H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$20
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
xdata$x	ENDS
;	COMDAT ??0ioMechanicsFireSkill@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_value$534123 = -20					; size = 4
_value$534119 = -20					; size = 4
_value$534115 = -20					; size = 4
_value$534111 = -20					; size = 4
_value$534091 = -20					; size = 4
_value$534107 = -13					; size = 1
_value$534103 = -13					; size = 1
_value$534099 = -13					; size = 1
_value$534095 = -13					; size = 1
__$EHRec$ = -12						; size = 12
??0ioMechanicsFireSkill@@QAE@XZ PROC			; ioMechanicsFireSkill::ioMechanicsFireSkill, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioMechanicsFireSkill@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioAttackSkill@@QAE@XZ ; ioAttackSkill::ioAttackSkill
  00016	33 db		 xor	 ebx, ebx
  00018	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioMechanicsFireSkill@@6B@
  00027	e8 00 00 00 00	 call	 ??0?$CEncrypt@H@@QAE@XZ	; CEncrypt<int>::CEncrypt<int>
  0002c	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00032	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00036	e8 00 00 00 00	 call	 ??0?$CEncrypt@H@@QAE@XZ	; CEncrypt<int>::CEncrypt<int>
  0003b	8d 8e 48 11 00
	00		 lea	 ecx, DWORD PTR [esi+4424]
  00041	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00045	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0004a	8d 8e 78 11 00
	00		 lea	 ecx, DWORD PTR [esi+4472]
  00050	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00054	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00059	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0005f	8d 8e a8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4520]
  00065	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00069	ff d7		 call	 edi
  0006b	8d 8e b8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4536]
  00071	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00075	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0007a	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  00080	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00084	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00089	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  0008f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00093	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00098	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  0009e	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000a2	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000a7	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  000ad	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000b1	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000b6	8d 8e a8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4776]
  000bc	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  000c0	ff d7		 call	 edi
  000c2	8d 8e b8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4792]
  000c8	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  000cc	ff d7		 call	 edi
  000ce	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  000d4	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  000d8	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  000dd	8d 8e 00 13 00
	00		 lea	 ecx, DWORD PTR [esi+4864]
  000e3	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  000e7	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  000ec	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  000f2	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  000f6	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  000fb	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  00101	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00105	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  0010a	8d 8e 90 13 00
	00		 lea	 ecx, DWORD PTR [esi+5008]
  00110	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00114	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  00119	8d 8e c0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5056]
  0011f	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00123	ff d7		 call	 edi
  00125	8d 8e d0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5072]
  0012b	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  0012f	ff d7		 call	 edi
  00131	8d 8e e4 13 00
	00		 lea	 ecx, DWORD PTR [esi+5092]
  00137	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  0013b	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>

; 13   : 	m_bSetHandMesh = false;
; 14   : 	m_CurDirKey = ioUserKeyInput::DKI_NONE;
; 15   : 	m_PreDirKey = ioUserKeyInput::DKI_NONE;
; 16   : 
; 17   : 	m_iCurFireCnt = 0;

  00140	8d 45 ec	 lea	 eax, DWORD PTR _value$534091[ebp]
  00143	50		 push	 eax
  00144	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  0014a	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  0014e	88 9e 0a 0f 00
	00		 mov	 BYTE PTR [esi+3850], bl
  00154	89 9e 18 14 00
	00		 mov	 DWORD PTR [esi+5144], ebx
  0015a	89 9e 14 14 00
	00		 mov	 DWORD PTR [esi+5140], ebx
  00160	89 5d ec	 mov	 DWORD PTR _value$534091[ebp], ebx
  00163	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 18   : 
; 19   : 	m_bSetMaxCharge = false;

  00168	8d 45 f3	 lea	 eax, DWORD PTR _value$534095[ebp]
  0016b	50		 push	 eax
  0016c	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  00172	88 5d f3	 mov	 BYTE PTR _value$534095[ebp], bl
  00175	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 20   : 	m_bTargetRot = false;

  0017a	8d 45 f3	 lea	 eax, DWORD PTR _value$534099[ebp]
  0017d	50		 push	 eax
  0017e	8d 8e 00 13 00
	00		 lea	 ecx, DWORD PTR [esi+4864]
  00184	88 5d f3	 mov	 BYTE PTR _value$534099[ebp], bl
  00187	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 21   : 	m_bSetUpKey = false;

  0018c	8d 45 f3	 lea	 eax, DWORD PTR _value$534103[ebp]
  0018f	50		 push	 eax
  00190	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  00196	88 5d f3	 mov	 BYTE PTR _value$534103[ebp], bl
  00199	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 22   : 	m_bSetDownKey = false;

  0019e	8d 45 f3	 lea	 eax, DWORD PTR _value$534107[ebp]
  001a1	50		 push	 eax
  001a2	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  001a8	88 5d f3	 mov	 BYTE PTR _value$534107[ebp], bl
  001ab	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 23   : 
; 24   : 	m_SkillState = SS_NONE;
; 25   : 	m_dwChargeMaxTime = 0;

  001b0	8d 45 ec	 lea	 eax, DWORD PTR _value$534111[ebp]
  001b3	50		 push	 eax
  001b4	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  001ba	89 9e e4 10 00
	00		 mov	 DWORD PTR [esi+4324], ebx
  001c0	89 5d ec	 mov	 DWORD PTR _value$534111[ebp], ebx
  001c3	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 26   : 	m_dwFireEnableTime = 0;

  001c8	8d 45 ec	 lea	 eax, DWORD PTR _value$534115[ebp]
  001cb	50		 push	 eax
  001cc	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  001d2	89 5d ec	 mov	 DWORD PTR _value$534115[ebp], ebx
  001d5	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 27   : 	m_dwActionEndTime = 0;

  001da	8d 45 ec	 lea	 eax, DWORD PTR _value$534119[ebp]
  001dd	50		 push	 eax
  001de	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  001e4	89 5d ec	 mov	 DWORD PTR _value$534119[ebp], ebx
  001e7	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 28   : 
; 29   : 	m_dwCurSkillProtectTime = 0;

  001ec	8d 45 ec	 lea	 eax, DWORD PTR _value$534123[ebp]
  001ef	50		 push	 eax
  001f0	8d 8e 78 11 00
	00		 lea	 ecx, DWORD PTR [esi+4472]
  001f6	89 5d ec	 mov	 DWORD PTR _value$534123[ebp], ebx
  001f9	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 30   : 
; 31   : 	m_dwChargeEffect = 0;

  001fe	89 9e c8 12 00
	00		 mov	 DWORD PTR [esi+4808], ebx

; 32   : 	m_dwChargeMaxEffect = 0;

  00204	89 9e cc 12 00
	00		 mov	 DWORD PTR [esi+4812], ebx

; 33   : 	m_dwUpDownEffect = 0;

  0020a	89 9e e0 13 00
	00		 mov	 DWORD PTR [esi+5088], ebx

; 34   : }

  00210	8b c6		 mov	 eax, esi
  00212	e8 00 00 00 00	 call	 __EH_epilog3
  00217	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$1:
  00008	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@H@@UAE@XZ	; CEncrypt<int>::~CEncrypt<int>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$2:
  00016	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 18 11 00
	00		 add	 ecx, 4376		; 00001118H
  0001f	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@H@@UAE@XZ	; CEncrypt<int>::~CEncrypt<int>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$3:
  00024	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 48 11 00
	00		 add	 ecx, 4424		; 00001148H
  0002d	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$4:
  00032	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 78 11 00
	00		 add	 ecx, 4472		; 00001178H
  0003b	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$5:
  00040	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 a8 11 00
	00		 add	 ecx, 4520		; 000011a8H
  00049	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$6:
  0004f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	81 c1 b8 11 00
	00		 add	 ecx, 4536		; 000011b8H
  00058	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$7:
  0005d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 e8 11 00
	00		 add	 ecx, 4584		; 000011e8H
  00066	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$8:
  0006b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	81 c1 18 12 00
	00		 add	 ecx, 4632		; 00001218H
  00074	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$9:
  00079	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	81 c1 48 12 00
	00		 add	 ecx, 4680		; 00001248H
  00082	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$10:
  00087	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	81 c1 78 12 00
	00		 add	 ecx, 4728		; 00001278H
  00090	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$11:
  00095	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 a8 12 00
	00		 add	 ecx, 4776		; 000012a8H
  0009e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$12:
  000a4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	81 c1 b8 12 00
	00		 add	 ecx, 4792		; 000012b8H
  000ad	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$13:
  000b3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	81 c1 d0 12 00
	00		 add	 ecx, 4816		; 000012d0H
  000bc	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$14:
  000c1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	81 c1 00 13 00
	00		 add	 ecx, 4864		; 00001300H
  000ca	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$15:
  000cf	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	81 c1 30 13 00
	00		 add	 ecx, 4912		; 00001330H
  000d8	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$16:
  000dd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	81 c1 60 13 00
	00		 add	 ecx, 4960		; 00001360H
  000e6	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$17:
  000eb	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	81 c1 90 13 00
	00		 add	 ecx, 5008		; 00001390H
  000f4	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$18:
  000f9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	81 c1 c0 13 00
	00		 add	 ecx, 5056		; 000013c0H
  00102	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$19:
  00108	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	81 c1 d0 13 00
	00		 add	 ecx, 5072		; 000013d0H
  00111	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@XZ$20:
  00117	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	81 c1 e4 13 00
	00		 add	 ecx, 5092		; 000013e4H
  00120	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__ehhandler$??0ioMechanicsFireSkill@@QAE@XZ:
  00125	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00129	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0012c	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0012f	33 c8		 xor	 ecx, eax
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioMechanicsFireSkill@@QAE@XZ
  0013b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioMechanicsFireSkill@@QAE@XZ ENDP			; ioMechanicsFireSkill::ioMechanicsFireSkill
; Function compile flags: /Ogsp
;	COMDAT ??_GioMechanicsFireSkill@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioMechanicsFireSkill@@UAEPAXI@Z PROC		; ioMechanicsFireSkill::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioMechanicsFireSkill@@UAE@XZ ; ioMechanicsFireSkill::~ioMechanicsFireSkill
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@5
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@5:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioMechanicsFireSkill@@UAEPAXI@Z ENDP		; ioMechanicsFireSkill::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioAttackSkill@@UAEXAAVioINILoader@@@Z:PROC ; ioAttackSkill::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioMechanicsFireSkill@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -300				; size = 4
tv10044 = -296						; size = 4
_value$535541 = -296					; size = 4
_value$535407 = -296					; size = 4
_value$534778 = -296					; size = 4
_value$534648 = -296					; size = 4
_value$534392 = -296					; size = 4
_value$534263 = -296					; size = 4
_szBuf$ = -292						; size = 260
__k$535295 = -32					; size = 19
__k$534933 = -32					; size = 18
__k$534678 = -32					; size = 21
__k$534163 = -32					; size = 19
__k$535191 = -28					; size = 17
__k$535058 = -28					; size = 15
__k$534808 = -28					; size = 14
__k$534541 = -28					; size = 16
__k$535429 = -24					; size = 13
__k$534515 = -24					; size = 11
__k$534293 = -24					; size = 13
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioMechanicsFireSkill@@UAEXAAVioINILoader@@@Z PROC ; ioMechanicsFireSkill::LoadProperty, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi

; 79   : 	ioAttackSkill::LoadProperty( rkLoader );

  00019	53		 push	 ebx
  0001a	8b f1		 mov	 esi, ecx

; 100  : 	rkLoader.LoadString_e( "down_move_effect", "", szBuf, MAX_PATH );

  0001c	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], ebx
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioAttackSkill@@UAEXAAVioINILoader@@@Z ; ioAttackSkill::LoadProperty
  00027	6a 04		 push	 4
  00029	c7 45 e0 9e 87
	82 86		 mov	 DWORD PTR __k$534163[ebp], -2038265954 ; 8682879eH
  00030	c7 45 e4 81 b3
	9b 98		 mov	 DWORD PTR __k$534163[ebp+4], -1734626431 ; 989bb381H
  00037	c7 45 e8 82 98
	8e 89		 mov	 DWORD PTR __k$534163[ebp+8], -1987143550 ; 898e9882H
  0003e	c7 45 ec 99 b3
	9f 83		 mov	 DWORD PTR __k$534163[ebp+12], -2086685799 ; 839fb399H
  00045	66 c7 45 f0 80
	89		 mov	 WORD PTR __k$534163[ebp+16], 35200 ; 00008980H
  0004b	8d 45 e0	 lea	 eax, DWORD PTR __k$534163[ebp]
  0004e	c6 45 f2 00	 mov	 BYTE PTR __k$534163[ebp+18], 0
  00052	59		 pop	 ecx
$LL106@LoadProper:

; 80   : 
; 81   : 	char szBuf[MAX_PATH];
; 82   : 
; 83   : 	m_dwSkillProtectTime = (DWORD)rkLoader.LoadInt_e( "skill_protect_time", 0 );

  00053	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00059	83 c0 04	 add	 eax, 4
  0005c	49		 dec	 ecx
  0005d	75 f4		 jne	 SHORT $LL106@LoadProper
  0005f	6a 10		 push	 16			; 00000010H
  00061	5f		 pop	 edi
$LL103@LoadProper:
  00062	8b c7		 mov	 eax, edi
  00064	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00069	79 05		 jns	 SHORT $LN1227@LoadProper
  0006b	48		 dec	 eax
  0006c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0006f	40		 inc	 eax
$LN1227@LoadProper:
  00070	b1 ed		 mov	 cl, -19			; ffffffedH
  00072	2a c8		 sub	 cl, al
  00074	30 4c 3d e0	 xor	 BYTE PTR __k$534163[ebp+edi], cl
  00078	47		 inc	 edi
  00079	83 ff 12	 cmp	 edi, 18			; 00000012H
  0007c	7c e4		 jl	 SHORT $LL103@LoadProper
  0007e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00084	6a 00		 push	 0
  00086	8d 45 e0	 lea	 eax, DWORD PTR __k$534163[ebp]
  00089	50		 push	 eax
  0008a	8b cb		 mov	 ecx, ebx
  0008c	ff d7		 call	 edi
  0008e	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$534263[ebp], eax
  00094	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$534263[ebp]
  0009a	50		 push	 eax
  0009b	8d 8e 48 11 00
	00		 lea	 ecx, DWORD PTR [esi+4424]
  000a1	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  000a6	6a 03		 push	 3

; 84   : 
; 85   : 	m_iMaxFireCnt = rkLoader.LoadInt_e( "max_fire_cnt", 1 );

  000a8	c7 45 e8 80 8d
	93 b5		 mov	 DWORD PTR __k$534293[ebp], -1248621184 ; b5938d80H
  000af	c7 45 ec 8b 85
	99 8f		 mov	 DWORD PTR __k$534293[ebp+4], -1885764213 ; 8f99858bH
  000b6	c7 45 f0 b2 8f
	85 9e		 mov	 DWORD PTR __k$534293[ebp+8], -1635414094 ; 9e858fb2H
  000bd	8d 45 e8	 lea	 eax, DWORD PTR __k$534293[ebp]
  000c0	c6 45 f4 00	 mov	 BYTE PTR __k$534293[ebp+12], 0
  000c4	59		 pop	 ecx
$LL214@LoadProper:
  000c5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000cb	83 c0 04	 add	 eax, 4
  000ce	49		 dec	 ecx
  000cf	75 f4		 jne	 SHORT $LL214@LoadProper
  000d1	6a 01		 push	 1
  000d3	8d 45 e8	 lea	 eax, DWORD PTR __k$534293[ebp]
  000d6	50		 push	 eax
  000d7	8b cb		 mov	 ecx, ebx
  000d9	ff d7		 call	 edi
  000db	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$534392[ebp], eax
  000e1	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$534392[ebp]
  000e7	50		 push	 eax
  000e8	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  000ee	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool
  000f3	6a 02		 push	 2

; 86   : 
; 87   : 	rkLoader.LoadString_e( "charge_ani", "", szBuf, MAX_PATH );

  000f5	c7 45 e8 8e 84
	8a 98		 mov	 DWORD PTR __k$534515[ebp], -1735752562 ; 988a848eH
  000fc	c7 45 ec 8a 89
	b4 8b		 mov	 DWORD PTR __k$534515[ebp+4], -1951102582 ; 8bb4898aH
  00103	66 c7 45 f0 83
	85		 mov	 WORD PTR __k$534515[ebp+8], 34179 ; 00008583H
  00109	8d 45 e8	 lea	 eax, DWORD PTR __k$534515[ebp]
  0010c	c6 45 f2 00	 mov	 BYTE PTR __k$534515[ebp+10], 0
  00110	59		 pop	 ecx
$LL322@LoadProper:
  00111	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00117	83 c0 04	 add	 eax, 4
  0011a	49		 dec	 ecx
  0011b	75 f4		 jne	 SHORT $LL322@LoadProper
  0011d	6a 08		 push	 8
  0011f	5f		 pop	 edi
$LL319@LoadProper:
  00120	8b c7		 mov	 eax, edi
  00122	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00127	79 05		 jns	 SHORT $LN1228@LoadProper
  00129	48		 dec	 eax
  0012a	83 c8 fc	 or	 eax, -4			; fffffffcH
  0012d	40		 inc	 eax
$LN1228@LoadProper:
  0012e	b1 ed		 mov	 cl, -19			; ffffffedH
  00130	2a c8		 sub	 cl, al
  00132	30 4c 3d e8	 xor	 BYTE PTR __k$534515[ebp+edi], cl
  00136	47		 inc	 edi
  00137	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0013a	7c e4		 jl	 SHORT $LL319@LoadProper
  0013c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  00142	68 04 01 00 00	 push	 260			; 00000104H
  00147	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0014d	50		 push	 eax
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00153	8d 45 e8	 lea	 eax, DWORD PTR __k$534515[ebp]
  00156	50		 push	 eax
  00157	8b cb		 mov	 ecx, ebx
  00159	ff d7		 call	 edi

; 88   : 	m_ChargeMotion = szBuf;

  0015b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00161	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00167	50		 push	 eax
  00168	8d 8e a8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4520]
  0016e	ff d3		 call	 ebx
  00170	6a 03		 push	 3

; 89   : 
; 90   : 	m_dwChargeDuration = (DWORD)rkLoader.LoadInt_e( "charge_duration", 3000 );

  00172	c7 45 e4 8e 84
	8a 98		 mov	 DWORD PTR __k$534541[ebp], -1735752562 ; 988a848eH
  00179	c7 45 e8 8a 89
	b4 8e		 mov	 DWORD PTR __k$534541[ebp+4], -1900770934 ; 8eb4898aH
  00180	c7 45 ec 98 9e
	8a 9e		 mov	 DWORD PTR __k$534541[ebp+8], -1635082600 ; 9e8a9e98H
  00187	8d 45 e4	 lea	 eax, DWORD PTR __k$534541[ebp]
  0018a	c7 45 f0 84 83
	85 00		 mov	 DWORD PTR __k$534541[ebp+12], 8749956 ; 00858384H
  00191	59		 pop	 ecx
$LL428@LoadProper:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	49		 dec	 ecx
  0019c	75 f4		 jne	 SHORT $LL428@LoadProper
  0019e	6a 0c		 push	 12			; 0000000cH
  001a0	58		 pop	 eax
$LL425@LoadProper:
  001a1	8b c8		 mov	 ecx, eax
  001a3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001a9	79 05		 jns	 SHORT $LN1229@LoadProper
  001ab	49		 dec	 ecx
  001ac	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001af	41		 inc	 ecx
$LN1229@LoadProper:
  001b0	b2 ed		 mov	 dl, -19			; ffffffedH
  001b2	2a d1		 sub	 dl, cl
  001b4	30 54 05 e4	 xor	 BYTE PTR __k$534541[ebp+eax], dl
  001b8	40		 inc	 eax
  001b9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001bc	7c e3		 jl	 SHORT $LL425@LoadProper
  001be	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001c4	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  001c9	8d 45 e4	 lea	 eax, DWORD PTR __k$534541[ebp]
  001cc	50		 push	 eax
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  001d3	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$534648[ebp], eax
  001d9	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$534648[ebp]
  001df	50		 push	 eax
  001e0	8d 8e b8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4536]
  001e6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  001eb	6a 05		 push	 5

; 91   : 	m_dwFireEnableDuration = (DWORD)rkLoader.LoadInt_e( "fire_enable_duration", 1000 );

  001ed	c7 45 e0 8b 85
	99 8f		 mov	 DWORD PTR __k$534678[ebp], -1885764213 ; 8f99858bH
  001f4	c7 45 e4 b2 89
	85 8b		 mov	 DWORD PTR __k$534678[ebp+4], -1954182734 ; 8b8589b2H
  001fb	c7 45 e8 8f 80
	8e b5		 mov	 DWORD PTR __k$534678[ebp+8], -1248952177 ; b58e808fH
  00202	c7 45 ec 89 99
	99 8b		 mov	 DWORD PTR __k$534678[ebp+12], -1952867959 ; 8b999989H
  00209	c7 45 f0 99 85
	84 84		 mov	 DWORD PTR __k$534678[ebp+16], -2071689831 ; 84848599H
  00210	8d 45 e0	 lea	 eax, DWORD PTR __k$534678[ebp]
  00213	c6 45 f4 00	 mov	 BYTE PTR __k$534678[ebp+20], 0
  00217	59		 pop	 ecx
$LL536@LoadProper:
  00218	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021e	83 c0 04	 add	 eax, 4
  00221	49		 dec	 ecx
  00222	75 f4		 jne	 SHORT $LL536@LoadProper
  00224	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0022a	68 e8 03 00 00	 push	 1000			; 000003e8H
  0022f	8d 45 e0	 lea	 eax, DWORD PTR __k$534678[ebp]
  00232	50		 push	 eax
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00239	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$534778[ebp], eax
  0023f	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$534778[ebp]
  00245	50		 push	 eax
  00246	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  0024c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  00251	6a 03		 push	 3

; 92   : 
; 93   : 	rkLoader.LoadString_e( "charge_effect", "", szBuf, MAX_PATH );

  00253	c7 45 e4 8e 84
	8a 98		 mov	 DWORD PTR __k$534808[ebp], -1735752562 ; 988a848eH
  0025a	c7 45 e8 8a 89
	b4 8f		 mov	 DWORD PTR __k$534808[ebp+4], -1883993718 ; 8fb4898aH
  00261	c7 45 ec 8b 8a
	8e 89		 mov	 DWORD PTR __k$534808[ebp+8], -1987147125 ; 898e8a8bH
  00268	8d 45 e4	 lea	 eax, DWORD PTR __k$534808[ebp]
  0026b	66 c7 45 f0 99
	00		 mov	 WORD PTR __k$534808[ebp+12], 153 ; 00000099H
  00271	59		 pop	 ecx
$LL644@LoadProper:
  00272	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00278	83 c0 04	 add	 eax, 4
  0027b	49		 dec	 ecx
  0027c	75 f4		 jne	 SHORT $LL644@LoadProper
  0027e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00284	80 75 f0 ed	 xor	 BYTE PTR __k$534808[ebp+12], -19 ; ffffffedH
  00288	68 04 01 00 00	 push	 260			; 00000104H
  0028d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00293	50		 push	 eax
  00294	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00299	8d 45 e4	 lea	 eax, DWORD PTR __k$534808[ebp]
  0029c	50		 push	 eax
  0029d	ff d7		 call	 edi

; 94   : 	m_ChargeEffect = szBuf;

  0029f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002a5	50		 push	 eax
  002a6	8d 8e a8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4776]
  002ac	ff d3		 call	 ebx
  002ae	6a 04		 push	 4

; 95   : 	rkLoader.LoadString_e( "charge_max_effect", "", szBuf, MAX_PATH );

  002b0	c7 45 e0 8e 84
	8a 98		 mov	 DWORD PTR __k$534933[ebp], -1735752562 ; 988a848eH
  002b7	c7 45 e4 8a 89
	b4 87		 mov	 DWORD PTR __k$534933[ebp+4], -2018211446 ; 87b4898aH
  002be	c7 45 e8 8c 94
	b4 8f		 mov	 DWORD PTR __k$534933[ebp+8], -1883990900 ; 8fb4948cH
  002c5	c7 45 ec 8b 8a
	8e 89		 mov	 DWORD PTR __k$534933[ebp+12], -1987147125 ; 898e8a8bH
  002cc	8d 45 e0	 lea	 eax, DWORD PTR __k$534933[ebp]
  002cf	66 c7 45 f0 99
	00		 mov	 WORD PTR __k$534933[ebp+16], 153 ; 00000099H
  002d5	59		 pop	 ecx
$LL750@LoadProper:
  002d6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002dc	83 c0 04	 add	 eax, 4
  002df	49		 dec	 ecx
  002e0	75 f4		 jne	 SHORT $LL750@LoadProper
  002e2	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002e8	80 75 f0 ed	 xor	 BYTE PTR __k$534933[ebp+16], -19 ; ffffffedH
  002ec	68 04 01 00 00	 push	 260			; 00000104H
  002f1	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002f7	50		 push	 eax
  002f8	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002fd	8d 45 e0	 lea	 eax, DWORD PTR __k$534933[ebp]
  00300	50		 push	 eax
  00301	ff d7		 call	 edi

; 96   : 	m_ChargeMaxEffect = szBuf;

  00303	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00309	50		 push	 eax
  0030a	8d 8e b8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4792]
  00310	ff d3		 call	 ebx
  00312	6a 03		 push	 3

; 97   : 
; 98   : 	rkLoader.LoadString_e( "up_move_effect", "", szBuf, MAX_PATH );

  00314	c7 45 e4 98 9c
	b4 87		 mov	 DWORD PTR __k$535058[ebp], -2018206568 ; 87b49c98H
  0031b	c7 45 e8 82 9a
	8e b5		 mov	 DWORD PTR __k$535058[ebp+4], -1248945534 ; b58e9a82H
  00322	c7 45 ec 88 8a
	8d 8f		 mov	 DWORD PTR __k$535058[ebp+8], -1886549368 ; 8f8d8a88H
  00329	66 c7 45 f0 8e
	98		 mov	 WORD PTR __k$535058[ebp+12], 39054 ; 0000988eH
  0032f	8d 45 e4	 lea	 eax, DWORD PTR __k$535058[ebp]
  00332	c6 45 f2 00	 mov	 BYTE PTR __k$535058[ebp+14], 0
  00336	59		 pop	 ecx
$LL856@LoadProper:
  00337	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0033d	83 c0 04	 add	 eax, 4
  00340	49		 dec	 ecx
  00341	75 f4		 jne	 SHORT $LL856@LoadProper
  00343	6a 0c		 push	 12			; 0000000cH
  00345	58		 pop	 eax
$LL853@LoadProper:
  00346	8b c8		 mov	 ecx, eax
  00348	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0034e	79 05		 jns	 SHORT $LN1230@LoadProper
  00350	49		 dec	 ecx
  00351	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00354	41		 inc	 ecx
$LN1230@LoadProper:
  00355	b2 ed		 mov	 dl, -19			; ffffffedH
  00357	2a d1		 sub	 dl, cl
  00359	30 54 05 e4	 xor	 BYTE PTR __k$535058[ebp+eax], dl
  0035d	40		 inc	 eax
  0035e	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00361	7c e3		 jl	 SHORT $LL853@LoadProper
  00363	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00369	68 04 01 00 00	 push	 260			; 00000104H
  0036e	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00374	50		 push	 eax
  00375	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0037a	8d 45 e4	 lea	 eax, DWORD PTR __k$535058[ebp]
  0037d	50		 push	 eax
  0037e	ff d7		 call	 edi

; 99   : 	m_ChargeUpEffect = szBuf;

  00380	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00386	50		 push	 eax
  00387	8d 8e c0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5056]
  0038d	ff d3		 call	 ebx
  0038f	6a 04		 push	 4

; 100  : 	rkLoader.LoadString_e( "down_move_effect", "", szBuf, MAX_PATH );

  00391	c7 45 e4 89 83
	9c 84		 mov	 DWORD PTR __k$535191[ebp], -2070117495 ; 849c8389H
  00398	c7 45 e8 b2 81
	84 9c		 mov	 DWORD PTR __k$535191[ebp+4], -1669037646 ; 9c8481b2H
  0039f	c7 45 ec 88 b3
	8e 8c		 mov	 DWORD PTR __k$535191[ebp+8], -1936804984 ; 8c8eb388H
  003a6	c7 45 f0 8b 89
	88 9e		 mov	 DWORD PTR __k$535191[ebp+12], -1635219061 ; 9e88898bH
  003ad	8d 45 e4	 lea	 eax, DWORD PTR __k$535191[ebp]
  003b0	c6 45 f4 00	 mov	 BYTE PTR __k$535191[ebp+16], 0
  003b4	59		 pop	 ecx
$LL962@LoadProper:
  003b5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003bb	83 c0 04	 add	 eax, 4
  003be	49		 dec	 ecx
  003bf	75 f4		 jne	 SHORT $LL962@LoadProper
  003c1	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  003c7	68 04 01 00 00	 push	 260			; 00000104H
  003cc	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003d2	50		 push	 eax
  003d3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003d8	8d 45 e4	 lea	 eax, DWORD PTR __k$535191[ebp]
  003db	50		 push	 eax
  003dc	ff d7		 call	 edi

; 101  : 	m_ChargeDownEffect = szBuf;

  003de	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003e4	50		 push	 eax
  003e5	8d 8e d0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5072]
  003eb	ff d3		 call	 ebx
  003ed	6a 04		 push	 4

; 102  : 
; 103  : 	m_dwRotateTime = (DWORD)rkLoader.LoadInt_e( "skill_rotate_speed", 0 );

  003ef	c7 45 e0 9e 87
	82 86		 mov	 DWORD PTR __k$535295[ebp], -2038265954 ; 8682879eH
  003f6	c7 45 e4 81 b3
	99 85		 mov	 DWORD PTR __k$535295[ebp+4], -2053524607 ; 8599b381H
  003fd	c7 45 e8 99 8d
	9f 8f		 mov	 DWORD PTR __k$535295[ebp+8], -1885368935 ; 8f9f8d99H
  00404	c7 45 ec b2 9f
	9b 8f		 mov	 DWORD PTR __k$535295[ebp+12], -1885626446 ; 8f9b9fb2H
  0040b	66 c7 45 f0 88
	88		 mov	 WORD PTR __k$535295[ebp+16], 34952 ; 00008888H
  00411	8d 45 e0	 lea	 eax, DWORD PTR __k$535295[ebp]
  00414	c6 45 f2 00	 mov	 BYTE PTR __k$535295[ebp+18], 0
  00418	59		 pop	 ecx
$LL1068@LoadProper:
  00419	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0041f	83 c0 04	 add	 eax, 4
  00422	49		 dec	 ecx
  00423	75 f4		 jne	 SHORT $LL1068@LoadProper
  00425	6a 10		 push	 16			; 00000010H
  00427	58		 pop	 eax
$LL1065@LoadProper:
  00428	8b c8		 mov	 ecx, eax
  0042a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00430	79 05		 jns	 SHORT $LN1231@LoadProper
  00432	49		 dec	 ecx
  00433	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00436	41		 inc	 ecx
$LN1231@LoadProper:
  00437	b2 ed		 mov	 dl, -19			; ffffffedH
  00439	2a d1		 sub	 dl, cl
  0043b	30 54 05 e0	 xor	 BYTE PTR __k$535295[ebp+eax], dl
  0043f	40		 inc	 eax
  00440	83 f8 12	 cmp	 eax, 18			; 00000012H
  00443	7c e3		 jl	 SHORT $LL1065@LoadProper
  00445	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0044b	6a 00		 push	 0
  0044d	8d 45 e0	 lea	 eax, DWORD PTR __k$535295[ebp]
  00450	50		 push	 eax
  00451	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00457	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _value$535407[ebp], eax
  0045d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$535407[ebp]
  00463	50		 push	 eax
  00464	8d 8e e4 13 00
	00		 lea	 ecx, DWORD PTR [esi+5092]
  0046a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 104  : 	m_fUpDownSpeed = rkLoader.LoadFloat_e( "updown_speed", FLOAT10 );

  0046f	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00474	6a 03		 push	 3
  00476	c7 45 e8 98 9c
	8f 85		 mov	 DWORD PTR __k$535429[ebp], -2054185832 ; 858f9c98H
  0047d	c7 45 ec 9a 82
	b4 99		 mov	 DWORD PTR __k$535429[ebp+4], -1716223334 ; 99b4829aH
  00484	c7 45 f0 9d 89
	8e 8e		 mov	 DWORD PTR __k$535429[ebp+8], -1903261283 ; 8e8e899dH
  0048b	8d 4d e8	 lea	 ecx, DWORD PTR __k$535429[ebp]
  0048e	c6 45 f4 00	 mov	 BYTE PTR __k$535429[ebp+12], 0
  00492	5a		 pop	 edx
$LL1178@LoadProper:
  00493	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00499	83 c1 04	 add	 ecx, 4
  0049c	4a		 dec	 edx
  0049d	75 f4		 jne	 SHORT $LL1178@LoadProper
  0049f	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv10044[ebp], eax
  004a5	db 85 d8 fe ff
	ff		 fild	 DWORD PTR tv10044[ebp]
  004ab	85 c0		 test	 eax, eax
  004ad	79 06		 jns	 SHORT $LN1232@LoadProper
  004af	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1232@LoadProper:
  004b5	51		 push	 ecx
  004b6	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004bc	d9 1c 24	 fstp	 DWORD PTR [esp]
  004bf	8d 45 e8	 lea	 eax, DWORD PTR __k$535429[ebp]
  004c2	50		 push	 eax
  004c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004c9	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _value$535541[ebp]
  004cf	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _value$535541[ebp]
  004d5	50		 push	 eax
  004d6	8d 8e 90 13 00
	00		 lea	 ecx, DWORD PTR [esi+5008]
  004dc	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 105  : }

  004e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e4	5f		 pop	 edi
  004e5	5e		 pop	 esi
  004e6	33 cd		 xor	 ecx, ebp
  004e8	5b		 pop	 ebx
  004e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ee	c9		 leave
  004ef	c2 04 00	 ret	 4
?LoadProperty@ioMechanicsFireSkill@@UAEXAAVioINILoader@@@Z ENDP ; ioMechanicsFireSkill::LoadProperty
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z ; ioMechanicsFireSkill::SetChargeState
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@H@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?ReduceNeedGaugeBySkill@ioBaseChar@@QAEMPAVioSkill@@M@Z:PROC ; ioBaseChar::ReduceNeedGaugeBySkill
EXTRN	?GetNeedGauge@ioSkill@@QAEMABVioHashString@@@Z:PROC ; ioSkill::GetNeedGauge
EXTRN	?ChangeSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N@Z:PROC ; ioBaseChar::ChangeSkillWeaponMesh
EXTRN	__imp_?GetUniqueID@ioMovableObject@@QBEKXZ:PROC
EXTRN	?EndEffect@ioBaseChar@@QAEXK_N@Z:PROC		; ioBaseChar::EndEffect
EXTRN	__imp_?SetLoopAni@ioEntityGroup@@QAE_NABVioHashString@@MMMM@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
xdata$x	SEGMENT
__unwindtable$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z$0
__ehfuncinfo$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
xdata$x	ENDS
;	COMDAT ?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_value$535627 = -32817					; size = 1
_value$535648 = -32816					; size = 4
_value$535640 = -32816					; size = 4
_value$535635 = -32816					; size = 4
_dwCurTime$ = -32816					; size = 4
tv396 = -32812						; size = 4
tv391 = -32812						; size = 4
tv384 = -32812						; size = 4
tv382 = -32812						; size = 4
tv380 = -32812						; size = 4
_value$535644 = -32812					; size = 4
_value$535631 = -32812					; size = 4
_kPacket$530727 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
_bFirst$ = 12						; size = 1
?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z PROC ; ioMechanicsFireSkill::SetChargeState, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 28 80 00 00	 mov	 eax, 32808		; 00008028H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 5d 08	 mov	 ebx, DWORD PTR _pChar$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 194  : 	if( !pChar ) return;

  00037	85 db		 test	 ebx, ebx
  00039	0f 84 fc 02 00
	00		 je	 $LN1@SetChargeS

; 195  : 
; 196  : 	ioEntityGroup *pGrp = pChar->GetGroup();

  0003f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 197  : 	if( !pGrp ) return;

  00042	85 ff		 test	 edi, edi
  00044	0f 84 f1 02 00
	00		 je	 $LN1@SetChargeS

; 198  : 
; 199  : 	DWORD dwCurTime = FRAMEGETTIME();

  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00050	8b c8		 mov	 ecx, eax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00058	89 85 d0 7f ff
	ff		 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 200  : 
; 201  : 	pGrp->ClearAllLoopAni( FLOAT100, true );

  0005e	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00063	89 85 d4 7f ff
	ff		 mov	 DWORD PTR tv396[ebp], eax
  00069	db 85 d4 7f ff
	ff		 fild	 DWORD PTR tv396[ebp]
  0006f	6a 01		 push	 1
  00071	85 c0		 test	 eax, eax
  00073	79 06		 jns	 SHORT $LN45@SetChargeS
  00075	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN45@SetChargeS:
  0007b	51		 push	 ecx
  0007c	8b cf		 mov	 ecx, edi
  0007e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 202  : 	pGrp->ClearAllActionAni( FLOAT100, true );

  00087	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0008c	89 85 d4 7f ff
	ff		 mov	 DWORD PTR tv391[ebp], eax
  00092	db 85 d4 7f ff
	ff		 fild	 DWORD PTR tv391[ebp]
  00098	6a 01		 push	 1
  0009a	85 c0		 test	 eax, eax
  0009c	79 06		 jns	 SHORT $LN46@SetChargeS
  0009e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN46@SetChargeS:
  000a4	51		 push	 ecx
  000a5	8b cf		 mov	 ecx, edi
  000a7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 203  : 
; 204  : 	pGrp->SetLoopAni( m_ChargeMotion, FLOAT100, FLOAT1, FLOAT1 );

  000b0	b8 01 00 00 00	 mov	 eax, 1
  000b5	8b c8		 mov	 ecx, eax
  000b7	b8 01 00 00 00	 mov	 eax, 1
  000bc	8b d0		 mov	 edx, eax
  000be	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000c3	0f 57 c0	 xorps	 xmm0, xmm0
  000c6	83 ec 10	 sub	 esp, 16			; 00000010H
  000c9	89 8d d4 7f ff
	ff		 mov	 DWORD PTR tv384[ebp], ecx
  000cf	db 85 d4 7f ff
	ff		 fild	 DWORD PTR tv384[ebp]
  000d5	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000db	85 c9		 test	 ecx, ecx
  000dd	79 06		 jns	 SHORT $LN47@SetChargeS
  000df	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN47@SetChargeS:
  000e5	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  000e9	89 95 d4 7f ff
	ff		 mov	 DWORD PTR tv382[ebp], edx
  000ef	db 85 d4 7f ff
	ff		 fild	 DWORD PTR tv382[ebp]
  000f5	85 d2		 test	 edx, edx
  000f7	79 06		 jns	 SHORT $LN48@SetChargeS
  000f9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN48@SetChargeS:
  000ff	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00103	89 85 d4 7f ff
	ff		 mov	 DWORD PTR tv380[ebp], eax
  00109	db 85 d4 7f ff
	ff		 fild	 DWORD PTR tv380[ebp]
  0010f	85 c0		 test	 eax, eax
  00111	79 06		 jns	 SHORT $LN49@SetChargeS
  00113	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN49@SetChargeS:
  00119	8d 86 a8 11 00
	00		 lea	 eax, DWORD PTR [esi+4520]
  0011f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00122	50		 push	 eax
  00123	8b cf		 mov	 ecx, edi
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NABVioHashString@@MMMM@Z

; 205  : 
; 206  : 	if( m_dwChargeEffect > 0 )

  0012b	8b 86 c8 12 00
	00		 mov	 eax, DWORD PTR [esi+4808]
  00131	85 c0		 test	 eax, eax
  00133	74 11		 je	 SHORT $LN7@SetChargeS

; 207  : 	{
; 208  : 		pChar->EndEffect( m_dwChargeEffect, false );

  00135	6a 00		 push	 0
  00137	50		 push	 eax
  00138	8b cb		 mov	 ecx, ebx
  0013a	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXK_N@Z ; ioBaseChar::EndEffect

; 209  : 		m_dwChargeEffect = 0;

  0013f	83 a6 c8 12 00
	00 00		 and	 DWORD PTR [esi+4808], 0
$LN7@SetChargeS:

; 210  : 	}
; 211  : 
; 212  : 	if( m_dwChargeMaxEffect > 0 )

  00146	8b 86 cc 12 00
	00		 mov	 eax, DWORD PTR [esi+4812]
  0014c	85 c0		 test	 eax, eax
  0014e	74 11		 je	 SHORT $LN6@SetChargeS

; 213  : 	{
; 214  : 		pChar->EndEffect( m_dwChargeMaxEffect, false );

  00150	6a 00		 push	 0
  00152	50		 push	 eax
  00153	8b cb		 mov	 ecx, ebx
  00155	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXK_N@Z ; ioBaseChar::EndEffect

; 215  : 		m_dwChargeMaxEffect = 0;

  0015a	83 a6 cc 12 00
	00 00		 and	 DWORD PTR [esi+4812], 0
$LN6@SetChargeS:

; 216  : 	}
; 217  : 
; 218  : 	if( !m_ChargeEffect.IsEmpty() )

  00161	8d be a8 12 00
	00		 lea	 edi, DWORD PTR [esi+4776]
  00167	8b cf		 mov	 ecx, edi
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0016f	84 c0		 test	 al, al
  00171	75 1f		 jne	 SHORT $LN4@SetChargeS

; 219  : 	{
; 220  : 		ioEffect *pEffect = pChar->AttachEffect( m_ChargeEffect );

  00173	6a 01		 push	 1
  00175	6a 00		 push	 0
  00177	57		 push	 edi
  00178	8b cb		 mov	 ecx, ebx
  0017a	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 221  : 		if( pEffect )

  0017f	85 c0		 test	 eax, eax
  00181	74 0f		 je	 SHORT $LN4@SetChargeS

; 222  : 			m_dwChargeEffect = pEffect->GetUniqueID();

  00183	8d 48 14	 lea	 ecx, DWORD PTR [eax+20]
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetUniqueID@ioMovableObject@@QBEKXZ
  0018c	89 86 c8 12 00
	00		 mov	 DWORD PTR [esi+4808], eax
$LN4@SetChargeS:

; 223  : 	}
; 224  : 
; 225  : 	m_bSetMaxCharge = false;

  00192	8d 85 cf 7f ff
	ff		 lea	 eax, DWORD PTR _value$535627[ebp]
  00198	50		 push	 eax
  00199	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  0019f	c6 85 cf 7f ff
	ff 00		 mov	 BYTE PTR _value$535627[ebp], 0
  001a6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 226  : 
; 227  : 	m_SkillState = SS_CHARGE;
; 228  : 	m_dwChargeMaxTime = dwCurTime + m_dwChargeDuration;

  001ab	8d 85 d4 7f ff
	ff		 lea	 eax, DWORD PTR _value$535631[ebp]
  001b1	50		 push	 eax
  001b2	8d 8e b8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4536]
  001b8	c7 86 e4 10 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4324], 1
  001c2	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  001c7	8b 85 d4 7f ff
	ff		 mov	 eax, DWORD PTR _value$535631[ebp]
  001cd	03 85 d0 7f ff
	ff		 add	 eax, DWORD PTR _dwCurTime$[ebp]
  001d3	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  001d9	89 85 d0 7f ff
	ff		 mov	 DWORD PTR _value$535635[ebp], eax
  001df	8d 85 d0 7f ff
	ff		 lea	 eax, DWORD PTR _value$535635[ebp]
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 229  : 	m_dwFireEnableTime = m_dwChargeMaxTime + m_dwFireEnableDuration;

  001eb	8d 85 d0 7f ff
	ff		 lea	 eax, DWORD PTR _value$535640[ebp]
  001f1	50		 push	 eax
  001f2	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  001f8	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  001fd	8d 85 d4 7f ff
	ff		 lea	 eax, DWORD PTR _value$535644[ebp]
  00203	50		 push	 eax
  00204	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  0020a	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0020f	8b 8d d4 7f ff
	ff		 mov	 ecx, DWORD PTR _value$535644[ebp]
  00215	03 8d d0 7f ff
	ff		 add	 ecx, DWORD PTR _value$535640[ebp]
  0021b	8d 85 d0 7f ff
	ff		 lea	 eax, DWORD PTR _value$535648[ebp]
  00221	89 8d d0 7f ff
	ff		 mov	 DWORD PTR _value$535648[ebp], ecx
  00227	50		 push	 eax
  00228	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  0022e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 230  : 
; 231  : 	// 사용 아이템 처리
; 232  : 	if( !m_bSetHandMesh && m_bUseItemMesh && !m_HandMesh.IsEmpty() )

  00233	80 be 0a 0f 00
	00 00		 cmp	 BYTE PTR [esi+3850], 0
  0023a	75 33		 jne	 SHORT $LN3@SetChargeS
  0023c	80 be 08 0f 00
	00 00		 cmp	 BYTE PTR [esi+3848], 0
  00243	74 2a		 je	 SHORT $LN3@SetChargeS
  00245	8d be f8 0e 00
	00		 lea	 edi, DWORD PTR [esi+3832]
  0024b	8b cf		 mov	 ecx, edi
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00253	84 c0		 test	 al, al
  00255	75 18		 jne	 SHORT $LN3@SetChargeS

; 233  : 	{
; 234  : 		pChar->ChangeSkillWeaponMesh( this, m_HandMesh, m_bVisibleEquipMesh );

  00257	0f b6 86 09 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3849]
  0025e	50		 push	 eax
  0025f	57		 push	 edi
  00260	56		 push	 esi
  00261	8b cb		 mov	 ecx, ebx
  00263	e8 00 00 00 00	 call	 ?ChangeSkillWeaponMesh@ioBaseChar@@QAE_NPAVioSkill@@ABVioHashString@@_N@Z ; ioBaseChar::ChangeSkillWeaponMesh

; 235  : 		m_bSetHandMesh = true;

  00268	c6 86 0a 0f 00
	00 01		 mov	 BYTE PTR [esi+3850], 1
$LN3@SetChargeS:

; 236  : 	}
; 237  : 
; 238  : 	if( !m_bReduceGauge )

  0026f	80 be 50 03 00
	00 00		 cmp	 BYTE PTR [esi+848], 0
  00276	75 23		 jne	 SHORT $LN2@SetChargeS

; 239  : 	{
; 240  : 		pChar->ReduceNeedGaugeBySkill( this, GetNeedGauge(pChar->GetCharName()) );

  00278	8d 83 d4 02 00
	00		 lea	 eax, DWORD PTR [ebx+724]
  0027e	50		 push	 eax
  0027f	8b ce		 mov	 ecx, esi
  00281	e8 00 00 00 00	 call	 ?GetNeedGauge@ioSkill@@QAEMABVioHashString@@@Z ; ioSkill::GetNeedGauge
  00286	51		 push	 ecx
  00287	d9 1c 24	 fstp	 DWORD PTR [esp]
  0028a	56		 push	 esi
  0028b	8b cb		 mov	 ecx, ebx
  0028d	e8 00 00 00 00	 call	 ?ReduceNeedGaugeBySkill@ioBaseChar@@QAEMPAVioSkill@@M@Z ; ioBaseChar::ReduceNeedGaugeBySkill
  00292	dd d8		 fstp	 ST(0)

; 241  : 		m_bReduceGauge = true;

  00294	c6 86 50 03 00
	00 01		 mov	 BYTE PTR [esi+848], 1
$LN2@SetChargeS:

; 242  : 	}
; 243  : 
; 244  : 	if( !bFirst && pChar->IsNeedSendNetwork() )

  0029b	80 7d 0c 00	 cmp	 BYTE PTR _bFirst$[ebp], 0
  0029f	0f 85 96 00 00
	00		 jne	 $LN1@SetChargeS
  002a5	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a7	8b cb		 mov	 ecx, ebx
  002a9	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  002af	84 c0		 test	 al, al
  002b1	0f 84 84 00 00
	00		 je	 $LN1@SetChargeS

; 245  : 	{
; 246  : 		SP2Packet kPacket( CUPK_SKILL_EXTRA_INFO );

  002b7	68 39 41 00 00	 push	 16697			; 00004139H
  002bc	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  002c2	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  002c7	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 247  : 		kPacket << pChar->GetCharName();

  002cb	81 c3 d4 02 00
	00		 add	 ebx, 724		; 000002d4H
  002d1	53		 push	 ebx
  002d2	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  002d8	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 248  : 		kPacket << GetName();

  002dd	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  002e0	50		 push	 eax
  002e1	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  002e7	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 249  : 		kPacket << SST_ACTION;

  002ec	6a 01		 push	 1
  002ee	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  002f4	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 250  : 		kPacket << m_SkillState;

  002f9	ff b6 e4 10 00
	00		 push	 DWORD PTR [esi+4324]
  002ff	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  00305	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 251  : 		kPacket << m_iCurFireCnt;

  0030a	81 c6 18 11 00
	00		 add	 esi, 4376		; 00001118H
  00310	56		 push	 esi
  00311	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  00317	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@H@@@Z ; SP2Packet::operator<<

; 252  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0031c	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$530727[ebp]
  00322	6a 00		 push	 0
  00324	50		 push	 eax
  00325	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 253  : 	}

  0032a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0032e	59		 pop	 ecx
  0032f	59		 pop	 ecx
  00330	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  00336	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@SetChargeS:

; 254  : }

  0033b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0033e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00345	59		 pop	 ecx
  00346	5f		 pop	 edi
  00347	5e		 pop	 esi
  00348	5b		 pop	 ebx
  00349	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0034c	33 cd		 xor	 ecx, ebp
  0034e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00353	c9		 leave
  00354	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530727[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32824]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z ENDP ; ioMechanicsFireSkill::SetChargeState
PUBLIC	__real@3f800000
PUBLIC	_pChar$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator<<
EXTRN	?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z:PROC ; ioBaseChar::SetReservedSliding
EXTRN	__imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z:PROC
EXTRN	?RefreshFireTimeListWithBase@ioBaseChar@@QAEXKHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z:PROC ; ioBaseChar::RefreshFireTimeListWithBase
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
xdata$x	ENDS
;	COMDAT ?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$GSCopy$ = -32876					; size = 4
_dwPreDelay$ = -32872					; size = 4
_pGrp$ = -32868						; size = 4
_iAniID$ = -32864					; size = 4
_fTimeRate$ = -32860					; size = 4
tv2227 = -32856						; size = 4
tv2224 = -32856						; size = 4
tv2222 = -32856						; size = 4
tv1882 = -32856						; size = 4
tv2184 = -32852						; size = 4
tv1955 = -32852						; size = 4
_value$535986 = -32852					; size = 4
tv2240 = -32848						; size = 4
tv2235 = -32848						; size = 4
tv2220 = -32848						; size = 4
tv2218 = -32848						; size = 4
tv2194 = -32848						; size = 4
tv2179 = -32848						; size = 4
tv2167 = -32848						; size = 4
tv2154 = -32848						; size = 4
tv2152 = -32848						; size = 4
$T535863 = -32848					; size = 4
$T535733 = -32848					; size = 4
_value$535713 = -32848					; size = 4
_value$535708 = -32848					; size = 4
$T535700 = -32848					; size = 4
_kPacket$530755 = -32844				; size = 32792
$T535864 = -52						; size = 16
_szEncEventType$535737 = -52				; size = 13
_szEncEventType$535877 = -32				; size = 12
$T535734 = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::AttackSkillFire, COMDAT
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 60 80 00 00	 mov	 eax, 32864		; 00008060H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 45 08	 mov	 eax, DWORD PTR _pChar$[ebp]

; 258  : 	ioEntityGroup *pGrp = pChar->GetGroup();

  00035	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00038	8b f1		 mov	 esi, ecx
  0003a	89 85 94 7f ff
	ff		 mov	 DWORD PTR _pChar$GSCopy$[ebp], eax

; 259  : 	int iAniID = pGrp->GetAnimationIdx( GetAttribute().m_AttackAnimation );

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	89 bd 9c 7f ff
	ff		 mov	 DWORD PTR _pGrp$[ebp], edi
  00048	ff 90 a4 01 00
	00		 call	 DWORD PTR [eax+420]
  0004e	50		 push	 eax
  0004f	8b cf		 mov	 ecx, edi
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00057	89 85 a0 7f ff
	ff		 mov	 DWORD PTR _iAniID$[ebp], eax

; 260  : 	if( iAniID == -1 )	return;

  0005d	83 f8 ff	 cmp	 eax, -1
  00060	0f 84 fd 04 00
	00		 je	 $LN244@AttackSkil

; 261  : 
; 262  : 	DWORD dwCurTime = FRAMEGETTIME();

  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0006c	8b c8		 mov	 ecx, eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00074	8b d8		 mov	 ebx, eax

; 263  : 
; 264  : 	float fTimeRate  = GetAttackTimeRate();

  00076	8b 06		 mov	 eax, DWORD PTR [esi]
  00078	8b ce		 mov	 ecx, esi
  0007a	ff 90 90 01 00
	00		 call	 DWORD PTR [eax+400]
  00080	d9 9d a4 7f ff
	ff		 fstp	 DWORD PTR _fTimeRate$[ebp]

; 265  : 	DWORD dwPreDelay = GetAttribute().m_dwPreDelay;

  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	8b ce		 mov	 ecx, esi
  0008a	ff 90 a4 01 00
	00		 call	 DWORD PTR [eax+420]
  00090	8b 78 48	 mov	 edi, DWORD PTR [eax+72]
  00093	89 bd 98 7f ff
	ff		 mov	 DWORD PTR _dwPreDelay$[ebp], edi

; 266  : 
; 267  : 	pGrp->ClearAllLoopAni( FLOAT100, true );

  00099	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0009e	89 85 b0 7f ff
	ff		 mov	 DWORD PTR tv2240[ebp], eax
  000a4	db 85 b0 7f ff
	ff		 fild	 DWORD PTR tv2240[ebp]
  000aa	6a 01		 push	 1
  000ac	85 c0		 test	 eax, eax
  000ae	79 06		 jns	 SHORT $LN256@AttackSkil
  000b0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN256@AttackSkil:
  000b6	51		 push	 ecx
  000b7	8b 8d 9c 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000bd	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 268  : 	pGrp->ClearAllActionAni( FLOAT100, true );

  000c6	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000cb	89 85 b0 7f ff
	ff		 mov	 DWORD PTR tv2235[ebp], eax
  000d1	db 85 b0 7f ff
	ff		 fild	 DWORD PTR tv2235[ebp]
  000d7	6a 01		 push	 1
  000d9	85 c0		 test	 eax, eax
  000db	79 06		 jns	 SHORT $LN257@AttackSkil
  000dd	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN257@AttackSkil:
  000e3	51		 push	 ecx
  000e4	8b 8d 9c 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000ea	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 269  : 	pGrp->SetActionAni( iAniID, FLOAT100, FLOAT100, FLOAT1, FLOAT1/fTimeRate );

  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	8b c8		 mov	 ecx, eax
  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	8b d0		 mov	 edx, eax
  00101	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00106	89 85 b0 7f ff
	ff		 mov	 DWORD PTR $T535700[ebp], eax
  0010c	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00111	0f 57 c0	 xorps	 xmm0, xmm0
  00114	6a 01		 push	 1
  00116	6a 00		 push	 0
  00118	83 ec 18	 sub	 esp, 24			; 00000018H
  0011b	89 8d a8 7f ff
	ff		 mov	 DWORD PTR tv2227[ebp], ecx
  00121	db 85 a8 7f ff
	ff		 fild	 DWORD PTR tv2227[ebp]
  00127	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0012d	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00133	85 c9		 test	 ecx, ecx
  00135	79 06		 jns	 SHORT $LN258@AttackSkil
  00137	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN258@AttackSkil:
  0013d	d8 b5 a4 7f ff
	ff		 fdiv	 DWORD PTR _fTimeRate$[ebp]
  00143	d9 9d a8 7f ff
	ff		 fstp	 DWORD PTR tv2224[ebp]
  00149	d9 85 a8 7f ff
	ff		 fld	 DWORD PTR tv2224[ebp]
  0014f	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00153	89 95 a8 7f ff
	ff		 mov	 DWORD PTR tv2222[ebp], edx
  00159	db 85 a8 7f ff
	ff		 fild	 DWORD PTR tv2222[ebp]
  0015f	85 d2		 test	 edx, edx
  00161	79 06		 jns	 SHORT $LN259@AttackSkil
  00163	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN259@AttackSkil:
  00169	8b 8d b0 7f ff
	ff		 mov	 ecx, DWORD PTR $T535700[ebp]
  0016f	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00173	db 85 b0 7f ff
	ff		 fild	 DWORD PTR $T535700[ebp]
  00179	85 c9		 test	 ecx, ecx
  0017b	79 06		 jns	 SHORT $LN260@AttackSkil
  0017d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN260@AttackSkil:
  00183	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00187	89 85 b0 7f ff
	ff		 mov	 DWORD PTR tv2218[ebp], eax
  0018d	db 85 b0 7f ff
	ff		 fild	 DWORD PTR tv2218[ebp]
  00193	85 c0		 test	 eax, eax
  00195	79 06		 jns	 SHORT $LN261@AttackSkil
  00197	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN261@AttackSkil:
  0019d	8b 8d 9c 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  001a3	d9 1c 24	 fstp	 DWORD PTR [esp]
  001a6	ff b5 a0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z

; 270  : 
; 271  : 	pChar->RefreshFireTimeListWithBase( m_dwWeaponBaseIndex+m_iCurFireCnt,
; 272  : 										iAniID,
; 273  : 										GetAttribute().m_vWeaponInfoList,
; 274  : 										FTT_SKILL_ATTACK,
; 275  : 										fTimeRate,
; 276  : 										dwPreDelay );

  001b2	8d 85 b0 7f ff
	ff		 lea	 eax, DWORD PTR _value$535708[ebp]
  001b8	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  001be	50		 push	 eax
  001bf	89 8d a8 7f ff
	ff		 mov	 DWORD PTR tv1882[ebp], ecx
  001c5	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  001ca	f3 0f 10 85 a4
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  001d2	8b 06		 mov	 eax, DWORD PTR [esi]
  001d4	6a 00		 push	 0
  001d6	57		 push	 edi
  001d7	51		 push	 ecx
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	6a 04		 push	 4
  001df	8b ce		 mov	 ecx, esi
  001e1	ff 90 a4 01 00
	00		 call	 DWORD PTR [eax+420]
  001e7	8b 8d 94 7f ff
	ff		 mov	 ecx, DWORD PTR _pChar$GSCopy$[ebp]
  001ed	83 c0 28	 add	 eax, 40			; 00000028H
  001f0	50		 push	 eax
  001f1	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  001f4	ff b5 a0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  001fa	03 85 b0 7f ff
	ff		 add	 eax, DWORD PTR _value$535708[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 ?RefreshFireTimeListWithBase@ioBaseChar@@QAEXKHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z ; ioBaseChar::RefreshFireTimeListWithBase

; 277  : 
; 278  : 	m_dwMotionStartTime = m_dwMotionEndTime = dwCurTime;

  00206	8d 85 b0 7f ff
	ff		 lea	 eax, DWORD PTR _value$535713[ebp]
  0020c	50		 push	 eax
  0020d	8d 8e a8 02 00
	00		 lea	 ecx, DWORD PTR [esi+680]
  00213	89 9e d8 02 00
	00		 mov	 DWORD PTR [esi+728], ebx
  00219	89 9d b0 7f ff
	ff		 mov	 DWORD PTR _value$535713[ebp], ebx
  0021f	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 279  : 	m_dwMotionEndTime += pGrp->GetAnimationFullTime( iAniID ) * fTimeRate;

  00224	ff b5 a0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  0022a	8b 8d 9c 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  00236	d8 8d a4 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  0023c	8b 86 d8 02 00
	00		 mov	 eax, DWORD PTR [esi+728]
  00242	db 86 d8 02 00
	00		 fild	 DWORD PTR [esi+728]
  00248	85 c0		 test	 eax, eax
  0024a	79 06		 jns	 SHORT $LN262@AttackSkil
  0024c	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$LN262@AttackSkil:
  00252	de c1		 faddp	 ST(1), ST(0)
  00254	e8 00 00 00 00	 call	 __ftol2
  00259	89 86 d8 02 00
	00		 mov	 DWORD PTR [esi+728], eax

; 280  : 	m_dwMotionEndTime += dwPreDelay + GetAttribute().m_dwEndDelay;

  0025f	8b 06		 mov	 eax, DWORD PTR [esi]
  00261	8b ce		 mov	 ecx, esi
  00263	ff 90 a4 01 00
	00		 call	 DWORD PTR [eax+420]
  00269	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  0026c	03 c7		 add	 eax, edi
  0026e	01 86 d8 02 00
	00		 add	 DWORD PTR [esi+728], eax
  00274	6a 03		 push	 3

; 281  : 
; 282  : 	m_dwFireMotionEndTime = dwCurTime;

  00276	89 9e 24 02 00
	00		 mov	 DWORD PTR [esi+548], ebx

; 283  : 	m_dwFireMotionEndTime += pGrp->GetAnimationEventTime_e( iAniID, "firemotion_e" ) * fTimeRate + dwPreDelay;

  0027c	c7 45 cc 8b 85
	99 8f		 mov	 DWORD PTR _szEncEventType$535737[ebp], -1885764213 ; 8f99858bH
  00283	c7 45 d0 80 83
	9f 83		 mov	 DWORD PTR _szEncEventType$535737[ebp+4], -2086698112 ; 839f8380H
  0028a	c7 45 d4 82 82
	b4 8f		 mov	 DWORD PTR _szEncEventType$535737[ebp+8], -1883995518 ; 8fb48282H
  00291	8d 45 cc	 lea	 eax, DWORD PTR _szEncEventType$535737[ebp]
  00294	c6 45 d8 00	 mov	 BYTE PTR _szEncEventType$535737[ebp+12], 0
  00298	59		 pop	 ecx
$LL128@AttackSkil:
  00299	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0029f	83 c0 04	 add	 eax, 4
  002a2	49		 dec	 ecx
  002a3	75 f4		 jne	 SHORT $LL128@AttackSkil
  002a5	8d 45 cc	 lea	 eax, DWORD PTR _szEncEventType$535737[ebp]
  002a8	50		 push	 eax
  002a9	8d 4d e0	 lea	 ecx, DWORD PTR $T535734[ebp]
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  002b2	8b 8d 9c 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  002b8	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  002bc	8d 45 e0	 lea	 eax, DWORD PTR $T535734[ebp]
  002bf	50		 push	 eax
  002c0	ff b5 a0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  002cc	d9 9d b0 7f ff
	ff		 fstp	 DWORD PTR $T535733[ebp]
  002d2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002d6	8d 4d e0	 lea	 ecx, DWORD PTR $T535734[ebp]
  002d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  002df	db 85 98 7f ff
	ff		 fild	 DWORD PTR _dwPreDelay$[ebp]
  002e5	8b 85 98 7f ff
	ff		 mov	 eax, DWORD PTR _dwPreDelay$[ebp]
  002eb	85 c0		 test	 eax, eax
  002ed	79 06		 jns	 SHORT $LN263@AttackSkil
  002ef	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN263@AttackSkil:
  002f5	8b 86 24 02 00
	00		 mov	 eax, DWORD PTR [esi+548]
  002fb	d9 9d ac 7f ff
	ff		 fstp	 DWORD PTR tv1955[ebp]
  00301	d9 85 b0 7f ff
	ff		 fld	 DWORD PTR $T535733[ebp]
  00307	d8 8d a4 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  0030d	d8 85 ac 7f ff
	ff		 fadd	 DWORD PTR tv1955[ebp]
  00313	db 86 24 02 00
	00		 fild	 DWORD PTR [esi+548]
  00319	85 c0		 test	 eax, eax
  0031b	79 06		 jns	 SHORT $LN264@AttackSkil
  0031d	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$LN264@AttackSkil:
  00323	de c1		 faddp	 ST(1), ST(0)
  00325	e8 00 00 00 00	 call	 __ftol2
  0032a	6a 02		 push	 2
  0032c	89 86 24 02 00
	00		 mov	 DWORD PTR [esi+548], eax

; 284  : 
; 285  : 	m_dwEnableReserveTime = dwCurTime;

  00332	89 9e dc 02 00
	00		 mov	 DWORD PTR [esi+732], ebx

; 286  : 	m_dwEnableReserveTime += pGrp->GetAnimationEventTime_e( iAniID, "key_reserve" ) * fTimeRate + dwPreDelay;

  00338	c7 45 e0 86 89
	92 b5		 mov	 DWORD PTR _szEncEventType$535877[ebp], -1248687738 ; b5928986H
  0033f	c7 45 e4 9f 89
	98 8f		 mov	 DWORD PTR _szEncEventType$535877[ebp+4], -1885828705 ; 8f98899fH
  00346	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$535877[ebp]
  00349	c7 45 e8 9f 9a
	8e 00		 mov	 DWORD PTR _szEncEventType$535877[ebp+8], 9345695 ; 008e9a9fH
  00350	59		 pop	 ecx
$LL235@AttackSkil:
  00351	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00357	83 c0 04	 add	 eax, 4
  0035a	49		 dec	 ecx
  0035b	75 f4		 jne	 SHORT $LL235@AttackSkil
  0035d	6a 08		 push	 8
  0035f	58		 pop	 eax
$LL232@AttackSkil:
  00360	8b c8		 mov	 ecx, eax
  00362	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00368	79 05		 jns	 SHORT $LN265@AttackSkil
  0036a	49		 dec	 ecx
  0036b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0036e	41		 inc	 ecx
$LN265@AttackSkil:
  0036f	b2 ed		 mov	 dl, -19			; ffffffedH
  00371	2a d1		 sub	 dl, cl
  00373	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$535877[ebp+eax], dl
  00377	40		 inc	 eax
  00378	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0037b	7c e3		 jl	 SHORT $LL232@AttackSkil
  0037d	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$535877[ebp]
  00380	50		 push	 eax
  00381	8d 4d cc	 lea	 ecx, DWORD PTR $T535864[ebp]
  00384	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0038a	8b 8d 9c 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00390	8d 45 cc	 lea	 eax, DWORD PTR $T535864[ebp]
  00393	50		 push	 eax
  00394	ff b5 a0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  0039a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  003a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  003a7	d9 9d b0 7f ff
	ff		 fstp	 DWORD PTR $T535863[ebp]
  003ad	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  003b1	8d 4d cc	 lea	 ecx, DWORD PTR $T535864[ebp]
  003b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  003ba	d9 85 b0 7f ff
	ff		 fld	 DWORD PTR $T535863[ebp]
  003c0	d8 8d a4 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  003c6	8b 86 dc 02 00
	00		 mov	 eax, DWORD PTR [esi+732]
  003cc	d8 85 ac 7f ff
	ff		 fadd	 DWORD PTR tv1955[ebp]
  003d2	db 86 dc 02 00
	00		 fild	 DWORD PTR [esi+732]
  003d8	85 c0		 test	 eax, eax
  003da	79 06		 jns	 SHORT $LN266@AttackSkil
  003dc	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$LN266@AttackSkil:
  003e2	de c1		 faddp	 ST(1), ST(0)
  003e4	e8 00 00 00 00	 call	 __ftol2

; 287  : 
; 288  : 	pChar->SetReservedSliding( GetAttribute().m_vForceInfoList, iAniID, fTimeRate, dwPreDelay );

  003e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003f1	6a 01		 push	 1
  003f3	51		 push	 ecx
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	ff b5 98 7f ff
	ff		 push	 DWORD PTR _dwPreDelay$[ebp]
  003ff	f3 0f 10 85 a4
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  00407	51		 push	 ecx
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	ff b5 a0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  00413	89 86 dc 02 00
	00		 mov	 DWORD PTR [esi+732], eax
  00419	8b 06		 mov	 eax, DWORD PTR [esi]
  0041b	8b ce		 mov	 ecx, esi
  0041d	ff 90 a4 01 00
	00		 call	 DWORD PTR [eax+420]
  00423	8b bd 94 7f ff
	ff		 mov	 edi, DWORD PTR _pChar$GSCopy$[ebp]
  00429	83 c0 38	 add	 eax, 56			; 00000038H
  0042c	50		 push	 eax
  0042d	8b cf		 mov	 ecx, edi
  0042f	e8 00 00 00 00	 call	 ?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z ; ioBaseChar::SetReservedSliding

; 289  : 
; 290  : 	m_SkillState = SS_ACTION;
; 291  : 	m_dwActionEndTime = dwCurTime + pGrp->GetAnimationFullTime( iAniID ) * fTimeRate + dwPreDelay;

  00434	ff b5 a0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  0043a	8b 8d 9c 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00440	c7 86 e4 10 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+4324], 2
  0044a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  00450	d8 8d a4 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  00456	89 9d b0 7f ff
	ff		 mov	 DWORD PTR tv2154[ebp], ebx
  0045c	db 85 b0 7f ff
	ff		 fild	 DWORD PTR tv2154[ebp]
  00462	85 db		 test	 ebx, ebx
  00464	79 06		 jns	 SHORT $LN267@AttackSkil
  00466	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN267@AttackSkil:
  0046c	de c1		 faddp	 ST(1), ST(0)
  0046e	51		 push	 ecx
  0046f	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  00475	d8 85 ac 7f ff
	ff		 fadd	 DWORD PTR tv1955[ebp]
  0047b	d9 9d b0 7f ff
	ff		 fstp	 DWORD PTR tv2152[ebp]
  00481	d9 85 b0 7f ff
	ff		 fld	 DWORD PTR tv2152[ebp]
  00487	d9 1c 24	 fstp	 DWORD PTR [esp]
  0048a	e8 00 00 00 00	 call	 ??4?$CEncrypt@K@@QAEKM@Z ; CEncrypt<unsigned long>::operator=

; 292  : 
; 293  : 	if( pChar->IsNeedSendNetwork() )

  0048f	8b 07		 mov	 eax, DWORD PTR [edi]
  00491	8b cf		 mov	 ecx, edi
  00493	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00499	84 c0		 test	 al, al
  0049b	0f 84 98 00 00
	00		 je	 $LN1@AttackSkil

; 294  : 	{
; 295  : 		SP2Packet kPacket( CUPK_SKILL_EXTRA_INFO );

  004a1	68 39 41 00 00	 push	 16697			; 00004139H
  004a6	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  004ac	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 296  : 		kPacket << pChar->GetCharName();

  004b1	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  004b7	50		 push	 eax
  004b8	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  004be	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  004c5	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 297  : 		kPacket << GetName();

  004ca	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  004cd	50		 push	 eax
  004ce	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  004d4	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 298  : 		kPacket << SST_ACTION;

  004d9	6a 01		 push	 1
  004db	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  004e1	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 299  : 		kPacket << m_SkillState;

  004e6	ff b6 e4 10 00
	00		 push	 DWORD PTR [esi+4324]
  004ec	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  004f2	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 300  : 		kPacket << m_iCurFireCnt;

  004f7	ff b5 a8 7f ff
	ff		 push	 DWORD PTR tv1882[ebp]
  004fd	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  00503	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@H@@@Z ; SP2Packet::operator<<

; 301  : 		kPacket << pChar->GetTargetRot();

  00508	81 c7 a4 06 00
	00		 add	 edi, 1700		; 000006a4H
  0050e	57		 push	 edi
  0050f	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  00515	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 302  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0051a	8d 85 b4 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$530755[ebp]
  00520	6a 00		 push	 0
  00522	50		 push	 eax
  00523	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 303  : 	}

  00528	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0052c	59		 pop	 ecx
  0052d	59		 pop	 ecx
  0052e	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  00534	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@AttackSkil:

; 304  : 
; 305  : 	m_iCurFireCnt++;

  00539	8b 8d a8 7f ff
	ff		 mov	 ecx, DWORD PTR tv1882[ebp]
  0053f	8d 85 ac 7f ff
	ff		 lea	 eax, DWORD PTR _value$535986[ebp]
  00545	50		 push	 eax
  00546	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  0054b	8b 8d a8 7f ff
	ff		 mov	 ecx, DWORD PTR tv1882[ebp]
  00551	ff 85 ac 7f ff
	ff		 inc	 DWORD PTR _value$535986[ebp]
  00557	8d 85 ac 7f ff
	ff		 lea	 eax, DWORD PTR _value$535986[ebp]
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool
$LN244@AttackSkil:

; 306  : }

  00563	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00566	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0056d	59		 pop	 ecx
  0056e	5f		 pop	 edi
  0056f	5e		 pop	 esi
  00570	5b		 pop	 ebx
  00571	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00574	33 cd		 xor	 ecx, ebp
  00576	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0057b	c9		 leave
  0057c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z$1:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T535734[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z$2:
  00009	8d 4d cc	 lea	 ecx, DWORD PTR $T535864[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z$0:
  00012	8d 8d b4 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530755[ebp]
  00018	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z:
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 90 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32880]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AttackSkillFire@ioMechanicsFireSkill@@MAEXPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::AttackSkillFire
PUBLIC	__real@bfef5c2900000000
PUBLIC	__real@3fef5c2900000000
PUBLIC	__real@4066800000000000
PUBLIC	__real@4046800000000000
PUBLIC	_pOwner$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessRotate@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::ProcessRotate
EXTRN	?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z:PROC ; ioBaseChar::SetTargetRotToRotate
EXTRN	__imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	_D3DXQuaternionRotationYawPitchRoll@16:PROC
EXTRN	__imp_?ArrangeHead@ioMath@@SAMM@Z:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	__imp_?GetCurFrameGap@ioFrameTimer@@QBEMXZ:PROC
;	COMDAT __real@bfef5c2900000000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@bfef5c2900000000 DQ 0bfef5c2900000000r	; -0.98
CONST	ENDS
;	COMDAT __real@3fef5c2900000000
CONST	SEGMENT
__real@3fef5c2900000000 DQ 03fef5c2900000000r	; 0.98
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@4046800000000000
CONST	SEGMENT
__real@4046800000000000 DQ 04046800000000000r	; 45
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
CONST	ENDS
;	COMDAT ?ProcessRotate@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_qtCurRot$ = -132					; size = 16
_qtRotate$ = -116					; size = 16
_qtNewRot$ = -100					; size = 16
_pOwner$GSCopy$ = -84					; size = 4
_this$GSCopy$ = -80					; size = 4
_fDotValue$ = -80					; size = 4
_value$536030 = -73					; size = 1
tv661 = -72						; size = 4
tv635 = -72						; size = 4
tv618 = -72						; size = 4
_value$536034 = -72					; size = 4
_fGapAngle$ = -72					; size = 4
_fYawR$ = -72						; size = 4
tv684 = -68						; size = 4
tv682 = -68						; size = 4
tv678 = -68						; size = 4
_value$536026 = -68					; size = 4
_fRotateAngle$ = -68					; size = 4
_fFrameGap$ = -68					; size = 4
_vAxis$ = -64						; size = 12
_vNewDir$ = -52						; size = 12
_vTargetDir$ = -40					; size = 12
_vCurMoveDir$ = -28					; size = 12
_v$536082 = -16						; size = 12
$T530846 = -16						; size = 12
$T530840 = -16						; size = 12
$T530828 = -16						; size = 12
$T530817 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?ProcessRotate@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::ProcessRotate, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 485  : 
; 486  : 	D3DXVECTOR3 vNewDir = qtNewRot * vCurMoveDir;

  0001a	89 7d b0	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0001d	89 75 ac	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], esi
  00020	85 f6		 test	 esi, esi
  00022	0f 84 bf 03 00
	00		 je	 $LN10@ProcessRot

; 429  : 	if( !pOwner )
; 430  : 		return;
; 431  : 
; 432  : 	if( m_dwRotateTime == 0 )

  00028	53		 push	 ebx
  00029	8d 45 bc	 lea	 eax, DWORD PTR _value$536026[ebp]
  0002c	50		 push	 eax
  0002d	8d 8f e4 13 00
	00		 lea	 ecx, DWORD PTR [edi+5092]
  00033	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00038	83 7d bc 00	 cmp	 DWORD PTR _value$536026[ebp], 0
  0003c	0f 84 a4 03 00
	00		 je	 $LN58@ProcessRot

; 433  : 		return;
; 434  : 
; 435  : 	if( m_CurDirKey == ioUserKeyInput::DKI_NONE )

  00042	83 bf 18 14 00
	00 00		 cmp	 DWORD PTR [edi+5144], 0
  00049	0f 84 97 03 00
	00		 je	 $LN58@ProcessRot

; 436  : 		return;
; 437  : 
; 438  : 	if( m_bTargetRot )

  0004f	8d 45 b7	 lea	 eax, DWORD PTR _value$536030[ebp]
  00052	50		 push	 eax
  00053	8d 8f 00 13 00
	00		 lea	 ecx, DWORD PTR [edi+4864]
  00059	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  0005e	80 7d b7 00	 cmp	 BYTE PTR _value$536030[ebp], 0
  00062	0f 85 7e 03 00
	00		 jne	 $LN58@ProcessRot

; 439  : 		return;
; 440  : 
; 441  : 	float fFrameGap = g_FrameTimer.GetCurFrameGap();

  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0006e	8b c8		 mov	 ecx, eax
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCurFrameGap@ioFrameTimer@@QBEMXZ
  00076	d9 5d bc	 fstp	 DWORD PTR _fFrameGap$[ebp]

; 442  : 	float fRate = fFrameGap / m_dwRotateTime;

  00079	8d 45 b8	 lea	 eax, DWORD PTR _value$536034[ebp]
  0007c	50		 push	 eax
  0007d	8d 8f e4 13 00
	00		 lea	 ecx, DWORD PTR [edi+5092]
  00083	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 443  : 	float fRotateAngle = FLOAT360 * fRate;

  00088	b8 68 01 00 00	 mov	 eax, 360		; 00000168H
  0008d	d9 45 bc	 fld	 DWORD PTR _fFrameGap$[ebp]
  00090	8b 4d b8	 mov	 ecx, DWORD PTR _value$536034[ebp]
  00093	db 45 b8	 fild	 DWORD PTR _value$536034[ebp]
  00096	85 c9		 test	 ecx, ecx
  00098	79 06		 jns	 SHORT $LN59@ProcessRot
  0009a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN59@ProcessRot:

; 442  : 	float fRate = fFrameGap / m_dwRotateTime;

  000a0	de f9		 fdivp	 ST(1), ST(0)

; 443  : 	float fRotateAngle = FLOAT360 * fRate;

  000a2	d9 5d bc	 fstp	 DWORD PTR tv682[ebp]
  000a5	d9 45 bc	 fld	 DWORD PTR tv682[ebp]
  000a8	89 45 bc	 mov	 DWORD PTR tv678[ebp], eax
  000ab	db 45 bc	 fild	 DWORD PTR tv678[ebp]
  000ae	85 c0		 test	 eax, eax
  000b0	79 06		 jns	 SHORT $LN60@ProcessRot
  000b2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN60@ProcessRot:

; 444  : 
; 445  : 	D3DXQUATERNION qtCurRot = pOwner->GetTargetRot();

  000b8	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  000be	de c9		 fmulp	 ST(1), ST(0)
  000c0	8d bd 7c ff ff
	ff		 lea	 edi, DWORD PTR _qtCurRot$[ebp]
  000c6	a5		 movsd
  000c7	d9 5d bc	 fstp	 DWORD PTR _fRotateAngle$[ebp]
  000ca	a5		 movsd
  000cb	a5		 movsd
  000cc	a5		 movsd

; 446  : 	D3DXVECTOR3 vCurMoveDir = qtCurRot * D3DXVECTOR3(0.0f, 0.0f, -FLOAT1);

  000cd	b8 01 00 00 00	 mov	 eax, 1
  000d2	0f 57 c0	 xorps	 xmm0, xmm0
  000d5	89 45 b8	 mov	 DWORD PTR tv661[ebp], eax
  000d8	db 45 b8	 fild	 DWORD PTR tv661[ebp]
  000db	f3 0f 11 45 f0	 movss	 DWORD PTR $T530817[ebp], xmm0
  000e0	f3 0f 11 45 f4	 movss	 DWORD PTR $T530817[ebp+4], xmm0
  000e5	85 c0		 test	 eax, eax
  000e7	79 06		 jns	 SHORT $LN61@ProcessRot
  000e9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN61@ProcessRot:
  000ef	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000f5	d9 e0		 fchs
  000f7	8d 45 f0	 lea	 eax, DWORD PTR $T530817[ebp]
  000fa	d9 5d f8	 fstp	 DWORD PTR $T530817[ebp+8]
  000fd	50		 push	 eax
  000fe	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _qtCurRot$[ebp]
  00104	50		 push	 eax
  00105	8d 45 e4	 lea	 eax, DWORD PTR _vCurMoveDir$[ebp]
  00108	50		 push	 eax
  00109	ff d3		 call	 ebx
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 447  : 	D3DXVec3Normalize( &vCurMoveDir, &vCurMoveDir );

  0010e	8d 45 e4	 lea	 eax, DWORD PTR _vCurMoveDir$[ebp]
  00111	50		 push	 eax
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 448  : 
; 449  : 	// 목표에 도달체크 및 처리
; 450  : 	float fYawD = 180.0f + 45.0f * ( m_CurDirKey - ioUserKeyInput::DKI_UP );

  00118	8b 45 b0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0011b	8b 80 18 14 00
	00		 mov	 eax, DWORD PTR [eax+5144]
  00121	0f 57 c0	 xorps	 xmm0, xmm0
  00124	48		 dec	 eax
  00125	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00129	0f 5a c0	 cvtps2pd xmm0, xmm0
  0012c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4046800000000000
  00134	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4066800000000000

; 451  : 	fYawD = ioMath::ArrangeHead( fYawD );

  0013c	51		 push	 ecx
  0013d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z

; 452  : 
; 453  : 	float fYawR = DEGtoRAD( fYawD );

  0014c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a

; 454  : 	D3DXQUATERNION qtRotate;
; 455  : 	D3DXQuaternionRotationYawPitchRoll( &qtRotate, fYawR, 0.0f, 0.0f );

  00152	0f 57 c0	 xorps	 xmm0, xmm0
  00155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015a	51		 push	 ecx
  0015b	d9 5d b8	 fstp	 DWORD PTR _fYawR$[ebp]
  0015e	51		 push	 ecx
  0015f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00165	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _fYawR$[ebp]
  0016a	8d 45 8c	 lea	 eax, DWORD PTR _qtRotate$[ebp]
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16

; 456  : 
; 457  : 	D3DXVECTOR3 vTargetDir = qtRotate * D3DXVECTOR3(0.0f, 0.0f, -FLOAT1);

  00178	b8 01 00 00 00	 mov	 eax, 1
  0017d	0f 57 c0	 xorps	 xmm0, xmm0
  00180	89 45 b8	 mov	 DWORD PTR tv635[ebp], eax
  00183	db 45 b8	 fild	 DWORD PTR tv635[ebp]
  00186	f3 0f 11 45 f0	 movss	 DWORD PTR $T530828[ebp], xmm0
  0018b	f3 0f 11 45 f4	 movss	 DWORD PTR $T530828[ebp+4], xmm0
  00190	85 c0		 test	 eax, eax
  00192	79 06		 jns	 SHORT $LN62@ProcessRot
  00194	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN62@ProcessRot:
  0019a	8d 45 f0	 lea	 eax, DWORD PTR $T530828[ebp]
  0019d	d9 e0		 fchs
  0019f	50		 push	 eax
  001a0	d9 5d f8	 fstp	 DWORD PTR $T530828[ebp+8]
  001a3	8d 45 8c	 lea	 eax, DWORD PTR _qtRotate$[ebp]
  001a6	50		 push	 eax
  001a7	8d 45 d8	 lea	 eax, DWORD PTR _vTargetDir$[ebp]
  001aa	50		 push	 eax
  001ab	ff d3		 call	 ebx
  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 458  : 	D3DXVec3Normalize( &vTargetDir, &vTargetDir );

  001b0	8d 45 d8	 lea	 eax, DWORD PTR _vTargetDir$[ebp]
  001b3	50		 push	 eax
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 459  : 
; 460  : 	float fDotValue = D3DXVec3Dot( &vCurMoveDir, &vTargetDir );

  001ba	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vCurMoveDir$[ebp+4]
  001bf	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _vTargetDir$[ebp+4]
  001c4	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _vCurMoveDir$[ebp]
  001c9	0f 5a c9	 cvtps2pd xmm1, xmm1
  001cc	0f 5a c0	 cvtps2pd xmm0, xmm0
  001cf	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001d3	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _vTargetDir$[ebp]
  001d8	0f 5a c9	 cvtps2pd xmm1, xmm1
  001db	0f 5a d2	 cvtps2pd xmm2, xmm2
  001de	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001e2	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _vTargetDir$[ebp+8]
  001e7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001eb	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vCurMoveDir$[ebp+8]
  001f0	0f 5a c9	 cvtps2pd xmm1, xmm1
  001f3	0f 5a d2	 cvtps2pd xmm2, xmm2
  001f6	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001fa	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001fe	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00202	f3 0f 11 45 b0	 movss	 DWORD PTR _fDotValue$[ebp], xmm0

; 461  : 	float fGapAngle = RADtoDEG( acosf(fDotValue) );

  00207	d9 45 b0	 fld	 DWORD PTR _fDotValue$[ebp]
  0020a	e8 00 00 00 00	 call	 __CIacos
  0020f	d9 5d b8	 fstp	 DWORD PTR tv618[ebp]
  00212	d9 45 b8	 fld	 DWORD PTR tv618[ebp]
  00215	51		 push	 ecx
  00216	d9 1c 24	 fstp	 DWORD PTR [esp]
  00219	e8 00 00 00 00	 call	 ??$RADtoDEG@M@@YAMM@Z	; RADtoDEG<float>

; 462  : 
; 463  : 	if( fDotValue >= 0.98f )

  0021e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _fDotValue$[ebp]
  00223	d9 5d b8	 fstp	 DWORD PTR _fGapAngle$[ebp]
  00226	0f 5a c0	 cvtps2pd xmm0, xmm0
  00229	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fef5c2900000000
  00231	59		 pop	 ecx
  00232	72 08		 jb	 SHORT $LN5@ProcessRot

; 464  : 	{
; 465  : 		pOwner->SetTargetRotToRotate( qtRotate, true );

  00234	8d 45 8c	 lea	 eax, DWORD PTR _qtRotate$[ebp]

; 466  : 		return;

  00237	e9 9d 01 00 00	 jmp	 $LN63@ProcessRot
$LN5@ProcessRot:

; 467  : 	}
; 468  : 
; 469  : 	D3DXVECTOR3 vAxis;
; 470  : 	if( fDotValue <= -0.98f )

  0023c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _fDotValue$[ebp]
  00241	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfef5c2900000000
  00249	0f 5a c0	 cvtps2pd xmm0, xmm0
  0024c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00250	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  00258	72 11		 jb	 SHORT $LN4@ProcessRot

; 471  : 	{
; 472  : 		vAxis = ioMath::UNIT_Y;

  0025a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  00260	8d 7d c0	 lea	 edi, DWORD PTR _vAxis$[ebp]
  00263	a5		 movsd
  00264	a5		 movsd
  00265	a5		 movsd

; 473  : 	}
; 474  : 	else

  00266	e9 cd 00 00 00	 jmp	 $LN3@ProcessRot
$LN4@ProcessRot:

; 475  : 	{
; 476  : 		D3DXVec3Cross( &vAxis, &vTargetDir, &vCurMoveDir );

  0026b	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _vCurMoveDir$[ebp+8]
  00270	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _vTargetDir$[ebp+4]
  00275	f3 0f 10 5d e0	 movss	 xmm3, DWORD PTR _vTargetDir$[ebp+8]
  0027a	f3 0f 10 65 d8	 movss	 xmm4, DWORD PTR _vTargetDir$[ebp]
  0027f	f3 0f 10 6d e4	 movss	 xmm5, DWORD PTR _vCurMoveDir$[ebp]
  00284	0f 5a d2	 cvtps2pd xmm2, xmm2
  00287	0f 5a db	 cvtps2pd xmm3, xmm3
  0028a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0028d	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00291	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vCurMoveDir$[ebp+4]
  00296	0f 5a d2	 cvtps2pd xmm2, xmm2
  00299	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  0029d	f3 0f 10 5d e4	 movss	 xmm3, DWORD PTR _vCurMoveDir$[ebp]
  002a2	f2 0f 5c ca	 subsd	 xmm1, xmm2
  002a6	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _vTargetDir$[ebp+8]
  002ab	0f 5a db	 cvtps2pd xmm3, xmm3
  002ae	0f 5a d2	 cvtps2pd xmm2, xmm2
  002b1	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  002b5	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _vCurMoveDir$[ebp+8]
  002ba	0f 5a db	 cvtps2pd xmm3, xmm3
  002bd	0f 5a e4	 cvtps2pd xmm4, xmm4
  002c0	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  002c4	f3 0f 10 65 d8	 movss	 xmm4, DWORD PTR _vTargetDir$[ebp]
  002c9	f2 0f 5c d3	 subsd	 xmm2, xmm3
  002cd	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _vCurMoveDir$[ebp+4]
  002d2	0f 5a db	 cvtps2pd xmm3, xmm3
  002d5	0f 5a e4	 cvtps2pd xmm4, xmm4
  002d8	f2 0f 59 dc	 mulsd	 xmm3, xmm4
  002dc	f3 0f 10 65 dc	 movss	 xmm4, DWORD PTR _vTargetDir$[ebp+4]
  002e1	0f 5a e4	 cvtps2pd xmm4, xmm4
  002e4	0f 5a ed	 cvtps2pd xmm5, xmm5
  002e7	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  002eb	f2 0f 5c dc	 subsd	 xmm3, xmm4
  002ef	f2 0f 5a c9	 cvtsd2ss xmm1, xmm1
  002f3	f3 0f 11 4d f0	 movss	 DWORD PTR _v$536082[ebp], xmm1
  002f8	f2 0f 5a d2	 cvtsd2ss xmm2, xmm2
  002fc	f3 0f 11 55 f4	 movss	 DWORD PTR _v$536082[ebp+4], xmm2
  00301	f2 0f 5a db	 cvtsd2ss xmm3, xmm3
  00305	f3 0f 11 5d f8	 movss	 DWORD PTR _v$536082[ebp+8], xmm3
  0030a	8d 75 f0	 lea	 esi, DWORD PTR _v$536082[ebp]
  0030d	8d 7d c0	 lea	 edi, DWORD PTR _vAxis$[ebp]
  00310	a5		 movsd
  00311	a5		 movsd

; 477  : 		D3DXVec3Normalize( &vAxis, &-vAxis );

  00312	8d 45 f0	 lea	 eax, DWORD PTR $T530840[ebp]
  00315	50		 push	 eax
  00316	a5		 movsd
  00317	8d 45 c0	 lea	 eax, DWORD PTR _vAxis$[ebp]
  0031a	0f 57 c8	 xorps	 xmm1, xmm0
  0031d	0f 57 d0	 xorps	 xmm2, xmm0
  00320	0f 57 d8	 xorps	 xmm3, xmm0
  00323	50		 push	 eax
  00324	f3 0f 11 4d f0	 movss	 DWORD PTR $T530840[ebp], xmm1
  00329	f3 0f 11 55 f4	 movss	 DWORD PTR $T530840[ebp+4], xmm2
  0032e	f3 0f 11 5d f8	 movss	 DWORD PTR $T530840[ebp+8], xmm3
  00333	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
$LN3@ProcessRot:

; 478  : 	}
; 479  : 
; 480  : 	D3DXQUATERNION qtNewRot;
; 481  : 	if( fGapAngle < fRotateAngle )

  00338	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _fGapAngle$[ebp]
  0033d	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _fRotateAngle$[ebp]
  00342	0f 5a c0	 cvtps2pd xmm0, xmm0
  00345	0f 5a c9	 cvtps2pd xmm1, xmm1
  00348	66 0f 2f c8	 comisd	 xmm1, xmm0

; 482  : 		D3DXQuaternionRotationAxis( &qtNewRot, &vAxis, DEGtoRAD(fGapAngle) );

  0034c	51		 push	 ecx
  0034d	8d 45 c0	 lea	 eax, DWORD PTR _vAxis$[ebp]
  00350	76 07		 jbe	 SHORT $LN2@ProcessRot
  00352	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _fGapAngle$[ebp]

; 483  : 	else

  00357	eb 05		 jmp	 SHORT $LN64@ProcessRot
$LN2@ProcessRot:

; 484  : 		D3DXQuaternionRotationAxis( &qtNewRot, &vAxis, DEGtoRAD(fRotateAngle) );

  00359	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _fRotateAngle$[ebp]
$LN64@ProcessRot:
  0035e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00361	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  00369	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0036d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00372	50		 push	 eax
  00373	8d 45 9c	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  00376	50		 push	 eax
  00377	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 485  : 
; 486  : 	D3DXVECTOR3 vNewDir = qtNewRot * vCurMoveDir;

  0037c	8d 45 e4	 lea	 eax, DWORD PTR _vCurMoveDir$[ebp]
  0037f	50		 push	 eax
  00380	8d 45 9c	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  00383	50		 push	 eax
  00384	8d 45 cc	 lea	 eax, DWORD PTR _vNewDir$[ebp]
  00387	50		 push	 eax
  00388	ff d3		 call	 ebx
  0038a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 487  : 	D3DXVec3Normalize( &vNewDir, &vNewDir );

  0038d	8d 45 cc	 lea	 eax, DWORD PTR _vNewDir$[ebp]
  00390	50		 push	 eax
  00391	50		 push	 eax
  00392	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 488  : 
; 489  : 	ioMath::CalcDirectionQuaternion( qtNewRot, -vNewDir );

  00397	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0039f	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _vNewDir$[ebp]
  003a4	0f 57 c8	 xorps	 xmm1, xmm0
  003a7	f3 0f 11 4d f0	 movss	 DWORD PTR $T530846[ebp], xmm1
  003ac	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _vNewDir$[ebp+4]
  003b1	0f 57 c8	 xorps	 xmm1, xmm0
  003b4	8d 45 f0	 lea	 eax, DWORD PTR $T530846[ebp]
  003b7	50		 push	 eax
  003b8	f3 0f 11 4d f4	 movss	 DWORD PTR $T530846[ebp+4], xmm1
  003bd	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _vNewDir$[ebp+8]
  003c2	8d 45 9c	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
  003c5	0f 57 c8	 xorps	 xmm1, xmm0
  003c8	50		 push	 eax
  003c9	f3 0f 11 4d f8	 movss	 DWORD PTR $T530846[ebp+8], xmm1
  003ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z
  003d4	59		 pop	 ecx
  003d5	59		 pop	 ecx

; 490  : 	pOwner->SetTargetRotToRotate( qtNewRot, true );

  003d6	8d 45 9c	 lea	 eax, DWORD PTR _qtNewRot$[ebp]
$LN63@ProcessRot:
  003d9	8b 4d ac	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  003dc	6a 00		 push	 0
  003de	6a 01		 push	 1
  003e0	50		 push	 eax
  003e1	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate
$LN58@ProcessRot:
  003e6	5b		 pop	 ebx
$LN10@ProcessRot:

; 491  : }

  003e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ea	5f		 pop	 edi
  003eb	33 cd		 xor	 ecx, ebp
  003ed	5e		 pop	 esi
  003ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003f3	c9		 leave
  003f4	c2 04 00	 ret	 4
?ProcessRotate@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::ProcessRotate
_TEXT	ENDS
PUBLIC	?ApplyActionState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioMechanicsFireSkill::ApplyActionState
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyActionState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_qtRot$530883 = -20					; size = 16
_iState$ = -4						; size = 4
_iCurFireCnt$ = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$536144 = 12					; size = 4
_value$536136 = 12					; size = 4
_rkPacket$ = 12						; size = 4
?ApplyActionState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@AAVSP2Packet@@@Z PROC ; ioMechanicsFireSkill::ApplyActionState, COMDAT
; _this$ = ecx

; 539  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 540  : 	if( !pOwner ) return;

  00008	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	85 ff		 test	 edi, edi
  0000f	74 7f		 je	 SHORT $LN4@ApplyActio

; 541  : 
; 542  : 	int iState, iCurFireCnt;
; 543  : 	rkPacket >> iState;

  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00014	8d 45 fc	 lea	 eax, DWORD PTR _iState$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 544  : 	rkPacket >> iCurFireCnt;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00020	8d 45 08	 lea	 eax, DWORD PTR _iCurFireCnt$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 545  : 
; 546  : 	switch( iState )

  00029	8b 45 fc	 mov	 eax, DWORD PTR _iState$[ebp]
  0002c	48		 dec	 eax
  0002d	74 42		 je	 SHORT $LN3@ApplyActio
  0002f	48		 dec	 eax
  00030	75 5e		 jne	 SHORT $LN4@ApplyActio

; 551  : 		break;
; 552  : 	case SS_ACTION:
; 553  : 		{
; 554  : 			D3DXQUATERNION qtRot;
; 555  : 			rkPacket >> qtRot;

  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00035	8d 45 ec	 lea	 eax, DWORD PTR _qtRot$530883[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 556  : 
; 557  : 			if( m_iCurFireCnt == iCurFireCnt )

  0003e	8d 45 0c	 lea	 eax, DWORD PTR _value$536144[ebp]
  00041	50		 push	 eax
  00042	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00048	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _value$536144[ebp]
  00050	3b 45 08	 cmp	 eax, DWORD PTR _iCurFireCnt$[ebp]
  00053	75 3b		 jne	 SHORT $LN4@ApplyActio

; 558  : 			{
; 559  : 				pOwner->SetTargetRotToRotate( qtRot, true );

  00055	6a 00		 push	 0
  00057	6a 01		 push	 1
  00059	8d 45 ec	 lea	 eax, DWORD PTR _qtRot$530883[ebp]
  0005c	50		 push	 eax
  0005d	8b cf		 mov	 ecx, edi
  0005f	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 560  : 
; 561  : 				AttackSkillFire( pOwner );

  00064	8b 06		 mov	 eax, DWORD PTR [esi]
  00066	57		 push	 edi
  00067	8b ce		 mov	 ecx, esi
  00069	ff 90 8c 01 00
	00		 call	 DWORD PTR [eax+396]

; 562  : 			}
; 563  : 		}
; 564  : 		break;

  0006f	eb 1f		 jmp	 SHORT $LN4@ApplyActio
$LN3@ApplyActio:

; 547  : 	{
; 548  : 	case SS_CHARGE:
; 549  : 		m_iCurFireCnt = iCurFireCnt;

  00071	8b 45 08	 mov	 eax, DWORD PTR _iCurFireCnt$[ebp]
  00074	89 45 0c	 mov	 DWORD PTR _value$536136[ebp], eax
  00077	8d 45 0c	 lea	 eax, DWORD PTR _value$536136[ebp]
  0007a	50		 push	 eax
  0007b	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00081	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 550  : 		SetChargeState( pOwner, false );

  00086	6a 00		 push	 0
  00088	57		 push	 edi
  00089	8b ce		 mov	 ecx, esi
  0008b	e8 00 00 00 00	 call	 ?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z ; ioMechanicsFireSkill::SetChargeState
$LN4@ApplyActio:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi

; 565  : 	}
; 566  : }

  00092	c9		 leave
  00093	c2 08 00	 ret	 8
?ApplyActionState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@AAVSP2Packet@@@Z ENDP ; ioMechanicsFireSkill::ApplyActionState
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessMove@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::ProcessMove
EXTRN	?CheckAxisLimit@ioPlayStage@@QAE_NPAUD3DXVECTOR3@@@Z:PROC ; ioPlayStage::CheckAxisLimit
EXTRN	?CheckFlyMapLimit@ioPlayStage@@QAEXPAUD3DXVECTOR3@@@Z:PROC ; ioPlayStage::CheckFlyMapLimit
EXTRN	?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z:PROC ; ioPlayStage::GetMapHeight
EXTRN	?GetMidHeightByRate@ioGameEntity@@QBEMM@Z:PROC	; ioGameEntity::GetMidHeightByRate
EXTRN	__imp_?GetSecPerFrame@ioFrameTimer@@QBEMXZ:PROC
;	COMDAT __real@0000000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
CONST	ENDS
;	COMDAT ?ProcessMove@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_fCurHeightAmt$530939 = -40				; size = 4
_fTimePerSec$ = -36					; size = 4
tv294 = -32						; size = 4
_fMapHeight$ = -32					; size = 4
_pStage$ = -28						; size = 4
_value$536167 = -24					; size = 4
_this$GSCopy$ = -24					; size = 4
_fCurUpDownSpeed$530940 = -24				; size = 4
_value$536176 = -17					; size = 1
_value$536164 = -17					; size = 1
_value$536160 = -17					; size = 1
_value$536172 = -17					; size = 1
_vCurPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?ProcessMove@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::ProcessMove, COMDAT
; _this$ = ecx

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00014	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 672  : 	if( !pOwner )

  00017	85 db		 test	 ebx, ebx
  00019	0f 84 9c 01 00
	00		 je	 $LN8@ProcessMov

; 673  : 		return;
; 674  : 
; 675  : 	ioPlayStage *pStage = pOwner->GetCreator();

  0001f	8b 83 44 03 00
	00		 mov	 eax, DWORD PTR [ebx+836]
  00025	89 45 e4	 mov	 DWORD PTR _pStage$[ebp], eax

; 676  : 	if( !pStage )

  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8b 01 00
	00		 je	 $LN8@ProcessMov

; 677  : 		return;
; 678  : 
; 679  : 	float fTimePerSec = g_FrameTimer.GetSecPerFrame();

  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00038	8b c8		 mov	 ecx, eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSecPerFrame@ioFrameTimer@@QBEMXZ
  00040	d9 5d dc	 fstp	 DWORD PTR _fTimePerSec$[ebp]

; 680  : 
; 681  : 	D3DXVECTOR3 vCurPos = pOwner->GetWorldPosition();

  00043	8b 03		 mov	 eax, DWORD PTR [ebx]
  00045	8b cb		 mov	 ecx, ebx
  00047	ff 50 70	 call	 DWORD PTR [eax+112]
  0004a	8b f0		 mov	 esi, eax
  0004c	8d 7d f0	 lea	 edi, DWORD PTR _vCurPos$[ebp]
  0004f	a5		 movsd
  00050	a5		 movsd
  00051	a5		 movsd

; 682  : 	float fMapHeight = pStage->GetMapHeight( vCurPos.x, vCurPos.z, pOwner, false, pOwner->GetMidHeightByRate(FLOAT1) );

  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	89 45 e0	 mov	 DWORD PTR tv294[ebp], eax
  0005a	6a 00		 push	 0
  0005c	db 45 e0	 fild	 DWORD PTR tv294[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	79 06		 jns	 SHORT $LN28@ProcessMov
  00063	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@ProcessMov:
  00069	51		 push	 ecx
  0006a	8b cb		 mov	 ecx, ebx
  0006c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0006f	e8 00 00 00 00	 call	 ?GetMidHeightByRate@ioGameEntity@@QBEMM@Z ; ioGameEntity::GetMidHeightByRate
  00074	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vCurPos$[ebp+8]
  00079	51		 push	 ecx
  0007a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007d	6a 00		 push	 0
  0007f	53		 push	 ebx
  00080	51		 push	 ecx
  00081	51		 push	 ecx
  00082	8b 4d e4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00085	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vCurPos$[ebp]
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight
  0009a	d9 5d e0	 fstp	 DWORD PTR _fMapHeight$[ebp]

; 683  : 
; 684  : 	// UpDown Move
; 685  : 	if( m_bSetUpKey || m_bSetDownKey )

  0009d	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000a0	8d 45 ef	 lea	 eax, DWORD PTR _value$536160[ebp]
  000a3	50		 push	 eax
  000a4	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  000aa	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  000af	80 7d ef 00	 cmp	 BYTE PTR _value$536160[ebp], 0
  000b3	75 19		 jne	 SHORT $LN4@ProcessMov
  000b5	8d 45 ef	 lea	 eax, DWORD PTR _value$536164[ebp]
  000b8	50		 push	 eax
  000b9	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  000bf	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  000c4	80 7d ef 00	 cmp	 BYTE PTR _value$536164[ebp], 0
  000c8	0f 84 ad 00 00
	00		 je	 $LN26@ProcessMov
$LN4@ProcessMov:

; 686  : 	{
; 687  : 		float fCurHeightAmt = 0.0f;

  000ce	0f 57 c0	 xorps	 xmm0, xmm0

; 688  : 		float fCurUpDownSpeed = m_fUpDownSpeed * fTimePerSec;

  000d1	8d 45 e8	 lea	 eax, DWORD PTR _value$536167[ebp]
  000d4	50		 push	 eax
  000d5	8d 8e 90 13 00
	00		 lea	 ecx, DWORD PTR [esi+5008]
  000db	f3 0f 11 45 d8	 movss	 DWORD PTR _fCurHeightAmt$530939[ebp], xmm0
  000e0	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000e5	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _value$536167[ebp]
  000ea	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _fTimePerSec$[ebp]
  000ef	0f 5a c0	 cvtps2pd xmm0, xmm0
  000f2	0f 5a c9	 cvtps2pd xmm1, xmm1

; 689  : 
; 690  : 		if( m_bSetUpKey )

  000f5	8d 45 ef	 lea	 eax, DWORD PTR _value$536172[ebp]
  000f8	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000fc	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00100	50		 push	 eax
  00101	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  00107	f3 0f 11 45 e8	 movss	 DWORD PTR _fCurUpDownSpeed$530940[ebp], xmm0
  0010c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00111	80 7d ef 00	 cmp	 BYTE PTR _value$536172[ebp], 0
  00115	74 16		 je	 SHORT $LN3@ProcessMov

; 691  : 			fCurHeightAmt += fCurUpDownSpeed;

  00117	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _fCurUpDownSpeed$530940[ebp]
  0011c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0011f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  00127	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012b	eb 32		 jmp	 SHORT $LN1@ProcessMov
$LN3@ProcessMov:

; 692  : 		else if( m_bSetDownKey )

  0012d	8d 45 ef	 lea	 eax, DWORD PTR _value$536176[ebp]
  00130	50		 push	 eax
  00131	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  00137	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  0013c	80 7d ef 00	 cmp	 BYTE PTR _value$536176[ebp], 0
  00140	74 18		 je	 SHORT $LN27@ProcessMov

; 693  : 			fCurHeightAmt -= fCurUpDownSpeed;

  00142	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _fCurUpDownSpeed$530940[ebp]
  00147	0f 57 c9	 xorps	 xmm1, xmm1
  0014a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0014d	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00151	0f 57 c0	 xorps	 xmm0, xmm0
  00154	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00158	eb 05		 jmp	 SHORT $LN1@ProcessMov
$LN27@ProcessMov:
  0015a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _fCurHeightAmt$530939[ebp]
$LN1@ProcessMov:

; 694  : 
; 695  : 		vCurPos.y += fCurHeightAmt;

  0015f	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vCurPos$[ebp+4]
  00164	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00168	0f 5a c9	 cvtps2pd xmm1, xmm1
  0016b	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0016f	0f 57 c0	 xorps	 xmm0, xmm0
  00172	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00176	f3 0f 11 45 f4	 movss	 DWORD PTR _vCurPos$[ebp+4], xmm0
$LN26@ProcessMov:

; 696  : 	}
; 697  : 
; 698  : 	vCurPos.y = max( vCurPos.y, fMapHeight );

  0017b	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vCurPos$[ebp+4]
  00180	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fMapHeight$[ebp]
  00185	0f 5a c9	 cvtps2pd xmm1, xmm1
  00188	0f 5a d0	 cvtps2pd xmm2, xmm0
  0018b	66 0f 2f ca	 comisd	 xmm1, xmm2
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	77 05		 ja	 SHORT $LN11@ProcessMov
  00193	f3 0f 11 45 f4	 movss	 DWORD PTR _vCurPos$[ebp+4], xmm0
$LN11@ProcessMov:

; 699  : 
; 700  : 	pStage->CheckFlyMapLimit( &vCurPos );

  00198	8b 4d e4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  0019b	8d 45 f0	 lea	 eax, DWORD PTR _vCurPos$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ?CheckFlyMapLimit@ioPlayStage@@QAEXPAUD3DXVECTOR3@@@Z ; ioPlayStage::CheckFlyMapLimit

; 701  : 	pStage->CheckAxisLimit( &vCurPos );

  001a4	8b 4d e4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  001a7	8d 45 f0	 lea	 eax, DWORD PTR _vCurPos$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?CheckAxisLimit@ioPlayStage@@QAE_NPAUD3DXVECTOR3@@@Z ; ioPlayStage::CheckAxisLimit

; 702  : 	pOwner->SetWorldPosition( vCurPos );

  001b0	8b 03		 mov	 eax, DWORD PTR [ebx]
  001b2	8d 4d f0	 lea	 ecx, DWORD PTR _vCurPos$[ebp]
  001b5	51		 push	 ecx
  001b6	8b cb		 mov	 ecx, ebx
  001b8	ff 50 44	 call	 DWORD PTR [eax+68]
$LN8@ProcessMov:

; 703  : 
; 704  : 	return;
; 705  : }

  001bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001be	33 cd		 xor	 ecx, ebp
  001c0	5b		 pop	 ebx
  001c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c6	c9		 leave
  001c7	c2 04 00	 ret	 4
?ProcessMove@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::ProcessMove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsProtected@ioMechanicsFireSkill@@UBE_NH@Z
_TEXT	SEGMENT
_value$536189 = -1					; size = 1
_value$536194 = 8					; size = 4
_iDefenseBreakType$ = 8					; size = 4
?IsProtected@ioMechanicsFireSkill@@UBE_NH@Z PROC	; ioMechanicsFireSkill::IsProtected, COMDAT
; _this$ = ecx

; 713  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 714  : 	if( m_bDisableSkillProtect )

  00007	8d 45 ff	 lea	 eax, DWORD PTR _value$536189[ebp]
  0000a	50		 push	 eax
  0000b	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00011	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00016	80 7d ff 00	 cmp	 BYTE PTR _value$536189[ebp], 0
  0001a	74 04		 je	 SHORT $LN7@IsProtecte
$LN18@IsProtecte:

; 715  : 		return false;

  0001c	32 c0		 xor	 al, al
  0001e	eb 5d		 jmp	 SHORT $LN8@IsProtecte
$LN7@IsProtecte:

; 716  : 
; 717  : 	if( DBT_NONE != (DefenseBreakType)m_ProtectCancelType )

  00020	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  00026	85 c0		 test	 eax, eax
  00028	74 05		 je	 SHORT $LN5@IsProtecte

; 718  : 	{
; 719  : 		if( iDefenseBreakType == m_ProtectCancelType )   // 스킬 무적 파괴

  0002a	39 45 08	 cmp	 DWORD PTR _iDefenseBreakType$[ebp], eax

; 720  : 			return false;

  0002d	74 ed		 je	 SHORT $LN18@IsProtecte
$LN5@IsProtecte:
  0002f	57		 push	 edi

; 721  : 	}
; 722  : 
; 723  : 	DWORD dwCurTime = FRAMEGETTIME();

  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00036	8b c8		 mov	 ecx, eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0003e	8b f8		 mov	 edi, eax

; 724  : 
; 725  : 	if( IsPreDelayProtect() )

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b ce		 mov	 ecx, esi
  00044	ff 90 2c 01 00
	00		 call	 DWORD PTR [eax+300]
  0004a	84 c0		 test	 al, al
  0004c	74 0b		 je	 SHORT $LN3@IsProtecte

; 726  : 	{
; 727  : 		if( m_dwPreDelayStartTime != 0 )

  0004e	83 be 20 02 00
	00 00		 cmp	 DWORD PTR [esi+544], 0
  00055	74 0b		 je	 SHORT $LN16@IsProtecte

; 728  : 			return true;

  00057	eb 1d		 jmp	 SHORT $LN17@IsProtecte
$LN3@IsProtecte:

; 729  : 	}
; 730  : 
; 731  : 	if( m_dwPreDelayStartTime == 0 )

  00059	83 be 20 02 00
	00 00		 cmp	 DWORD PTR [esi+544], 0
  00060	75 18		 jne	 SHORT $LN1@IsProtecte
$LN16@IsProtecte:

; 732  : 	{
; 733  : 		if( m_dwCurSkillProtectTime > dwCurTime )

  00062	8d 45 08	 lea	 eax, DWORD PTR _value$536194[ebp]
  00065	50		 push	 eax
  00066	8d 8e 78 11 00
	00		 lea	 ecx, DWORD PTR [esi+4472]
  0006c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00071	39 7d 08	 cmp	 DWORD PTR _value$536194[ebp], edi
  00074	76 04		 jbe	 SHORT $LN1@IsProtecte
$LN17@IsProtecte:

; 734  : 			return true;

  00076	b0 01		 mov	 al, 1
  00078	eb 02		 jmp	 SHORT $LN14@IsProtecte
$LN1@IsProtecte:

; 735  : 	}
; 736  : 
; 737  : 	return false;

  0007a	32 c0		 xor	 al, al
$LN14@IsProtecte:
  0007c	5f		 pop	 edi
$LN8@IsProtecte:
  0007d	5e		 pop	 esi

; 738  : }

  0007e	c9		 leave
  0007f	c2 04 00	 ret	 4
?IsProtected@ioMechanicsFireSkill@@UBE_NH@Z ENDP	; ioMechanicsFireSkill::IsProtected
_TEXT	ENDS
PUBLIC	?CheckUpDownEffect@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::CheckUpDownEffect
; Function compile flags: /Ogsp
;	COMDAT ?CheckUpDownEffect@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$536210 = -1					; size = 1
_value$536206 = -1					; size = 1
_pOwner$ = 8						; size = 4
?CheckUpDownEffect@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::CheckUpDownEffect, COMDAT
; _this$ = ecx

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 760  : 	if( !pOwner ) return;

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	3b cb		 cmp	 ecx, ebx
  0000f	0f 84 84 00 00
	00		 je	 $LN1@CheckUpDow

; 761  : 
; 762  : 	if( m_dwUpDownEffect > 0 )

  00015	8b 86 e0 13 00
	00		 mov	 eax, DWORD PTR [esi+5088]
  0001b	3b c3		 cmp	 eax, ebx
  0001d	76 0d		 jbe	 SHORT $LN5@CheckUpDow

; 763  : 	{
; 764  : 		pOwner->EndEffect( m_dwUpDownEffect, false );

  0001f	53		 push	 ebx
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXK_N@Z ; ioBaseChar::EndEffect

; 765  : 		m_dwUpDownEffect = 0;

  00026	89 9e e0 13 00
	00		 mov	 DWORD PTR [esi+5088], ebx
$LN5@CheckUpDow:

; 766  : 	}
; 767  : 
; 768  : 	ioEffect *pEffect = NULL;
; 769  : 	if( m_bSetUpKey && !m_ChargeUpEffect.IsEmpty() )

  0002c	57		 push	 edi
  0002d	8d 45 ff	 lea	 eax, DWORD PTR _value$536206[ebp]
  00030	50		 push	 eax
  00031	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  00037	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  0003c	38 5d ff	 cmp	 BYTE PTR _value$536206[ebp], bl
  0003f	74 12		 je	 SHORT $LN4@CheckUpDow
  00041	8d be c0 13 00
	00		 lea	 edi, DWORD PTR [esi+5056]
  00047	8b cf		 mov	 ecx, edi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0004f	84 c0		 test	 al, al

; 770  : 		pEffect = pOwner->AttachEffect( m_ChargeUpEffect );

  00051	74 26		 je	 SHORT $LN14@CheckUpDow
$LN4@CheckUpDow:

; 771  : 	else if( m_bSetDownKey && !m_ChargeDownEffect.IsEmpty() )

  00053	8d 45 ff	 lea	 eax, DWORD PTR _value$536210[ebp]
  00056	50		 push	 eax
  00057	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  0005d	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00062	38 5d ff	 cmp	 BYTE PTR _value$536210[ebp], bl
  00065	74 31		 je	 SHORT $LN13@CheckUpDow
  00067	8d be d0 13 00
	00		 lea	 edi, DWORD PTR [esi+5072]
  0006d	8b cf		 mov	 ecx, edi
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00075	84 c0		 test	 al, al
  00077	75 1f		 jne	 SHORT $LN13@CheckUpDow
$LN14@CheckUpDow:

; 772  : 		pEffect = pOwner->AttachEffect( m_ChargeDownEffect );

  00079	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0007c	6a 01		 push	 1
  0007e	53		 push	 ebx
  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 773  : 
; 774  : 	if( pEffect )

  00085	3b c3		 cmp	 eax, ebx
  00087	74 0f		 je	 SHORT $LN13@CheckUpDow

; 775  : 		m_dwUpDownEffect = pEffect->GetUniqueID();

  00089	8d 48 14	 lea	 ecx, DWORD PTR [eax+20]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetUniqueID@ioMovableObject@@QBEKXZ
  00092	89 86 e0 13 00
	00		 mov	 DWORD PTR [esi+5088], eax
$LN13@CheckUpDow:
  00098	5f		 pop	 edi
$LN1@CheckUpDow:
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 776  : }

  0009b	c9		 leave
  0009c	c2 04 00	 ret	 4
?CheckUpDownEffect@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::CheckUpDownEffect
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableReserve@ioMechanicsFireSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$536218 = -4					; size = 4
?IsEnableReserve@ioMechanicsFireSkill@@UBE_NXZ PROC	; ioMechanicsFireSkill::IsEnableReserve, COMDAT
; _this$ = ecx

; 784  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 785  : 	if( m_dwPreDelayStartTime != 0 )

  00007	83 be 20 02 00
	00 00		 cmp	 DWORD PTR [esi+544], 0

; 786  : 		return false;

  0000e	75 45		 jne	 SHORT $LN2@IsEnableRe

; 787  : 
; 788  : 	switch( m_SkillState )

  00010	83 be e4 10 00
	00 02		 cmp	 DWORD PTR [esi+4324], 2

; 789  : 	{
; 790  : 	case SS_NONE:
; 791  : 	case SS_CHARGE:
; 792  : 	case SS_ACTION:
; 793  : 		return false;

  00017	76 3c		 jbe	 SHORT $LN2@IsEnableRe

; 794  : 	}
; 795  : 
; 796  : 	if( m_dwEnableReserveTime == 0 || m_dwMotionStartTime >= m_dwEnableReserveTime )

  00019	83 be dc 02 00
	00 00		 cmp	 DWORD PTR [esi+732], 0
  00020	74 33		 je	 SHORT $LN2@IsEnableRe
  00022	8d 45 fc	 lea	 eax, DWORD PTR _value$536218[ebp]
  00025	50		 push	 eax
  00026	8d 8e a8 02 00
	00		 lea	 ecx, DWORD PTR [esi+680]
  0002c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00031	8b 45 fc	 mov	 eax, DWORD PTR _value$536218[ebp]
  00034	3b 86 dc 02 00
	00		 cmp	 eax, DWORD PTR [esi+732]
  0003a	73 19		 jae	 SHORT $LN2@IsEnableRe

; 798  : 
; 799  : 	if( m_dwEnableReserveTime < FRAMEGETTIME() )

  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00042	8b c8		 mov	 ecx, eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0004a	39 86 dc 02 00
	00		 cmp	 DWORD PTR [esi+732], eax
  00050	0f 92 c0	 setb	 al

; 800  : 		return true;
; 801  : 
; 802  : 	return false;

  00053	eb 02		 jmp	 SHORT $LN8@IsEnableRe
$LN2@IsEnableRe:

; 797  : 		return false;

  00055	32 c0		 xor	 al, al
$LN8@IsEnableRe:
  00057	5e		 pop	 esi

; 803  : }

  00058	c9		 leave
  00059	c3		 ret	 0
?IsEnableReserve@ioMechanicsFireSkill@@UBE_NXZ ENDP	; ioMechanicsFireSkill::IsEnableReserve
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@ABV0@@Z			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$536231 = 8					; size = 4
_value$536226 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@K@@QAE@ABV0@@Z PROC			; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$536226[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00036	8b 45 08	 mov	 eax, DWORD PTR _value$536226[ebp]
  00039	89 45 08	 mov	 DWORD PTR _value$536231[ebp], eax
  0003c	8d 45 08	 lea	 eax, DWORD PTR _value$536231[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 124  : 	}

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@ABV0@@Z ENDP			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
PUBLIC	??0?$CEncrypt@H@@QAE@ABV0@@Z			; CEncrypt<int>::CEncrypt<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@H@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@H@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@H@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@H@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$536250 = 8					; size = 4
_value$536245 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@H@@QAE@ABV0@@Z PROC			; CEncrypt<int>::CEncrypt<int>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@H@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@H@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@H@@AAEXXZ ; CEncrypt<int>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$536245[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00036	8b 45 08	 mov	 eax, DWORD PTR _value$536245[ebp]
  00039	89 45 08	 mov	 DWORD PTR _value$536250[ebp], eax
  0003c	8d 45 08	 lea	 eax, DWORD PTR _value$536250[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 124  : 	}

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@H@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@H@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@H@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@H@@QAE@ABV0@@Z ENDP			; CEncrypt<int>::CEncrypt<int>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskill.h
;	COMDAT ?IsCanJumpingSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$536263 = -1					; size = 1
?IsCanJumpingSkill@ioSkill@@UBE_NXZ PROC		; ioSkill::IsCanJumpingSkill, COMDAT
; _this$ = ecx

; 431  : 	virtual bool IsCanJumpingSkill() const { return m_bEnableJumpingSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$536263[ebp]
  00007	50		 push	 eax
  00008	81 c1 9c 03 00
	00		 add	 ecx, 924		; 0000039cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$536263[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanJumpingSkill@ioSkill@@UBE_NXZ ENDP		; ioSkill::IsCanJumpingSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$536270 = -1					; size = 1
?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ PROC	; ioSkill::IsCanJumpingSkillOnBlowWound, COMDAT
; _this$ = ecx

; 432  : 	virtual bool IsCanJumpingSkillOnBlowWound() const { return m_bEnableJumpingSkillOnBlowWound; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$536270[ebp]
  00007	50		 push	 eax
  00008	81 c1 cc 03 00
	00		 add	 ecx, 972		; 000003ccH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$536270[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanJumpingSkillOnBlowWound@ioSkill@@UBE_NXZ ENDP	; ioSkill::IsCanJumpingSkillOnBlowWound
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanDownSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$536277 = -1					; size = 1
?IsCanDownSkill@ioSkill@@UBE_NXZ PROC			; ioSkill::IsCanDownSkill, COMDAT
; _this$ = ecx

; 437  : 	virtual bool IsCanDownSkill() const { return m_bEnableDownSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$536277[ebp]
  00007	50		 push	 eax
  00008	81 c1 5c 04 00
	00		 add	 ecx, 1116		; 0000045cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$536277[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanDownSkill@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsCanDownSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$536284 = -1					; size = 1
?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ PROC		; ioSkill::IsCanBlowWoundSkill, COMDAT
; _this$ = ecx

; 440  : 	virtual bool IsCanBlowWoundSkill() const { return m_bEnableBlowWoundSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$536284[ebp]
  00007	50		 push	 eax
  00008	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$536284[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanBlowWoundSkill@ioSkill@@UBE_NXZ ENDP		; ioSkill::IsCanBlowWoundSkill
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanWoundSkill@ioSkill@@UBE_NXZ
_TEXT	SEGMENT
_value$536291 = -1					; size = 1
?IsCanWoundSkill@ioSkill@@UBE_NXZ PROC			; ioSkill::IsCanWoundSkill, COMDAT
; _this$ = ecx

; 446  : 	virtual bool IsCanWoundSkill() const { return m_bEnableWoundSkill; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$536291[ebp]
  00007	50		 push	 eax
  00008	81 c1 54 05 00
	00		 add	 ecx, 1364		; 00000554H
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00013	8a 45 ff	 mov	 al, BYTE PTR _value$536291[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?IsCanWoundSkill@ioSkill@@UBE_NXZ ENDP			; ioSkill::IsCanWoundSkill
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@M@@QAE@ABV0@@Z			; CEncrypt<float>::CEncrypt<float>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@M@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@M@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@M@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@M@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@M@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$536303 = 8					; size = 4
_value$536298 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@M@@QAE@ABV0@@Z PROC			; CEncrypt<float>::CEncrypt<float>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@M@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@M@@AAEXXZ ; CEncrypt<float>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$536298[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$536298[ebp]
  0003b	8d 45 08	 lea	 eax, DWORD PTR _value$536303[ebp]
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	f3 0f 11 45 08	 movss	 DWORD PTR _value$536303[ebp], xmm0
  00046	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 124  : 	}

  0004b	8b c6		 mov	 eax, esi
  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@M@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@M@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@M@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@M@@QAE@ABV0@@Z ENDP			; CEncrypt<float>::CEncrypt<float>
PUBLIC	??0ioMechanicsFireSkill@@QAE@ABV0@@Z		; ioMechanicsFireSkill::ioMechanicsFireSkill
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioAttackSkill@@QAE@ABV0@@Z:PROC		; ioAttackSkill::ioAttackSkill
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioMechanicsFireSkill@@QAE@ABV0@@Z DD 019930522H
	DD	015H
	DD	FLAT:__unwindtable$??0ioMechanicsFireSkill@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioMechanicsFireSkill@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$18
	DD	012H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$19
	DD	013H
	DD	FLAT:__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$20
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
xdata$x	ENDS
;	COMDAT ??0ioMechanicsFireSkill@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$536369 = 8					; size = 4
_value$536365 = 8					; size = 4
_value$536361 = 8					; size = 4
_value$536357 = 8					; size = 4
_value$536338 = 8					; size = 4
_rhs$ = 8						; size = 4
_value$536353 = 11					; size = 1
_value$536350 = 11					; size = 1
_value$536346 = 11					; size = 1
_value$536342 = 11					; size = 1
??0ioMechanicsFireSkill@@QAE@ABV0@@Z PROC		; ioMechanicsFireSkill::ioMechanicsFireSkill, COMDAT
; _this$ = ecx

; 49   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioMechanicsFireSkill@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioAttackSkill@@QAE@ABV0@@Z ; ioAttackSkill::ioAttackSkill
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 e8 10 00
	00		 lea	 eax, DWORD PTR [edi+4328]
  00024	50		 push	 eax
  00025	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioMechanicsFireSkill@@6B@
  00031	e8 00 00 00 00	 call	 ??0?$CEncrypt@H@@QAE@ABV0@@Z ; CEncrypt<int>::CEncrypt<int>
  00036	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  0003c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00040	e8 00 00 00 00	 call	 ??0?$CEncrypt@H@@QAE@XZ	; CEncrypt<int>::CEncrypt<int>
  00045	8d 87 48 11 00
	00		 lea	 eax, DWORD PTR [edi+4424]
  0004b	50		 push	 eax
  0004c	8d 8e 48 11 00
	00		 lea	 ecx, DWORD PTR [esi+4424]
  00052	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00056	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0005b	8d 8e 78 11 00
	00		 lea	 ecx, DWORD PTR [esi+4472]
  00061	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00065	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0006a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00070	8d 87 a8 11 00
	00		 lea	 eax, DWORD PTR [edi+4520]
  00076	50		 push	 eax
  00077	8d 8e a8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4520]
  0007d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00081	ff d3		 call	 ebx
  00083	8d 87 b8 11 00
	00		 lea	 eax, DWORD PTR [edi+4536]
  00089	50		 push	 eax
  0008a	8d 8e b8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4536]
  00090	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00094	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00099	8d 87 e8 11 00
	00		 lea	 eax, DWORD PTR [edi+4584]
  0009f	50		 push	 eax
  000a0	8d 8e e8 11 00
	00		 lea	 ecx, DWORD PTR [esi+4584]
  000a6	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000aa	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000af	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  000b5	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000b9	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000be	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  000c4	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000c8	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000cd	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  000d3	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000d7	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  000dc	8d 87 a8 12 00
	00		 lea	 eax, DWORD PTR [edi+4776]
  000e2	50		 push	 eax
  000e3	8d 8e a8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4776]
  000e9	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  000ed	ff d3		 call	 ebx
  000ef	8d 87 b8 12 00
	00		 lea	 eax, DWORD PTR [edi+4792]
  000f5	50		 push	 eax
  000f6	8d 8e b8 12 00
	00		 lea	 ecx, DWORD PTR [esi+4792]
  000fc	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00100	ff d3		 call	 ebx
  00102	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  00108	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  0010c	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  00111	8d 8e 00 13 00
	00		 lea	 ecx, DWORD PTR [esi+4864]
  00117	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0011b	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  00120	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  00126	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  0012a	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  0012f	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00133	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  00139	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  0013e	8d 87 90 13 00
	00		 lea	 eax, DWORD PTR [edi+5008]
  00144	50		 push	 eax
  00145	8d 8e 90 13 00
	00		 lea	 ecx, DWORD PTR [esi+5008]
  0014b	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0014f	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@ABV0@@Z ; CEncrypt<float>::CEncrypt<float>
  00154	8d 87 c0 13 00
	00		 lea	 eax, DWORD PTR [edi+5056]
  0015a	50		 push	 eax
  0015b	8d 8e c0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5056]
  00161	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00165	ff d3		 call	 ebx
  00167	8d 87 d0 13 00
	00		 lea	 eax, DWORD PTR [edi+5072]
  0016d	50		 push	 eax
  0016e	8d 8e d0 13 00
	00		 lea	 ecx, DWORD PTR [esi+5072]
  00174	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00178	ff d3		 call	 ebx
  0017a	81 c7 e4 13 00
	00		 add	 edi, 5092		; 000013e4H
  00180	57		 push	 edi
  00181	8d 8e e4 13 00
	00		 lea	 ecx, DWORD PTR [esi+5092]
  00187	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  0018b	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>

; 50   : 	m_bSetHandMesh = false;
; 51   : 	m_CurDirKey = ioUserKeyInput::DKI_NONE;

  00190	33 ff		 xor	 edi, edi

; 52   : 	m_PreDirKey = ioUserKeyInput::DKI_NONE;
; 53   : 
; 54   : 	m_iCurFireCnt = 0;

  00192	8d 45 08	 lea	 eax, DWORD PTR _value$536338[ebp]
  00195	50		 push	 eax
  00196	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  0019c	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  001a0	c6 86 0a 0f 00
	00 00		 mov	 BYTE PTR [esi+3850], 0
  001a7	89 be 18 14 00
	00		 mov	 DWORD PTR [esi+5144], edi
  001ad	89 be 14 14 00
	00		 mov	 DWORD PTR [esi+5140], edi
  001b3	89 7d 08	 mov	 DWORD PTR _value$536338[ebp], edi
  001b6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 55   : 
; 56   : 	m_bSetMaxCharge = false;

  001bb	8d 45 0b	 lea	 eax, DWORD PTR _value$536342[ebp]
  001be	50		 push	 eax
  001bf	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  001c5	c6 45 0b 00	 mov	 BYTE PTR _value$536342[ebp], 0
  001c9	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 57   : 	m_bTargetRot = false;

  001ce	8d 45 0b	 lea	 eax, DWORD PTR _value$536346[ebp]
  001d1	50		 push	 eax
  001d2	8d 8e 00 13 00
	00		 lea	 ecx, DWORD PTR [esi+4864]
  001d8	c6 45 0b 00	 mov	 BYTE PTR _value$536346[ebp], 0
  001dc	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 58   : 	m_bSetUpKey = false;

  001e1	8d 45 0b	 lea	 eax, DWORD PTR _value$536350[ebp]
  001e4	50		 push	 eax
  001e5	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  001eb	c6 45 0b 00	 mov	 BYTE PTR _value$536350[ebp], 0
  001ef	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 59   : 	m_bSetDownKey = false;

  001f4	8d 45 0b	 lea	 eax, DWORD PTR _value$536353[ebp]
  001f7	50		 push	 eax
  001f8	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  001fe	c6 45 0b 00	 mov	 BYTE PTR _value$536353[ebp], 0
  00202	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 60   : 
; 61   : 	m_SkillState = SS_NONE;
; 62   : 	m_dwChargeMaxTime = 0;

  00207	8d 45 08	 lea	 eax, DWORD PTR _value$536357[ebp]
  0020a	50		 push	 eax
  0020b	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  00211	89 be e4 10 00
	00		 mov	 DWORD PTR [esi+4324], edi
  00217	89 7d 08	 mov	 DWORD PTR _value$536357[ebp], edi
  0021a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 63   : 	m_dwFireEnableTime = 0;

  0021f	8d 45 08	 lea	 eax, DWORD PTR _value$536361[ebp]
  00222	50		 push	 eax
  00223	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  00229	89 7d 08	 mov	 DWORD PTR _value$536361[ebp], edi
  0022c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 64   : 	m_dwActionEndTime = 0;

  00231	8d 45 08	 lea	 eax, DWORD PTR _value$536365[ebp]
  00234	50		 push	 eax
  00235	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  0023b	89 7d 08	 mov	 DWORD PTR _value$536365[ebp], edi
  0023e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 65   : 
; 66   : 	m_dwCurSkillProtectTime = 0;

  00243	8d 45 08	 lea	 eax, DWORD PTR _value$536369[ebp]
  00246	50		 push	 eax
  00247	8d 8e 78 11 00
	00		 lea	 ecx, DWORD PTR [esi+4472]
  0024d	89 7d 08	 mov	 DWORD PTR _value$536369[ebp], edi
  00250	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 67   : 
; 68   : 	m_dwChargeEffect = 0;

  00255	89 be c8 12 00
	00		 mov	 DWORD PTR [esi+4808], edi

; 69   : 	m_dwChargeMaxEffect = 0;

  0025b	89 be cc 12 00
	00		 mov	 DWORD PTR [esi+4812], edi

; 70   : 	m_dwUpDownEffect = 0;

  00261	89 be e0 13 00
	00		 mov	 DWORD PTR [esi+5088], edi

; 71   : }

  00267	8b c6		 mov	 eax, esi
  00269	e8 00 00 00 00	 call	 __EH_epilog3
  0026e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioAttackSkill@@UAE@XZ ; ioAttackSkill::~ioAttackSkill
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 e8 10 00
	00		 add	 ecx, 4328		; 000010e8H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@H@@UAE@XZ	; CEncrypt<int>::~CEncrypt<int>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 18 11 00
	00		 add	 ecx, 4376		; 00001118H
  0001f	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@H@@UAE@XZ	; CEncrypt<int>::~CEncrypt<int>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 48 11 00
	00		 add	 ecx, 4424		; 00001148H
  0002d	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$4:
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 78 11 00
	00		 add	 ecx, 4472		; 00001178H
  0003b	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$5:
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 a8 11 00
	00		 add	 ecx, 4520		; 000011a8H
  00049	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$6:
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	81 c1 b8 11 00
	00		 add	 ecx, 4536		; 000011b8H
  00058	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$7:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 e8 11 00
	00		 add	 ecx, 4584		; 000011e8H
  00066	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$8:
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	81 c1 18 12 00
	00		 add	 ecx, 4632		; 00001218H
  00074	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$9:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	81 c1 48 12 00
	00		 add	 ecx, 4680		; 00001248H
  00082	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$10:
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	81 c1 78 12 00
	00		 add	 ecx, 4728		; 00001278H
  00090	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$11:
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 a8 12 00
	00		 add	 ecx, 4776		; 000012a8H
  0009e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$12:
  000a4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	81 c1 b8 12 00
	00		 add	 ecx, 4792		; 000012b8H
  000ad	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$13:
  000b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	81 c1 d0 12 00
	00		 add	 ecx, 4816		; 000012d0H
  000bc	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$14:
  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	81 c1 00 13 00
	00		 add	 ecx, 4864		; 00001300H
  000ca	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$15:
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	81 c1 30 13 00
	00		 add	 ecx, 4912		; 00001330H
  000d8	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$16:
  000dd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	81 c1 60 13 00
	00		 add	 ecx, 4960		; 00001360H
  000e6	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$17:
  000eb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	81 c1 90 13 00
	00		 add	 ecx, 5008		; 00001390H
  000f4	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$18:
  000f9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	81 c1 c0 13 00
	00		 add	 ecx, 5056		; 000013c0H
  00102	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$19:
  00108	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	81 c1 d0 13 00
	00		 add	 ecx, 5072		; 000013d0H
  00111	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMechanicsFireSkill@@QAE@ABV0@@Z$20:
  00117	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	81 c1 e4 13 00
	00		 add	 ecx, 5092		; 000013e4H
  00120	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__ehhandler$??0ioMechanicsFireSkill@@QAE@ABV0@@Z:
  00125	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00129	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0012c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0012f	33 c8		 xor	 ecx, eax
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioMechanicsFireSkill@@QAE@ABV0@@Z
  0013b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioMechanicsFireSkill@@QAE@ABV0@@Z ENDP		; ioMechanicsFireSkill::ioMechanicsFireSkill
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ$0
__ehfuncinfo$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ
_TEXT	SEGMENT
$T536380 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ PROC	; ioMechanicsFireSkill::Clone, COMDAT
; _this$ = ecx

; 108  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 109  : 	return new ioMechanicsFireSkill( *this );

  0000e	68 20 14 00 00	 push	 5152			; 00001420H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T536380[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioMechanicsFireSkill@@QAE@ABV0@@Z ; ioMechanicsFireSkill::ioMechanicsFireSkill
$LN3@Clone:

; 110  : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T536380[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioMechanicsFireSkill@@UAEPAVioSkill@@XZ ENDP	; ioMechanicsFireSkill::Clone
EXTRN	?SetSkillNameChatBubble@ioSkill@@IAEXPAVioBaseChar@@@Z:PROC ; ioSkill::SetSkillNameChatBubble
EXTRN	?CheckSkillDesc@ioSkill@@IAEXPAVioBaseChar@@@Z:PROC ; ioSkill::CheckSkillDesc
EXTRN	?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ:PROC ; ioBaseChar::IncreaseWeaponIndexBase
EXTRN	?InitExtraAniJump@ioSkill@@IAEXXZ:PROC		; ioSkill::InitExtraAniJump
EXTRN	?SetSkillProtection@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::SetSkillProtection
; Function compile flags: /Ogsp
;	COMDAT ?OnSkillStart@ioMechanicsFireSkill@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$536435 = -8					; size = 4
_value$536431 = -8					; size = 4
_value$536427 = -8					; size = 4
_value$536423 = -8					; size = 4
_value$536403 = -8					; size = 4
_value$536398 = -8					; size = 4
_value$536419 = -1					; size = 1
_value$536415 = -1					; size = 1
_value$536411 = -1					; size = 1
_value$536407 = -1					; size = 1
_value$536452 = 8					; size = 4
_pChar$ = 8						; size = 4
_value$536439 = 11					; size = 1
?OnSkillStart@ioMechanicsFireSkill@@UAE_NPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::OnSkillStart, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 114  : 	if( pChar->GetState() == CS_JUMP )

  00007	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  0000a	80 bf 10 03 00
	00 04		 cmp	 BYTE PTR [edi+784], 4
  00011	8b f1		 mov	 esi, ecx
  00013	0f 94 c0	 sete	 al
  00016	88 86 1c 14 00
	00		 mov	 BYTE PTR [esi+5148], al

; 115  : 		m_bJumpSkill = true;
; 116  : 	else
; 117  : 		m_bJumpSkill = false;
; 118  : 
; 119  : 	if( !HasSkillMotion() )

  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	ff 90 24 01 00
	00		 call	 DWORD PTR [eax+292]
  00024	84 c0		 test	 al, al
  00026	0f 84 f1 01 00
	00		 je	 $LN9@OnSkillSta
$LN6@OnSkillSta:
  0002c	53		 push	 ebx

; 120  : 		return false;
; 121  : 
; 122  : 	pChar->SetSkillProtection();

  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?SetSkillProtection@ioBaseChar@@QAEXXZ ; ioBaseChar::SetSkillProtection

; 123  : 
; 124  : 	m_bReduceGauge = false;

  00034	33 db		 xor	 ebx, ebx

; 125  : 	m_dwAttackEndTime = 0;
; 126  : 
; 127  : 	InitExtraAniJump();

  00036	8b ce		 mov	 ecx, esi
  00038	88 9e 50 03 00
	00		 mov	 BYTE PTR [esi+848], bl
  0003e	89 9e 50 10 00
	00		 mov	 DWORD PTR [esi+4176], ebx
  00044	e8 00 00 00 00	 call	 ?InitExtraAniJump@ioSkill@@IAEXXZ ; ioSkill::InitExtraAniJump

; 128  : 
; 129  : 	m_dwAniRotateTime = 0;
; 130  : 	m_fAniRotateAngle = 0.0f;

  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	89 9e 2c 07 00
	00		 mov	 DWORD PTR [esi+1836], ebx
  00052	f3 0f 11 86 30
	07 00 00	 movss	 DWORD PTR [esi+1840], xmm0

; 131  : 
; 132  : 	m_iCurAniRotate = 0;

  0005a	89 9e 28 07 00
	00		 mov	 DWORD PTR [esi+1832], ebx

; 133  : 
; 134  : 	m_dwEnableSwitchTime = 0;

  00060	89 9e 5c 03 00
	00		 mov	 DWORD PTR [esi+860], ebx

; 135  : 	m_dwEnableSemiSwitchTime = 0;

  00066	89 9e 64 03 00
	00		 mov	 DWORD PTR [esi+868], ebx

; 136  : 
; 137  : 	if( m_dwSwitchSkill > 0 )

  0006c	39 9e 58 03 00
	00		 cmp	 DWORD PTR [esi+856], ebx
  00072	76 1a		 jbe	 SHORT $LN5@OnSkillSta

; 138  : 		m_dwEnableSwitchTime = FRAMEGETTIME() + m_dwSwitchSkill;

  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0007a	8b c8		 mov	 ecx, eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00082	03 86 58 03 00
	00		 add	 eax, DWORD PTR [esi+856]
  00088	89 86 5c 03 00
	00		 mov	 DWORD PTR [esi+860], eax
$LN5@OnSkillSta:

; 139  : 	if( m_dwSemiSwitchSkill > 0 )

  0008e	39 9e 60 03 00
	00		 cmp	 DWORD PTR [esi+864], ebx
  00094	76 1a		 jbe	 SHORT $LN41@OnSkillSta

; 140  : 		m_dwEnableSemiSwitchTime = FRAMEGETTIME() + m_dwSemiSwitchSkill;

  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0009c	8b c8		 mov	 ecx, eax
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000a4	03 86 60 03 00
	00		 add	 eax, DWORD PTR [esi+864]
  000aa	89 86 64 03 00
	00		 mov	 DWORD PTR [esi+868], eax
$LN41@OnSkillSta:

; 141  : 
; 142  : 	m_dwSkillStartTime = FRAMEGETTIME();

  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000b6	8b c8		 mov	 ecx, eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000be	89 45 f8	 mov	 DWORD PTR _value$536398[ebp], eax
  000c1	8d 45 f8	 lea	 eax, DWORD PTR _value$536398[ebp]
  000c4	50		 push	 eax
  000c5	8d 8e 94 0e 00
	00		 lea	 ecx, DWORD PTR [esi+3732]
  000cb	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 143  : 
; 144  : 	m_dwSkillMapEffect = -1;

  000d0	83 8e 1c 02 00
	00 ff		 or	 DWORD PTR [esi+540], -1

; 145  : 
; 146  : 	m_bSetHandMesh = false;
; 147  : 	m_CurDirKey = ioUserKeyInput::DKI_NONE;
; 148  : 	m_PreDirKey = ioUserKeyInput::DKI_NONE;
; 149  : 
; 150  : 	m_iCurFireCnt = 0;

  000d7	8d 45 f8	 lea	 eax, DWORD PTR _value$536403[ebp]
  000da	50		 push	 eax
  000db	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  000e1	88 9e 0a 0f 00
	00		 mov	 BYTE PTR [esi+3850], bl
  000e7	89 9e 18 14 00
	00		 mov	 DWORD PTR [esi+5144], ebx
  000ed	89 9e 14 14 00
	00		 mov	 DWORD PTR [esi+5140], ebx
  000f3	89 5d f8	 mov	 DWORD PTR _value$536403[ebp], ebx
  000f6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 151  : 
; 152  : 	m_bSetMaxCharge = false;

  000fb	8d 45 ff	 lea	 eax, DWORD PTR _value$536407[ebp]
  000fe	50		 push	 eax
  000ff	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  00105	88 5d ff	 mov	 BYTE PTR _value$536407[ebp], bl
  00108	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 153  : 	m_bTargetRot = false;

  0010d	8d 45 ff	 lea	 eax, DWORD PTR _value$536411[ebp]
  00110	50		 push	 eax
  00111	8d 8e 00 13 00
	00		 lea	 ecx, DWORD PTR [esi+4864]
  00117	88 5d ff	 mov	 BYTE PTR _value$536411[ebp], bl
  0011a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 154  : 	m_bSetUpKey = false;

  0011f	8d 45 ff	 lea	 eax, DWORD PTR _value$536415[ebp]
  00122	50		 push	 eax
  00123	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  00129	88 5d ff	 mov	 BYTE PTR _value$536415[ebp], bl
  0012c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 155  : 	m_bSetDownKey = false;

  00131	8d 45 ff	 lea	 eax, DWORD PTR _value$536419[ebp]
  00134	50		 push	 eax
  00135	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  0013b	88 5d ff	 mov	 BYTE PTR _value$536419[ebp], bl
  0013e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 156  : 
; 157  : 	m_SkillState = SS_NONE;
; 158  : 	m_dwChargeMaxTime = 0;

  00143	8d 45 f8	 lea	 eax, DWORD PTR _value$536423[ebp]
  00146	50		 push	 eax
  00147	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  0014d	89 9e e4 10 00
	00		 mov	 DWORD PTR [esi+4324], ebx
  00153	89 5d f8	 mov	 DWORD PTR _value$536423[ebp], ebx
  00156	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 159  : 	m_dwFireEnableTime = 0;

  0015b	8d 45 f8	 lea	 eax, DWORD PTR _value$536427[ebp]
  0015e	50		 push	 eax
  0015f	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  00165	89 5d f8	 mov	 DWORD PTR _value$536427[ebp], ebx
  00168	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 160  : 	m_dwActionEndTime = 0;

  0016d	8d 45 f8	 lea	 eax, DWORD PTR _value$536431[ebp]
  00170	50		 push	 eax
  00171	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  00177	89 5d f8	 mov	 DWORD PTR _value$536431[ebp], ebx
  0017a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 161  : 
; 162  : 	m_dwChargeEffect = 0;
; 163  : 	m_dwChargeMaxEffect = 0;
; 164  : 	m_dwUpDownEffect = 0;
; 165  : 
; 166  : 	m_dwCurSkillProtectTime = 0;

  0017f	8d 45 f8	 lea	 eax, DWORD PTR _value$536435[ebp]
  00182	50		 push	 eax
  00183	8d 8e 78 11 00
	00		 lea	 ecx, DWORD PTR [esi+4472]
  00189	89 9e c8 12 00
	00		 mov	 DWORD PTR [esi+4808], ebx
  0018f	89 9e cc 12 00
	00		 mov	 DWORD PTR [esi+4812], ebx
  00195	89 9e e0 13 00
	00		 mov	 DWORD PTR [esi+5088], ebx
  0019b	89 5d f8	 mov	 DWORD PTR _value$536435[ebp], ebx
  0019e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 167  : 
; 168  : 	if( m_bUseItemMesh )

  001a3	38 9e 08 0f 00
	00		 cmp	 BYTE PTR [esi+3848], bl
  001a9	74 09		 je	 SHORT $LN3@OnSkillSta

; 169  : 	{
; 170  : 		pChar->ShowWeaponItemMesh( false );

  001ab	53		 push	 ebx
  001ac	53		 push	 ebx
  001ad	8b cf		 mov	 ecx, edi
  001af	e8 00 00 00 00	 call	 ?ShowWeaponItemMesh@ioBaseChar@@QAEX_N0@Z ; ioBaseChar::ShowWeaponItemMesh
$LN3@OnSkillSta:

; 171  : 	}
; 172  : 
; 173  : 	m_dwWeaponBaseIndex = pChar->IncreaseWeaponIndexBase();

  001b4	8b cf		 mov	 ecx, edi
  001b6	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  001bb	89 46 78	 mov	 DWORD PTR [esi+120], eax

; 174  : 	if( !StartPreDelayAnimation( pChar ) )	// Delay Animation이 없다

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	57		 push	 edi
  001c1	8b ce		 mov	 ecx, esi
  001c3	ff 90 88 01 00
	00		 call	 DWORD PTR [eax+392]
  001c9	84 c0		 test	 al, al
  001cb	75 0a		 jne	 SHORT $LN2@OnSkillSta

; 175  : 	{
; 176  : 		SetChargeState( pChar, true );

  001cd	6a 01		 push	 1
  001cf	57		 push	 edi
  001d0	8b ce		 mov	 ecx, esi
  001d2	e8 00 00 00 00	 call	 ?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z ; ioMechanicsFireSkill::SetChargeState
$LN2@OnSkillSta:

; 177  : 	}
; 178  : 
; 179  : 	CheckSkillDesc( pChar );

  001d7	57		 push	 edi
  001d8	8b ce		 mov	 ecx, esi
  001da	e8 00 00 00 00	 call	 ?CheckSkillDesc@ioSkill@@IAEXPAVioBaseChar@@@Z ; ioSkill::CheckSkillDesc

; 180  : 
; 181  : 	if( m_bInitJumpPower )

  001df	8d 45 0b	 lea	 eax, DWORD PTR _value$536439[ebp]
  001e2	50		 push	 eax
  001e3	8d 8e f4 05 00
	00		 lea	 ecx, DWORD PTR [esi+1524]
  001e9	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  001ee	38 5d 0b	 cmp	 BYTE PTR _value$536439[ebp], bl
  001f1	5b		 pop	 ebx
  001f2	74 1f		 je	 SHORT $LN39@OnSkillSta

; 182  : 	{
; 183  : 		pChar->SetCurJumpPowerAmt( 0.0f );

  001f4	0f 57 c0	 xorps	 xmm0, xmm0

; 184  : 		pChar->SetGravityAmt( 0.0f );

  001f7	8d 45 08	 lea	 eax, DWORD PTR _value$536452[ebp]
  001fa	50		 push	 eax
  001fb	8d 8f e8 0b 00
	00		 lea	 ecx, DWORD PTR [edi+3048]
  00201	f3 0f 11 87 90
	0e 00 00	 movss	 DWORD PTR [edi+3728], xmm0
  00209	f3 0f 11 45 08	 movss	 DWORD PTR _value$536452[ebp], xmm0
  0020e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
$LN39@OnSkillSta:

; 185  : 	}
; 186  : 
; 187  : 	SetSkillNameChatBubble( pChar );

  00213	57		 push	 edi
  00214	8b ce		 mov	 ecx, esi
  00216	e8 00 00 00 00	 call	 ?SetSkillNameChatBubble@ioSkill@@IAEXPAVioBaseChar@@@Z ; ioSkill::SetSkillNameChatBubble

; 188  : 
; 189  : 	return true;

  0021b	b0 01		 mov	 al, 1
$LN9@OnSkillSta:
  0021d	5f		 pop	 edi
  0021e	5e		 pop	 esi

; 190  : }

  0021f	c9		 leave
  00220	c2 04 00	 ret	 4
?OnSkillStart@ioMechanicsFireSkill@@UAE_NPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::OnSkillStart
_TEXT	ENDS
EXTRN	??5SP2Packet@@QAEAAV0@AA_N@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyExtraSkillInfo@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_qtRot$530862 = -28					; size = 16
_iDir$530863 = -12					; size = 4
_iType$ = -8						; size = 4
_bSetDownKey$530865 = -4				; size = 1
_bSetUpKey$530864 = -3					; size = 1
_bChangeUpDown$530861 = -2				; size = 1
_value$536472 = -1					; size = 1
_value$536467 = -1					; size = 1
_value$536463 = -1					; size = 1
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
_rkPacket$ = 16						; size = 4
_bChangeDir$530860 = 19					; size = 1
?ApplyExtraSkillInfo@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z PROC ; ioMechanicsFireSkill::ApplyExtraSkillInfo, COMDAT
; _this$ = ecx

; 494  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 495  : 	int iType;
; 496  : 	rkPacket >> iType;

  00009	8b 7d 10	 mov	 edi, DWORD PTR _rkPacket$[ebp]
  0000c	8d 45 f8	 lea	 eax, DWORD PTR _iType$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	50		 push	 eax
  00012	8b cf		 mov	 ecx, edi
  00014	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 497  : 
; 498  : 	switch( iType )

  00019	8b 45 f8	 mov	 eax, DWORD PTR _iType$[ebp]
  0001c	33 db		 xor	 ebx, ebx
  0001e	2b c3		 sub	 eax, ebx
  00020	74 17		 je	 SHORT $LN3@ApplyExtra
  00022	48		 dec	 eax
  00023	0f 85 c6 00 00
	00		 jne	 $LN1@ApplyExtra

; 499  : 	{
; 500  : 	case SST_ACTION:
; 501  : 		ApplyActionState( pChar, rkPacket );

  00029	57		 push	 edi
  0002a	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?ApplyActionState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioMechanicsFireSkill::ApplyActionState

; 502  : 		break;

  00034	e9 b6 00 00 00	 jmp	 $LN1@ApplyExtra
$LN3@ApplyExtra:

; 503  : 	case SST_KEY:
; 504  : 		{
; 505  : 			bool bChangeDir, bChangeUpDown;
; 506  : 			rkPacket >> bChangeDir >> bChangeUpDown;

  00039	8d 45 fe	 lea	 eax, DWORD PTR _bChangeUpDown$530861[ebp]
  0003c	50		 push	 eax
  0003d	8d 45 13	 lea	 eax, DWORD PTR _bChangeDir$530860[ebp]
  00040	50		 push	 eax
  00041	8b cf		 mov	 ecx, edi
  00043	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>

; 507  : 
; 508  : 			D3DXQUATERNION qtRot;
; 509  : 			rkPacket >> qtRot;

  0004f	8d 45 e4	 lea	 eax, DWORD PTR _qtRot$530862[ebp]
  00052	50		 push	 eax
  00053	8b cf		 mov	 ecx, edi
  00055	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 510  : 
; 511  : 			int iDir;
; 512  : 			rkPacket >> iDir;

  0005a	8d 45 f4	 lea	 eax, DWORD PTR _iDir$530863[ebp]
  0005d	50		 push	 eax
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 513  : 
; 514  : 			bool bSetUpKey, bSetDownKey;
; 515  : 			rkPacket >> bSetUpKey >> bSetDownKey;

  00065	8d 45 fc	 lea	 eax, DWORD PTR _bSetDownKey$530865[ebp]
  00068	50		 push	 eax
  00069	8d 45 fd	 lea	 eax, DWORD PTR _bSetUpKey$530864[ebp]
  0006c	50		 push	 eax
  0006d	8b cf		 mov	 ecx, edi
  0006f	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>

; 516  : 
; 517  : 			pChar->SetTargetRotToRotate( qtRot, true );

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  0007e	53		 push	 ebx
  0007f	6a 01		 push	 1
  00081	8d 45 e4	 lea	 eax, DWORD PTR _qtRot$530862[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 518  : 
; 519  : 			if( bChangeDir )

  0008a	38 5d 13	 cmp	 BYTE PTR _bChangeDir$530860[ebp], bl
  0008d	74 27		 je	 SHORT $LN2@ApplyExtra

; 520  : 			{
; 521  : 				m_bTargetRot = false;

  0008f	8d 45 ff	 lea	 eax, DWORD PTR _value$536463[ebp]
  00092	50		 push	 eax
  00093	8d 8e 00 13 00
	00		 lea	 ecx, DWORD PTR [esi+4864]
  00099	88 5d ff	 mov	 BYTE PTR _value$536463[ebp], bl
  0009c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 522  : 				m_PreDirKey = m_CurDirKey;

  000a1	8b 8e 18 14 00
	00		 mov	 ecx, DWORD PTR [esi+5144]
  000a7	89 8e 14 14 00
	00		 mov	 DWORD PTR [esi+5140], ecx

; 523  : 				m_CurDirKey = (ioUserKeyInput::DirKeyInput)iDir;

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR _iDir$530863[ebp]
  000b0	89 8e 18 14 00
	00		 mov	 DWORD PTR [esi+5144], ecx
$LN2@ApplyExtra:

; 524  : 			}
; 525  : 
; 526  : 			if( bChangeUpDown )

  000b6	38 5d fe	 cmp	 BYTE PTR _bChangeUpDown$530861[ebp], bl
  000b9	74 34		 je	 SHORT $LN1@ApplyExtra

; 527  : 			{
; 528  : 				m_bSetUpKey = bSetUpKey;

  000bb	8a 45 fd	 mov	 al, BYTE PTR _bSetUpKey$530864[ebp]
  000be	88 45 ff	 mov	 BYTE PTR _value$536467[ebp], al
  000c1	8d 45 ff	 lea	 eax, DWORD PTR _value$536467[ebp]
  000c4	50		 push	 eax
  000c5	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  000cb	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 529  : 				m_bSetDownKey = bSetDownKey;

  000d0	8a 45 fc	 mov	 al, BYTE PTR _bSetDownKey$530865[ebp]
  000d3	88 45 ff	 mov	 BYTE PTR _value$536472[ebp], al
  000d6	8d 45 ff	 lea	 eax, DWORD PTR _value$536472[ebp]
  000d9	50		 push	 eax
  000da	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  000e0	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 530  : 
; 531  : 				CheckUpDownEffect( pChar );

  000e5	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  000e8	8b ce		 mov	 ecx, esi
  000ea	e8 00 00 00 00	 call	 ?CheckUpDownEffect@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::CheckUpDownEffect
$LN1@ApplyExtra:
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx

; 532  : 			}
; 533  : 		}
; 534  : 		break;
; 535  : 	}
; 536  : }

  000f2	c9		 leave
  000f3	c2 0c 00	 ret	 12			; 0000000cH
?ApplyExtraSkillInfo@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@AAVSP2Packet@@@Z ENDP ; ioMechanicsFireSkill::ApplyExtraSkillInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::CheckKeyInput
EXTRN	??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@_N@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@_N@Z:PROC			; SP2Packet::operator<<
EXTRN	?IsDefenseKeyDown@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsDefenseKeyDown
EXTRN	?IsJumpKeyDown@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsJumpKeyDown
EXTRN	?CheckCurDirKey@ioBaseChar@@QAE?AW4DirKeyInput@ioUserKeyInput@@XZ:PROC ; ioBaseChar::CheckCurDirKey
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomechanicsfireskill.cpp
xdata$x	ENDS
;	COMDAT ?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_bChangeDir$ = -32817					; size = 1
_bChangeUpDown$ = -32813				; size = 1
_value$536517 = -32809					; size = 1
_value$536513 = -32809					; size = 1
_value$536509 = -32809					; size = 1
_value$536501 = -32809					; size = 1
_value$536493 = -32809					; size = 1
_value$536489 = -32809					; size = 1
_value$536497 = -32809					; size = 1
_value$536481 = -32809					; size = 1
_value$536485 = -32809					; size = 1
_kPacket$530924 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z PROC ; ioMechanicsFireSkill::CheckKeyInput, COMDAT
; _this$ = ecx

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 28 80 00 00	 mov	 eax, 32808		; 00008028H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 589  : 	if( !pOwner ) return;

  00037	85 db		 test	 ebx, ebx
  00039	0f 84 9f 02 00
	00		 je	 $LN1@CheckKeyIn

; 590  : 	if( !pOwner->IsNeedProcess() )

  0003f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00041	8b cb		 mov	 ecx, ebx
  00043	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00049	84 c0		 test	 al, al
  0004b	0f 84 8d 02 00
	00		 je	 $LN1@CheckKeyIn

; 591  : 		return;
; 592  : 
; 593  : 	bool bChangeDir = false;
; 594  : 	bool bChangeUpDown = false;
; 595  : 
; 596  : 	// Check Dir
; 597  : 	ioUserKeyInput::DirKeyInput eNewDirKey = pOwner->CheckCurDirKey();

  00051	8b cb		 mov	 ecx, ebx
  00053	c6 85 cf 7f ff
	ff 00		 mov	 BYTE PTR _bChangeDir$[ebp], 0
  0005a	c6 85 d3 7f ff
	ff 00		 mov	 BYTE PTR _bChangeUpDown$[ebp], 0
  00061	e8 00 00 00 00	 call	 ?CheckCurDirKey@ioBaseChar@@QAE?AW4DirKeyInput@ioUserKeyInput@@XZ ; ioBaseChar::CheckCurDirKey
  00066	8b f8		 mov	 edi, eax

; 598  : 	if( eNewDirKey != m_CurDirKey )

  00068	3b be 18 14 00
	00		 cmp	 edi, DWORD PTR [esi+5144]
  0006e	74 32		 je	 SHORT $LN15@CheckKeyIn

; 599  : 	{
; 600  : 		bChangeDir = true;
; 601  : 		m_bTargetRot = false;

  00070	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536481[ebp]
  00076	50		 push	 eax
  00077	8d 8e 00 13 00
	00		 lea	 ecx, DWORD PTR [esi+4864]
  0007d	c6 85 cf 7f ff
	ff 01		 mov	 BYTE PTR _bChangeDir$[ebp], 1
  00084	c6 85 d7 7f ff
	ff 00		 mov	 BYTE PTR _value$536481[ebp], 0
  0008b	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 602  : 
; 603  : 		m_PreDirKey = m_CurDirKey;

  00090	8b 86 18 14 00
	00		 mov	 eax, DWORD PTR [esi+5144]
  00096	89 86 14 14 00
	00		 mov	 DWORD PTR [esi+5140], eax

; 604  : 		m_CurDirKey = eNewDirKey;

  0009c	89 be 18 14 00
	00		 mov	 DWORD PTR [esi+5144], edi
$LN15@CheckKeyIn:

; 605  : 	}
; 606  : 
; 607  : 	// Check UpDown
; 608  : 	if( m_bSetUpKey )

  000a2	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536485[ebp]
  000a8	50		 push	 eax
  000a9	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  000af	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  000b4	80 bd d7 7f ff
	ff 00		 cmp	 BYTE PTR _value$536485[ebp], 0
  000bb	74 5b		 je	 SHORT $LN14@CheckKeyIn

; 609  : 	{
; 610  : 		if( !pOwner->IsJumpKeyDown() )

  000bd	8b cb		 mov	 ecx, ebx
  000bf	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsJumpKeyDown
  000c4	84 c0		 test	 al, al
  000c6	0f 85 21 01 00
	00		 jne	 $LN4@CheckKeyIn

; 611  : 		{
; 612  : 			bChangeUpDown = true;
; 613  : 			m_bSetUpKey = false;

  000cc	88 85 d7 7f ff
	ff		 mov	 BYTE PTR _value$536489[ebp], al
  000d2	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536489[ebp]
  000d8	50		 push	 eax
  000d9	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  000df	c6 85 d3 7f ff
	ff 01		 mov	 BYTE PTR _bChangeUpDown$[ebp], 1
  000e6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 614  : 
; 615  : 			if( pOwner->IsDefenseKeyDown() )

  000eb	8b cb		 mov	 ecx, ebx
  000ed	e8 00 00 00 00	 call	 ?IsDefenseKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsDefenseKeyDown
  000f2	84 c0		 test	 al, al
  000f4	0f 84 eb 00 00
	00		 je	 $LN47@CheckKeyIn

; 616  : 				m_bSetDownKey = true;

  000fa	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
$LN51@CheckKeyIn:
  00100	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536493[ebp]
  00106	50		 push	 eax
  00107	c6 85 d7 7f ff
	ff 01		 mov	 BYTE PTR _value$536493[ebp], 1
  0010e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 617  : 		}
; 618  : 	}

  00113	e9 cd 00 00 00	 jmp	 $LN47@CheckKeyIn
$LN14@CheckKeyIn:

; 619  : 	else if( m_bSetDownKey )

  00118	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536497[ebp]
  0011e	50		 push	 eax
  0011f	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  00125	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 620  : 	{
; 621  : 		if( !pOwner->IsDefenseKeyDown() )

  0012a	8b cb		 mov	 ecx, ebx
  0012c	e8 00 00 00 00	 call	 ?IsDefenseKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsDefenseKeyDown
  00131	80 bd d7 7f ff
	ff 00		 cmp	 BYTE PTR _value$536497[ebp], 0
  00138	74 3a		 je	 SHORT $LN10@CheckKeyIn
  0013a	84 c0		 test	 al, al
  0013c	0f 85 ab 00 00
	00		 jne	 $LN4@CheckKeyIn

; 622  : 		{
; 623  : 			bChangeUpDown = true;
; 624  : 			m_bSetDownKey = false;

  00142	88 85 d7 7f ff
	ff		 mov	 BYTE PTR _value$536501[ebp], al
  00148	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536501[ebp]
  0014e	50		 push	 eax
  0014f	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  00155	c6 85 d3 7f ff
	ff 01		 mov	 BYTE PTR _bChangeUpDown$[ebp], 1
  0015c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 625  : 
; 626  : 			if( pOwner->IsJumpKeyDown() )

  00161	8b cb		 mov	 ecx, ebx
  00163	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsJumpKeyDown
  00168	84 c0		 test	 al, al
  0016a	74 79		 je	 SHORT $LN47@CheckKeyIn

; 627  : 				m_bSetUpKey = true;

  0016c	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]

; 628  : 		}
; 629  : 	}
; 630  : 	else

  00172	eb 8c		 jmp	 SHORT $LN51@CheckKeyIn
$LN10@CheckKeyIn:

; 631  : 	{
; 632  : 		if( pOwner->IsDefenseKeyDown() )

  00174	84 c0		 test	 al, al
  00176	74 20		 je	 SHORT $LN35@CheckKeyIn

; 633  : 		{
; 634  : 			bChangeUpDown = true;
; 635  : 			m_bSetDownKey = true;

  00178	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536509[ebp]
  0017e	50		 push	 eax
  0017f	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  00185	c6 85 d3 7f ff
	ff 01		 mov	 BYTE PTR _bChangeUpDown$[ebp], 1
  0018c	c6 85 d7 7f ff
	ff 01		 mov	 BYTE PTR _value$536509[ebp], 1
  00193	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN35@CheckKeyIn:

; 636  : 		}
; 637  : 
; 638  : 		if( pOwner->IsJumpKeyDown() )

  00198	8b cb		 mov	 ecx, ebx
  0019a	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsJumpKeyDown
  0019f	84 c0		 test	 al, al
  001a1	74 39		 je	 SHORT $LN39@CheckKeyIn

; 639  : 		{
; 640  : 			bChangeUpDown = true;
; 641  : 			m_bSetUpKey = true;

  001a3	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536513[ebp]
  001a9	50		 push	 eax
  001aa	8d 8e 30 13 00
	00		 lea	 ecx, DWORD PTR [esi+4912]
  001b0	c6 85 d3 7f ff
	ff 01		 mov	 BYTE PTR _bChangeUpDown$[ebp], 1
  001b7	c6 85 d7 7f ff
	ff 01		 mov	 BYTE PTR _value$536513[ebp], 1
  001be	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 642  : 			m_bSetDownKey = false;

  001c3	8d 85 d7 7f ff
	ff		 lea	 eax, DWORD PTR _value$536517[ebp]
  001c9	50		 push	 eax
  001ca	8d 8e 60 13 00
	00		 lea	 ecx, DWORD PTR [esi+4960]
  001d0	c6 85 d7 7f ff
	ff 00		 mov	 BYTE PTR _value$536517[ebp], 0
  001d7	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN39@CheckKeyIn:

; 643  : 		}
; 644  : 	}
; 645  : 
; 646  : 	if( bChangeUpDown )

  001dc	80 bd d3 7f ff
	ff 00		 cmp	 BYTE PTR _bChangeUpDown$[ebp], 0
  001e3	74 08		 je	 SHORT $LN4@CheckKeyIn
$LN47@CheckKeyIn:

; 647  : 	{
; 648  : 		CheckUpDownEffect( pOwner );

  001e5	53		 push	 ebx
  001e6	8b ce		 mov	 ecx, esi
  001e8	e8 00 00 00 00	 call	 ?CheckUpDownEffect@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::CheckUpDownEffect
$LN4@CheckKeyIn:

; 649  : 	}
; 650  : 
; 651  : 	if( bChangeDir || bChangeUpDown )

  001ed	80 bd cf 7f ff
	ff 00		 cmp	 BYTE PTR _bChangeDir$[ebp], 0
  001f4	75 0d		 jne	 SHORT $LN2@CheckKeyIn
  001f6	80 bd d3 7f ff
	ff 00		 cmp	 BYTE PTR _bChangeUpDown$[ebp], 0
  001fd	0f 84 db 00 00
	00		 je	 $LN1@CheckKeyIn
$LN2@CheckKeyIn:

; 652  : 	{
; 653  : 		if( pOwner->IsNeedSendNetwork() )

  00203	8b 03		 mov	 eax, DWORD PTR [ebx]
  00205	8b cb		 mov	 ecx, ebx
  00207	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  0020d	84 c0		 test	 al, al
  0020f	0f 84 c9 00 00
	00		 je	 $LN1@CheckKeyIn

; 654  : 		{
; 655  : 			SP2Packet kPacket( CUPK_SKILL_EXTRA_INFO );

  00215	68 39 41 00 00	 push	 16697			; 00004139H
  0021a	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00220	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 656  : 			kPacket << pOwner->GetCharName();

  00225	8d 83 d4 02 00
	00		 lea	 eax, DWORD PTR [ebx+724]
  0022b	33 ff		 xor	 edi, edi
  0022d	50		 push	 eax
  0022e	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00234	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00237	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 657  : 			kPacket << GetName();

  0023c	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  0023f	50		 push	 eax
  00240	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00246	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 658  : 			kPacket << SST_KEY;

  0024b	57		 push	 edi
  0024c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00252	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 659  : 			kPacket << bChangeDir;

  00257	ff b5 cf 7f ff
	ff		 push	 DWORD PTR _bChangeDir$[ebp]
  0025d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00263	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 660  : 			kPacket << bChangeUpDown;

  00268	ff b5 d3 7f ff
	ff		 push	 DWORD PTR _bChangeUpDown$[ebp]
  0026e	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00274	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 661  : 			kPacket << pOwner->GetTargetRot();

  00279	81 c3 a4 06 00
	00		 add	 ebx, 1700		; 000006a4H
  0027f	53		 push	 ebx
  00280	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00286	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 662  : 			kPacket << (int)m_CurDirKey;

  0028b	ff b6 18 14 00
	00		 push	 DWORD PTR [esi+5144]
  00291	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00297	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 663  : 			kPacket << m_bSetUpKey;

  0029c	8d 86 30 13 00
	00		 lea	 eax, DWORD PTR [esi+4912]
  002a2	50		 push	 eax
  002a3	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  002a9	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@_N@@@Z ; SP2Packet::operator<<

; 664  : 			kPacket << m_bSetDownKey;

  002ae	81 c6 60 13 00
	00		 add	 esi, 4960		; 00001360H
  002b4	56		 push	 esi
  002b5	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  002bb	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@AAV?$CEncrypt@_N@@@Z ; SP2Packet::operator<<

; 665  : 			P2PNetwork::SendToAllPlayingUser( kPacket );

  002c0	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$530924[ebp]
  002c6	57		 push	 edi
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 666  : 		}

  002cd	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002d1	59		 pop	 ecx
  002d2	59		 pop	 ecx
  002d3	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  002d9	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@CheckKeyIn:

; 667  : 	}
; 668  : }

  002de	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e8	59		 pop	 ecx
  002e9	5f		 pop	 edi
  002ea	5e		 pop	 esi
  002eb	5b		 pop	 ebx
  002ec	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ef	33 cd		 xor	 ecx, ebp
  002f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f6	c9		 leave
  002f7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$530924[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32824]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ENDP ; ioMechanicsFireSkill::CheckKeyInput
EXTRN	?IsAttackKey@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsAttackKey
; Function compile flags: /Ogsp
;	COMDAT ?OnProcessState@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_value$536590 = -12					; size = 4
_value$536586 = -12					; size = 4
_value$536582 = -12					; size = 4
_value$536569 = -12					; size = 4
_value$536565 = -12					; size = 4
_value$536598 = -12					; size = 4
_value$536577 = -12					; size = 4
_value$536602 = -8					; size = 4
_value$536594 = -8					; size = 4
_value$536573 = -1					; size = 1
_value$536561 = -1					; size = 1
_value$536556 = 8					; size = 4
_value$536548 = 8					; size = 4
_value$536552 = 8					; size = 4
_pChar$ = 8						; size = 4
_pStage$ = 12						; size = 4
?OnProcessState@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z PROC ; ioMechanicsFireSkill::OnProcessState, COMDAT
; _this$ = ecx

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 310  : 	DWORD dwCurTime = FRAMEGETTIME();

  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00011	8b c8		 mov	 ecx, eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00019	8b f8		 mov	 edi, eax

; 311  : 	DWORD dwPreDelay = GetPreDelayTime();

  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	8b ce		 mov	 ecx, esi
  0001f	ff 90 34 01 00
	00		 call	 DWORD PTR [eax+308]

; 312  : 
; 313  : 	switch( m_SkillState )

  00025	8b 8e e4 10 00
	00		 mov	 ecx, DWORD PTR [esi+4324]
  0002b	33 db		 xor	 ebx, ebx
  0002d	2b cb		 sub	 ecx, ebx
  0002f	0f 84 bc 01 00
	00		 je	 $LN18@OnProcessS
  00035	49		 dec	 ecx
  00036	74 64		 je	 SHORT $LN15@OnProcessS
  00038	49		 dec	 ecx
  00039	0f 85 17 02 00
	00		 jne	 $LN27@OnProcessS

; 364  : 	case SS_ACTION:
; 365  : 		if( m_dwActionEndTime < dwCurTime )

  0003f	8d 45 f8	 lea	 eax, DWORD PTR _value$536594[ebp]
  00042	50		 push	 eax
  00043	8d 8e 78 12 00
	00		 lea	 ecx, DWORD PTR [esi+4728]
  00049	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0004e	39 7d f8	 cmp	 DWORD PTR _value$536594[ebp], edi
  00051	0f 83 ff 01 00
	00		 jae	 $LN27@OnProcessS

; 366  : 		{
; 367  : 			if( m_iCurFireCnt < m_iMaxFireCnt )

  00057	8d 45 f4	 lea	 eax, DWORD PTR _value$536598[ebp]
  0005a	50		 push	 eax
  0005b	8d 8e e8 10 00
	00		 lea	 ecx, DWORD PTR [esi+4328]
  00061	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00066	8d 45 f8	 lea	 eax, DWORD PTR _value$536602[ebp]
  00069	50		 push	 eax
  0006a	8d 8e 18 11 00
	00		 lea	 ecx, DWORD PTR [esi+4376]
  00070	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00075	8b 45 f8	 mov	 eax, DWORD PTR _value$536602[ebp]
  00078	3b 45 f4	 cmp	 eax, DWORD PTR _value$536598[ebp]
  0007b	7d 10		 jge	 SHORT $LN3@OnProcessS

; 368  : 				SetChargeState( pChar, false );

  0007d	53		 push	 ebx
  0007e	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z ; ioMechanicsFireSkill::SetChargeState

; 369  : 			else

  00088	e9 c9 01 00 00	 jmp	 $LN27@OnProcessS
$LN3@OnProcessS:

; 370  : 				SetEndState( pChar );

  0008d	c7 86 e4 10 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+4324], 3

; 371  : 		}
; 372  : 		break;

  00097	e9 ba 01 00 00	 jmp	 $LN27@OnProcessS
$LN15@OnProcessS:

; 325  : 		}
; 326  : 		break;
; 327  : 	case SS_CHARGE:
; 328  : 		if( !m_bSetMaxCharge && m_dwChargeMaxTime > 0 && m_dwChargeMaxTime < dwCurTime )

  0009c	8d 45 ff	 lea	 eax, DWORD PTR _value$536561[ebp]
  0009f	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  000ab	38 5d ff	 cmp	 BYTE PTR _value$536561[ebp], bl
  000ae	0f 85 a0 00 00
	00		 jne	 $LN14@OnProcessS
  000b4	8d 45 f4	 lea	 eax, DWORD PTR _value$536565[ebp]
  000b7	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000c3	39 5d f4	 cmp	 DWORD PTR _value$536565[ebp], ebx
  000c6	0f 86 88 00 00
	00		 jbe	 $LN14@OnProcessS
  000cc	8d 45 f4	 lea	 eax, DWORD PTR _value$536569[ebp]
  000cf	50		 push	 eax
  000d0	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  000d6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000db	39 7d f4	 cmp	 DWORD PTR _value$536569[ebp], edi
  000de	73 74		 jae	 SHORT $LN14@OnProcessS

; 329  : 		{
; 330  : 			m_bSetMaxCharge = true;

  000e0	8d 45 ff	 lea	 eax, DWORD PTR _value$536573[ebp]
  000e3	50		 push	 eax
  000e4	8d 8e d0 12 00
	00		 lea	 ecx, DWORD PTR [esi+4816]
  000ea	c6 45 ff 01	 mov	 BYTE PTR _value$536573[ebp], 1
  000ee	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 331  : 			if( m_dwChargeEffect > 0 )

  000f3	8b 86 c8 12 00
	00		 mov	 eax, DWORD PTR [esi+4808]
  000f9	3b c3		 cmp	 eax, ebx
  000fb	76 10		 jbe	 SHORT $LN13@OnProcessS

; 332  : 			{
; 333  : 				pChar->EndEffect( m_dwChargeEffect, false );

  000fd	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00100	53		 push	 ebx
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXK_N@Z ; ioBaseChar::EndEffect

; 334  : 				m_dwChargeEffect = 0;

  00107	89 9e c8 12 00
	00		 mov	 DWORD PTR [esi+4808], ebx
$LN13@OnProcessS:

; 335  : 			}
; 336  : 
; 337  : 			if( m_dwChargeMaxEffect == 0 && !m_ChargeMaxEffect.IsEmpty() )

  0010d	39 9e cc 12 00
	00		 cmp	 DWORD PTR [esi+4812], ebx
  00113	0f 85 b8 00 00
	00		 jne	 $LN53@OnProcessS
  00119	8d be b8 12 00
	00		 lea	 edi, DWORD PTR [esi+4792]
  0011f	8b cf		 mov	 ecx, edi
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00127	84 c0		 test	 al, al
  00129	0f 85 a2 00 00
	00		 jne	 $LN53@OnProcessS

; 338  : 			{
; 339  : 				ioEffect *pEffect = pChar->AttachEffect( m_ChargeMaxEffect );

  0012f	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00132	6a 01		 push	 1
  00134	53		 push	 ebx
  00135	57		 push	 edi
  00136	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 340  : 				if( pEffect )

  0013b	3b c3		 cmp	 eax, ebx
  0013d	0f 84 8e 00 00
	00		 je	 $LN53@OnProcessS

; 341  : 					m_dwChargeMaxEffect = pEffect->GetUniqueID();

  00143	8d 48 14	 lea	 ecx, DWORD PTR [eax+20]
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetUniqueID@ioMovableObject@@QBEKXZ
  0014c	89 86 cc 12 00
	00		 mov	 DWORD PTR [esi+4812], eax

; 342  : 			}
; 343  : 		}

  00152	eb 7d		 jmp	 SHORT $LN53@OnProcessS
$LN14@OnProcessS:

; 344  : 		else if( COMPARE(dwCurTime, m_dwChargeMaxTime, m_dwFireEnableTime) )

  00154	8d 45 f4	 lea	 eax, DWORD PTR _value$536577[ebp]
  00157	50		 push	 eax
  00158	8d 8e 18 12 00
	00		 lea	 ecx, DWORD PTR [esi+4632]
  0015e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00163	3b 7d f4	 cmp	 edi, DWORD PTR _value$536577[ebp]
  00166	72 41		 jb	 SHORT $LN9@OnProcessS
  00168	8d 45 f4	 lea	 eax, DWORD PTR _value$536582[ebp]
  0016b	50		 push	 eax
  0016c	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  00172	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00177	3b 7d f4	 cmp	 edi, DWORD PTR _value$536582[ebp]
  0017a	73 2d		 jae	 SHORT $LN9@OnProcessS

; 345  : 		{
; 346  : 			// attack key Check
; 347  : 			if( pChar->IsNeedProcess() && pChar->IsAttackKey() )

  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  0017f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00181	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00187	84 c0		 test	 al, al
  00189	74 46		 je	 SHORT $LN53@OnProcessS
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  0018e	e8 00 00 00 00	 call	 ?IsAttackKey@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKey
  00193	84 c0		 test	 al, al
  00195	74 3a		 je	 SHORT $LN53@OnProcessS
$LN54@OnProcessS:

; 348  : 			{
; 349  : 				AttackSkillFire( pChar );

  00197	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  0019a	8b 06		 mov	 eax, DWORD PTR [esi]
  0019c	8b ce		 mov	 ecx, esi
  0019e	ff 90 8c 01 00
	00		 call	 DWORD PTR [eax+396]

; 350  : 				return;

  001a4	e9 ad 00 00 00	 jmp	 $LN27@OnProcessS
$LN9@OnProcessS:

; 351  : 			}
; 352  : 		}
; 353  : 		else if( m_dwFireEnableTime > 0 && m_dwFireEnableTime < dwCurTime )

  001a9	8d 45 f4	 lea	 eax, DWORD PTR _value$536586[ebp]
  001ac	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  001b8	39 5d f4	 cmp	 DWORD PTR _value$536586[ebp], ebx
  001bb	76 14		 jbe	 SHORT $LN53@OnProcessS
  001bd	8d 45 f4	 lea	 eax, DWORD PTR _value$536590[ebp]
  001c0	50		 push	 eax
  001c1	8d 8e 48 12 00
	00		 lea	 ecx, DWORD PTR [esi+4680]
  001c7	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  001cc	39 7d f4	 cmp	 DWORD PTR _value$536590[ebp], edi

; 354  : 		{
; 355  : 			AttackSkillFire( pChar );
; 356  : 			return;

  001cf	72 c6		 jb	 SHORT $LN54@OnProcessS
$LN53@OnProcessS:

; 357  : 		}
; 358  : 
; 359  : 		// check key
; 360  : 		CheckKeyInput( pChar );

  001d1	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  001d4	8b ce		 mov	 ecx, esi
  001d6	e8 00 00 00 00	 call	 ?CheckKeyInput@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::CheckKeyInput

; 361  : 		ProcessRotate( pChar );

  001db	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  001de	8b ce		 mov	 ecx, esi
  001e0	e8 00 00 00 00	 call	 ?ProcessRotate@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::ProcessRotate

; 362  : 		ProcessMove( pChar );

  001e5	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  001e8	8b ce		 mov	 ecx, esi
  001ea	e8 00 00 00 00	 call	 ?ProcessMove@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@@Z ; ioMechanicsFireSkill::ProcessMove

; 363  : 		break;

  001ef	eb 65		 jmp	 SHORT $LN27@OnProcessS
$LN18@OnProcessS:

; 314  : 	{
; 315  : 	case SS_NONE:
; 316  : 		if( m_dwPreDelayStartTime + dwPreDelay < dwCurTime )

  001f1	8b 96 20 02 00
	00		 mov	 edx, DWORD PTR [esi+544]
  001f7	03 d0		 add	 edx, eax
  001f9	3b d7		 cmp	 edx, edi
  001fb	73 59		 jae	 SHORT $LN27@OnProcessS

; 317  : 		{
; 318  : 			m_dwPreDelayStartTime = 0;
; 319  : 
; 320  : 			SetChargeState( pChar, true );

  001fd	6a 01		 push	 1
  001ff	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00202	8b ce		 mov	 ecx, esi
  00204	89 9e 20 02 00
	00		 mov	 DWORD PTR [esi+544], ebx
  0020a	e8 00 00 00 00	 call	 ?SetChargeState@ioMechanicsFireSkill@@IAEXPAVioBaseChar@@_N@Z ; ioMechanicsFireSkill::SetChargeState

; 321  : 			EndPreDelayEffect( pChar );

  0020f	ff 75 08	 push	 DWORD PTR _pChar$[ebp]
  00212	8b 06		 mov	 eax, DWORD PTR [esi]
  00214	8b ce		 mov	 ecx, esi
  00216	ff 90 dc 00 00
	00		 call	 DWORD PTR [eax+220]

; 322  : 
; 323  : 			if( m_dwSkillProtectTime > 0 )

  0021c	8d 45 08	 lea	 eax, DWORD PTR _value$536548[ebp]
  0021f	8d 8e 48 11 00
	00		 lea	 ecx, DWORD PTR [esi+4424]
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0022b	39 5d 08	 cmp	 DWORD PTR _value$536548[ebp], ebx
  0022e	76 26		 jbe	 SHORT $LN27@OnProcessS

; 324  : 				m_dwCurSkillProtectTime = dwCurTime + m_dwSkillProtectTime;

  00230	8d 45 08	 lea	 eax, DWORD PTR _value$536552[ebp]
  00233	50		 push	 eax
  00234	8d 8e 48 11 00
	00		 lea	 ecx, DWORD PTR [esi+4424]
  0023a	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0023f	8b 45 08	 mov	 eax, DWORD PTR _value$536552[ebp]
  00242	03 c7		 add	 eax, edi
  00244	89 45 08	 mov	 DWORD PTR _value$536556[ebp], eax
  00247	8d 45 08	 lea	 eax, DWORD PTR _value$536556[ebp]
  0024a	50		 push	 eax
  0024b	8d 8e 78 11 00
	00		 lea	 ecx, DWORD PTR [esi+4472]
  00251	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
$LN27@OnProcessS:
  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	5b		 pop	 ebx

; 373  : 	case SS_END:
; 374  : 		break;
; 375  : 	}
; 376  : }

  00259	c9		 leave
  0025a	c2 08 00	 ret	 8
?OnProcessState@ioMechanicsFireSkill@@UAEXPAVioBaseChar@@PAVioPlayStage@@@Z ENDP ; ioMechanicsFireSkill::OnProcessState
_TEXT	ENDS
END
