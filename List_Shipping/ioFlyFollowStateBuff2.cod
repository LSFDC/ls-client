; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioFlyFollowStateBuff2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_7ioFlyFollowStateBuff2@@6B@			; ioFlyFollowStateBuff2::`vftable'
PUBLIC	??1ioFlyFollowStateBuff2@@UAE@XZ		; ioFlyFollowStateBuff2::~ioFlyFollowStateBuff2
PUBLIC	??_R4ioFlyFollowStateBuff2@@6B@			; ioFlyFollowStateBuff2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioFlyFollowStateBuff2@@@8		; ioFlyFollowStateBuff2 `RTTI Type Descriptor'
PUBLIC	??_R3ioFlyFollowStateBuff2@@8			; ioFlyFollowStateBuff2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioFlyFollowStateBuff2@@8			; ioFlyFollowStateBuff2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioFlyFollowStateBuff2@@8		; ioFlyFollowStateBuff2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioFlyFollowStateBuff2@@UAEXAAVioINILoader@@@Z ; ioFlyFollowStateBuff2::LoadProperty
PUBLIC	?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ	; ioFlyFollowStateBuff2::Clone
PUBLIC	?StartBuff@ioFlyFollowStateBuff2@@UAEXPAVioBaseChar@@@Z ; ioFlyFollowStateBuff2::StartBuff
PUBLIC	?ApplyStartBuff@ioFlyFollowStateBuff2@@UAE_NPAVioBaseChar@@KK@Z ; ioFlyFollowStateBuff2::ApplyStartBuff
PUBLIC	?ProcessBuff@ioFlyFollowStateBuff2@@UAEXM@Z	; ioFlyFollowStateBuff2::ProcessBuff
PUBLIC	?EndBuff@ioFlyFollowStateBuff2@@UAEXXZ		; ioFlyFollowStateBuff2::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioFlyFollowStateBuff2@@UAEPAXI@Z:PROC	; ioFlyFollowStateBuff2::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioflyfollowstatebuff2.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioFlyFollowStateBuff2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioFlyFollowStateBuff2@@8 DD FLAT:??_R0?AVioFlyFollowStateBuff2@@@8 ; ioFlyFollowStateBuff2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioFlyFollowStateBuff2@@8
rdata$r	ENDS
;	COMDAT ??_R2ioFlyFollowStateBuff2@@8
rdata$r	SEGMENT
??_R2ioFlyFollowStateBuff2@@8 DD FLAT:??_R1A@?0A@EA@ioFlyFollowStateBuff2@@8 ; ioFlyFollowStateBuff2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioFlyFollowStateBuff2@@8
rdata$r	SEGMENT
??_R3ioFlyFollowStateBuff2@@8 DD 00H			; ioFlyFollowStateBuff2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioFlyFollowStateBuff2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioFlyFollowStateBuff2@@@8
_DATA	SEGMENT
??_R0?AVioFlyFollowStateBuff2@@@8 DD FLAT:??_7type_info@@6B@ ; ioFlyFollowStateBuff2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioFlyFollowStateBuff2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioFlyFollowStateBuff2@@6B@
rdata$r	SEGMENT
??_R4ioFlyFollowStateBuff2@@6B@ DD 00H			; ioFlyFollowStateBuff2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioFlyFollowStateBuff2@@@8
	DD	FLAT:??_R3ioFlyFollowStateBuff2@@8
rdata$r	ENDS
;	COMDAT ??_7ioFlyFollowStateBuff2@@6B@
CONST	SEGMENT
??_7ioFlyFollowStateBuff2@@6B@ DD FLAT:??_R4ioFlyFollowStateBuff2@@6B@ ; ioFlyFollowStateBuff2::`vftable'
	DD	FLAT:?LoadProperty@ioFlyFollowStateBuff2@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioFlyFollowStateBuff2@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioFlyFollowStateBuff2@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioFlyFollowStateBuff2@@UAEXM@Z
	DD	FLAT:?EndBuff@ioFlyFollowStateBuff2@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioFlyFollowStateBuff2@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioFlyFollowStateBuff2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioFlyFollowStateBuff2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioFlyFollowStateBuff2@@UAE@XZ$1
__ehfuncinfo$??1ioFlyFollowStateBuff2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioFlyFollowStateBuff2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioFlyFollowStateBuff2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioFlyFollowStateBuff2@@UAE@XZ PROC			; ioFlyFollowStateBuff2::~ioFlyFollowStateBuff2, COMDAT
; _this$ = ecx

; 41   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioFlyFollowStateBuff2@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioFlyFollowStateBuff2@@6B@

; 42   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  00023	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0002a	ff d7		 call	 edi
  0002c	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00032	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00036	ff d7		 call	 edi
  00038	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioFlyFollowStateBuff2@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioFlyFollowStateBuff2@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 70 09 00
	00		 add	 ecx, 2416		; 00000970H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioFlyFollowStateBuff2@@UAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioFlyFollowStateBuff2@@UAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioFlyFollowStateBuff2@@UAE@XZ ENDP			; ioFlyFollowStateBuff2::~ioFlyFollowStateBuff2
PUBLIC	?ProcessWaitState@ioFlyFollowStateBuff2@@AAEXM@Z ; ioFlyFollowStateBuff2::ProcessWaitState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ProcessWaitState@ioFlyFollowStateBuff2@@AAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessWaitState@ioFlyFollowStateBuff2@@AAEXM@Z PROC	; ioFlyFollowStateBuff2::ProcessWaitState, COMDAT
; _this$ = ecx

; 238  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 239  : 	if ( m_dwWaitEndTime > 0 && m_dwWaitEndTime < FRAMEGETTIME() )

  00004	83 bf a4 09 00
	00 00		 cmp	 DWORD PTR [edi+2468], 0
  0000b	76 24		 jbe	 SHORT $LN1@ProcessWai
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00013	8b c8		 mov	 ecx, eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0001b	39 87 a4 09 00
	00		 cmp	 DWORD PTR [edi+2468], eax
  00021	73 0e		 jae	 SHORT $LN1@ProcessWai

; 240  : 	{
; 241  : 		m_dwWaitEndTime = 0;

  00023	83 a7 a4 09 00
	00 00		 and	 DWORD PTR [edi+2468], 0

; 242  : 		SetReserveEndBuff();

  0002a	8b cf		 mov	 ecx, edi
  0002c	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessWai:

; 243  : 		return;
; 244  : 	}
; 245  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	c2 04 00	 ret	 4
?ProcessWaitState@ioFlyFollowStateBuff2@@AAEXM@Z ENDP	; ioFlyFollowStateBuff2::ProcessWaitState
_TEXT	ENDS
PUBLIC	?IsCharCollisionSkipState@ioFlyFollowStateBuff2@@QAE_NXZ ; ioFlyFollowStateBuff2::IsCharCollisionSkipState
; Function compile flags: /Ogsp
;	COMDAT ?IsCharCollisionSkipState@ioFlyFollowStateBuff2@@QAE_NXZ
_TEXT	SEGMENT
?IsCharCollisionSkipState@ioFlyFollowStateBuff2@@QAE_NXZ PROC ; ioFlyFollowStateBuff2::IsCharCollisionSkipState, COMDAT
; _this$ = ecx

; 249  : 	return m_bCharCol;

  00000	8a 81 e4 09 00
	00		 mov	 al, BYTE PTR [ecx+2532]

; 250  : }

  00006	c3		 ret	 0
?IsCharCollisionSkipState@ioFlyFollowStateBuff2@@QAE_NXZ ENDP ; ioFlyFollowStateBuff2::IsCharCollisionSkipState
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00012	0f 5a c9	 cvtps2pd xmm1, xmm1
  00015	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00019	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0001e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00022	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00043	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00048	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00052	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00056	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 394  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?Init@tagBlowWoundAniInfo@@QAEXXZ		; tagBlowWoundAniInfo::Init
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\weaponattribute.h
;	COMDAT ?Init@tagBlowWoundAniInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@tagBlowWoundAniInfo@@QAEXXZ PROC			; tagBlowWoundAniInfo::Init, COMDAT
; _this$ = ecx

; 310  : 	{

  00000	56		 push	 esi

; 311  : 		m_BlowingAni.Clear();

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff d6		 call	 esi

; 312  : 		m_BlowingBackAni.Clear();

  0000c	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0000f	ff d6		 call	 esi

; 313  : 
; 314  : 		m_JumpBlowingAni.Clear();

  00011	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00014	ff d6		 call	 esi

; 315  : 		m_JumpBlowingBackAni.Clear();

  00016	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00019	ff d6		 call	 esi

; 316  : 
; 317  : 		m_DownAni.Clear();

  0001b	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  0001e	ff d6		 call	 esi

; 318  : 		m_DownBackAni.Clear();

  00020	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  00023	ff d6		 call	 esi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 319  : 	}

  00027	c3		 ret	 0
?Init@tagBlowWoundAniInfo@@QAEXXZ ENDP			; tagBlowWoundAniInfo::Init
_TEXT	ENDS
PUBLIC	??1tagBlowWoundAniInfo@@QAE@XZ			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1tagBlowWoundAniInfo@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1tagBlowWoundAniInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1tagBlowWoundAniInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$4
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1tagBlowWoundAniInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1tagBlowWoundAniInfo@@QAE@XZ PROC			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1tagBlowWoundAniInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  0001a	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00021	ff d6		 call	 esi
  00023	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00026	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0002a	ff d6		 call	 esi
  0002c	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0002f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00033	ff d6		 call	 esi
  00035	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003c	ff d6		 call	 esi
  0003e	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00041	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00045	ff d6		 call	 esi
  00047	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b cf		 mov	 ecx, edi
  0004d	ff d6		 call	 esi
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 30	 add	 ecx, 48			; 00000030H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 40	 add	 ecx, 64			; 00000040H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1tagBlowWoundAniInfo@@QAE@XZ:
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1tagBlowWoundAniInfo@@QAE@XZ
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1tagBlowWoundAniInfo@@QAE@XZ ENDP			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	??0ioFlyFollowStateBuff2@@QAE@XZ		; ioFlyFollowStateBuff2::ioFlyFollowStateBuff2
EXTRN	__imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
;	COMDAT __real@3f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioFlyFollowStateBuff2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@XZ$1
__ehfuncinfo$??0ioFlyFollowStateBuff2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioFlyFollowStateBuff2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioflyfollowstatebuff2.cpp
xdata$x	ENDS
;	COMDAT ??0ioFlyFollowStateBuff2@@QAE@XZ
_TEXT	SEGMENT
$T530519 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioFlyFollowStateBuff2@@QAE@XZ PROC			; ioFlyFollowStateBuff2::ioFlyFollowStateBuff2, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioFlyFollowStateBuff2@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001c	33 ff		 xor	 edi, edi
  0001e	8d 8b 70 09 00
	00		 lea	 ecx, DWORD PTR [ebx+2416]
  00024	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00027	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7ioFlyFollowStateBuff2@@6B@
  0002d	ff d6		 call	 esi
  0002f	8d 8b 8c 09 00
	00		 lea	 ecx, DWORD PTR [ebx+2444]
  00035	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00039	ff d6		 call	 esi

; 11   : 	m_BuffState = BS_NONE;
; 12   : 	m_dwMovingEndTime = 0;
; 13   : 	m_dwWaitEndTime = 0;
; 14   : 	m_vNorLookAt = ioMath::VEC3_ZERO;
; 15   : 	m_vBeforeScale = D3DXVECTOR3( 1.0f, 1.0f, 1.0f );

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00043	89 bb 6c 09 00
	00		 mov	 DWORD PTR [ebx+2412], edi
  00049	89 bb 88 09 00
	00		 mov	 DWORD PTR [ebx+2440], edi
  0004f	89 bb a4 09 00
	00		 mov	 DWORD PTR [ebx+2468], edi
  00055	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  0005b	8d bb cc 09 00
	00		 lea	 edi, DWORD PTR [ebx+2508]
  00061	a5		 movsd
  00062	a5		 movsd
  00063	a5		 movsd
  00064	f3 0f 11 45 e4	 movss	 DWORD PTR $T530519[ebp], xmm0
  00069	f3 0f 11 45 e8	 movss	 DWORD PTR $T530519[ebp+4], xmm0
  0006e	f3 0f 11 45 ec	 movss	 DWORD PTR $T530519[ebp+8], xmm0
  00073	8d bb b4 09 00
	00		 lea	 edi, DWORD PTR [ebx+2484]
  00079	8d 75 e4	 lea	 esi, DWORD PTR $T530519[ebp]
  0007c	a5		 movsd
  0007d	a5		 movsd
  0007e	a5		 movsd

; 16   : }

  0007f	8b c3		 mov	 eax, ebx
  00081	e8 00 00 00 00	 call	 __EH_epilog3
  00086	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 70 09 00
	00		 add	 ecx, 2416		; 00000970H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioFlyFollowStateBuff2@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioFlyFollowStateBuff2@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioFlyFollowStateBuff2@@QAE@XZ ENDP			; ioFlyFollowStateBuff2::ioFlyFollowStateBuff2
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioFlyFollowStateBuff2@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioFlyFollowStateBuff2@@UAEPAXI@Z PROC		; ioFlyFollowStateBuff2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioFlyFollowStateBuff2@@UAE@XZ ; ioFlyFollowStateBuff2::~ioFlyFollowStateBuff2
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioFlyFollowStateBuff2@@UAEPAXI@Z ENDP		; ioFlyFollowStateBuff2::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z		; ioFlyFollowStateBuff2::ioFlyFollowStateBuff2
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
xdata$x	SEGMENT
__unwindtable$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z$1
__ehfuncinfo$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioflyfollowstatebuff2.cpp
xdata$x	ENDS
;	COMDAT ??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T530528 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z PROC		; ioFlyFollowStateBuff2::ioFlyFollowStateBuff2, COMDAT
; _this$ = ecx

; 32   : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  00011	8b 75 08	 mov	 esi, DWORD PTR _rhs$[ebp]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	8d 86 70 09 00
	00		 lea	 eax, DWORD PTR [esi+2416]
  0002a	50		 push	 eax
  0002b	8d 8b 70 09 00
	00		 lea	 ecx, DWORD PTR [ebx+2416]
  00031	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7ioFlyFollowStateBuff2@@6B@
  00037	ff d7		 call	 edi
  00039	d9 86 80 09 00
	00		 fld	 DWORD PTR [esi+2432]
  0003f	d9 9b 80 09 00
	00		 fstp	 DWORD PTR [ebx+2432]
  00045	8b 86 84 09 00
	00		 mov	 eax, DWORD PTR [esi+2436]
  0004b	89 83 84 09 00
	00		 mov	 DWORD PTR [ebx+2436], eax
  00051	8d 86 8c 09 00
	00		 lea	 eax, DWORD PTR [esi+2444]
  00057	50		 push	 eax
  00058	8d 8b 8c 09 00
	00		 lea	 ecx, DWORD PTR [ebx+2444]
  0005e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00062	ff d7		 call	 edi
  00064	d9 86 9c 09 00
	00		 fld	 DWORD PTR [esi+2460]
  0006a	d9 9b 9c 09 00
	00		 fstp	 DWORD PTR [ebx+2460]
  00070	8b 86 a0 09 00
	00		 mov	 eax, DWORD PTR [esi+2464]
  00076	89 83 a0 09 00
	00		 mov	 DWORD PTR [ebx+2464], eax
  0007c	8b 45 08	 mov	 eax, DWORD PTR _rhs$[ebp]
  0007f	81 c6 a8 09 00
	00		 add	 esi, 2472		; 000009a8H
  00085	8d bb a8 09 00
	00		 lea	 edi, DWORD PTR [ebx+2472]
  0008b	a5		 movsd
  0008c	a5		 movsd
  0008d	a5		 movsd
  0008e	8d b0 c0 09 00
	00		 lea	 esi, DWORD PTR [eax+2496]
  00094	8d bb c0 09 00
	00		 lea	 edi, DWORD PTR [ebx+2496]
  0009a	a5		 movsd
  0009b	a5		 movsd
  0009c	a5		 movsd
  0009d	d9 80 d8 09 00
	00		 fld	 DWORD PTR [eax+2520]
  000a3	d9 9b d8 09 00
	00		 fstp	 DWORD PTR [ebx+2520]
  000a9	8a 88 dc 09 00
	00		 mov	 cl, BYTE PTR [eax+2524]

; 33   : 	m_BuffState = BS_NONE;
; 34   : 	m_dwMovingEndTime = 0;
; 35   : 	m_dwWaitEndTime = 0;
; 36   : 	m_vNorLookAt = ioMath::VEC3_ZERO;
; 37   : 	m_vBeforeScale = D3DXVECTOR3( 1.0f, 1.0f, 1.0f );

  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	88 8b dc 09 00
	00		 mov	 BYTE PTR [ebx+2524], cl
  000bd	d9 80 e0 09 00
	00		 fld	 DWORD PTR [eax+2528]
  000c3	8d bb cc 09 00
	00		 lea	 edi, DWORD PTR [ebx+2508]
  000c9	d9 9b e0 09 00
	00		 fstp	 DWORD PTR [ebx+2528]
  000cf	8a 80 e4 09 00
	00		 mov	 al, BYTE PTR [eax+2532]
  000d5	88 83 e4 09 00
	00		 mov	 BYTE PTR [ebx+2532], al
  000db	33 c0		 xor	 eax, eax
  000dd	89 83 6c 09 00
	00		 mov	 DWORD PTR [ebx+2412], eax
  000e3	89 83 88 09 00
	00		 mov	 DWORD PTR [ebx+2440], eax
  000e9	89 83 a4 09 00
	00		 mov	 DWORD PTR [ebx+2468], eax
  000ef	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  000f5	a5		 movsd
  000f6	a5		 movsd
  000f7	a5		 movsd
  000f8	f3 0f 11 45 e4	 movss	 DWORD PTR $T530528[ebp], xmm0
  000fd	f3 0f 11 45 e8	 movss	 DWORD PTR $T530528[ebp+4], xmm0
  00102	f3 0f 11 45 ec	 movss	 DWORD PTR $T530528[ebp+8], xmm0
  00107	8d bb b4 09 00
	00		 lea	 edi, DWORD PTR [ebx+2484]
  0010d	8d 75 e4	 lea	 esi, DWORD PTR $T530528[ebp]
  00110	a5		 movsd
  00111	a5		 movsd
  00112	a5		 movsd

; 38   : }

  00113	8b c3		 mov	 eax, ebx
  00115	e8 00 00 00 00	 call	 __EH_epilog3
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 70 09 00
	00		 add	 ecx, 2416		; 00000970H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z ENDP		; ioFlyFollowStateBuff2::ioFlyFollowStateBuff2
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T532106 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ PROC	; ioFlyFollowStateBuff2::Clone, COMDAT
; _this$ = ecx

; 76   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 77   : 	return new ioFlyFollowStateBuff2( *this );

  0000e	68 e8 09 00 00	 push	 2536			; 000009e8H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T532106[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioFlyFollowStateBuff2@@QAE@ABV0@@Z ; ioFlyFollowStateBuff2::ioFlyFollowStateBuff2
$LN3@Clone:

; 78   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T532106[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioFlyFollowStateBuff2@@UAEPAVioBuff@@XZ ENDP	; ioFlyFollowStateBuff2::Clone
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessMove@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@M@Z ; ioFlyFollowStateBuff2::ProcessMove
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?ProcessMove@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_vMoveAmt$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
_fTimePerSec$ = 12					; size = 4
?ProcessMove@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@M@Z PROC ; ioFlyFollowStateBuff2::ProcessMove, COMDAT
; _this$ = ecx

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b c1		 mov	 eax, ecx
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]

; 188  : 	if ( !pOwner )

  00015	85 c9		 test	 ecx, ecx
  00017	0f 84 87 00 00
	00		 je	 $LN3@ProcessMov

; 189  : 		return;
; 190  : 
; 191  : 	ioPlayStage *pStage = pOwner->GetCreator();
; 192  : 	if( !pStage )

  0001d	83 b9 44 03 00
	00 00		 cmp	 DWORD PTR [ecx+836], 0
  00024	74 7e		 je	 SHORT $LN3@ProcessMov

; 193  : 		return;
; 194  : 
; 195  : 	float fCurMoveSpeed = m_fFollowSpeed * fTimePerSec;

  00026	f3 0f 10 80 d8
	09 00 00	 movss	 xmm0, DWORD PTR [eax+2520]
  0002e	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fTimePerSec$[ebp]

; 196  : 	D3DXVECTOR3 vMoveAmt = m_vNorLookAt * fCurMoveSpeed;

  00033	f3 0f 10 90 cc
	09 00 00	 movss	 xmm2, DWORD PTR [eax+2508]
  0003b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0003e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00041	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00045	0f 57 c9	 xorps	 xmm1, xmm1
  00048	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0004c	f3 0f 5a c8	 cvtss2sd xmm1, xmm0
  00050	0f 5a d2	 cvtps2pd xmm2, xmm2
  00053	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00057	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0005b	f3 0f 11 4d f0	 movss	 DWORD PTR _vMoveAmt$[ebp], xmm1
  00060	f3 0f 10 88 d0
	09 00 00	 movss	 xmm1, DWORD PTR [eax+2512]
  00068	0f 5a c9	 cvtps2pd xmm1, xmm1
  0006b	0f 57 d2	 xorps	 xmm2, xmm2
  0006e	f3 0f 5a d0	 cvtss2sd xmm2, xmm0
  00072	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00076	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0007a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007e	f3 0f 11 4d f4	 movss	 DWORD PTR _vMoveAmt$[ebp+4], xmm1
  00083	f3 0f 10 88 d4
	09 00 00	 movss	 xmm1, DWORD PTR [eax+2516]

; 197  : 	pOwner->Translate( vMoveAmt );

  0008b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00090	8d 55 f0	 lea	 edx, DWORD PTR _vMoveAmt$[ebp]
  00093	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00097	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0009b	52		 push	 edx
  0009c	f3 0f 11 45 f8	 movss	 DWORD PTR _vMoveAmt$[ebp+8], xmm0
  000a1	ff 50 50	 call	 DWORD PTR [eax+80]
$LN3@ProcessMov:

; 198  : 
; 199  : }

  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	c9		 leave
  000af	c2 08 00	 ret	 8
?ProcessMove@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@M@Z ENDP ; ioFlyFollowStateBuff2::ProcessMove
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	__real@3ff0000000000000
PUBLIC	_pOwner$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetBuffWaitState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z ; ioFlyFollowStateBuff2::SetBuffWaitState
EXTRN	__imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
;	COMDAT __real@42c80000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioflyfollowstatebuff2.cpp
CONST	ENDS
;	COMDAT ?SetBuffWaitState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$GSCopy$ = -28					; size = 4
_iAniID$ = -24						; size = 4
_fAniRate$530666 = -20					; size = 4
_vCurScale$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?SetBuffWaitState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z PROC ; ioFlyFollowStateBuff2::SetBuffWaitState, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00015	8b d9		 mov	 ebx, ecx

; 232  : 
; 233  : 	pOwner->SetWorldScale( vCurScale );

  00017	89 75 e4	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], esi
  0001a	85 f6		 test	 esi, esi
  0001c	0f 84 44 01 00
	00		 je	 $LN8@SetBuffWai

; 203  : 	if ( !pOwner )
; 204  : 		return;
; 205  : 
; 206  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00022	57		 push	 edi
  00023	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 207  : 	if ( !pGrp )

  00026	85 ff		 test	 edi, edi
  00028	0f 84 37 01 00
	00		 je	 $LN12@SetBuffWai

; 208  : 		return;
; 209  : 
; 210  : 	m_BuffState = BS_WAIT;
; 211  : 
; 212  : 	int iAniID = pGrp->GetAnimationIdx( m_WaitAni );

  0002e	8d 83 8c 09 00
	00		 lea	 eax, DWORD PTR [ebx+2444]
  00034	50		 push	 eax
  00035	8b cf		 mov	 ecx, edi
  00037	c7 83 6c 09 00
	00 02 00 00 00	 mov	 DWORD PTR [ebx+2412], 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z

; 213  : 	if ( iAniID != -1 )

  00047	0f 57 c0	 xorps	 xmm0, xmm0
  0004a	89 45 e8	 mov	 DWORD PTR _iAniID$[ebp], eax
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	0f 84 95 00 00
	00		 je	 $LN5@SetBuffWai

; 214  : 	{
; 215  : 		float fAniRate = m_fWaitAniRate;

  00056	f3 0f 10 8b 9c
	09 00 00	 movss	 xmm1, DWORD PTR [ebx+2460]

; 216  : 		if ( fAniRate <= 0.0f )

  0005e	0f 2f c1	 comiss	 xmm0, xmm1
  00061	f3 0f 11 4d ec	 movss	 DWORD PTR _fAniRate$530666[ebp], xmm1
  00066	72 0d		 jb	 SHORT $LN4@SetBuffWai

; 217  : 			fAniRate = 1.0f;

  00068	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00070	f3 0f 11 4d ec	 movss	 DWORD PTR _fAniRate$530666[ebp], xmm1
$LN4@SetBuffWai:

; 218  : 		pGrp->ClearAllActionAni( 0.0f, true );

  00075	6a 01		 push	 1
  00077	51		 push	 ecx
  00078	8b cf		 mov	 ecx, edi
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 219  : 		pGrp->ClearAllLoopAni( 0.0f, true );

  00085	0f 57 c0	 xorps	 xmm0, xmm0
  00088	6a 01		 push	 1
  0008a	51		 push	 ecx
  0008b	8b cf		 mov	 ecx, edi
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 220  : 		pGrp->SetLoopAni( iAniID, 100.0f, 1.0f, 1.0f/fAniRate );

  00098	0f 57 c0	 xorps	 xmm0, xmm0
  0009b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000a3	83 ec 10	 sub	 esp, 16			; 00000010H
  000a6	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000ac	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fAniRate$530666[ebp]
  000b1	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b4	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000b8	0f 57 c0	 xorps	 xmm0, xmm0
  000bb	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000bf	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000cd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e0	ff 75 e8	 push	 DWORD PTR _iAniID$[ebp]
  000e3	8b cf		 mov	 ecx, edi
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z
$LN5@SetBuffWai:

; 221  : 	}
; 222  : 
; 223  : 	D3DXVECTOR3 vCurScale = pOwner->GetWorldScale();

  000eb	8b 06		 mov	 eax, DWORD PTR [esi]
  000ed	8b ce		 mov	 ecx, esi
  000ef	ff 50 78	 call	 DWORD PTR [eax+120]

; 224  : 	m_vBeforeScale = vCurScale;
; 225  : 	
; 226  : 	if ( m_vAxisScale.x > 0.0f )

  000f2	f3 0f 10 8b a8
	09 00 00	 movss	 xmm1, DWORD PTR [ebx+2472]
  000fa	0f 57 c0	 xorps	 xmm0, xmm0
  000fd	0f 2f c8	 comiss	 xmm1, xmm0
  00100	8b f0		 mov	 esi, eax
  00102	8d 7d f0	 lea	 edi, DWORD PTR _vCurScale$[ebp]
  00105	a5		 movsd
  00106	a5		 movsd
  00107	a5		 movsd
  00108	8d bb b4 09 00
	00		 lea	 edi, DWORD PTR [ebx+2484]
  0010e	8d 75 f0	 lea	 esi, DWORD PTR _vCurScale$[ebp]
  00111	a5		 movsd
  00112	a5		 movsd
  00113	a5		 movsd
  00114	76 05		 jbe	 SHORT $LN3@SetBuffWai

; 227  : 		vCurScale.x = m_vAxisScale.x;

  00116	f3 0f 11 4d f0	 movss	 DWORD PTR _vCurScale$[ebp], xmm1
$LN3@SetBuffWai:

; 228  : 	if ( m_vAxisScale.y > 0.0f )

  0011b	f3 0f 10 8b ac
	09 00 00	 movss	 xmm1, DWORD PTR [ebx+2476]
  00123	0f 2f c8	 comiss	 xmm1, xmm0
  00126	76 05		 jbe	 SHORT $LN2@SetBuffWai

; 229  : 		vCurScale.y = m_vAxisScale.y;

  00128	f3 0f 11 4d f4	 movss	 DWORD PTR _vCurScale$[ebp+4], xmm1
$LN2@SetBuffWai:

; 230  : 	if ( m_vAxisScale.z > 0.0f )

  0012d	f3 0f 10 8b b0
	09 00 00	 movss	 xmm1, DWORD PTR [ebx+2480]
  00135	0f 2f c8	 comiss	 xmm1, xmm0
  00138	76 05		 jbe	 SHORT $LN1@SetBuffWai

; 231  : 		vCurScale.z = m_vAxisScale.z;

  0013a	f3 0f 11 4d f8	 movss	 DWORD PTR _vCurScale$[ebp+8], xmm1
$LN1@SetBuffWai:

; 232  : 
; 233  : 	pOwner->SetWorldScale( vCurScale );

  0013f	8b 4d e4	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  00142	8b 01		 mov	 eax, DWORD PTR [ecx]
  00144	8d 55 f0	 lea	 edx, DWORD PTR _vCurScale$[ebp]
  00147	52		 push	 edx
  00148	ff 50 4c	 call	 DWORD PTR [eax+76]

; 234  : 	m_dwWaitEndTime = FRAMEGETTIME() + m_dwWaitDuraion;

  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00151	8b c8		 mov	 ecx, eax
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00159	03 83 a0 09 00
	00		 add	 eax, DWORD PTR [ebx+2464]
  0015f	89 83 a4 09 00
	00		 mov	 DWORD PTR [ebx+2468], eax
$LN12@SetBuffWai:
  00165	5f		 pop	 edi
$LN8@SetBuffWai:

; 235  : }

  00166	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00169	5e		 pop	 esi
  0016a	33 cd		 xor	 ecx, ebp
  0016c	5b		 pop	 ebx
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	c9		 leave
  00173	c2 04 00	 ret	 4
?SetBuffWaitState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z ENDP ; ioFlyFollowStateBuff2::SetBuffWaitState
_TEXT	ENDS
PUBLIC	??H?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator+
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??H?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??H?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator+, COMDAT
; _this$ = ecx

; 1285 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1286 : 		type value;
; 1287 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1288 : #ifdef _NOTUSE
; 1289 : 		Debug();
; 1290 : #endif
; 1291 : 		return value + inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 45 fc	 add	 eax, DWORD PTR _value$[ebp]

; 1292 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??H?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator+
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<15>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<15>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 75 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 5e 01 00
	00		 je	 $LN95@LoadString
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 46 01 00
	00		 je	 $LN94@LoadString
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 2f 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 18 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 02 01 00
	00		 je	 $LN91@LoadString
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 ec 00 00
	00		 je	 $LN90@LoadString
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 d5 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 be 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 a8 00 00
	00		 je	 $LN87@LoadString
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 92 00 00
	00		 je	 $LN86@LoadString
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 7f		 je	 SHORT $LN85@LoadString
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 6c		 je	 SHORT $LN84@LoadString
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	74 5a		 je	 SHORT $LN83@LoadString
  000f8	32 d1		 xor	 dl, cl
  000fa	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000fe	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	0f 84 9a 00 00
	00		 je	 $LN111@LoadString
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 3e		 je	 SHORT $LN81@LoadString
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 2b		 je	 SHORT $LN80@LoadString
  0011b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011e	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00121	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00124	84 d2		 test	 dl, dl
  00126	74 19		 je	 SHORT $LN79@LoadString
  00128	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  0012b	32 d1		 xor	 dl, cl
  0012d	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00130	84 c0		 test	 al, al
  00132	74 07		 je	 SHORT $LN78@LoadString
  00134	34 eb		 xor	 al, -21			; ffffffebH
  00136	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00139	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  0013b	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  0013f	eb 60		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00141	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  00144	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  00146	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0014a	eb 55		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  0014c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00150	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00152	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  00155	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00157	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0015b	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0015d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00161	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00163	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00167	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00169	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0016c	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0016e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00172	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00174	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00178	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  0017a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0017e	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00180	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00183	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00185	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00189	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  0018b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0018f	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  00191	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00195	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00197	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0019b	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0019d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001a1	6a 03		 push	 3
  001a3	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a6	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001aa	5a		 pop	 edx
$LL104@LoadString:
  001ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b1	83 c0 04	 add	 eax, 4
  001b4	4a		 dec	 edx
  001b5	75 f4		 jne	 SHORT $LL104@LoadString
  001b7	6a 0c		 push	 12			; 0000000cH
  001b9	58		 pop	 eax
$LL101@LoadString:
  001ba	8b c8		 mov	 ecx, eax
  001bc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001c2	79 05		 jns	 SHORT $LN112@LoadString
  001c4	49		 dec	 ecx
  001c5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c8	41		 inc	 ecx
$LN112@LoadString:
  001c9	b2 ed		 mov	 dl, -19			; ffffffedH
  001cb	2a d1		 sub	 dl, cl
  001cd	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001d1	40		 inc	 eax
  001d2	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001d5	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001d7	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001da	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001dd	57		 push	 edi
  001de	56		 push	 esi
  001df	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	5f		 pop	 edi
  001ed	33 cd		 xor	 ecx, ebp
  001ef	5e		 pop	 esi
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	c9		 leave
  001f6	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ; ioINILoader::LoadFloat_e<11>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<11>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadFloat_
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadFloat_
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadFloat_
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadFloat_
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadFloat_
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadFloat_
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadFloat_
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadFloat_
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadFloat_
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadFloat_
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadFloat_
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadFloat_:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadFloat_
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadFloat_:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadFloat_
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadFloat_:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00183	51		 push	 ecx
  00184	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	33 cd		 xor	 ecx, ebp
  0019a	5e		 pop	 esi
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	c9		 leave
  001a1	c2 08 00	 ret	 8
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z ; ioINILoader::LoadFloat_e<9>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z PROC	; ioINILoader::LoadFloat_e<9>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@LoadFloat_@2
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@LoadFloat_@2
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@LoadFloat_@2
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@LoadFloat_@2
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@LoadFloat_@2
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@LoadFloat_@2
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@LoadFloat_@2
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@LoadFloat_@2
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@LoadFloat_@2
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@LoadFloat_@2
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@LoadFloat_@2
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@LoadFloat_@2
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@LoadFloat_@2
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00125	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0012a	51		 push	 ecx
  0012b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	50		 push	 eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0013a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013d	33 cd		 xor	 ecx, ebp
  0013f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00144	c9		 leave
  00145	c2 08 00	 ret	 8
??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z ENDP	; ioINILoader::LoadFloat_e<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ; ioINILoader::LoadInt_e<14>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<14>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadInt_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadInt_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadInt_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadInt_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadInt_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadInt_e
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadInt_e
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadInt_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadInt_e
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadInt_e
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadInt_e:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  0019e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001a1	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a8	50		 push	 eax
  001a9	8b ce		 mov	 ecx, esi
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	5e		 pop	 esi
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	c9		 leave
  001bd	c2 08 00	 ret	 8
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0N@@ioINILoader@@QAE_NAAY0N@$$CBD_N@Z ; ioINILoader::LoadBool_e<13>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0N@@ioINILoader@@QAE_NAAY0N@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0N@@ioINILoader@@QAE_NAAY0N@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<13>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@LoadBool_e
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@LoadBool_e
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@LoadBool_e
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@LoadBool_e
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@LoadBool_e
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@LoadBool_e
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@LoadBool_e
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  00128	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00139	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  00144	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00150	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  00155	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  00161	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@LoadBool_e:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00187	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	50		 push	 eax
  0018e	8b ce		 mov	 ecx, esi
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	5e		 pop	 esi
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	c9		 leave
  001a2	c2 08 00	 ret	 8
??$LoadBool_e@$0N@@ioINILoader@@QAE_NAAY0N@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$08@ioINILoader@@QAE_NAAY08$$CBD_N@Z ; ioINILoader::LoadBool_e<9>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$08@ioINILoader@@QAE_NAAY08$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$08@ioINILoader@@QAE_NAAY08$$CBD_N@Z PROC	; ioINILoader::LoadBool_e<9>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@LoadBool_e@2
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@LoadBool_e@2
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@LoadBool_e@2
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@LoadBool_e@2
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@LoadBool_e@2
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@LoadBool_e@2
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@LoadBool_e@2
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@LoadBool_e@2
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@LoadBool_e@2
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@LoadBool_e@2
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@LoadBool_e@2
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@LoadBool_e@2
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@LoadBool_e@2
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@LoadBool_e@2:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00125	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00128	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0012b	50		 push	 eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00132	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00135	33 cd		 xor	 ecx, ebp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	c9		 leave
  0013d	c2 08 00	 ret	 8
??$LoadBool_e@$08@ioINILoader@@QAE_NAAY08$$CBD_N@Z ENDP	; ioINILoader::LoadBool_e<9>
_TEXT	ENDS
PUBLIC	??0tagBlowWoundAniInfo@@QAE@XZ			; tagBlowWoundAniInfo::tagBlowWoundAniInfo
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\weaponattribute.h
xdata$x	SEGMENT
__ehfuncinfo$??0tagBlowWoundAniInfo@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0tagBlowWoundAniInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0tagBlowWoundAniInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$5
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagBlowWoundAniInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0tagBlowWoundAniInfo@@QAE@XZ PROC			; tagBlowWoundAniInfo::tagBlowWoundAniInfo, COMDAT
; _this$ = ecx

; 304  : 	tagBlowWoundAniInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagBlowWoundAniInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d6		 call	 esi
  00019	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001d	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00020	ff d6		 call	 esi
  00022	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00025	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00029	ff d6		 call	 esi
  0002b	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0002e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00032	ff d6		 call	 esi
  00034	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	ff d6		 call	 esi
  0003d	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  00040	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00044	ff d6		 call	 esi

; 305  : 	{
; 306  : 		Init();

  00046	8b cf		 mov	 ecx, edi
  00048	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0004c	e8 00 00 00 00	 call	 ?Init@tagBlowWoundAniInfo@@QAEXXZ ; tagBlowWoundAniInfo::Init

; 307  : 	}

  00051	8b c7		 mov	 eax, edi
  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 30	 add	 ecx, 48			; 00000030H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 40	 add	 ecx, 64			; 00000040H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 50	 add	 ecx, 80			; 00000050H
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagBlowWoundAniInfo@@QAE@XZ:
  00045	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00049	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagBlowWoundAniInfo@@QAE@XZ
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagBlowWoundAniInfo@@QAE@XZ ENDP			; tagBlowWoundAniInfo::tagBlowWoundAniInfo
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	?SetForcePowerAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetForcePowerAmt
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?SetForcePowerAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_value$532307 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetForcePowerAmt@ioBaseChar@@QAEXM@Z PROC		; ioBaseChar::SetForcePowerAmt, COMDAT
; _this$ = ecx

; 2641 : 	inline void SetForcePowerAmt( float fAmt ) { m_fForceAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	8d 45 08	 lea	 eax, DWORD PTR _value$532307[ebp]
  0000b	50		 push	 eax
  0000c	81 c1 88 0b 00
	00		 add	 ecx, 2952		; 00000b88H
  00012	f3 0f 11 45 08	 movss	 DWORD PTR _value$532307[ebp], xmm0
  00017	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetForcePowerAmt@ioBaseChar@@QAEXM@Z ENDP		; ioBaseChar::SetForcePowerAmt
_TEXT	ENDS
PUBLIC	??_C@_0BE@FFEFPENP@wait_animation_rate?$AA@	; `string'
PUBLIC	??_C@_0N@GCMPDLHK@scale_rate_z?$AA@		; `string'
PUBLIC	??_C@_0N@EJOCGILJ@scale_rate_y?$AA@		; `string'
PUBLIC	??_C@_0N@FAPJFJPI@scale_rate_x?$AA@		; `string'
PUBLIC	__real@43c80000
PUBLIC	??_C@_0BE@DOMAEDBM@move_animation_rate?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_0BE@FFEFPENP@wait_animation_rate?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0BE@FFEFPENP@wait_animation_rate?$AA@ DB 'wait_animation_rate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GCMPDLHK@scale_rate_z?$AA@
CONST	SEGMENT
??_C@_0N@GCMPDLHK@scale_rate_z?$AA@ DB 'scale_rate_z', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJOCGILJ@scale_rate_y?$AA@
CONST	SEGMENT
??_C@_0N@EJOCGILJ@scale_rate_y?$AA@ DB 'scale_rate_y', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FAPJFJPI@scale_rate_x?$AA@
CONST	SEGMENT
??_C@_0N@FAPJFJPI@scale_rate_x?$AA@ DB 'scale_rate_x', 00H ; `string'
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT ??_C@_0BE@DOMAEDBM@move_animation_rate?$AA@
CONST	SEGMENT
??_C@_0BE@DOMAEDBM@move_animation_rate?$AA@ DB 'move_animation_rate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioflyfollowstatebuff2.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioFlyFollowStateBuff2@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -284						; size = 260
__k$533452 = -24					; size = 15
__k$533271 = -24					; size = 13
__k$533090 = -24					; size = 14
__k$532965 = -24					; size = 14
__k$532327 = -24					; size = 15
__k$533590 = -20					; size = 9
__k$533327 = -20					; size = 11
__k$532840 = -20					; size = 9
__k$532715 = -20					; size = 9
__k$532590 = -20					; size = 9
__k$532452 = -20					; size = 11
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioFlyFollowStateBuff2@@UAEXAAVioINILoader@@@Z PROC ; ioFlyFollowStateBuff2::LoadProperty, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 46   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 47   : 
; 48   : 	char szBuf[MAX_PATH];
; 49   : 
; 50   : 	rkLoader.LoadString_e( "move_animation", "", szBuf, MAX_PATH );

  00021	33 db		 xor	 ebx, ebx
  00023	6a 03		 push	 3
  00025	c7 45 e8 80 83
	9d 8f		 mov	 DWORD PTR __k$532327[ebp], -1885502592 ; 8f9d8380H
  0002c	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$532327[ebp+4], -2088399438 ; 83858db2H
  00033	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$532327[ebp+8], -2086695552 ; 839f8d80H
  0003a	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$532327[ebp+12], 33410 ; 00008282H
  00040	8d 45 e8	 lea	 eax, DWORD PTR __k$532327[ebp]
  00043	88 5d f6	 mov	 BYTE PTR __k$532327[ebp+14], bl
  00046	59		 pop	 ecx
$LL106@LoadProper:
  00047	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004d	83 c0 04	 add	 eax, 4
  00050	49		 dec	 ecx
  00051	75 f4		 jne	 SHORT $LL106@LoadProper
  00053	6a 0c		 push	 12			; 0000000cH
  00055	58		 pop	 eax
$LL103@LoadProper:
  00056	8b c8		 mov	 ecx, eax
  00058	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0005e	79 05		 jns	 SHORT $LN1213@LoadProper
  00060	49		 dec	 ecx
  00061	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00064	41		 inc	 ecx
$LN1213@LoadProper:
  00065	b2 ed		 mov	 dl, -19			; ffffffedH
  00067	2a d1		 sub	 dl, cl
  00069	30 54 05 e8	 xor	 BYTE PTR __k$532327[ebp+eax], dl
  0006d	40		 inc	 eax
  0006e	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00071	7c e3		 jl	 SHORT $LL103@LoadProper
  00073	68 04 01 00 00	 push	 260			; 00000104H
  00078	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00084	8d 45 e8	 lea	 eax, DWORD PTR __k$532327[ebp]
  00087	50		 push	 eax
  00088	8b cf		 mov	 ecx, edi
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 51   : 	m_MoveAni = szBuf;

  00090	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00096	50		 push	 eax
  00097	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 52   : 	m_fMoveAniRate = rkLoader.LoadFloat( "move_animation_rate", 1.0f );

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ab	51		 push	 ecx
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DOMAEDBM@move_animation_rate?$AA@
  000b6	8b cf		 mov	 ecx, edi
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000be	d9 9e 80 09 00
	00		 fstp	 DWORD PTR [esi+2432]
  000c4	6a 02		 push	 2

; 53   : 	m_fFollowSpeed = rkLoader.LoadFloat_e( "move_speed", 400.0f );

  000c6	c7 45 ec 80 83
	9d 8f		 mov	 DWORD PTR __k$532452[ebp], -1885502592 ; 8f9d8380H
  000cd	c7 45 f0 b2 9f
	9b 8f		 mov	 DWORD PTR __k$532452[ebp+4], -1885626446 ; 8f9b9fb2H
  000d4	66 c7 45 f4 88
	88		 mov	 WORD PTR __k$532452[ebp+8], 34952 ; 00008888H
  000da	8d 45 ec	 lea	 eax, DWORD PTR __k$532452[ebp]
  000dd	88 5d f6	 mov	 BYTE PTR __k$532452[ebp+10], bl
  000e0	59		 pop	 ecx
$LL212@LoadProper:
  000e1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000e7	83 c0 04	 add	 eax, 4
  000ea	49		 dec	 ecx
  000eb	75 f4		 jne	 SHORT $LL212@LoadProper
  000ed	6a 08		 push	 8
  000ef	58		 pop	 eax
$LL209@LoadProper:
  000f0	8b c8		 mov	 ecx, eax
  000f2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000f8	79 05		 jns	 SHORT $LN1214@LoadProper
  000fa	49		 dec	 ecx
  000fb	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000fe	41		 inc	 ecx
$LN1214@LoadProper:
  000ff	b2 ed		 mov	 dl, -19			; ffffffedH
  00101	2a d1		 sub	 dl, cl
  00103	30 54 05 ec	 xor	 BYTE PTR __k$532452[ebp+eax], dl
  00107	40		 inc	 eax
  00108	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0010b	7c e3		 jl	 SHORT $LL209@LoadProper
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43c80000
  00115	51		 push	 ecx
  00116	8d 45 ec	 lea	 eax, DWORD PTR __k$532452[ebp]
  00119	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011e	50		 push	 eax
  0011f	8b cf		 mov	 ecx, edi
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00127	d9 9e d8 09 00
	00		 fstp	 DWORD PTR [esi+2520]
  0012d	6a 02		 push	 2

; 54   : 	m_vLookAt.x = rkLoader.LoadFloat_e( "lookat_x", 0.0f );

  0012f	c7 45 ec 81 83
	84 81		 mov	 DWORD PTR __k$532590[ebp], -2122022015 ; 81848381H
  00136	c7 45 f0 8c 98
	b4 92		 mov	 DWORD PTR __k$532590[ebp+4], -1833658228 ; 92b4988cH
  0013d	8d 45 ec	 lea	 eax, DWORD PTR __k$532590[ebp]
  00140	88 5d f4	 mov	 BYTE PTR __k$532590[ebp+8], bl
  00143	59		 pop	 ecx
$LL318@LoadProper:
  00144	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014a	83 c0 04	 add	 eax, 4
  0014d	49		 dec	 ecx
  0014e	75 f4		 jne	 SHORT $LL318@LoadProper
  00150	0f 57 c0	 xorps	 xmm0, xmm0
  00153	51		 push	 ecx
  00154	8d 45 ec	 lea	 eax, DWORD PTR __k$532590[ebp]
  00157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015c	50		 push	 eax
  0015d	8b cf		 mov	 ecx, edi
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00165	d9 9e c0 09 00
	00		 fstp	 DWORD PTR [esi+2496]
  0016b	6a 02		 push	 2

; 55   : 	m_vLookAt.y = rkLoader.LoadFloat_e( "lookat_y", 0.0f );

  0016d	c7 45 ec 81 83
	84 81		 mov	 DWORD PTR __k$532715[ebp], -2122022015 ; 81848381H
  00174	c7 45 f0 8c 98
	b4 93		 mov	 DWORD PTR __k$532715[ebp+4], -1816881012 ; 93b4988cH
  0017b	8d 45 ec	 lea	 eax, DWORD PTR __k$532715[ebp]
  0017e	88 5d f4	 mov	 BYTE PTR __k$532715[ebp+8], bl
  00181	59		 pop	 ecx
$LL424@LoadProper:
  00182	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00188	83 c0 04	 add	 eax, 4
  0018b	49		 dec	 ecx
  0018c	75 f4		 jne	 SHORT $LL424@LoadProper
  0018e	0f 57 c0	 xorps	 xmm0, xmm0
  00191	51		 push	 ecx
  00192	8d 45 ec	 lea	 eax, DWORD PTR __k$532715[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	50		 push	 eax
  0019b	8b cf		 mov	 ecx, edi
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001a3	d9 9e c4 09 00
	00		 fstp	 DWORD PTR [esi+2500]
  001a9	6a 02		 push	 2

; 56   : 	m_vLookAt.z = rkLoader.LoadFloat_e( "lookat_z", 0.0f );

  001ab	c7 45 ec 81 83
	84 81		 mov	 DWORD PTR __k$532840[ebp], -2122022015 ; 81848381H
  001b2	c7 45 f0 8c 98
	b4 90		 mov	 DWORD PTR __k$532840[ebp+4], -1867212660 ; 90b4988cH
  001b9	8d 45 ec	 lea	 eax, DWORD PTR __k$532840[ebp]
  001bc	88 5d f4	 mov	 BYTE PTR __k$532840[ebp+8], bl
  001bf	59		 pop	 ecx
$LL530@LoadProper:
  001c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c6	83 c0 04	 add	 eax, 4
  001c9	49		 dec	 ecx
  001ca	75 f4		 jne	 SHORT $LL530@LoadProper
  001cc	0f 57 c0	 xorps	 xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	8d 45 ec	 lea	 eax, DWORD PTR __k$532840[ebp]
  001d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d8	50		 push	 eax
  001d9	8b cf		 mov	 ecx, edi
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001e1	d9 9e c8 09 00
	00		 fstp	 DWORD PTR [esi+2504]
  001e7	6a 03		 push	 3

; 57   : 
; 58   : 	m_dwMoveDuration = (DWORD)rkLoader.LoadInt_e( "move_duration", 0 );

  001e9	c7 45 e8 80 83
	9d 8f		 mov	 DWORD PTR __k$532965[ebp], -1885502592 ; 8f9d8380H
  001f0	c7 45 ec b2 88
	9e 98		 mov	 DWORD PTR __k$532965[ebp+4], -1734440782 ; 989e88b2H
  001f7	c7 45 f0 8c 98
	82 85		 mov	 DWORD PTR __k$532965[ebp+8], -2055038836 ; 8582988cH
  001fe	8d 45 e8	 lea	 eax, DWORD PTR __k$532965[ebp]
  00201	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$532965[ebp+12], 131 ; 00000083H
  00207	59		 pop	 ecx
$LL636@LoadProper:
  00208	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020e	83 c0 04	 add	 eax, 4
  00211	49		 dec	 ecx
  00212	75 f4		 jne	 SHORT $LL636@LoadProper
  00214	80 75 f4 ed	 xor	 BYTE PTR __k$532965[ebp+12], -19 ; ffffffedH
  00218	53		 push	 ebx
  00219	8d 45 e8	 lea	 eax, DWORD PTR __k$532965[ebp]
  0021c	50		 push	 eax
  0021d	8b cf		 mov	 ecx, edi
  0021f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00225	6a 03		 push	 3
  00227	89 86 84 09 00
	00		 mov	 DWORD PTR [esi+2436], eax

; 59   : 	m_dwWaitDuraion = (DWORD)rkLoader.LoadInt_e( "wait_duration", 0 );

  0022d	c7 45 e8 9a 8d
	82 9e		 mov	 DWORD PTR __k$533090[ebp], -1635611238 ; 9e828d9aH
  00234	c7 45 ec b2 88
	9e 98		 mov	 DWORD PTR __k$533090[ebp+4], -1734440782 ; 989e88b2H
  0023b	c7 45 f0 8c 98
	82 85		 mov	 DWORD PTR __k$533090[ebp+8], -2055038836 ; 8582988cH
  00242	8d 45 e8	 lea	 eax, DWORD PTR __k$533090[ebp]
  00245	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$533090[ebp+12], 131 ; 00000083H
  0024b	59		 pop	 ecx
$LL742@LoadProper:
  0024c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00252	83 c0 04	 add	 eax, 4
  00255	49		 dec	 ecx
  00256	75 f4		 jne	 SHORT $LL742@LoadProper
  00258	80 75 f4 ed	 xor	 BYTE PTR __k$533090[ebp+12], -19 ; ffffffedH
  0025c	53		 push	 ebx
  0025d	8d 45 e8	 lea	 eax, DWORD PTR __k$533090[ebp]
  00260	50		 push	 eax
  00261	8b cf		 mov	 ecx, edi
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 60   : 
; 61   : 	m_vAxisScale.x = rkLoader.LoadFloat( "scale_rate_x", 1.0f );

  00269	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00271	51		 push	 ecx
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FAPJFJPI@scale_rate_x?$AA@
  0027c	8b cf		 mov	 ecx, edi
  0027e	89 86 a0 09 00
	00		 mov	 DWORD PTR [esi+2464], eax
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0028a	d9 9e a8 09 00
	00		 fstp	 DWORD PTR [esi+2472]

; 62   : 	m_vAxisScale.y = rkLoader.LoadFloat( "scale_rate_y", 1.0f );

  00290	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00298	51		 push	 ecx
  00299	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EJOCGILJ@scale_rate_y?$AA@
  002a3	8b cf		 mov	 ecx, edi
  002a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002ab	d9 9e ac 09 00
	00		 fstp	 DWORD PTR [esi+2476]

; 63   : 	m_vAxisScale.z = rkLoader.LoadFloat( "scale_rate_z", 1.0f );

  002b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b9	51		 push	 ecx
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GCMPDLHK@scale_rate_z?$AA@
  002c4	8b cf		 mov	 ecx, edi
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002cc	d9 9e b0 09 00
	00		 fstp	 DWORD PTR [esi+2480]
  002d2	6a 03		 push	 3

; 64   : 
; 65   : 	m_bSetEndJump = rkLoader.LoadBool_e( "set_end_jump", false );

  002d4	c7 45 e8 9e 89
	9f b5		 mov	 DWORD PTR __k$533271[ebp], -1247835746 ; b59f899eH
  002db	c7 45 ec 88 82
	8f b5		 mov	 DWORD PTR __k$533271[ebp+4], -1248886136 ; b58f8288H
  002e2	c7 45 f0 87 99
	86 9a		 mov	 DWORD PTR __k$533271[ebp+8], -1702454905 ; 9a869987H
  002e9	8d 45 e8	 lea	 eax, DWORD PTR __k$533271[ebp]
  002ec	88 5d f4	 mov	 BYTE PTR __k$533271[ebp+12], bl
  002ef	59		 pop	 ecx
$LL848@LoadProper:
  002f0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002f6	83 c0 04	 add	 eax, 4
  002f9	49		 dec	 ecx
  002fa	75 f4		 jne	 SHORT $LL848@LoadProper
  002fc	53		 push	 ebx
  002fd	8d 45 e8	 lea	 eax, DWORD PTR __k$533271[ebp]
  00300	50		 push	 eax
  00301	8b cf		 mov	 ecx, edi
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00309	6a 02		 push	 2
  0030b	88 86 dc 09 00
	00		 mov	 BYTE PTR [esi+2524], al

; 66   : 	m_fEndJumpPower = rkLoader.LoadFloat_e( "jump_power", 0.0f );

  00311	c7 45 ec 87 99
	86 9a		 mov	 DWORD PTR __k$533327[ebp], -1702454905 ; 9a869987H
  00318	c7 45 f0 b2 9c
	84 9d		 mov	 DWORD PTR __k$533327[ebp+4], -1652253518 ; 9d849cb2H
  0031f	66 c7 45 f4 88
	9e		 mov	 WORD PTR __k$533327[ebp+8], 40584 ; 00009e88H
  00325	8d 45 ec	 lea	 eax, DWORD PTR __k$533327[ebp]
  00328	88 5d f6	 mov	 BYTE PTR __k$533327[ebp+10], bl
  0032b	59		 pop	 ecx
$LL954@LoadProper:
  0032c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00332	83 c0 04	 add	 eax, 4
  00335	49		 dec	 ecx
  00336	75 f4		 jne	 SHORT $LL954@LoadProper
  00338	6a 08		 push	 8
  0033a	58		 pop	 eax
$LL951@LoadProper:
  0033b	8b c8		 mov	 ecx, eax
  0033d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00343	79 05		 jns	 SHORT $LN1215@LoadProper
  00345	49		 dec	 ecx
  00346	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00349	41		 inc	 ecx
$LN1215@LoadProper:
  0034a	b2 ed		 mov	 dl, -19			; ffffffedH
  0034c	2a d1		 sub	 dl, cl
  0034e	30 54 05 ec	 xor	 BYTE PTR __k$533327[ebp+eax], dl
  00352	40		 inc	 eax
  00353	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00356	7c e3		 jl	 SHORT $LL951@LoadProper
  00358	0f 57 c0	 xorps	 xmm0, xmm0
  0035b	51		 push	 ecx
  0035c	8d 45 ec	 lea	 eax, DWORD PTR __k$533327[ebp]
  0035f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00364	50		 push	 eax
  00365	8b cf		 mov	 ecx, edi
  00367	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0036d	d9 9e e0 09 00
	00		 fstp	 DWORD PTR [esi+2528]
  00373	6a 03		 push	 3

; 67   : 
; 68   : 	rkLoader.LoadString_e( "wait_animation", "", szBuf, MAX_PATH );

  00375	c7 45 e8 9a 8d
	82 9e		 mov	 DWORD PTR __k$533452[ebp], -1635611238 ; 9e828d9aH
  0037c	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$533452[ebp+4], -2088399438 ; 83858db2H
  00383	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$533452[ebp+8], -2086695552 ; 839f8d80H
  0038a	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$533452[ebp+12], 33410 ; 00008282H
  00390	8d 45 e8	 lea	 eax, DWORD PTR __k$533452[ebp]
  00393	88 5d f6	 mov	 BYTE PTR __k$533452[ebp+14], bl
  00396	59		 pop	 ecx
$LL1060@LoadProper:
  00397	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0039d	83 c0 04	 add	 eax, 4
  003a0	49		 dec	 ecx
  003a1	75 f4		 jne	 SHORT $LL1060@LoadProper
  003a3	6a 0c		 push	 12			; 0000000cH
  003a5	58		 pop	 eax
$LL1057@LoadProper:
  003a6	8b c8		 mov	 ecx, eax
  003a8	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003ae	79 05		 jns	 SHORT $LN1216@LoadProper
  003b0	49		 dec	 ecx
  003b1	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003b4	41		 inc	 ecx
$LN1216@LoadProper:
  003b5	b2 ed		 mov	 dl, -19			; ffffffedH
  003b7	2a d1		 sub	 dl, cl
  003b9	30 54 05 e8	 xor	 BYTE PTR __k$533452[ebp+eax], dl
  003bd	40		 inc	 eax
  003be	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  003c1	7c e3		 jl	 SHORT $LL1057@LoadProper
  003c3	68 04 01 00 00	 push	 260			; 00000104H
  003c8	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003ce	50		 push	 eax
  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003d4	8d 45 e8	 lea	 eax, DWORD PTR __k$533452[ebp]
  003d7	50		 push	 eax
  003d8	8b cf		 mov	 ecx, edi
  003da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 69   : 	m_WaitAni = szBuf;

  003e0	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003e6	50		 push	 eax
  003e7	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 70   : 	m_fWaitAniRate = rkLoader.LoadFloat( "wait_animation_rate", 1.0f );

  003f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003fb	51		 push	 ecx
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FFEFPENP@wait_animation_rate?$AA@
  00406	8b cf		 mov	 ecx, edi
  00408	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0040e	d9 9e 9c 09 00
	00		 fstp	 DWORD PTR [esi+2460]
  00414	6a 02		 push	 2

; 71   : 
; 72   : 	m_bCharCol = rkLoader.LoadBool_e( "char_col", false );

  00416	c7 45 ec 8e 84
	8a 98		 mov	 DWORD PTR __k$533590[ebp], -1735752562 ; 988a848eH
  0041d	c7 45 f0 b2 8f
	84 86		 mov	 DWORD PTR __k$533590[ebp+4], -2038132814 ; 86848fb2H
  00424	8d 45 ec	 lea	 eax, DWORD PTR __k$533590[ebp]
  00427	88 5d f4	 mov	 BYTE PTR __k$533590[ebp+8], bl
  0042a	59		 pop	 ecx
$LL1166@LoadProper:
  0042b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00431	83 c0 04	 add	 eax, 4
  00434	49		 dec	 ecx
  00435	75 f4		 jne	 SHORT $LL1166@LoadProper
  00437	53		 push	 ebx
  00438	8d 45 ec	 lea	 eax, DWORD PTR __k$533590[ebp]
  0043b	50		 push	 eax
  0043c	8b cf		 mov	 ecx, edi
  0043e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 73   : }

  00444	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00447	5f		 pop	 edi
  00448	88 86 e4 09 00
	00		 mov	 BYTE PTR [esi+2532], al
  0044e	5e		 pop	 esi
  0044f	33 cd		 xor	 ecx, ebp
  00451	5b		 pop	 ebx
  00452	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00457	c9		 leave
  00458	c2 04 00	 ret	 4
?LoadProperty@ioFlyFollowStateBuff2@@UAEXAAVioINILoader@@@Z ENDP ; ioFlyFollowStateBuff2::LoadProperty
_TEXT	ENDS
PUBLIC	?SetBuffMoveState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z ; ioFlyFollowStateBuff2::SetBuffMoveState
EXTRN	?SetTargetRotToDir@ioBaseChar@@QAEXABUD3DXVECTOR3@@_N1@Z:PROC ; ioBaseChar::SetTargetRotToDir
EXTRN	?ClearReservedSliding@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::ClearReservedSliding
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
; Function compile flags: /Ogsp
;	COMDAT ?SetBuffMoveState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_iAniID$ = -8						; size = 4
_value$533752 = -4					; size = 4
_fAniRate$530615 = -4					; size = 4
_value$533757 = 8					; size = 4
_pGrp$ = 8						; size = 4
_pOwner$ = 8						; size = 4
?SetBuffMoveState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z PROC ; ioFlyFollowStateBuff2::SetBuffMoveState, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 99   : 	if ( !pOwner )

  00007	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	85 ff		 test	 edi, edi
  0000e	0f 84 35 01 00
	00		 je	 $LN5@SetBuffMov

; 100  : 		return;
; 101  : 
; 102  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00014	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00017	89 45 08	 mov	 DWORD PTR _pGrp$[ebp], eax

; 103  : 	if( !pGrp )

  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 27 01 00
	00		 je	 $LN5@SetBuffMov

; 104  : 		return;
; 105  : 
; 106  : 	pOwner->SetState( CS_BUFF_ACTION );

  00022	53		 push	 ebx
  00023	33 db		 xor	 ebx, ebx
  00025	43		 inc	 ebx
  00026	53		 push	 ebx
  00027	6a 70		 push	 112			; 00000070H
  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 107  : 
; 108  : 	D3DXVec3Normalize( &m_vNorLookAt, &m_vLookAt );

  00030	8d 8e c0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2496]
  00036	8d 86 cc 09 00
	00		 lea	 eax, DWORD PTR [esi+2508]
  0003c	51		 push	 ecx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 109  : 
; 110  : 	pOwner->ClearReservedSliding();

  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ?ClearReservedSliding@ioBaseChar@@QAEXXZ ; ioBaseChar::ClearReservedSliding

; 111  : 	pOwner->SetForcePowerAmt( 0.0f );

  0004a	0f 57 c0	 xorps	 xmm0, xmm0
  0004d	8d 45 fc	 lea	 eax, DWORD PTR _value$533752[ebp]
  00050	50		 push	 eax
  00051	8d 8f 88 0b 00
	00		 lea	 ecx, DWORD PTR [edi+2952]
  00057	f3 0f 11 45 fc	 movss	 DWORD PTR _value$533752[ebp], xmm0
  0005c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 112  : 
; 113  : 	int iAniID = pGrp->GetAnimationIdx( m_MoveAni );

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00064	8d 86 70 09 00
	00		 lea	 eax, DWORD PTR [esi+2416]
  0006a	50		 push	 eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00071	89 45 f8	 mov	 DWORD PTR _iAniID$[ebp], eax

; 114  : 	if ( iAniID != -1 )

  00074	83 f8 ff	 cmp	 eax, -1
  00077	0f 84 96 00 00
	00		 je	 $LN2@SetBuffMov

; 115  : 	{
; 116  : 		float fAniRate = m_fMoveAniRate;

  0007d	f3 0f 10 8e 80
	09 00 00	 movss	 xmm1, DWORD PTR [esi+2432]

; 117  : 		if ( fAniRate <= 0.0f )

  00085	0f 57 c0	 xorps	 xmm0, xmm0
  00088	0f 2f c1	 comiss	 xmm0, xmm1
  0008b	f3 0f 11 4d fc	 movss	 DWORD PTR _fAniRate$530615[ebp], xmm1
  00090	72 0d		 jb	 SHORT $LN1@SetBuffMov

; 118  : 			fAniRate = 1.0f;

  00092	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0009a	f3 0f 11 4d fc	 movss	 DWORD PTR _fAniRate$530615[ebp], xmm1
$LN1@SetBuffMov:

; 119  : 		pGrp->ClearAllActionAni( 0.0f, true );

  0009f	53		 push	 ebx
  000a0	51		 push	 ecx
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 120  : 		pGrp->ClearAllLoopAni( 0.0f, true );

  000af	0f 57 c0	 xorps	 xmm0, xmm0
  000b2	53		 push	 ebx
  000b3	51		 push	 ecx
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 121  : 		pGrp->SetLoopAni( iAniID, 100.0f, 1.0f, 1.0f/fAniRate );

  000c2	0f 57 c0	 xorps	 xmm0, xmm0
  000c5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000d0	83 ec 10	 sub	 esp, 16			; 00000010H
  000d3	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000d9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fAniRate$530615[ebp]
  000de	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e1	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000e5	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000e9	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	ff 75 f8	 push	 DWORD PTR _iAniID$[ebp]
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z
$LN2@SetBuffMov:

; 122  : 	}
; 123  : 
; 124  : 	pOwner->SetTargetRotToDir( m_vNorLookAt, true );

  00113	6a 00		 push	 0
  00115	53		 push	 ebx
  00116	8d 86 cc 09 00
	00		 lea	 eax, DWORD PTR [esi+2508]
  0011c	50		 push	 eax
  0011d	8b cf		 mov	 ecx, edi
  0011f	e8 00 00 00 00	 call	 ?SetTargetRotToDir@ioBaseChar@@QAEXABUD3DXVECTOR3@@_N1@Z ; ioBaseChar::SetTargetRotToDir

; 125  : 
; 126  : 	m_dwMovingEndTime = m_dwBuffStartTime + m_dwMoveDuration;

  00124	8d 45 08	 lea	 eax, DWORD PTR _value$533757[ebp]
  00127	50		 push	 eax
  00128	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  0012e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00133	8b 86 84 09 00
	00		 mov	 eax, DWORD PTR [esi+2436]
  00139	03 45 08	 add	 eax, DWORD PTR _value$533757[ebp]

; 127  : 
; 128  : 	m_BuffState = BS_MOVE;

  0013c	89 9e 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], ebx
  00142	89 86 88 09 00
	00		 mov	 DWORD PTR [esi+2440], eax
  00148	5b		 pop	 ebx
$LN5@SetBuffMov:
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi

; 129  : }

  0014b	c9		 leave
  0014c	c2 04 00	 ret	 4
?SetBuffMoveState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z ENDP ; ioFlyFollowStateBuff2::SetBuffMoveState
_TEXT	ENDS
PUBLIC	?CheckLive@ioFlyFollowStateBuff2@@AAE_NXZ	; ioFlyFollowStateBuff2::CheckLive
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
EXTRN	?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?CheckLive@ioFlyFollowStateBuff2@@AAE_NXZ
_TEXT	SEGMENT
_value$533764 = -4					; size = 4
?CheckLive@ioFlyFollowStateBuff2@@AAE_NXZ PROC		; ioFlyFollowStateBuff2::CheckLive, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 158  : 	if( !GetCreator() || !GetOwner() )

  00007	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator
  0000c	85 c0		 test	 eax, eax
  0000e	74 3f		 je	 SHORT $LN3@CheckLive
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00017	85 c0		 test	 eax, eax
  00019	74 34		 je	 SHORT $LN3@CheckLive

; 160  : 
; 161  : 	if( CheckEnableDelayState() )

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  00022	84 c0		 test	 al, al

; 162  : 		return false;

  00024	75 29		 jne	 SHORT $LN3@CheckLive

; 163  : 
; 164  : 	if( m_dwBuffEndTime <= FRAMEGETTIME() )

  00026	57		 push	 edi
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002d	8b c8		 mov	 ecx, eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00035	8b f8		 mov	 edi, eax
  00037	8d 45 fc	 lea	 eax, DWORD PTR _value$533764[ebp]
  0003a	50		 push	 eax
  0003b	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00041	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00046	39 7d fc	 cmp	 DWORD PTR _value$533764[ebp], edi
  00049	5f		 pop	 edi
  0004a	0f 97 c0	 seta	 al

; 165  : 		return false;
; 166  : 
; 167  : 	return true;

  0004d	eb 02		 jmp	 SHORT $LN5@CheckLive
$LN3@CheckLive:

; 159  : 		return false;

  0004f	32 c0		 xor	 al, al
$LN5@CheckLive:
  00051	5e		 pop	 esi

; 168  : }

  00052	c9		 leave
  00053	c3		 ret	 0
?CheckLive@ioFlyFollowStateBuff2@@AAE_NXZ ENDP		; ioFlyFollowStateBuff2::CheckLive
_TEXT	ENDS
PUBLIC	?ProcessMoveState@ioFlyFollowStateBuff2@@AAEXM@Z ; ioFlyFollowStateBuff2::ProcessMoveState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessMoveState@ioFlyFollowStateBuff2@@AAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessMoveState@ioFlyFollowStateBuff2@@AAEXM@Z PROC	; ioFlyFollowStateBuff2::ProcessMoveState, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 172  : 	ioBaseChar *pOwner = GetOwner();

  00007	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  0000c	8b d8		 mov	 ebx, eax

; 173  : 	if ( !pOwner )

  0000e	85 db		 test	 ebx, ebx
  00010	74 45		 je	 SHORT $LN3@ProcessMov@2

; 174  : 		return;
; 175  : 
; 176  : 	if ( m_dwMovingEndTime > 0 && m_dwMovingEndTime < FRAMEGETTIME() )

  00012	83 bf 88 09 00
	00 00		 cmp	 DWORD PTR [edi+2440], 0
  00019	56		 push	 esi
  0001a	76 27		 jbe	 SHORT $LN1@ProcessMov@2
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00022	8b c8		 mov	 ecx, eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0002a	39 87 88 09 00
	00		 cmp	 DWORD PTR [edi+2440], eax
  00030	73 11		 jae	 SHORT $LN1@ProcessMov@2

; 177  : 	{
; 178  : 		m_dwMovingEndTime = 0;

  00032	83 a7 88 09 00
	00 00		 and	 DWORD PTR [edi+2440], 0

; 179  : 		SetBuffWaitState( pOwner );

  00039	53		 push	 ebx
  0003a	8b cf		 mov	 ecx, edi
  0003c	e8 00 00 00 00	 call	 ?SetBuffWaitState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z ; ioFlyFollowStateBuff2::SetBuffWaitState

; 180  : 		return;

  00041	eb 13		 jmp	 SHORT $LN5@ProcessMov@2
$LN1@ProcessMov@2:

; 181  : 	}
; 182  : 
; 183  : 	ProcessMove( pOwner, fTimePerSec );

  00043	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	53		 push	 ebx
  0004f	8b cf		 mov	 ecx, edi
  00051	e8 00 00 00 00	 call	 ?ProcessMove@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@M@Z ; ioFlyFollowStateBuff2::ProcessMove
$LN5@ProcessMov@2:
  00056	5e		 pop	 esi
$LN3@ProcessMov@2:
  00057	5f		 pop	 edi
  00058	5b		 pop	 ebx

; 184  : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?ProcessMoveState@ioFlyFollowStateBuff2@@AAEXM@Z ENDP	; ioFlyFollowStateBuff2::ProcessMoveState
_TEXT	ENDS
PUBLIC	?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ	; ioFlyFollowStateBuff2::ClearBuffState
EXTRN	?SetBlowWoundedState@ioBaseChar@@QAEX_NABUtagBlowWoundAniInfo@@00@Z:PROC ; ioBaseChar::SetBlowWoundedState
EXTRN	?SetSKillEndJumpState@ioBaseChar@@QAEXM_N0000@Z:PROC ; ioBaseChar::SetSKillEndJumpState
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ$0
__ehfuncinfo$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioflyfollowstatebuff2.cpp
xdata$x	ENDS
;	COMDAT ?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ
_TEXT	SEGMENT
_kInfo$530688 = -108					; size = 96
__$EHRec$ = -12						; size = 12
?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ PROC	; ioFlyFollowStateBuff2::ClearBuffState, COMDAT
; _this$ = ecx

; 253  : {

  00000	6a 60		 push	 96			; 00000060H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 254  : 	ioBaseChar *pOwner = GetOwner();

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00013	8b f8		 mov	 edi, eax

; 255  : 	if ( !pOwner )

  00015	33 db		 xor	 ebx, ebx
  00017	3b fb		 cmp	 edi, ebx
  00019	74 63		 je	 SHORT $LN1@ClearBuffS

; 256  : 		return;
; 257  : 
; 258  : 	pOwner->SetWorldScale( m_vBeforeScale );

  0001b	8b 07		 mov	 eax, DWORD PTR [edi]
  0001d	8d 8e b4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2484]
  00023	51		 push	 ecx
  00024	8b cf		 mov	 ecx, edi
  00026	ff 50 4c	 call	 DWORD PTR [eax+76]

; 259  : 	if( pOwner->GetState() == CS_BUFF_ACTION )

  00029	80 bf 10 03 00
	00 70		 cmp	 BYTE PTR [edi+784], 112	; 00000070H
  00030	75 4c		 jne	 SHORT $LN1@ClearBuffS

; 260  : 	{
; 261  : 		if( m_bSetEndJump )

  00032	38 9e dc 09 00
	00		 cmp	 BYTE PTR [esi+2524], bl
  00038	74 1e		 je	 SHORT $LN2@ClearBuffS

; 262  : 			pOwner->SetSKillEndJumpState( m_fEndJumpPower, false, true, false, true );

  0003a	f3 0f 10 86 e0
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2528]
  00042	53		 push	 ebx
  00043	6a 01		 push	 1
  00045	53		 push	 ebx
  00046	6a 01		 push	 1
  00048	53		 push	 ebx
  00049	51		 push	 ecx
  0004a	8b cf		 mov	 ecx, edi
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	e8 00 00 00 00	 call	 ?SetSKillEndJumpState@ioBaseChar@@QAEXM_N0000@Z ; ioBaseChar::SetSKillEndJumpState

; 263  : 		else

  00056	eb 26		 jmp	 SHORT $LN1@ClearBuffS
$LN2@ClearBuffS:

; 264  : 		{
; 265  : 			BlowWoundAniInfo kInfo;

  00058	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$530688[ebp]
  0005b	e8 00 00 00 00	 call	 ??0tagBlowWoundAniInfo@@QAE@XZ ; tagBlowWoundAniInfo::tagBlowWoundAniInfo

; 266  : 			pOwner->SetBlowWoundedState( true, kInfo );

  00060	53		 push	 ebx
  00061	53		 push	 ebx
  00062	8d 45 94	 lea	 eax, DWORD PTR _kInfo$530688[ebp]
  00065	50		 push	 eax
  00066	6a 01		 push	 1
  00068	8b cf		 mov	 ecx, edi
  0006a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0006d	e8 00 00 00 00	 call	 ?SetBlowWoundedState@ioBaseChar@@QAEX_NABUtagBlowWoundAniInfo@@00@Z ; ioBaseChar::SetBlowWoundedState

; 267  : 		}

  00072	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$530688[ebp]
  00079	e8 00 00 00 00	 call	 ??1tagBlowWoundAniInfo@@QAE@XZ
$LN1@ClearBuffS:

; 268  : 	}
; 269  : }

  0007e	e8 00 00 00 00	 call	 __EH_epilog3
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$530688[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagBlowWoundAniInfo@@QAE@XZ
__ehhandler$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ ENDP	; ioFlyFollowStateBuff2::ClearBuffState
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioFlyFollowStateBuff2@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioFlyFollowStateBuff2@@UAEXPAVioBaseChar@@@Z PROC ; ioFlyFollowStateBuff2::StartBuff, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 82   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 83   : 
; 84   : 	SetBuffMoveState( pOwner );

  0000e	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?SetBuffMoveState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z ; ioFlyFollowStateBuff2::SetBuffMoveState
  00018	5e		 pop	 esi

; 85   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?StartBuff@ioFlyFollowStateBuff2@@UAEXPAVioBaseChar@@@Z ENDP ; ioFlyFollowStateBuff2::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioFlyFollowStateBuff2@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioFlyFollowStateBuff2@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioFlyFollowStateBuff2::ApplyStartBuff, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 89   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 0c		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 90   : 		return false;
; 91   : 
; 92   : 	SetBuffMoveState( pOwner );

  00018	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?SetBuffMoveState@ioFlyFollowStateBuff2@@AAEXPAVioBaseChar@@@Z ; ioFlyFollowStateBuff2::SetBuffMoveState

; 93   : 
; 94   : 	return true;

  00022	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  00024	5e		 pop	 esi

; 95   : }

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioFlyFollowStateBuff2@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioFlyFollowStateBuff2::ApplyStartBuff
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessBuff@ioFlyFollowStateBuff2@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioFlyFollowStateBuff2@@UAEXM@Z PROC	; ioFlyFollowStateBuff2::ProcessBuff, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 133  : 	if ( !CheckLive() )

  00006	e8 00 00 00 00	 call	 ?CheckLive@ioFlyFollowStateBuff2@@AAE_NXZ ; ioFlyFollowStateBuff2::CheckLive
  0000b	84 c0		 test	 al, al
  0000d	75 09		 jne	 SHORT $LN5@ProcessBuf

; 134  : 	{
; 135  : 		SetReserveEndBuff();

  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 136  : 		return;

  00016	eb 32		 jmp	 SHORT $LN3@ProcessBuf
$LN5@ProcessBuf:

; 137  : 	}
; 138  : 
; 139  : 	switch( m_BuffState )

  00018	8b 86 6c 09 00
	00		 mov	 eax, DWORD PTR [esi+2412]
  0001e	48		 dec	 eax
  0001f	74 17		 je	 SHORT $LN2@ProcessBuf
  00021	48		 dec	 eax
  00022	75 26		 jne	 SHORT $LN3@ProcessBuf

; 143  : 		break;
; 144  : 	case BS_WAIT:
; 145  : 		ProcessWaitState( fTimePerSec );

  00024	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00029	51		 push	 ecx
  0002a	8b ce		 mov	 ecx, esi
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?ProcessWaitState@ioFlyFollowStateBuff2@@AAEXM@Z ; ioFlyFollowStateBuff2::ProcessWaitState

; 146  : 		break;

  00036	eb 12		 jmp	 SHORT $LN3@ProcessBuf
$LN2@ProcessBuf:

; 140  : 	{
; 141  : 	case BS_MOVE:
; 142  : 		ProcessMoveState( fTimePerSec );

  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0003d	51		 push	 ecx
  0003e	8b ce		 mov	 ecx, esi
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	e8 00 00 00 00	 call	 ?ProcessMoveState@ioFlyFollowStateBuff2@@AAEXM@Z ; ioFlyFollowStateBuff2::ProcessMoveState
$LN3@ProcessBuf:
  0004a	5e		 pop	 esi

; 147  : 	}
; 148  : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?ProcessBuff@ioFlyFollowStateBuff2@@UAEXM@Z ENDP	; ioFlyFollowStateBuff2::ProcessBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioFlyFollowStateBuff2@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioFlyFollowStateBuff2@@UAEXXZ PROC		; ioFlyFollowStateBuff2::EndBuff, COMDAT
; _this$ = ecx

; 151  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 152  : 	ClearBuffState();

  00003	e8 00 00 00 00	 call	 ?ClearBuffState@ioFlyFollowStateBuff2@@AAEXXZ ; ioFlyFollowStateBuff2::ClearBuffState

; 153  : 	ioBuff::EndBuff();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioFlyFollowStateBuff2@@UAEXXZ ENDP		; ioFlyFollowStateBuff2::EndBuff
_TEXT	ENDS
END
