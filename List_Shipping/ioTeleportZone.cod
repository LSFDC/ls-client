; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioTeleportZone.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetResultList@FL_CollisionPlayEntity@@QBEABV?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@XZ ; FL_CollisionPlayEntity::GetResultList
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\findlistpredicateimpl.h
;	COMDAT ?GetResultList@FL_CollisionPlayEntity@@QBEABV?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetResultList@FL_CollisionPlayEntity@@QBEABV?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@XZ PROC ; FL_CollisionPlayEntity::GetResultList, COMDAT
; _this$ = ecx

; 17   : 	const PlayEntityList& GetResultList() const { return m_ResultList; }

  00000	8d 41 4c	 lea	 eax, DWORD PTR [ecx+76]
  00003	c3		 ret	 0
?GetResultList@FL_CollisionPlayEntity@@QBEABV?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@XZ ENDP ; FL_CollisionPlayEntity::GetResultList
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?UpdateAfter@ioTeleportZone@@UAEXM@Z		; ioTeleportZone::UpdateAfter
EXTRN	?UpdateAfter@ioGameEntity@@UAEXM@Z:PROC		; ioGameEntity::UpdateAfter
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioteleportzone.cpp
;	COMDAT ?UpdateAfter@ioTeleportZone@@UAEXM@Z
_TEXT	SEGMENT
_fFrameGap$ = 8						; size = 4
?UpdateAfter@ioTeleportZone@@UAEXM@Z PROC		; ioTeleportZone::UpdateAfter, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 105  : 	if( m_pGroup )

  00006	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0000a	74 13		 je	 SHORT $LN1@UpdateAfte

; 106  : 	{
; 107  : 		m_pGroup->Update( fFrameGap );

  0000c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fFrameGap$[ebp]
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	51		 push	 ecx
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	ff 50 40	 call	 DWORD PTR [eax+64]
$LN1@UpdateAfte:

; 108  : 	}
; 109  : 
; 110  : 	ioPlayEntity::UpdateAfter( fFrameGap );

  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fFrameGap$[ebp]
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	e8 00 00 00 00	 call	 ?UpdateAfter@ioGameEntity@@UAEXM@Z ; ioGameEntity::UpdateAfter
  00031	5e		 pop	 esi

; 111  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?UpdateAfter@ioTeleportZone@@UAEXM@Z ENDP		; ioTeleportZone::UpdateAfter
_TEXT	ENDS
PUBLIC	?IsMountingAvailable@ioTeleportZone@@UBE_NXZ	; ioTeleportZone::IsMountingAvailable
; Function compile flags: /Ogsp
;	COMDAT ?IsMountingAvailable@ioTeleportZone@@UBE_NXZ
_TEXT	SEGMENT
?IsMountingAvailable@ioTeleportZone@@UBE_NXZ PROC	; ioTeleportZone::IsMountingAvailable, COMDAT
; _this$ = ecx

; 115  : 	return false;

  00000	32 c0		 xor	 al, al

; 116  : }

  00002	c3		 ret	 0
?IsMountingAvailable@ioTeleportZone@@UBE_NXZ ENDP	; ioTeleportZone::IsMountingAvailable
_TEXT	ENDS
PUBLIC	?UpdateBottomHeight@ioTeleportZone@@MBEXXZ	; ioTeleportZone::UpdateBottomHeight
; Function compile flags: /Ogsp
;	COMDAT ?UpdateBottomHeight@ioTeleportZone@@MBEXXZ
_TEXT	SEGMENT
?UpdateBottomHeight@ioTeleportZone@@MBEXXZ PROC		; ioTeleportZone::UpdateBottomHeight, COMDAT
; _this$ = ecx

; 119  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 120  : 	m_fCurBottomHeight = GetWorldPosition().y;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 70	 call	 DWORD PTR [eax+112]
  00008	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000b	d9 9e 84 00 00
	00		 fstp	 DWORD PTR [esi+132]
  00011	5e		 pop	 esi

; 121  : }

  00012	c3		 ret	 0
?UpdateBottomHeight@ioTeleportZone@@MBEXXZ ENDP		; ioTeleportZone::UpdateBottomHeight
_TEXT	ENDS
PUBLIC	?ApplyWeapon@ioTeleportZone@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z ; ioTeleportZone::ApplyWeapon
; Function compile flags: /Ogsp
;	COMDAT ?ApplyWeapon@ioTeleportZone@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ApplyWeapon@ioTeleportZone@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z PROC ; ioTeleportZone::ApplyWeapon, COMDAT
; _this$ = ecx

; 125  : 	return AWE_NO_EXPLOSION;

  00000	33 c0		 xor	 eax, eax

; 126  : }

  00002	c2 04 00	 ret	 4
?ApplyWeapon@ioTeleportZone@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z ENDP ; ioTeleportZone::ApplyWeapon
_TEXT	ENDS
PUBLIC	?IsCollisionAvailableWeapon@ioTeleportZone@@UAE_NPAVioWeapon@@@Z ; ioTeleportZone::IsCollisionAvailableWeapon
; Function compile flags: /Ogsp
;	COMDAT ?IsCollisionAvailableWeapon@ioTeleportZone@@UAE_NPAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?IsCollisionAvailableWeapon@ioTeleportZone@@UAE_NPAVioWeapon@@@Z PROC ; ioTeleportZone::IsCollisionAvailableWeapon, COMDAT
; _this$ = ecx

; 130  : 	return false;

  00000	32 c0		 xor	 al, al

; 131  : }

  00002	c2 04 00	 ret	 4
?IsCollisionAvailableWeapon@ioTeleportZone@@UAE_NPAVioWeapon@@@Z ENDP ; ioTeleportZone::IsCollisionAvailableWeapon
_TEXT	ENDS
PUBLIC	?IsEntityCollisionSkipState@ioTeleportZone@@UBE_NPAVioGameEntity@@@Z ; ioTeleportZone::IsEntityCollisionSkipState
; Function compile flags: /Ogsp
;	COMDAT ?IsEntityCollisionSkipState@ioTeleportZone@@UBE_NPAVioGameEntity@@@Z
_TEXT	SEGMENT
_pColEntity$ = 8					; size = 4
?IsEntityCollisionSkipState@ioTeleportZone@@UBE_NPAVioGameEntity@@@Z PROC ; ioTeleportZone::IsEntityCollisionSkipState, COMDAT
; _this$ = ecx

; 135  : 	return true;

  00000	b0 01		 mov	 al, 1

; 136  : }

  00002	c2 04 00	 ret	 4
?IsEntityCollisionSkipState@ioTeleportZone@@UBE_NPAVioGameEntity@@@Z ENDP ; ioTeleportZone::IsEntityCollisionSkipState
_TEXT	ENDS
PUBLIC	?IsWoundedCollision@ioTeleportZone@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z ; ioTeleportZone::IsWoundedCollision
; Function compile flags: /Ogsp
;	COMDAT ?IsWoundedCollision@ioTeleportZone@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_rkAttackBox$ = 8					; size = 4
_pColPoint$ = 12					; size = 4
?IsWoundedCollision@ioTeleportZone@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z PROC ; ioTeleportZone::IsWoundedCollision, COMDAT
; _this$ = ecx

; 140  : 	return false;

  00000	32 c0		 xor	 al, al

; 141  : }

  00002	c2 08 00	 ret	 8
?IsWoundedCollision@ioTeleportZone@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z ENDP ; ioTeleportZone::IsWoundedCollision
_TEXT	ENDS
PUBLIC	?GetSubType@ioTeleportZone@@UBE?AW4PlaySubType@ioPlayEntity@@XZ ; ioTeleportZone::GetSubType
; Function compile flags: /Ogsp
;	COMDAT ?GetSubType@ioTeleportZone@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
_TEXT	SEGMENT
?GetSubType@ioTeleportZone@@UBE?AW4PlaySubType@ioPlayEntity@@XZ PROC ; ioTeleportZone::GetSubType, COMDAT
; _this$ = ecx

; 145  : 	return PST_TELEPORT_ZONE;

  00000	6a 04		 push	 4
  00002	58		 pop	 eax

; 146  : }

  00003	c3		 ret	 0
?GetSubType@ioTeleportZone@@UBE?AW4PlaySubType@ioPlayEntity@@XZ ENDP ; ioTeleportZone::GetSubType
_TEXT	ENDS
PUBLIC	?GetArmorType@ioTeleportZone@@UBE?AW4ArmorType@@XZ ; ioTeleportZone::GetArmorType
; Function compile flags: /Ogsp
;	COMDAT ?GetArmorType@ioTeleportZone@@UBE?AW4ArmorType@@XZ
_TEXT	SEGMENT
?GetArmorType@ioTeleportZone@@UBE?AW4ArmorType@@XZ PROC	; ioTeleportZone::GetArmorType, COMDAT
; _this$ = ecx

; 150  : 	return AT_UNARMOR;

  00000	33 c0		 xor	 eax, eax

; 151  : }

  00002	c3		 ret	 0
?GetArmorType@ioTeleportZone@@UBE?AW4ArmorType@@XZ ENDP	; ioTeleportZone::GetArmorType
_TEXT	ENDS
PUBLIC	?DontMoveEntityLevel@ioTeleportZone@@UBEHXZ	; ioTeleportZone::DontMoveEntityLevel
; Function compile flags: /Ogsp
;	COMDAT ?DontMoveEntityLevel@ioTeleportZone@@UBEHXZ
_TEXT	SEGMENT
?DontMoveEntityLevel@ioTeleportZone@@UBEHXZ PROC	; ioTeleportZone::DontMoveEntityLevel, COMDAT
; _this$ = ecx

; 155  : 	return 5;

  00000	6a 05		 push	 5
  00002	58		 pop	 eax

; 156  : }

  00003	c3		 ret	 0
?DontMoveEntityLevel@ioTeleportZone@@UBEHXZ ENDP	; ioTeleportZone::DontMoveEntityLevel
_TEXT	ENDS
PUBLIC	?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::operator[]
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::capacity
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ PROC		; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ ENDP		; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z ; std::allocator<D3DXVECTOR3>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z PROC ; std::allocator<D3DXVECTOR3>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z ENDP ; std::allocator<D3DXVECTOR3>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@PAU342@@Z ; std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@PAU342@@Z PROC ; std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAVioPlayEntity@@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@@Z ; std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAVioPlayEntity@@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAVioPlayEntity@@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@@Z PROC ; std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@SAAAPAVioPlayEntity@@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@2@@Z ENDP ; std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >::_Myval
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z PROC	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ ; std::allocator<D3DXVECTOR3>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ PROC	; std::allocator<D3DXVECTOR3>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ ENDP	; std::allocator<D3DXVECTOR3>::max_size
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEABUD3DXVECTOR3@@XZ ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEABUD3DXVECTOR3@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEABUD3DXVECTOR3@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator*
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z ; std::addressof<D3DXVECTOR3 const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z PROC ; std::addressof<D3DXVECTOR3 const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z ENDP ; std::addressof<D3DXVECTOR3 const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ; std::_Allocate<D3DXVECTOR3>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z
_TEXT	SEGMENT
$T514107 = -12						; size = 12
$T514112 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z PROC ; std::_Allocate<D3DXVECTOR3>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T514112[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T514112[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T514107[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T514107[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T514107[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ENDP ; std::_Allocate<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z ; std::forward<D3DXVECTOR3 &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z PROC ; std::forward<D3DXVECTOR3 &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z ENDP ; std::forward<D3DXVECTOR3 &>
_TEXT	ENDS
PUBLIC	??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z ; std::allocator<D3DXVECTOR3>::construct<D3DXVECTOR3 &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z PROC ; std::allocator<D3DXVECTOR3>::construct<D3DXVECTOR3 &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct:
  00013	5f		 pop	 edi

; 209  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z ENDP ; std::allocator<D3DXVECTOR3>::construct<D3DXVECTOR3 &>
_TEXT	ENDS
PUBLIC	??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z ; std::forward<D3DXVECTOR3 const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z PROC ; std::forward<D3DXVECTOR3 const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z ENDP ; std::forward<D3DXVECTOR3 const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z ; std::_Ptr_cat<D3DXVECTOR3,D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z PROC ; std::_Ptr_cat<D3DXVECTOR3,D3DXVECTOR3>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z ENDP ; std::_Ptr_cat<D3DXVECTOR3,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z ; std::_Construct<D3DXVECTOR3,D3DXVECTOR3 const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z PROC ; std::_Construct<D3DXVECTOR3,D3DXVECTOR3 const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z ENDP ; std::_Construct<D3DXVECTOR3,D3DXVECTOR3 const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z ; std::_Val_type<D3DXVECTOR3 *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z PROC ; std::_Val_type<D3DXVECTOR3 *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z ENDP ; std::_Val_type<D3DXVECTOR3 *>
_TEXT	ENDS
PUBLIC	??$move@AAUD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ; std::move<D3DXVECTOR3 &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z PROC ; std::move<D3DXVECTOR3 &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ENDP ; std::move<D3DXVECTOR3 &>
_TEXT	ENDS
PUBLIC	??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z ; std::_Destroy<D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z PROC ; std::_Destroy<D3DXVECTOR3>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z ENDP ; std::_Destroy<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ; std::forward<D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z PROC ; std::forward<D3DXVECTOR3>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ENDP ; std::forward<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ	; ioPlayMode::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplaymode.h
;	COMDAT ?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ PROC	; ioPlayMode::GetCreator, COMDAT
; _this$ = ecx

; 631  : 	inline ioPlayStage* GetCreator() const { return m_pCreator; }

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	c3		 ret	 0
?GetCreator@ioPlayMode@@QBEPAVioPlayStage@@XZ ENDP	; ioPlayMode::GetCreator
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBEABQAVioPlayEntity@@XZ ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBEABQAVioPlayEntity@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBEABQAVioPlayEntity@@XZ PROC ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBEABQAVioPlayEntity@@XZ ENDP ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::operator!=
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z PROC ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z ENDP ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z ; std::allocator<D3DXVECTOR3>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z PROC ; std::allocator<D3DXVECTOR3>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ; std::_Allocate<D3DXVECTOR3>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z ENDP ; std::allocator<D3DXVECTOR3>::allocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEAAUD3DXVECTOR3@@XZ ; std::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEAAUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEAAUD3DXVECTOR3@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBEAAUD3DXVECTOR3@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator*
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ; ioINILoader::LoadInt_e<17>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<17>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadInt_e
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadInt_e
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadInt_e
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadInt_e
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadInt_e
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadInt_e
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadInt_e
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadInt_e:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  001e1	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ; ioINILoader::LoadInt_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<14>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadInt_e@2
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadInt_e@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadInt_e@2
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadInt_e@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadInt_e@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadInt_e@2
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadInt_e@2
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadInt_e@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadInt_e@2
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadInt_e@2
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadInt_e@2:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  0019e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001a1	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a8	50		 push	 eax
  001a9	8b ce		 mov	 ecx, esi
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	5e		 pop	 esi
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	c9		 leave
  001bd	c2 08 00	 ret	 8
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<14>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z ; std::allocator<D3DXVECTOR3>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z PROC ; std::allocator<D3DXVECTOR3>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@2:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z ENDP ; std::allocator<D3DXVECTOR3>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 18		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00014	8b f0		 mov	 esi, eax
  00016	a5		 movsd
  00017	a5		 movsd
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	a5		 movsd
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 ec		 jne	 SHORT $LL3@Move
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z ; std::allocator<D3DXVECTOR3>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z PROC ; std::allocator<D3DXVECTOR3>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z ENDP ; std::allocator<D3DXVECTOR3>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z ; std::allocator<D3DXVECTOR3>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z PROC ; std::allocator<D3DXVECTOR3>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct@3:
  00013	5f		 pop	 edi

; 203  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z ENDP ; std::allocator<D3DXVECTOR3>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@PBV?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >::_List_const_iterator<std::_List_val<ioPlayEntity *,std::allocator<ioPlayEntity *> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QAE@PAUD3DXVECTOR3@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::_Vector_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@2:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$514471 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z PROC ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$514471[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ENDP ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z ; std::_Dest_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z PROC ; std::_Dest_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z ENDP ; std::_Dest_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val@3:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	?begin@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ ; std::list<ioPlayEntity *,std::allocator<ioPlayEntity *> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?begin@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ PROC ; std::list<ioPlayEntity *,std::allocator<ioPlayEntity *> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ ENDP ; std::list<ioPlayEntity *,std::allocator<ioPlayEntity *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ ; std::list<ioPlayEntity *,std::allocator<ioPlayEntity *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ PROC ; std::list<ioPlayEntity *,std::allocator<ioPlayEntity *> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@PAVioPlayEntity@@V?$allocator@PAVioPlayEntity@@@std@@@std@@@2@XZ ENDP ; std::list<ioPlayEntity *,std::allocator<ioPlayEntity *> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>
  00015	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	?front@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::front
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?front@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?front@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::front, COMDAT
; _this$ = ecx

; 957  : 		return (*begin());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 958  : 		}

  00002	c3		 ret	 0
?front@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::front
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z PROC ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__Cat$514732 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z PROC ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$514732[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ENDP ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	?Update@ioTeleportZone@@UAEXMKK@Z		; ioTeleportZone::Update
EXTRN	??1FL_CollisionPlayEntity@@UAE@XZ:PROC		; FL_CollisionPlayEntity::~FL_CollisionPlayEntity
EXTRN	__imp__rand:PROC
EXTRN	?FindEntityList@ioPlayStage@@QAE_NAAVFindListPredicate@@@Z:PROC ; ioPlayStage::FindEntityList
EXTRN	??0FL_CollisionPlayEntity@@QAE@ABVioOrientBox@@PAVioPlayEntity@@@Z:PROC ; FL_CollisionPlayEntity::FL_CollisionPlayEntity
EXTRN	?GetWorldCollisionBox@ioGameEntity@@QBEABVioOrientBox@@XZ:PROC ; ioGameEntity::GetWorldCollisionBox
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?Update@ioTeleportZone@@UAEXMKK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@ioTeleportZone@@UAEXMKK@Z$0
__ehfuncinfo$?Update@ioTeleportZone@@UAEXMKK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Update@ioTeleportZone@@UAEXMKK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioteleportzone.cpp
xdata$x	ENDS
;	COMDAT ?Update@ioTeleportZone@@UAEXMKK@Z
_TEXT	SEGMENT
_pReceiver$512600 = -124				; size = 4
_iter$ = -120						; size = 4
_kFind$ = -116						; size = 88
_vTargetPos$512604 = -28				; size = 12
__$EHRec$ = -12						; size = 12
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
_dwCurTime$ = 16					; size = 4
?Update@ioTeleportZone@@UAEXMKK@Z PROC			; ioTeleportZone::Update, COMDAT
; _this$ = ecx

; 60   : {

  00000	6a 70		 push	 112			; 00000070H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Update@ioTeleportZone@@UAEXMKK@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b d9		 mov	 ebx, ecx

; 61   : 	if( m_TargetPosList.empty() )

  0000e	8b 83 cc 01 00
	00		 mov	 eax, DWORD PTR [ebx+460]
  00014	3b 83 d0 01 00
	00		 cmp	 eax, DWORD PTR [ebx+464]
  0001a	0f 84 eb 00 00
	00		 je	 $LN13@Update

; 62   : 		return;
; 63   : 
; 64   : 	ioPlayStage *pStage = m_pModeParent->GetCreator();

  00020	8b 83 8c 00 00
	00		 mov	 eax, DWORD PTR [ebx+140]
  00026	8b 70 34	 mov	 esi, DWORD PTR [eax+52]

; 65   : 	if( !pStage )	return;

  00029	85 f6		 test	 esi, esi
  0002b	0f 84 da 00 00
	00		 je	 $LN13@Update

; 66   : 
; 67   : 	FL_CollisionPlayEntity kFind( GetWorldCollisionBox(), this );

  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 ?GetWorldCollisionBox@ioGameEntity@@QBEABVioOrientBox@@XZ ; ioGameEntity::GetWorldCollisionBox
  00037	50		 push	 eax
  00038	8d 4d 8c	 lea	 ecx, DWORD PTR _kFind$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0FL_CollisionPlayEntity@@QAE@ABVioOrientBox@@PAVioPlayEntity@@@Z ; FL_CollisionPlayEntity::FL_CollisionPlayEntity
  00040	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 68   : 	if( !pStage->FindEntityList( kFind ) )

  00044	8d 45 8c	 lea	 eax, DWORD PTR _kFind$[ebp]
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?FindEntityList@ioPlayStage@@QAE_NAAVFindListPredicate@@@Z ; ioPlayStage::FindEntityList
  0004f	84 c0		 test	 al, al

; 69   : 		return;

  00051	0f 84 a8 00 00
	00		 je	 $LN7@Update

; 70   : 
; 71   : 	const PlayEntityList &rkEntityList = kFind.GetResultList();
; 72   : 
; 73   : 	PlayEntityList::const_iterator iter = rkEntityList.begin();

  00057	8b 45 d8	 mov	 eax, DWORD PTR _kFind$[ebp+76]
  0005a	8b 30		 mov	 esi, DWORD PTR [eax]
  0005c	89 75 88	 mov	 DWORD PTR _iter$[ebp], esi

; 74   : 	for( ; iter!=rkEntityList.end() ; ++iter )

  0005f	3b f0		 cmp	 esi, eax
  00061	0f 84 98 00 00
	00		 je	 $LN7@Update
  00067	eb 03		 jmp	 SHORT $LN32@Update
$LL76@Update:
  00069	8b 75 88	 mov	 esi, DWORD PTR _iter$[ebp]
$LN32@Update:

; 75   : 	{
; 76   : 		ioWorldEventReceiver *pReceiver = (*iter)->GetWorldEventReceiver();

  0006c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0006f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00071	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]
  00077	89 45 84	 mov	 DWORD PTR _pReceiver$512600[ebp], eax

; 77   : 		if( !pReceiver ) continue;

  0007a	85 c0		 test	 eax, eax
  0007c	74 73		 je	 SHORT $LN8@Update

; 78   : 
; 79   : 		if( !m_pExtraAffector || m_pExtraAffector->GetType() != ioZoneAffector::ZAT_POISON_ZONE )

  0007e	83 bb dc 01 00
	00 00		 cmp	 DWORD PTR [ebx+476], 0
  00085	74 10		 je	 SHORT $LN4@Update
  00087	8b 8b dc 01 00
	00		 mov	 ecx, DWORD PTR [ebx+476]
  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	ff 50 04	 call	 DWORD PTR [eax+4]
  00092	83 f8 02	 cmp	 eax, 2
  00095	74 43		 je	 SHORT $LN5@Update
$LN4@Update:

; 80   : 		{
; 81   : 			D3DXVECTOR3 vTargetPos;
; 82   : 			if( m_TargetPosList.size() == 1 )

  00097	8b b3 cc 01 00
	00		 mov	 esi, DWORD PTR [ebx+460]
  0009d	8b 83 d0 01 00
	00		 mov	 eax, DWORD PTR [ebx+464]
  000a3	2b c6		 sub	 eax, esi
  000a5	6a 0c		 push	 12			; 0000000cH
  000a7	99		 cdq
  000a8	59		 pop	 ecx
  000a9	f7 f9		 idiv	 ecx
  000ab	8b f8		 mov	 edi, eax
  000ad	83 ff 01	 cmp	 edi, 1

; 83   : 			{
; 84   : 				vTargetPos = m_TargetPosList.front();
; 85   : 			}
; 86   : 			else

  000b0	74 14		 je	 SHORT $LN78@Update

; 87   : 			{
; 88   : 				int iPosCount = m_TargetPosList.size();
; 89   : 				int iRandIdx = rand() % iPosCount;

  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  000b8	99		 cdq
  000b9	f7 ff		 idiv	 edi

; 90   : 				vTargetPos = m_TargetPosList[iRandIdx];

  000bb	8b f2		 mov	 esi, edx
  000bd	6b f6 0c	 imul	 esi, 12			; 0000000cH
  000c0	03 b3 cc 01 00
	00		 add	 esi, DWORD PTR [ebx+460]
$LN78@Update:

; 91   : 			}
; 92   : 
; 93   : 			pReceiver->OnTelepotation( vTargetPos );

  000c6	8b 4d 84	 mov	 ecx, DWORD PTR _pReceiver$512600[ebp]
  000c9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cb	8d 7d e4	 lea	 edi, DWORD PTR _vTargetPos$512604[ebp]
  000ce	a5		 movsd
  000cf	a5		 movsd
  000d0	8d 55 e4	 lea	 edx, DWORD PTR _vTargetPos$512604[ebp]
  000d3	52		 push	 edx
  000d4	a5		 movsd
  000d5	ff 10		 call	 DWORD PTR [eax]
  000d7	8b 75 88	 mov	 esi, DWORD PTR _iter$[ebp]
$LN5@Update:

; 94   : 		}
; 95   : 
; 96   : 		if( m_pExtraAffector )

  000da	83 bb dc 01 00
	00 00		 cmp	 DWORD PTR [ebx+476], 0
  000e1	74 0e		 je	 SHORT $LN8@Update

; 97   : 		{
; 98   : 			m_pExtraAffector->ApplyToReceiver( pReceiver );

  000e3	8b 8b dc 01 00
	00		 mov	 ecx, DWORD PTR [ebx+476]
  000e9	ff 75 84	 push	 DWORD PTR _pReceiver$512600[ebp]
  000ec	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ee	ff 50 08	 call	 DWORD PTR [eax+8]
$LN8@Update:

; 74   : 	for( ; iter!=rkEntityList.end() ; ++iter )

  000f1	8b 36		 mov	 esi, DWORD PTR [esi]
  000f3	89 75 88	 mov	 DWORD PTR _iter$[ebp], esi
  000f6	3b 75 d8	 cmp	 esi, DWORD PTR _kFind$[ebp+76]
  000f9	0f 85 6a ff ff
	ff		 jne	 $LL76@Update
$LN7@Update:

; 99   : 		}
; 100  : 	}
; 101  : }

  000ff	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00103	8d 4d 8c	 lea	 ecx, DWORD PTR _kFind$[ebp]
  00106	e8 00 00 00 00	 call	 ??1FL_CollisionPlayEntity@@UAE@XZ ; FL_CollisionPlayEntity::~FL_CollisionPlayEntity
$LN13@Update:
  0010b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00110	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Update@ioTeleportZone@@UAEXMKK@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR _kFind$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FL_CollisionPlayEntity@@UAE@XZ ; FL_CollisionPlayEntity::~FL_CollisionPlayEntity
__ehhandler$?Update@ioTeleportZone@@UAEXMKK@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Update@ioTeleportZone@@UAEXMKK@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Update@ioTeleportZone@@UAEXMKK@Z ENDP			; ioTeleportZone::Update
PUBLIC	?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Umove<D3DXVECTOR3 *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Umove<D3DXVECTOR3 *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Umove<D3DXVECTOR3 *>
_TEXT	ENDS
PUBLIC	??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$512664 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 0c		 push	 12			; 0000000cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ; std::_Allocate<D3DXVECTOR3>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$512664[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$512664[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 0c		 push	 12			; 0000000cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 0c	 add	 ecx, 12			; 0000000cH
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 0c	 imul	 ebx, 12			; 0000000cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 0c	 imul	 edi, 12			; 0000000cH
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$512664[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$512664[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve
PUBLIC	?erase@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@0@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$515267 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@0@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$515267[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<D3DXVECTOR3 *,D3DXVECTOR3 *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@0@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::erase
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 0c		 push	 12			; 0000000cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 0c		 push	 12			; 0000000cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioTeleportZone@@6B@				; ioTeleportZone::`vftable'
PUBLIC	??0ioTeleportZone@@QAE@PAVioEntityGroup@@PAVioPlayMode@@H@Z ; ioTeleportZone::ioTeleportZone
PUBLIC	??_R4ioTeleportZone@@6B@			; ioTeleportZone::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioTeleportZone@@@8			; ioTeleportZone `RTTI Type Descriptor'
PUBLIC	??_R3ioTeleportZone@@8				; ioTeleportZone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioTeleportZone@@8				; ioTeleportZone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioTeleportZone@@8			; ioTeleportZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	?NeedUpdateBottomHeight@ioGameEntity@@UAEXXZ	; ioGameEntity::NeedUpdateBottomHeight
PUBLIC	?LoadProperty@ioTeleportZone@@UAEXAAVioINILoader@@@Z ; ioTeleportZone::LoadProperty
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
EXTRN	??0ioPlayEntity@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioPlayEntity::ioPlayEntity
EXTRN	?AddEntityEvent@ioEntityEvent@@UAEXPAVioEntity@@@Z:PROC ; ioEntityEvent::AddEntityEvent
EXTRN	??_EioTeleportZone@@UAEPAXI@Z:PROC		; ioTeleportZone::`vector deleting destructor'
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioGameEntity@@UBE_NXZ:PROC ; ioGameEntity::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsMountAvailable
EXTRN	?IsNowMountEnable@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Translate
EXTRN	?TranslateByConveyer@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::TranslateByConveyer
EXTRN	?TranslateByWorldEntity@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsCharCollisionSkipState@ioPlayEntity@@UBE_NW4TeamType@@H@Z:PROC ; ioPlayEntity::IsCharCollisionSkipState
EXTRN	?GetAttackCollisionBox@ioPlayEntity@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioPlayEntity::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioPlayEntity@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioPlayEntity::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::UpdateGauge
EXTRN	?RenderGauge@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
;	COMDAT ??_R2ioEntityEvent@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioTeleportZone@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioTeleportZone@@8 DD FLAT:??_R0?AVioTeleportZone@@@8 ; ioTeleportZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioTeleportZone@@8
rdata$r	ENDS
;	COMDAT ??_R2ioTeleportZone@@8
rdata$r	SEGMENT
??_R2ioTeleportZone@@8 DD FLAT:??_R1A@?0A@EA@ioTeleportZone@@8 ; ioTeleportZone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioTeleportZone@@8
rdata$r	SEGMENT
??_R3ioTeleportZone@@8 DD 00H				; ioTeleportZone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ioTeleportZone@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioTeleportZone@@@8
_DATA	SEGMENT
??_R0?AVioTeleportZone@@@8 DD FLAT:??_7type_info@@6B@	; ioTeleportZone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioTeleportZone@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioTeleportZone@@6B@
rdata$r	SEGMENT
??_R4ioTeleportZone@@6B@ DD 00H				; ioTeleportZone::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioTeleportZone@@@8
	DD	FLAT:??_R3ioTeleportZone@@8
rdata$r	ENDS
;	COMDAT ??_7ioTeleportZone@@6B@
CONST	SEGMENT
??_7ioTeleportZone@@6B@ DD FLAT:??_R4ioTeleportZone@@6B@ ; ioTeleportZone::`vftable'
	DD	FLAT:?AddEntityEvent@ioEntityEvent@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioTeleportZone@@UAEPAXI@Z
	DD	FLAT:?Update@ioTeleportZone@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioTeleportZone@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioGameEntity@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioGameEntity@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioTeleportZone@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioGameEntity@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioTeleportZone@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioGameEntity@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioTeleportZone@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioTeleportZone@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioTeleportZone@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioPlayEntity@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioTeleportZone@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioPlayEntity@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioTeleportZone@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioTeleportZone@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioTeleportZone@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioTeleportZone@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioPlayEntity@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioPlayEntity@@UAEXXZ
	DD	FLAT:?RenderGauge@ioPlayEntity@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioteleportzone.cpp
CONST	ENDS
;	COMDAT ??0ioTeleportZone@@QAE@PAVioEntityGroup@@PAVioPlayMode@@H@Z
_TEXT	SEGMENT
_pGrp$ = 8						; size = 4
_pMode$ = 12						; size = 4
_iCreateIndex$ = 16					; size = 4
??0ioTeleportZone@@QAE@PAVioEntityGroup@@PAVioPlayMode@@H@Z PROC ; ioTeleportZone::ioTeleportZone, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0ioPlayEntity@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioPlayEntity::ioPlayEntity

; 18   : 	m_iCreateIndex = iCreateIndex;

  00011	8b 45 10	 mov	 eax, DWORD PTR _iCreateIndex$[ebp]
  00014	33 c9		 xor	 ecx, ecx
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioTeleportZone@@6B@
  0001c	89 8e cc 01 00
	00		 mov	 DWORD PTR [esi+460], ecx
  00022	89 8e d0 01 00
	00		 mov	 DWORD PTR [esi+464], ecx
  00028	89 8e d4 01 00
	00		 mov	 DWORD PTR [esi+468], ecx
  0002e	89 86 c8 01 00
	00		 mov	 DWORD PTR [esi+456], eax

; 19   : 	m_pExtraAffector = NULL;

  00034	89 8e dc 01 00
	00		 mov	 DWORD PTR [esi+476], ecx

; 20   : }

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
??0ioTeleportZone@@QAE@PAVioEntityGroup@@PAVioPlayMode@@H@Z ENDP ; ioTeleportZone::ioTeleportZone
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
_TEXT	ENDS
;	COMDAT ?NeedUpdateBottomHeight@ioGameEntity@@UAEXXZ
_TEXT	SEGMENT
?NeedUpdateBottomHeight@ioGameEntity@@UAEXXZ PROC	; ioGameEntity::NeedUpdateBottomHeight, COMDAT
; _this$ = ecx

; 133  : 	virtual void NeedUpdateBottomHeight() { m_bNeedUpdateBottomHeight = true; }

  00000	c6 81 89 00 00
	00 01		 mov	 BYTE PTR [ecx+137], 1
  00007	c3		 ret	 0
?NeedUpdateBottomHeight@ioGameEntity@@UAEXXZ ENDP	; ioGameEntity::NeedUpdateBottomHeight
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$515418 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$515418[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$515418[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
_TEXT	ENDS
PUBLIC	??1ioTeleportZone@@UAE@XZ			; ioTeleportZone::~ioTeleportZone
EXTRN	??1ioPlayEntity@@UAE@XZ:PROC			; ioPlayEntity::~ioPlayEntity
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioTeleportZone@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioTeleportZone@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioTeleportZone@@UAE@XZ$1
__ehfuncinfo$??1ioTeleportZone@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioTeleportZone@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioteleportzone.cpp
xdata$x	ENDS
;	COMDAT ??1ioTeleportZone@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioTeleportZone@@UAE@XZ PROC				; ioTeleportZone::~ioTeleportZone, COMDAT
; _this$ = ecx

; 23   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioTeleportZone@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ioTeleportZone@@6B@

; 24   : 	SAFEDELETE( m_pExtraAffector );

  00017	8b 8f dc 01 00
	00		 mov	 ecx, DWORD PTR [edi+476]
  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	85 c9		 test	 ecx, ecx
  00025	74 0d		 je	 SHORT $LN1@ioTeleport
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	50		 push	 eax
  0002a	ff 52 0c	 call	 DWORD PTR [edx+12]
  0002d	83 a7 dc 01 00
	00 00		 and	 DWORD PTR [edi+476], 0
$LN1@ioTeleport:

; 25   : }

  00034	8d 8f cc 01 00
	00		 lea	 ecx, DWORD PTR [edi+460]
  0003a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0003e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
  00043	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	8b cf		 mov	 ecx, edi
  00049	e8 00 00 00 00	 call	 ??1ioPlayEntity@@UAE@XZ	; ioPlayEntity::~ioPlayEntity
  0004e	e8 00 00 00 00	 call	 __EH_epilog3
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioTeleportZone@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioPlayEntity@@UAE@XZ	; ioPlayEntity::~ioPlayEntity
__unwindfunclet$??1ioTeleportZone@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 cc 01 00
	00		 add	 ecx, 460		; 000001ccH
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
__ehhandler$??1ioTeleportZone@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioTeleportZone@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioTeleportZone@@UAE@XZ ENDP				; ioTeleportZone::~ioTeleportZone
PUBLIC	?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 0c		 push	 12			; 0000000cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T515471 = -4						; size = 4
?clear@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T515471[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@0@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::clear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioTeleportZone@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioTeleportZone@@UAEPAXI@Z PROC			; ioTeleportZone::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioTeleportZone@@UAE@XZ ; ioTeleportZone::~ioTeleportZone
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioTeleportZone@@UAEPAXI@Z ENDP			; ioTeleportZone::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?CreateAffector@ioZoneAffector@@SAPAV1@W4ZoneAffectorType@1@@Z:PROC ; ioZoneAffector::CreateAffector
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
EXTRN	__imp__wsprintfA:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioteleportzone.cpp
;	COMDAT ?LoadProperty@ioTeleportZone@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -340					; size = 4
tv2682 = -336						; size = 4
$T515713 = -336						; size = 4
_rkLoader$GSCopy$ = -332				; size = 4
tv4355 = -328						; size = 4
_iTargetPos$ = -328					; size = 4
_szKey$ = -324						; size = 260
___encStr$512308 = -64					; size = 8
___encStr$512156 = -52					; size = 8
___encStr$512003 = -40					; size = 8
__k$515786 = -28					; size = 14
__k$515542 = -28					; size = 17
_vPos$511999 = -20					; size = 12
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioTeleportZone@@UAEXAAVioINILoader@@@Z PROC ; ioTeleportZone::LoadProperty, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _rkLoader$[ebp]

; 29   : 	int iTargetPos = rkLoader.LoadInt_e( "target_pos_count", 0 );

  0001a	6a 04		 push	 4

; 44   : 
; 45   : 		wsprintf_e( szKey, "pos%d_z", i+1 );

  0001c	89 bd ac fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00022	89 8d b4 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], ecx
  00028	c7 45 e4 99 8d
	99 8d		 mov	 DWORD PTR __k$515542[ebp], -1919316583 ; 8d998d99H
  0002f	c7 45 e8 88 98
	b4 9a		 mov	 DWORD PTR __k$515542[ebp+4], -1699440504 ; 9ab49888H
  00036	c7 45 ec 82 9f
	b4 89		 mov	 DWORD PTR __k$515542[ebp+8], -1984651390 ; 89b49f82H
  0003d	c7 45 f0 82 99
	85 9e		 mov	 DWORD PTR __k$515542[ebp+12], -1635411582 ; 9e859982H
  00044	8d 45 e4	 lea	 eax, DWORD PTR __k$515542[ebp]
  00047	c6 45 f4 00	 mov	 BYTE PTR __k$515542[ebp+16], 0
  0004b	5a		 pop	 edx
  0004c	be ed ec eb ea	 mov	 esi, -353637139		; eaebecedH
$LL407@LoadProper:

; 29   : 	int iTargetPos = rkLoader.LoadInt_e( "target_pos_count", 0 );

  00051	31 30		 xor	 DWORD PTR [eax], esi
  00053	83 c0 04	 add	 eax, 4
  00056	4a		 dec	 edx
  00057	75 f8		 jne	 SHORT $LL407@LoadProper
  00059	53		 push	 ebx
  0005a	52		 push	 edx
  0005b	8d 45 e4	 lea	 eax, DWORD PTR __k$515542[ebp]
  0005e	50		 push	 eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 30   : 
; 31   : 	m_TargetPosList.clear();

  00065	8d 9f cc 01 00
	00		 lea	 ebx, DWORD PTR [edi+460]
  0006b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0006d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _iTargetPos$[ebp], eax
  00073	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00076	50		 push	 eax
  00077	51		 push	 ecx
  00078	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR $T515713[ebp]
  0007e	50		 push	 eax
  0007f	8b cb		 mov	 ecx, ebx
  00081	e8 00 00 00 00	 call	 ?erase@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@0@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::erase

; 32   : 	m_TargetPosList.reserve( iTargetPos );

  00086	ff b5 b8 fe ff
	ff		 push	 DWORD PTR _iTargetPos$[ebp]
  0008c	8b cb		 mov	 ecx, ebx
  0008e	e8 00 00 00 00	 call	 ?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve

; 33   : 
; 34   : 	char szKey[MAX_PATH];
; 35   : 	for( int i=0 ; i<iTargetPos ; i++ )

  00093	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _iTargetPos$[ebp]
  00099	85 c0		 test	 eax, eax
  0009b	0f 8e 65 01 00
	00		 jle	 $LN299@LoadProper

; 29   : 	int iTargetPos = rkLoader.LoadInt_e( "target_pos_count", 0 );

  000a1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__wsprintfA
  000a7	c7 85 b8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv4355[ebp], 1
  000b1	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv2682[ebp], eax
$LL583@LoadProper:

; 36   : 	{
; 37   : 		D3DXVECTOR3 vPos;
; 38   : 
; 39   : 		wsprintf_e( szKey, "pos%d_x", i+1 );

  000b7	6a 04		 push	 4
  000b9	c7 45 d8 9d 83
	98 cf		 mov	 DWORD PTR ___encStr$512003[ebp], -812088419 ; cf98839dH
  000c0	31 75 d8	 xor	 DWORD PTR ___encStr$512003[ebp], esi
  000c3	c7 45 dc 89 b3
	93 00		 mov	 DWORD PTR ___encStr$512003[ebp+4], 9679753 ; 0093b389H
  000ca	58		 pop	 eax
$LL432@LoadProper:
  000cb	8b c8		 mov	 ecx, eax
  000cd	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d3	79 05		 jns	 SHORT $LN584@LoadProper
  000d5	49		 dec	 ecx
  000d6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d9	41		 inc	 ecx
$LN584@LoadProper:
  000da	b2 ed		 mov	 dl, -19			; ffffffedH
  000dc	2a d1		 sub	 dl, cl
  000de	30 54 05 d8	 xor	 BYTE PTR ___encStr$512003[ebp+eax], dl
  000e2	40		 inc	 eax
  000e3	83 f8 07	 cmp	 eax, 7
  000e6	7c e3		 jl	 SHORT $LL432@LoadProper
  000e8	ff b5 b8 fe ff
	ff		 push	 DWORD PTR tv4355[ebp]
  000ee	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$512003[ebp]
  000f1	50		 push	 eax
  000f2	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  000f8	50		 push	 eax
  000f9	ff d7		 call	 edi

; 40   : 		vPos.x = rkLoader.LoadFloat( szKey, 0.0f );

  000fb	0f 57 c0	 xorps	 xmm0, xmm0
  000fe	59		 pop	 ecx
  000ff	59		 pop	 ecx
  00100	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00106	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	50		 push	 eax
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00118	d9 5d ec	 fstp	 DWORD PTR _vPos$511999[ebp]

; 41   : 
; 42   : 		wsprintf_e( szKey, "pos%d_y", i+1 );

  0011b	6a 04		 push	 4
  0011d	c7 45 cc 9d 83
	98 cf		 mov	 DWORD PTR ___encStr$512156[ebp], -812088419 ; cf98839dH
  00124	31 75 cc	 xor	 DWORD PTR ___encStr$512156[ebp], esi
  00127	c7 45 d0 89 b3
	92 00		 mov	 DWORD PTR ___encStr$512156[ebp+4], 9614217 ; 0092b389H
  0012e	58		 pop	 eax
$LL440@LoadProper:
  0012f	8b c8		 mov	 ecx, eax
  00131	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00137	79 05		 jns	 SHORT $LN585@LoadProper
  00139	49		 dec	 ecx
  0013a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0013d	41		 inc	 ecx
$LN585@LoadProper:
  0013e	b2 ed		 mov	 dl, -19			; ffffffedH
  00140	2a d1		 sub	 dl, cl
  00142	30 54 05 cc	 xor	 BYTE PTR ___encStr$512156[ebp+eax], dl
  00146	40		 inc	 eax
  00147	83 f8 07	 cmp	 eax, 7
  0014a	7c e3		 jl	 SHORT $LL440@LoadProper
  0014c	ff b5 b8 fe ff
	ff		 push	 DWORD PTR tv4355[ebp]
  00152	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$512156[ebp]
  00155	50		 push	 eax
  00156	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0015c	50		 push	 eax
  0015d	ff d7		 call	 edi

; 43   : 		vPos.y = rkLoader.LoadFloat( szKey, 0.0f );

  0015f	0f 57 c0	 xorps	 xmm0, xmm0
  00162	59		 pop	 ecx
  00163	59		 pop	 ecx
  00164	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0016a	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	50		 push	 eax
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0017c	d9 5d f0	 fstp	 DWORD PTR _vPos$511999[ebp+4]

; 44   : 
; 45   : 		wsprintf_e( szKey, "pos%d_z", i+1 );

  0017f	6a 04		 push	 4
  00181	c7 45 c0 9d 83
	98 cf		 mov	 DWORD PTR ___encStr$512308[ebp], -812088419 ; cf98839dH
  00188	31 75 c0	 xor	 DWORD PTR ___encStr$512308[ebp], esi
  0018b	c7 45 c4 89 b3
	91 00		 mov	 DWORD PTR ___encStr$512308[ebp+4], 9548681 ; 0091b389H
  00192	58		 pop	 eax
$LL448@LoadProper:
  00193	8b c8		 mov	 ecx, eax
  00195	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0019b	79 05		 jns	 SHORT $LN586@LoadProper
  0019d	49		 dec	 ecx
  0019e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001a1	41		 inc	 ecx
$LN586@LoadProper:
  001a2	b2 ed		 mov	 dl, -19			; ffffffedH
  001a4	2a d1		 sub	 dl, cl
  001a6	30 54 05 c0	 xor	 BYTE PTR ___encStr$512308[ebp+eax], dl
  001aa	40		 inc	 eax
  001ab	83 f8 07	 cmp	 eax, 7
  001ae	7c e3		 jl	 SHORT $LL448@LoadProper
  001b0	ff b5 b8 fe ff
	ff		 push	 DWORD PTR tv4355[ebp]
  001b6	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$512308[ebp]
  001b9	50		 push	 eax
  001ba	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001c0	50		 push	 eax
  001c1	ff d7		 call	 edi

; 46   : 		vPos.z = rkLoader.LoadFloat( szKey, 0.0f );

  001c3	0f 57 c0	 xorps	 xmm0, xmm0
  001c6	59		 pop	 ecx
  001c7	59		 pop	 ecx
  001c8	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001ce	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d9	50		 push	 eax
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001e0	d9 5d f4	 fstp	 DWORD PTR _vPos$511999[ebp+8]

; 47   : 
; 48   : 		m_TargetPosList.push_back( vPos );

  001e3	8d 45 ec	 lea	 eax, DWORD PTR _vPos$511999[ebp]
  001e6	50		 push	 eax
  001e7	8b cb		 mov	 ecx, ebx
  001e9	e8 00 00 00 00	 call	 ?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back
  001ee	ff 85 b8 fe ff
	ff		 inc	 DWORD PTR tv4355[ebp]
  001f4	ff 8d b0 fe ff
	ff		 dec	 DWORD PTR tv2682[ebp]
  001fa	0f 85 b7 fe ff
	ff		 jne	 $LL583@LoadProper

; 33   : 
; 34   : 	char szKey[MAX_PATH];
; 35   : 	for( int i=0 ; i<iTargetPos ; i++ )

  00200	8b bd ac fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
$LN299@LoadProper:

; 49   : 	}
; 50   : 
; 51   : 	int iExtraAffector = rkLoader.LoadInt_e( "affector_type", 0 );

  00206	6a 03		 push	 3
  00208	59		 pop	 ecx
  00209	c7 45 e4 8c 8a
	8d 8f		 mov	 DWORD PTR __k$515786[ebp], -1886549364 ; 8f8d8a8cH
  00210	c7 45 e8 8e 98
	84 98		 mov	 DWORD PTR __k$515786[ebp+4], -1736140658 ; 9884988eH
  00217	c7 45 ec b2 98
	92 9a		 mov	 DWORD PTR __k$515786[ebp+8], -1701668686 ; 9a9298b2H
  0021e	8d 45 e4	 lea	 eax, DWORD PTR __k$515786[ebp]
  00221	66 c7 45 f0 88
	00		 mov	 WORD PTR __k$515786[ebp+12], 136 ; 00000088H
  00227	5b		 pop	 ebx
$LL557@LoadProper:
  00228	31 30		 xor	 DWORD PTR [eax], esi
  0022a	83 c0 04	 add	 eax, 4
  0022d	49		 dec	 ecx
  0022e	75 f8		 jne	 SHORT $LL557@LoadProper
  00230	80 75 f0 ed	 xor	 BYTE PTR __k$515786[ebp+12], -19 ; ffffffedH
  00234	51		 push	 ecx
  00235	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0023b	8d 45 e4	 lea	 eax, DWORD PTR __k$515786[ebp]
  0023e	50		 push	 eax
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 52   : 	m_pExtraAffector = ioZoneAffector::CreateAffector( (ioZoneAffector::ZoneAffectorType)iExtraAffector );

  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?CreateAffector@ioZoneAffector@@SAPAV1@W4ZoneAffectorType@1@@Z ; ioZoneAffector::CreateAffector
  0024b	59		 pop	 ecx
  0024c	89 87 dc 01 00
	00		 mov	 DWORD PTR [edi+476], eax
  00252	5f		 pop	 edi
  00253	5e		 pop	 esi

; 53   : 	if( m_pExtraAffector )

  00254	85 c0		 test	 eax, eax
  00256	74 0c		 je	 SHORT $LN1@LoadProper

; 54   : 	{
; 55   : 		m_pExtraAffector->LoadProperty( rkLoader );

  00258	ff b5 b4 fe ff
	ff		 push	 DWORD PTR _rkLoader$GSCopy$[ebp]
  0025e	8b 10		 mov	 edx, DWORD PTR [eax]
  00260	8b c8		 mov	 ecx, eax
  00262	ff 12		 call	 DWORD PTR [edx]
$LN1@LoadProper:

; 56   : 	}
; 57   : }

  00264	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00267	33 cd		 xor	 ecx, ebp
  00269	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026e	c9		 leave
  0026f	c2 04 00	 ret	 4
?LoadProperty@ioTeleportZone@@UAEXAAVioINILoader@@@Z ENDP ; ioTeleportZone::LoadProperty
_TEXT	ENDS
END
