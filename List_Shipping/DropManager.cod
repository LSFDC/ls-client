; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\LuaState\DropManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A ; Singleton<DropManager>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A DD 01H DUP (?) ; Singleton<DropManager>::ms_Singleton
_BSS	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	??0?$Singleton@VDropManager@@@@QAE@XZ		; Singleton<DropManager>::Singleton<DropManager>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VDropManager@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VDropManager@@@@QAE@XZ PROC		; Singleton<DropManager>::Singleton<DropManager>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A, ecx ; Singleton<DropManager>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VDropManager@@@@QAE@XZ ENDP		; Singleton<DropManager>::Singleton<DropManager>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VDropManager@@@@QAE@XZ		; Singleton<DropManager>::~Singleton<DropManager>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VDropManager@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VDropManager@@@@QAE@XZ PROC		; Singleton<DropManager>::~Singleton<DropManager>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A, 0 ; Singleton<DropManager>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VDropManager@@@@QAE@XZ ENDP		; Singleton<DropManager>::~Singleton<DropManager>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetScriptContext@cLua@@QAEPAUlua_State@@XZ	; cLua::GetScriptContext
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\clua.h
;	COMDAT ?GetScriptContext@cLua@@QAEPAUlua_State@@XZ
_TEXT	SEGMENT
?GetScriptContext@cLua@@QAEPAUlua_State@@XZ PROC	; cLua::GetScriptContext, COMDAT
; _this$ = ecx

; 29   : 	lua_State	*GetScriptContext(void)		{return m_pScriptContext;}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetScriptContext@cLua@@QAEPAUlua_State@@XZ ENDP	; cLua::GetScriptContext
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside
$LN2@Inside:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T524570 = -12						; size = 12
$T524575 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T524575[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T524575[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T524570[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T524570[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T524570[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??_7DropManager@@6B@				; DropManager::`vftable'
PUBLIC	??0DropManager@@QAE@XZ				; DropManager::DropManager
PUBLIC	??_R4DropManager@@6B@				; DropManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDropManager@@@8				; DropManager `RTTI Type Descriptor'
PUBLIC	??_R3DropManager@@8				; DropManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DropManager@@8				; DropManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DropManager@@8			; DropManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VDropManager@@@@8	; Singleton<DropManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VDropManager@@@@@8		; Singleton<DropManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VDropManager@@@@8		; Singleton<DropManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VDropManager@@@@8		; Singleton<DropManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VDropManager@@@@8	; Singleton<DropManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EDropManager@@UAEPAXI@Z:PROC			; DropManager::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VDropManager@@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VDropManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VDropManager@@@@@8 ; Singleton<DropManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VDropManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VDropManager@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VDropManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VDropManager@@@@8 ; Singleton<DropManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VDropManager@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VDropManager@@@@8 DD 00H		; Singleton<DropManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VDropManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VDropManager@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VDropManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<DropManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VDropManager@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VDropManager@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VDropManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VDropManager@@@@@8 ; Singleton<DropManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VDropManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DropManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DropManager@@8 DD FLAT:??_R0?AVDropManager@@@8 ; DropManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DropManager@@8
rdata$r	ENDS
;	COMDAT ??_R2DropManager@@8
rdata$r	SEGMENT
??_R2DropManager@@8 DD FLAT:??_R1A@?0A@EA@DropManager@@8 ; DropManager::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VDropManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3DropManager@@8
rdata$r	SEGMENT
??_R3DropManager@@8 DD 00H				; DropManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DropManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDropManager@@@8
_DATA	SEGMENT
??_R0?AVDropManager@@@8 DD FLAT:??_7type_info@@6B@	; DropManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDropManager@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DropManager@@6B@
rdata$r	SEGMENT
??_R4DropManager@@6B@ DD 00H				; DropManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDropManager@@@8
	DD	FLAT:??_R3DropManager@@8
rdata$r	ENDS
;	COMDAT ??_7DropManager@@6B@
CONST	SEGMENT
??_7DropManager@@6B@ DD FLAT:??_R4DropManager@@6B@	; DropManager::`vftable'
	DD	FLAT:??_EDropManager@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\dropmanager.cpp
CONST	ENDS
;	COMDAT ??0DropManager@@QAE@XZ
_TEXT	SEGMENT
??0DropManager@@QAE@XZ PROC				; DropManager::DropManager, COMDAT
; _this$ = ecx

; 14   : {

  00000	8b c1		 mov	 eax, ecx
  00002	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A, eax ; Singleton<DropManager>::ms_Singleton

; 15   : 	m_LuaState = NULL;

  00007	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7DropManager@@6B@

; 16   : }

  00011	c3		 ret	 0
??0DropManager@@QAE@XZ ENDP				; DropManager::DropManager
_TEXT	ENDS
PUBLIC	??1DropManager@@UAE@XZ				; DropManager::~DropManager
; Function compile flags: /Ogsp
;	COMDAT ??1DropManager@@UAE@XZ
_TEXT	SEGMENT
??1DropManager@@UAE@XZ PROC				; DropManager::~DropManager, COMDAT
; _this$ = ecx

; 19   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DropManager@@6B@

; 20   : }

  00006	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A, 0 ; Singleton<DropManager>::ms_Singleton
  0000d	c3		 ret	 0
??1DropManager@@UAE@XZ ENDP				; DropManager::~DropManager
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
PUBLIC	?DropItemCheck@DropManager@@QAEXPAVioBaseChar@@_N1111@Z ; DropManager::DropItemCheck
EXTRN	?ItemDrop@ioBaseChar@@QAEXW4EquipSlot@@MM@Z:PROC ; ioBaseChar::ItemDrop
EXTRN	_lua_settop:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_tonumber:PROC
EXTRN	_lua_call:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\clua.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\dropmanager.cpp
CONST	ENDS
;	COMDAT ?DropItemCheck@DropManager@@QAEXPAVioBaseChar@@_N1111@Z
_TEXT	SEGMENT
tv1016 = -40						; size = 4
tv1012 = -40						; size = 4
tv1008 = -40						; size = 4
_vDropPos$ = -36					; size = 12
___encStr$523743 = -24					; size = 14
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
_bWeapon$ = 12						; size = 1
_bArmor$ = 16						; size = 1
_bHelmet$ = 20						; size = 1
_bCloak$ = 24						; size = 1
_bDropZone$ = 28					; size = 1
?DropItemCheck@DropManager@@QAEXPAVioBaseChar@@_N1111@Z PROC ; DropManager::DropItemCheck, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]

; 64   : 	lua_pushstring_e( m_LuaState->GetScriptContext(), "ItemDropCheck" );

  00016	6a 03		 push	 3
  00018	8b f1		 mov	 esi, ecx
  0001a	c7 45 e8 a4 98
	8e 87		 mov	 DWORD PTR ___encStr$523743[ebp], -2020697948 ; 878e98a4H
  00021	c7 45 ec a9 9e
	84 9a		 mov	 DWORD PTR ___encStr$523743[ebp+4], -1702584663 ; 9a849ea9H
  00028	c7 45 f0 ae 84
	8e 89		 mov	 DWORD PTR ___encStr$523743[ebp+8], -1987148626 ; 898e84aeH
  0002f	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$523743[ebp]
  00032	66 c7 45 f4 86
	00		 mov	 WORD PTR ___encStr$523743[ebp+12], 134 ; 00000086H
  00038	59		 pop	 ecx
$LL109@DropItemCh:
  00039	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003f	83 c0 04	 add	 eax, 4
  00042	49		 dec	 ecx
  00043	75 f4		 jne	 SHORT $LL109@DropItemCh
  00045	80 75 f4 ed	 xor	 BYTE PTR ___encStr$523743[ebp+12], -19 ; ffffffedH
  00049	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$523743[ebp]
  0004c	50		 push	 eax
  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	ff 70 04	 push	 DWORD PTR [eax+4]
  00053	e8 00 00 00 00	 call	 _lua_pushstring

; 65   : 	lua_gettable( m_LuaState->GetScriptContext(), LUA_GLOBALSINDEX );

  00058	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005b	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  00060	ff 70 04	 push	 DWORD PTR [eax+4]
  00063	e8 00 00 00 00	 call	 _lua_gettable

; 66   : 	lua_pushboolean( m_LuaState->GetScriptContext(), bWeapon );

  00068	0f b6 45 0c	 movzx	 eax, BYTE PTR _bWeapon$[ebp]
  0006c	50		 push	 eax
  0006d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00070	ff 70 04	 push	 DWORD PTR [eax+4]
  00073	e8 00 00 00 00	 call	 _lua_pushboolean

; 67   : 	lua_pushboolean( m_LuaState->GetScriptContext(), bArmor );

  00078	0f b6 45 10	 movzx	 eax, BYTE PTR _bArmor$[ebp]
  0007c	50		 push	 eax
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	ff 70 04	 push	 DWORD PTR [eax+4]
  00083	e8 00 00 00 00	 call	 _lua_pushboolean

; 68   : 	lua_pushboolean( m_LuaState->GetScriptContext(), bHelmet );

  00088	0f b6 45 14	 movzx	 eax, BYTE PTR _bHelmet$[ebp]
  0008c	50		 push	 eax
  0008d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00090	ff 70 04	 push	 DWORD PTR [eax+4]
  00093	e8 00 00 00 00	 call	 _lua_pushboolean

; 69   : 	lua_pushboolean( m_LuaState->GetScriptContext(), bCloak );

  00098	0f b6 45 18	 movzx	 eax, BYTE PTR _bCloak$[ebp]
  0009c	50		 push	 eax
  0009d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a0	ff 70 04	 push	 DWORD PTR [eax+4]
  000a3	e8 00 00 00 00	 call	 _lua_pushboolean

; 70   : 	lua_pushboolean( m_LuaState->GetScriptContext(), bDropZone );

  000a8	0f b6 45 1c	 movzx	 eax, BYTE PTR _bDropZone$[ebp]
  000ac	50		 push	 eax
  000ad	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b0	ff 70 04	 push	 DWORD PTR [eax+4]
  000b3	e8 00 00 00 00	 call	 _lua_pushboolean
  000b8	83 c4 38	 add	 esp, 56			; 00000038H

; 71   : 
; 72   : 	D3DXVECTOR3 vDropPos = pOwner->GetMidPositionByRate();

  000bb	b8 05 00 00 00	 mov	 eax, 5
  000c0	8b c8		 mov	 ecx, eax
  000c2	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000c7	89 4d d8	 mov	 DWORD PTR tv1016[ebp], ecx
  000ca	db 45 d8	 fild	 DWORD PTR tv1016[ebp]
  000cd	85 c9		 test	 ecx, ecx
  000cf	79 06		 jns	 SHORT $LN150@DropItemCh
  000d1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN150@DropItemCh:
  000d7	89 45 d8	 mov	 DWORD PTR tv1012[ebp], eax
  000da	db 45 d8	 fild	 DWORD PTR tv1012[ebp]
  000dd	85 c0		 test	 eax, eax
  000df	79 06		 jns	 SHORT $LN151@DropItemCh
  000e1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN151@DropItemCh:
  000e7	de f9		 fdivp	 ST(1), ST(0)
  000e9	51		 push	 ecx
  000ea	8d 45 dc	 lea	 eax, DWORD PTR _vDropPos$[ebp]
  000ed	8b cf		 mov	 ecx, edi
  000ef	d9 5d d8	 fstp	 DWORD PTR tv1008[ebp]
  000f2	d9 45 d8	 fld	 DWORD PTR tv1008[ebp]
  000f5	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 73   : 
; 74   : 	lua_pushnumber( m_LuaState->GetScriptContext(), vDropPos.x );

  000fe	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vDropPos$[ebp]
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	51		 push	 ecx
  00107	51		 push	 ecx
  00108	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00110	ff 70 04	 push	 DWORD PTR [eax+4]
  00113	e8 00 00 00 00	 call	 _lua_pushnumber

; 75   : 	lua_pushnumber( m_LuaState->GetScriptContext(), vDropPos.z );

  00118	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vDropPos$[ebp+8]
  0011d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00120	83 c4 04	 add	 esp, 4
  00123	0f 5a c0	 cvtps2pd xmm0, xmm0
  00126	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0012b	ff 70 04	 push	 DWORD PTR [eax+4]
  0012e	e8 00 00 00 00	 call	 _lua_pushnumber

; 76   : 
; 77   : 	lua_call( m_LuaState->GetScriptContext(), 7, 3 );

  00133	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00136	6a 03		 push	 3
  00138	6a 07		 push	 7
  0013a	ff 70 04	 push	 DWORD PTR [eax+4]
  0013d	e8 00 00 00 00	 call	 _lua_call

; 78   : 
; 79   : 	vDropPos.z = (float)lua_tonumber( m_LuaState->GetScriptContext(), -1 );

  00142	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00145	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00148	6a ff		 push	 -1
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 _lua_tonumber
  00150	d9 5d e4	 fstp	 DWORD PTR _vDropPos$[ebp+8]

; 80   : 	vDropPos.x = (float)lua_tonumber( m_LuaState->GetScriptContext(), -2 );

  00153	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00156	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00159	6a fe		 push	 -2			; fffffffeH
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _lua_tonumber
  00161	d9 5d dc	 fstp	 DWORD PTR _vDropPos$[ebp]

; 81   : 
; 82   : 	int iSlot = (int)lua_tonumber( m_LuaState->GetScriptContext(), -3 );

  00164	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00167	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016a	6a fd		 push	 -3			; fffffffdH
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _lua_tonumber
  00172	e8 00 00 00 00	 call	 __ftol2_sse
  00177	8b d8		 mov	 ebx, eax

; 83   : 
; 84   : 	int iTop = lua_gettop( m_LuaState->GetScriptContext() );

  00179	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017c	ff 70 04	 push	 DWORD PTR [eax+4]
  0017f	e8 00 00 00 00	 call	 _lua_gettop
  00184	83 c4 34	 add	 esp, 52			; 00000034H

; 85   : 	if( iTop > 0 )

  00187	85 c0		 test	 eax, eax
  00189	7e 13		 jle	 SHORT $LN2@DropItemCh

; 86   : 	{
; 87   : 		lua_pop( m_LuaState->GetScriptContext(), iTop );

  0018b	83 c9 ff	 or	 ecx, -1
  0018e	2b c8		 sub	 ecx, eax
  00190	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00193	51		 push	 ecx
  00194	ff 70 04	 push	 DWORD PTR [eax+4]
  00197	e8 00 00 00 00	 call	 _lua_settop
  0019c	59		 pop	 ecx
  0019d	59		 pop	 ecx
$LN2@DropItemCh:

; 88   : 	}
; 89   : 
; 90   : 	if( iSlot != -1 )

  0019e	83 fb ff	 cmp	 ebx, -1
  001a1	74 1f		 je	 SHORT $LN1@DropItemCh

; 91   : 	{
; 92   : 		pOwner->ItemDrop( (EquipSlot)iSlot, vDropPos.x, vDropPos.z );

  001a3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vDropPos$[ebp+8]
  001a8	51		 push	 ecx
  001a9	51		 push	 ecx
  001aa	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001b0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vDropPos$[ebp]
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	53		 push	 ebx
  001bb	8b cf		 mov	 ecx, edi
  001bd	e8 00 00 00 00	 call	 ?ItemDrop@ioBaseChar@@QAEXW4EquipSlot@@MM@Z ; ioBaseChar::ItemDrop
$LN1@DropItemCh:

; 93   : 	}
; 94   : }

  001c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi
  001c7	33 cd		 xor	 ecx, ebp
  001c9	5b		 pop	 ebx
  001ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cf	c9		 leave
  001d0	c2 18 00	 ret	 24			; 00000018H
?DropItemCheck@DropManager@@QAEXPAVioBaseChar@@_N1111@Z ENDP ; DropManager::DropItemCheck
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DropItemCheck2@DropManager@@QAEH_N000@Z	; DropManager::DropItemCheck2
; Function compile flags: /Ogsp
;	COMDAT ?DropItemCheck2@DropManager@@QAEH_N000@Z
_TEXT	SEGMENT
___encStr$523913 = -24					; size = 15
__$ArrayPad$ = -4					; size = 4
_bWeapon$ = 8						; size = 1
_bArmor$ = 12						; size = 1
_bHelmet$ = 16						; size = 1
_bCloak$ = 20						; size = 1
?DropItemCheck2@DropManager@@QAEH_N000@Z PROC		; DropManager::DropItemCheck2, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi

; 98   : 	lua_pushstring_e( m_LuaState->GetScriptContext(), "ItemDropCheck2" );

  00012	6a 03		 push	 3
  00014	8b f1		 mov	 esi, ecx
  00016	c7 45 e8 a4 98
	8e 87		 mov	 DWORD PTR ___encStr$523913[ebp], -2020697948 ; 878e98a4H
  0001d	c7 45 ec a9 9e
	84 9a		 mov	 DWORD PTR ___encStr$523913[ebp+4], -1702584663 ; 9a849ea9H
  00024	c7 45 f0 ae 84
	8e 89		 mov	 DWORD PTR ___encStr$523913[ebp+8], -1987148626 ; 898e84aeH
  0002b	66 c7 45 f4 86
	de		 mov	 WORD PTR ___encStr$523913[ebp+12], 56966 ; 0000de86H
  00031	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$523913[ebp]
  00034	c6 45 f6 00	 mov	 BYTE PTR ___encStr$523913[ebp+14], 0
  00038	59		 pop	 ecx
$LL108@DropItemCh@2:
  00039	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003f	83 c0 04	 add	 eax, 4
  00042	49		 dec	 ecx
  00043	75 f4		 jne	 SHORT $LL108@DropItemCh@2
  00045	6a 0c		 push	 12			; 0000000cH
  00047	58		 pop	 eax
$LL105@DropItemCh@2:
  00048	8b c8		 mov	 ecx, eax
  0004a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00050	79 05		 jns	 SHORT $LN135@DropItemCh@2
  00052	49		 dec	 ecx
  00053	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00056	41		 inc	 ecx
$LN135@DropItemCh@2:
  00057	b2 ed		 mov	 dl, -19			; ffffffedH
  00059	2a d1		 sub	 dl, cl
  0005b	30 54 05 e8	 xor	 BYTE PTR ___encStr$523913[ebp+eax], dl
  0005f	40		 inc	 eax
  00060	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00063	7c e3		 jl	 SHORT $LL105@DropItemCh@2
  00065	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$523913[ebp]
  00068	50		 push	 eax
  00069	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0006c	ff 70 04	 push	 DWORD PTR [eax+4]
  0006f	e8 00 00 00 00	 call	 _lua_pushstring

; 99   : 	lua_gettable( m_LuaState->GetScriptContext(), LUA_GLOBALSINDEX );

  00074	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00077	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  0007c	ff 70 04	 push	 DWORD PTR [eax+4]
  0007f	e8 00 00 00 00	 call	 _lua_gettable

; 100  : 
; 101  : 	lua_pushboolean( m_LuaState->GetScriptContext(), bWeapon );

  00084	0f b6 45 08	 movzx	 eax, BYTE PTR _bWeapon$[ebp]
  00088	50		 push	 eax
  00089	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008c	ff 70 04	 push	 DWORD PTR [eax+4]
  0008f	e8 00 00 00 00	 call	 _lua_pushboolean

; 102  : 	lua_pushboolean( m_LuaState->GetScriptContext(), bArmor );

  00094	0f b6 45 0c	 movzx	 eax, BYTE PTR _bArmor$[ebp]
  00098	50		 push	 eax
  00099	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009c	ff 70 04	 push	 DWORD PTR [eax+4]
  0009f	e8 00 00 00 00	 call	 _lua_pushboolean

; 103  : 	lua_pushboolean( m_LuaState->GetScriptContext(), bHelmet );

  000a4	0f b6 45 10	 movzx	 eax, BYTE PTR _bHelmet$[ebp]
  000a8	50		 push	 eax
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	ff 70 04	 push	 DWORD PTR [eax+4]
  000af	e8 00 00 00 00	 call	 _lua_pushboolean

; 104  : 	lua_pushboolean( m_LuaState->GetScriptContext(), bCloak );

  000b4	0f b6 45 14	 movzx	 eax, BYTE PTR _bCloak$[ebp]
  000b8	50		 push	 eax
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	ff 70 04	 push	 DWORD PTR [eax+4]
  000bf	e8 00 00 00 00	 call	 _lua_pushboolean

; 105  : 
; 106  : 	lua_call( m_LuaState->GetScriptContext(), 4, 1 );

  000c4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c7	6a 01		 push	 1
  000c9	6a 04		 push	 4
  000cb	ff 70 04	 push	 DWORD PTR [eax+4]
  000ce	e8 00 00 00 00	 call	 _lua_call

; 107  : 
; 108  : 	int iSlot = (int)lua_tonumber( m_LuaState->GetScriptContext(), -1 );

  000d3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d9	6a ff		 push	 -1
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _lua_tonumber
  000e1	83 c4 44	 add	 esp, 68			; 00000044H
  000e4	e8 00 00 00 00	 call	 __ftol2_sse
  000e9	8b f8		 mov	 edi, eax

; 109  : 
; 110  : 	int iTop = lua_gettop( m_LuaState->GetScriptContext() );

  000eb	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ee	ff 70 04	 push	 DWORD PTR [eax+4]
  000f1	e8 00 00 00 00	 call	 _lua_gettop
  000f6	59		 pop	 ecx

; 111  : 	if( iTop > 0 )

  000f7	85 c0		 test	 eax, eax
  000f9	7e 13		 jle	 SHORT $LN1@DropItemCh@2

; 112  : 	{
; 113  : 		lua_pop( m_LuaState->GetScriptContext(), iTop );

  000fb	83 c9 ff	 or	 ecx, -1
  000fe	2b c8		 sub	 ecx, eax
  00100	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00103	51		 push	 ecx
  00104	ff 70 04	 push	 DWORD PTR [eax+4]
  00107	e8 00 00 00 00	 call	 _lua_settop
  0010c	59		 pop	 ecx
  0010d	59		 pop	 ecx
$LN1@DropItemCh@2:

; 114  : 	}
; 115  : 
; 116  : 	return iSlot;
; 117  : }

  0010e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00111	8b c7		 mov	 eax, edi
  00113	5f		 pop	 edi
  00114	33 cd		 xor	 ecx, ebp
  00116	5e		 pop	 esi
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	c9		 leave
  0011d	c2 10 00	 ret	 16			; 00000010H
?DropItemCheck2@DropManager@@QAEH_N000@Z ENDP		; DropManager::DropItemCheck2
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GDropManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GDropManager@@UAEPAXI@Z PROC				; DropManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7DropManager@@6B@
  0000c	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VDropManager@@@@1PAVDropManager@@A, 0 ; Singleton<DropManager>::ms_Singleton
  00013	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00017	74 07		 je	 SHORT $LN1@scalar@2
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
$LN1@scalar@2:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_GDropManager@@UAEPAXI@Z ENDP				; DropManager::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
__Num$ = 8						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
__Roff$ = 16						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 982  : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 983  : 		if (this->_Mysize < _Off || _Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Off$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000d	57		 push	 edi
  0000e	3b cb		 cmp	 ecx, ebx
  00010	0f 82 04 01 00
	00		 jb	 $LN6@insert
  00016	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00019	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001c	3b 45 10	 cmp	 eax, DWORD PTR __Roff$[ebp]
  0001f	0f 82 f5 00 00
	00		 jb	 $LN6@insert

; 985  : 		size_type _Num = _Right.size() - _Roff;

  00025	2b 45 10	 sub	 eax, DWORD PTR __Roff$[ebp]

; 986  : 		if (_Num < _Count)

  00028	8b 7d 14	 mov	 edi, DWORD PTR __Count$[ebp]
  0002b	3b c7		 cmp	 eax, edi
  0002d	73 05		 jae	 SHORT $LN5@insert

; 987  : 			_Count = _Num;	// trim _Count to size

  0002f	89 45 14	 mov	 DWORD PTR __Count$[ebp], eax
  00032	8b f8		 mov	 edi, eax
$LN5@insert:

; 988  : 		if (npos - this->_Mysize <= _Count)

  00034	83 c8 ff	 or	 eax, -1
  00037	2b c1		 sub	 eax, ecx
  00039	3b c7		 cmp	 eax, edi
  0003b	77 0b		 ja	 SHORT $LN4@insert

; 989  : 			_Xlen();	// result too long

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN61@insert:
$LN4@insert:

; 990  : 
; 991  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00048	85 ff		 test	 edi, edi
  0004a	0f 84 c1 00 00
	00		 je	 $LN57@insert
  00050	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00053	6a 00		 push	 0
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	89 45 08	 mov	 DWORD PTR __Num$[ebp], eax
  0005b	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00060	84 c0		 test	 al, al
  00062	0f 84 a9 00 00
	00		 je	 $LN57@insert

; 992  : 			{	// make room and insert new stuff
; 993  : 			_Traits::move(_Myptr() + _Off + _Count,
; 994  : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00068	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0006b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0006e	72 04		 jb	 SHORT $LN23@insert
  00070	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00072	eb 02		 jmp	 SHORT $LN24@insert
$LN23@insert:
  00074	8b ce		 mov	 ecx, esi
$LN24@insert:
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 04		 jb	 SHORT $LN27@insert
  0007b	8b 06		 mov	 eax, DWORD PTR [esi]
  0007d	eb 02		 jmp	 SHORT $LN28@insert
$LN27@insert:
  0007f	8b c6		 mov	 eax, esi
$LN28@insert:
  00081	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00084	2b d3		 sub	 edx, ebx
  00086	52		 push	 edx
  00087	03 cb		 add	 ecx, ebx
  00089	03 c3		 add	 eax, ebx
  0008b	03 c7		 add	 eax, edi
  0008d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__memmove
  00093	51		 push	 ecx
  00094	50		 push	 eax
  00095	ff d7		 call	 edi

; 995  : 			if (this == &_Right)

  00097	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b f0		 cmp	 esi, eax
  0009f	75 30		 jne	 SHORT $LN2@insert

; 996  : 				_Traits::move(_Myptr() + _Off,
; 997  : 					_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 998  : 						_Count);	// substring

  000a1	8b 55 10	 mov	 edx, DWORD PTR __Roff$[ebp]
  000a4	3b da		 cmp	 ebx, edx
  000a6	73 03		 jae	 SHORT $LN10@insert
  000a8	03 55 14	 add	 edx, DWORD PTR __Count$[ebp]
$LN10@insert:
  000ab	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ae	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b1	72 04		 jb	 SHORT $LN33@insert
  000b3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b5	eb 02		 jmp	 SHORT $LN34@insert
$LN33@insert:
  000b7	8b ce		 mov	 ecx, esi
$LN34@insert:
  000b9	83 f8 10	 cmp	 eax, 16			; 00000010H
  000bc	72 04		 jb	 SHORT $LN37@insert
  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	eb 02		 jmp	 SHORT $LN38@insert
$LN37@insert:
  000c2	8b c6		 mov	 eax, esi
$LN38@insert:
  000c4	ff 75 14	 push	 DWORD PTR __Count$[ebp]
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	03 c3		 add	 eax, ebx
  000cc	50		 push	 eax
  000cd	ff d7		 call	 edi

; 999  : 			else

  000cf	eb 27		 jmp	 SHORT $LN60@insert
$LN2@insert:

; 1000 : 				_Traits::copy(_Myptr() + _Off,
; 1001 : 					_Right._Myptr() + _Roff, _Count);	// fill hole

  000d1	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000d5	72 04		 jb	 SHORT $LN43@insert
  000d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d9	eb 02		 jmp	 SHORT $LN44@insert
$LN43@insert:
  000db	8b c8		 mov	 ecx, eax
$LN44@insert:
  000dd	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000e1	72 04		 jb	 SHORT $LN47@insert
  000e3	8b 06		 mov	 eax, DWORD PTR [esi]
  000e5	eb 02		 jmp	 SHORT $LN48@insert
$LN47@insert:
  000e7	8b c6		 mov	 eax, esi
$LN48@insert:
  000e9	ff 75 14	 push	 DWORD PTR __Count$[ebp]
  000ec	03 4d 10	 add	 ecx, DWORD PTR __Roff$[ebp]
  000ef	03 c3		 add	 eax, ebx
  000f1	51		 push	 ecx
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _memcpy
$LN60@insert:

; 1002 : 			_Eos(_Num);

  000f8	8b 4d 08	 mov	 ecx, DWORD PTR __Num$[ebp]
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fe	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00102	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00105	72 04		 jb	 SHORT $LN55@insert
  00107	8b 06		 mov	 eax, DWORD PTR [esi]
  00109	eb 02		 jmp	 SHORT $LN56@insert
$LN55@insert:
  0010b	8b c6		 mov	 eax, esi
$LN56@insert:
  0010d	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN57@insert:

; 1003 : 			}
; 1004 : 		return (*this);

  00111	5f		 pop	 edi
  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 1005 : 		}

  00116	5d		 pop	 ebp
  00117	c2 10 00	 ret	 16			; 00000010H
$LN6@insert:

; 984  : 			_Xran();	// _Off or _Roff off end

  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN62@insert:
$LN59@insert:
  00125	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1009 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1010 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1011 : 		if (_Count != 0)
; 1012 : 			_DEBUG_POINTER(_Ptr);
; 1013 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1014 : 
; 1015 : 		if (_Inside(_Ptr))

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 22		 je	 SHORT $LN4@insert@2

; 1016 : 			return (insert(_Off, *this,
; 1017 : 				_Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN9@insert@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN10@insert@2
$LN9@insert@2:
  0001e	8b c6		 mov	 eax, esi
$LN10@insert@2:
  00020	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  00023	2b f8		 sub	 edi, eax
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00031	e9 a6 00 00 00	 jmp	 $LN5@insert@2
$LN4@insert@2:

; 1018 : 		if (this->_Mysize < _Off)

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0003c	3b c7		 cmp	 eax, edi
  0003e	73 0b		 jae	 SHORT $LN3@insert@2

; 1019 : 			_Xran();	// _Off off end

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN42@insert@2:
$LN3@insert@2:

; 1020 : 		if (npos - this->_Mysize <= _Count)

  0004b	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004e	83 ca ff	 or	 edx, -1
  00051	2b d0		 sub	 edx, eax
  00053	3b d1		 cmp	 edx, ecx
  00055	77 0b		 ja	 SHORT $LN2@insert@2

; 1021 : 			_Xlen();	// result too long

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@insert@2:
$LN2@insert@2:

; 1022 : 		size_type _Num;
; 1023 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00062	85 c9		 test	 ecx, ecx
  00064	74 74		 je	 SHORT $LN38@insert@2
  00066	53		 push	 ebx
  00067	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  0006a	6a 00		 push	 0
  0006c	53		 push	 ebx
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00074	84 c0		 test	 al, al
  00076	74 61		 je	 SHORT $LN40@insert@2

; 1024 : 			{	// make room and insert new stuff
; 1025 : 			_Traits::move(_Myptr() + _Off + _Count,
; 1026 : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00078	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0007b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0007e	72 04		 jb	 SHORT $LN18@insert@2
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	eb 02		 jmp	 SHORT $LN19@insert@2
$LN18@insert@2:
  00084	8b ce		 mov	 ecx, esi
$LN19@insert@2:
  00086	83 f8 10	 cmp	 eax, 16			; 00000010H
  00089	72 04		 jb	 SHORT $LN22@insert@2
  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	eb 02		 jmp	 SHORT $LN23@insert@2
$LN22@insert@2:
  0008f	8b c6		 mov	 eax, esi
$LN23@insert@2:
  00091	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00094	2b d7		 sub	 edx, edi
  00096	52		 push	 edx
  00097	03 c7		 add	 eax, edi
  00099	03 45 10	 add	 eax, DWORD PTR __Count$[ebp]
  0009c	03 cf		 add	 ecx, edi
  0009e	51		 push	 ecx
  0009f	50		 push	 eax
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1027 : 			_Traits::copy(_Myptr() + _Off, _Ptr, _Count);	// fill hole

  000a9	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000ad	72 04		 jb	 SHORT $LN28@insert@2
  000af	8b 06		 mov	 eax, DWORD PTR [esi]
  000b1	eb 02		 jmp	 SHORT $LN29@insert@2
$LN28@insert@2:
  000b3	8b c6		 mov	 eax, esi
$LN29@insert@2:
  000b5	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  000b8	03 c7		 add	 eax, edi
  000ba	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _memcpy
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1028 : 			_Eos(_Num);

  000c6	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000ca	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000cd	72 04		 jb	 SHORT $LN36@insert@2
  000cf	8b 06		 mov	 eax, DWORD PTR [esi]
  000d1	eb 02		 jmp	 SHORT $LN37@insert@2
$LN36@insert@2:
  000d3	8b c6		 mov	 eax, esi
$LN37@insert@2:
  000d5	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN40@insert@2:
  000d9	5b		 pop	 ebx
$LN38@insert@2:

; 1029 : 			}
; 1030 : 		return (*this);

  000da	8b c6		 mov	 eax, esi
$LN5@insert@2:
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi

; 1031 : 		}

  000de	5d		 pop	 ebp
  000df	c2 0c 00	 ret	 12			; 0000000cH
$LN41@insert@2:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1034 : 		{	// insert [_Ptr, <null>) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1035 : 		_DEBUG_POINTER(_Ptr);
; 1036 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@insert@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@insert@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00017	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  0001a	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  0001f	5b		 pop	 ebx

; 1037 : 		}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_C@_0CI@DIBABFMA@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@ ; `string'
PUBLIC	??_C@_0CI@LIBLDNDC@DropManager?3?3Init?$CI?$CJ?5?9?5RunMemory?5@ ; `string'
PUBLIC	??_C@_0CN@KFDMBACM@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@ ; `string'
PUBLIC	??_C@_08FHHLNHP@Scripts?2?$AA@			; `string'
PUBLIC	??_C@_0N@NCEPPBKH@ItemDrop?4lua?$AA@		; `string'
PUBLIC	?Init@DropManager@@QAE_NPAVcLua@@@Z		; DropManager::Init
EXTRN	?RunScript@cLua@@QAE_NPBD@Z:PROC		; cLua::RunScript
EXTRN	?RunMemory@cLua@@QAE_NPBDH@Z:PROC		; cLua::RunMemory
EXTRN	__imp_?GetPtr@ioBinaryStream@@UAEPAEXZ:PROC
EXTRN	__imp_?GetSize@ioBinaryStream@@UBEHXZ:PROC
EXTRN	__imp_??1ioBinaryStream@@UAE@XZ:PROC
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	__imp_?LoadStream@ioResourceLoader@@QAE_NPBDPAVioStream@@PAVioDataProcessor@@PAX_N@Z:PROC
EXTRN	__imp_??0ioBinaryStream@@QAE@XZ:PROC
EXTRN	__imp_?IsLoadInPack@ioResourceLoader@@QBE_NXZ:PROC
EXTRN	__imp_?GetInstance@ioResourceLoader@@SAAAV1@XZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_0CI@DIBABFMA@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@
CONST	SEGMENT
??_C@_0CI@DIBABFMA@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@ DB 'Drop'
	DB	'Manager::Init() - RunScript is fail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LIBLDNDC@DropManager?3?3Init?$CI?$CJ?5?9?5RunMemory?5@
CONST	SEGMENT
??_C@_0CI@LIBLDNDC@DropManager?3?3Init?$CI?$CJ?5?9?5RunMemory?5@ DB 'Drop'
	DB	'Manager::Init() - RunMemory is fail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KFDMBACM@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@
CONST	SEGMENT
??_C@_0CN@KFDMBACM@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@ DB 'Drop'
	DB	'Manager::Init() - RunScript is fail(%s)!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHHLNHP@Scripts?2?$AA@
CONST	SEGMENT
??_C@_08FHHLNHP@Scripts?2?$AA@ DB 'Scripts\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCEPPBKH@ItemDrop?4lua?$AA@
CONST	SEGMENT
??_C@_0N@NCEPPBKH@ItemDrop?4lua?$AA@ DB 'ItemDrop.lua', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@DropManager@@QAE_NPAVcLua@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@DropManager@@QAE_NPAVcLua@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@DropManager@@QAE_NPAVcLua@@@Z$1
__ehfuncinfo$?Init@DropManager@@QAE_NPAVcLua@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Init@DropManager@@QAE_NPAVcLua@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\dropmanager.cpp
xdata$x	ENDS
;	COMDAT ?Init@DropManager@@QAE_NPAVcLua@@@Z
_TEXT	SEGMENT
tv382 = -321						; size = 1
_kStream$523718 = -320					; size = 276
_szPath$ = -44						; size = 28
__$EHRec$ = -12						; size = 12
_pContext$ = 8						; size = 4
?Init@DropManager@@QAE_NPAVcLua@@@Z PROC		; DropManager::Init, COMDAT
; _this$ = ecx

; 23   : {

  00000	68 38 01 00 00	 push	 312			; 00000138H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?Init@DropManager@@QAE_NPAVcLua@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 24   : 	m_LuaState = pContext;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 25   : 	
; 26   : 	std::string szPath = "ItemDrop.lua";

  00014	6a 0c		 push	 12			; 0000000cH
  00016	33 db		 xor	 ebx, ebx
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NCEPPBKH@ItemDrop?4lua?$AA@
  0001d	8d 4d d4	 lea	 ecx, DWORD PTR _szPath$[ebp]
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00023	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _szPath$[ebp+20], 15 ; 0000000fH
  0002a	89 5d e4	 mov	 DWORD PTR _szPath$[ebp+16], ebx
  0002d	88 5d d4	 mov	 BYTE PTR _szPath$[ebp], bl
  00030	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 
; 28   : 	if( g_ResourceLoader.IsLoadInPack() )

  00035	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetInstance@ioResourceLoader@@SAAAV1@XZ
  0003b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0003e	ff d6		 call	 esi
  00040	8b c8		 mov	 ecx, eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsLoadInPack@ioResourceLoader@@QBE_NXZ
  00048	84 c0		 test	 al, al
  0004a	0f 84 e0 00 00
	00		 je	 $LN5@Init

; 29   : 	{
; 30   : 		szPath.insert(0, "Scripts\\");

  00050	6a 08		 push	 8
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_08FHHLNHP@Scripts?2?$AA@
  00057	53		 push	 ebx
  00058	8d 4d d4	 lea	 ecx, DWORD PTR _szPath$[ebp]
  0005b	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 31   : 
; 32   : 		ioBinaryStream kStream;

  00060	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _kStream$523718[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioBinaryStream@@QAE@XZ

; 33   : 		if( !g_ResourceLoader.LoadStream( szPath.c_str(), &kStream ) )

  0006c	83 7d e8 10	 cmp	 DWORD PTR _szPath$[ebp+20], 16 ; 00000010H
  00070	8b 45 d4	 mov	 eax, DWORD PTR _szPath$[ebp]
  00073	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00077	73 03		 jae	 SHORT $LN49@Init
  00079	8d 45 d4	 lea	 eax, DWORD PTR _szPath$[ebp]
$LN49@Init:
  0007c	53		 push	 ebx
  0007d	53		 push	 ebx
  0007e	53		 push	 ebx
  0007f	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _kStream$523718[ebp]
  00085	51		 push	 ecx
  00086	50		 push	 eax
  00087	ff d6		 call	 esi
  00089	8b c8		 mov	 ecx, eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStream@ioResourceLoader@@QAE_NPBDPAVioStream@@PAVioDataProcessor@@PAX_N@Z
  00091	84 c0		 test	 al, al
  00093	75 46		 jne	 SHORT $LN4@Init

; 34   : 		{
; 35   : 			LOG.PrintTimeAndLog( 0, "DropManager::Init() - RunScript is fail(%s)!", szPath.c_str());

  00095	83 7d e8 10	 cmp	 DWORD PTR _szPath$[ebp+20], 16 ; 00000010H
  00099	8b 45 d4	 mov	 eax, DWORD PTR _szPath$[ebp]
  0009c	73 03		 jae	 SHORT $LN55@Init
  0009e	8d 45 d4	 lea	 eax, DWORD PTR _szPath$[ebp]
$LN55@Init:
  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KFDMBACM@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@
  000a7	53		 push	 ebx
  000a8	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
$LN80@Init:

; 36   : 			return false;

  000b7	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _kStream$523718[ebp]
  000bd	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioBinaryStream@@UAE@XZ
  000c6	53		 push	 ebx
  000c7	6a 01		 push	 1
  000c9	8d 4d d4	 lea	 ecx, DWORD PTR _szPath$[ebp]
  000cc	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  000d1	32 c0		 xor	 al, al
$LN6@Init:

; 51   : 		}
; 52   : 	}
; 53   : 
; 54   : 	return true;
; 55   : }

  000d3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000d8	c2 04 00	 ret	 4
$LN4@Init:

; 37   : 		}
; 38   : 
; 39   : 		if( !m_LuaState->RunMemory( (char*)kStream.GetPtr(), kStream.GetSize()) )

  000db	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _kStream$523718[ebp]
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSize@ioBinaryStream@@UBEHXZ
  000e7	50		 push	 eax
  000e8	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _kStream$523718[ebp]
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetPtr@ioBinaryStream@@UAEPAEXZ
  000f4	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ?RunMemory@cLua@@QAE_NPBDH@Z ; cLua::RunMemory
  000fd	84 c0		 test	 al, al
  000ff	75 17		 jne	 SHORT $LN3@Init

; 40   : 		{
; 41   : 			LOG.PrintTimeAndLog( 0, "DropManager::Init() - RunMemory is fail" );

  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LIBLDNDC@DropManager?3?3Init?$CI?$CJ?5?9?5RunMemory?5@
  00106	53		 push	 ebx
  00107	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 			return false;

  00116	eb 9f		 jmp	 SHORT $LN80@Init
$LN3@Init:

; 43   : 		}
; 44   : 	}

  00118	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _kStream$523718[ebp]
  0011e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioBinaryStream@@UAE@XZ
$LN1@Init:
  00127	c6 85 bf fe ff
	ff 01		 mov	 BYTE PTR tv382[ebp], 1
  0012e	eb 34		 jmp	 SHORT $LN78@Init
$LN5@Init:

; 45   : 	else
; 46   : 	{
; 47   : 		if( !m_LuaState->RunScript( szPath.c_str() ) )

  00130	83 7d e8 10	 cmp	 DWORD PTR _szPath$[ebp+20], 16 ; 00000010H
  00134	8b 45 d4	 mov	 eax, DWORD PTR _szPath$[ebp]
  00137	73 03		 jae	 SHORT $LN69@Init
  00139	8d 45 d4	 lea	 eax, DWORD PTR _szPath$[ebp]
$LN69@Init:
  0013c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ?RunScript@cLua@@QAE_NPBD@Z ; cLua::RunScript
  00145	84 c0		 test	 al, al
  00147	75 de		 jne	 SHORT $LN1@Init

; 48   : 		{
; 49   : 			LOG.PrintTimeAndLog( 0, "DropManager::Init() - RunScript is fail" );

  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DIBABFMA@DropManager?3?3Init?$CI?$CJ?5?9?5RunScript?5@
  0014e	53		 push	 ebx
  0014f	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015e	88 9d bf fe ff
	ff		 mov	 BYTE PTR tv382[ebp], bl
$LN78@Init:

; 50   : 			return false;

  00164	53		 push	 ebx
  00165	6a 01		 push	 1
  00167	8d 4d d4	 lea	 ecx, DWORD PTR _szPath$[ebp]
  0016a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0016f	8a 85 bf fe ff
	ff		 mov	 al, BYTE PTR tv382[ebp]
  00175	e9 59 ff ff ff	 jmp	 $LN6@Init
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@DropManager@@QAE_NPAVcLua@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _szPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@DropManager@@QAE_NPAVcLua@@@Z$1:
  00008	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _kStream$523718[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioBinaryStream@@UAE@XZ
__ehhandler$?Init@DropManager@@QAE_NPAVcLua@@@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@DropManager@@QAE_NPAVcLua@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@DropManager@@QAE_NPAVcLua@@@Z ENDP		; DropManager::Init
END
