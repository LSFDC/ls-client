; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioCreateWeaponCountBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?StartBuff@ioCreateWeaponCountBuff@@UAEXPAVioBaseChar@@@Z ; ioCreateWeaponCountBuff::StartBuff
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponcountbuff.cpp
;	COMDAT ?StartBuff@ioCreateWeaponCountBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioCreateWeaponCountBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioCreateWeaponCountBuff::StartBuff, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 79   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 80   : 
; 81   : 	m_dwDelayEffectID = -1;

  0000e	83 8e b8 09 00
	00 ff		 or	 DWORD PTR [esi+2488], -1

; 82   : 
; 83   : 	m_BuffState = BS_DELAY;

  00015	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0

; 84   : 
; 85   : 	m_dwCheckFireTime = FRAMEGETTIME();

  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00022	8b c8		 mov	 ecx, eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 86   : 	m_dwCheckGavityTime = 0;

  0002a	83 a6 cc 09 00
	00 00		 and	 DWORD PTR [esi+2508], 0

; 87   : 
; 88   : 	//현재 무기 생성한 갯수
; 89   : 	m_nCurWeaponCnt = 0;

  00031	83 a6 70 0a 00
	00 00		 and	 DWORD PTR [esi+2672], 0
  00038	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax
  0003e	5e		 pop	 esi

; 90   : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?StartBuff@ioCreateWeaponCountBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioCreateWeaponCountBuff::StartBuff
_TEXT	ENDS
PUBLIC	?ApplyStartBuff@ioCreateWeaponCountBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioCreateWeaponCountBuff::ApplyStartBuff
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioCreateWeaponCountBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioCreateWeaponCountBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioCreateWeaponCountBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 94   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 32		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 95   : 		return false;
; 96   : 
; 97   : 	m_dwDelayEffectID = -1;

  00018	83 8e b8 09 00
	00 ff		 or	 DWORD PTR [esi+2488], -1

; 98   : 
; 99   : 	m_BuffState = BS_DELAY;

  0001f	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0

; 100  : 	m_dwCheckFireTime = FRAMEGETTIME();		

  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002c	8b c8		 mov	 ecx, eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 101  : 	m_dwCheckGavityTime = 0;

  00034	83 a6 cc 09 00
	00 00		 and	 DWORD PTR [esi+2508], 0

; 102  : 
; 103  : 	//현재 무기 생성한 갯수
; 104  : 	m_nCurWeaponCnt = 0;

  0003b	83 a6 70 0a 00
	00 00		 and	 DWORD PTR [esi+2672], 0
  00042	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax

; 105  : 
; 106  : 	return true;

  00048	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  0004a	5e		 pop	 esi

; 107  : }

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioCreateWeaponCountBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioCreateWeaponCountBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	?CheckRestoreStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ; ioCreateWeaponCountBuff::CheckRestoreStateCheck
; Function compile flags: /Ogsp
;	COMDAT ?CheckRestoreStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ
_TEXT	SEGMENT
?CheckRestoreStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ PROC ; ioCreateWeaponCountBuff::CheckRestoreStateCheck, COMDAT
; _this$ = ecx

; 225  : 	if( !m_pOwner ) return false;

  00000	8b 81 74 02 00
	00		 mov	 eax, DWORD PTR [ecx+628]
  00006	85 c0		 test	 eax, eax
  00008	75 03		 jne	 SHORT $LN4@CheckResto
  0000a	32 c0		 xor	 al, al

; 230  : 	{
; 231  : 	case CS_DELAY:
; 232  : 	case CS_RUN:
; 233  : 	case CS_DASH:
; 234  : 		return true;
; 235  : 	}
; 236  : 
; 237  : 	return false;
; 238  : }

  0000c	c3		 ret	 0
$LN4@CheckResto:

; 226  : 
; 227  : 	CharState eState = m_pOwner->GetState();

  0000d	8a 80 10 03 00
	00		 mov	 al, BYTE PTR [eax+784]

; 228  : 
; 229  : 	switch( eState )

  00013	b1 02		 mov	 cl, 2
  00015	3a c8		 cmp	 cl, al
  00017	1a c0		 sbb	 al, al
  00019	fe c0		 inc	 al

; 230  : 	{
; 231  : 	case CS_DELAY:
; 232  : 	case CS_RUN:
; 233  : 	case CS_DASH:
; 234  : 		return true;
; 235  : 	}
; 236  : 
; 237  : 	return false;
; 238  : }

  0001b	c3		 ret	 0
?CheckRestoreStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ENDP ; ioCreateWeaponCountBuff::CheckRestoreStateCheck
_TEXT	ENDS
PUBLIC	?GetBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z ; ioCreateWeaponCountBuff::GetBuffInfo
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
; Function compile flags: /Ogsp
;	COMDAT ?GetBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?GetBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioCreateWeaponCountBuff::GetBuffInfo, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 263  : 	ioBuff::GetBuffInfo( rkPacket );

  00004	ff 75 08	 push	 DWORD PTR _rkPacket$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z ; ioBuff::GetBuffInfo

; 264  : 	rkPacket << (int)m_BuffState;

  0000e	ff b6 6c 09 00
	00		 push	 DWORD PTR [esi+2412]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00017	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<
  0001c	5e		 pop	 esi

; 265  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioCreateWeaponCountBuff::GetBuffInfo
_TEXT	ENDS
PUBLIC	?ApplyBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z ; ioCreateWeaponCountBuff::ApplyBuffInfo
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
; Function compile flags: /Ogsp
;	COMDAT ?ApplyBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_iState$ = -4						; size = 4
_rkPacket$ = 8						; size = 4
?ApplyBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioCreateWeaponCountBuff::ApplyBuffInfo, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 269  : 	ioBuff::ApplyBuffInfo( rkPacket );

  00005	ff 75 08	 push	 DWORD PTR _rkPacket$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z ; ioBuff::ApplyBuffInfo

; 270  : 	int iState;
; 271  : 	rkPacket >> iState;

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00012	8d 45 fc	 lea	 eax, DWORD PTR _iState$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 272  : 	m_BuffState = (BuffState)iState;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _iState$[ebp]
  0001e	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  00024	5e		 pop	 esi

; 273  : }

  00025	c9		 leave
  00026	c2 04 00	 ret	 4
?ApplyBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioCreateWeaponCountBuff::ApplyBuffInfo
_TEXT	ENDS
PUBLIC	?SetSkillGauge@ioCreateWeaponCountBuff@@QAEXM@Z	; ioCreateWeaponCountBuff::SetSkillGauge
EXTRN	?SetCurItemSkillGauge@ioBaseChar@@QAEXABVioHashString@@M@Z:PROC ; ioBaseChar::SetCurItemSkillGauge
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?SetSkillGauge@ioCreateWeaponCountBuff@@QAEXM@Z
_TEXT	SEGMENT
_fSkillGauge$ = 8					; size = 4
?SetSkillGauge@ioCreateWeaponCountBuff@@QAEXM@Z PROC	; ioCreateWeaponCountBuff::SetSkillGauge, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 455  : 	//버프의 주인 얻기
; 456  : 	ioBaseChar *pOwner = GetOwner();

  00006	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner

; 457  : 
; 458  : 	if( !pOwner )

  0000b	85 c0		 test	 eax, eax
  0000d	74 19		 je	 SHORT $LN2@SetSkillGa

; 459  : 		return;
; 460  : 
; 461  : 	//주인의 해당 아이템의 스킬 게이지를 재설정
; 462  : 	pOwner->SetCurItemSkillGauge( m_ItemName, fSkillGauge );

  0000f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fSkillGauge$[ebp]
  00014	51		 push	 ecx
  00015	81 c6 44 02 00
	00		 add	 esi, 580		; 00000244H
  0001b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00020	56		 push	 esi
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ?SetCurItemSkillGauge@ioBaseChar@@QAEXABVioHashString@@M@Z ; ioBaseChar::SetCurItemSkillGauge
$LN2@SetSkillGa:
  00028	5e		 pop	 esi

; 463  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetSkillGauge@ioCreateWeaponCountBuff@@QAEXM@Z ENDP	; ioCreateWeaponCountBuff::SetSkillGauge
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?Init@WeaponInfo@@QAEXXZ			; WeaponInfo::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ?Init@WeaponInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@WeaponInfo@@QAEXXZ PROC				; WeaponInfo::Init, COMDAT
; _this$ = ecx

; 71   : 		m_iWeaponIdx = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 		m_iResistanceIdx = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   : 
; 74   : 		m_dwWoundedDuration = 0;

  00007	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 75   : 		m_dwCallTime = 0;

  0000a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 76   : 
; 77   : 		m_bWoundedLoopAni = false;

  0000d	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 78   : 
; 79   : 		m_dwDuration = 0;

  00010	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 80   : 	}

  00013	c3		 ret	 0
?Init@WeaponInfo@@QAEXXZ ENDP				; WeaponInfo::Init
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?GetName@ioBuff@@QBEABVioHashString@@XZ		; ioBuff::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetName@ioBuff@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioBuff@@QBEABVioHashString@@XZ PROC		; ioBuff::GetName, COMDAT
; _this$ = ecx

; 440  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 81 34 02 00
	00		 lea	 eax, DWORD PTR [ecx+564]
  00006	c3		 ret	 0
?GetName@ioBuff@@QBEABVioHashString@@XZ ENDP		; ioBuff::GetName
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@M@@6B@				; CEncrypt<float>::`vftable'
PUBLIC	??1?$CEncrypt@M@@UAE@XZ				; CEncrypt<float>::~CEncrypt<float>
PUBLIC	??_R4?$CEncrypt@M@@6B@				; CEncrypt<float>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@M@@@8			; CEncrypt<float> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@M@@8				; CEncrypt<float>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@M@@8				; CEncrypt<float>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@M@@8			; CEncrypt<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1ccddaabb@@UAE@XZ:PROC			; ccddaabb::~ccddaabb
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CEncrypt@M@@UAEPAXI@Z:PROC		; CEncrypt<float>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@M@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@M@@8 DD FLAT:??_R0?AV?$CEncrypt@M@@@8 ; CEncrypt<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@M@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@M@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@M@@8 ; CEncrypt<float>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@M@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@M@@8 DD 00H				; CEncrypt<float>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@M@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@M@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<float> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@M@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@M@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@M@@6B@ DD 00H				; CEncrypt<float>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@M@@@8
	DD	FLAT:??_R3?$CEncrypt@M@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@M@@6B@
CONST	SEGMENT
??_7?$CEncrypt@M@@6B@ DD FLAT:??_R4?$CEncrypt@M@@6B@	; CEncrypt<float>::`vftable'
	DD	FLAT:??_E?$CEncrypt@M@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@M@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@M@@UAE@XZ PROC				; CEncrypt<float>::~CEncrypt<float>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@M@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@M@@UAE@XZ ENDP				; CEncrypt<float>::~CEncrypt<float>
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`vftable'
PUBLIC	??1?$CEncrypt@K@@UAE@XZ				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
PUBLIC	??_R4?$CEncrypt@K@@6B@				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@K@@@8			; CEncrypt<unsigned long> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@K@@8				; CEncrypt<unsigned long>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@K@@8			; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CEncrypt@K@@UAEPAXI@Z:PROC		; CEncrypt<unsigned long>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@K@@8 DD FLAT:??_R0?AV?$CEncrypt@K@@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@K@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@K@@8 ; CEncrypt<unsigned long>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@K@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@K@@8 DD 00H				; CEncrypt<unsigned long>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@K@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@K@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<unsigned long> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@K@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@K@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@K@@6B@ DD 00H				; CEncrypt<unsigned long>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@K@@@8
	DD	FLAT:??_R3?$CEncrypt@K@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@K@@6B@
CONST	SEGMENT
??_7?$CEncrypt@K@@6B@ DD FLAT:??_R4?$CEncrypt@K@@6B@	; CEncrypt<unsigned long>::`vftable'
	DD	FLAT:??_E?$CEncrypt@K@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@K@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@K@@UAE@XZ PROC				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@K@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@K@@UAE@XZ ENDP				; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_G?$CEncrypt@M@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@M@@UAEPAXI@Z PROC			; CEncrypt<float>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@M@@UAEPAXI@Z ENDP			; CEncrypt<float>::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$CEncrypt@K@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@K@@UAEPAXI@Z PROC			; CEncrypt<unsigned long>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar@2
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar@2:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@K@@UAEPAXI@Z ENDP			; CEncrypt<unsigned long>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@M@@AAEXXZ			; CEncrypt<float>::Init
EXTRN	?Setup@ccddaabb@@QAEXPBDHH@Z:PROC		; ccddaabb::Setup
EXTRN	__imp__rand:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@M@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@M@@AAEXXZ PROC				; CEncrypt<float>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@M@@AAEXXZ ENDP				; CEncrypt<float>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@K@@AAEXXZ			; CEncrypt<unsigned long>::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@K@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@K@@AAEXXZ PROC				; CEncrypt<unsigned long>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	6a 04		 push	 4
  00024	58		 pop	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init@2
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init@2:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init@2:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init@2
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init@2:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init@2

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@K@@AAEXXZ ENDP				; CEncrypt<unsigned long>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??_7ioCreateWeaponCountBuff@@6B@		; ioCreateWeaponCountBuff::`vftable'
PUBLIC	??1ioCreateWeaponCountBuff@@UAE@XZ		; ioCreateWeaponCountBuff::~ioCreateWeaponCountBuff
PUBLIC	??_R4ioCreateWeaponCountBuff@@6B@		; ioCreateWeaponCountBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioCreateWeaponCountBuff@@@8		; ioCreateWeaponCountBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioCreateWeaponCountBuff@@8			; ioCreateWeaponCountBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioCreateWeaponCountBuff@@8			; ioCreateWeaponCountBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioCreateWeaponCountBuff@@8	; ioCreateWeaponCountBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioCreateWeaponCountBuff@@UAEXAAVioINILoader@@@Z ; ioCreateWeaponCountBuff::LoadProperty
PUBLIC	?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ ; ioCreateWeaponCountBuff::Clone
PUBLIC	?ProcessBuff@ioCreateWeaponCountBuff@@UAEXM@Z	; ioCreateWeaponCountBuff::ProcessBuff
PUBLIC	?EndBuff@ioCreateWeaponCountBuff@@UAEXXZ	; ioCreateWeaponCountBuff::EndBuff
PUBLIC	?ApplyExtraBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z ; ioCreateWeaponCountBuff::ApplyExtraBuffInfo
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioCreateWeaponCountBuff@@UAEPAXI@Z:PROC	; ioCreateWeaponCountBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioCreateWeaponCountBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioCreateWeaponCountBuff@@8 DD FLAT:??_R0?AVioCreateWeaponCountBuff@@@8 ; ioCreateWeaponCountBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioCreateWeaponCountBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioCreateWeaponCountBuff@@8
rdata$r	SEGMENT
??_R2ioCreateWeaponCountBuff@@8 DD FLAT:??_R1A@?0A@EA@ioCreateWeaponCountBuff@@8 ; ioCreateWeaponCountBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioCreateWeaponCountBuff@@8
rdata$r	SEGMENT
??_R3ioCreateWeaponCountBuff@@8 DD 00H			; ioCreateWeaponCountBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioCreateWeaponCountBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioCreateWeaponCountBuff@@@8
_DATA	SEGMENT
??_R0?AVioCreateWeaponCountBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioCreateWeaponCountBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioCreateWeaponCountBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioCreateWeaponCountBuff@@6B@
rdata$r	SEGMENT
??_R4ioCreateWeaponCountBuff@@6B@ DD 00H		; ioCreateWeaponCountBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioCreateWeaponCountBuff@@@8
	DD	FLAT:??_R3ioCreateWeaponCountBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioCreateWeaponCountBuff@@6B@
CONST	SEGMENT
??_7ioCreateWeaponCountBuff@@6B@ DD FLAT:??_R4ioCreateWeaponCountBuff@@6B@ ; ioCreateWeaponCountBuff::`vftable'
	DD	FLAT:?LoadProperty@ioCreateWeaponCountBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioCreateWeaponCountBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioCreateWeaponCountBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioCreateWeaponCountBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioCreateWeaponCountBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioCreateWeaponCountBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioCreateWeaponCountBuff@@UAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1ioCreateWeaponCountBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioCreateWeaponCountBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponcountbuff.cpp
xdata$x	ENDS
;	COMDAT ??1ioCreateWeaponCountBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioCreateWeaponCountBuff@@UAE@XZ PROC			; ioCreateWeaponCountBuff::~ioCreateWeaponCountBuff, COMDAT
; _this$ = ecx

; 38   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioCreateWeaponCountBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateWeaponCountBuff@@6B@

; 39   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e 58 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2648]
  00023	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0002a	ff d7		 call	 edi
  0002c	8d 8e 38 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2616]
  00032	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00036	ff d7		 call	 edi
  00038	8d 8e 0c 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2572]
  0003e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00042	c7 86 00 0a 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2560], OFFSET ??_7?$CEncrypt@M@@6B@
  0004c	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00051	bb 00 00 00 00	 mov	 ebx, OFFSET ??_7?$CEncrypt@K@@6B@
  00056	8d 8e dc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2524]
  0005c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00060	89 9e d0 09 00
	00		 mov	 DWORD PTR [esi+2512], ebx
  00066	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  0006b	8d 8e bc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2492]
  00071	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00075	ff d7		 call	 edi
  00077	8d 8e a8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2472]
  0007d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00081	ff d7		 call	 edi
  00083	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00089	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008d	89 9e 74 09 00
	00		 mov	 DWORD PTR [esi+2420], ebx
  00093	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00098	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  000a3	e8 00 00 00 00	 call	 __EH_epilog3
  000a8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 74 09 00
	00		 add	 ecx, 2420		; 00000974H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 a8 09 00
	00		 add	 ecx, 2472		; 000009a8H
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 bc 09 00
	00		 add	 ecx, 2492		; 000009bcH
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$4:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 d0 09 00
	00		 add	 ecx, 2512		; 000009d0H
  0003d	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$5:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 00 0a 00
	00		 add	 ecx, 2560		; 00000a00H
  0004b	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??1ioCreateWeaponCountBuff@@UAE@XZ$6:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 30 0a 00
	00		 add	 ecx, 2608		; 00000a30H
  00059	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$??1ioCreateWeaponCountBuff@@UAE@XZ:
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00068	33 c8		 xor	 ecx, eax
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioCreateWeaponCountBuff@@UAE@XZ
  00074	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioCreateWeaponCountBuff@@UAE@XZ ENDP			; ioCreateWeaponCountBuff::~ioCreateWeaponCountBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	__imp_?EndEffectForce@ioEffect@@QAEXXZ:PROC
EXTRN	__imp_?GetEffect@ioEffectFactory@@QAEPAVioEffect@@K@Z:PROC
EXTRN	__imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponcountbuff.cpp
;	COMDAT ?EndBuff@ioCreateWeaponCountBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioCreateWeaponCountBuff@@UAEXXZ PROC		; ioCreateWeaponCountBuff::EndBuff, COMDAT
; _this$ = ecx

; 241  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 242  : 	if( m_dwDelayEffectID != -1 )

  00003	8b 86 b8 09 00
	00		 mov	 eax, DWORD PTR [esi+2488]
  00009	83 f8 ff	 cmp	 eax, -1
  0000c	74 22		 je	 SHORT $LN2@EndBuff

; 243  : 	{
; 244  : 		ioEffect *pEffect = g_EffectFactory.GetEffect( m_dwDelayEffectID );

  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00015	8b c8		 mov	 ecx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetEffect@ioEffectFactory@@QAEPAVioEffect@@K@Z

; 245  : 		if( pEffect )

  0001d	85 c0		 test	 eax, eax
  0001f	74 0f		 je	 SHORT $LN2@EndBuff

; 246  : 		{
; 247  : 			pEffect->EndEffectForce();

  00021	8b c8		 mov	 ecx, eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EndEffectForce@ioEffect@@QAEXXZ

; 248  : 			m_dwDelayEffectID = -1;

  00029	83 8e b8 09 00
	00 ff		 or	 DWORD PTR [esi+2488], -1
$LN2@EndBuff:

; 249  : 		}
; 250  : 	}
; 251  : 
; 252  : 	ioBuff::EndBuff();

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff

; 253  : 
; 254  : 	if ( m_CreateWeaponType == CWBT_COUNT )

  00037	83 be 68 0a 00
	00 01		 cmp	 DWORD PTR [esi+2664], 1
  0003e	75 10		 jne	 SHORT $LN1@EndBuff

; 255  : 	{
; 256  : 		//스킬게이지 설정
; 257  : 		SetSkillGauge( 0.0f );

  00040	0f 57 c0	 xorps	 xmm0, xmm0
  00043	51		 push	 ecx
  00044	8b ce		 mov	 ecx, esi
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	e8 00 00 00 00	 call	 ?SetSkillGauge@ioCreateWeaponCountBuff@@QAEXM@Z ; ioCreateWeaponCountBuff::SetSkillGauge
$LN1@EndBuff:
  00050	5e		 pop	 esi

; 258  : 	}
; 259  : }

  00051	c3		 ret	 0
?EndBuff@ioCreateWeaponCountBuff@@UAEXXZ ENDP		; ioCreateWeaponCountBuff::EndBuff
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ; ioINILoader::LoadInt_e<14>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<14>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadInt_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadInt_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadInt_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadInt_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadInt_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadInt_e
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadInt_e
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadInt_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadInt_e
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadInt_e
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadInt_e:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  0019e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001a1	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a8	50		 push	 eax
  001a9	8b ce		 mov	 ecx, esi
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	5e		 pop	 esi
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	c9		 leave
  001bd	c2 08 00	 ret	 8
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ; ioINILoader::LoadInt_e<13>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<13>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@LoadInt_e@2
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@LoadInt_e@2
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@LoadInt_e@2
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@LoadInt_e@2
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@LoadInt_e@2
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@LoadInt_e@2
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@LoadInt_e@2
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  00128	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00139	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  00144	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00150	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00155	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00161	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@LoadInt_e@2:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00187	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	50		 push	 eax
  0018e	8b ce		 mov	 ecx, esi
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	5e		 pop	 esi
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	c9		 leave
  001a2	c2 08 00	 ret	 8
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ; ioINILoader::LoadInt_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<20>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadInt_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadInt_e@3
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadInt_e@3
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadInt_e@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadInt_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadInt_e@3
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadInt_e@3
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadInt_e@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadInt_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadInt_e@3
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadInt_e@3
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadInt_e@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadInt_e@3
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadInt_e@3
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadInt_e@3
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e@3
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadInt_e@3
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadInt_e@3
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadInt_e@3
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadInt_e@3
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN73@LoadInt_e@3:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadInt_e@3
$LN74@LoadInt_e@3:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadInt_e@3:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadInt_e@3:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadInt_e@3:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  00238	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0023b	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023e	50		 push	 eax
  0023f	8b ce		 mov	 ecx, esi
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00247	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024a	5e		 pop	 esi
  0024b	33 cd		 xor	 ecx, ebp
  0024d	5b		 pop	 ebx
  0024e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00253	c9		 leave
  00254	c2 08 00	 ret	 8
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<20>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<15>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<15>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 75 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 5e 01 00
	00		 je	 $LN95@LoadString
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 46 01 00
	00		 je	 $LN94@LoadString
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 2f 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 18 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 02 01 00
	00		 je	 $LN91@LoadString
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 ec 00 00
	00		 je	 $LN90@LoadString
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 d5 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 be 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 a8 00 00
	00		 je	 $LN87@LoadString
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 92 00 00
	00		 je	 $LN86@LoadString
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 7f		 je	 SHORT $LN85@LoadString
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 6c		 je	 SHORT $LN84@LoadString
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	74 5a		 je	 SHORT $LN83@LoadString
  000f8	32 d1		 xor	 dl, cl
  000fa	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000fe	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	0f 84 9a 00 00
	00		 je	 $LN111@LoadString
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 3e		 je	 SHORT $LN81@LoadString
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 2b		 je	 SHORT $LN80@LoadString
  0011b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011e	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00121	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00124	84 d2		 test	 dl, dl
  00126	74 19		 je	 SHORT $LN79@LoadString
  00128	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  0012b	32 d1		 xor	 dl, cl
  0012d	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00130	84 c0		 test	 al, al
  00132	74 07		 je	 SHORT $LN78@LoadString
  00134	34 eb		 xor	 al, -21			; ffffffebH
  00136	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00139	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  0013b	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  0013f	eb 60		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00141	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  00144	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  00146	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0014a	eb 55		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  0014c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00150	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00152	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  00155	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00157	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0015b	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0015d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00161	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00163	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00167	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00169	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0016c	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0016e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00172	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00174	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00178	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  0017a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0017e	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00180	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00183	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00185	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00189	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  0018b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0018f	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  00191	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00195	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00197	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0019b	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0019d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001a1	6a 03		 push	 3
  001a3	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a6	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001aa	5a		 pop	 edx
$LL104@LoadString:
  001ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b1	83 c0 04	 add	 eax, 4
  001b4	4a		 dec	 edx
  001b5	75 f4		 jne	 SHORT $LL104@LoadString
  001b7	6a 0c		 push	 12			; 0000000cH
  001b9	58		 pop	 eax
$LL101@LoadString:
  001ba	8b c8		 mov	 ecx, eax
  001bc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001c2	79 05		 jns	 SHORT $LN112@LoadString
  001c4	49		 dec	 ecx
  001c5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c8	41		 inc	 ecx
$LN112@LoadString:
  001c9	b2 ed		 mov	 dl, -19			; ffffffedH
  001cb	2a d1		 sub	 dl, cl
  001cd	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001d1	40		 inc	 eax
  001d2	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001d5	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001d7	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001da	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001dd	57		 push	 edi
  001de	56		 push	 esi
  001df	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	5f		 pop	 edi
  001ed	33 cd		 xor	 ecx, ebp
  001ef	5e		 pop	 esi
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	c9		 leave
  001f6	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z ; ioINILoader::LoadBool_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<24>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadBool_e@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadBool_e@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadBool_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadBool_e@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadBool_e@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadBool_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadBool_e@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadBool_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadBool_e@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadBool_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadBool_e@2
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadBool_e@2
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadBool_e@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadBool_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadBool_e@2
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadBool_e@2
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadBool_e@2
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadBool_e@2
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadBool_e@2
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadBool_e@2
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadBool_e@2
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN69@LoadBool_e@2:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN70@LoadBool_e@2:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN71@LoadBool_e@2:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN72@LoadBool_e@2:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadBool_e@2:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadBool_e@2
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadBool_e@2:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadBool_e@2
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadBool_e@2:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  002a0	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  002a3	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a6	50		 push	 eax
  002a7	8b ce		 mov	 ecx, esi
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	5e		 pop	 esi
  002b3	33 cd		 xor	 ecx, ebp
  002b5	5b		 pop	 ebx
  002b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bb	c9		 leave
  002bc	c2 08 00	 ret	 8
??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<24>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<13>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<13>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 4d 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 36 01 00
	00		 je	 $LN95@LoadString@2
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 1e 01 00
	00		 je	 $LN94@LoadString@2
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 07 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 f0 00 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 da 00 00
	00		 je	 $LN91@LoadString@2
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 c4 00 00
	00		 je	 $LN90@LoadString@2
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ad 00 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 96 00 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 80 00 00
	00		 je	 $LN87@LoadString@2
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	74 6e		 je	 SHORT $LN86@LoadString@2
  000cd	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d0	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d3	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d6	84 d2		 test	 dl, dl
  000d8	74 5b		 je	 SHORT $LN85@LoadString@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	0f 84 8f 00 00
	00		 je	 $LN111@LoadString@2
  000ea	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ed	84 d2		 test	 dl, dl
  000ef	74 3f		 je	 SHORT $LN83@LoadString@2
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f6	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f9	84 d2		 test	 dl, dl
  000fb	74 2d		 je	 SHORT $LN82@LoadString@2
  000fd	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00100	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00103	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00106	84 d2		 test	 dl, dl
  00108	74 1a		 je	 SHORT $LN81@LoadString@2
  0010a	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  0010d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00110	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00113	84 c0		 test	 al, al
  00115	74 07		 je	 SHORT $LN80@LoadString@2
  00117	34 ed		 xor	 al, -19			; ffffffedH
  00119	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  0011c	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  0011e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00122	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  00124	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00128	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  0012a	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0012e	eb 49		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  00130	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  00133	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  00135	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00139	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  0013b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0013f	eb 38		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00141	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00144	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  00146	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014a	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  0014c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00150	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00152	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00156	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  00158	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0015b	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  0015d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00161	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  00163	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00167	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  00169	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0016d	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  0016f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00173	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  00175	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  00179	6a 03		 push	 3
  0017b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0017e	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  00182	5a		 pop	 edx
$LL104@LoadString@2:
  00183	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00189	83 c0 04	 add	 eax, 4
  0018c	4a		 dec	 edx
  0018d	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  0018f	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00192	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00195	57		 push	 edi
  00196	56		 push	 esi
  00197	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019a	50		 push	 eax
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a4	5f		 pop	 edi
  001a5	33 cd		 xor	 ecx, ebp
  001a7	5e		 pop	 esi
  001a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ad	c9		 leave
  001ae	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<13>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<14>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 64 01 00
	00		 je	 $LN96@LoadString@3
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 4d 01 00
	00		 je	 $LN95@LoadString@3
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 36 01 00
	00		 je	 $LN94@LoadString@3
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 1e 01 00
	00		 je	 $LN93@LoadString@3
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 07 01 00
	00		 je	 $LN92@LoadString@3
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 f0 00 00
	00		 je	 $LN91@LoadString@3
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 da 00 00
	00		 je	 $LN90@LoadString@3
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 c4 00 00
	00		 je	 $LN89@LoadString@3
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 ad 00 00
	00		 je	 $LN88@LoadString@3
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 96 00 00
	00		 je	 $LN87@LoadString@3
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 80 00 00
	00		 je	 $LN86@LoadString@3
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 6e		 je	 SHORT $LN85@LoadString@3
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 5b		 je	 SHORT $LN84@LoadString@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	0f 84 95 00 00
	00		 je	 $LN111@LoadString@3
  000fb	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fe	84 d2		 test	 dl, dl
  00100	74 3f		 je	 SHORT $LN82@LoadString@3
  00102	32 d1		 xor	 dl, cl
  00104	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 2d		 je	 SHORT $LN81@LoadString@3
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 1a		 je	 SHORT $LN80@LoadString@3
  0011b	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  0011e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00121	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00124	84 c0		 test	 al, al
  00126	74 07		 je	 SHORT $LN79@LoadString@3
  00128	34 ec		 xor	 al, -20			; ffffffecH
  0012a	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  0012d	eb 61		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  0012f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00133	eb 5b		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  00135	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00139	eb 55		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  0013b	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0013f	eb 4f		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  00141	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00144	eb 4a		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  00146	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0014a	eb 44		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  0014c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00150	eb 3e		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  00152	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00155	eb 39		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  00157	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0015b	eb 33		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  0015d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00161	eb 2d		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  00163	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00167	eb 27		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  00169	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0016c	eb 22		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  0016e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00172	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  00174	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00178	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  0017a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0017e	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  00180	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00184	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  00186	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0018a	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  0018c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  00190	6a 03		 push	 3
  00192	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00195	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00199	5a		 pop	 edx
$LL104@LoadString@3:
  0019a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a0	83 c0 04	 add	 eax, 4
  001a3	4a		 dec	 edx
  001a4	75 f4		 jne	 SHORT $LL104@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  001a6	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ac	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b0	57		 push	 edi
  001b1	56		 push	 esi
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	50		 push	 eax
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bf	5f		 pop	 edi
  001c0	33 cd		 xor	 ecx, ebp
  001c2	5e		 pop	 esi
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	c9		 leave
  001c9	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z ; ioINILoader::LoadFloat_e<12>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<12>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@LoadFloat_
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@LoadFloat_
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@LoadFloat_
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@LoadFloat_
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@LoadFloat_
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@LoadFloat_
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@LoadFloat_
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@LoadFloat_
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@LoadFloat_:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@LoadFloat_
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@LoadFloat_:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@LoadFloat_
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@LoadFloat_:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0018c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00191	51		 push	 ecx
  00192	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	50		 push	 eax
  0019b	8b ce		 mov	 ecx, esi
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a6	33 cd		 xor	 ecx, ebp
  001a8	5e		 pop	 esi
  001a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ae	c9		 leave
  001af	c2 08 00	 ret	 8
??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<11>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<11>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	84 d2		 test	 dl, dl
  00020	0f 84 1b 01 00
	00		 je	 $LN96@LoadString@4
  00026	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00029	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002f	84 d2		 test	 dl, dl
  00031	0f 84 04 01 00
	00		 je	 $LN95@LoadString@4
  00037	b3 ec		 mov	 bl, -20			; ffffffecH
  00039	32 d3		 xor	 dl, bl
  0003b	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003e	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00041	84 d2		 test	 dl, dl
  00043	0f 84 ec 00 00
	00		 je	 $LN94@LoadString@4
  00049	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004c	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004f	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00052	84 d2		 test	 dl, dl
  00054	0f 84 d5 00 00
	00		 je	 $LN93@LoadString@4
  0005a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005d	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00060	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00063	84 d2		 test	 dl, dl
  00065	0f 84 be 00 00
	00		 je	 $LN92@LoadString@4
  0006b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006e	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00071	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00074	84 d2		 test	 dl, dl
  00076	0f 84 a8 00 00
	00		 je	 $LN91@LoadString@4
  0007c	32 d3		 xor	 dl, bl
  0007e	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00081	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00084	84 d2		 test	 dl, dl
  00086	0f 84 92 00 00
	00		 je	 $LN90@LoadString@4
  0008c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008f	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00092	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00095	84 d2		 test	 dl, dl
  00097	74 7f		 je	 SHORT $LN89@LoadString@4
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 6c		 je	 SHORT $LN88@LoadString@4
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5a		 je	 SHORT $LN87@LoadString@4
  000b3	32 d3		 xor	 dl, bl
  000b5	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bc	0f 84 83 00 00
	00		 je	 $LN1@LoadString@4
  000c2	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c5	84 d2		 test	 dl, dl
  000c7	74 3e		 je	 SHORT $LN85@LoadString@4
  000c9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cc	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 2b		 je	 SHORT $LN84@LoadString@4
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 19		 je	 SHORT $LN83@LoadString@4
  000e3	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e6	32 d3		 xor	 dl, bl
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadString@4
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 4f		 jmp	 SHORT $LN1@LoadString@4
$LN82@LoadString@4:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 49		 jmp	 SHORT $LN1@LoadString@4
$LN83@LoadString@4:
  000fc	88 5d f9	 mov	 BYTE PTR __k$[ebp+13], bl
  000ff	eb 44		 jmp	 SHORT $LN1@LoadString@4
$LN84@LoadString@4:
  00101	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00105	eb 3e		 jmp	 SHORT $LN1@LoadString@4
$LN85@LoadString@4:
  00107	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010b	eb 38		 jmp	 SHORT $LN1@LoadString@4
$LN87@LoadString@4:
  0010d	88 5d f5	 mov	 BYTE PTR __k$[ebp+9], bl
  00110	eb 33		 jmp	 SHORT $LN1@LoadString@4
$LN88@LoadString@4:
  00112	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00116	eb 2d		 jmp	 SHORT $LN1@LoadString@4
$LN89@LoadString@4:
  00118	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011c	eb 27		 jmp	 SHORT $LN1@LoadString@4
$LN90@LoadString@4:
  0011e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00122	eb 21		 jmp	 SHORT $LN1@LoadString@4
$LN91@LoadString@4:
  00124	88 5d f1	 mov	 BYTE PTR __k$[ebp+5], bl
  00127	eb 1c		 jmp	 SHORT $LN1@LoadString@4
$LN92@LoadString@4:
  00129	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0012d	eb 16		 jmp	 SHORT $LN1@LoadString@4
$LN93@LoadString@4:
  0012f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00133	eb 10		 jmp	 SHORT $LN1@LoadString@4
$LN94@LoadString@4:
  00135	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00139	eb 0a		 jmp	 SHORT $LN1@LoadString@4
$LN95@LoadString@4:
  0013b	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0013f	eb 04		 jmp	 SHORT $LN1@LoadString@4
$LN96@LoadString@4:
  00141	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString@4:
  00145	6a 02		 push	 2
  00147	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014a	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  0014e	5a		 pop	 edx
$LL104@LoadString@4:
  0014f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00155	83 c0 04	 add	 eax, 4
  00158	4a		 dec	 edx
  00159	75 f4		 jne	 SHORT $LL104@LoadString@4
  0015b	6a 08		 push	 8
  0015d	58		 pop	 eax
$LL101@LoadString@4:
  0015e	8b d0		 mov	 edx, eax
  00160	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  00166	79 05		 jns	 SHORT $LN111@LoadString@4
  00168	4a		 dec	 edx
  00169	83 ca fc	 or	 edx, -4			; fffffffcH
  0016c	42		 inc	 edx
$LN111@LoadString@4:
  0016d	b3 ed		 mov	 bl, -19			; ffffffedH
  0016f	2a da		 sub	 bl, dl
  00171	30 5c 05 ec	 xor	 BYTE PTR __k$[ebp+eax], bl
  00175	40		 inc	 eax
  00176	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00179	7c e3		 jl	 SHORT $LL101@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  0017b	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0017e	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00181	57		 push	 edi
  00182	56		 push	 esi
  00183	50		 push	 eax
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	33 cd		 xor	 ecx, ebp
  00191	5b		 pop	 ebx
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	c9		 leave
  00198	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0L@@ioINILoader@@QAEXAAY0L@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z ; ioINILoader::LoadInt_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<23>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadInt_e@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadInt_e@4
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadInt_e@4
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadInt_e@4
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadInt_e@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadInt_e@4
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadInt_e@4
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadInt_e@4
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadInt_e@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadInt_e@4
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadInt_e@4
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadInt_e@4
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadInt_e@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadInt_e@4
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadInt_e@4
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadInt_e@4
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadInt_e@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadInt_e@4
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadInt_e@4
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadInt_e@4
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadInt_e@4
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadInt_e@4
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadInt_e@4
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadInt_e@4
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadInt_e@4
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadInt_e@4
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadInt_e@4
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN70@LoadInt_e@4:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN71@LoadInt_e@4:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN72@LoadInt_e@4:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN73@LoadInt_e@4:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadInt_e@4
$LN75@LoadInt_e@4:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadInt_e@4
$LN76@LoadInt_e@4:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN77@LoadInt_e@4:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadInt_e@4
$LN78@LoadInt_e@4:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadInt_e@4
$LN79@LoadInt_e@4:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN83@LoadInt_e@4:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadInt_e@4:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadInt_e@4
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadInt_e@4:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadInt_e@4
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadInt_e@4:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  00288	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0028b	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0028e	50		 push	 eax
  0028f	8b ce		 mov	 ecx, esi
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00297	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029a	5e		 pop	 esi
  0029b	33 cd		 xor	 ecx, ebp
  0029d	5b		 pop	 ebx
  0029e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a3	c9		 leave
  002a4	c2 08 00	 ret	 8
??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<19>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadInt_e@5
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadInt_e@5
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadInt_e@5
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadInt_e@5
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e@5
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e@5
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e@5
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadInt_e@5
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadInt_e@5
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadInt_e@5
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadInt_e@5
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadInt_e@5
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadInt_e@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadInt_e@5
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadInt_e@5
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadInt_e@5
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadInt_e@5
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadInt_e@5
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e@5
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadInt_e@5
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadInt_e@5
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadInt_e@5
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadInt_e@5
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadInt_e@5
$LN74@LoadInt_e@5:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadInt_e@5
$LN75@LoadInt_e@5:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadInt_e@5
$LN76@LoadInt_e@5:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN77@LoadInt_e@5:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadInt_e@5
$LN79@LoadInt_e@5:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadInt_e@5
$LN80@LoadInt_e@5:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@5
$LN81@LoadInt_e@5:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadInt_e@5
$LN82@LoadInt_e@5:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@5
$LN83@LoadInt_e@5:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@5
$LN84@LoadInt_e@5:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadInt_e@5
$LN85@LoadInt_e@5:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@5
$LN86@LoadInt_e@5:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadInt_e@5
$LN87@LoadInt_e@5:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadInt_e@5
$LN88@LoadInt_e@5:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@5
$LN89@LoadInt_e@5:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadInt_e@5
$LN90@LoadInt_e@5:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadInt_e@5
$LN91@LoadInt_e@5:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@5
$LN92@LoadInt_e@5:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadInt_e@5
$LN93@LoadInt_e@5:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadInt_e@5
$LN94@LoadInt_e@5:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@5
$LN95@LoadInt_e@5:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadInt_e@5
$LN96@LoadInt_e@5:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@5:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadInt_e@5:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadInt_e@5
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadInt_e@5:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadInt_e@5
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadInt_e@5:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadInt_e@5

; 120  : 		return LoadInt(_k, i);

  00229	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<19>
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@XZ				; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??0WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??0WeaponInfo@@QAE@XZ PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx

; 64   : 	WeaponInfo()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 65   : 	{
; 66   : 		Init();

  0000c	33 c0		 xor	 eax, eax
  0000e	89 06		 mov	 DWORD PTR [esi], eax
  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00013	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00016	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00019	88 46 20	 mov	 BYTE PTR [esi+32], al
  0001c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 67   : 	}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??0WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@M@@QAE@XZ				; CEncrypt<float>::CEncrypt<float>
EXTRN	??0ccddaabb@@QAE@XZ:PROC			; ccddaabb::ccddaabb
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@M@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@M@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@M@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@M@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@M@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@M@@QAE@XZ PROC				; CEncrypt<float>::CEncrypt<float>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@M@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@M@@AAEXXZ ; CEncrypt<float>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@M@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@M@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@M@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@M@@QAE@XZ ENDP				; CEncrypt<float>::CEncrypt<float>
PUBLIC	??B?$CEncrypt@M@@QAEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@M@@QAEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QAEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QAEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@M@@QBEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@M@@QBEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QBEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QBEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@XZ				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@K@@QAE@XZ PROC				; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@XZ ENDP				; CEncrypt<unsigned long>::CEncrypt<unsigned long>
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QBEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QBEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QBEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QBEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKH@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKH@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 843  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 845  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 846  : #ifdef _NOTUSE
; 847  : 		m_value = inValue;
; 848  : 		Debug();
; 849  : #endif
; 850  : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 851  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKH@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QAE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QAE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QAE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QAE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	?SetGravityAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetGravityAmt
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?SetGravityAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_value$526724 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetGravityAmt@ioBaseChar@@QAEXM@Z PROC			; ioBaseChar::SetGravityAmt, COMDAT
; _this$ = ecx

; 2631 : 	inline void SetGravityAmt( float fAmt ) { m_fGravityAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	8d 45 08	 lea	 eax, DWORD PTR _value$526724[ebp]
  0000b	50		 push	 eax
  0000c	81 c1 e8 0b 00
	00		 add	 ecx, 3048		; 00000be8H
  00012	f3 0f 11 45 08	 movss	 DWORD PTR _value$526724[ebp], xmm0
  00017	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetGravityAmt@ioBaseChar@@QAEXM@Z ENDP			; ioBaseChar::SetGravityAmt
_TEXT	ENDS
PUBLIC	??0ioCreateWeaponCountBuff@@QAE@XZ		; ioCreateWeaponCountBuff::ioCreateWeaponCountBuff
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponcountbuff.cpp
xdata$x	SEGMENT
__ehfuncinfo$??0ioCreateWeaponCountBuff@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioCreateWeaponCountBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioCreateWeaponCountBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCreateWeaponCountBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioCreateWeaponCountBuff@@QAE@XZ PROC			; ioCreateWeaponCountBuff::ioCreateWeaponCountBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCreateWeaponCountBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateWeaponCountBuff@@6B@
  00026	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  0002b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00031	8d 8e a8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2472]
  00037	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003b	ff d7		 call	 edi
  0003d	8d 8e bc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2492]
  00043	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00047	ff d7		 call	 edi
  00049	8d 8e d0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2512]
  0004f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00053	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@XZ	; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00058	8d 8e 00 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2560]
  0005e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00062	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@XZ	; CEncrypt<float>::CEncrypt<float>
  00067	8d 8e 30 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2608]
  0006d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00071	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo
  00076	8d 8e 58 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2648]
  0007c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00080	ff d7		 call	 edi

; 11   : 	m_dwDelayEffectID = -1;

  00082	83 8e b8 09 00
	00 ff		 or	 DWORD PTR [esi+2488], -1

; 12   : 	m_dwCheckFireTime = 0;

  00089	83 a6 a4 09 00
	00 00		 and	 DWORD PTR [esi+2468], 0

; 13   : 	m_dwCheckGavityTime = 0;

  00090	83 a6 cc 09 00
	00 00		 and	 DWORD PTR [esi+2508], 0

; 14   : }

  00097	8b c6		 mov	 eax, esi
  00099	e8 00 00 00 00	 call	 __EH_epilog3
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 74 09 00
	00		 add	 ecx, 2420		; 00000974H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 a8 09 00
	00		 add	 ecx, 2472		; 000009a8H
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 bc 09 00
	00		 add	 ecx, 2492		; 000009bcH
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$4:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 d0 09 00
	00		 add	 ecx, 2512		; 000009d0H
  0003d	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$5:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 00 0a 00
	00		 add	 ecx, 2560		; 00000a00H
  0004b	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@XZ$6:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 30 0a 00
	00		 add	 ecx, 2608		; 00000a30H
  00059	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$??0ioCreateWeaponCountBuff@@QAE@XZ:
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00068	33 c8		 xor	 ecx, eax
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCreateWeaponCountBuff@@QAE@XZ
  00074	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCreateWeaponCountBuff@@QAE@XZ ENDP			; ioCreateWeaponCountBuff::ioCreateWeaponCountBuff
; Function compile flags: /Ogsp
;	COMDAT ??_GioCreateWeaponCountBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioCreateWeaponCountBuff@@UAEPAXI@Z PROC		; ioCreateWeaponCountBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioCreateWeaponCountBuff@@UAE@XZ ; ioCreateWeaponCountBuff::~ioCreateWeaponCountBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioCreateWeaponCountBuff@@UAEPAXI@Z ENDP		; ioCreateWeaponCountBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ; ioCreateWeaponCountBuff::CheckOwnerStateCheck
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z:PROC ; ioBaseChar::CheckUseBuffSkill
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ
_TEXT	SEGMENT
_value$526763 = -1					; size = 1
?CheckOwnerStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ PROC ; ioCreateWeaponCountBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 165  : 	if( !m_pOwner ) return false;

  00007	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0000d	85 c9		 test	 ecx, ecx
  0000f	75 07		 jne	 SHORT $LN26@CheckOwner
  00011	32 c0		 xor	 al, al
  00013	e9 cd 00 00 00	 jmp	 $LN27@CheckOwner
$LN26@CheckOwner:

; 166  : 
; 167  : 	CharState eState = m_pOwner->GetState();
; 168  : 
; 169  : 	bool bDown = false;
; 170  : 	if( m_bDisableDownState )

  00018	80 be 70 09 00
	00 00		 cmp	 BYTE PTR [esi+2416], 0
  0001f	53		 push	 ebx
  00020	8a 99 10 03 00
	00		 mov	 bl, BYTE PTR [ecx+784]
  00026	74 1f		 je	 SHORT $LN11@CheckOwner

; 171  : 	{
; 172  : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  00028	80 fb 17	 cmp	 bl, 23			; 00000017H
  0002b	75 0c		 jne	 SHORT $LN24@CheckOwner
  0002d	80 b9 c5 15 00
	00 00		 cmp	 BYTE PTR [ecx+5573], 0

; 173  : 			bDown = true;

  00034	e9 85 00 00 00	 jmp	 $LN42@CheckOwner
$LN24@CheckOwner:

; 174  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00039	80 fb 0c	 cmp	 bl, 12			; 0000000cH
  0003c	75 55		 jne	 SHORT $LN22@CheckOwner
$LN44@CheckOwner:
  0003e	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  00043	84 c0		 test	 al, al
  00045	74 79		 je	 SHORT $LN12@CheckOwner
$LN11@CheckOwner:

; 197  : 		}
; 198  : 	}
; 199  : 
; 200  : 	bool bWound = false;
; 201  : 	if( m_bEnableWoundCancel )

  00047	8d 45 ff	 lea	 eax, DWORD PTR _value$526763[ebp]
  0004a	50		 push	 eax
  0004b	8d 8e a8 06 00
	00		 lea	 ecx, DWORD PTR [esi+1704]
  00051	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00056	80 7d ff 00	 cmp	 BYTE PTR _value$526763[ebp], 0
  0005a	0f 84 82 00 00
	00		 je	 $LN1@CheckOwner

; 202  : 	{
; 203  : 		if( eState == CS_BLOW_WOUNDED )

  00060	80 fb 0c	 cmp	 bl, 12			; 0000000cH

; 204  : 			bWound = true;

  00063	74 0f		 je	 SHORT $LN2@CheckOwner

; 205  : 		else if( eState == CS_BOUND_BLOW_WOUNDED )

  00065	80 fb 31	 cmp	 bl, 49			; 00000031H

; 206  : 			bWound = true;

  00068	74 0a		 je	 SHORT $LN2@CheckOwner

; 207  : 		else if( eState == CS_WOUNDED )

  0006a	80 fb 0b	 cmp	 bl, 11			; 0000000bH

; 208  : 			bWound = true;

  0006d	74 05		 je	 SHORT $LN2@CheckOwner

; 209  : 		else if( eState == CS_ETC_STATE )

  0006f	80 fb 0f	 cmp	 bl, 15			; 0000000fH
  00072	75 6e		 jne	 SHORT $LN1@CheckOwner
$LN2@CheckOwner:

; 210  : 			bWound = true;
; 211  : 
; 212  : 		if( bWound )
; 213  : 		{
; 214  : 			m_pOwner->CheckUseBuffSkill( m_Name, false );

  00074	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0007a	6a 00		 push	 0
  0007c	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::CheckUseBuffSkill

; 215  : 			SetReserveEndBuff();

  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 216  : 			return true;

  0008f	b0 01		 mov	 al, 1
  00091	eb 51		 jmp	 SHORT $LN41@CheckOwner
$LN22@CheckOwner:

; 175  : 			bDown = true;
; 176  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00093	80 fb 31	 cmp	 bl, 49			; 00000031H

; 177  : 			bDown = true;

  00096	74 a6		 je	 SHORT $LN44@CheckOwner

; 178  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00098	80 fb 0f	 cmp	 bl, 15			; 0000000fH
  0009b	75 0b		 jne	 SHORT $LN18@CheckOwner
  0009d	6a 00		 push	 0
  0009f	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  000a4	84 c0		 test	 al, al

; 179  : 			bDown = true;

  000a6	eb 16		 jmp	 SHORT $LN42@CheckOwner
$LN18@CheckOwner:

; 180  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  000a8	80 fb 26	 cmp	 bl, 38			; 00000026H

; 181  : 			bDown = true;

  000ab	74 0a		 je	 SHORT $LN43@CheckOwner

; 182  : 		else if( eState == CS_DROP_ZONE_DOWN )

  000ad	80 fb 10	 cmp	 bl, 16			; 00000010H

; 183  : 			bDown = true;

  000b0	74 0e		 je	 SHORT $LN12@CheckOwner

; 184  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  000b2	80 fb 3b	 cmp	 bl, 59			; 0000003bH
  000b5	75 90		 jne	 SHORT $LN11@CheckOwner
$LN43@CheckOwner:
  000b7	80 b9 c7 15 00
	00 00		 cmp	 BYTE PTR [ecx+5575], 0
$LN42@CheckOwner:
  000be	74 87		 je	 SHORT $LN11@CheckOwner
$LN12@CheckOwner:

; 185  : 			bDown = true;
; 186  : 
; 187  : 		if( bDown )
; 188  : 		{
; 189  : 			if( CheckRestoreStateCheck() )

  000c0	8b ce		 mov	 ecx, esi
  000c2	e8 00 00 00 00	 call	 ?CheckRestoreStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ; ioCreateWeaponCountBuff::CheckRestoreStateCheck
  000c7	84 c0		 test	 al, al
  000c9	74 a9		 je	 SHORT $LN2@CheckOwner

; 190  : 			{
; 191  : 				m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  000cb	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  000d2	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000d8	50		 push	 eax
  000d9	6a 00		 push	 0
  000db	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 192  : 			}
; 193  : 
; 194  : 			m_pOwner->CheckUseBuffSkill( m_Name, false );
; 195  : 			SetReserveEndBuff();
; 196  : 			return true;

  000e0	eb 92		 jmp	 SHORT $LN2@CheckOwner
$LN1@CheckOwner:

; 217  : 		}
; 218  : 	}
; 219  : 
; 220  : 	return false;

  000e2	32 c0		 xor	 al, al
$LN41@CheckOwner:
  000e4	5b		 pop	 ebx
$LN27@CheckOwner:
  000e5	5e		 pop	 esi

; 221  : }

  000e6	c9		 leave
  000e7	c3		 ret	 0
?CheckOwnerStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ENDP ; ioCreateWeaponCountBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?ProcessState@ioCreateWeaponCountBuff@@IAEXXZ	; ioCreateWeaponCountBuff::ProcessState
EXTRN	__imp_?GetUniqueID@ioMovableObject@@QBEKXZ:PROC
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioCreateWeaponCountBuff@@IAEXXZ
_TEXT	SEGMENT
_pOwner$ = -8						; size = 4
_value$526795 = -4					; size = 4
_value$526785 = -4					; size = 4
_value$526780 = -4					; size = 4
_value$526775 = -4					; size = 4
?ProcessState@ioCreateWeaponCountBuff@@IAEXXZ PROC	; ioCreateWeaponCountBuff::ProcessState, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 313  : 	ioBaseChar *pOwner = GetOwner();

  00009	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  0000e	8b c8		 mov	 ecx, eax

; 314  : 	if( !pOwner )

  00010	33 db		 xor	 ebx, ebx
  00012	89 4d f8	 mov	 DWORD PTR _pOwner$[ebp], ecx
  00015	3b cb		 cmp	 ecx, ebx
  00017	0f 84 10 01 00
	00		 je	 $LN1@ProcessSta

; 315  : 		return;
; 316  : 
; 317  : 	switch( m_BuffState )

  0001d	8b 86 6c 09 00
	00		 mov	 eax, DWORD PTR [esi+2412]
  00023	2b c3		 sub	 eax, ebx
  00025	57		 push	 edi
  00026	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002c	74 72		 je	 SHORT $LN10@ProcessSta
  0002e	48		 dec	 eax
  0002f	0f 85 96 00 00
	00		 jne	 $LN8@ProcessSta

; 326  : 			}
; 327  : 		}
; 328  : 		break;
; 329  : 	case BS_FIRE:
; 330  : 		{
; 331  : 			if( m_dwCheckFireTime + m_dwFireGapTime < FRAMEGETTIME() )

  00035	8d 45 fc	 lea	 eax, DWORD PTR _value$526775[ebp]
  00038	50		 push	 eax
  00039	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  0003f	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00044	ff d7		 call	 edi
  00046	8b c8		 mov	 ecx, eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0004e	8b 8e a4 09 00
	00		 mov	 ecx, DWORD PTR [esi+2468]
  00054	03 4d fc	 add	 ecx, DWORD PTR _value$526775[ebp]
  00057	3b c8		 cmp	 ecx, eax
  00059	73 16		 jae	 SHORT $LN6@ProcessSta

; 332  : 			{
; 333  : 				m_BuffState = BS_DELAY;

  0005b	89 9e 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], ebx

; 334  : 				m_dwCheckFireTime = FRAMEGETTIME();

  00061	ff d7		 call	 edi
  00063	8b c8		 mov	 ecx, eax
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0006b	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax
$LN6@ProcessSta:

; 335  : 			}
; 336  : 
; 337  : 			if( m_dwDelayEffectID != -1 )

  00071	8b 86 b8 09 00
	00		 mov	 eax, DWORD PTR [esi+2488]
  00077	83 f8 ff	 cmp	 eax, -1
  0007a	74 4f		 je	 SHORT $LN8@ProcessSta

; 338  : 			{
; 339  : 				ioEffect *pEffect = g_EffectFactory.GetEffect( m_dwDelayEffectID );

  0007c	50		 push	 eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00083	8b c8		 mov	 ecx, eax
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetEffect@ioEffectFactory@@QAEPAVioEffect@@K@Z

; 340  : 				if( pEffect )

  0008b	3b c3		 cmp	 eax, ebx
  0008d	74 3c		 je	 SHORT $LN8@ProcessSta

; 341  : 				{
; 342  : 					pEffect->EndEffectForce();

  0008f	8b c8		 mov	 ecx, eax
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EndEffectForce@ioEffect@@QAEXXZ

; 343  : 					m_dwDelayEffectID = -1;

  00097	83 8e b8 09 00
	00 ff		 or	 DWORD PTR [esi+2488], -1

; 344  : 				}
; 345  : 			}
; 346  : 		}
; 347  : 		break;

  0009e	eb 2b		 jmp	 SHORT $LN8@ProcessSta
$LN10@ProcessSta:

; 318  : 	{
; 319  : 	case BS_DELAY:
; 320  : 		{
; 321  : 			if( m_dwDelayEffectID == -1 )

  000a0	83 be b8 09 00
	00 ff		 cmp	 DWORD PTR [esi+2488], -1
  000a7	75 22		 jne	 SHORT $LN8@ProcessSta

; 322  : 			{
; 323  : 				ioEffect *pEffect = pOwner->AttachEffect( m_szDelayEffect );			

  000a9	6a 01		 push	 1
  000ab	53		 push	 ebx
  000ac	8d 86 a8 09 00
	00		 lea	 eax, DWORD PTR [esi+2472]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 324  : 				if( pEffect )

  000b8	3b c3		 cmp	 eax, ebx
  000ba	74 0f		 je	 SHORT $LN8@ProcessSta

; 325  : 					m_dwDelayEffectID = pEffect->GetUniqueID();

  000bc	8d 48 14	 lea	 ecx, DWORD PTR [eax+20]
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetUniqueID@ioMovableObject@@QBEKXZ
  000c5	89 86 b8 09 00
	00		 mov	 DWORD PTR [esi+2488], eax
$LN8@ProcessSta:

; 348  : 	}
; 349  : 
; 350  : 	if( m_dwCheckGavityTime > 0 )

  000cb	39 9e cc 09 00
	00		 cmp	 DWORD PTR [esi+2508], ebx
  000d1	76 59		 jbe	 SHORT $LN26@ProcessSta

; 351  : 	{
; 352  : 		if( m_dwCheckGavityTime + m_dwGravityTime > FRAMEGETTIME() )

  000d3	8d 45 fc	 lea	 eax, DWORD PTR _value$526780[ebp]
  000d6	50		 push	 eax
  000d7	8d 8e d0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2512]
  000dd	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000e2	ff d7		 call	 edi
  000e4	8b c8		 mov	 ecx, eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000ec	8b 8e cc 09 00
	00		 mov	 ecx, DWORD PTR [esi+2508]
  000f2	03 4d fc	 add	 ecx, DWORD PTR _value$526780[ebp]
  000f5	3b c8		 cmp	 ecx, eax
  000f7	76 2d		 jbe	 SHORT $LN2@ProcessSta

; 353  : 		{
; 354  : 			pOwner->SetGravityAmt( m_fGravityRate );

  000f9	8d 45 fc	 lea	 eax, DWORD PTR _value$526785[ebp]
  000fc	50		 push	 eax
  000fd	8d 8e 00 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2560]
  00103	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00108	8b 4d f8	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0010b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$526785[ebp]
  00110	8d 45 fc	 lea	 eax, DWORD PTR _value$526795[ebp]
  00113	50		 push	 eax
  00114	81 c1 e8 0b 00
	00		 add	 ecx, 3048		; 00000be8H
  0011a	f3 0f 11 45 fc	 movss	 DWORD PTR _value$526795[ebp], xmm0
  0011f	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 355  : 		}
; 356  : 		else

  00124	eb 06		 jmp	 SHORT $LN26@ProcessSta
$LN2@ProcessSta:

; 357  : 		{
; 358  : 			m_dwCheckGavityTime = 0;

  00126	89 9e cc 09 00
	00		 mov	 DWORD PTR [esi+2508], ebx
$LN26@ProcessSta:
  0012c	5f		 pop	 edi
$LN1@ProcessSta:
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx

; 359  : 		}
; 360  : 	}
; 361  : }

  0012f	c9		 leave
  00130	c3		 ret	 0
?ProcessState@ioCreateWeaponCountBuff@@IAEXXZ ENDP	; ioCreateWeaponCountBuff::ProcessState
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
PUBLIC	?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ	; ioCreateWeaponCountBuff::CreateWeapon
EXTRN	__imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@PAVioSceneNode@@K@Z:PROC
EXTRN	__imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?DummyExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUWeaponInfo@@ABUD3DXVECTOR3@@K_NABVioHashString@@32@Z:PROC ; ioBaseChar::DummyExplicit
EXTRN	?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ:PROC ; ioBaseChar::IncreaseWeaponIndexBase
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z:PROC ; ioBaseChar::GetBaseChar
EXTRN	__chkstk:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ$0
__ehfuncinfo$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponcountbuff.cpp
xdata$x	ENDS
;	COMDAT ?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ
_TEXT	SEGMENT
_pCreator$ = -32832					; size = 4
tv286 = -32828						; size = 4
_value$526813 = -32828					; size = 1
tv295 = -32824						; size = 4
tv290 = -32824						; size = 4
_dwWeaponIndex$ = -32824				; size = 4
_kPacket$524023 = -32820				; size = 32792
_vPos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ PROC	; ioCreateWeaponCountBuff::CreateWeapon, COMDAT
; _this$ = ecx

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 34 80 00 00	 mov	 eax, 32820		; 00008034H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f1		 mov	 esi, ecx

; 365  : 	ioBaseChar *pOwner = GetOwner();

  00034	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00039	8b f8		 mov	 edi, eax

; 366  : 	if( !pOwner )

  0003b	85 ff		 test	 edi, edi
  0003d	0f 84 9f 01 00
	00		 je	 $LN1@CreateWeap

; 367  : 		return;
; 368  : 
; 369  : 	ioBaseChar *pCreator = pOwner->GetBaseChar( m_CreateChar );

  00043	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  00049	50		 push	 eax
  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar
  00051	89 85 c0 7f ff
	ff		 mov	 DWORD PTR _pCreator$[ebp], eax

; 370  : 	if( !pCreator )

  00057	85 c0		 test	 eax, eax
  00059	0f 84 83 01 00
	00		 je	 $LN1@CreateWeap

; 371  : 		return;
; 372  : 
; 373  : 	D3DXVECTOR3 vPos = pOwner->GetMidPositionByRate();

  0005f	b8 05 00 00 00	 mov	 eax, 5
  00064	8b c8		 mov	 ecx, eax
  00066	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0006b	89 8d c8 7f ff
	ff		 mov	 DWORD PTR tv295[ebp], ecx
  00071	db 85 c8 7f ff
	ff		 fild	 DWORD PTR tv295[ebp]
  00077	85 c9		 test	 ecx, ecx
  00079	79 06		 jns	 SHORT $LN24@CreateWeap
  0007b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN24@CreateWeap:
  00081	89 85 c8 7f ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00087	db 85 c8 7f ff
	ff		 fild	 DWORD PTR tv290[ebp]
  0008d	85 c0		 test	 eax, eax
  0008f	79 06		 jns	 SHORT $LN25@CreateWeap
  00091	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN25@CreateWeap:
  00097	de f9		 fdivp	 ST(1), ST(0)
  00099	51		 push	 ecx
  0009a	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  0009d	8b cf		 mov	 ecx, edi
  0009f	d9 9d c4 7f ff
	ff		 fstp	 DWORD PTR tv286[ebp]
  000a5	d9 85 c4 7f ff
	ff		 fld	 DWORD PTR tv286[ebp]
  000ab	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 374  : 	DWORD dwWeaponIndex = pCreator->IncreaseWeaponIndexBase();

  000b4	8b 8d c0 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  000ba	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  000bf	89 85 c8 7f ff
	ff		 mov	 DWORD PTR _dwWeaponIndex$[ebp], eax

; 375  : 	pCreator->DummyExplicit( m_WeaponInfo,
; 376  : 							 vPos,
; 377  : 							 dwWeaponIndex,
; 378  : 							 false,
; 379  : 							 pOwner->GetCharName(),
; 380  : 							 m_Name,
; 381  : 							 m_bUseCallAttWeaponCol );

  000c5	8d 85 c4 7f ff
	ff		 lea	 eax, DWORD PTR _value$526813[ebp]
  000cb	50		 push	 eax
  000cc	8d 8e 7c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1148]
  000d2	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  000d7	ff b5 c4 7f ff
	ff		 push	 DWORD PTR _value$526813[ebp]
  000dd	8b 8d c0 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  000e3	8d 9e 34 02 00
	00		 lea	 ebx, DWORD PTR [esi+564]
  000e9	53		 push	 ebx
  000ea	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  000f0	50		 push	 eax
  000f1	6a 00		 push	 0
  000f3	ff b5 c8 7f ff
	ff		 push	 DWORD PTR _dwWeaponIndex$[ebp]
  000f9	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  000fc	50		 push	 eax
  000fd	8d 86 30 0a 00
	00		 lea	 eax, DWORD PTR [esi+2608]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?DummyExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUWeaponInfo@@ABUD3DXVECTOR3@@K_NABVioHashString@@32@Z ; ioBaseChar::DummyExplicit

; 382  : 
; 383  : 	pOwner->AttachEffect( m_szFireEffect );

  00109	6a 01		 push	 1
  0010b	6a 00		 push	 0
  0010d	8d 86 bc 09 00
	00		 lea	 eax, DWORD PTR [esi+2492]
  00113	50		 push	 eax
  00114	8b cf		 mov	 ecx, edi
  00116	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 384  : 
; 385  : 	m_dwCheckGavityTime = FRAMEGETTIME();

  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00121	8b c8		 mov	 ecx, eax
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00129	89 86 cc 09 00
	00		 mov	 DWORD PTR [esi+2508], eax

; 386  : 
; 387  : 	if( pOwner->IsNeedSendNetwork() )

  0012f	8b 07		 mov	 eax, DWORD PTR [edi]
  00131	8b cf		 mov	 ecx, edi
  00133	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00139	84 c0		 test	 al, al
  0013b	74 73		 je	 SHORT $LN2@CreateWeap

; 388  : 	{
; 389  : 		SP2Packet kPacket( CUPK_APPLY_EXTRA_BUFF_INFO );

  0013d	68 45 42 00 00	 push	 16965			; 00004245H
  00142	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$524023[ebp]
  00148	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  0014d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 390  : 		kPacket << pOwner->GetCharName();

  00151	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  00157	50		 push	 eax
  00158	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$524023[ebp]
  0015e	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 391  : 		kPacket << GetName();

  00163	53		 push	 ebx
  00164	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$524023[ebp]
  0016a	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 392  : 		kPacket << (int)m_BuffState;

  0016f	ff b6 6c 09 00
	00		 push	 DWORD PTR [esi+2412]
  00175	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$524023[ebp]
  0017b	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 393  : 		//추가
; 394  : 		kPacket << m_nCurWeaponCnt;

  00180	ff b6 70 0a 00
	00		 push	 DWORD PTR [esi+2672]
  00186	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$524023[ebp]
  0018c	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 395  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  00191	8d 85 cc 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$524023[ebp]
  00197	6a 00		 push	 0
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 396  : 	}

  0019f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a3	59		 pop	 ecx
  001a4	59		 pop	 ecx
  001a5	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$524023[ebp]
  001ab	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN2@CreateWeap:

; 397  : 
; 398  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  001b0	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 399  : 	if( pGrp &&!m_szFireSound.IsEmpty() )

  001b3	85 ff		 test	 edi, edi
  001b5	74 2b		 je	 SHORT $LN1@CreateWeap
  001b7	81 c6 58 0a 00
	00		 add	 esi, 2648		; 00000a58H
  001bd	8b ce		 mov	 ecx, esi
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  001c5	84 c0		 test	 al, al
  001c7	75 19		 jne	 SHORT $LN1@CreateWeap

; 400  : 	{
; 401  : 		g_SoundMgr.PlaySound( m_szFireSound, pGrp->GetParentSceneNode() );

  001c9	8b 07		 mov	 eax, DWORD PTR [edi]
  001cb	6a 04		 push	 4
  001cd	8b cf		 mov	 ecx, edi
  001cf	ff 50 34	 call	 DWORD PTR [eax+52]
  001d2	50		 push	 eax
  001d3	56		 push	 esi
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  001da	8b c8		 mov	 ecx, eax
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@PAVioSceneNode@@K@Z
$LN1@CreateWeap:

; 402  : 	}
; 403  : }

  001e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ec	59		 pop	 ecx
  001ed	5f		 pop	 edi
  001ee	5e		 pop	 esi
  001ef	5b		 pop	 ebx
  001f0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fa	c9		 leave
  001fb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ$0:
  00000	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$524023[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a bc 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32836]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ ENDP	; ioCreateWeaponCountBuff::CreateWeapon
PUBLIC	_rkPacket$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogsp
;	COMDAT ?ApplyExtraBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$GSCopy$ = -32					; size = 4
tv260 = -28						; size = 4
tv256 = -28						; size = 4
_dwWeaponIndex$ = -28					; size = 4
tv251 = -24						; size = 4
_value$526853 = -24					; size = 1
_iState$ = -20						; size = 4
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_rkPacket$ = 8						; size = 4
?ApplyExtraBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioCreateWeaponCountBuff::ApplyExtraBuffInfo, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _rkPacket$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f1		 mov	 esi, ecx

; 413  : 		return;
; 414  : 
; 415  : 	D3DXVECTOR3 vPos = pOwner->GetMidPositionByRate();

  00017	89 45 e0	 mov	 DWORD PTR _rkPacket$GSCopy$[ebp], eax
  0001a	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  0001f	8b f8		 mov	 edi, eax
  00021	85 ff		 test	 edi, edi
  00023	0f 84 2c 01 00
	00		 je	 $LN1@ApplyExtra

; 407  : 	ioBaseChar *pOwner = GetOwner();
; 408  : 	if( !pOwner )
; 409  : 		return;
; 410  : 
; 411  : 	ioBaseChar *pCreator = pOwner->GetBaseChar( m_CreateChar );

  00029	53		 push	 ebx
  0002a	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  00030	50		 push	 eax
  00031	8b cf		 mov	 ecx, edi
  00033	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar
  00038	8b d8		 mov	 ebx, eax

; 412  : 	if( !pCreator )

  0003a	85 db		 test	 ebx, ebx
  0003c	0f 84 12 01 00
	00		 je	 $LN16@ApplyExtra

; 413  : 		return;
; 414  : 
; 415  : 	D3DXVECTOR3 vPos = pOwner->GetMidPositionByRate();

  00042	b8 05 00 00 00	 mov	 eax, 5
  00047	8b c8		 mov	 ecx, eax
  00049	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0004e	89 4d e4	 mov	 DWORD PTR tv260[ebp], ecx
  00051	db 45 e4	 fild	 DWORD PTR tv260[ebp]
  00054	85 c9		 test	 ecx, ecx
  00056	79 06		 jns	 SHORT $LN17@ApplyExtra
  00058	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN17@ApplyExtra:
  0005e	89 45 e4	 mov	 DWORD PTR tv256[ebp], eax
  00061	db 45 e4	 fild	 DWORD PTR tv256[ebp]
  00064	85 c0		 test	 eax, eax
  00066	79 06		 jns	 SHORT $LN18@ApplyExtra
  00068	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN18@ApplyExtra:
  0006e	de f9		 fdivp	 ST(1), ST(0)
  00070	51		 push	 ecx
  00071	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00074	8b cf		 mov	 ecx, edi
  00076	d9 5d e8	 fstp	 DWORD PTR tv251[ebp]
  00079	d9 45 e8	 fld	 DWORD PTR tv251[ebp]
  0007c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 416  : 	DWORD dwWeaponIndex = pCreator->IncreaseWeaponIndexBase();

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  0008c	89 45 e4	 mov	 DWORD PTR _dwWeaponIndex$[ebp], eax

; 417  : 	pCreator->DummyExplicit( m_WeaponInfo,
; 418  : 							 vPos,
; 419  : 							 dwWeaponIndex,
; 420  : 							 false,
; 421  : 							 pOwner->GetCharName(),
; 422  : 							 m_Name,
; 423  : 							 m_bUseCallAttWeaponCol );

  0008f	8d 45 e8	 lea	 eax, DWORD PTR _value$526853[ebp]
  00092	50		 push	 eax
  00093	8d 8e 7c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1148]
  00099	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  0009e	ff 75 e8	 push	 DWORD PTR _value$526853[ebp]
  000a1	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  000a7	50		 push	 eax
  000a8	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  000ae	50		 push	 eax
  000af	6a 00		 push	 0
  000b1	ff 75 e4	 push	 DWORD PTR _dwWeaponIndex$[ebp]
  000b4	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  000b7	50		 push	 eax
  000b8	8d 86 30 0a 00
	00		 lea	 eax, DWORD PTR [esi+2608]
  000be	50		 push	 eax
  000bf	8b cb		 mov	 ecx, ebx
  000c1	e8 00 00 00 00	 call	 ?DummyExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUWeaponInfo@@ABUD3DXVECTOR3@@K_NABVioHashString@@32@Z ; ioBaseChar::DummyExplicit

; 424  : 
; 425  : 	pOwner->AttachEffect( m_szFireEffect );

  000c6	6a 01		 push	 1
  000c8	6a 00		 push	 0
  000ca	8d 86 bc 09 00
	00		 lea	 eax, DWORD PTR [esi+2492]
  000d0	50		 push	 eax
  000d1	8b cf		 mov	 ecx, edi
  000d3	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 426  : 
; 427  : 	m_dwCheckGavityTime = FRAMEGETTIME();

  000d8	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000de	ff d3		 call	 ebx
  000e0	8b c8		 mov	 ecx, eax
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 428  : 
; 429  : 	int iState;
; 430  : 	rkPacket >> iState;

  000e8	8b 4d e0	 mov	 ecx, DWORD PTR _rkPacket$GSCopy$[ebp]
  000eb	89 86 cc 09 00
	00		 mov	 DWORD PTR [esi+2508], eax
  000f1	8d 45 ec	 lea	 eax, DWORD PTR _iState$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 431  : 	m_BuffState = (BuffState)iState;

  000fa	8b 45 ec	 mov	 eax, DWORD PTR _iState$[ebp]

; 432  : 
; 433  : 	//추가
; 434  : 	rkPacket >> m_nCurWeaponCnt;

  000fd	8b 4d e0	 mov	 ecx, DWORD PTR _rkPacket$GSCopy$[ebp]
  00100	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  00106	8d 86 70 0a 00
	00		 lea	 eax, DWORD PTR [esi+2672]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 435  : 
; 436  : 	m_dwCheckFireTime = FRAMEGETTIME();

  00112	ff d3		 call	 ebx
  00114	8b c8		 mov	 ecx, eax
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0011c	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax

; 437  : 
; 438  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00122	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 439  : 	if( pGrp &&!m_szFireSound.IsEmpty() )

  00125	85 ff		 test	 edi, edi
  00127	74 2b		 je	 SHORT $LN16@ApplyExtra
  00129	81 c6 58 0a 00
	00		 add	 esi, 2648		; 00000a58H
  0012f	8b ce		 mov	 ecx, esi
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00137	84 c0		 test	 al, al
  00139	75 19		 jne	 SHORT $LN16@ApplyExtra

; 440  : 	{
; 441  : 		g_SoundMgr.PlaySound( m_szFireSound, pGrp->GetParentSceneNode() );

  0013b	8b 07		 mov	 eax, DWORD PTR [edi]
  0013d	6a 04		 push	 4
  0013f	8b cf		 mov	 ecx, edi
  00141	ff 50 34	 call	 DWORD PTR [eax+52]
  00144	50		 push	 eax
  00145	56		 push	 esi
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  0014c	8b c8		 mov	 ecx, eax
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@PAVioSceneNode@@K@Z
$LN16@ApplyExtra:
  00154	5b		 pop	 ebx
$LN1@ApplyExtra:

; 442  : 	}
; 443  : }

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	5f		 pop	 edi
  00159	33 cd		 xor	 ecx, ebp
  0015b	5e		 pop	 esi
  0015c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00161	c9		 leave
  00162	c2 04 00	 ret	 4
?ApplyExtraBuffInfo@ioCreateWeaponCountBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioCreateWeaponCountBuff::ApplyExtraBuffInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadWeaponCreateProperty@ioCreateWeaponCountBuff@@QAEXAAVioINILoader@@@Z ; ioCreateWeaponCountBuff::LoadWeaponCreateProperty
; Function compile flags: /Ogsp
;	COMDAT ?LoadWeaponCreateProperty@ioCreateWeaponCountBuff@@QAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$526882 = -32					; size = 23
__k$527007 = -28					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadWeaponCreateProperty@ioCreateWeaponCountBuff@@QAEXAAVioINILoader@@@Z PROC ; ioCreateWeaponCountBuff::LoadWeaponCreateProperty, COMDAT
; _this$ = ecx

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 448  : 	m_CreateWeaponType = (CreateWeaponByType)rkLoader.LoadInt_e( "set_weapon_create_type", CWBT_NORMAL );

  00016	6a 05		 push	 5
  00018	8b f9		 mov	 edi, ecx
  0001a	c7 45 e0 9e 89
	9f b5		 mov	 DWORD PTR __k$526882[ebp], -1247835746 ; b59f899eH
  00021	c7 45 e4 9a 89
	8a 9a		 mov	 DWORD PTR __k$526882[ebp+4], -1702196838 ; 9a8a899aH
  00028	c7 45 e8 82 82
	b4 89		 mov	 DWORD PTR __k$526882[ebp+8], -1984658814 ; 89b48282H
  0002f	c7 45 ec 9f 89
	8a 9e		 mov	 DWORD PTR __k$526882[ebp+12], -1635087969 ; 9e8a899fH
  00036	c7 45 f0 88 b3
	9f 93		 mov	 DWORD PTR __k$526882[ebp+16], -1818250360 ; 939fb388H
  0003d	66 c7 45 f4 9d
	89		 mov	 WORD PTR __k$526882[ebp+20], 35229 ; 0000899dH
  00043	8d 45 e0	 lea	 eax, DWORD PTR __k$526882[ebp]
  00046	c6 45 f6 00	 mov	 BYTE PTR __k$526882[ebp+22], 0
  0004a	59		 pop	 ecx
$LL106@LoadWeapon:
  0004b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00051	83 c0 04	 add	 eax, 4
  00054	49		 dec	 ecx
  00055	75 f4		 jne	 SHORT $LL106@LoadWeapon
  00057	6a 14		 push	 20			; 00000014H
  00059	5e		 pop	 esi
$LL103@LoadWeapon:
  0005a	8b c6		 mov	 eax, esi
  0005c	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00061	79 05		 jns	 SHORT $LN223@LoadWeapon
  00063	48		 dec	 eax
  00064	83 c8 fc	 or	 eax, -4			; fffffffcH
  00067	40		 inc	 eax
$LN223@LoadWeapon:
  00068	b1 ed		 mov	 cl, -19			; ffffffedH
  0006a	2a c8		 sub	 cl, al
  0006c	30 4c 35 e0	 xor	 BYTE PTR __k$526882[ebp+esi], cl
  00070	46		 inc	 esi
  00071	83 fe 16	 cmp	 esi, 22			; 00000016H
  00074	7c e4		 jl	 SHORT $LL103@LoadWeapon
  00076	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0007c	6a 00		 push	 0
  0007e	8d 45 e0	 lea	 eax, DWORD PTR __k$526882[ebp]
  00081	50		 push	 eax
  00082	8b cb		 mov	 ecx, ebx
  00084	ff d6		 call	 esi
  00086	6a 04		 push	 4
  00088	89 87 68 0a 00
	00		 mov	 DWORD PTR [edi+2664], eax

; 449  : 	m_nTotalWeaponCnt = rkLoader.LoadInt_e( "total_weapon_count", 0 );

  0008e	c7 45 e4 99 83
	9f 8b		 mov	 DWORD PTR __k$527007[ebp], -1952480359 ; 8b9f8399H
  00095	c7 45 e8 81 b3
	9c 8f		 mov	 DWORD PTR __k$527007[ebp+4], -1885555839 ; 8f9cb381H
  0009c	c7 45 ec 8c 9c
	84 84		 mov	 DWORD PTR __k$527007[ebp+8], -2071683956 ; 84849c8cH
  000a3	c7 45 f0 b2 8f
	84 9f		 mov	 DWORD PTR __k$527007[ebp+12], -1618702414 ; 9f848fb2H
  000aa	66 c7 45 f4 83
	98		 mov	 WORD PTR __k$527007[ebp+16], 39043 ; 00009883H
  000b0	8d 45 e4	 lea	 eax, DWORD PTR __k$527007[ebp]
  000b3	c6 45 f6 00	 mov	 BYTE PTR __k$527007[ebp+18], 0
  000b7	59		 pop	 ecx
$LL212@LoadWeapon:
  000b8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000be	83 c0 04	 add	 eax, 4
  000c1	49		 dec	 ecx
  000c2	75 f4		 jne	 SHORT $LL212@LoadWeapon
  000c4	6a 10		 push	 16			; 00000010H
  000c6	58		 pop	 eax
$LL209@LoadWeapon:
  000c7	8b c8		 mov	 ecx, eax
  000c9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000cf	79 05		 jns	 SHORT $LN224@LoadWeapon
  000d1	49		 dec	 ecx
  000d2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d5	41		 inc	 ecx
$LN224@LoadWeapon:
  000d6	b2 ed		 mov	 dl, -19			; ffffffedH
  000d8	2a d1		 sub	 dl, cl
  000da	30 54 05 e4	 xor	 BYTE PTR __k$527007[ebp+eax], dl
  000de	40		 inc	 eax
  000df	83 f8 12	 cmp	 eax, 18			; 00000012H
  000e2	7c e3		 jl	 SHORT $LL209@LoadWeapon
  000e4	6a 00		 push	 0
  000e6	8d 45 e4	 lea	 eax, DWORD PTR __k$527007[ebp]
  000e9	50		 push	 eax
  000ea	8b cb		 mov	 ecx, ebx
  000ec	ff d6		 call	 esi

; 450  : }

  000ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f1	89 87 6c 0a 00
	00		 mov	 DWORD PTR [edi+2668], eax
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	33 cd		 xor	 ecx, ebp
  000fb	5b		 pop	 ebx
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	c9		 leave
  00102	c2 04 00	 ret	 4
?LoadWeaponCreateProperty@ioCreateWeaponCountBuff@@QAEXAAVioINILoader@@@Z ENDP ; ioCreateWeaponCountBuff::LoadWeaponCreateProperty
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@K@@QAE@ABV0@@Z			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@K@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@K@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$527139 = 8					; size = 4
_value$527134 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@K@@QAE@ABV0@@Z PROC			; CEncrypt<unsigned long>::CEncrypt<unsigned long>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@K@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@K@@AAEXXZ ; CEncrypt<unsigned long>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$527134[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00036	8b 45 08	 mov	 eax, DWORD PTR _value$527134[ebp]
  00039	89 45 08	 mov	 DWORD PTR _value$527139[ebp], eax
  0003c	8d 45 08	 lea	 eax, DWORD PTR _value$527139[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 124  : 	}

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@K@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@K@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@K@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@K@@QAE@ABV0@@Z ENDP			; CEncrypt<unsigned long>::CEncrypt<unsigned long>
PUBLIC	??0?$CEncrypt@M@@QAE@ABV0@@Z			; CEncrypt<float>::CEncrypt<float>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@M@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@M@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@M@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@M@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@M@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$527158 = 8					; size = 4
_value$527153 = 8					; size = 4
_inValue$ = 8						; size = 4
??0?$CEncrypt@M@@QAE@ABV0@@Z PROC			; CEncrypt<float>::CEncrypt<float>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@M@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@M@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@M@@AAEXXZ ; CEncrypt<float>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 08	 lea	 eax, DWORD PTR _value$527153[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$527153[ebp]
  0003b	8d 45 08	 lea	 eax, DWORD PTR _value$527158[ebp]
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	f3 0f 11 45 08	 movss	 DWORD PTR _value$527158[ebp], xmm0
  00046	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 124  : 	}

  0004b	8b c6		 mov	 eax, esi
  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@M@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@M@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@M@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@M@@QAE@ABV0@@Z ENDP			; CEncrypt<float>::CEncrypt<float>
PUBLIC	??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z		; ioCreateWeaponCountBuff::ioCreateWeaponCountBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponcountbuff.cpp
xdata$x	SEGMENT
__ehfuncinfo$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z PROC		; ioCreateWeaponCountBuff::ioCreateWeaponCountBuff, COMDAT
; _this$ = ecx

; 28   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCreateWeaponCountBuff@@6B@
  00024	8a 87 70 09 00
	00		 mov	 al, BYTE PTR [edi+2416]
  0002a	88 86 70 09 00
	00		 mov	 BYTE PTR [esi+2416], al
  00030	8d 87 74 09 00
	00		 lea	 eax, DWORD PTR [edi+2420]
  00036	50		 push	 eax
  00037	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  0003d	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00042	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00048	8d 87 a8 09 00
	00		 lea	 eax, DWORD PTR [edi+2472]
  0004e	50		 push	 eax
  0004f	8d 8e a8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2472]
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00059	ff d3		 call	 ebx
  0005b	8d 87 bc 09 00
	00		 lea	 eax, DWORD PTR [edi+2492]
  00061	50		 push	 eax
  00062	8d 8e bc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2492]
  00068	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006c	ff d3		 call	 ebx
  0006e	8d 87 d0 09 00
	00		 lea	 eax, DWORD PTR [edi+2512]
  00074	50		 push	 eax
  00075	8d 8e d0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2512]
  0007b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007f	e8 00 00 00 00	 call	 ??0?$CEncrypt@K@@QAE@ABV0@@Z ; CEncrypt<unsigned long>::CEncrypt<unsigned long>
  00084	8d 87 00 0a 00
	00		 lea	 eax, DWORD PTR [edi+2560]
  0008a	50		 push	 eax
  0008b	8d 8e 00 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2560]
  00091	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00095	e8 00 00 00 00	 call	 ??0?$CEncrypt@M@@QAE@ABV0@@Z ; CEncrypt<float>::CEncrypt<float>
  0009a	8d 87 30 0a 00
	00		 lea	 eax, DWORD PTR [edi+2608]
  000a0	50		 push	 eax
  000a1	8d 8e 30 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2608]
  000a7	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000ab	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
  000b0	8d 87 58 0a 00
	00		 lea	 eax, DWORD PTR [edi+2648]
  000b6	50		 push	 eax
  000b7	8d 8e 58 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2648]
  000bd	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000c1	ff d3		 call	 ebx
  000c3	8b 87 68 0a 00
	00		 mov	 eax, DWORD PTR [edi+2664]
  000c9	89 86 68 0a 00
	00		 mov	 DWORD PTR [esi+2664], eax
  000cf	8b 87 6c 0a 00
	00		 mov	 eax, DWORD PTR [edi+2668]

; 29   : 	m_dwDelayEffectID = -1;

  000d5	83 8e b8 09 00
	00 ff		 or	 DWORD PTR [esi+2488], -1
  000dc	89 86 6c 0a 00
	00		 mov	 DWORD PTR [esi+2668], eax

; 30   : 	m_dwCheckFireTime = 0;

  000e2	33 c0		 xor	 eax, eax
  000e4	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax

; 31   : 	m_dwCheckGavityTime = 0;

  000ea	89 86 cc 09 00
	00		 mov	 DWORD PTR [esi+2508], eax

; 32   : 
; 33   : 	//현재 무기 생성한 갯수
; 34   : 	m_nCurWeaponCnt = 0;

  000f0	89 86 70 0a 00
	00		 mov	 DWORD PTR [esi+2672], eax

; 35   : }

  000f6	8b c6		 mov	 eax, esi
  000f8	e8 00 00 00 00	 call	 __EH_epilog3
  000fd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 74 09 00
	00		 add	 ecx, 2420		; 00000974H
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 a8 09 00
	00		 add	 ecx, 2472		; 000009a8H
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 bc 09 00
	00		 add	 ecx, 2492		; 000009bcH
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$4:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 d0 09 00
	00		 add	 ecx, 2512		; 000009d0H
  0003d	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@K@@UAE@XZ	; CEncrypt<unsigned long>::~CEncrypt<unsigned long>
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$5:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 00 0a 00
	00		 add	 ecx, 2560		; 00000a00H
  0004b	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@M@@UAE@XZ	; CEncrypt<float>::~CEncrypt<float>
__unwindfunclet$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z$6:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 30 0a 00
	00		 add	 ecx, 2608		; 00000a30H
  00059	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z:
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00068	33 c8		 xor	 ecx, eax
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z
  00074	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z ENDP		; ioCreateWeaponCountBuff::ioCreateWeaponCountBuff
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocreateweaponcountbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioCreateWeaponCountBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_value$528574 = -300					; size = 4
_value$528444 = -300					; size = 4
_value$527439 = -300					; size = 4
_rkLoader$GSCopy$ = -296				; size = 4
_szBuf$ = -292						; size = 260
__k$527969 = -32					; size = 24
__k$527831 = -28					; size = 20
__k$527594 = -28					; size = 20
__k$527228 = -28					; size = 19
__k$528331 = -24					; size = 13
__k$528246 = -24					; size = 14
__k$528094 = -24					; size = 13
__k$527719 = -24					; size = 15
__k$527469 = -24					; size = 13
__k$527326 = -24					; size = 14
__k$528604 = -20					; size = 11
__k$528461 = -20					; size = 12
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioCreateWeaponCountBuff@@UAEXAAVioINILoader@@@Z PROC ; ioCreateWeaponCountBuff::LoadProperty, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 43   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 61   : 
; 62   : 	m_dwGravityTime = rkLoader.LoadInt_e( "gravity_time", 0 );

  0001c	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  00027	33 db		 xor	 ebx, ebx
  00029	6a 04		 push	 4
  0002b	c7 45 e4 89 85
	98 8b		 mov	 DWORD PTR __k$527228[ebp], -1952938615 ; 8b988589H
  00032	c7 45 e8 8f 80
	8e b5		 mov	 DWORD PTR __k$527228[ebp+4], -1248952177 ; b58e808fH
  00039	c7 45 ec 89 83
	9c 84		 mov	 DWORD PTR __k$527228[ebp+8], -2070117495 ; 849c8389H
  00040	c7 45 f0 b2 9f
	9f 8b		 mov	 DWORD PTR __k$527228[ebp+12], -1952473166 ; 8b9f9fb2H
  00047	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$527228[ebp+16], 35225 ; 00008999H
  0004d	8d 45 e4	 lea	 eax, DWORD PTR __k$527228[ebp]
  00050	88 5d f6	 mov	 BYTE PTR __k$527228[ebp+18], bl
  00053	59		 pop	 ecx
$LL106@LoadProper:

; 44   : 
; 45   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  00054	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0005a	83 c0 04	 add	 eax, 4
  0005d	49		 dec	 ecx
  0005e	75 f4		 jne	 SHORT $LL106@LoadProper
  00060	6a 10		 push	 16			; 00000010H
  00062	58		 pop	 eax
$LL103@LoadProper:
  00063	8b c8		 mov	 ecx, eax
  00065	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0006b	79 05		 jns	 SHORT $LN1329@LoadProper
  0006d	49		 dec	 ecx
  0006e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00071	41		 inc	 ecx
$LN1329@LoadProper:
  00072	b2 ed		 mov	 dl, -19			; ffffffedH
  00074	2a d1		 sub	 dl, cl
  00076	30 54 05 e4	 xor	 BYTE PTR __k$527228[ebp+eax], dl
  0007a	40		 inc	 eax
  0007b	83 f8 12	 cmp	 eax, 18			; 00000012H
  0007e	7c e3		 jl	 SHORT $LL103@LoadProper
  00080	53		 push	 ebx
  00081	8d 45 e4	 lea	 eax, DWORD PTR __k$527228[ebp]
  00084	50		 push	 eax
  00085	8b cf		 mov	 ecx, edi
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  0008d	6a 03		 push	 3
  0008f	88 86 70 09 00
	00		 mov	 BYTE PTR [esi+2416], al

; 46   : 
; 47   : 	m_dwFireGapTime = rkLoader.LoadInt_e( "fire_gap_time", 0 );

  00095	c7 45 e8 8b 85
	99 8f		 mov	 DWORD PTR __k$527326[ebp], -1885764213 ; 8f99858bH
  0009c	c7 45 ec b2 8b
	8a 9a		 mov	 DWORD PTR __k$527326[ebp+4], -1702196302 ; 9a8a8bb2H
  000a3	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$527326[ebp+8], -2021484366 ; 878298b2H
  000aa	8d 45 e8	 lea	 eax, DWORD PTR __k$527326[ebp]
  000ad	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$527326[ebp+12], 136 ; 00000088H
  000b3	59		 pop	 ecx
$LL212@LoadProper:
  000b4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000ba	83 c0 04	 add	 eax, 4
  000bd	49		 dec	 ecx
  000be	75 f4		 jne	 SHORT $LL212@LoadProper
  000c0	80 75 f4 ed	 xor	 BYTE PTR __k$527326[ebp+12], -19 ; ffffffedH
  000c4	53		 push	 ebx
  000c5	8d 45 e8	 lea	 eax, DWORD PTR __k$527326[ebp]
  000c8	8b cf		 mov	 ecx, edi
  000ca	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  000d0	50		 push	 eax
  000d1	ff d7		 call	 edi
  000d3	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _value$527439[ebp], eax
  000d9	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _value$527439[ebp]
  000df	50		 push	 eax
  000e0	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  000e6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 48   : 
; 49   : 	char szBuf[MAX_PATH] = "";

  000eb	68 03 01 00 00	 push	 259			; 00000103H
  000f0	8d 85 dd fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  000f6	53		 push	 ebx
  000f7	50		 push	 eax
  000f8	88 9d dc fe ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  000fe	e8 00 00 00 00	 call	 _memset
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
  00106	6a 03		 push	 3

; 50   : 	m_WeaponInfo.m_iWeaponIdx = rkLoader.LoadInt_e( "attack_index", NO_WEAPON_ATTRIBUTE );

  00108	c7 45 e8 8c 98
	9f 8b		 mov	 DWORD PTR __k$527469[ebp], -1952474996 ; 8b9f988cH
  0010f	c7 45 ec 8e 87
	b4 83		 mov	 DWORD PTR __k$527469[ebp+4], -2085320818 ; 83b4878eH
  00116	c7 45 f0 83 88
	8e 92		 mov	 DWORD PTR __k$527469[ebp+8], -1836152701 ; 928e8883H
  0011d	8d 45 e8	 lea	 eax, DWORD PTR __k$527469[ebp]
  00120	88 5d f4	 mov	 BYTE PTR __k$527469[ebp+12], bl
  00123	59		 pop	 ecx
$LL320@LoadProper:
  00124	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0012a	83 c0 04	 add	 eax, 4
  0012d	49		 dec	 ecx
  0012e	75 f4		 jne	 SHORT $LL320@LoadProper
  00130	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00136	53		 push	 ebx
  00137	8d 45 e8	 lea	 eax, DWORD PTR __k$527469[ebp]
  0013a	50		 push	 eax
  0013b	ff d7		 call	 edi
  0013d	6a 04		 push	 4
  0013f	89 86 30 0a 00
	00		 mov	 DWORD PTR [esi+2608], eax

; 51   : 	m_WeaponInfo.m_iResistanceIdx = rkLoader.LoadInt_e( "attack_index_resist", NO_WEAPON_ATTRIBUTE );

  00145	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$527594[ebp], -1952474996 ; 8b9f988cH
  0014c	c7 45 e8 8e 87
	b4 83		 mov	 DWORD PTR __k$527594[ebp+4], -2085320818 ; 83b4878eH
  00153	c7 45 ec 83 88
	8e 92		 mov	 DWORD PTR __k$527594[ebp+8], -1836152701 ; 928e8883H
  0015a	c7 45 f0 b2 9e
	8e 99		 mov	 DWORD PTR __k$527594[ebp+12], -1718706510 ; 998e9eb2H
  00161	8d 45 e4	 lea	 eax, DWORD PTR __k$527594[ebp]
  00164	c7 45 f4 84 9f
	9f 00		 mov	 DWORD PTR __k$527594[ebp+16], 10461060 ; 009f9f84H
  0016b	59		 pop	 ecx
$LL426@LoadProper:
  0016c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00172	83 c0 04	 add	 eax, 4
  00175	49		 dec	 ecx
  00176	75 f4		 jne	 SHORT $LL426@LoadProper
  00178	6a 10		 push	 16			; 00000010H
  0017a	58		 pop	 eax
$LL423@LoadProper:
  0017b	8b c8		 mov	 ecx, eax
  0017d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00183	79 05		 jns	 SHORT $LN1330@LoadProper
  00185	49		 dec	 ecx
  00186	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00189	41		 inc	 ecx
$LN1330@LoadProper:
  0018a	b2 ed		 mov	 dl, -19			; ffffffedH
  0018c	2a d1		 sub	 dl, cl
  0018e	30 54 05 e4	 xor	 BYTE PTR __k$527594[ebp+eax], dl
  00192	40		 inc	 eax
  00193	83 f8 13	 cmp	 eax, 19			; 00000013H
  00196	7c e3		 jl	 SHORT $LL423@LoadProper
  00198	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0019e	53		 push	 ebx
  0019f	8d 45 e4	 lea	 eax, DWORD PTR __k$527594[ebp]
  001a2	50		 push	 eax
  001a3	ff d7		 call	 edi
  001a5	6a 03		 push	 3
  001a7	89 86 34 0a 00
	00		 mov	 DWORD PTR [esi+2612], eax

; 52   : 	rkLoader.LoadString_e( "attack_wounded", "", szBuf, MAX_PATH );

  001ad	c7 45 e8 8c 98
	9f 8b		 mov	 DWORD PTR __k$527719[ebp], -1952474996 ; 8b9f988cH
  001b4	c7 45 ec 8e 87
	b4 9d		 mov	 DWORD PTR __k$527719[ebp+4], -1649113202 ; 9db4878eH
  001bb	c7 45 f0 82 99
	85 8e		 mov	 DWORD PTR __k$527719[ebp+8], -1903847038 ; 8e859982H
  001c2	66 c7 45 f4 88
	88		 mov	 WORD PTR __k$527719[ebp+12], 34952 ; 00008888H
  001c8	8d 45 e8	 lea	 eax, DWORD PTR __k$527719[ebp]
  001cb	88 5d f6	 mov	 BYTE PTR __k$527719[ebp+14], bl
  001ce	59		 pop	 ecx
$LL532@LoadProper:
  001cf	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d5	83 c0 04	 add	 eax, 4
  001d8	49		 dec	 ecx
  001d9	75 f4		 jne	 SHORT $LL532@LoadProper
  001db	6a 0c		 push	 12			; 0000000cH
  001dd	58		 pop	 eax
$LL529@LoadProper:
  001de	8b c8		 mov	 ecx, eax
  001e0	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001e6	79 05		 jns	 SHORT $LN1331@LoadProper
  001e8	49		 dec	 ecx
  001e9	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001ec	41		 inc	 ecx
$LN1331@LoadProper:
  001ed	b2 ed		 mov	 dl, -19			; ffffffedH
  001ef	2a d1		 sub	 dl, cl
  001f1	30 54 05 e8	 xor	 BYTE PTR __k$527719[ebp+eax], dl
  001f5	40		 inc	 eax
  001f6	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001f9	7c e3		 jl	 SHORT $LL529@LoadProper
  001fb	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00201	68 04 01 00 00	 push	 260			; 00000104H
  00206	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0020c	50		 push	 eax
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00212	8d 45 e8	 lea	 eax, DWORD PTR __k$527719[ebp]
  00215	50		 push	 eax
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 53   : 	m_WeaponInfo.m_WoundedAnimation = szBuf;

  0021c	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00222	50		 push	 eax
  00223	8d 8e 38 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2616]
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0022f	6a 04		 push	 4

; 54   : 	m_WeaponInfo.m_dwWoundedDuration = rkLoader.LoadInt_e( "attack_wounded_time", 0 );

  00231	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$527831[ebp], -1952474996 ; 8b9f988cH
  00238	c7 45 e8 8e 87
	b4 9d		 mov	 DWORD PTR __k$527831[ebp+4], -1649113202 ; 9db4878eH
  0023f	c7 45 ec 82 99
	85 8e		 mov	 DWORD PTR __k$527831[ebp+8], -1903847038 ; 8e859982H
  00246	c7 45 f0 88 88
	b4 9e		 mov	 DWORD PTR __k$527831[ebp+12], -1632335736 ; 9eb48888H
  0024d	8d 45 e4	 lea	 eax, DWORD PTR __k$527831[ebp]
  00250	c7 45 f4 84 81
	8e 00		 mov	 DWORD PTR __k$527831[ebp+16], 9339268 ; 008e8184H
  00257	59		 pop	 ecx
$LL638@LoadProper:
  00258	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0025e	83 c0 04	 add	 eax, 4
  00261	49		 dec	 ecx
  00262	75 f4		 jne	 SHORT $LL638@LoadProper
  00264	6a 10		 push	 16			; 00000010H
  00266	58		 pop	 eax
$LL635@LoadProper:
  00267	8b c8		 mov	 ecx, eax
  00269	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0026f	79 05		 jns	 SHORT $LN1332@LoadProper
  00271	49		 dec	 ecx
  00272	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00275	41		 inc	 ecx
$LN1332@LoadProper:
  00276	b2 ed		 mov	 dl, -19			; ffffffedH
  00278	2a d1		 sub	 dl, cl
  0027a	30 54 05 e4	 xor	 BYTE PTR __k$527831[ebp+eax], dl
  0027e	40		 inc	 eax
  0027f	83 f8 13	 cmp	 eax, 19			; 00000013H
  00282	7c e3		 jl	 SHORT $LL635@LoadProper
  00284	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0028a	53		 push	 ebx
  0028b	8d 45 e4	 lea	 eax, DWORD PTR __k$527831[ebp]
  0028e	50		 push	 eax
  0028f	ff d7		 call	 edi
  00291	6a 05		 push	 5
  00293	89 86 48 0a 00
	00		 mov	 DWORD PTR [esi+2632], eax

; 55   : 	m_WeaponInfo.m_bWoundedLoopAni = rkLoader.LoadBool_e( "attack_wounded_loop_ani", false );

  00299	c7 45 e0 8c 98
	9f 8b		 mov	 DWORD PTR __k$527969[ebp], -1952474996 ; 8b9f988cH
  002a0	c7 45 e4 8e 87
	b4 9d		 mov	 DWORD PTR __k$527969[ebp+4], -1649113202 ; 9db4878eH
  002a7	c7 45 e8 82 99
	85 8e		 mov	 DWORD PTR __k$527969[ebp+8], -1903847038 ; 8e859982H
  002ae	c7 45 ec 88 88
	b4 86		 mov	 DWORD PTR __k$527969[ebp+12], -2034988920 ; 86b48888H
  002b5	c7 45 f0 82 83
	9b b5		 mov	 DWORD PTR __k$527969[ebp+16], -1248099454 ; b59b8382H
  002bc	8d 45 e0	 lea	 eax, DWORD PTR __k$527969[ebp]
  002bf	c7 45 f4 8c 82
	82 00		 mov	 DWORD PTR __k$527969[ebp+20], 8553100 ; 0082828cH
  002c6	59		 pop	 ecx
$LL744@LoadProper:
  002c7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002cd	83 c0 04	 add	 eax, 4
  002d0	49		 dec	 ecx
  002d1	75 f4		 jne	 SHORT $LL744@LoadProper
  002d3	6a 14		 push	 20			; 00000014H
  002d5	58		 pop	 eax
$LL741@LoadProper:
  002d6	8b c8		 mov	 ecx, eax
  002d8	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002de	79 05		 jns	 SHORT $LN1333@LoadProper
  002e0	49		 dec	 ecx
  002e1	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002e4	41		 inc	 ecx
$LN1333@LoadProper:
  002e5	b2 ed		 mov	 dl, -19			; ffffffedH
  002e7	2a d1		 sub	 dl, cl
  002e9	30 54 05 e0	 xor	 BYTE PTR __k$527969[ebp+eax], dl
  002ed	40		 inc	 eax
  002ee	83 f8 17	 cmp	 eax, 23			; 00000017H
  002f1	7c e3		 jl	 SHORT $LL741@LoadProper
  002f3	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002f9	53		 push	 ebx
  002fa	8d 45 e0	 lea	 eax, DWORD PTR __k$527969[ebp]
  002fd	50		 push	 eax
  002fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00304	6a 03		 push	 3
  00306	88 86 50 0a 00
	00		 mov	 BYTE PTR [esi+2640], al

; 56   : 
; 57   : 	rkLoader.LoadString_e( "delay_effect", "", szBuf, MAX_PATH );

  0030c	c7 45 e8 89 89
	87 8b		 mov	 DWORD PTR __k$528094[ebp], -1954051703 ; 8b878989H
  00313	c7 45 ec 94 b3
	8e 8c		 mov	 DWORD PTR __k$528094[ebp+4], -1936804972 ; 8c8eb394H
  0031a	c7 45 f0 8b 89
	88 9e		 mov	 DWORD PTR __k$528094[ebp+8], -1635219061 ; 9e88898bH
  00321	8d 45 e8	 lea	 eax, DWORD PTR __k$528094[ebp]
  00324	88 5d f4	 mov	 BYTE PTR __k$528094[ebp+12], bl
  00327	59		 pop	 ecx
$LL850@LoadProper:
  00328	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0032e	83 c0 04	 add	 eax, 4
  00331	49		 dec	 ecx
  00332	75 f4		 jne	 SHORT $LL850@LoadProper
  00334	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0033a	68 04 01 00 00	 push	 260			; 00000104H
  0033f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00345	50		 push	 eax
  00346	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0034b	8d 45 e8	 lea	 eax, DWORD PTR __k$528094[ebp]
  0034e	50		 push	 eax
  0034f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 58   : 	m_szDelayEffect = szBuf;

  00355	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0035b	50		 push	 eax
  0035c	8d 8e a8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2472]
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00368	6a 03		 push	 3

; 59   : 	rkLoader.LoadString_e( "attack_effect", "", szBuf, MAX_PATH );

  0036a	c7 45 e8 8c 98
	9f 8b		 mov	 DWORD PTR __k$528246[ebp], -1952474996 ; 8b9f988cH
  00371	c7 45 ec 8e 87
	b4 8f		 mov	 DWORD PTR __k$528246[ebp+4], -1883994226 ; 8fb4878eH
  00378	c7 45 f0 8b 8a
	8e 89		 mov	 DWORD PTR __k$528246[ebp+8], -1987147125 ; 898e8a8bH
  0037f	8d 45 e8	 lea	 eax, DWORD PTR __k$528246[ebp]
  00382	66 c7 45 f4 99
	00		 mov	 WORD PTR __k$528246[ebp+12], 153 ; 00000099H
  00388	59		 pop	 ecx
$LL956@LoadProper:
  00389	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0038f	83 c0 04	 add	 eax, 4
  00392	49		 dec	 ecx
  00393	75 f4		 jne	 SHORT $LL956@LoadProper
  00395	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0039b	80 75 f4 ed	 xor	 BYTE PTR __k$528246[ebp+12], -19 ; ffffffedH
  0039f	68 04 01 00 00	 push	 260			; 00000104H
  003a4	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003aa	50		 push	 eax
  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003b0	8d 45 e8	 lea	 eax, DWORD PTR __k$528246[ebp]
  003b3	50		 push	 eax
  003b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 60   : 	m_szFireEffect = szBuf;

  003ba	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003c0	50		 push	 eax
  003c1	8d 8e bc 09 00
	00		 lea	 ecx, DWORD PTR [esi+2492]
  003c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  003cd	6a 03		 push	 3

; 61   : 
; 62   : 	m_dwGravityTime = rkLoader.LoadInt_e( "gravity_time", 0 );

  003cf	c7 45 e8 8a 9e
	8a 9c		 mov	 DWORD PTR __k$528331[ebp], -1668637046 ; 9c8a9e8aH
  003d6	c7 45 ec 84 98
	92 b5		 mov	 DWORD PTR __k$528331[ebp+4], -1248683900 ; b5929884H
  003dd	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR __k$528331[ebp+8], -1887009383 ; 8f868599H
  003e4	8d 45 e8	 lea	 eax, DWORD PTR __k$528331[ebp]
  003e7	88 5d f4	 mov	 BYTE PTR __k$528331[ebp+12], bl
  003ea	59		 pop	 ecx
$LL1062@LoadProper:
  003eb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003f1	83 c0 04	 add	 eax, 4
  003f4	49		 dec	 ecx
  003f5	75 f4		 jne	 SHORT $LL1062@LoadProper
  003f7	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  003fd	53		 push	 ebx
  003fe	8d 45 e8	 lea	 eax, DWORD PTR __k$528331[ebp]
  00401	50		 push	 eax
  00402	ff d7		 call	 edi
  00404	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _value$528444[ebp], eax
  0040a	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _value$528444[ebp]
  00410	50		 push	 eax
  00411	8d 8e d0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2512]
  00417	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  0041c	6a 02		 push	 2

; 63   : 	m_fGravityRate = rkLoader.LoadFloat_e( "gravity_amt", 0.0f );

  0041e	c7 45 ec 8a 9e
	8a 9c		 mov	 DWORD PTR __k$528461[ebp], -1668637046 ; 9c8a9e8aH
  00425	c7 45 f0 84 98
	92 b5		 mov	 DWORD PTR __k$528461[ebp+4], -1248683900 ; b5929884H
  0042c	8d 45 ec	 lea	 eax, DWORD PTR __k$528461[ebp]
  0042f	c7 45 f4 8c 81
	9f 00		 mov	 DWORD PTR __k$528461[ebp+8], 10453388 ; 009f818cH
  00436	59		 pop	 ecx
$LL1170@LoadProper:
  00437	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0043d	83 c0 04	 add	 eax, 4
  00440	49		 dec	 ecx
  00441	75 f4		 jne	 SHORT $LL1170@LoadProper
  00443	6a 08		 push	 8
  00445	5f		 pop	 edi
$LL1167@LoadProper:
  00446	8b c7		 mov	 eax, edi
  00448	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0044d	79 05		 jns	 SHORT $LN1334@LoadProper
  0044f	48		 dec	 eax
  00450	83 c8 fc	 or	 eax, -4			; fffffffcH
  00453	40		 inc	 eax
$LN1334@LoadProper:
  00454	b1 ed		 mov	 cl, -19			; ffffffedH
  00456	2a c8		 sub	 cl, al
  00458	30 4c 3d ec	 xor	 BYTE PTR __k$528461[ebp+edi], cl
  0045c	47		 inc	 edi
  0045d	83 ff 0b	 cmp	 edi, 11			; 0000000bH
  00460	7c e4		 jl	 SHORT $LL1167@LoadProper
  00462	0f 57 c0	 xorps	 xmm0, xmm0
  00465	51		 push	 ecx
  00466	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0046c	8d 45 ec	 lea	 eax, DWORD PTR __k$528461[ebp]
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	50		 push	 eax
  00475	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0047b	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR _value$528574[ebp]
  00481	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _value$528574[ebp]
  00487	50		 push	 eax
  00488	8d 8e 00 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2560]
  0048e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  00493	6a 02		 push	 2

; 64   : 
; 65   : 	rkLoader.LoadString_e( "fire_sound", "", szBuf, MAX_PATH );

  00495	c7 45 ec 8b 85
	99 8f		 mov	 DWORD PTR __k$528604[ebp], -1885764213 ; 8f99858bH
  0049c	c7 45 f0 b2 9f
	84 9f		 mov	 DWORD PTR __k$528604[ebp+4], -1618698318 ; 9f849fb2H
  004a3	66 c7 45 f4 83
	88		 mov	 WORD PTR __k$528604[ebp+8], 34947 ; 00008883H
  004a9	8d 45 ec	 lea	 eax, DWORD PTR __k$528604[ebp]
  004ac	88 5d f6	 mov	 BYTE PTR __k$528604[ebp+10], bl
  004af	59		 pop	 ecx
$LL1278@LoadProper:
  004b0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004b6	83 c0 04	 add	 eax, 4
  004b9	49		 dec	 ecx
  004ba	75 f4		 jne	 SHORT $LL1278@LoadProper
  004bc	6a 08		 push	 8
  004be	58		 pop	 eax
$LL1275@LoadProper:
  004bf	8b c8		 mov	 ecx, eax
  004c1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004c7	79 05		 jns	 SHORT $LN1335@LoadProper
  004c9	49		 dec	 ecx
  004ca	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004cd	41		 inc	 ecx
$LN1335@LoadProper:
  004ce	b2 ed		 mov	 dl, -19			; ffffffedH
  004d0	2a d1		 sub	 dl, cl
  004d2	30 54 05 ec	 xor	 BYTE PTR __k$528604[ebp+eax], dl
  004d6	40		 inc	 eax
  004d7	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  004da	7c e3		 jl	 SHORT $LL1275@LoadProper
  004dc	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004e2	68 04 01 00 00	 push	 260			; 00000104H
  004e7	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004ed	50		 push	 eax
  004ee	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  004f3	8d 45 ec	 lea	 eax, DWORD PTR __k$528604[ebp]
  004f6	50		 push	 eax
  004f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 66   : 	m_szFireSound = szBuf;

  004fd	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00503	50		 push	 eax
  00504	8d 8e 58 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2648]
  0050a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 67   : 
; 68   : 	//추가 읽기
; 69   : 	LoadWeaponCreateProperty( rkLoader );

  00510	ff b5 d8 fe ff
	ff		 push	 DWORD PTR _rkLoader$GSCopy$[ebp]
  00516	8b ce		 mov	 ecx, esi
  00518	e8 00 00 00 00	 call	 ?LoadWeaponCreateProperty@ioCreateWeaponCountBuff@@QAEXAAVioINILoader@@@Z ; ioCreateWeaponCountBuff::LoadWeaponCreateProperty

; 70   : }

  0051d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00520	5f		 pop	 edi
  00521	5e		 pop	 esi
  00522	33 cd		 xor	 ecx, ebp
  00524	5b		 pop	 ebx
  00525	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0052a	c9		 leave
  0052b	c2 04 00	 ret	 4
?LoadProperty@ioCreateWeaponCountBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioCreateWeaponCountBuff::LoadProperty
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T528762 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ PROC	; ioCreateWeaponCountBuff::Clone, COMDAT
; _this$ = ecx

; 73   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 74   : 	return new ioCreateWeaponCountBuff( *this );

  0000e	68 74 0a 00 00	 push	 2676			; 00000a74H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T528762[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioCreateWeaponCountBuff@@QAE@ABV0@@Z ; ioCreateWeaponCountBuff::ioCreateWeaponCountBuff
$LN3@Clone:

; 75   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T528762[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioCreateWeaponCountBuff@@UAEPAVioBuff@@XZ ENDP	; ioCreateWeaponCountBuff::Clone
PUBLIC	?ProcessKeyInput@ioCreateWeaponCountBuff@@IAEXXZ ; ioCreateWeaponCountBuff::ProcessKeyInput
EXTRN	?IsAttackKey@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsAttackKey
; Function compile flags: /Ogsp
;	COMDAT ?ProcessKeyInput@ioCreateWeaponCountBuff@@IAEXXZ
_TEXT	SEGMENT
?ProcessKeyInput@ioCreateWeaponCountBuff@@IAEXXZ PROC	; ioCreateWeaponCountBuff::ProcessKeyInput, COMDAT
; _this$ = ecx

; 276  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 277  : 	ioBaseChar *pOwner = GetOwner();

  00004	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00009	8b f8		 mov	 edi, eax

; 278  : 	if( !pOwner )

  0000b	85 ff		 test	 edi, edi
  0000d	0f 84 89 00 00
	00		 je	 $LN6@ProcessKey

; 279  : 		return;
; 280  : 
; 281  : 	CharState eState = pOwner->GetState();

  00013	8a 87 10 03 00
	00		 mov	 al, BYTE PTR [edi+784]

; 282  : 	if( eState == CS_WOUNDED ||
; 283  : 		eState == CS_BLOW_WOUNDED ||
; 284  : 		eState == CS_BOUND_BLOW_WOUNDED ||
; 285  : 		eState == CS_GRAPPLING_WOUNDED ||
; 286  : 		eState == CS_GRAPPLING_PUSHED ||
; 287  : 		eState == CS_GRAPPLING_WOUNDED_SKILL ||
; 288  : 		eState == CS_GRAPPLING_WOUNDED_SWING )

  00019	3c 0b		 cmp	 al, 11			; 0000000bH
  0001b	74 7f		 je	 SHORT $LN6@ProcessKey
  0001d	3c 0c		 cmp	 al, 12			; 0000000cH
  0001f	74 7b		 je	 SHORT $LN6@ProcessKey
  00021	3c 31		 cmp	 al, 49			; 00000031H
  00023	74 77		 je	 SHORT $LN6@ProcessKey
  00025	3c 41		 cmp	 al, 65			; 00000041H
  00027	74 73		 je	 SHORT $LN6@ProcessKey
  00029	3c 42		 cmp	 al, 66			; 00000042H
  0002b	74 6f		 je	 SHORT $LN6@ProcessKey
  0002d	3c 43		 cmp	 al, 67			; 00000043H
  0002f	74 6b		 je	 SHORT $LN6@ProcessKey
  00031	3c 44		 cmp	 al, 68			; 00000044H
  00033	74 67		 je	 SHORT $LN6@ProcessKey

; 289  : 		return;
; 290  : 
; 291  : 	if( pOwner->IsAttackKey() && pOwner->IsNeedProcess() )

  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?IsAttackKey@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKey
  0003c	84 c0		 test	 al, al
  0003e	74 5c		 je	 SHORT $LN6@ProcessKey
  00040	8b 07		 mov	 eax, DWORD PTR [edi]
  00042	8b cf		 mov	 ecx, edi
  00044	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0004a	84 c0		 test	 al, al
  0004c	74 4e		 je	 SHORT $LN6@ProcessKey

; 292  : 	{
; 293  : 		if( m_BuffState == BS_DELAY )

  0004e	83 be 6c 09 00
	00 00		 cmp	 DWORD PTR [esi+2412], 0
  00055	75 45		 jne	 SHORT $LN6@ProcessKey

; 294  : 		{
; 295  : 			//카운트에 의한 무기 생성이면 카운트
; 296  : 			if ( m_CreateWeaponType == CWBT_COUNT && m_nCurWeaponCnt < m_nTotalWeaponCnt )

  00057	8b 96 68 0a 00
	00		 mov	 edx, DWORD PTR [esi+2664]
  0005d	33 ff		 xor	 edi, edi
  0005f	47		 inc	 edi
  00060	3b d7		 cmp	 edx, edi
  00062	75 29		 jne	 SHORT $LN1@ProcessKey
  00064	8b 8e 70 0a 00
	00		 mov	 ecx, DWORD PTR [esi+2672]
  0006a	3b 8e 6c 0a 00
	00		 cmp	 ecx, DWORD PTR [esi+2668]
  00070	7d 09		 jge	 SHORT $LN3@ProcessKey

; 297  : 			{
; 298  : 				m_nCurWeaponCnt++;

  00072	41		 inc	 ecx
  00073	89 8e 70 0a 00
	00		 mov	 DWORD PTR [esi+2672], ecx
  00079	eb 12		 jmp	 SHORT $LN1@ProcessKey
$LN3@ProcessKey:

; 299  : 			}
; 300  : 			else if ( m_CreateWeaponType == CWBT_COUNT && m_nCurWeaponCnt >= m_nTotalWeaponCnt )

  0007b	3b d7		 cmp	 edx, edi
  0007d	75 0e		 jne	 SHORT $LN1@ProcessKey
  0007f	8b 86 70 0a 00
	00		 mov	 eax, DWORD PTR [esi+2672]
  00085	3b 86 6c 0a 00
	00		 cmp	 eax, DWORD PTR [esi+2668]
  0008b	7d 0f		 jge	 SHORT $LN6@ProcessKey
$LN1@ProcessKey:

; 301  : 			{
; 302  : 				return;
; 303  : 			}
; 304  : 
; 305  : 			m_BuffState = BS_FIRE;

  0008d	89 be 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], edi
  00093	5f		 pop	 edi

; 306  : 			CreateWeapon();

  00094	8b ce		 mov	 ecx, esi
  00096	5e		 pop	 esi
  00097	e9 00 00 00 00	 jmp	 ?CreateWeapon@ioCreateWeaponCountBuff@@IAEXXZ ; ioCreateWeaponCountBuff::CreateWeapon
$LN6@ProcessKey:
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 307  : 		}
; 308  : 	}
; 309  : }

  0009e	c3		 ret	 0
?ProcessKeyInput@ioCreateWeaponCountBuff@@IAEXXZ ENDP	; ioCreateWeaponCountBuff::ProcessKeyInput
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioCreateWeaponCountBuff@@UAEXM@Z
_TEXT	SEGMENT
_value$528787 = 8					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioCreateWeaponCountBuff@@UAEXM@Z PROC	; ioCreateWeaponCountBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 111  : 	if( CheckOwnerStateCheck() )

  00006	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ; ioCreateWeaponCountBuff::CheckOwnerStateCheck
  0000b	84 c0		 test	 al, al
  0000d	0f 85 25 01 00
	00		 jne	 $LN14@ProcessBuf

; 112  : 		return;
; 113  : 
; 114  : 	switch( m_iOperationType )

  00013	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00019	53		 push	 ebx
  0001a	33 db		 xor	 ebx, ebx
  0001c	2b c3		 sub	 eax, ebx
  0001e	0f 84 fe 00 00
	00		 je	 $LN1@ProcessBuf
  00024	48		 dec	 eax
  00025	74 0e		 je	 SHORT $LN6@ProcessBuf
  00027	48		 dec	 eax
  00028	0f 84 91 00 00
	00		 je	 $LN10@ProcessBuf
  0002e	48		 dec	 eax
  0002f	0f 85 f4 00 00
	00		 jne	 $LN11@ProcessBuf
$LN6@ProcessBuf:

; 130  : 	case OT_DELAY:
; 131  : 	case OT_ACTIVE:
; 132  : 		{
; 133  : 			if( CheckEnableDelayState() )

  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  0003c	84 c0		 test	 al, al
  0003e	0f 85 f3 00 00
	00		 jne	 $LN18@ProcessBuf

; 134  : 				return;
; 135  : 
; 136  : 			CheckCallingProcess();

  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 137  : 
; 138  : 			if( GetBuffDuration() == 0 )

  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00052	85 c0		 test	 eax, eax
  00054	0f 84 dd 00 00
	00		 je	 $LN18@ProcessBuf

; 139  : 				return;
; 140  : 
; 141  : 			if( m_dwBuffEndTime <= FRAMEGETTIME() )

  0005a	57		 push	 edi
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00061	8b c8		 mov	 ecx, eax
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00069	8b f8		 mov	 edi, eax
  0006b	8d 45 08	 lea	 eax, DWORD PTR _value$528787[ebp]
  0006e	50		 push	 eax
  0006f	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00075	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0007a	39 7d 08	 cmp	 DWORD PTR _value$528787[ebp], edi
  0007d	5f		 pop	 edi
  0007e	0f 87 a5 00 00
	00		 ja	 $LN11@ProcessBuf

; 142  : 			{
; 143  : 				if( CheckRestoreStateCheck() )

  00084	8b ce		 mov	 ecx, esi
  00086	e8 00 00 00 00	 call	 ?CheckRestoreStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ; ioCreateWeaponCountBuff::CheckRestoreStateCheck
  0008b	84 c0		 test	 al, al
  0008d	74 14		 je	 SHORT $LN2@ProcessBuf

; 144  : 				{
; 145  : 					m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  0008f	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00096	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0009c	50		 push	 eax
  0009d	53		 push	 ebx
$LN19@ProcessBuf:
  0009e	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN2@ProcessBuf:

; 146  : 				}
; 147  : 
; 148  : 				m_pOwner->CheckUseBuffSkill( m_Name, false );

  000a3	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000a9	53		 push	 ebx
  000aa	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::CheckUseBuffSkill

; 149  : 				SetReserveEndBuff();

  000b6	8b ce		 mov	 ecx, esi
  000b8	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 150  : 				return;

  000bd	eb 78		 jmp	 SHORT $LN18@ProcessBuf
$LN10@ProcessBuf:

; 115  : 	{
; 116  : 	case OT_SWITCH:
; 117  : 		//종료 조건 추가
; 118  : 		if( !CheckSwitchType( fTimePerSec ) || 
; 119  : 			( m_CreateWeaponType == CWBT_COUNT && m_nCurWeaponCnt >= m_nTotalWeaponCnt ))

  000bf	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  000c4	51		 push	 ecx
  000c5	8b ce		 mov	 ecx, esi
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType
  000d1	84 c0		 test	 al, al
  000d3	74 20		 je	 SHORT $LN8@ProcessBuf
  000d5	83 be 68 0a 00
	00 01		 cmp	 DWORD PTR [esi+2664], 1
  000dc	75 0e		 jne	 SHORT $LN9@ProcessBuf
  000de	8b 86 70 0a 00
	00		 mov	 eax, DWORD PTR [esi+2672]
  000e4	3b 86 6c 0a 00
	00		 cmp	 eax, DWORD PTR [esi+2668]
  000ea	7d 09		 jge	 SHORT $LN8@ProcessBuf
$LN9@ProcessBuf:

; 127  : 		}		
; 128  : 		CheckCallingProcess();

  000ec	8b ce		 mov	 ecx, esi
  000ee	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 129  : 		break;

  000f3	eb 34		 jmp	 SHORT $LN11@ProcessBuf
$LN8@ProcessBuf:

; 120  : 		{
; 121  : 			if( GetOwner() && CheckRestoreStateCheck() )

  000f5	8b ce		 mov	 ecx, esi
  000f7	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  000fc	85 c0		 test	 eax, eax
  000fe	74 a3		 je	 SHORT $LN2@ProcessBuf
  00100	8b ce		 mov	 ecx, esi
  00102	e8 00 00 00 00	 call	 ?CheckRestoreStateCheck@ioCreateWeaponCountBuff@@IAE_NXZ ; ioCreateWeaponCountBuff::CheckRestoreStateCheck
  00107	84 c0		 test	 al, al
  00109	74 98		 je	 SHORT $LN2@ProcessBuf

; 122  : 				GetOwner()->SetState( CS_DELAY, m_bSendDelayNetWork );

  0010b	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00112	50		 push	 eax
  00113	53		 push	 ebx
  00114	8b ce		 mov	 ecx, esi
  00116	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  0011b	8b c8		 mov	 ecx, eax

; 123  : 
; 124  : 			m_pOwner->CheckUseBuffSkill( m_Name, false );
; 125  : 			SetReserveEndBuff();
; 126  : 			return;

  0011d	e9 7c ff ff ff	 jmp	 $LN19@ProcessBuf
$LN1@ProcessBuf:

; 151  : 			}
; 152  : 		}
; 153  : 		break;
; 154  : 	case OT_PASSIVE:
; 155  : 		CheckCallingAreaWeapon();

  00122	8b ce		 mov	 ecx, esi
  00124	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN11@ProcessBuf:

; 156  : 		break;
; 157  : 	}
; 158  : 
; 159  : 	ProcessState();

  00129	8b ce		 mov	 ecx, esi
  0012b	e8 00 00 00 00	 call	 ?ProcessState@ioCreateWeaponCountBuff@@IAEXXZ ; ioCreateWeaponCountBuff::ProcessState

; 160  : 	ProcessKeyInput();

  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?ProcessKeyInput@ioCreateWeaponCountBuff@@IAEXXZ ; ioCreateWeaponCountBuff::ProcessKeyInput
$LN18@ProcessBuf:
  00137	5b		 pop	 ebx
$LN14@ProcessBuf:
  00138	5e		 pop	 esi

; 161  : }

  00139	5d		 pop	 ebp
  0013a	c2 04 00	 ret	 4
?ProcessBuff@ioCreateWeaponCountBuff@@UAEXM@Z ENDP	; ioCreateWeaponCountBuff::ProcessBuff
_TEXT	ENDS
END
