; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAttackCountBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetRandomSeed@ioBaseChar@@QBEKXZ		; ioBaseChar::GetRandomSeed
; Function compile flags: /Ogsp
;	COMDAT ?GetRandomSeed@ioBaseChar@@QBEKXZ
_TEXT	SEGMENT
?GetRandomSeed@ioBaseChar@@QBEKXZ PROC			; ioBaseChar::GetRandomSeed, COMDAT
; _this$ = ecx

; 3372 : 	inline DWORD GetRandomSeed() const { return m_dwRandomSeed; }

  00000	8b 81 74 16 00
	00		 mov	 eax, DWORD PTR [ecx+5748]
  00006	c3		 ret	 0
?GetRandomSeed@ioBaseChar@@QBEKXZ ENDP			; ioBaseChar::GetRandomSeed
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_stBuffName$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z ; ioAttackCountBuff::SendPacketBuff
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@M@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@_N@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@K@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@PBD@Z:PROC		; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z$0
__ehfuncinfo$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackcountbuff.cpp
xdata$x	ENDS
;	COMDAT ?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z
_TEXT	SEGMENT
_stBuffName$GSCopy$ = -32812				; size = 4
_kPacket$ = -32808					; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pTarget$ = 8						; size = 4
_pCreator$ = 12						; size = 4
_stBuffName$ = 16					; size = 4
?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z PROC ; ioAttackCountBuff::SendPacketBuff, COMDAT
; _this$ = ecx

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 20 80 00 00	 mov	 eax, 32800		; 00008020H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 45 10	 mov	 eax, DWORD PTR _stBuffName$[ebp]
  00035	8b 75 08	 mov	 esi, DWORD PTR _pTarget$[ebp]
  00038	8b 7d 0c	 mov	 edi, DWORD PTR _pCreator$[ebp]

; 162  : 	SP2Packet kPacket( CUPK_ADD_NEW_BUFF );

  0003b	68 31 41 00 00	 push	 16689			; 00004131H
  00040	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00046	89 85 d4 7f ff
	ff		 mov	 DWORD PTR _stBuffName$GSCopy$[ebp], eax
  0004c	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 163  : 	kPacket << pTarget->GetCharName();

  00051	8d 86 d4 02 00
	00		 lea	 eax, DWORD PTR [esi+724]
  00057	33 db		 xor	 ebx, ebx
  00059	50		 push	 eax
  0005a	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00060	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00063	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 164  : 	kPacket << pCreator->GetCharName();

  00068	81 c7 d4 02 00
	00		 add	 edi, 724		; 000002d4H
  0006e	57		 push	 edi
  0006f	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00075	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 165  : 	kPacket << "";

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0007f	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00085	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PBD@Z ; SP2Packet::operator<<

; 166  : 	kPacket << pTarget->GetRandomSeed();

  0008a	ff b6 74 16 00
	00		 push	 DWORD PTR [esi+5748]
  00090	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00096	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@K@Z ; SP2Packet::operator<<

; 167  : 	kPacket << false;		// 타격횟수 체크

  0009b	53		 push	 ebx
  0009c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000a2	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 168  : 	kPacket << 0.0f;

  000a7	0f 57 c0	 xorps	 xmm0, xmm0
  000aa	51		 push	 ecx
  000ab	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@M@Z ; SP2Packet::operator<<

; 169  : 	kPacket << 0.0f;

  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	51		 push	 ecx
  000bf	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@M@Z ; SP2Packet::operator<<

; 170  : 	kPacket << 0.0f;

  000cf	0f 57 c0	 xorps	 xmm0, xmm0
  000d2	51		 push	 ecx
  000d3	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000de	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@M@Z ; SP2Packet::operator<<

; 171  : 	kPacket << COWT_NONE;				

  000e3	53		 push	 ebx
  000e4	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000ea	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 172  : 	kPacket << 1;

  000ef	6a 01		 push	 1
  000f1	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000f7	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 173  : 	kPacket << stBuffName;

  000fc	ff b5 d4 7f ff
	ff		 push	 DWORD PTR _stBuffName$GSCopy$[ebp]
  00102	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00108	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 174  : 	kPacket << false;					// Use Force

  0010d	53		 push	 ebx
  0010e	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00114	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 175  : 
; 176  : 	P2PNetwork::SendToAllPlayingUser( kPacket );

  00119	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$[ebp]
  0011f	53		 push	 ebx
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 177  : }

  00126	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0012a	59		 pop	 ecx
  0012b	59		 pop	 ecx
  0012c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00132	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
  00137	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00141	59		 pop	 ecx
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00148	33 cd		 xor	 ecx, ebp
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	c9		 leave
  00150	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32816]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z ENDP ; ioAttackCountBuff::SendPacketBuff
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??_7?$CEncrypt@_N@@6B@				; CEncrypt<bool>::`vftable'
PUBLIC	??1?$CEncrypt@_N@@UAE@XZ			; CEncrypt<bool>::~CEncrypt<bool>
PUBLIC	??_R4?$CEncrypt@_N@@6B@				; CEncrypt<bool>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEncrypt@_N@@@8			; CEncrypt<bool> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEncrypt@_N@@8				; CEncrypt<bool>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEncrypt@_N@@8				; CEncrypt<bool>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEncrypt@_N@@8			; CEncrypt<bool>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1ccddaabb@@UAE@XZ:PROC			; ccddaabb::~ccddaabb
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CEncrypt@_N@@UAEPAXI@Z:PROC		; CEncrypt<bool>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CEncrypt@_N@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEncrypt@_N@@8 DD FLAT:??_R0?AV?$CEncrypt@_N@@@8 ; CEncrypt<bool>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEncrypt@_N@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEncrypt@_N@@8
rdata$r	SEGMENT
??_R2?$CEncrypt@_N@@8 DD FLAT:??_R1A@?0A@EA@?$CEncrypt@_N@@8 ; CEncrypt<bool>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CEncrypt@_N@@8
rdata$r	SEGMENT
??_R3?$CEncrypt@_N@@8 DD 00H				; CEncrypt<bool>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CEncrypt@_N@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEncrypt@_N@@@8
_DATA	SEGMENT
??_R0?AV?$CEncrypt@_N@@@8 DD FLAT:??_7type_info@@6B@	; CEncrypt<bool> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEncrypt@_N@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CEncrypt@_N@@6B@
rdata$r	SEGMENT
??_R4?$CEncrypt@_N@@6B@ DD 00H				; CEncrypt<bool>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEncrypt@_N@@@8
	DD	FLAT:??_R3?$CEncrypt@_N@@8
rdata$r	ENDS
;	COMDAT ??_7?$CEncrypt@_N@@6B@
CONST	SEGMENT
??_7?$CEncrypt@_N@@6B@ DD FLAT:??_R4?$CEncrypt@_N@@6B@	; CEncrypt<bool>::`vftable'
	DD	FLAT:??_E?$CEncrypt@_N@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$CEncrypt@_N@@UAE@XZ
_TEXT	SEGMENT
??1?$CEncrypt@_N@@UAE@XZ PROC				; CEncrypt<bool>::~CEncrypt<bool>, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CEncrypt@_N@@6B@

; 128  : 	}

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
??1?$CEncrypt@_N@@UAE@XZ ENDP				; CEncrypt<bool>::~CEncrypt<bool>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_G?$CEncrypt@_N@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CEncrypt@_N@@UAEPAXI@Z PROC			; CEncrypt<bool>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@_N@@6B@
  0000f	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 07		 je	 SHORT $LN1@scalar
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
$LN1@scalar:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??_G?$CEncrypt@_N@@UAEPAXI@Z ENDP			; CEncrypt<bool>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z	; CEncrypt<bool>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z PROC	; CEncrypt<bool>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ENDP	; CEncrypt<bool>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?Init@?$CEncrypt@_N@@AAEXXZ			; CEncrypt<bool>::Init
EXTRN	?Setup@ccddaabb@@QAEXPBDHH@Z:PROC		; ccddaabb::Setup
EXTRN	__imp__rand:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Init@?$CEncrypt@_N@@AAEXXZ
_TEXT	SEGMENT
_pid$ = -8						; size = 4
_tick$ = -4						; size = 4
?Init@?$CEncrypt@_N@@AAEXXZ PROC			; CEncrypt<bool>::Init, COMDAT
; _this$ = ecx

; 73   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 74   : 		DWORD pid = GetCurrentProcessId();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00010	89 45 f8	 mov	 DWORD PTR _pid$[ebp], eax

; 75   : 		DWORD tick = timeGetTime();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 76   : 		m_ValueSize    = sizeof(type);
; 77   : 		m_MemPoolPos   = (unsigned short)( rand()+pid+tick )%(MAX_MEM_POOL-m_ValueSize);

  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  0001f	89 45 fc	 mov	 DWORD PTR _tick$[ebp], eax
  00022	33 c0		 xor	 eax, eax
  00024	40		 inc	 eax
  00025	66 89 46 06	 mov	 WORD PTR [esi+6], ax
  00029	ff d7		 call	 edi
  0002b	03 45 f8	 add	 eax, DWORD PTR _pid$[ebp]
  0002e	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00032	03 45 fc	 add	 eax, DWORD PTR _tick$[ebp]
  00035	6a 0c		 push	 12			; 0000000cH
  00037	0f b7 c0	 movzx	 eax, ax
  0003a	5b		 pop	 ebx
  0003b	99		 cdq
  0003c	2b d9		 sub	 ebx, ecx
  0003e	f7 fb		 idiv	 ebx
  00040	66 89 56 04	 mov	 WORD PTR [esi+4], dx

; 78   : 		m_EncryptSeed  = (char)( rand()+pid+tick )%256;

  00044	ff d7		 call	 edi
  00046	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00049	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0004c	0f be c0	 movsx	 eax, al
  0004f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00054	79 07		 jns	 SHORT $LN8@Init
  00056	48		 dec	 eax
  00057	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0005c	40		 inc	 eax
$LN8@Init:
  0005d	88 46 08	 mov	 BYTE PTR [esi+8], al

; 79   : 
; 80   : 		for (int i = 0; i < MAX_MEM_POOL ; i++)

  00060	33 db		 xor	 ebx, ebx
$LL3@Init:

; 81   : 			m_MemPool[i] = (char)( rand()+pid+tick )%256; // 더미

  00062	ff d7		 call	 edi
  00064	02 45 f8	 add	 al, BYTE PTR _pid$[ebp]
  00067	02 45 fc	 add	 al, BYTE PTR _tick$[ebp]
  0006a	0f be c0	 movsx	 eax, al
  0006d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00072	79 07		 jns	 SHORT $LN9@Init
  00074	48		 dec	 eax
  00075	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0007a	40		 inc	 eax
$LN9@Init:
  0007b	88 44 1e 1c	 mov	 BYTE PTR [esi+ebx+28], al
  0007f	43		 inc	 ebx
  00080	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00083	7c dd		 jl	 SHORT $LL3@Init

; 82   : 
; 83   : 		//UJ 130913, 최적화: szKey 사용안하도록 간략화
; 84   : 		//char szKey[ccddaabb::KEY_SIZE];//="";
; 85   : 		//for (int i = 0; i < ccddaabb::KEY_SIZE  ; i++)
; 86   : 		//	szKey[i] = (char)( rand()+pid+tick )%256; // 더미
; 87   : 		m_RC5.Setup( NULL, pid, tick );

  00085	ff 75 fc	 push	 DWORD PTR _tick$[ebp]
  00088	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008b	ff 75 f8	 push	 DWORD PTR _pid$[ebp]
  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 ?Setup@ccddaabb@@QAEXPBDHH@Z ; ccddaabb::Setup
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 88   : 
; 89   : #ifdef _NOTUSE
; 90   : 		m_value        = 0;
; 91   : 		EncryptValueToPool((char*)&m_value);
; 92   : 		Debug();
; 93   : #endif
; 94   : 	}

  00098	c9		 leave
  00099	c3		 ret	 0
?Init@?$CEncrypt@_N@@AAEXXZ ENDP			; CEncrypt<bool>::Init
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_7ioAttackCountBuff@@6B@			; ioAttackCountBuff::`vftable'
PUBLIC	??1ioAttackCountBuff@@UAE@XZ			; ioAttackCountBuff::~ioAttackCountBuff
PUBLIC	??_R4ioAttackCountBuff@@6B@			; ioAttackCountBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAttackCountBuff@@@8			; ioAttackCountBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackCountBuff@@8			; ioAttackCountBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackCountBuff@@8			; ioAttackCountBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAttackCountBuff@@8		; ioAttackCountBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioAttackCountBuff@@UAEXAAVioINILoader@@@Z ; ioAttackCountBuff::LoadProperty
PUBLIC	?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ	; ioAttackCountBuff::Clone
PUBLIC	?StartBuff@ioAttackCountBuff@@UAEXPAVioBaseChar@@@Z ; ioAttackCountBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioAttackCountBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioAttackCountBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioAttackCountBuff@@UAEXM@Z		; ioAttackCountBuff::ProcessBuff
PUBLIC	?EndBuff@ioAttackCountBuff@@UAEXXZ		; ioAttackCountBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioAttackCountBuff@@UAEPAXI@Z:PROC		; ioAttackCountBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackCountBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackCountBuff@@8 DD FLAT:??_R0?AVioAttackCountBuff@@@8 ; ioAttackCountBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackCountBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackCountBuff@@8
rdata$r	SEGMENT
??_R2ioAttackCountBuff@@8 DD FLAT:??_R1A@?0A@EA@ioAttackCountBuff@@8 ; ioAttackCountBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackCountBuff@@8
rdata$r	SEGMENT
??_R3ioAttackCountBuff@@8 DD 00H			; ioAttackCountBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackCountBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackCountBuff@@@8
_DATA	SEGMENT
??_R0?AVioAttackCountBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioAttackCountBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackCountBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAttackCountBuff@@6B@
rdata$r	SEGMENT
??_R4ioAttackCountBuff@@6B@ DD 00H			; ioAttackCountBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAttackCountBuff@@@8
	DD	FLAT:??_R3ioAttackCountBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioAttackCountBuff@@6B@
CONST	SEGMENT
??_7ioAttackCountBuff@@6B@ DD FLAT:??_R4ioAttackCountBuff@@6B@ ; ioAttackCountBuff::`vftable'
	DD	FLAT:?LoadProperty@ioAttackCountBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioAttackCountBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioAttackCountBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioAttackCountBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioAttackCountBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioAttackCountBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioAttackCountBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioAttackCountBuff@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioAttackCountBuff@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioAttackCountBuff@@UAE@XZ$2
__ehfuncinfo$??1ioAttackCountBuff@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1ioAttackCountBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackcountbuff.cpp
xdata$x	ENDS
;	COMDAT ??1ioAttackCountBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioAttackCountBuff@@UAE@XZ PROC			; ioAttackCountBuff::~ioAttackCountBuff, COMDAT
; _this$ = ecx

; 23   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioAttackCountBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAttackCountBuff@@6B@

; 24   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e ac 09 00
	00		 lea	 ecx, DWORD PTR [esi+2476]
  00023	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0002a	ff d7		 call	 edi
  0002c	8d 8e 9c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2460]
  00032	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00036	ff d7		 call	 edi
  00038	8d 8e 78 09 00
	00		 lea	 ecx, DWORD PTR [esi+2424]
  0003e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00042	c7 86 6c 09 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2412], OFFSET ??_7?$CEncrypt@_N@@6B@
  0004c	e8 00 00 00 00	 call	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
  00051	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  0005c	e8 00 00 00 00	 call	 __EH_epilog3
  00061	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioAttackCountBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioAttackCountBuff@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??1ioAttackCountBuff@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 9c 09 00
	00		 add	 ecx, 2460		; 0000099cH
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioAttackCountBuff@@UAE@XZ:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioAttackCountBuff@@UAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioAttackCountBuff@@UAE@XZ ENDP			; ioAttackCountBuff::~ioAttackCountBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z ; ioAttackCountBuff::CallEndBuff
EXTRN	?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z:PROC ; ioBaseChar::GetBaseChar
EXTRN	?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z:PROC ; ioBaseChar::AddNewBuff
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackcountbuff.cpp
xdata$x	SEGMENT
__unwindtable$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z$0
__ehfuncinfo$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z
_TEXT	SEGMENT
$T524741 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_pTarget$ = 8						; size = 4
_stCreator$ = 12					; size = 4
?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z PROC ; ioAttackCountBuff::CallEndBuff, COMDAT
; _this$ = ecx

; 151  : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 152  : 	pTarget->AddNewBuff( m_stCallEndBuff, stCreator, "", NULL );

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00013	8d 4d e4	 lea	 ecx, DWORD PTR $T524741[ebp]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0001c	8b 5d 08	 mov	 ebx, DWORD PTR _pTarget$[ebp]
  0001f	33 c0		 xor	 eax, eax
  00021	50		 push	 eax
  00022	50		 push	 eax
  00023	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00026	8d 45 e4	 lea	 eax, DWORD PTR $T524741[ebp]
  00029	50		 push	 eax
  0002a	ff 75 0c	 push	 DWORD PTR _stCreator$[ebp]
  0002d	8d be ac 09 00
	00		 lea	 edi, DWORD PTR [esi+2476]
  00033	57		 push	 edi
  00034	8b cb		 mov	 ecx, ebx
  00036	e8 00 00 00 00	 call	 ?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z ; ioBaseChar::AddNewBuff
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8d 4d e4	 lea	 ecx, DWORD PTR $T524741[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 153  : 
; 154  : 	ioBaseChar* pCreator = pTarget->GetBaseChar( stCreator );

  00048	ff 75 0c	 push	 DWORD PTR _stCreator$[ebp]
  0004b	8b cb		 mov	 ecx, ebx
  0004d	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar

; 155  : 	if( pTarget && pCreator )

  00052	85 db		 test	 ebx, ebx
  00054	74 0e		 je	 SHORT $LN1@CallEndBuf
  00056	85 c0		 test	 eax, eax
  00058	74 0a		 je	 SHORT $LN1@CallEndBuf

; 156  : 		SendPacketBuff( pTarget, pCreator, m_stCallEndBuff );

  0005a	57		 push	 edi
  0005b	50		 push	 eax
  0005c	53		 push	 ebx
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z ; ioAttackCountBuff::SendPacketBuff
$LN1@CallEndBuf:

; 157  : }

  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T524741[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z ENDP ; ioAttackCountBuff::CallEndBuff
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<16>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<16>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 8c 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 75 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 5e 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 46 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 2f 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 18 01 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 02 01 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ec 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 d5 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 be 00 00
	00		 je	 $LN87@LoadString
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 a8 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 92 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	74 7f		 je	 SHORT $LN84@LoadString
  000ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f8	84 d2		 test	 dl, dl
  000fa	74 6c		 je	 SHORT $LN83@LoadString
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	74 5a		 je	 SHORT $LN82@LoadString
  00109	32 d1		 xor	 dl, cl
  0010b	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  0010f	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	0f 84 a0 00 00
	00		 je	 $LN111@LoadString
  00118	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0011b	84 d2		 test	 dl, dl
  0011d	74 3e		 je	 SHORT $LN80@LoadString
  0011f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00122	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 2b		 je	 SHORT $LN79@LoadString
  0012c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0012f	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00132	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00135	84 d2		 test	 dl, dl
  00137	74 19		 je	 SHORT $LN78@LoadString
  00139	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  0013c	32 d1		 xor	 dl, cl
  0013e	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00141	84 c0		 test	 al, al
  00143	74 07		 je	 SHORT $LN77@LoadString
  00145	34 ea		 xor	 al, -22			; ffffffeaH
  00147	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  0014a	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0014c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00150	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  00152	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  00155	eb 61		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00157	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0015b	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  0015d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00161	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00163	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00166	eb 50		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00168	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0016c	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0016e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00172	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  00174	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00178	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  0017a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0017d	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0017f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00183	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  00185	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00189	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  0018b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0018f	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00191	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00194	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00196	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0019a	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  0019c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001a0	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001a2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001a6	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001a8	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ac	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001ae	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001b2	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001b4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001b8	6a 03		 push	 3
  001ba	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001bd	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001c1	5a		 pop	 edx
$LL104@LoadString:
  001c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c8	83 c0 04	 add	 eax, 4
  001cb	4a		 dec	 edx
  001cc	75 f4		 jne	 SHORT $LL104@LoadString
  001ce	6a 0c		 push	 12			; 0000000cH
  001d0	58		 pop	 eax
$LL101@LoadString:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN112@LoadString
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN112@LoadString:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ec	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001ee	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	56		 push	 esi
  001f6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	5f		 pop	 edi
  00204	33 cd		 xor	 ecx, ebp
  00206	5e		 pop	 esi
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	c9		 leave
  0020d	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<16>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<15>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 75 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 5e 01 00
	00		 je	 $LN95@LoadString@2
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 46 01 00
	00		 je	 $LN94@LoadString@2
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 2f 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 18 01 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 02 01 00
	00		 je	 $LN91@LoadString@2
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 ec 00 00
	00		 je	 $LN90@LoadString@2
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 d5 00 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 be 00 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 a8 00 00
	00		 je	 $LN87@LoadString@2
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 92 00 00
	00		 je	 $LN86@LoadString@2
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 7f		 je	 SHORT $LN85@LoadString@2
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 6c		 je	 SHORT $LN84@LoadString@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	74 5a		 je	 SHORT $LN83@LoadString@2
  000f8	32 d1		 xor	 dl, cl
  000fa	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000fe	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	0f 84 9a 00 00
	00		 je	 $LN111@LoadString@2
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 3e		 je	 SHORT $LN81@LoadString@2
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 2b		 je	 SHORT $LN80@LoadString@2
  0011b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011e	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00121	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00124	84 d2		 test	 dl, dl
  00126	74 19		 je	 SHORT $LN79@LoadString@2
  00128	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  0012b	32 d1		 xor	 dl, cl
  0012d	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00130	84 c0		 test	 al, al
  00132	74 07		 je	 SHORT $LN78@LoadString@2
  00134	34 eb		 xor	 al, -21			; ffffffebH
  00136	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00139	eb 66		 jmp	 SHORT $LN111@LoadString@2
$LN78@LoadString@2:
  0013b	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  0013f	eb 60		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  00141	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  00144	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  00146	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0014a	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  0014c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00150	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  00152	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  00155	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  00157	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0015b	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  0015d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00161	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  00163	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00167	eb 38		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00169	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0016c	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  0016e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00172	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  00174	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00178	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  0017a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0017e	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  00180	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00183	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  00185	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00189	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  0018b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0018f	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  00191	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00195	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00197	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0019b	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  0019d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  001a1	6a 03		 push	 3
  001a3	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a6	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001aa	5a		 pop	 edx
$LL104@LoadString@2:
  001ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b1	83 c0 04	 add	 eax, 4
  001b4	4a		 dec	 edx
  001b5	75 f4		 jne	 SHORT $LL104@LoadString@2
  001b7	6a 0c		 push	 12			; 0000000cH
  001b9	58		 pop	 eax
$LL101@LoadString@2:
  001ba	8b c8		 mov	 ecx, eax
  001bc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001c2	79 05		 jns	 SHORT $LN112@LoadString@2
  001c4	49		 dec	 ecx
  001c5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c8	41		 inc	 ecx
$LN112@LoadString@2:
  001c9	b2 ed		 mov	 dl, -19			; ffffffedH
  001cb	2a d1		 sub	 dl, cl
  001cd	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001d1	40		 inc	 eax
  001d2	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001d5	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  001d7	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001da	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001dd	57		 push	 edi
  001de	56		 push	 esi
  001df	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	5f		 pop	 edi
  001ed	33 cd		 xor	 ecx, ebp
  001ef	5e		 pop	 esi
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	c9		 leave
  001f6	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z ; ioINILoader::LoadBool_e<22>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<22>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadBool_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadBool_e
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadBool_e
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadBool_e
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadBool_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadBool_e
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadBool_e
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadBool_e
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadBool_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadBool_e
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadBool_e
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadBool_e
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadBool_e
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadBool_e
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadBool_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadBool_e
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadBool_e
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadBool_e
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadBool_e
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadBool_e
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadBool_e
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadBool_e
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadBool_e
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadBool_e
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e
$LN71@LoadBool_e:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e
$LN72@LoadBool_e:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadBool_e
$LN73@LoadBool_e:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadBool_e:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00250	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00253	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00257	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025a	50		 push	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	5e		 pop	 esi
  00267	33 cd		 xor	 ecx, ebp
  00269	5b		 pop	 ebx
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	c9		 leave
  00270	c2 08 00	 ret	 8
??$LoadBool_e@$0BG@@ioINILoader@@QAE_NAAY0BG@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<22>
_TEXT	ENDS
PUBLIC	??0?$CEncrypt@_N@@QAE@XZ			; CEncrypt<bool>::CEncrypt<bool>
EXTRN	??0ccddaabb@@QAE@XZ:PROC			; ccddaabb::ccddaabb
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@_N@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@_N@@QAE@XZ$0
__ehfuncinfo$??0?$CEncrypt@_N@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@_N@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CEncrypt@_N@@QAE@XZ PROC				; CEncrypt<bool>::CEncrypt<bool>, COMDAT
; _this$ = ecx

; 109  : 	CEncrypt()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@_N@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@_N@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 	{
; 111  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@_N@@AAEXXZ ; CEncrypt<bool>::Init

; 112  : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@_N@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@_N@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@_N@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@_N@@QAE@XZ ENDP				; CEncrypt<bool>::CEncrypt<bool>
PUBLIC	??B?$CEncrypt@_N@@QAE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QAE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QAE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QAE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QBE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@_N@@QBE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QBE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 145  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 		//UJ 130829, const도 똑같이 하면 된다 --start
; 147  : 		type value;
; 148  : 		CEncrypt<type>* pThis = const_cast<CEncrypt<type>*>(this);
; 149  : 		pThis->DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 150  : 		//// const에서 DecryptValueToPool 사용할 수 없으므로 아래와 같이함.
; 151  :  		//type value;
; 152  : 		//char szTempMem[MAX_ENCRYPT];
; 153  : 		//m_RC5.DecryptByte( m_MemPool, szTempMem, max(m_ValueSize, DEFAULT_ENCRYPT) );
; 154  : 		//memcpy( &value, szTempMem, m_ValueSize );
; 155  : 		//UJ --end
; 156  : 
; 157  : #ifdef _NOTUSE
; 158  : 		Debug();
; 159  : #endif
; 160  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 161  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QBE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@_N@@QAE_N_N@Z			; CEncrypt<bool>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@_N@@QAE_N_N@Z
_TEXT	SEGMENT
_inValue$ = 8						; size = 1
_value$ = 11						; size = 1
??4?$CEncrypt@_N@@QAE_N_N@Z PROC			; CEncrypt<bool>::operator=, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		type value = inValue;

  00003	8a 45 08	 mov	 al, BYTE PTR _inValue$[ebp]
  00006	88 45 0b	 mov	 BYTE PTR _value$[ebp], al

; 227  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 0b	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 228  : #ifdef _NOTUSE
; 229  : 		m_value = inValue;
; 230  : 		Debug();
; 231  : #endif
; 232  : 		return value;

  00012	8a 45 0b	 mov	 al, BYTE PTR _value$[ebp]

; 233  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@_N@@QAE_N_N@Z ENDP			; CEncrypt<bool>::operator=
_TEXT	ENDS
PUBLIC	??0ioAttackCountBuff@@QAE@XZ			; ioAttackCountBuff::ioAttackCountBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackcountbuff.cpp
xdata$x	SEGMENT
__unwindtable$??0ioAttackCountBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAttackCountBuff@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAttackCountBuff@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioAttackCountBuff@@QAE@XZ$2
__ehfuncinfo$??0ioAttackCountBuff@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioAttackCountBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioAttackCountBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioAttackCountBuff@@QAE@XZ PROC			; ioAttackCountBuff::ioAttackCountBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAttackCountBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAttackCountBuff@@6B@
  00026	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@XZ ; CEncrypt<bool>::CEncrypt<bool>
  0002b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00031	8d 8e 9c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2460]
  00037	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003b	ff d7		 call	 edi
  0003d	8d 8e ac 09 00
	00		 lea	 ecx, DWORD PTR [esi+2476]
  00043	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00047	ff d7		 call	 edi

; 11   : 
; 12   : }

  00049	8b c6		 mov	 eax, esi
  0004b	e8 00 00 00 00	 call	 __EH_epilog3
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAttackCountBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioAttackCountBuff@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioAttackCountBuff@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 9c 09 00
	00		 add	 ecx, 2460		; 0000099cH
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioAttackCountBuff@@QAE@XZ:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAttackCountBuff@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAttackCountBuff@@QAE@XZ ENDP			; ioAttackCountBuff::ioAttackCountBuff
; Function compile flags: /Ogsp
;	COMDAT ??_GioAttackCountBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAttackCountBuff@@UAEPAXI@Z PROC			; ioAttackCountBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioAttackCountBuff@@UAE@XZ ; ioAttackCountBuff::~ioAttackCountBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioAttackCountBuff@@UAEPAXI@Z ENDP			; ioAttackCountBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT ?LoadProperty@ioAttackCountBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -304					; size = 4
_rkLoader$GSCopy$ = -300				; size = 4
_value$525231 = -293					; size = 1
_szBuf$ = -292						; size = 260
__k$525218 = -32					; size = 22
__k$525007 = -28					; size = 15
__k$524882 = -28					; size = 16
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioAttackCountBuff@@UAEXAAVioINILoader@@@Z PROC ; ioAttackCountBuff::LoadProperty, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 28   : 	ioBuff::LoadProperty( rkLoader );

  0001a	56		 push	 esi

; 33   : 
; 34   : 	rkLoader.LoadString_e( "call_buff_name", "", szBuf, MAX_PATH );

  0001b	89 bd d0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00021	89 b5 d4 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], esi
  00027	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  0002c	68 03 01 00 00	 push	 259			; 00000103H
  00031	8d 85 dd fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	c6 85 dc fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  00041	e8 00 00 00 00	 call	 _memset
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	6a 03		 push	 3
  0004b	c7 45 e4 8e 84
	8e 89		 mov	 DWORD PTR __k$524882[ebp], -1987148658 ; 898e848eH
  00052	c7 45 e8 86 b3
	89 9f		 mov	 DWORD PTR __k$524882[ebp+4], -1618365562 ; 9f89b386H
  00059	c7 45 ec 8b 8a
	b4 84		 mov	 DWORD PTR __k$524882[ebp+8], -2068542837 ; 84b48a8bH
  00060	8d 45 e4	 lea	 eax, DWORD PTR __k$524882[ebp]
  00063	c7 45 f0 8c 81
	8e 00		 mov	 DWORD PTR __k$524882[ebp+12], 9339276 ; 008e818cH
  0006a	59		 pop	 ecx
$LL106@LoadProper:

; 29   : 
; 30   : 	char szBuf[MAX_PATH] = "";
; 31   : 	rkLoader.LoadString_e( "check_buff_name", "", szBuf, MAX_PATH );

  0006b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00071	83 c0 04	 add	 eax, 4
  00074	49		 dec	 ecx
  00075	75 f4		 jne	 SHORT $LL106@LoadProper
  00077	6a 0c		 push	 12			; 0000000cH
  00079	58		 pop	 eax
$LL103@LoadProper:
  0007a	8b c8		 mov	 ecx, eax
  0007c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00082	79 05		 jns	 SHORT $LN335@LoadProper
  00084	49		 dec	 ecx
  00085	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00088	41		 inc	 ecx
$LN335@LoadProper:
  00089	b2 ed		 mov	 dl, -19			; ffffffedH
  0008b	2a d1		 sub	 dl, cl
  0008d	30 54 05 e4	 xor	 BYTE PTR __k$524882[ebp+eax], dl
  00091	40		 inc	 eax
  00092	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00095	7c e3		 jl	 SHORT $LL103@LoadProper
  00097	53		 push	 ebx
  00098	68 04 01 00 00	 push	 260			; 00000104H
  0009d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000a3	50		 push	 eax
  000a4	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000a9	53		 push	 ebx
  000aa	8d 45 e4	 lea	 eax, DWORD PTR __k$524882[ebp]
  000ad	8b ce		 mov	 ecx, esi
  000af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  000b5	50		 push	 eax
  000b6	ff d6		 call	 esi

; 32   : 	m_stCheckBuff = szBuf;

  000b8	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000be	8d 8f 9c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2460]
  000c4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000ca	50		 push	 eax
  000cb	ff d7		 call	 edi
  000cd	6a 03		 push	 3

; 33   : 
; 34   : 	rkLoader.LoadString_e( "call_buff_name", "", szBuf, MAX_PATH );

  000cf	c7 45 e4 8e 8d
	87 86		 mov	 DWORD PTR __k$525007[ebp], -2037936754 ; 86878d8eH
  000d6	c7 45 e8 b2 8e
	9e 8c		 mov	 DWORD PTR __k$525007[ebp+4], -1935765838 ; 8c9e8eb2H
  000dd	c7 45 ec 8b b3
	85 8b		 mov	 DWORD PTR __k$525007[ebp+8], -1954172021 ; 8b85b38bH
  000e4	66 c7 45 f0 80
	89		 mov	 WORD PTR __k$525007[ebp+12], 35200 ; 00008980H
  000ea	8d 45 e4	 lea	 eax, DWORD PTR __k$525007[ebp]
  000ed	c6 45 f2 00	 mov	 BYTE PTR __k$525007[ebp+14], 0
  000f1	59		 pop	 ecx
$LL212@LoadProper:
  000f2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f8	83 c0 04	 add	 eax, 4
  000fb	49		 dec	 ecx
  000fc	75 f4		 jne	 SHORT $LL212@LoadProper
  000fe	6a 0c		 push	 12			; 0000000cH
  00100	58		 pop	 eax
$LL209@LoadProper:
  00101	8b c8		 mov	 ecx, eax
  00103	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00109	79 05		 jns	 SHORT $LN336@LoadProper
  0010b	49		 dec	 ecx
  0010c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0010f	41		 inc	 ecx
$LN336@LoadProper:
  00110	b2 ed		 mov	 dl, -19			; ffffffedH
  00112	2a d1		 sub	 dl, cl
  00114	30 54 05 e4	 xor	 BYTE PTR __k$525007[ebp+eax], dl
  00118	40		 inc	 eax
  00119	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0011c	7c e3		 jl	 SHORT $LL209@LoadProper
  0011e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00124	68 04 01 00 00	 push	 260			; 00000104H
  00129	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0012f	50		 push	 eax
  00130	53		 push	 ebx
  00131	8d 45 e4	 lea	 eax, DWORD PTR __k$525007[ebp]
  00134	50		 push	 eax
  00135	ff d6		 call	 esi

; 35   : 	m_stCallEndBuff = szBuf;

  00137	8b b5 d0 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0013d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00143	50		 push	 eax
  00144	8d 8e ac 09 00
	00		 lea	 ecx, DWORD PTR [esi+2476]
  0014a	ff d7		 call	 edi
  0014c	6a 05		 push	 5
  0014e	59		 pop	 ecx

; 36   : 
; 37   : 	m_bUseWeaponEquipMesh = rkLoader.LoadBool_e( "use_weapon_equip_mesh", false );

  0014f	c7 45 e0 98 9f
	8e b5		 mov	 DWORD PTR __k$525218[ebp], -1248944232 ; b58e9f98H
  00156	c7 45 e4 9a 89
	8a 9a		 mov	 DWORD PTR __k$525218[ebp+4], -1702196838 ; 9a8a899aH
  0015d	c7 45 e8 82 82
	b4 8f		 mov	 DWORD PTR __k$525218[ebp+8], -1883995518 ; 8fb48282H
  00164	c7 45 ec 9c 99
	82 9a		 mov	 DWORD PTR __k$525218[ebp+12], -1702717028 ; 9a82999cH
  0016b	c7 45 f0 b2 81
	8e 99		 mov	 DWORD PTR __k$525218[ebp+16], -1718713934 ; 998e81b2H
  00172	8d 45 e0	 lea	 eax, DWORD PTR __k$525218[ebp]
  00175	66 c7 45 f4 85
	00		 mov	 WORD PTR __k$525218[ebp+20], 133 ; 00000085H
  0017b	5b		 pop	 ebx
$LL318@LoadProper:
  0017c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00182	83 c0 04	 add	 eax, 4
  00185	49		 dec	 ecx
  00186	75 f4		 jne	 SHORT $LL318@LoadProper
  00188	80 75 f4 ed	 xor	 BYTE PTR __k$525218[ebp+20], -19 ; ffffffedH
  0018c	51		 push	 ecx
  0018d	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00193	8d 45 e0	 lea	 eax, DWORD PTR __k$525218[ebp]
  00196	50		 push	 eax
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  0019d	88 85 db fe ff
	ff		 mov	 BYTE PTR _value$525231[ebp], al
  001a3	8d 85 db fe ff
	ff		 lea	 eax, DWORD PTR _value$525231[ebp]
  001a9	50		 push	 eax
  001aa	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  001b0	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 38   : }

  001b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b8	5f		 pop	 edi
  001b9	33 cd		 xor	 ecx, ebp
  001bb	5e		 pop	 esi
  001bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c1	c9		 leave
  001c2	c2 04 00	 ret	 4
?LoadProperty@ioAttackCountBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioAttackCountBuff::LoadProperty
_TEXT	ENDS
EXTRN	?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z:PROC ; ioBaseChar::SetChangeEquipMesh
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioAttackCountBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$525255 = -1					; size = 1
_pOwner$ = 8						; size = 4
?StartBuff@ioAttackCountBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioAttackCountBuff::StartBuff, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 47   : 	ioBuff::StartBuff( pOwner );

  00005	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 48   : 
; 49   : 	if( m_bUseWeaponEquipMesh && pOwner )

  0000f	8d 45 ff	 lea	 eax, DWORD PTR _value$525255[ebp]
  00012	50		 push	 eax
  00013	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00019	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  0001e	80 7d ff 00	 cmp	 BYTE PTR _value$525255[ebp], 0
  00022	74 17		 je	 SHORT $LN1@StartBuff
  00024	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00028	74 11		 je	 SHORT $LN1@StartBuff

; 50   : 	{
; 51   : 		pOwner->SetChangeEquipMesh( m_ItemName, true );

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0002d	6a 01		 push	 1
  0002f	81 c6 44 02 00
	00		 add	 esi, 580		; 00000244H
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 ?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::SetChangeEquipMesh
$LN1@StartBuff:
  0003b	5e		 pop	 esi

; 52   : 	}
; 53   : }

  0003c	c9		 leave
  0003d	c2 04 00	 ret	 4
?StartBuff@ioAttackCountBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioAttackCountBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioAttackCountBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
_value$525261 = 19					; size = 1
?ApplyStartBuff@ioAttackCountBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioAttackCountBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 57   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 2e		 je	 SHORT $LN3@ApplyStart
$LN2@ApplyStart:

; 58   : 		return false;
; 59   : 
; 60   : 	if( m_bUseWeaponEquipMesh && pOwner )

  00018	8d 45 13	 lea	 eax, DWORD PTR _value$525261[ebp]
  0001b	50		 push	 eax
  0001c	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00022	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00027	80 7d 13 00	 cmp	 BYTE PTR _value$525261[ebp], 0
  0002b	74 17		 je	 SHORT $LN1@ApplyStart
  0002d	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00031	74 11		 je	 SHORT $LN1@ApplyStart

; 61   : 	{
; 62   : 		pOwner->SetChangeEquipMesh( m_ItemName, true );

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00036	6a 01		 push	 1
  00038	81 c6 44 02 00
	00		 add	 esi, 580		; 00000244H
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 ?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::SetChangeEquipMesh
$LN1@ApplyStart:

; 63   : 	}
; 64   : 
; 65   : 	return true;

  00044	b0 01		 mov	 al, 1
$LN3@ApplyStart:
  00046	5e		 pop	 esi

; 66   : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioAttackCountBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioAttackCountBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z:PROC ; ioBaseChar::CheckUseBuffSkill
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioAttackCountBuff@@UAEXM@Z
_TEXT	SEGMENT
_value$525272 = 8					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioAttackCountBuff@@UAEXM@Z PROC		; ioAttackCountBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 70   : 	switch( m_iOperationType )

  00006	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0000c	83 e8 00	 sub	 eax, 0
  0000f	0f 84 9d 00 00
	00		 je	 $LN1@ProcessBuf
  00015	48		 dec	 eax
  00016	74 0a		 je	 SHORT $LN5@ProcessBuf
  00018	48		 dec	 eax
  00019	74 54		 je	 SHORT $LN7@ProcessBuf
  0001b	48		 dec	 eax
  0001c	0f 85 95 00 00
	00		 jne	 $LN8@ProcessBuf
$LN5@ProcessBuf:

; 82   : 	case OT_DELAY:
; 83   : 	case OT_ACTIVE:
; 84   : 		{
; 85   : 			if( CheckEnableDelayState() )

  00022	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  00027	84 c0		 test	 al, al
  00029	0f 85 88 00 00
	00		 jne	 $LN8@ProcessBuf

; 86   : 				return;
; 87   : 
; 88   : 			CheckCallingProcess();

  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 89   : 
; 90   : 			if( GetBuffDuration() == 0 )

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0003d	85 c0		 test	 eax, eax
  0003f	74 76		 je	 SHORT $LN8@ProcessBuf

; 91   : 				return;
; 92   : 
; 93   : 			if( m_dwBuffEndTime <= FRAMEGETTIME() )

  00041	57		 push	 edi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00048	8b c8		 mov	 ecx, eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00050	8b f8		 mov	 edi, eax
  00052	8d 45 08	 lea	 eax, DWORD PTR _value$525272[ebp]
  00055	50		 push	 eax
  00056	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  0005c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00061	39 7d 08	 cmp	 DWORD PTR _value$525272[ebp], edi
  00064	5f		 pop	 edi
  00065	77 50		 ja	 SHORT $LN8@ProcessBuf

; 94   : 			{
; 95   : 				m_pOwner->CheckUseBuffSkill( m_Name, false );

  00067	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]

; 96   : 				SetReserveEndBuff();
; 97   : 				return;

  0006d	eb 23		 jmp	 SHORT $LN17@ProcessBuf
$LN7@ProcessBuf:

; 71   : 	{
; 72   : 	case OT_SWITCH:
; 73   : 		if( !CheckSwitchType( fTimePerSec ) && m_pOwner->GetState() != CS_OBJECT_RUNNING_ATTACK )

  0006f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00074	51		 push	 ecx
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType
  0007f	84 c0		 test	 al, al
  00081	75 26		 jne	 SHORT $LN6@ProcessBuf
  00083	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00089	80 b9 10 03 00
	00 6f		 cmp	 BYTE PTR [ecx+784], 111	; 0000006fH
  00090	74 17		 je	 SHORT $LN6@ProcessBuf
$LN17@ProcessBuf:

; 74   : 		{
; 75   : 			m_pOwner->CheckUseBuffSkill( m_Name, false );

  00092	6a 00		 push	 0
  00094	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::CheckUseBuffSkill

; 76   : 			SetReserveEndBuff();

  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 77   : 			return;

  000a7	eb 0e		 jmp	 SHORT $LN8@ProcessBuf
$LN6@ProcessBuf:

; 78   : 		}
; 79   : 
; 80   : 		CheckCallingProcess();

  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 81   : 		break;

  000b0	eb 05		 jmp	 SHORT $LN8@ProcessBuf
$LN1@ProcessBuf:

; 98   : 			}
; 99   : 		}
; 100  : 		break;
; 101  : 	case OT_PASSIVE:
; 102  : 		CheckCallingAreaWeapon();

  000b2	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN8@ProcessBuf:
  000b7	5e		 pop	 esi

; 103  : 		break;
; 104  : 	}
; 105  : }

  000b8	5d		 pop	 ebp
  000b9	c2 04 00	 ret	 4
?ProcessBuff@ioAttackCountBuff@@UAEXM@Z ENDP		; ioAttackCountBuff::ProcessBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioAttackCountBuff@@UAEXXZ
_TEXT	SEGMENT
_value$525280 = -1					; size = 1
?EndBuff@ioAttackCountBuff@@UAEXXZ PROC			; ioAttackCountBuff::EndBuff, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 111  : 	if( m_bUseWeaponEquipMesh && m_pOwner )

  00007	8d 45 ff	 lea	 eax, DWORD PTR _value$525280[ebp]
  0000a	50		 push	 eax
  0000b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00011	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00016	80 7d ff 00	 cmp	 BYTE PTR _value$525280[ebp], 0
  0001a	74 18		 je	 SHORT $LN1@EndBuff
  0001c	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00022	85 c9		 test	 ecx, ecx
  00024	74 0e		 je	 SHORT $LN1@EndBuff

; 112  : 	{
; 113  : 		m_pOwner->SetChangeEquipMesh( m_ItemName, false );

  00026	6a 00		 push	 0
  00028	8d 86 44 02 00
	00		 lea	 eax, DWORD PTR [esi+580]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?SetChangeEquipMesh@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::SetChangeEquipMesh
$LN1@EndBuff:

; 114  : 	}
; 115  : 
; 116  : 	ioBuff::EndBuff();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
  0003b	5e		 pop	 esi

; 117  : }

  0003c	c9		 leave
  0003d	c3		 ret	 0
?EndBuff@ioAttackCountBuff@@UAEXXZ ENDP			; ioAttackCountBuff::EndBuff
_TEXT	ENDS
PUBLIC	?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z ; ioAttackCountBuff::AttackWound
EXTRN	?GetBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@@Z:PROC ; ioBaseChar::GetBuff
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z$0
__ehfuncinfo$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackcountbuff.cpp
xdata$x	ENDS
;	COMDAT ?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z
_TEXT	SEGMENT
$T525284 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_pTarget$ = 8						; size = 4
_pWeapon$ = 12						; size = 4
?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z PROC ; ioAttackCountBuff::AttackWound, COMDAT
; _this$ = ecx

; 121  : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx

; 122  : 	if( !pTarget || !pWeapon )

  0000e	83 7d 08 00	 cmp	 DWORD PTR _pTarget$[ebp], 0
  00012	74 36		 je	 SHORT $LN5@AttackWoun
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _pWeapon$[ebp]
  00017	85 c9		 test	 ecx, ecx
  00019	74 2f		 je	 SHORT $LN5@AttackWoun

; 125  : 		return;
; 126  : 	}
; 127  : 
; 128  : 	ioBaseChar* pAttacker = pWeapon->GetOwner();

  0001b	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner

; 129  : 
; 130  : 	ioBuff* pCheckBuf = pTarget->GetBuff( m_stCheckBuff );

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pTarget$[ebp]
  00023	8d bb 9c 09 00
	00		 lea	 edi, DWORD PTR [ebx+2460]
  00029	57		 push	 edi
  0002a	8b f0		 mov	 esi, eax
  0002c	e8 00 00 00 00	 call	 ?GetBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@@Z ; ioBaseChar::GetBuff

; 131  : 	if( pCheckBuf )

  00031	85 c0		 test	 eax, eax
  00033	74 24		 je	 SHORT $LN4@AttackWoun

; 132  : 	{
; 133  : 		if( pAttacker )

  00035	85 f6		 test	 esi, esi
  00037	74 11		 je	 SHORT $LN5@AttackWoun

; 134  : 			CallEndBuff( pTarget, pAttacker->GetCharName() );

  00039	81 c6 d4 02 00
	00		 add	 esi, 724		; 000002d4H
  0003f	56		 push	 esi
  00040	ff 75 08	 push	 DWORD PTR _pTarget$[ebp]
  00043	8b cb		 mov	 ecx, ebx
  00045	e8 00 00 00 00	 call	 ?CallEndBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@ABVioHashString@@@Z ; ioAttackCountBuff::CallEndBuff
$LN5@AttackWoun:

; 123  : 	{
; 124  : 		SetReserveEndBuff();

  0004a	8b cb		 mov	 ecx, ebx
  0004c	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@AttackWoun:

; 145  : 		}
; 146  : 	}
; 147  : }

  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 08 00	 ret	 8
$LN4@AttackWoun:

; 135  : 		
; 136  : 		SetReserveEndBuff();
; 137  : 		return;
; 138  : 	}
; 139  : 	else
; 140  : 	{
; 141  : 		if( pAttacker )

  00059	85 f6		 test	 esi, esi
  0005b	74 f4		 je	 SHORT $LN1@AttackWoun

; 142  : 		{
; 143  : 			pTarget->AddNewBuff( m_stCheckBuff, pAttacker->GetCharName(), "", NULL );

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00062	8d 4d e4	 lea	 ecx, DWORD PTR $T525284[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _pTarget$[ebp]
  0006e	33 c0		 xor	 eax, eax
  00070	50		 push	 eax
  00071	50		 push	 eax
  00072	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00075	8d 45 e4	 lea	 eax, DWORD PTR $T525284[ebp]
  00078	50		 push	 eax
  00079	8d 86 d4 02 00
	00		 lea	 eax, DWORD PTR [esi+724]
  0007f	50		 push	 eax
  00080	57		 push	 edi
  00081	e8 00 00 00 00	 call	 ?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z ; ioBaseChar::AddNewBuff
  00086	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008a	8d 4d e4	 lea	 ecx, DWORD PTR $T525284[ebp]
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 144  : 			SendPacketBuff( pTarget, pAttacker, m_stCheckBuff );

  00093	57		 push	 edi
  00094	56		 push	 esi
  00095	ff 75 08	 push	 DWORD PTR _pTarget$[ebp]
  00098	8b cb		 mov	 ecx, ebx
  0009a	e8 00 00 00 00	 call	 ?SendPacketBuff@ioAttackCountBuff@@AAEXPAVioBaseChar@@0ABVioHashString@@@Z ; ioAttackCountBuff::SendPacketBuff
  0009f	eb b0		 jmp	 SHORT $LN1@AttackWoun
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T525284[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AttackWound@ioAttackCountBuff@@QAEXPAVioBaseChar@@PAVioWeapon@@@Z ENDP ; ioAttackCountBuff::AttackWound
PUBLIC	??0?$CEncrypt@_N@@QAE@ABV0@@Z			; CEncrypt<bool>::CEncrypt<bool>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$??0?$CEncrypt@_N@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CEncrypt@_N@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$CEncrypt@_N@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CEncrypt@_N@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$CEncrypt@_N@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inValue$ = 8						; size = 4
_value$525308 = 11					; size = 1
_value$525303 = 11					; size = 1
??0?$CEncrypt@_N@@QAE@ABV0@@Z PROC			; CEncrypt<bool>::CEncrypt<bool>, COMDAT
; _this$ = ecx

; 120  : 	CEncrypt( const CEncrypt<type> &inValue )   // 선언과 동시에 값을 대입하기 위해서

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$CEncrypt@_N@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CEncrypt@_N@@6B@
  0001a	e8 00 00 00 00	 call	 ??0ccddaabb@@QAE@XZ	; ccddaabb::ccddaabb
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	{
; 122  : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?Init@?$CEncrypt@_N@@AAEXXZ ; CEncrypt<bool>::Init

; 123  : 		*this = inValue;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0002d	8d 45 0b	 lea	 eax, DWORD PTR _value$525303[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00036	8a 45 0b	 mov	 al, BYTE PTR _value$525303[ebp]
  00039	88 45 0b	 mov	 BYTE PTR _value$525308[ebp], al
  0003c	8d 45 0b	 lea	 eax, DWORD PTR _value$525308[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 124  : 	}

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CEncrypt@_N@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1ccddaabb@@UAE@XZ	; ccddaabb::~ccddaabb
__ehhandler$??0?$CEncrypt@_N@@QAE@ABV0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CEncrypt@_N@@QAE@ABV0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CEncrypt@_N@@QAE@ABV0@@Z ENDP			; CEncrypt<bool>::CEncrypt<bool>
PUBLIC	??0ioAttackCountBuff@@QAE@ABV0@@Z		; ioAttackCountBuff::ioAttackCountBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackcountbuff.cpp
xdata$x	SEGMENT
__unwindtable$??0ioAttackCountBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAttackCountBuff@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioAttackCountBuff@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioAttackCountBuff@@QAE@ABV0@@Z$2
__ehfuncinfo$??0ioAttackCountBuff@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioAttackCountBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioAttackCountBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioAttackCountBuff@@QAE@ABV0@@Z PROC			; ioAttackCountBuff::ioAttackCountBuff, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAttackCountBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  00024	50		 push	 eax
  00025	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAttackCountBuff@@6B@
  00031	e8 00 00 00 00	 call	 ??0?$CEncrypt@_N@@QAE@ABV0@@Z ; CEncrypt<bool>::CEncrypt<bool>
  00036	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0003c	8d 87 9c 09 00
	00		 lea	 eax, DWORD PTR [edi+2460]
  00042	50		 push	 eax
  00043	8d 8e 9c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2460]
  00049	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004d	ff d3		 call	 ebx
  0004f	81 c7 ac 09 00
	00		 add	 edi, 2476		; 000009acH
  00055	57		 push	 edi
  00056	8d 8e ac 09 00
	00		 lea	 ecx, DWORD PTR [esi+2476]
  0005c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00060	ff d3		 call	 ebx

; 20   : }

  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAttackCountBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioAttackCountBuff@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	e9 00 00 00 00	 jmp	 ??1?$CEncrypt@_N@@UAE@XZ ; CEncrypt<bool>::~CEncrypt<bool>
__unwindfunclet$??0ioAttackCountBuff@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 9c 09 00
	00		 add	 ecx, 2460		; 0000099cH
  0001f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioAttackCountBuff@@QAE@ABV0@@Z:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAttackCountBuff@@QAE@ABV0@@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAttackCountBuff@@QAE@ABV0@@Z ENDP			; ioAttackCountBuff::ioAttackCountBuff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T525332 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ PROC		; ioAttackCountBuff::Clone, COMDAT
; _this$ = ecx

; 41   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 42   : 	return new ioAttackCountBuff( *this );

  0000e	68 bc 09 00 00	 push	 2492			; 000009bcH
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T525332[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioAttackCountBuff@@QAE@ABV0@@Z ; ioAttackCountBuff::ioAttackCountBuff
$LN3@Clone:

; 43   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T525332[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioAttackCountBuff@@UAEPAVioBuff@@XZ ENDP		; ioAttackCountBuff::Clone
END
