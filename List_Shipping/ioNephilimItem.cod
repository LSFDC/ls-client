; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioNephilimItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ ; ioPlayStage::GetBaseCharList
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplaystage.h
;	COMDAT ?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ PROC ; ioPlayStage::GetBaseCharList, COMDAT
; _this$ = ecx

; 755  : 	const BaseCharList& GetBaseCharList() const { return m_BaseCharList; }

  00000	8d 41 2c	 lea	 eax, DWORD PTR [ecx+44]
  00003	c3		 ret	 0
?GetBaseCharList@ioPlayStage@@QBEABV?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@XZ ENDP ; ioPlayStage::GetBaseCharList
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetCurJumpPowerAmt
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_fAmt$ = 8						; size = 4
?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z PROC		; ioBaseChar::SetCurJumpPowerAmt, COMDAT
; _this$ = ecx

; 2628 : 	inline void SetCurJumpPowerAmt( float fAmt ) { m_fCurJumpPowerAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	f3 0f 11 81 90
	0e 00 00	 movss	 DWORD PTR [ecx+3728], xmm0
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetCurJumpPowerAmt@ioBaseChar@@QAEXM@Z ENDP		; ioBaseChar::SetCurJumpPowerAmt
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetChargingState@ioBaseChar@@QAEX_N@Z		; ioBaseChar::SetChargingState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?SetChargingState@ioBaseChar@@QAEX_N@Z
_TEXT	SEGMENT
_bState$ = 8						; size = 1
?SetChargingState@ioBaseChar@@QAEX_N@Z PROC		; ioBaseChar::SetChargingState, COMDAT
; _this$ = ecx

; 2937 : 	inline void SetChargingState( bool bState ) { m_bChargingState = bState; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bState$[ebp]
  00006	88 81 54 20 00
	00		 mov	 BYTE PTR [ecx+8276], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetChargingState@ioBaseChar@@QAEX_N@Z ENDP		; ioBaseChar::SetChargingState
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R0?AVioZoneEffectWeapon@@@8			; ioZoneEffectWeapon `RTTI Type Descriptor'
PUBLIC	?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioWeapon@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iozoneeffectweapon.h
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioZoneEffectWeapon@@@8
_DATA	SEGMENT
??_R0?AVioZoneEffectWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioZoneEffectWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioZoneEffectWeapon@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z PROC ; ToZoneEffectWeapon, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 218  : 	if( !pWeapon || pWeapon->GetType() != ioWeapon::WT_ZONE_EFFECT )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 28		 je	 SHORT $LN1@ToZoneEffe
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 90 10 01 00
	00		 call	 DWORD PTR [eax+272]
  00015	83 f8 08	 cmp	 eax, 8
  00018	75 19		 jne	 SHORT $LN1@ToZoneEffe

; 220  : 
; 221  : 	return dynamic_cast< ioZoneEffectWeapon* >( pWeapon );

  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioZoneEffectWeapon@@@8
  00021	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeapon@@@8
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 02		 jmp	 SHORT $LN3@ToZoneEffe
$LN1@ToZoneEffe:

; 219  : 		return NULL;

  00033	33 c0		 xor	 eax, eax
$LN3@ToZoneEffe:
  00035	5e		 pop	 esi

; 222  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ENDP ; ToZoneEffectWeapon
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0AreaWeaponInfo@ioNephilimItem@@QAE@XZ	; ioNephilimItem::AreaWeaponInfo::AreaWeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0AreaWeaponInfo@ioNephilimItem@@QAE@XZ
_TEXT	SEGMENT
??0AreaWeaponInfo@ioNephilimItem@@QAE@XZ PROC		; ioNephilimItem::AreaWeaponInfo::AreaWeaponInfo, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00009	8b c6		 mov	 eax, esi
  0000b	5e		 pop	 esi
  0000c	c3		 ret	 0
??0AreaWeaponInfo@ioNephilimItem@@QAE@XZ ENDP		; ioNephilimItem::AreaWeaponInfo::AreaWeaponInfo
_TEXT	ENDS
PUBLIC	??1AreaWeaponInfo@ioNephilimItem@@QAE@XZ	; ioNephilimItem::AreaWeaponInfo::~AreaWeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1AreaWeaponInfo@ioNephilimItem@@QAE@XZ
_TEXT	SEGMENT
??1AreaWeaponInfo@ioNephilimItem@@QAE@XZ PROC		; ioNephilimItem::AreaWeaponInfo::~AreaWeaponInfo, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1AreaWeaponInfo@ioNephilimItem@@QAE@XZ ENDP		; ioNephilimItem::AreaWeaponInfo::~AreaWeaponInfo
_TEXT	ENDS
PUBLIC	?GetSubType@ioNephilimItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ ; ioNephilimItem::GetSubType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
;	COMDAT ?GetSubType@ioNephilimItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ
_TEXT	SEGMENT
?GetSubType@ioNephilimItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ PROC ; ioNephilimItem::GetSubType, COMDAT
; _this$ = ecx

; 96   : 	return WST_NEPHILIM_ITEM;

  00000	b8 85 00 00 00	 mov	 eax, 133		; 00000085H

; 97   : }

  00005	c3		 ret	 0
?GetSubType@ioNephilimItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ ENDP ; ioNephilimItem::GetSubType
_TEXT	ENDS
PUBLIC	??_C@_07BJEBJFJ@CS_NONE?$AA@			; `string'
PUBLIC	??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@		; `string'
PUBLIC	??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@		; `string'
PUBLIC	??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@	; `string'
PUBLIC	??_C@_0P@PCMOHAGC@CS_PUSH_ATTACK?$AA@		; `string'
PUBLIC	??_C@_0P@PCPNKEIL@CS_BOMB_ATTACK?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?GetAttackStateText@ioNephilimItem@@UBEPBDXZ	; ioNephilimItem::GetAttackStateText
;	COMDAT ??_C@_07BJEBJFJ@CS_NONE?$AA@
CONST	SEGMENT
??_C@_07BJEBJFJ@CS_NONE?$AA@ DB 'CS_NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@
CONST	SEGMENT
??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@ DB 'CS_CHARGING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@
CONST	SEGMENT
??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@ DB 'CS_ATTACK_FIRE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@
CONST	SEGMENT
??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@ DB 'CS_CHARGE_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PCMOHAGC@CS_PUSH_ATTACK?$AA@
CONST	SEGMENT
??_C@_0P@PCMOHAGC@CS_PUSH_ATTACK?$AA@ DB 'CS_PUSH_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PCPNKEIL@CS_BOMB_ATTACK?$AA@
CONST	SEGMENT
??_C@_0P@PCPNKEIL@CS_BOMB_ATTACK?$AA@ DB 'CS_BOMB_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetAttackStateText@ioNephilimItem@@UBEPBDXZ
_TEXT	SEGMENT
?GetAttackStateText@ioNephilimItem@@UBEPBDXZ PROC	; ioNephilimItem::GetAttackStateText, COMDAT
; _this$ = ecx

; 103  : 	switch( m_ChargeState )

  00000	8b 81 98 1a 00
	00		 mov	 eax, DWORD PTR [ecx+6808]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 33		 je	 SHORT $LN6@GetAttackS
  0000b	48		 dec	 eax
  0000c	74 2a		 je	 SHORT $LN5@GetAttackS
  0000e	48		 dec	 eax
  0000f	74 21		 je	 SHORT $LN4@GetAttackS
  00011	48		 dec	 eax
  00012	74 18		 je	 SHORT $LN3@GetAttackS
  00014	48		 dec	 eax
  00015	74 0f		 je	 SHORT $LN2@GetAttackS
  00017	48		 dec	 eax
  00018	74 06		 je	 SHORT $LN1@GetAttackS

; 117  : 	}
; 118  : 
; 119  : 	return "";

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 120  : }

  0001f	c3		 ret	 0
$LN1@GetAttackS:

; 115  : 	case CS_BOMB_ATTACK:
; 116  : 		return "CS_BOMB_ATTACK";

  00020	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@PCPNKEIL@CS_BOMB_ATTACK?$AA@

; 120  : }

  00025	c3		 ret	 0
$LN2@GetAttackS:

; 113  : 	case CS_PUSH_ATTACK:
; 114  : 		return "CS_PUSH_ATTACK";

  00026	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@PCMOHAGC@CS_PUSH_ATTACK?$AA@

; 120  : }

  0002b	c3		 ret	 0
$LN3@GetAttackS:

; 111  : 	case CS_CHARGE_ATTACK:
; 112  : 		return "CS_CHARGE_ATTACK";

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@

; 120  : }

  00031	c3		 ret	 0
$LN4@GetAttackS:

; 109  : 	case CS_ATTACK_FIRE:
; 110  : 		return "CS_ATTACK_FIRE";

  00032	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@

; 120  : }

  00037	c3		 ret	 0
$LN5@GetAttackS:

; 107  : 	case CS_CHARGING:
; 108  : 		return "CS_CHARGING";

  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@

; 120  : }

  0003d	c3		 ret	 0
$LN6@GetAttackS:

; 104  : 	{
; 105  : 	case CS_NONE:
; 106  : 		return "CS_NONE";

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07BJEBJFJ@CS_NONE?$AA@

; 120  : }

  00043	c3		 ret	 0
?GetAttackStateText@ioNephilimItem@@UBEPBDXZ ENDP	; ioNephilimItem::GetAttackStateText
_TEXT	ENDS
PUBLIC	?ProcessJumpAttack@ioNephilimItem@@UAEXPAVioBaseChar@@M@Z ; ioNephilimItem::ProcessJumpAttack
; Function compile flags: /Ogsp
;	COMDAT ?ProcessJumpAttack@ioNephilimItem@@UAEXPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fHeightGap$ = 12					; size = 4
?ProcessJumpAttack@ioNephilimItem@@UAEXPAVioBaseChar@@M@Z PROC ; ioNephilimItem::ProcessJumpAttack, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 227  : 	if( m_pExtendJump )

  00006	83 be c8 0b 00
	00 00		 cmp	 DWORD PTR [esi+3016], 0
  0000d	74 1b		 je	 SHORT $LN1@ProcessJum

; 228  : 		m_pExtendJump->ProcessJumpAttack( pOwner, fHeightGap );

  0000f	8b 86 c8 0b 00
	00		 mov	 eax, DWORD PTR [esi+3016]
  00015	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fHeightGap$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	51		 push	 ecx
  0001d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00022	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00025	8b c8		 mov	 ecx, eax
  00027	ff 52 24	 call	 DWORD PTR [edx+36]
$LN1@ProcessJum:

; 229  : 
; 230  : 	CheckAirJump( pOwner );

  0002a	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	8b ce		 mov	 ecx, esi
  00031	ff 90 b0 02 00
	00		 call	 DWORD PTR [eax+688]
  00037	5e		 pop	 esi

; 231  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?ProcessJumpAttack@ioNephilimItem@@UAEXPAVioBaseChar@@M@Z ENDP ; ioNephilimItem::ProcessJumpAttack
_TEXT	ENDS
PUBLIC	?IsChargeAttackState@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z ; ioNephilimItem::IsChargeAttackState
; Function compile flags: /Ogsp
;	COMDAT ?IsChargeAttackState@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsChargeAttackState@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioNephilimItem::IsChargeAttackState, COMDAT
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  : 	if( pOwner->GetState() == CS_ATTACK )

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00006	80 b8 10 03 00
	00 05		 cmp	 BYTE PTR [eax+784], 5
  0000d	75 0b		 jne	 SHORT $LN1@IsChargeAt

; 275  : 	{
; 276  : 		if( m_ChargeState == CS_CHARGING )

  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	39 81 98 1a 00
	00		 cmp	 DWORD PTR [ecx+6808], eax

; 277  : 			return true;

  00018	74 02		 je	 SHORT $LN3@IsChargeAt
$LN1@IsChargeAt:

; 278  : 	}
; 279  : 
; 280  : 	return false;

  0001a	32 c0		 xor	 al, al
$LN3@IsChargeAt:

; 281  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?IsChargeAttackState@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioNephilimItem::IsChargeAttackState
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
PUBLIC	?Init@ioNephilimItem@@IAEXXZ			; ioNephilimItem::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@ioNephilimItem@@IAEXXZ
_TEXT	SEGMENT
?Init@ioNephilimItem@@IAEXXZ PROC			; ioNephilimItem::Init, COMDAT
; _this$ = ecx

; 469  : 	m_ChargeState				= CS_NONE;
; 470  : 	m_SpecialState				= SS_NONE;
; 471  : 
; 472  : 	m_dwAttackStartTime			= 0;
; 473  : 	m_nCurCombo					= 0;
; 474  : 	m_iCurAirJump				= 0;
; 475  : 
; 476  : 	m_fAirJumpPowerRate			= 0.0f;

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	33 c0		 xor	 eax, eax
  00005	89 81 98 1a 00
	00		 mov	 DWORD PTR [ecx+6808], eax
  0000b	89 81 9c 1a 00
	00		 mov	 DWORD PTR [ecx+6812], eax
  00011	89 81 a0 1a 00
	00		 mov	 DWORD PTR [ecx+6816], eax
  00017	89 81 a4 1a 00
	00		 mov	 DWORD PTR [ecx+6820], eax
  0001d	89 81 58 0f 00
	00		 mov	 DWORD PTR [ecx+3928], eax
  00023	f3 0f 11 81 48
	0f 00 00	 movss	 DWORD PTR [ecx+3912], xmm0

; 477  : 	m_dwMotionEndTime = 0;

  0002b	89 81 a8 1a 00
	00		 mov	 DWORD PTR [ecx+6824], eax

; 478  : 	m_dwFireTime = 0;

  00031	89 81 ac 1a 00
	00		 mov	 DWORD PTR [ecx+6828], eax

; 479  : }

  00037	c3		 ret	 0
?Init@ioNephilimItem@@IAEXXZ ENDP			; ioNephilimItem::Init
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToAttackFire
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::FillItemGaugePacketHeader
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?ApplyNormalAttackResult@ioBaseChar@@QAEXH_N@Z:PROC ; ioBaseChar::ApplyNormalAttackResult
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?SetNormalAttackByAttribute@ioBaseChar@@QAEKABUAttackAttribute@@_NMM@Z:PROC ; ioBaseChar::SetNormalAttackByAttribute
EXTRN	?GetAttribute@ioFormalAttackGrp@@QBEPBUAttackAttribute@@W4AttackType@@H@Z:PROC ; ioFormalAttackGrp::GetAttribute
EXTRN	?InitActionStopDelay@ioBaseChar@@QAEX_N@Z:PROC	; ioBaseChar::InitActionStopDelay
EXTRN	?InitExtendAttackTagInfo@ioBaseChar@@QAEXXZ:PROC ; ioBaseChar::InitExtendAttackTagInfo
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__chkstk:PROC
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_dwCurTime$ = -32812					; size = 4
_kPacket$549797 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z PROC ; ioNephilimItem::ChangeToAttackFire, COMDAT
; _this$ = ecx

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 20 80 00 00	 mov	 eax, 32800		; 00008020H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 503  : 	if( !pOwner ) 

  00037	85 ff		 test	 edi, edi
  00039	0f 84 3a 01 00
	00		 je	 $LN1@ChangeToAt

; 504  : 		return;
; 505  : 
; 506  : 	ClearCancelInfo();

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	ff 90 3c 02 00
	00		 call	 DWORD PTR [eax+572]

; 507  : 
; 508  : 	DWORD dwCurTime = FRAMEGETTIME();

  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0004d	8b c8		 mov	 ecx, eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 509  : 
; 510  : 	pOwner->InitExtendAttackTagInfo();

  00055	8b cf		 mov	 ecx, edi
  00057	89 85 d4 7f ff
	ff		 mov	 DWORD PTR _dwCurTime$[ebp], eax
  0005d	e8 00 00 00 00	 call	 ?InitExtendAttackTagInfo@ioBaseChar@@QAEXXZ ; ioBaseChar::InitExtendAttackTagInfo

; 511  : 	pOwner->InitActionStopDelay( true );

  00062	6a 01		 push	 1
  00064	8b cf		 mov	 ecx, edi
  00066	e8 00 00 00 00	 call	 ?InitActionStopDelay@ioBaseChar@@QAEX_N@Z ; ioBaseChar::InitActionStopDelay

; 512  : 
; 513  : 	const AttackAttribute *pAttribute = m_FormalAttack.GetAttribute( AT_NORMAL, m_nCurCombo );

  0006b	ff b6 a4 1a 00
	00		 push	 DWORD PTR [esi+6820]
  00071	8d 8e 2c 06 00
	00		 lea	 ecx, DWORD PTR [esi+1580]
  00077	6a 00		 push	 0
  00079	e8 00 00 00 00	 call	 ?GetAttribute@ioFormalAttackGrp@@QBEPBUAttackAttribute@@W4AttackType@@H@Z ; ioFormalAttackGrp::GetAttribute
  0007e	8b d8		 mov	 ebx, eax

; 514  : 	if( pAttribute )

  00080	85 db		 test	 ebx, ebx
  00082	74 47		 je	 SHORT $LN2@ChangeToAt

; 515  : 	{
; 516  : 		pOwner->SetNormalAttackByAttribute( *pAttribute );

  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008c	51		 push	 ecx
  0008d	51		 push	 ecx
  0008e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00099	6a 01		 push	 1
  0009b	53		 push	 ebx
  0009c	8b cf		 mov	 ecx, edi
  0009e	e8 00 00 00 00	 call	 ?SetNormalAttackByAttribute@ioBaseChar@@QAEKABUAttackAttribute@@_NMM@Z ; ioBaseChar::SetNormalAttackByAttribute

; 517  : 
; 518  : 		m_szCurAni = pAttribute->m_AttackAnimation;

  000a3	53		 push	 ebx
  000a4	8d 8e 10 0f 00
	00		 lea	 ecx, DWORD PTR [esi+3856]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 519  : 		m_fCurAniRate = pAttribute->m_fAttackAniRate;

  000b0	d9 43 10	 fld	 DWORD PTR [ebx+16]

; 520  : 
; 521  : 		m_dwInputCancelCheckTime = dwCurTime;

  000b3	8b 85 d4 7f ff
	ff		 mov	 eax, DWORD PTR _dwCurTime$[ebp]
  000b9	d9 9e 20 0f 00
	00		 fstp	 DWORD PTR [esi+3872]
  000bf	89 86 0c 0f 00
	00		 mov	 DWORD PTR [esi+3852], eax

; 522  : 		m_dwCancelCheckTime = dwCurTime;

  000c5	89 86 08 0f 00
	00		 mov	 DWORD PTR [esi+3848], eax
$LN2@ChangeToAt:

; 523  : 	}
; 524  : 
; 525  : 	pOwner->ApplyNormalAttackResult( m_nCurCombo );

  000cb	6a 00		 push	 0
  000cd	ff b6 a4 1a 00
	00		 push	 DWORD PTR [esi+6820]
  000d3	8b cf		 mov	 ecx, edi
  000d5	e8 00 00 00 00	 call	 ?ApplyNormalAttackResult@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::ApplyNormalAttackResult

; 526  : 	m_ChargeState = CS_ATTACK_FIRE;

  000da	6a 02		 push	 2
  000dc	5b		 pop	 ebx
  000dd	89 9e 98 1a 00
	00		 mov	 DWORD PTR [esi+6808], ebx

; 527  : 
; 528  : 	if( pOwner->IsNeedSendNetwork() )

  000e3	8b 07		 mov	 eax, DWORD PTR [edi]
  000e5	8b cf		 mov	 ecx, edi
  000e7	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  000ed	84 c0		 test	 al, al
  000ef	0f 84 84 00 00
	00		 je	 $LN1@ChangeToAt

; 529  : 	{
; 530  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  000f5	68 27 41 00 00	 push	 16679			; 00004127H
  000fa	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549797[ebp]
  00100	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00105	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 531  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  00109	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549797[ebp]
  0010f	50		 push	 eax
  00110	57		 push	 edi
  00111	8b ce		 mov	 ecx, esi
  00113	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 532  : 		kPacket << CS_ATTACK_FIRE;

  00118	53		 push	 ebx
  00119	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549797[ebp]
  0011f	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 533  : 		kPacket << m_nCurCombo;

  00124	ff b6 a4 1a 00
	00		 push	 DWORD PTR [esi+6820]
  0012a	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549797[ebp]
  00130	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 534  : 		kPacket << pOwner->GetWorldPosition();

  00135	8b 07		 mov	 eax, DWORD PTR [edi]
  00137	8b cf		 mov	 ecx, edi
  00139	ff 50 70	 call	 DWORD PTR [eax+112]
  0013c	50		 push	 eax
  0013d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549797[ebp]
  00143	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 535  : 		kPacket << pOwner->GetTargetRot();

  00148	81 c7 a4 06 00
	00		 add	 edi, 1700		; 000006a4H
  0014e	57		 push	 edi
  0014f	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549797[ebp]
  00155	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 536  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0015a	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549797[ebp]
  00160	6a 00		 push	 0
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 537  : 	}

  00168	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0016c	59		 pop	 ecx
  0016d	59		 pop	 ecx
  0016e	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549797[ebp]
  00174	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToAt:

; 538  : }

  00179	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00183	59		 pop	 ecx
  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018a	33 cd		 xor	 ecx, ebp
  0018c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00191	c9		 leave
  00192	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549797[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32816]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioNephilimItem::ChangeToAttackFire
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z ; ioNephilimItem::ChangeToSpecialAttack
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z$0
__ehfuncinfo$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z
_TEXT	SEGMENT
_kPacket$549832 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_nCharState$ = 12					; size = 4
_eChargeState$ = 16					; size = 4
_bSendNetwork$ = 20					; size = 1
?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z PROC ; ioNephilimItem::ChangeToSpecialAttack, COMDAT
; _this$ = ecx

; 597  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 1c 80 00 00	 mov	 eax, 32796		; 0000801cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00034	8b f9		 mov	 edi, ecx

; 598  : 	if ( !pOwner )

  00036	85 f6		 test	 esi, esi
  00038	0f 84 aa 00 00
	00		 je	 $LN1@ChangeToSp

; 599  : 		return;
; 600  : 
; 601  : 	Init();

  0003e	e8 00 00 00 00	 call	 ?Init@ioNephilimItem@@IAEXXZ ; ioNephilimItem::Init

; 602  : 	
; 603  : 	pOwner->SetState( nCharState );

  00043	6a 01		 push	 1
  00045	ff 75 0c	 push	 DWORD PTR _nCharState$[ebp]
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 604  : 	m_ChargeState = eChargeState;
; 605  : 
; 606  : 	if( bSendNetwork && pOwner->IsNeedSendNetwork() )

  0004f	80 7d 14 00	 cmp	 BYTE PTR _bSendNetwork$[ebp], 0
  00053	8b 45 10	 mov	 eax, DWORD PTR _eChargeState$[ebp]
  00056	89 87 98 1a 00
	00		 mov	 DWORD PTR [edi+6808], eax
  0005c	0f 84 86 00 00
	00		 je	 $LN1@ChangeToSp
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	8b ce		 mov	 ecx, esi
  00066	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  0006c	84 c0		 test	 al, al
  0006e	74 78		 je	 SHORT $LN1@ChangeToSp

; 607  : 	{
; 608  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  00070	68 27 41 00 00	 push	 16679			; 00004127H
  00075	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549832[ebp]
  0007b	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00080	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 609  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  00084	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549832[ebp]
  0008a	50		 push	 eax
  0008b	56		 push	 esi
  0008c	8b cf		 mov	 ecx, edi
  0008e	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 610  : 		kPacket << m_ChargeState;

  00093	ff b7 98 1a 00
	00		 push	 DWORD PTR [edi+6808]
  00099	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549832[ebp]
  0009f	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 611  : 		kPacket << pOwner->GetWorldPosition();

  000a4	8b 06		 mov	 eax, DWORD PTR [esi]
  000a6	8b ce		 mov	 ecx, esi
  000a8	ff 50 70	 call	 DWORD PTR [eax+112]
  000ab	50		 push	 eax
  000ac	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549832[ebp]
  000b2	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 612  : 		kPacket << pOwner->GetTargetRot();

  000b7	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  000bd	56		 push	 esi
  000be	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549832[ebp]
  000c4	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 613  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  000c9	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549832[ebp]
  000cf	6a 00		 push	 0
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 614  : 	}

  000d7	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000db	59		 pop	 ecx
  000dc	59		 pop	 ecx
  000dd	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549832[ebp]
  000e3	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToSp:

; 615  : }

  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	c9		 leave
  00100	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549832[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32808]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z ENDP ; ioNephilimItem::ChangeToSpecialAttack
PUBLIC	??_7ioNephilimPushState@@6B@			; ioNephilimPushState::`vftable'
PUBLIC	??0ioNephilimPushState@@QAE@XZ			; ioNephilimPushState::ioNephilimPushState
PUBLIC	??_R4ioNephilimPushState@@6B@			; ioNephilimPushState::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioNephilimPushState@@@8			; ioNephilimPushState `RTTI Type Descriptor'
PUBLIC	??_R3ioNephilimPushState@@8			; ioNephilimPushState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioNephilimPushState@@8			; ioNephilimPushState::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioNephilimPushState@@8		; ioNephilimPushState::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioSpecialStateBase@@8		; ioSpecialStateBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioSpecialStateBase@@@8			; ioSpecialStateBase `RTTI Type Descriptor'
PUBLIC	??_R3ioSpecialStateBase@@8			; ioSpecialStateBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSpecialStateBase@@8			; ioSpecialStateBase::`RTTI Base Class Array'
PUBLIC	?Initialize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@@Z ; ioNephilimPushState::Initialize
PUBLIC	?Finalize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@1@Z ; ioNephilimPushState::Finalize
PUBLIC	?LoadProperty@ioSpecialStateBase@@UAEXAAVioINILoader@@@Z ; ioSpecialStateBase::LoadProperty
PUBLIC	?GetStateName@ioNephilimPushState@@UAEPBDXZ	; ioNephilimPushState::GetStateName
PUBLIC	?GetState@ioNephilimPushState@@UAE?BW4CharState@@XZ ; ioNephilimPushState::GetState
PUBLIC	?GetAttackSpeedRate@ioSpecialStateBase@@UAEMPAVioBaseChar@@M@Z ; ioSpecialStateBase::GetAttackSpeedRate
PUBLIC	?CheckSpecialState@ioNephilimPushState@@UAEXPAVioBaseChar@@@Z ; ioNephilimPushState::CheckSpecialState
PUBLIC	?ProcessState@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z ; ioSpecialStateBase::ProcessState
PUBLIC	?ProcessMoveSpeed@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z ; ioSpecialStateBase::ProcessMoveSpeed
PUBLIC	?IsCanNoWound@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ; ioSpecialStateBase::IsCanNoWound
PUBLIC	?IsCollisionAvailableWeapon@ioSpecialStateBase@@UAE_NPAVioBaseChar@@PAVioWeapon@@@Z ; ioSpecialStateBase::IsCollisionAvailableWeapon
PUBLIC	?IsEntityCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@PAVioGameEntity@@@Z ; ioSpecialStateBase::IsEntityCollisionSkipState
PUBLIC	?IsSendControlInfoToUser@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ; ioSpecialStateBase::IsSendControlInfoToUser
PUBLIC	?IsIgnoreAttackOverDelay@ioSpecialStateBase@@UAE_NXZ ; ioSpecialStateBase::IsIgnoreAttackOverDelay
PUBLIC	?IsLandingEnable@ioSpecialStateBase@@UAE_NXZ	; ioSpecialStateBase::IsLandingEnable
PUBLIC	?IsFallStateCheck@ioSpecialStateBase@@UAE_NXZ	; ioSpecialStateBase::IsFallStateCheck
PUBLIC	?IsEnableBlowWounded@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ; ioSpecialStateBase::IsEnableBlowWounded
PUBLIC	?IsNoDropState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ; ioSpecialStateBase::IsNoDropState
PUBLIC	?IsCanChangeJumppingState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ; ioSpecialStateBase::IsCanChangeJumppingState
PUBLIC	?IsEnableDashState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ; ioSpecialStateBase::IsEnableDashState
PUBLIC	?IsStateEnd@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ; ioSpecialStateBase::IsStateEnd
PUBLIC	?IsProcessFlyMove@ioSpecialStateBase@@UAE_NXZ	; ioSpecialStateBase::IsProcessFlyMove
PUBLIC	?IsFloatingState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@@Z ; ioSpecialStateBase::IsFloatingState
PUBLIC	?IsInitializeSync@ioSpecialStateBase@@UAE_NXZ	; ioSpecialStateBase::IsInitializeSync
PUBLIC	?IsJoinSync@ioSpecialStateBase@@UAE_NXZ		; ioSpecialStateBase::IsJoinSync
PUBLIC	?IsEnableBlowWounded@ioNephilimPushState@@UAE_NXZ ; ioNephilimPushState::IsEnableBlowWounded
EXTRN	??0ioSpecialStateBase@@QAE@XZ:PROC		; ioSpecialStateBase::ioSpecialStateBase
EXTRN	?ProcessMove@ioSpecialStateBase@@UAE_NPAVioBaseChar@@MKK@Z:PROC ; ioSpecialStateBase::ProcessMove
EXTRN	?ProcessKeyInput@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z:PROC ; ioSpecialStateBase::ProcessKeyInput
EXTRN	?IsCharCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@KKK_N1W4TeamType@@2@Z:PROC ; ioSpecialStateBase::IsCharCollisionSkipState
EXTRN	?GetGravity@ioSpecialStateBase@@UAEXPAVioBaseChar@@AAM@Z:PROC ; ioSpecialStateBase::GetGravity
EXTRN	?FillJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; ioSpecialStateBase::FillJoinSync
EXTRN	?ApplyJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; ioSpecialStateBase::ApplyJoinSync
EXTRN	?ApplyStateSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; ioSpecialStateBase::ApplyStateSync
EXTRN	?CheckFallStateChange@ioSpecialStateBase@@UAEXPAVioBaseChar@@MM_NM@Z:PROC ; ioSpecialStateBase::CheckFallStateChange
EXTRN	??_EioNephilimPushState@@UAEPAXI@Z:PROC		; ioNephilimPushState::`vector deleting destructor'
;	COMDAT ??_R2ioSpecialStateBase@@8
rdata$r	SEGMENT
??_R2ioSpecialStateBase@@8 DD FLAT:??_R1A@?0A@EA@ioSpecialStateBase@@8 ; ioSpecialStateBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioSpecialStateBase@@8
rdata$r	SEGMENT
??_R3ioSpecialStateBase@@8 DD 00H			; ioSpecialStateBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioSpecialStateBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSpecialStateBase@@@8
_DATA	SEGMENT
??_R0?AVioSpecialStateBase@@@8 DD FLAT:??_7type_info@@6B@ ; ioSpecialStateBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSpecialStateBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSpecialStateBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSpecialStateBase@@8 DD FLAT:??_R0?AVioSpecialStateBase@@@8 ; ioSpecialStateBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSpecialStateBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioNephilimPushState@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioNephilimPushState@@8 DD FLAT:??_R0?AVioNephilimPushState@@@8 ; ioNephilimPushState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioNephilimPushState@@8
rdata$r	ENDS
;	COMDAT ??_R2ioNephilimPushState@@8
rdata$r	SEGMENT
??_R2ioNephilimPushState@@8 DD FLAT:??_R1A@?0A@EA@ioNephilimPushState@@8 ; ioNephilimPushState::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioSpecialStateBase@@8
rdata$r	ENDS
;	COMDAT ??_R3ioNephilimPushState@@8
rdata$r	SEGMENT
??_R3ioNephilimPushState@@8 DD 00H			; ioNephilimPushState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioNephilimPushState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioNephilimPushState@@@8
_DATA	SEGMENT
??_R0?AVioNephilimPushState@@@8 DD FLAT:??_7type_info@@6B@ ; ioNephilimPushState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNephilimPushState@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioNephilimPushState@@6B@
rdata$r	SEGMENT
??_R4ioNephilimPushState@@6B@ DD 00H			; ioNephilimPushState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioNephilimPushState@@@8
	DD	FLAT:??_R3ioNephilimPushState@@8
rdata$r	ENDS
;	COMDAT ??_7ioNephilimPushState@@6B@
CONST	SEGMENT
??_7ioNephilimPushState@@6B@ DD FLAT:??_R4ioNephilimPushState@@6B@ ; ioNephilimPushState::`vftable'
	DD	FLAT:?Initialize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@@Z
	DD	FLAT:?Finalize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@1@Z
	DD	FLAT:?LoadProperty@ioSpecialStateBase@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetStateName@ioNephilimPushState@@UAEPBDXZ
	DD	FLAT:?GetState@ioNephilimPushState@@UAE?BW4CharState@@XZ
	DD	FLAT:?GetAttackSpeedRate@ioSpecialStateBase@@UAEMPAVioBaseChar@@M@Z
	DD	FLAT:?CheckSpecialState@ioNephilimPushState@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessState@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessMoveSpeed@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessMove@ioSpecialStateBase@@UAE_NPAVioBaseChar@@MKK@Z
	DD	FLAT:?ProcessKeyInput@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsCanNoWound@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioSpecialStateBase@@UAE_NPAVioBaseChar@@PAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@PAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@KKK_N1W4TeamType@@2@Z
	DD	FLAT:?IsSendControlInfoToUser@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsIgnoreAttackOverDelay@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsLandingEnable@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsFallStateCheck@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsEnableBlowWounded@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoDropState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetGravity@ioSpecialStateBase@@UAEXPAVioBaseChar@@AAM@Z
	DD	FLAT:?IsCanChangeJumppingState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableDashState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsStateEnd@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsProcessFlyMove@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsFloatingState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@@Z
	DD	FLAT:?IsInitializeSync@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsJoinSync@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?FillJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?ApplyJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?ApplyStateSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?CheckFallStateChange@ioSpecialStateBase@@UAEXPAVioBaseChar@@MM_NM@Z
	DD	FLAT:??_EioNephilimPushState@@UAEPAXI@Z
	DD	FLAT:?IsEnableBlowWounded@ioNephilimPushState@@UAE_NXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioNephilimPushState@@QAE@XZ
_TEXT	SEGMENT
??0ioNephilimPushState@@QAE@XZ PROC			; ioNephilimPushState::ioNephilimPushState, COMDAT
; _this$ = ecx

; 855  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioSpecialStateBase@@QAE@XZ ; ioSpecialStateBase::ioSpecialStateBase
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimPushState@@6B@

; 856  : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioNephilimPushState@@QAE@XZ ENDP			; ioNephilimPushState::ioNephilimPushState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iospecialstatebase.h
_TEXT	ENDS
;	COMDAT ?LoadProperty@ioSpecialStateBase@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$ = 8						; size = 4
?LoadProperty@ioSpecialStateBase@@UAEXAAVioINILoader@@@Z PROC ; ioSpecialStateBase::LoadProperty, COMDAT
; _this$ = ecx

; 18   : 	virtual void LoadProperty( ioINILoader &rkLoader ){}

  00000	c2 04 00	 ret	 4
?LoadProperty@ioSpecialStateBase@@UAEXAAVioINILoader@@@Z ENDP ; ioSpecialStateBase::LoadProperty
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetAttackSpeedRate@ioSpecialStateBase@@UAEMPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fMaxSpeed$ = 12					; size = 4
?GetAttackSpeedRate@ioSpecialStateBase@@UAEMPAVioBaseChar@@M@Z PROC ; ioSpecialStateBase::GetAttackSpeedRate, COMDAT
; _this$ = ecx

; 26   : 	virtual float GetAttackSpeedRate( ioBaseChar* pOwner, float fMaxSpeed ){ return fMaxSpeed; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 0c	 fld	 DWORD PTR _fMaxSpeed$[ebp]
  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?GetAttackSpeedRate@ioSpecialStateBase@@UAEMPAVioBaseChar@@M@Z ENDP ; ioSpecialStateBase::GetAttackSpeedRate
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessState@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ProcessState@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::ProcessState, COMDAT
; _this$ = ecx

; 30   : 	virtual void ProcessState( IN ioBaseChar* pOwner ){}

  00000	c2 04 00	 ret	 4
?ProcessState@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::ProcessState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessMoveSpeed@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ProcessMoveSpeed@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::ProcessMoveSpeed, COMDAT
; _this$ = ecx

; 31   : 	virtual void ProcessMoveSpeed( ioBaseChar* pOwner ){}

  00000	c2 04 00	 ret	 4
?ProcessMoveSpeed@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::ProcessMoveSpeed
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanNoWound@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCanNoWound@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsCanNoWound, COMDAT
; _this$ = ecx

; 37   : 	virtual bool IsCanNoWound( ioBaseChar* pOwner ) { return false; };

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsCanNoWound@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsCanNoWound
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCollisionAvailableWeapon@ioSpecialStateBase@@UAE_NPAVioBaseChar@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_pWeapon$ = 12						; size = 4
?IsCollisionAvailableWeapon@ioSpecialStateBase@@UAE_NPAVioBaseChar@@PAVioWeapon@@@Z PROC ; ioSpecialStateBase::IsCollisionAvailableWeapon, COMDAT
; _this$ = ecx

; 38   : 	virtual bool IsCollisionAvailableWeapon( ioBaseChar* pOwner, ioWeapon *pWeapon ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 08 00	 ret	 8
?IsCollisionAvailableWeapon@ioSpecialStateBase@@UAE_NPAVioBaseChar@@PAVioWeapon@@@Z ENDP ; ioSpecialStateBase::IsCollisionAvailableWeapon
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEntityCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_pColEntity$ = 12					; size = 4
?IsEntityCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@PAVioGameEntity@@@Z PROC ; ioSpecialStateBase::IsEntityCollisionSkipState, COMDAT
; _this$ = ecx

; 39   : 	virtual bool IsEntityCollisionSkipState( const ioBaseChar *const pOwner, ioGameEntity* pColEntity ) const { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEntityCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@PAVioGameEntity@@@Z ENDP ; ioSpecialStateBase::IsEntityCollisionSkipState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsSendControlInfoToUser@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsSendControlInfoToUser@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsSendControlInfoToUser, COMDAT
; _this$ = ecx

; 49   : 	virtual bool IsSendControlInfoToUser( ioBaseChar* pOwner ){ return true; }	

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?IsSendControlInfoToUser@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsSendControlInfoToUser
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsIgnoreAttackOverDelay@ioSpecialStateBase@@UAE_NXZ
_TEXT	SEGMENT
?IsIgnoreAttackOverDelay@ioSpecialStateBase@@UAE_NXZ PROC ; ioSpecialStateBase::IsIgnoreAttackOverDelay, COMDAT
; _this$ = ecx

; 50   : 	virtual bool IsIgnoreAttackOverDelay(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsIgnoreAttackOverDelay@ioSpecialStateBase@@UAE_NXZ ENDP ; ioSpecialStateBase::IsIgnoreAttackOverDelay
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsLandingEnable@ioSpecialStateBase@@UAE_NXZ
_TEXT	SEGMENT
?IsLandingEnable@ioSpecialStateBase@@UAE_NXZ PROC	; ioSpecialStateBase::IsLandingEnable, COMDAT
; _this$ = ecx

; 51   : 	virtual bool IsLandingEnable(){ return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsLandingEnable@ioSpecialStateBase@@UAE_NXZ ENDP	; ioSpecialStateBase::IsLandingEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsFallStateCheck@ioSpecialStateBase@@UAE_NXZ
_TEXT	SEGMENT
?IsFallStateCheck@ioSpecialStateBase@@UAE_NXZ PROC	; ioSpecialStateBase::IsFallStateCheck, COMDAT
; _this$ = ecx

; 52   : 	virtual bool IsFallStateCheck(){ return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsFallStateCheck@ioSpecialStateBase@@UAE_NXZ ENDP	; ioSpecialStateBase::IsFallStateCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableBlowWounded@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsEnableBlowWounded@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsEnableBlowWounded, COMDAT
; _this$ = ecx

; 53   : 	virtual bool IsEnableBlowWounded( ioBaseChar *pOwner ){ return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?IsEnableBlowWounded@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsEnableBlowWounded
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsNoDropState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsNoDropState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsNoDropState, COMDAT
; _this$ = ecx

; 54   : 	virtual bool IsNoDropState( ioBaseChar* pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsNoDropState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsNoDropState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCanChangeJumppingState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCanChangeJumppingState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsCanChangeJumppingState, COMDAT
; _this$ = ecx

; 56   : 	virtual bool IsCanChangeJumppingState( ioBaseChar* pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsCanChangeJumppingState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsCanChangeJumppingState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableDashState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsEnableDashState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsEnableDashState, COMDAT
; _this$ = ecx

; 58   : 	virtual bool IsEnableDashState( ioBaseChar* pOwner ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsEnableDashState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsEnableDashState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsStateEnd@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsStateEnd@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsStateEnd, COMDAT
; _this$ = ecx

; 61   : 	virtual bool IsStateEnd( ioBaseChar* pOwner ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsStateEnd@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsStateEnd
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsProcessFlyMove@ioSpecialStateBase@@UAE_NXZ
_TEXT	SEGMENT
?IsProcessFlyMove@ioSpecialStateBase@@UAE_NXZ PROC	; ioSpecialStateBase::IsProcessFlyMove, COMDAT
; _this$ = ecx

; 62   : 	virtual bool IsProcessFlyMove(){ return false; }	

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsProcessFlyMove@ioSpecialStateBase@@UAE_NXZ ENDP	; ioSpecialStateBase::IsProcessFlyMove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsFloatingState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsFloatingState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@@Z PROC ; ioSpecialStateBase::IsFloatingState, COMDAT
; _this$ = ecx

; 64   : 	virtual bool IsFloatingState( const ioBaseChar * const pOwner ) const { return false; }	

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsFloatingState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@@Z ENDP ; ioSpecialStateBase::IsFloatingState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsInitializeSync@ioSpecialStateBase@@UAE_NXZ
_TEXT	SEGMENT
?IsInitializeSync@ioSpecialStateBase@@UAE_NXZ PROC	; ioSpecialStateBase::IsInitializeSync, COMDAT
; _this$ = ecx

; 68   : 	virtual bool IsInitializeSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsInitializeSync@ioSpecialStateBase@@UAE_NXZ ENDP	; ioSpecialStateBase::IsInitializeSync
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsJoinSync@ioSpecialStateBase@@UAE_NXZ
_TEXT	SEGMENT
?IsJoinSync@ioSpecialStateBase@@UAE_NXZ PROC		; ioSpecialStateBase::IsJoinSync, COMDAT
; _this$ = ecx

; 71   : 	virtual bool IsJoinSync(){ return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsJoinSync@ioSpecialStateBase@@UAE_NXZ ENDP		; ioSpecialStateBase::IsJoinSync
_TEXT	ENDS
PUBLIC	??_C@_0BH@MBNCMJKN@CS_NEPHILIM_PUSH_STATE?$AA@	; `string'
;	COMDAT ??_C@_0BH@MBNCMJKN@CS_NEPHILIM_PUSH_STATE?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.h
CONST	SEGMENT
??_C@_0BH@MBNCMJKN@CS_NEPHILIM_PUSH_STATE?$AA@ DB 'CS_NEPHILIM_PUSH_STATE'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetStateName@ioNephilimPushState@@UAEPBDXZ
_TEXT	SEGMENT
?GetStateName@ioNephilimPushState@@UAEPBDXZ PROC	; ioNephilimPushState::GetStateName, COMDAT
; _this$ = ecx

; 144  : 	virtual const char* GetStateName(){ return "CS_NEPHILIM_PUSH_STATE"; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@MBNCMJKN@CS_NEPHILIM_PUSH_STATE?$AA@
  00005	c3		 ret	 0
?GetStateName@ioNephilimPushState@@UAEPBDXZ ENDP	; ioNephilimPushState::GetStateName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetState@ioNephilimPushState@@UAE?BW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioNephilimPushState@@UAE?BW4CharState@@XZ PROC ; ioNephilimPushState::GetState, COMDAT
; _this$ = ecx

; 145  : 	virtual const CharState GetState(){ return CS_NEPHILIM_PUSH_STATE; }

  00000	b0 9e		 mov	 al, 158			; 0000009eH
  00002	c3		 ret	 0
?GetState@ioNephilimPushState@@UAE?BW4CharState@@XZ ENDP ; ioNephilimPushState::GetState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableBlowWounded@ioNephilimPushState@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableBlowWounded@ioNephilimPushState@@UAE_NXZ PROC	; ioNephilimPushState::IsEnableBlowWounded, COMDAT
; _this$ = ecx

; 146  : 	virtual bool IsEnableBlowWounded(){ return false; }	

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsEnableBlowWounded@ioNephilimPushState@@UAE_NXZ ENDP	; ioNephilimPushState::IsEnableBlowWounded
_TEXT	ENDS
PUBLIC	??1ioNephilimPushState@@UAE@XZ			; ioNephilimPushState::~ioNephilimPushState
EXTRN	??1ioSpecialStateBase@@UAE@XZ:PROC		; ioSpecialStateBase::~ioSpecialStateBase
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
;	COMDAT ??1ioNephilimPushState@@UAE@XZ
_TEXT	SEGMENT
??1ioNephilimPushState@@UAE@XZ PROC			; ioNephilimPushState::~ioNephilimPushState, COMDAT
; _this$ = ecx

; 859  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioNephilimPushState@@6B@

; 860  : }

  00006	e9 00 00 00 00	 jmp	 ??1ioSpecialStateBase@@UAE@XZ ; ioSpecialStateBase::~ioSpecialStateBase
??1ioNephilimPushState@@UAE@XZ ENDP			; ioNephilimPushState::~ioNephilimPushState
_TEXT	ENDS
EXTRN	?Initialize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@@Z:PROC ; ioSpecialStateBase::Initialize
; Function compile flags: /Ogsp
;	COMDAT ?Initialize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eCurrState$ = 12					; size = 1
?Initialize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@@Z PROC ; ioNephilimPushState::Initialize, COMDAT
; _this$ = ecx

; 863  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 865  : }

  00003	5d		 pop	 ebp

; 864  : 	ioSpecialStateBase::Initialize( pOwner, eCurrState );

  00004	e9 00 00 00 00	 jmp	 ?Initialize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@@Z ; ioSpecialStateBase::Initialize
?Initialize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@@Z ENDP ; ioNephilimPushState::Initialize
_TEXT	ENDS
EXTRN	?Finalize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@1@Z:PROC ; ioSpecialStateBase::Finalize
; Function compile flags: /Ogsp
;	COMDAT ?Finalize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@1@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eCurrState$ = 12					; size = 1
_eNewState$ = 16					; size = 1
?Finalize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@1@Z PROC ; ioNephilimPushState::Finalize, COMDAT
; _this$ = ecx

; 868  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 870  : }

  00003	5d		 pop	 ebp

; 869  : 	ioSpecialStateBase::Finalize( pOwner, eCurrState, eNewState );

  00004	e9 00 00 00 00	 jmp	 ?Finalize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@1@Z ; ioSpecialStateBase::Finalize
?Finalize@ioNephilimPushState@@UAEXPAVioBaseChar@@W4CharState@@1@Z ENDP ; ioNephilimPushState::Finalize
_TEXT	ENDS
PUBLIC	??_7ioNephilimBombState@@6B@			; ioNephilimBombState::`vftable'
PUBLIC	??0ioNephilimBombState@@QAE@XZ			; ioNephilimBombState::ioNephilimBombState
PUBLIC	??_R4ioNephilimBombState@@6B@			; ioNephilimBombState::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioNephilimBombState@@@8			; ioNephilimBombState `RTTI Type Descriptor'
PUBLIC	??_R3ioNephilimBombState@@8			; ioNephilimBombState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioNephilimBombState@@8			; ioNephilimBombState::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioNephilimBombState@@8		; ioNephilimBombState::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Initialize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@@Z ; ioNephilimBombState::Initialize
PUBLIC	?Finalize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@1@Z ; ioNephilimBombState::Finalize
PUBLIC	?GetStateName@ioNephilimBombState@@UAEPBDXZ	; ioNephilimBombState::GetStateName
PUBLIC	?GetState@ioNephilimBombState@@UAE?BW4CharState@@XZ ; ioNephilimBombState::GetState
PUBLIC	?CheckSpecialState@ioNephilimBombState@@UAEXPAVioBaseChar@@@Z ; ioNephilimBombState::CheckSpecialState
PUBLIC	?CheckFallStateChange@ioNephilimBombState@@UAEXPAVioBaseChar@@MM_NM@Z ; ioNephilimBombState::CheckFallStateChange
PUBLIC	?IsEnableBlowWounded@ioNephilimBombState@@UAE_NXZ ; ioNephilimBombState::IsEnableBlowWounded
EXTRN	??_EioNephilimBombState@@UAEPAXI@Z:PROC		; ioNephilimBombState::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioNephilimBombState@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioNephilimBombState@@8 DD FLAT:??_R0?AVioNephilimBombState@@@8 ; ioNephilimBombState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioNephilimBombState@@8
rdata$r	ENDS
;	COMDAT ??_R2ioNephilimBombState@@8
rdata$r	SEGMENT
??_R2ioNephilimBombState@@8 DD FLAT:??_R1A@?0A@EA@ioNephilimBombState@@8 ; ioNephilimBombState::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioSpecialStateBase@@8
rdata$r	ENDS
;	COMDAT ??_R3ioNephilimBombState@@8
rdata$r	SEGMENT
??_R3ioNephilimBombState@@8 DD 00H			; ioNephilimBombState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioNephilimBombState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioNephilimBombState@@@8
_DATA	SEGMENT
??_R0?AVioNephilimBombState@@@8 DD FLAT:??_7type_info@@6B@ ; ioNephilimBombState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNephilimBombState@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioNephilimBombState@@6B@
rdata$r	SEGMENT
??_R4ioNephilimBombState@@6B@ DD 00H			; ioNephilimBombState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioNephilimBombState@@@8
	DD	FLAT:??_R3ioNephilimBombState@@8
rdata$r	ENDS
;	COMDAT ??_7ioNephilimBombState@@6B@
CONST	SEGMENT
??_7ioNephilimBombState@@6B@ DD FLAT:??_R4ioNephilimBombState@@6B@ ; ioNephilimBombState::`vftable'
	DD	FLAT:?Initialize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@@Z
	DD	FLAT:?Finalize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@1@Z
	DD	FLAT:?LoadProperty@ioSpecialStateBase@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetStateName@ioNephilimBombState@@UAEPBDXZ
	DD	FLAT:?GetState@ioNephilimBombState@@UAE?BW4CharState@@XZ
	DD	FLAT:?GetAttackSpeedRate@ioSpecialStateBase@@UAEMPAVioBaseChar@@M@Z
	DD	FLAT:?CheckSpecialState@ioNephilimBombState@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessState@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessMoveSpeed@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessMove@ioSpecialStateBase@@UAE_NPAVioBaseChar@@MKK@Z
	DD	FLAT:?ProcessKeyInput@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsCanNoWound@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioSpecialStateBase@@UAE_NPAVioBaseChar@@PAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@PAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@KKK_N1W4TeamType@@2@Z
	DD	FLAT:?IsSendControlInfoToUser@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsIgnoreAttackOverDelay@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsLandingEnable@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsFallStateCheck@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsEnableBlowWounded@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoDropState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetGravity@ioSpecialStateBase@@UAEXPAVioBaseChar@@AAM@Z
	DD	FLAT:?IsCanChangeJumppingState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableDashState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsStateEnd@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsProcessFlyMove@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsFloatingState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@@Z
	DD	FLAT:?IsInitializeSync@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsJoinSync@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?FillJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?ApplyJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?ApplyStateSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?CheckFallStateChange@ioNephilimBombState@@UAEXPAVioBaseChar@@MM_NM@Z
	DD	FLAT:??_EioNephilimBombState@@UAEPAXI@Z
	DD	FLAT:?IsEnableBlowWounded@ioNephilimBombState@@UAE_NXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioNephilimBombState@@QAE@XZ
_TEXT	SEGMENT
??0ioNephilimBombState@@QAE@XZ PROC			; ioNephilimBombState::ioNephilimBombState, COMDAT
; _this$ = ecx

; 888  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioSpecialStateBase@@QAE@XZ ; ioSpecialStateBase::ioSpecialStateBase
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimBombState@@6B@

; 889  : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioNephilimBombState@@QAE@XZ ENDP			; ioNephilimBombState::ioNephilimBombState
_TEXT	ENDS
PUBLIC	??_C@_0BH@PCAGCAKN@CS_NEPHILIM_BOMB_STATE?$AA@	; `string'
;	COMDAT ??_C@_0BH@PCAGCAKN@CS_NEPHILIM_BOMB_STATE?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.h
CONST	SEGMENT
??_C@_0BH@PCAGCAKN@CS_NEPHILIM_BOMB_STATE?$AA@ DB 'CS_NEPHILIM_BOMB_STATE'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetStateName@ioNephilimBombState@@UAEPBDXZ
_TEXT	SEGMENT
?GetStateName@ioNephilimBombState@@UAEPBDXZ PROC	; ioNephilimBombState::GetStateName, COMDAT
; _this$ = ecx

; 172  : 	virtual const char* GetStateName(){ return "CS_NEPHILIM_BOMB_STATE"; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@PCAGCAKN@CS_NEPHILIM_BOMB_STATE?$AA@
  00005	c3		 ret	 0
?GetStateName@ioNephilimBombState@@UAEPBDXZ ENDP	; ioNephilimBombState::GetStateName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetState@ioNephilimBombState@@UAE?BW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioNephilimBombState@@UAE?BW4CharState@@XZ PROC ; ioNephilimBombState::GetState, COMDAT
; _this$ = ecx

; 173  : 	virtual const CharState GetState(){ return CS_NEPHILIM_BOMB_STATE; }

  00000	b0 9f		 mov	 al, 159			; 0000009fH
  00002	c3		 ret	 0
?GetState@ioNephilimBombState@@UAE?BW4CharState@@XZ ENDP ; ioNephilimBombState::GetState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableBlowWounded@ioNephilimBombState@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableBlowWounded@ioNephilimBombState@@UAE_NXZ PROC	; ioNephilimBombState::IsEnableBlowWounded, COMDAT
; _this$ = ecx

; 174  : 	virtual bool IsEnableBlowWounded(){ return false; }	

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsEnableBlowWounded@ioNephilimBombState@@UAE_NXZ ENDP	; ioNephilimBombState::IsEnableBlowWounded
_TEXT	ENDS
PUBLIC	??1ioNephilimBombState@@UAE@XZ			; ioNephilimBombState::~ioNephilimBombState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
;	COMDAT ??1ioNephilimBombState@@UAE@XZ
_TEXT	SEGMENT
??1ioNephilimBombState@@UAE@XZ PROC			; ioNephilimBombState::~ioNephilimBombState, COMDAT
; _this$ = ecx

; 892  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioNephilimBombState@@6B@

; 893  : }

  00006	e9 00 00 00 00	 jmp	 ??1ioSpecialStateBase@@UAE@XZ ; ioSpecialStateBase::~ioSpecialStateBase
??1ioNephilimBombState@@UAE@XZ ENDP			; ioNephilimBombState::~ioNephilimBombState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?Initialize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eCurrState$ = 12					; size = 1
?Initialize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@@Z PROC ; ioNephilimBombState::Initialize, COMDAT
; _this$ = ecx

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 898  : }

  00003	5d		 pop	 ebp

; 897  : 	ioSpecialStateBase::Initialize( pOwner, eCurrState );

  00004	e9 00 00 00 00	 jmp	 ?Initialize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@@Z ; ioSpecialStateBase::Initialize
?Initialize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@@Z ENDP ; ioNephilimBombState::Initialize
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?Finalize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@1@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eCurrState$ = 12					; size = 1
_eNewState$ = 16					; size = 1
?Finalize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@1@Z PROC ; ioNephilimBombState::Finalize, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 903  : }

  00003	5d		 pop	 ebp

; 902  : 	ioSpecialStateBase::Finalize( pOwner, eCurrState, eNewState );

  00004	e9 00 00 00 00	 jmp	 ?Finalize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@1@Z ; ioSpecialStateBase::Finalize
?Finalize@ioNephilimBombState@@UAEXPAVioBaseChar@@W4CharState@@1@Z ENDP ; ioNephilimBombState::Finalize
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckFallStateChange@ioNephilimBombState@@UAEXPAVioBaseChar@@MM_NM@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fMinFallHeightRate$ = 12				; size = 4
_fBottomHeight$ = 16					; size = 4
_bBottomMaxCheck$ = 20					; size = 1
_fMaxBottomHeight$ = 24					; size = 4
?CheckFallStateChange@ioNephilimBombState@@UAEXPAVioBaseChar@@MM_NM@Z PROC ; ioNephilimBombState::CheckFallStateChange, COMDAT
; _this$ = ecx

; 920  : 	return;
; 921  : }

  00000	c2 14 00	 ret	 20			; 00000014H
?CheckFallStateChange@ioNephilimBombState@@UAEXPAVioBaseChar@@MM_NM@Z ENDP ; ioNephilimBombState::CheckFallStateChange
_TEXT	ENDS
PUBLIC	??_7ioNephilimTeleportState@@6B@		; ioNephilimTeleportState::`vftable'
PUBLIC	??0ioNephilimTeleportState@@QAE@XZ		; ioNephilimTeleportState::ioNephilimTeleportState
PUBLIC	??_R4ioNephilimTeleportState@@6B@		; ioNephilimTeleportState::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioNephilimTeleportState@@@8		; ioNephilimTeleportState `RTTI Type Descriptor'
PUBLIC	??_R3ioNephilimTeleportState@@8			; ioNephilimTeleportState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioNephilimTeleportState@@8			; ioNephilimTeleportState::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioNephilimTeleportState@@8	; ioNephilimTeleportState::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Initialize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@@Z ; ioNephilimTeleportState::Initialize
PUBLIC	?Finalize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@1@Z ; ioNephilimTeleportState::Finalize
PUBLIC	?GetStateName@ioNephilimTeleportState@@UAEPBDXZ	; ioNephilimTeleportState::GetStateName
PUBLIC	?GetState@ioNephilimTeleportState@@UAE?BW4CharState@@XZ ; ioNephilimTeleportState::GetState
PUBLIC	?CheckSpecialState@ioNephilimTeleportState@@UAEXPAVioBaseChar@@@Z ; ioNephilimTeleportState::CheckSpecialState
PUBLIC	?ProcessMove@ioNephilimTeleportState@@UAE_NPAVioBaseChar@@MKK@Z ; ioNephilimTeleportState::ProcessMove
PUBLIC	?CheckFallStateChange@ioNephilimTeleportState@@UAEXPAVioBaseChar@@MM_NM@Z ; ioNephilimTeleportState::CheckFallStateChange
PUBLIC	?IsEnableBlowWounded@ioNephilimTeleportState@@UAE_NXZ ; ioNephilimTeleportState::IsEnableBlowWounded
EXTRN	??_EioNephilimTeleportState@@UAEPAXI@Z:PROC	; ioNephilimTeleportState::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioNephilimTeleportState@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioNephilimTeleportState@@8 DD FLAT:??_R0?AVioNephilimTeleportState@@@8 ; ioNephilimTeleportState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioNephilimTeleportState@@8
rdata$r	ENDS
;	COMDAT ??_R2ioNephilimTeleportState@@8
rdata$r	SEGMENT
??_R2ioNephilimTeleportState@@8 DD FLAT:??_R1A@?0A@EA@ioNephilimTeleportState@@8 ; ioNephilimTeleportState::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioSpecialStateBase@@8
rdata$r	ENDS
;	COMDAT ??_R3ioNephilimTeleportState@@8
rdata$r	SEGMENT
??_R3ioNephilimTeleportState@@8 DD 00H			; ioNephilimTeleportState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioNephilimTeleportState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioNephilimTeleportState@@@8
_DATA	SEGMENT
??_R0?AVioNephilimTeleportState@@@8 DD FLAT:??_7type_info@@6B@ ; ioNephilimTeleportState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNephilimTeleportState@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioNephilimTeleportState@@6B@
rdata$r	SEGMENT
??_R4ioNephilimTeleportState@@6B@ DD 00H		; ioNephilimTeleportState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioNephilimTeleportState@@@8
	DD	FLAT:??_R3ioNephilimTeleportState@@8
rdata$r	ENDS
;	COMDAT ??_7ioNephilimTeleportState@@6B@
CONST	SEGMENT
??_7ioNephilimTeleportState@@6B@ DD FLAT:??_R4ioNephilimTeleportState@@6B@ ; ioNephilimTeleportState::`vftable'
	DD	FLAT:?Initialize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@@Z
	DD	FLAT:?Finalize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@1@Z
	DD	FLAT:?LoadProperty@ioSpecialStateBase@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetStateName@ioNephilimTeleportState@@UAEPBDXZ
	DD	FLAT:?GetState@ioNephilimTeleportState@@UAE?BW4CharState@@XZ
	DD	FLAT:?GetAttackSpeedRate@ioSpecialStateBase@@UAEMPAVioBaseChar@@M@Z
	DD	FLAT:?CheckSpecialState@ioNephilimTeleportState@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessState@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessMoveSpeed@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessMove@ioNephilimTeleportState@@UAE_NPAVioBaseChar@@MKK@Z
	DD	FLAT:?ProcessKeyInput@ioSpecialStateBase@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsCanNoWound@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioSpecialStateBase@@UAE_NPAVioBaseChar@@PAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@PAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@KKK_N1W4TeamType@@2@Z
	DD	FLAT:?IsSendControlInfoToUser@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsIgnoreAttackOverDelay@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsLandingEnable@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsFallStateCheck@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsEnableBlowWounded@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoDropState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetGravity@ioSpecialStateBase@@UAEXPAVioBaseChar@@AAM@Z
	DD	FLAT:?IsCanChangeJumppingState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableDashState@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsStateEnd@ioSpecialStateBase@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsProcessFlyMove@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsFloatingState@ioSpecialStateBase@@UBE_NQBVioBaseChar@@@Z
	DD	FLAT:?IsInitializeSync@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?IsJoinSync@ioSpecialStateBase@@UAE_NXZ
	DD	FLAT:?FillJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?ApplyJoinSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?ApplyStateSync@ioSpecialStateBase@@UAEXAAVSP2Packet@@PAVioBaseChar@@@Z
	DD	FLAT:?CheckFallStateChange@ioNephilimTeleportState@@UAEXPAVioBaseChar@@MM_NM@Z
	DD	FLAT:??_EioNephilimTeleportState@@UAEPAXI@Z
	DD	FLAT:?IsEnableBlowWounded@ioNephilimTeleportState@@UAE_NXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioNephilimTeleportState@@QAE@XZ
_TEXT	SEGMENT
??0ioNephilimTeleportState@@QAE@XZ PROC			; ioNephilimTeleportState::ioNephilimTeleportState, COMDAT
; _this$ = ecx

; 926  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioSpecialStateBase@@QAE@XZ ; ioSpecialStateBase::ioSpecialStateBase
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimTeleportState@@6B@

; 927  : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioNephilimTeleportState@@QAE@XZ ENDP			; ioNephilimTeleportState::ioNephilimTeleportState
_TEXT	ENDS
PUBLIC	??_C@_0BL@KJCHBPME@CS_NEPHILIM_TELEPORT_STATE?$AA@ ; `string'
;	COMDAT ??_C@_0BL@KJCHBPME@CS_NEPHILIM_TELEPORT_STATE?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.h
CONST	SEGMENT
??_C@_0BL@KJCHBPME@CS_NEPHILIM_TELEPORT_STATE?$AA@ DB 'CS_NEPHILIM_TELEPO'
	DB	'RT_STATE', 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetStateName@ioNephilimTeleportState@@UAEPBDXZ
_TEXT	SEGMENT
?GetStateName@ioNephilimTeleportState@@UAEPBDXZ PROC	; ioNephilimTeleportState::GetStateName, COMDAT
; _this$ = ecx

; 201  : 	virtual const char* GetStateName(){ return "CS_NEPHILIM_TELEPORT_STATE"; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@KJCHBPME@CS_NEPHILIM_TELEPORT_STATE?$AA@
  00005	c3		 ret	 0
?GetStateName@ioNephilimTeleportState@@UAEPBDXZ ENDP	; ioNephilimTeleportState::GetStateName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetState@ioNephilimTeleportState@@UAE?BW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioNephilimTeleportState@@UAE?BW4CharState@@XZ PROC ; ioNephilimTeleportState::GetState, COMDAT
; _this$ = ecx

; 202  : 	virtual const CharState GetState(){ return CS_NEPHILIM_TELEPORT_STATE; }

  00000	b0 a0		 mov	 al, 160			; 000000a0H
  00002	c3		 ret	 0
?GetState@ioNephilimTeleportState@@UAE?BW4CharState@@XZ ENDP ; ioNephilimTeleportState::GetState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableBlowWounded@ioNephilimTeleportState@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableBlowWounded@ioNephilimTeleportState@@UAE_NXZ PROC ; ioNephilimTeleportState::IsEnableBlowWounded, COMDAT
; _this$ = ecx

; 203  : 	virtual bool IsEnableBlowWounded(){ return false; }	

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsEnableBlowWounded@ioNephilimTeleportState@@UAE_NXZ ENDP ; ioNephilimTeleportState::IsEnableBlowWounded
_TEXT	ENDS
PUBLIC	??1ioNephilimTeleportState@@UAE@XZ		; ioNephilimTeleportState::~ioNephilimTeleportState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
;	COMDAT ??1ioNephilimTeleportState@@UAE@XZ
_TEXT	SEGMENT
??1ioNephilimTeleportState@@UAE@XZ PROC			; ioNephilimTeleportState::~ioNephilimTeleportState, COMDAT
; _this$ = ecx

; 930  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioNephilimTeleportState@@6B@

; 931  : }

  00006	e9 00 00 00 00	 jmp	 ??1ioSpecialStateBase@@UAE@XZ ; ioSpecialStateBase::~ioSpecialStateBase
??1ioNephilimTeleportState@@UAE@XZ ENDP			; ioNephilimTeleportState::~ioNephilimTeleportState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?Initialize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eCurrState$ = 12					; size = 1
?Initialize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@@Z PROC ; ioNephilimTeleportState::Initialize, COMDAT
; _this$ = ecx

; 934  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 936  : }

  00003	5d		 pop	 ebp

; 935  : 	ioSpecialStateBase::Initialize( pOwner, eCurrState );

  00004	e9 00 00 00 00	 jmp	 ?Initialize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@@Z ; ioSpecialStateBase::Initialize
?Initialize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@@Z ENDP ; ioNephilimTeleportState::Initialize
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?Finalize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@1@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eCurrState$ = 12					; size = 1
_eNewState$ = 16					; size = 1
?Finalize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@1@Z PROC ; ioNephilimTeleportState::Finalize, COMDAT
; _this$ = ecx

; 939  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 941  : }

  00003	5d		 pop	 ebp

; 940  : 	ioSpecialStateBase::Finalize( pOwner, eCurrState, eNewState );

  00004	e9 00 00 00 00	 jmp	 ?Finalize@ioSpecialStateBase@@UAEXPAVioBaseChar@@W4CharState@@1@Z ; ioSpecialStateBase::Finalize
?Finalize@ioNephilimTeleportState@@UAEXPAVioBaseChar@@W4CharState@@1@Z ENDP ; ioNephilimTeleportState::Finalize
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckFallStateChange@ioNephilimTeleportState@@UAEXPAVioBaseChar@@MM_NM@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fMinFallHeightRate$ = 12				; size = 4
_fBottomHeight$ = 16					; size = 4
_bBottomMaxCheck$ = 20					; size = 1
_fMaxBottomHeight$ = 24					; size = 4
?CheckFallStateChange@ioNephilimTeleportState@@UAEXPAVioBaseChar@@MM_NM@Z PROC ; ioNephilimTeleportState::CheckFallStateChange, COMDAT
; _this$ = ecx

; 958  : 	return;
; 959  : }

  00000	c2 14 00	 ret	 20			; 00000014H
?CheckFallStateChange@ioNephilimTeleportState@@UAEXPAVioBaseChar@@MM_NM@Z ENDP ; ioNephilimTeleportState::CheckFallStateChange
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessMove@ioNephilimTeleportState@@UAE_NPAVioBaseChar@@MKK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fTimePerSec$ = 12					; size = 4
_dwPreTime$ = 16					; size = 4
_dwCurTime$ = 20					; size = 4
?ProcessMove@ioNephilimTeleportState@@UAE_NPAVioBaseChar@@MKK@Z PROC ; ioNephilimTeleportState::ProcessMove, COMDAT
; _this$ = ecx

; 963  : 	return true;

  00000	b0 01		 mov	 al, 1

; 964  : }

  00002	c2 10 00	 ret	 16			; 00000010H
?ProcessMove@ioNephilimTeleportState@@UAE_NPAVioBaseChar@@MKK@Z ENDP ; ioNephilimTeleportState::ProcessMove
_TEXT	ENDS
PUBLIC	??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 04	 shl	 eax, 4
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBE_NXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEAAUD3DXVECTOR3@@I@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE_NXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE_NXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE_NXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAUWeaponInfo@@I@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAUWeaponInfo@@I@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 28	 imul	 eax, 40			; 00000028H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAUWeaponInfo@@I@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ ; std::list<float,std::allocator<float> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ PROC	; std::list<float,std::allocator<float> >::empty, COMDAT
; _this$ = ecx

; 887  : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00005	0f 94 c0	 sete	 al

; 888  : 		}

  00008	c3		 ret	 0
?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ ENDP	; std::list<float,std::allocator<float> >::empty
_TEXT	ENDS
PUBLIC	?size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE_NXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEAAUAreaWeaponInfo@ioNephilimItem@@I@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEAAUAreaWeaponInfo@ioNephilimItem@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEAAUAreaWeaponInfo@ioNephilimItem@@I@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 18	 imul	 eax, 24			; 00000018H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEAAUAreaWeaponInfo@ioNephilimItem@@I@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 41   : 		}

  00005	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEABQAVioBaseChar@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBE_NPBUD3DXVECTOR3@@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXPAUD3DXVECTOR3@@0@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ PROC		; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@XZ ENDP		; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBE_NPBUAreaWeaponInfo@ioNephilimItem@@@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBE_NPBUAreaWeaponInfo@ioNephilimItem@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBE_NPBUAreaWeaponInfo@ioNephilimItem@@@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@3
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@3
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@3
$LN3@Inside@3:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@3:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBE_NPBUAreaWeaponInfo@ioNephilimItem@@@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@XZ ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocator<ioNephilimItem::AreaWeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@XZ PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocator<ioNephilimItem::AreaWeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@XZ ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocator<ioNephilimItem::AreaWeaponInfo>
_TEXT	ENDS
PUBLIC	??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@ABV01@@Z ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocator<ioNephilimItem::AreaWeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocator<ioNephilimItem::AreaWeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocator<ioNephilimItem::AreaWeaponInfo>
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QAE@PAPAVioBaseChar@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z PROC	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UD3DXVECTOR3@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<D3DXVECTOR3>::allocator<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z ; std::allocator<D3DXVECTOR3>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z PROC ; std::allocator<D3DXVECTOR3>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@I@Z ENDP ; std::allocator<D3DXVECTOR3>::deallocate
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Prevnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 567  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Prevnode
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::_List_val<float,std::allocator<float> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Myval
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXXZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@I@Z ; std::allocator<ioNephilimItem::AreaWeaponInfo>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@I@Z PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@I@Z ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAE@PAUAreaWeaponInfo@ioNephilimItem@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAE@PAUAreaWeaponInfo@ioNephilimItem@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAE@PAUAreaWeaponInfo@ioNephilimItem@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAE@PAUAreaWeaponInfo@ioNephilimItem@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ ; std::allocator<D3DXVECTOR3>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ PROC	; std::allocator<D3DXVECTOR3>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UD3DXVECTOR3@@@std@@QBEIXZ ENDP	; std::allocator<D3DXVECTOR3>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QBEIXZ ; std::allocator<ioNephilimItem::AreaWeaponInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QBEIXZ PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QBEIXZ ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ; std::addressof<ioHashString const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z PROC ; std::addressof<ioHashString const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ENDP ; std::addressof<ioHashString const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z ; std::addressof<D3DXVECTOR3 const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z PROC ; std::addressof<D3DXVECTOR3 const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUD3DXVECTOR3@@@std@@YAPBUD3DXVECTOR3@@ABU1@@Z ENDP ; std::addressof<D3DXVECTOR3 const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUAreaWeaponInfo@ioNephilimItem@@@std@@YAPBUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ; std::addressof<ioNephilimItem::AreaWeaponInfo const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUAreaWeaponInfo@ioNephilimItem@@@std@@YAPBUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUAreaWeaponInfo@ioNephilimItem@@@std@@YAPBUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z PROC ; std::addressof<ioNephilimItem::AreaWeaponInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUAreaWeaponInfo@ioNephilimItem@@@std@@YAPBUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ENDP ; std::addressof<ioNephilimItem::AreaWeaponInfo const >
_TEXT	ENDS
PUBLIC	??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
; Function compile flags: /Ogsp
;	COMDAT ??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T555216 = -12						; size = 12
$T555221 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T555221[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T555221[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T555216[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T555216[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T555216[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@UAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@IPAU12@@Z ; std::_Allocate<ioNephilimItem::AreaWeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@IPAU12@@Z
_TEXT	SEGMENT
$T555226 = -12						; size = 12
$T555230 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@IPAU12@@Z PROC ; std::_Allocate<ioNephilimItem::AreaWeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 18	 imul	 ecx, 24			; 00000018H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T555230[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T555230[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T555226[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T555226[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T555226[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@IPAU12@@Z ENDP ; std::_Allocate<ioNephilimItem::AreaWeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ; std::_Allocate<D3DXVECTOR3>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z
_TEXT	SEGMENT
$T555235 = -12						; size = 12
$T555239 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z PROC ; std::_Allocate<D3DXVECTOR3>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T555239[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T555239[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T555235[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T555235[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T555235[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ENDP ; std::_Allocate<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z ; std::forward<D3DXVECTOR3 &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z PROC ; std::forward<D3DXVECTOR3 &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUD3DXVECTOR3@@@std@@YAAAUD3DXVECTOR3@@AAU1@@Z ENDP ; std::forward<D3DXVECTOR3 &>
_TEXT	ENDS
PUBLIC	??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z ; std::allocator<D3DXVECTOR3>::construct<D3DXVECTOR3 &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z PROC ; std::allocator<D3DXVECTOR3>::construct<D3DXVECTOR3 &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct:
  00013	5f		 pop	 edi

; 209  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$construct@AAUD3DXVECTOR3@@@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@AAU2@@Z ENDP ; std::allocator<D3DXVECTOR3>::construct<D3DXVECTOR3 &>
_TEXT	ENDS
PUBLIC	??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z ; std::forward<D3DXVECTOR3 const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z PROC ; std::forward<D3DXVECTOR3 const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z ENDP ; std::forward<D3DXVECTOR3 const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUAreaWeaponInfo@ioNephilimItem@@@std@@YAAAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z ; std::forward<ioNephilimItem::AreaWeaponInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUAreaWeaponInfo@ioNephilimItem@@@std@@YAAAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUAreaWeaponInfo@ioNephilimItem@@@std@@YAAAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z PROC ; std::forward<ioNephilimItem::AreaWeaponInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUAreaWeaponInfo@ioNephilimItem@@@std@@YAAAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z ENDP ; std::forward<ioNephilimItem::AreaWeaponInfo &>
_TEXT	ENDS
PUBLIC	??$forward@ABUAreaWeaponInfo@ioNephilimItem@@@std@@YAABUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ; std::forward<ioNephilimItem::AreaWeaponInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUAreaWeaponInfo@ioNephilimItem@@@std@@YAABUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUAreaWeaponInfo@ioNephilimItem@@@std@@YAABUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z PROC ; std::forward<ioNephilimItem::AreaWeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUAreaWeaponInfo@ioNephilimItem@@@std@@YAABUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ENDP ; std::forward<ioNephilimItem::AreaWeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z ; std::_Ptr_cat<D3DXVECTOR3,D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z PROC ; std::_Ptr_cat<D3DXVECTOR3,D3DXVECTOR3>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UD3DXVECTOR3@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUD3DXVECTOR3@@0@Z ENDP ; std::_Ptr_cat<D3DXVECTOR3,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UAreaWeaponInfo@ioNephilimItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAreaWeaponInfo@ioNephilimItem@@0@Z ; std::_Ptr_cat<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UAreaWeaponInfo@ioNephilimItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAreaWeaponInfo@ioNephilimItem@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UAreaWeaponInfo@ioNephilimItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAreaWeaponInfo@ioNephilimItem@@0@Z PROC ; std::_Ptr_cat<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UAreaWeaponInfo@ioNephilimItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAreaWeaponInfo@ioNephilimItem@@0@Z ENDP ; std::_Ptr_cat<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z ; std::_Construct<D3DXVECTOR3,D3DXVECTOR3 const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z PROC ; std::_Construct<D3DXVECTOR3,D3DXVECTOR3 const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UD3DXVECTOR3@@ABU1@@std@@YAXPAUD3DXVECTOR3@@ABU1@@Z ENDP ; std::_Construct<D3DXVECTOR3,D3DXVECTOR3 const &>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z	; ioNephilimItem::AreaWeaponInfo::AreaWeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z PROC	; ioNephilimItem::AreaWeaponInfo::AreaWeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00011	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001d	5f		 pop	 edi
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z ENDP	; ioNephilimItem::AreaWeaponInfo::AreaWeaponInfo
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@AAPAUAreaWeaponInfo@ioNephilimItem@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@AAPAUAreaWeaponInfo@ioNephilimItem@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@AAPAUAreaWeaponInfo@ioNephilimItem@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@AAPAUAreaWeaponInfo@ioNephilimItem@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ; std::_Val_type<ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z PROC ; std::_Val_type<ioHashString *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ENDP ; std::_Val_type<ioHashString *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z ; std::_Val_type<D3DXVECTOR3 *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z PROC ; std::_Val_type<D3DXVECTOR3 *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@PAU1@@Z ENDP ; std::_Val_type<D3DXVECTOR3 *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@@Z ; std::_Val_type<ioNephilimItem::AreaWeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@@Z PROC ; std::_Val_type<ioNephilimItem::AreaWeaponInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@@Z ENDP ; std::_Val_type<ioNephilimItem::AreaWeaponInfo *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 28	 add	 DWORD PTR [eax], 40	; 00000028H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 0c	 add	 DWORD PTR [eax], 12	; 0000000cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEABUAreaWeaponInfo@ioNephilimItem@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEABUAreaWeaponInfo@ioNephilimItem@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEABUAreaWeaponInfo@ioNephilimItem@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEABUAreaWeaponInfo@ioNephilimItem@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 18	 add	 DWORD PTR [eax], 24	; 00000018H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z ; std::_Destroy<D3DXVECTOR3>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z PROC ; std::_Destroy<D3DXVECTOR3>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z ENDP ; std::_Destroy<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??_GAreaWeaponInfo@ioNephilimItem@@QAEPAXI@Z	; ioNephilimItem::AreaWeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GAreaWeaponInfo@ioNephilimItem@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAreaWeaponInfo@ioNephilimItem@@QAEPAXI@Z PROC	; ioNephilimItem::AreaWeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GAreaWeaponInfo@ioNephilimItem@@QAEPAXI@Z ENDP	; ioNephilimItem::AreaWeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::forward<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString>
_TEXT	ENDS
PUBLIC	??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ; std::forward<D3DXVECTOR3>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z PROC ; std::forward<D3DXVECTOR3>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ENDP ; std::forward<D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$forward@UAreaWeaponInfo@ioNephilimItem@@@std@@YA$$QAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z ; std::forward<ioNephilimItem::AreaWeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UAreaWeaponInfo@ioNephilimItem@@@std@@YA$$QAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UAreaWeaponInfo@ioNephilimItem@@@std@@YA$$QAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z PROC ; std::forward<ioNephilimItem::AreaWeaponInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UAreaWeaponInfo@ioNephilimItem@@@std@@YA$$QAUAreaWeaponInfo@ioNephilimItem@@AAU12@@Z ENDP ; std::forward<ioNephilimItem::AreaWeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct@2:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	??0FireTime@@QAE@XZ				; FireTime::FireTime
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$1
__ehfuncinfo$??0FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FireTime@@QAE@XZ PROC				; FireTime::FireTime, COMDAT
; _this$ = ecx

; 219  : 	FireTime()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi
  00026	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00029	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002d	ff d7		 call	 edi

; 220  : 	{
; 221  : 		dwStart = 0;

  0002f	89 1e		 mov	 DWORD PTR [esi], ebx

; 222  : 		dwDuration = 0;

  00031	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 223  : 
; 224  : 		iAttributeIdx = 0;

  00034	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  : 		iResistanceIdx = 0;

  00037	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 226  : 
; 227  : 		bLoopWoundedAni = false;

  0003a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 228  : 		dwWoundedAniDuration = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 229  : 
; 230  : 		dwWeaponIdx = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 231  : 		eCollisionType = ACT_NONE;

  00043	c7 46 2c 06 00
	00 00		 mov	 DWORD PTR [esi+44], 6

; 232  : 		eFireTimeType = FTT_NORMAL_ATTACK;

  0004a	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 233  : 
; 234  : 		m_iExtraValue = 0;

  0004d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 235  : 	}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FireTime@@QAE@XZ ENDP				; FireTime::FireTime
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?GetStartPos@ioAreaWeapon@@QBEABUD3DXVECTOR3@@XZ ; ioAreaWeapon::GetStartPos
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioareaweapon.h
;	COMDAT ?GetStartPos@ioAreaWeapon@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetStartPos@ioAreaWeapon@@QBEABUD3DXVECTOR3@@XZ PROC	; ioAreaWeapon::GetStartPos, COMDAT
; _this$ = ecx

; 427  : 	inline const D3DXVECTOR3& GetStartPos() const { return m_vStartPos; }

  00000	8d 81 4c 01 00
	00		 lea	 eax, DWORD PTR [ecx+332]
  00006	c3		 ret	 0
?GetStartPos@ioAreaWeapon@@QBEABUD3DXVECTOR3@@XZ ENDP	; ioAreaWeapon::GetStartPos
_TEXT	ENDS
PUBLIC	?GetRotation@ioAreaWeapon@@QBEABUD3DXQUATERNION@@XZ ; ioAreaWeapon::GetRotation
; Function compile flags: /Ogsp
;	COMDAT ?GetRotation@ioAreaWeapon@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetRotation@ioAreaWeapon@@QBEABUD3DXQUATERNION@@XZ PROC ; ioAreaWeapon::GetRotation, COMDAT
; _this$ = ecx

; 429  : 	inline const D3DXQUATERNION& GetRotation() const { return m_qtRotate; }

  00000	8d 81 30 01 00
	00		 lea	 eax, DWORD PTR [ecx+304]
  00006	c3		 ret	 0
?GetRotation@ioAreaWeapon@@QBEABUD3DXQUATERNION@@XZ ENDP ; ioAreaWeapon::GetRotation
_TEXT	ENDS
PUBLIC	?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ	; ioAreaWeapon::GetAreaWeaponIndex
; Function compile flags: /Ogsp
;	COMDAT ?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ
_TEXT	SEGMENT
?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ PROC		; ioAreaWeapon::GetAreaWeaponIndex, COMDAT
; _this$ = ecx

; 431  : 	inline DWORD GetAreaWeaponIndex() const { return m_dwAreaWeaponIndex; }

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetAreaWeaponIndex@ioAreaWeapon@@QBEKXZ ENDP		; ioAreaWeapon::GetAreaWeaponIndex
_TEXT	ENDS
PUBLIC	??_R0?AVioItem@@@8				; ioItem `RTTI Type Descriptor'
PUBLIC	??_R0?AVioWeaponItem@@@8			; ioWeaponItem `RTTI Type Descriptor'
PUBLIC	?ToWeaponItem@@YAPAVioWeaponItem@@PAVioItem@@@Z	; ToWeaponItem
;	COMDAT ??_R0?AVioItem@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweaponitem.h
_DATA	SEGMENT
??_R0?AVioItem@@@8 DD FLAT:??_7type_info@@6B@		; ioItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioWeaponItem@@@8
_DATA	SEGMENT
??_R0?AVioWeaponItem@@@8 DD FLAT:??_7type_info@@6B@	; ioWeaponItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeaponItem@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToWeaponItem@@YAPAVioWeaponItem@@PAVioItem@@@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
?ToWeaponItem@@YAPAVioWeaponItem@@PAVioItem@@@Z PROC	; ToWeaponItem, COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 304  : 	if( !pItem || pItem->GetType() != ioItem::IT_WEAPON )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItem$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN1@ToWeaponIt
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 50 08	 call	 DWORD PTR [eax+8]
  00012	83 f8 01	 cmp	 eax, 1
  00015	75 19		 jne	 SHORT $LN1@ToWeaponIt

; 306  : 
; 307  : 	return dynamic_cast< ioWeaponItem* >( pItem );

  00017	6a 00		 push	 0
  00019	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeaponItem@@@8
  0001e	68 00 00 00 00	 push	 OFFSET ??_R0?AVioItem@@@8
  00023	6a 00		 push	 0
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	eb 02		 jmp	 SHORT $LN3@ToWeaponIt
$LN1@ToWeaponIt:

; 305  : 		return NULL;

  00030	33 c0		 xor	 eax, eax
$LN3@ToWeaponIt:
  00032	5e		 pop	 esi

; 308  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?ToWeaponItem@@YAPAVioWeaponItem@@PAVioItem@@@Z ENDP	; ToWeaponItem
_TEXT	ENDS
PUBLIC	?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@XZ	; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VioHashString@@@std@@QAE@XZ PROC		; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@VioHashString@@@std@@QAE@XZ ENDP		; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@XZ			; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@M@std@@QAE@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@M@std@@QAE@XZ ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@XZ	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ PROC		; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ ENDP		; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@XZ		; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UForceInfo@@@std@@QAE@XZ PROC		; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UForceInfo@@@std@@QAE@XZ ENDP		; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ; std::allocator<ioHashString>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@ABV01@@Z		; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@M@std@@QAE@ABV01@@Z PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@M@std@@QAE@ABV01@@Z ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z	; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ; std::allocator<ioHashString>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@VioHashString@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ PROC	; std::allocator<ioHashString>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ENDP	; std::allocator<ioHashString>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z
_TEXT	SEGMENT
$T555459 = -12						; size = 12
$T555463 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z PROC ; std::_Allocate<ioHashString>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	0f		 cmp	 ecx, 268435455		; 0fffffffH
  00015	77 0e		 ja	 SHORT $LN1@Allocate@4
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T555463[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T555463[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T555459[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T555459[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T555459[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ENDP ; std::_Allocate<ioHashString>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ; std::forward<ioHashString const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z PROC ; std::forward<ioHashString const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ENDP ; std::forward<ioHashString const &>
_TEXT	ENDS
PUBLIC	??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ; std::forward<ioHashString &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ; std::_Ptr_cat<ioHashString,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z PROC ; std::_Ptr_cat<ioHashString,ioHashString>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ENDP ; std::_Ptr_cat<ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@4:
$LN3@Xlen@4:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@5:
$LN3@Xlen@5:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
_TEXT	ENDS
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T555525 = -12						; size = 12
$T555529 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@5

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@5
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@5
$LN1@Allocate@5:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T555529[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T555529[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T555525[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T555525[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T555525[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@5:
$LN5@Allocate@5:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@5:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T555534 = -12						; size = 12
$T555538 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@6

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@6
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@6
$LN1@Allocate@6:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T555538[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T555538[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T555534[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T555534[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T555534[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@6:
$LN5@Allocate@6:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@6:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 10	 add	 DWORD PTR [eax], 16	; 00000010H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??_GioHashString@@QAEPAXI@Z			; ioHashString::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GioHashString@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioHashString@@QAEPAXI@Z PROC			; ioHashString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@3
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioHashString@@QAEPAXI@Z ENDP			; ioHashString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@4
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@4:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0
__ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
_TEXT	SEGMENT
$T555561 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z PROC ; std::_Construct<ioHashString,ioHashString const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T555561[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 09		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@Construct@3:

; 49   : 	}

  00026	e8 00 00 00 00	 call	 __EH_epilog3
  0002b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T555561[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ENDP ; std::_Construct<ioHashString,ioHashString const &>
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??_R0?AVioNephilimItem@@@8			; ioNephilimItem `RTTI Type Descriptor'
PUBLIC	?ToNephilimItem@@YAPAVioNephilimItem@@PAVioItem@@@Z ; ToNephilimItem
;	COMDAT ??_R0?AVioNephilimItem@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.h
_DATA	SEGMENT
??_R0?AVioNephilimItem@@@8 DD FLAT:??_7type_info@@6B@	; ioNephilimItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNephilimItem@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToNephilimItem@@YAPAVioNephilimItem@@PAVioItem@@@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
?ToNephilimItem@@YAPAVioNephilimItem@@PAVioItem@@@Z PROC ; ToNephilimItem, COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 129  : 	ioWeaponItem *pWeapon = ToWeaponItem( pItem );

  00003	ff 75 08	 push	 DWORD PTR _pItem$[ebp]
  00006	e8 00 00 00 00	 call	 ?ToWeaponItem@@YAPAVioWeaponItem@@PAVioItem@@@Z ; ToWeaponItem
  0000b	59		 pop	 ecx

; 130  : 	if( !pWeapon || pWeapon->GetSubType() != ioWeaponItem::WST_NEPHILIM_ITEM )

  0000c	85 c0		 test	 eax, eax
  0000e	74 2c		 je	 SHORT $LN1@ToNephilim
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	ff 92 f0 02 00
	00		 call	 DWORD PTR [edx+752]
  0001a	3d 85 00 00 00	 cmp	 eax, 133		; 00000085H
  0001f	75 1b		 jne	 SHORT $LN1@ToNephilim

; 132  : 
; 133  : 	return dynamic_cast< ioNephilimItem* >( pItem );

  00021	6a 00		 push	 0
  00023	68 00 00 00 00	 push	 OFFSET ??_R0?AVioNephilimItem@@@8
  00028	68 00 00 00 00	 push	 OFFSET ??_R0?AVioItem@@@8
  0002d	6a 00		 push	 0
  0002f	ff 75 08	 push	 DWORD PTR _pItem$[ebp]
  00032	e8 00 00 00 00	 call	 ___RTDynamicCast
  00037	83 c4 14	 add	 esp, 20			; 00000014H

; 134  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN1@ToNephilim:

; 131  : 		return NULL;

  0003c	33 c0		 xor	 eax, eax

; 134  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?ToNephilimItem@@YAPAVioNephilimItem@@PAVioItem@@@Z ENDP ; ToNephilimItem
_TEXT	ENDS
PUBLIC	??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@ ; `string'
PUBLIC	??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@ ; `string'
PUBLIC	??_C@_0BO@MBOHPPK@ioNephilimItem?3?3SetJumpAttack?$AA@ ; `string'
PUBLIC	?SetJumpAttack@ioNephilimItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z ; ioNephilimItem::SetJumpAttack
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
;	COMDAT ??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
CONST	SEGMENT
??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@ DB '%s - Ju'
	DB	'mpAttack Animation Not Exist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@
CONST	SEGMENT
??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@ DB '%s - A'
	DB	'ttackAttribute Not Exist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MBOHPPK@ioNephilimItem?3?3SetJumpAttack?$AA@
CONST	SEGMENT
??_C@_0BO@MBOHPPK@ioNephilimItem?3?3SetJumpAttack?$AA@ DB 'ioNephilimItem'
	DB	'::SetJumpAttack', 00H			; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
CONST	ENDS
;	COMDAT ?SetJumpAttack@ioNephilimItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fTimeRate$ = 16					; size = 4
_eType$ = 20						; size = 4
?SetJumpAttack@ioNephilimItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z PROC ; ioNephilimItem::SetJumpAttack, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 194  : 	if( !pOwner ) return false;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 7d		 je	 SHORT $LN11@SetJumpAtt

; 195  : 
; 196  : 	DWORD dwCurTime = FRAMEGETTIME();

  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00015	8b c8		 mov	 ecx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 197  : 	ClearAirJump();

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	8b ce		 mov	 ecx, esi
  00021	ff 90 a8 02 00
	00		 call	 DWORD PTR [eax+680]

; 198  : 
; 199  : 	AttackType eExtendType = AT_JUMP_ATTACK;
; 200  : 
; 201  : 	const AttackAttribute *pAttr = GetAttackAttribute( eExtendType );

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	6a 00		 push	 0
  0002b	6a 03		 push	 3
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 90 08 02 00
	00		 call	 DWORD PTR [eax+520]
  00035	8b f8		 mov	 edi, eax

; 202  : 	if( !pAttr )

  00037	85 ff		 test	 edi, edi
  00039	75 1d		 jne	 SHORT $LN2@SetJumpAtt

; 203  : 	{
; 204  : 		LOG.PrintTimeAndLog( 0, "%s - AttackAttribute Not Exist", __FUNCTION__ );

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MBOHPPK@ioNephilimItem?3?3SetJumpAttack?$AA@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@
$LN10@SetJumpAtt:
  00045	6a 00		 push	 0
  00047	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00053	83 c4 10	 add	 esp, 16			; 00000010H

; 205  : 		return false;

  00056	eb 32		 jmp	 SHORT $LN9@SetJumpAtt
$LN2@SetJumpAtt:

; 206  : 	}
; 207  : 
; 208  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00058	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 209  : 	iAniID = pGrp->GetAnimationIdx( pAttr->m_AttackAnimation );

  0005b	57		 push	 edi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z

; 210  : 	if( iAniID == -1 )

  00062	83 f8 ff	 cmp	 eax, -1
  00065	75 0c		 jne	 SHORT $LN1@SetJumpAtt

; 211  : 	{
; 212  : 		LOG.PrintTimeAndLog( 0, "%s - JumpAttack Animation Not Exist", __FUNCTION__ );

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MBOHPPK@ioNephilimItem?3?3SetJumpAttack?$AA@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@

; 213  : 		return false;

  00071	eb d2		 jmp	 SHORT $LN10@SetJumpAtt
$LN1@SetJumpAtt:

; 214  : 	}
; 215  : 
; 216  : 	fTimeRate   = pAttr->m_fAttackAniRate;
; 217  : 	DWORD dwPreDelay  = pAttr->m_dwPreDelay;
; 218  : 
; 219  : 	// For AirJumpPower
; 220  : 	SetAirJump( pOwner, iAniID, fTimeRate );

  00073	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00078	8b 16		 mov	 edx, DWORD PTR [esi]
  0007a	51		 push	 ecx
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	50		 push	 eax
  00081	53		 push	 ebx
  00082	8b ce		 mov	 ecx, esi
  00084	ff 92 ac 02 00
	00		 call	 DWORD PTR [edx+684]
$LN9@SetJumpAtt:
  0008a	5f		 pop	 edi
$LN11@SetJumpAtt:
  0008b	5e		 pop	 esi

; 221  : 
; 222  : 	return false;

  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx

; 223  : }

  0008f	5d		 pop	 ebp
  00090	c2 10 00	 ret	 16			; 00000010H
?SetJumpAttack@ioNephilimItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z ENDP ; ioNephilimItem::SetJumpAttack
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	__$ArrayPad$
PUBLIC	?SetExtraInfoToWeapon@ioNephilimItem@@UAEXPAVioWeapon@@_N@Z ; ioNephilimItem::SetExtraInfoToWeapon
EXTRN	?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z:PROC ; ioZoneEffectWeapon::SetZoneValue
EXTRN	?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z:PROC ; ioZoneEffectWeapon::SetCollisionDir
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	?SetExtraInfoToWeapon@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioAttackableItem::SetExtraInfoToWeapon
;	COMDAT __real@bf800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
CONST	ENDS
;	COMDAT ?SetExtraInfoToWeapon@ioNephilimItem@@UAEXPAVioWeapon@@_N@Z
_TEXT	SEGMENT
_vDir$549500 = -28					; size = 12
$T549501 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pWeapon$ = 8						; size = 4
_bJumpAttack$ = 12					; size = 1
?SetExtraInfoToWeapon@ioNephilimItem@@UAEXPAVioWeapon@@_N@Z PROC ; ioNephilimItem::SetExtraInfoToWeapon, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 255  : 	ioAttackableItem::SetExtraInfoToWeapon( pWeapon, bJumpAttack );

  00011	ff 75 0c	 push	 DWORD PTR _bJumpAttack$[ebp]
  00014	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ?SetExtraInfoToWeapon@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z ; ioAttackableItem::SetExtraInfoToWeapon

; 256  : 
; 257  : 	ioZoneEffectWeapon *pZone = ToZoneEffectWeapon( pWeapon );

  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx

; 258  : 	if( pZone )

  00026	85 f6		 test	 esi, esi
  00028	74 52		 je	 SHORT $LN1@SetExtraIn

; 259  : 	{
; 260  : 		ioBaseChar *pChar = pZone->GetOwner();

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner

; 261  : 		if( pChar )

  00031	85 c0		 test	 eax, eax
  00033	74 47		 je	 SHORT $LN1@SetExtraIn

; 262  : 		{
; 263  : 			D3DXVECTOR3 vDir = pChar->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -1.0f );

  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	8d 4d f0	 lea	 ecx, DWORD PTR $T549501[ebp]
  0003b	51		 push	 ecx
  0003c	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  00041	50		 push	 eax
  00042	8d 45 e4	 lea	 eax, DWORD PTR _vDir$549500[ebp]
  00045	f3 0f 11 45 f0	 movss	 DWORD PTR $T549501[ebp], xmm0
  0004a	f3 0f 11 45 f4	 movss	 DWORD PTR $T549501[ebp+4], xmm0
  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00057	50		 push	 eax
  00058	f3 0f 11 45 f8	 movss	 DWORD PTR $T549501[ebp+8], xmm0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 264  : 			pZone->SetCollisionDir( vDir );

  00066	8d 45 e4	 lea	 eax, DWORD PTR _vDir$549500[ebp]
  00069	50		 push	 eax
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z ; ioZoneEffectWeapon::SetCollisionDir

; 265  : 			pZone->SetZoneValue( false, false );

  00071	6a 00		 push	 0
  00073	6a 00		 push	 0
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z ; ioZoneEffectWeapon::SetZoneValue
$LN1@SetExtraIn:

; 266  : 		}
; 267  : 	}	
; 268  : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	5e		 pop	 esi
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	c9		 leave
  00088	c2 08 00	 ret	 8
?SetExtraInfoToWeapon@ioNephilimItem@@UAEXPAVioWeapon@@_N@Z ENDP ; ioNephilimItem::SetExtraInfoToWeapon
_TEXT	ENDS
PUBLIC	?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioNephilimItem::OnSpecialRecv
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	__imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator>>
EXTRN	?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ:PROC ; ioBaseChar::IncreaseWeaponIndexBase
EXTRN	?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z:PROC	; ioBaseChar::SetWeaponIndexBase
EXTRN	??5SP2Packet@@QAEAAV0@AAK@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
xdata$x	SEGMENT
__unwindtable$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z$1
__ehfuncinfo$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_kFireTime$549763 = -144				; size = 88
$T555607 = -56						; size = 16
_nState$ = -40						; size = 4
_nFireCnt$549764 = -36					; size = 4
_dwWeaponBaseIdx$549761 = -32				; size = 4
_vPos$549769 = -28					; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_rkPacket$ = 12						; size = 4
?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z PROC ; ioNephilimItem::OnSpecialRecv, COMDAT
; _this$ = ecx

; 418  : {

  00000	68 84 00 00 00	 push	 132			; 00000084H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00012	8b 5d 0c	 mov	 ebx, DWORD PTR _rkPacket$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 419  : 	if( !pOwner ) 

  00017	85 ff		 test	 edi, edi
  00019	0f 84 0f 01 00
	00		 je	 $LN6@OnSpecialR

; 420  : 		return;
; 421  : 
; 422  : 	int nState;
; 423  : 	rkPacket >> nState;

  0001f	8d 45 d8	 lea	 eax, DWORD PTR _nState$[ebp]
  00022	50		 push	 eax
  00023	8b cb		 mov	 ecx, ebx
  00025	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 424  : 
; 425  : 	switch( nState )

  0002a	8b 45 d8	 mov	 eax, DWORD PTR _nState$[ebp]
  0002d	48		 dec	 eax
  0002e	0f 85 fa 00 00
	00		 jne	 $LN6@OnSpecialR

; 426  : 	{
; 427  : 	case SS_PUSH:
; 428  : 		{
; 429  : 			if ( m_PushAttackAttribute.m_vWeaponInfoList.empty() )

  00034	8b 86 dc 19 00
	00		 mov	 eax, DWORD PTR [esi+6620]
  0003a	3b 86 e0 19 00
	00		 cmp	 eax, DWORD PTR [esi+6624]
  00040	0f 84 e8 00 00
	00		 je	 $LN6@OnSpecialR

; 430  : 				return;
; 431  : 
; 432  : 			DWORD dwWeaponBaseIdx;
; 433  : 			rkPacket >> dwWeaponBaseIdx;

  00046	8d 45 e0	 lea	 eax, DWORD PTR _dwWeaponBaseIdx$549761[ebp]
  00049	50		 push	 eax
  0004a	8b cb		 mov	 ecx, ebx
  0004c	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAK@Z ; SP2Packet::operator>>

; 434  : 
; 435  : 			pOwner->SetWeaponIndexBase( dwWeaponBaseIdx );

  00051	ff 75 e0	 push	 DWORD PTR _dwWeaponBaseIdx$549761[ebp]
  00054	8b cf		 mov	 ecx, edi
  00056	e8 00 00 00 00	 call	 ?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z ; ioBaseChar::SetWeaponIndexBase

; 436  : 			pOwner->IncreaseWeaponIndexBase();

  0005b	8b cf		 mov	 ecx, edi
  0005d	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase

; 437  : 
; 438  : 			const WeaponInfo &sPushWeaponInfo = m_PushAttackAttribute.m_vWeaponInfoList[0];

  00062	8b b6 dc 19 00
	00		 mov	 esi, DWORD PTR [esi+6620]

; 439  : 
; 440  : 			FireTime kFireTime;

  00068	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$549763[ebp]
  0006e	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00073	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 441  : 			kFireTime.dwStart = FRAMEGETTIME();

  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0007d	8b c8		 mov	 ecx, eax
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00085	89 85 70 ff ff
	ff		 mov	 DWORD PTR _kFireTime$549763[ebp], eax

; 442  : 			kFireTime.iAttributeIdx = sPushWeaponInfo.m_iWeaponIdx;

  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	89 85 78 ff ff
	ff		 mov	 DWORD PTR _kFireTime$549763[ebp+8], eax

; 443  : 			kFireTime.iResistanceIdx = sPushWeaponInfo.m_iResistanceIdx;

  00093	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00096	89 85 7c ff ff
	ff		 mov	 DWORD PTR _kFireTime$549763[ebp+12], eax

; 444  : 			kFireTime.szWoundedAni  = sPushWeaponInfo.m_WoundedAnimation;

  0009c	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0009f	50		 push	 eax
  000a0	8d 4d 84	 lea	 ecx, DWORD PTR _kFireTime$549763[ebp+20]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 445  : 			kFireTime.dwWoundedAniDuration = sPushWeaponInfo.m_dwWoundedDuration;

  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	89 45 94	 mov	 DWORD PTR _kFireTime$549763[ebp+36], eax

; 446  : 			kFireTime.bLoopWoundedAni = sPushWeaponInfo.m_bWoundedLoopAni;

  000af	8a 46 20	 mov	 al, BYTE PTR [esi+32]
  000b2	88 45 80	 mov	 BYTE PTR _kFireTime$549763[ebp+16], al

; 447  : 			kFireTime.eFireTimeType = FTT_NORMAL_ATTACK;
; 448  : 
; 449  : 			int nFireCnt;
; 450  : 			rkPacket >> nFireCnt;

  000b5	8d 45 dc	 lea	 eax, DWORD PTR _nFireCnt$549764[ebp]
  000b8	33 f6		 xor	 esi, esi
  000ba	50		 push	 eax
  000bb	8b cb		 mov	 ecx, ebx
  000bd	89 75 b0	 mov	 DWORD PTR _kFireTime$549763[ebp+64], esi
  000c0	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 451  : 
; 452  : 			for ( int i=0; i<nFireCnt; i++ )

  000c5	39 75 dc	 cmp	 DWORD PTR _nFireCnt$549764[ebp], esi
  000c8	7e 55		 jle	 SHORT $LN1@OnSpecialR
$LL3@OnSpecialR:

; 453  : 			{
; 454  : 				D3DXVECTOR3 vPos;
; 455  : 				rkPacket >> vPos;

  000ca	8d 45 e4	 lea	 eax, DWORD PTR _vPos$549769[ebp]
  000cd	50		 push	 eax
  000ce	8b cb		 mov	 ecx, ebx
  000d0	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 456  : 
; 457  : 				kFireTime.dwWeaponIdx = dwWeaponBaseIdx++;

  000d5	8b 45 e0	 mov	 eax, DWORD PTR _dwWeaponBaseIdx$549761[ebp]
  000d8	ff 45 e0	 inc	 DWORD PTR _dwWeaponBaseIdx$549761[ebp]

; 458  : 				pOwner->ExtendFireExplicit( kFireTime, vPos, ioMath::VEC3_ZERO, "" );

  000db	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000e0	8d 4d c8	 lea	 ecx, DWORD PTR $T555607[ebp]
  000e3	89 45 98	 mov	 DWORD PTR _kFireTime$549763[ebp+40], eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000ec	8d 45 c8	 lea	 eax, DWORD PTR $T555607[ebp]
  000ef	50		 push	 eax
  000f0	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  000f6	8d 45 e4	 lea	 eax, DWORD PTR _vPos$549769[ebp]
  000f9	50		 push	 eax
  000fa	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _kFireTime$549763[ebp]
  00100	50		 push	 eax
  00101	8b cf		 mov	 ecx, edi
  00103	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00107	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  0010c	8d 4d c8	 lea	 ecx, DWORD PTR $T555607[ebp]
  0010f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00119	46		 inc	 esi
  0011a	3b 75 dc	 cmp	 esi, DWORD PTR _nFireCnt$549764[ebp]
  0011d	7c ab		 jl	 SHORT $LL3@OnSpecialR
$LN1@OnSpecialR:

; 459  : 			}
; 460  : 		}

  0011f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00123	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$549763[ebp]
  00129	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN6@OnSpecialR:

; 461  : 		break;
; 462  : 	}
; 463  : }

  0012e	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00133	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z$0:
  00000	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$549763[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z$1:
  0000b	8d 4d c8	 lea	 ecx, DWORD PTR $T555607[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ENDP ; ioNephilimItem::OnSpecialRecv
PUBLIC	?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z ; ioNephilimItem::CreateAreaAttachWeapon
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioareaweapon.h
xdata$x	SEGMENT
__unwindtable$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z$1
__ehfuncinfo$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z
_TEXT	SEGMENT
_kFireTime$ = -132					; size = 88
_vDir$ = -44						; size = 12
$T555636 = -32						; size = 16
$T549844 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_pAreaWeapon$ = 12					; size = 4
_nWeaponNum$ = 16					; size = 4
?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z PROC ; ioNephilimItem::CreateAreaAttachWeapon, COMDAT
; _this$ = ecx

; 618  : {

  00000	6a 78		 push	 120			; 00000078H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000f	8b 75 0c	 mov	 esi, DWORD PTR _pAreaWeapon$[ebp]

; 619  : 	if( !pOwner )

  00012	85 ff		 test	 edi, edi
  00014	0f 84 c4 00 00
	00		 je	 $LN1@CreateArea

; 620  : 		return;
; 621  : 
; 622  : 	if ( !pAreaWeapon || nWeaponNum == NO_WEAPON_ATTRIBUTE )

  0001a	85 f6		 test	 esi, esi
  0001c	0f 84 bc 00 00
	00		 je	 $LN1@CreateArea
  00022	8b 5d 10	 mov	 ebx, DWORD PTR _nWeaponNum$[ebp]
  00025	85 db		 test	 ebx, ebx
  00027	0f 84 b1 00 00
	00		 je	 $LN1@CreateArea

; 623  : 		return;
; 624  : 
; 625  : 	FireTime kFireTime;

  0002d	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00033	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 626  : 	kFireTime.dwStart = FRAMEGETTIME();

  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00042	8b c8		 mov	 ecx, eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 627  : 	kFireTime.iAttributeIdx = nWeaponNum;
; 628  : 	kFireTime.dwWeaponIdx = pOwner->IncreaseWeaponIndexBase();

  0004a	8b cf		 mov	 ecx, edi
  0004c	89 85 7c ff ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp], eax
  00052	89 5d 84	 mov	 DWORD PTR _kFireTime$[ebp+8], ebx
  00055	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase

; 629  : 	kFireTime.eFireTimeType = FTT_NORMAL_ATTACK;
; 630  : 
; 631  : 	D3DXVECTOR3 vDir = pAreaWeapon->GetRotation() * D3DXVECTOR3( 0, 0, -1 );

  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	83 65 bc 00	 and	 DWORD PTR _kFireTime$[ebp+64], 0
  00061	89 45 a4	 mov	 DWORD PTR _kFireTime$[ebp+40], eax
  00064	8d 45 e4	 lea	 eax, DWORD PTR $T549844[ebp]
  00067	50		 push	 eax
  00068	8d 86 30 01 00
	00		 lea	 eax, DWORD PTR [esi+304]
  0006e	50		 push	 eax
  0006f	8d 45 d4	 lea	 eax, DWORD PTR _vDir$[ebp]
  00072	f3 0f 11 45 e4	 movss	 DWORD PTR $T549844[ebp], xmm0
  00077	f3 0f 11 45 e8	 movss	 DWORD PTR $T549844[ebp+4], xmm0
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00084	50		 push	 eax
  00085	f3 0f 11 45 ec	 movss	 DWORD PTR $T549844[ebp+8], xmm0
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 632  : 	pOwner->ExtendFireExplicit( kFireTime, pAreaWeapon->GetStartPos(), vDir, "" );

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00098	8d 4d e0	 lea	 ecx, DWORD PTR $T555636[ebp]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000a1	8d 45 e0	 lea	 eax, DWORD PTR $T555636[ebp]
  000a4	50		 push	 eax
  000a5	8d 45 d4	 lea	 eax, DWORD PTR _vDir$[ebp]
  000a8	50		 push	 eax
  000a9	81 c6 4c 01 00
	00		 add	 esi, 332		; 0000014cH
  000af	56		 push	 esi
  000b0	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _kFireTime$[ebp]
  000b6	50		 push	 eax
  000b7	8b cf		 mov	 ecx, edi
  000b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000bd	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  000c2	8d 4d e0	 lea	 ecx, DWORD PTR $T555636[ebp]
  000c5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 633  : }

  000cf	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000d3	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  000d9	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN1@CreateArea:
  000de	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000e3	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z$1:
  0000b	8d 4d e0	 lea	 ecx, DWORD PTR $T555636[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z ENDP ; ioNephilimItem::CreateAreaAttachWeapon
PUBLIC	__real@00000000
PUBLIC	_pOwner$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z ; ioNephilimItem::CreateAreaWeapon
EXTRN	?CreateAreaWeapon@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@000ABUD3DXVECTOR3@@ABUD3DXQUATERNION@@H@Z:PROC ; ioAreaWeaponManager::CreateAreaWeapon
EXTRN	?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z:PROC ; ioPlayStage::GetMapHeight
EXTRN	?DestroyAreaWeapon@ioAreaWeaponManager@@QAEXK@Z:PROC ; ioAreaWeaponManager::DestroyAreaWeapon
EXTRN	?FindAreaWeaponByName@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@0@Z:PROC ; ioAreaWeaponManager::FindAreaWeaponByName
EXTRN	?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ:PROC ; ioAreaWeaponManager::GetSingleton
;	COMDAT __real@00000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z$2
__ehfuncinfo$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z
_TEXT	SEGMENT
$T555660 = -32852					; size = 16
$T555659 = -32836					; size = 16
_pOwner$GSCopy$ = -32820				; size = 4
tv421 = -32816						; size = 4
_fHeight$ = -32816					; size = 4
_pStage$ = -32816					; size = 4
_i$550052 = -32812					; size = 4
_i$550043 = -32812					; size = 4
_kPacket$550061 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_vPos$ = 12						; size = 12
_qtRot$ = 24						; size = 16
?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z PROC ; ioNephilimItem::CreateAreaWeapon, COMDAT
; _this$ = ecx

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 48 80 00 00	 mov	 eax, 32840		; 00008048H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 833  : 
; 834  : 		for ( int i=0; i<m_nMaxCreateAreaIdx; i++ )

  00037	89 9d cc 7f ff
	ff		 mov	 DWORD PTR _pOwner$GSCopy$[ebp], ebx
  0003d	85 db		 test	 ebx, ebx
  0003f	0f 84 5f 02 00
	00		 je	 $LN13@CreateArea@2

; 810  : 	if ( !pOwner || !pOwner->IsNeedProcess() )

  00045	8b 03		 mov	 eax, DWORD PTR [ebx]
  00047	8b cb		 mov	 ecx, ebx
  00049	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0004f	84 c0		 test	 al, al
  00051	0f 84 4d 02 00
	00		 je	 $LN13@CreateArea@2

; 811  : 		return;
; 812  : 	
; 813  : 	ioPlayStage *pStage = pOwner->GetCreator();

  00057	8b 83 44 03 00
	00		 mov	 eax, DWORD PTR [ebx+836]
  0005d	89 85 d0 7f ff
	ff		 mov	 DWORD PTR _pStage$[ebp], eax

; 814  : 	if ( !pStage )

  00063	85 c0		 test	 eax, eax
  00065	0f 84 39 02 00
	00		 je	 $LN13@CreateArea@2

; 815  : 		return;
; 816  : 
; 817  : 	if ( m_AreaWeaponInfoList.empty() )

  0006b	8b 8e 54 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6740]
  00071	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  00077	3b c8		 cmp	 ecx, eax
  00079	0f 84 25 02 00
	00		 je	 $LN13@CreateArea@2

; 818  : 		return;
; 819  : 
; 820  : 	for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  0007f	2b c1		 sub	 eax, ecx
  00081	6a 18		 push	 24			; 00000018H
  00083	99		 cdq
  00084	5f		 pop	 edi
  00085	f7 ff		 idiv	 edi
  00087	83 a5 d4 7f ff
	ff 00		 and	 DWORD PTR _i$550043[ebp], 0
  0008e	85 c0		 test	 eax, eax
  00090	7e 56		 jle	 SHORT $LN8@CreateArea@2
  00092	33 ff		 xor	 edi, edi
$LL10@CreateArea@2:

; 821  : 	{
; 822  : 		ioAreaWeapon *pAreaWeapon = g_AreaWeaponMgr.FindAreaWeaponByName( m_AreaWeaponInfoList[i].m_szAreaWeapon, pOwner->GetCharName() );

  00094	8d 83 d4 02 00
	00		 lea	 eax, DWORD PTR [ebx+724]
  0009a	03 cf		 add	 ecx, edi
  0009c	50		 push	 eax
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  000a3	8b c8		 mov	 ecx, eax
  000a5	e8 00 00 00 00	 call	 ?FindAreaWeaponByName@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@0@Z ; ioAreaWeaponManager::FindAreaWeaponByName

; 823  : 		if ( !pAreaWeapon )

  000aa	85 c0		 test	 eax, eax
  000ac	74 0f		 je	 SHORT $LN9@CreateArea@2

; 824  : 			continue;
; 825  : 
; 826  : 		g_AreaWeaponMgr.DestroyAreaWeapon( pAreaWeapon->GetAreaWeaponIndex() );

  000ae	ff 70 14	 push	 DWORD PTR [eax+20]
  000b1	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  000b6	8b c8		 mov	 ecx, eax
  000b8	e8 00 00 00 00	 call	 ?DestroyAreaWeapon@ioAreaWeaponManager@@QAEXK@Z ; ioAreaWeaponManager::DestroyAreaWeapon
$LN9@CreateArea@2:

; 818  : 		return;
; 819  : 
; 820  : 	for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  000bd	8b 8e 54 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6740]
  000c3	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  000c9	2b c1		 sub	 eax, ecx
  000cb	6a 18		 push	 24			; 00000018H
  000cd	99		 cdq
  000ce	5b		 pop	 ebx
  000cf	f7 fb		 idiv	 ebx
  000d1	ff 85 d4 7f ff
	ff		 inc	 DWORD PTR _i$550043[ebp]
  000d7	8b 9d cc 7f ff
	ff		 mov	 ebx, DWORD PTR _pOwner$GSCopy$[ebp]
  000dd	83 c7 18	 add	 edi, 24			; 00000018H
  000e0	39 85 d4 7f ff
	ff		 cmp	 DWORD PTR _i$550043[ebp], eax
  000e6	7c ac		 jl	 SHORT $LL10@CreateArea@2
$LN8@CreateArea@2:

; 827  : 	}
; 828  : 
; 829  : 	float fHeight = pStage->GetMapHeight( vPos.x, vPos.z );

  000e8	0f 57 c0	 xorps	 xmm0, xmm0
  000eb	33 ff		 xor	 edi, edi
  000ed	57		 push	 edi
  000ee	51		 push	 ecx
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  000f9	6a 01		 push	 1
  000fb	57		 push	 edi
  000fc	51		 push	 ecx
  000fd	51		 push	 ecx
  000fe	8b 8d d0 7f ff
	ff		 mov	 ecx, DWORD PTR _pStage$[ebp]
  00104	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0010a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight
  00119	d9 9d d0 7f ff
	ff		 fstp	 DWORD PTR _fHeight$[ebp]

; 830  : 	if ( fHeight > 0.0f )

  0011f	d9 ee		 fldz
  00121	d9 85 d0 7f ff
	ff		 fld	 DWORD PTR _fHeight$[ebp]
  00127	df f1		 fcomip	 ST(1)
  00129	dd d8		 fstp	 ST(0)
  0012b	0f 86 73 01 00
	00		 jbe	 $LN13@CreateArea@2

; 831  : 	{
; 832  : 		vPos.y = fHeight;

  00131	f3 0f 10 85 d0
	7f ff ff	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  00139	f3 0f 11 45 10	 movss	 DWORD PTR _vPos$[ebp+4], xmm0

; 833  : 
; 834  : 		for ( int i=0; i<m_nMaxCreateAreaIdx; i++ )

  0013e	89 bd d4 7f ff
	ff		 mov	 DWORD PTR _i$550052[ebp], edi
  00144	39 be 94 1a 00
	00		 cmp	 DWORD PTR [esi+6804], edi
  0014a	0f 8e d7 00 00
	00		 jle	 $LN3@CreateArea@2

; 831  : 	{
; 832  : 		vPos.y = fHeight;

  00150	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00156	89 bd d0 7f ff
	ff		 mov	 DWORD PTR tv421[ebp], edi
  0015c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
$LL5@CreateArea@2:

; 835  : 		{
; 836  : 			if ( COMPARE( i, 0, (int)m_AreaWeaponInfoList.size() ) )

  00162	83 bd d4 7f ff
	ff 00		 cmp	 DWORD PTR _i$550052[ebp], 0
  00169	0f 8c 91 00 00
	00		 jl	 $LN4@CreateArea@2
  0016f	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  00175	2b 86 54 1a 00
	00		 sub	 eax, DWORD PTR [esi+6740]
  0017b	6a 18		 push	 24			; 00000018H
  0017d	99		 cdq
  0017e	59		 pop	 ecx
  0017f	f7 f9		 idiv	 ecx
  00181	39 85 d4 7f ff
	ff		 cmp	 DWORD PTR _i$550052[ebp], eax
  00187	7d 77		 jge	 SHORT $LN4@CreateArea@2

; 837  : 				g_AreaWeaponMgr.CreateAreaWeapon( pOwner->GetCharName(), "", "", m_AreaWeaponInfoList[i].m_szAreaWeapon, vPos, qtRot, ioAreaWeapon::CT_NORMAL );

  00189	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0018e	8d 8d bc 7f ff
	ff		 lea	 ecx, DWORD PTR $T555659[ebp]
  00194	ff d7		 call	 edi
  00196	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0019f	8d 8d ac 7f ff
	ff		 lea	 ecx, DWORD PTR $T555660[ebp]
  001a5	ff d7		 call	 edi
  001a7	8b 86 54 1a 00
	00		 mov	 eax, DWORD PTR [esi+6740]
  001ad	03 85 d0 7f ff
	ff		 add	 eax, DWORD PTR tv421[ebp]
  001b3	6a 00		 push	 0
  001b5	8d 4d 18	 lea	 ecx, DWORD PTR _qtRot$[ebp]
  001b8	51		 push	 ecx
  001b9	8d 4d 0c	 lea	 ecx, DWORD PTR _vPos$[ebp]
  001bc	51		 push	 ecx
  001bd	50		 push	 eax
  001be	8d 85 bc 7f ff
	ff		 lea	 eax, DWORD PTR $T555659[ebp]
  001c4	50		 push	 eax
  001c5	8d 85 ac 7f ff
	ff		 lea	 eax, DWORD PTR $T555660[ebp]
  001cb	50		 push	 eax
  001cc	8b 85 cc 7f ff
	ff		 mov	 eax, DWORD PTR _pOwner$GSCopy$[ebp]
  001d2	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  001d7	50		 push	 eax
  001d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001dc	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  001e1	8b c8		 mov	 ecx, eax
  001e3	e8 00 00 00 00	 call	 ?CreateAreaWeapon@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@000ABUD3DXVECTOR3@@ABUD3DXQUATERNION@@H@Z ; ioAreaWeaponManager::CreateAreaWeapon
  001e8	8d 8d ac 7f ff
	ff		 lea	 ecx, DWORD PTR $T555660[ebp]
  001ee	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001f2	ff d3		 call	 ebx
  001f4	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001f8	8d 8d bc 7f ff
	ff		 lea	 ecx, DWORD PTR $T555659[ebp]
  001fe	ff d3		 call	 ebx
$LN4@CreateArea@2:

; 833  : 
; 834  : 		for ( int i=0; i<m_nMaxCreateAreaIdx; i++ )

  00200	ff 85 d4 7f ff
	ff		 inc	 DWORD PTR _i$550052[ebp]
  00206	8b 85 d4 7f ff
	ff		 mov	 eax, DWORD PTR _i$550052[ebp]
  0020c	83 85 d0 7f ff
	ff 18		 add	 DWORD PTR tv421[ebp], 24 ; 00000018H
  00213	3b 86 94 1a 00
	00		 cmp	 eax, DWORD PTR [esi+6804]
  00219	0f 8c 43 ff ff
	ff		 jl	 $LL5@CreateArea@2
  0021f	8b 9d cc 7f ff
	ff		 mov	 ebx, DWORD PTR _pOwner$GSCopy$[ebp]
  00225	33 ff		 xor	 edi, edi
$LN3@CreateArea@2:

; 838  : 		}
; 839  : 
; 840  : 		if( pOwner->IsNeedSendNetwork() )

  00227	8b 03		 mov	 eax, DWORD PTR [ebx]
  00229	8b cb		 mov	 ecx, ebx
  0022b	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00231	84 c0		 test	 al, al
  00233	74 6f		 je	 SHORT $LN13@CreateArea@2

; 841  : 		{
; 842  : 			SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  00235	68 27 41 00 00	 push	 16679			; 00004127H
  0023a	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550061[ebp]
  00240	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 843  : 			FillItemGaugePacketHeader( pOwner, kPacket );

  00245	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$550061[ebp]
  0024b	50		 push	 eax
  0024c	53		 push	 ebx
  0024d	8b ce		 mov	 ecx, esi
  0024f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00256	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 844  : 			kPacket << CS_CREATE_AREA;

  0025b	6a 08		 push	 8
  0025d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550061[ebp]
  00263	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 845  : 			kPacket << vPos;

  00268	8d 45 0c	 lea	 eax, DWORD PTR _vPos$[ebp]
  0026b	50		 push	 eax
  0026c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550061[ebp]
  00272	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 846  : 			kPacket << qtRot;

  00277	8d 45 18	 lea	 eax, DWORD PTR _qtRot$[ebp]
  0027a	50		 push	 eax
  0027b	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550061[ebp]
  00281	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 847  : 			P2PNetwork::SendToAllPlayingUser( kPacket );

  00286	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$550061[ebp]
  0028c	57		 push	 edi
  0028d	50		 push	 eax
  0028e	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 848  : 		}

  00293	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00297	59		 pop	 ecx
  00298	59		 pop	 ecx
  00299	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550061[ebp]
  0029f	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN13@CreateArea@2:

; 849  : 	}
; 850  : }

  002a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ae	59		 pop	 ecx
  002af	5f		 pop	 edi
  002b0	5e		 pop	 esi
  002b1	5b		 pop	 ebx
  002b2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b5	33 cd		 xor	 ecx, ebp
  002b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bc	c9		 leave
  002bd	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z$0:
  00000	8d 8d bc 7f ff
	ff		 lea	 ecx, DWORD PTR $T555659[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z$1:
  0000c	8d 8d ac 7f ff
	ff		 lea	 ecx, DWORD PTR $T555660[ebp]
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z$2:
  00018	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550061[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 8a a8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32856]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateAreaWeapon@ioNephilimItem@@QAEXPAVioBaseChar@@UD3DXVECTOR3@@UD3DXQUATERNION@@@Z ENDP ; ioNephilimItem::CreateAreaWeapon
; Function compile flags: /Ogsp
;	COMDAT ??_GioNephilimPushState@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioNephilimPushState@@UAEPAXI@Z PROC			; ioNephilimPushState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimPushState@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioSpecialStateBase@@UAE@XZ ; ioSpecialStateBase::~ioSpecialStateBase
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@5
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@5:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioNephilimPushState@@UAEPAXI@Z ENDP			; ioNephilimPushState::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioNephilimBombState@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioNephilimBombState@@UAEPAXI@Z PROC			; ioNephilimBombState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimBombState@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioSpecialStateBase@@UAE@XZ ; ioSpecialStateBase::~ioSpecialStateBase
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@6
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@6:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioNephilimBombState@@UAEPAXI@Z ENDP			; ioNephilimBombState::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioNephilimTeleportState@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioNephilimTeleportState@@UAEPAXI@Z PROC		; ioNephilimTeleportState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimTeleportState@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioSpecialStateBase@@UAE@XZ ; ioSpecialStateBase::~ioSpecialStateBase
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@7
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@7:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioNephilimTeleportState@@UAEPAXI@Z ENDP		; ioNephilimTeleportState::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ PROC ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ENDP ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ PROC ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@2@XZ ENDP ; std::vector<ioBaseChar *,std::allocator<ioBaseChar *> >::end
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z PROC ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@V?$allocator@UD3DXVECTOR3@@@1@@Z ENDP ; std::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Vector_val<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 503  : 		}

  00008	c3		 ret	 0
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@2@XZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@1@@Z ; std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@1@@Z PROC ; std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@1@@Z ENDP ; std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 370  : 		++(*(_Mybase *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 		return (*this);
; 372  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QBEIXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 438  : 		{	// construct allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 439  : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEII@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEII@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 18		 push	 24			; 00000018H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEPAUAreaWeaponInfo@ioNephilimItem@@I@Z ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEPAUAreaWeaponInfo@ioNephilimItem@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEPAUAreaWeaponInfo@ioNephilimItem@@I@Z PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@IPAU12@@Z ; std::_Allocate<ioNephilimItem::AreaWeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEPAUAreaWeaponInfo@ioNephilimItem@@I@Z ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z ; std::allocator<D3DXVECTOR3>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z PROC ; std::allocator<D3DXVECTOR3>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ; std::_Allocate<D3DXVECTOR3>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UD3DXVECTOR3@@@std@@QAEPAUD3DXVECTOR3@@I@Z ENDP ; std::allocator<D3DXVECTOR3>::allocate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z	; ioINILoader::LoadInt_e<10>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z PROC	; ioINILoader::LoadInt_e<10>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@LoadInt_e
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@LoadInt_e
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@LoadInt_e
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@LoadInt_e
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@LoadInt_e
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@LoadInt_e
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@LoadInt_e
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@LoadInt_e
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@LoadInt_e
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@LoadInt_e:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00144	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00147	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ; ioINILoader::LoadInt_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<16>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadInt_e@2
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadInt_e@2
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadInt_e@2
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadInt_e@2
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadInt_e@2
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadInt_e@2
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadInt_e@2
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadInt_e@2
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadInt_e@2
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadInt_e@2
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadInt_e@2:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadInt_e@2:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  001e6	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e9	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ec	50		 push	 eax
  001ed	8b ce		 mov	 ecx, esi
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5e		 pop	 esi
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	c9		 leave
  00201	c2 08 00	 ret	 8
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ; ioINILoader::LoadFloat_e<23>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<23>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadFloat_
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadFloat_
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadFloat_
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadFloat_
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadFloat_
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadFloat_
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadFloat_
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadFloat_
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadFloat_
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadFloat_
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadFloat_
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadFloat_
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadFloat_
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadFloat_
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadFloat_
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadFloat_
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadFloat_
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN73@LoadFloat_:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadFloat_:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadFloat_:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadFloat_
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadFloat_:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00288	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0028d	51		 push	 ecx
  0028e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	50		 push	 eax
  00297	8b ce		 mov	 ecx, esi
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0029f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a2	5e		 pop	 esi
  002a3	33 cd		 xor	 ecx, ebp
  002a5	5b		 pop	 ebx
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	c9		 leave
  002ac	c2 08 00	 ret	 8
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ; ioINILoader::LoadFloat_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<24>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadFloat_@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadFloat_@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadFloat_@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadFloat_@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadFloat_@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadFloat_@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadFloat_@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadFloat_@2
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadFloat_@2
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadFloat_@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadFloat_@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadFloat_@2
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadFloat_@2
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadFloat_@2
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadFloat_@2
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadFloat_@2
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadFloat_@2
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadFloat_@2
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN69@LoadFloat_@2:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN70@LoadFloat_@2:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN71@LoadFloat_@2:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN72@LoadFloat_@2:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadFloat_@2:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadFloat_@2:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  002a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002a5	51		 push	 ecx
  002a6	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	50		 push	 eax
  002af	8b ce		 mov	 ecx, esi
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	5e		 pop	 esi
  002bb	33 cd		 xor	 ecx, ebp
  002bd	5b		 pop	 ebx
  002be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c3	c9		 leave
  002c4	c2 08 00	 ret	 8
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ; ioINILoader::LoadFloat_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<22>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadFloat_@3
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadFloat_@3
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadFloat_@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadFloat_@3
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadFloat_@3
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadFloat_@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadFloat_@3
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadFloat_@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadFloat_@3
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadFloat_@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadFloat_@3
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadFloat_@3
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadFloat_@3
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadFloat_@3
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadFloat_@3
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadFloat_@3
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadFloat_@3
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadFloat_@3
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadFloat_@3
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN71@LoadFloat_@3:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN72@LoadFloat_@3:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadFloat_@3:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  00250	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00255	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00259	51		 push	 ecx
  0025a	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	50		 push	 eax
  00263	8b ce		 mov	 ecx, esi
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0026b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026e	5e		 pop	 esi
  0026f	33 cd		 xor	 ecx, ebp
  00271	5b		 pop	 ebx
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	c9		 leave
  00278	c2 08 00	 ret	 8
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ; ioINILoader::LoadFloat_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<20>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadFloat_@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadFloat_@4
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadFloat_@4
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadFloat_@4
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadFloat_@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadFloat_@4
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadFloat_@4
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadFloat_@4
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadFloat_@4
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadFloat_@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadFloat_@4
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadFloat_@4
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadFloat_@4
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadFloat_@4
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadFloat_@4
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@4
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadFloat_@4
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadFloat_@4
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadFloat_@4
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadFloat_@4
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN73@LoadFloat_@4:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadFloat_@4
$LN74@LoadFloat_@4:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadFloat_@4:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadFloat_@4:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadFloat_@4:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  00238	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0023d	51		 push	 ecx
  0023e	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	50		 push	 eax
  00247	8b ce		 mov	 ecx, esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0024f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	5e		 pop	 esi
  00253	33 cd		 xor	 ecx, ebp
  00255	5b		 pop	 ebx
  00256	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025b	c9		 leave
  0025c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ; ioINILoader::LoadInt_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<20>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadInt_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadInt_e@3
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadInt_e@3
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadInt_e@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadInt_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadInt_e@3
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadInt_e@3
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadInt_e@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadInt_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadInt_e@3
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadInt_e@3
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadInt_e@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadInt_e@3
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadInt_e@3
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadInt_e@3
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e@3
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadInt_e@3
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadInt_e@3
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadInt_e@3
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadInt_e@3
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN73@LoadInt_e@3:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadInt_e@3
$LN74@LoadInt_e@3:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadInt_e@3:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadInt_e@3:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadInt_e@3:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  00238	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0023b	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023e	50		 push	 eax
  0023f	8b ce		 mov	 ecx, esi
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00247	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024a	5e		 pop	 esi
  0024b	33 cd		 xor	 ecx, ebp
  0024d	5b		 pop	 ebx
  0024e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00253	c9		 leave
  00254	c2 08 00	 ret	 8
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<20>
_TEXT	ENDS
PUBLIC	??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ; ioEntityGroup::GetAnimationEventTimeList_e<13>
EXTRN	__imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0
__ehfuncinfo$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
$T556114 = -52						; size = 16
_szEncEventType$ = -36					; size = 13
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
_vTimeList$ = 16					; size = 4
??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z PROC ; ioEntityGroup::GetAnimationEventTimeList_e<13>, COMDAT
; _this$ = ecx

; 406  : 	{

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b 75 10	 mov	 esi, DWORD PTR _vTimeList$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 407  : 		_ENCSTR(szEventType, szEncEventType);

  00014	8a 08		 mov	 cl, BYTE PTR [eax]
  00016	84 c9		 test	 cl, cl
  00018	0f 84 49 01 00
	00		 je	 $LN96@GetAnimati
  0001e	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00021	88 4d dc	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00024	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00027	84 c9		 test	 cl, cl
  00029	0f 84 32 01 00
	00		 je	 $LN95@GetAnimati
  0002f	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00032	88 4d dd	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00035	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00038	84 c9		 test	 cl, cl
  0003a	0f 84 1b 01 00
	00		 je	 $LN94@GetAnimati
  00040	b2 eb		 mov	 dl, -21			; ffffffebH
  00042	32 ca		 xor	 cl, dl
  00044	88 4d de	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00047	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  0004a	84 c9		 test	 cl, cl
  0004c	0f 84 03 01 00
	00		 je	 $LN93@GetAnimati
  00052	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00055	88 4d df	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00058	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  0005b	84 c9		 test	 cl, cl
  0005d	0f 84 ec 00 00
	00		 je	 $LN92@GetAnimati
  00063	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00066	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00069	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  0006c	84 c9		 test	 cl, cl
  0006e	0f 84 d5 00 00
	00		 je	 $LN91@GetAnimati
  00074	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00077	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  0007a	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0007d	84 c9		 test	 cl, cl
  0007f	0f 84 bf 00 00
	00		 je	 $LN90@GetAnimati
  00085	32 ca		 xor	 cl, dl
  00087	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  0008a	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008d	84 c9		 test	 cl, cl
  0008f	0f 84 a9 00 00
	00		 je	 $LN89@GetAnimati
  00095	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00098	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  0009b	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009e	84 c9		 test	 cl, cl
  000a0	0f 84 92 00 00
	00		 je	 $LN88@GetAnimati
  000a6	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000a9	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000ac	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000af	84 c9		 test	 cl, cl
  000b1	74 7f		 je	 SHORT $LN87@GetAnimati
  000b3	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b6	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b9	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000bc	84 c9		 test	 cl, cl
  000be	74 6d		 je	 SHORT $LN86@GetAnimati
  000c0	32 ca		 xor	 cl, dl
  000c2	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c5	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000c8	84 c9		 test	 cl, cl
  000ca	74 5b		 je	 SHORT $LN85@GetAnimati
  000cc	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000cf	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d3	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+11], cl
  000d6	0f 84 8f 00 00
	00		 je	 $LN1@GetAnimati
  000dc	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000df	84 c9		 test	 cl, cl
  000e1	74 3e		 je	 SHORT $LN83@GetAnimati
  000e3	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e6	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e9	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000ec	84 c9		 test	 cl, cl
  000ee	74 2c		 je	 SHORT $LN82@GetAnimati
  000f0	32 ca		 xor	 cl, dl
  000f2	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f5	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  000f8	84 c9		 test	 cl, cl
  000fa	74 1a		 je	 SHORT $LN81@GetAnimati
  000fc	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  000ff	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00102	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+15], cl
  00105	84 c0		 test	 al, al
  00107	74 07		 je	 SHORT $LN80@GetAnimati
  00109	34 ed		 xor	 al, -19			; ffffffedH
  0010b	88 45 ec	 mov	 BYTE PTR _szEncEventType$[ebp+16], al
  0010e	eb 5b		 jmp	 SHORT $LN1@GetAnimati
$LN80@GetAnimati:
  00110	c6 45 ec ed	 mov	 BYTE PTR _szEncEventType$[ebp+16], -19 ; ffffffedH
  00114	eb 55		 jmp	 SHORT $LN1@GetAnimati
$LN81@GetAnimati:
  00116	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  0011a	eb 4f		 jmp	 SHORT $LN1@GetAnimati
$LN82@GetAnimati:
  0011c	88 55 ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], dl
  0011f	eb 4a		 jmp	 SHORT $LN1@GetAnimati
$LN83@GetAnimati:
  00121	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00125	eb 44		 jmp	 SHORT $LN1@GetAnimati
$LN85@GetAnimati:
  00127	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+11], -22 ; ffffffeaH
  0012b	eb 3e		 jmp	 SHORT $LN1@GetAnimati
$LN86@GetAnimati:
  0012d	88 55 e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], dl
  00130	eb 39		 jmp	 SHORT $LN1@GetAnimati
$LN87@GetAnimati:
  00132	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00136	eb 33		 jmp	 SHORT $LN1@GetAnimati
$LN88@GetAnimati:
  00138	c6 45 e4 ed	 mov	 BYTE PTR _szEncEventType$[ebp+8], -19 ; ffffffedH
  0013c	eb 2d		 jmp	 SHORT $LN1@GetAnimati
$LN89@GetAnimati:
  0013e	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  00142	eb 27		 jmp	 SHORT $LN1@GetAnimati
$LN90@GetAnimati:
  00144	88 55 e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], dl
  00147	eb 22		 jmp	 SHORT $LN1@GetAnimati
$LN91@GetAnimati:
  00149	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  0014d	eb 1c		 jmp	 SHORT $LN1@GetAnimati
$LN92@GetAnimati:
  0014f	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp+4], -19 ; ffffffedH
  00153	eb 16		 jmp	 SHORT $LN1@GetAnimati
$LN93@GetAnimati:
  00155	c6 45 df ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00159	eb 10		 jmp	 SHORT $LN1@GetAnimati
$LN94@GetAnimati:
  0015b	c6 45 de eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  0015f	eb 0a		 jmp	 SHORT $LN1@GetAnimati
$LN95@GetAnimati:
  00161	c6 45 dd ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  00165	eb 04		 jmp	 SHORT $LN1@GetAnimati
$LN96@GetAnimati:
  00167	c6 45 dc ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati:
  0016b	6a 03		 push	 3
  0016d	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00170	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$[ebp+12], 0
  00174	59		 pop	 ecx
$LL105@GetAnimati:
  00175	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0017b	83 c0 04	 add	 eax, 4
  0017e	49		 dec	 ecx
  0017f	75 f4		 jne	 SHORT $LL105@GetAnimati

; 408  : 		return GetAnimationEventTimeList(id, szEncEventType, vTimeList);

  00181	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00184	50		 push	 eax
  00185	8d 4d cc	 lea	 ecx, DWORD PTR $T556114[ebp]
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0018e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00192	56		 push	 esi
  00193	8d 45 cc	 lea	 eax, DWORD PTR $T556114[ebp]
  00196	50		 push	 eax
  00197	ff 75 08	 push	 DWORD PTR _id$[ebp]
  0019a	8b cf		 mov	 ecx, edi
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  001a2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a6	8d 4d cc	 lea	 ecx, DWORD PTR $T556114[ebp]
  001a9	8b f0		 mov	 esi, eax
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001b1	8b c6		 mov	 eax, esi

; 409  : 	}

  001b3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001b8	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T556114[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ENDP ; ioEntityGroup::GetAnimationEventTimeList_e<13>
PUBLIC	??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z ; ioEntityGroup::GetAnimationEventTime_e<7>
EXTRN	__imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z$0
__ehfuncinfo$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z
_TEXT	SEGMENT
$T556145 = -48						; size = 16
$T556144 = -32						; size = 4
_szEncEventType$ = -28					; size = 7
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z PROC ; ioEntityGroup::GetAnimationEventTime_e<7>, COMDAT
; _this$ = ecx

; 414  : 	{

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 415  : 		_ENCSTR(szEventType, szEncEventType);

  00011	8a 08		 mov	 cl, BYTE PTR [eax]
  00013	84 c9		 test	 cl, cl
  00015	0f 84 c0 00 00
	00		 je	 $LN96@GetAnimati@2
  0001b	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0001e	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00021	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00024	84 c9		 test	 cl, cl
  00026	0f 84 a9 00 00
	00		 je	 $LN95@GetAnimati@2
  0002c	80 f1 ec	 xor	 cl, -20			; ffffffecH
  0002f	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00032	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00035	84 c9		 test	 cl, cl
  00037	0f 84 92 00 00
	00		 je	 $LN94@GetAnimati@2
  0003d	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00040	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00043	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00046	84 c9		 test	 cl, cl
  00048	74 7f		 je	 SHORT $LN93@GetAnimati@2
  0004a	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  0004d	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00050	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00053	84 c9		 test	 cl, cl
  00055	74 6c		 je	 SHORT $LN92@GetAnimati@2
  00057	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0005a	88 4d e8	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  0005d	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00060	84 c9		 test	 cl, cl
  00062	74 59		 je	 SHORT $LN91@GetAnimati@2
  00064	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00067	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  0006b	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  0006e	74 6f		 je	 SHORT $LN1@GetAnimati@2
  00070	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00073	84 c9		 test	 cl, cl
  00075	74 40		 je	 SHORT $LN89@GetAnimati@2
  00077	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  0007a	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  0007d	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  00080	84 c9		 test	 cl, cl
  00082	74 2d		 je	 SHORT $LN88@GetAnimati@2
  00084	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00087	88 4d ec	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  0008a	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  0008d	84 c9		 test	 cl, cl
  0008f	74 1a		 je	 SHORT $LN87@GetAnimati@2
  00091	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  00094	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00097	88 4d ed	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  0009a	84 c0		 test	 al, al
  0009c	74 07		 je	 SHORT $LN86@GetAnimati@2
  0009e	34 eb		 xor	 al, -21			; ffffffebH
  000a0	88 45 ee	 mov	 BYTE PTR _szEncEventType$[ebp+10], al
  000a3	eb 3a		 jmp	 SHORT $LN1@GetAnimati@2
$LN86@GetAnimati@2:
  000a5	c6 45 ee eb	 mov	 BYTE PTR _szEncEventType$[ebp+10], -21 ; ffffffebH
  000a9	eb 34		 jmp	 SHORT $LN1@GetAnimati@2
$LN87@GetAnimati@2:
  000ab	c6 45 ed ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  000af	eb 2e		 jmp	 SHORT $LN1@GetAnimati@2
$LN88@GetAnimati@2:
  000b1	c6 45 ec ed	 mov	 BYTE PTR _szEncEventType$[ebp+8], -19 ; ffffffedH
  000b5	eb 28		 jmp	 SHORT $LN1@GetAnimati@2
$LN89@GetAnimati@2:
  000b7	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  000bb	eb 22		 jmp	 SHORT $LN1@GetAnimati@2
$LN91@GetAnimati@2:
  000bd	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  000c1	eb 1c		 jmp	 SHORT $LN1@GetAnimati@2
$LN92@GetAnimati@2:
  000c3	c6 45 e8 ed	 mov	 BYTE PTR _szEncEventType$[ebp+4], -19 ; ffffffedH
  000c7	eb 16		 jmp	 SHORT $LN1@GetAnimati@2
$LN93@GetAnimati@2:
  000c9	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  000cd	eb 10		 jmp	 SHORT $LN1@GetAnimati@2
$LN94@GetAnimati@2:
  000cf	c6 45 e6 eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  000d3	eb 0a		 jmp	 SHORT $LN1@GetAnimati@2
$LN95@GetAnimati@2:
  000d5	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  000d9	eb 04		 jmp	 SHORT $LN1@GetAnimati@2
$LN96@GetAnimati@2:
  000db	c6 45 e4 ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati@2:
  000df	81 75 e4 ed ec
	eb ea		 xor	 DWORD PTR _szEncEventType$[ebp], -353637139 ; eaebecedH
  000e6	6a 04		 push	 4
  000e8	c6 45 ea 00	 mov	 BYTE PTR _szEncEventType$[ebp+6], 0
  000ec	58		 pop	 eax
$LL102@GetAnimati@2:
  000ed	8b c8		 mov	 ecx, eax
  000ef	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000f5	79 05		 jns	 SHORT $LN113@GetAnimati@2
  000f7	49		 dec	 ecx
  000f8	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000fb	41		 inc	 ecx
$LN113@GetAnimati@2:
  000fc	b2 ed		 mov	 dl, -19			; ffffffedH
  000fe	2a d1		 sub	 dl, cl
  00100	30 54 05 e4	 xor	 BYTE PTR _szEncEventType$[ebp+eax], dl
  00104	40		 inc	 eax
  00105	83 f8 06	 cmp	 eax, 6
  00108	7c e3		 jl	 SHORT $LL102@GetAnimati@2

; 416  : 		return GetAnimationEventTime(id, szEncEventType);

  0010a	8d 45 e4	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0010d	50		 push	 eax
  0010e	8d 4d d0	 lea	 ecx, DWORD PTR $T556145[ebp]
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00117	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0011b	8d 45 d0	 lea	 eax, DWORD PTR $T556145[ebp]
  0011e	50		 push	 eax
  0011f	ff 75 08	 push	 DWORD PTR _id$[ebp]
  00122	8b ce		 mov	 ecx, esi
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  0012a	d9 5d e0	 fstp	 DWORD PTR $T556144[ebp]
  0012d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00131	8d 4d d0	 lea	 ecx, DWORD PTR $T556145[ebp]
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0013a	d9 45 e0	 fld	 DWORD PTR $T556144[ebp]

; 417  : 	}

  0013d	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00142	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T556145[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTime_e@$06@ioEntityGroup@@QAEMHAAY06$$CBD@Z ENDP ; ioEntityGroup::GetAnimationEventTime_e<7>
PUBLIC	??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z ; std::allocator<D3DXVECTOR3>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z PROC ; std::allocator<D3DXVECTOR3>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@2:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@ABU3@@Z ENDP ; std::allocator<D3DXVECTOR3>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0
__ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
$T556231 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z PROC ; std::allocator<ioHashString>::construct<ioHashString &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T556231[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct@3
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@3:

; 209  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T556231[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ENDP ; std::allocator<ioHashString>::construct<ioHashString &>
PUBLIC	??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct<ioNephilimItem::AreaWeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z$0
__ehfuncinfo$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
_TEXT	SEGMENT
$T556250 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct<ioNephilimItem::AreaWeaponInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T556250[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@4
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z
$LN3@construct@4:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T556250[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUAreaWeaponInfo@ioNephilimItem@@@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct<ioNephilimItem::AreaWeaponInfo &>
PUBLIC	??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ; std::_Construct<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z
_TEXT	SEGMENT
$T556269 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z PROC ; std::_Construct<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T556269[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@4
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z
$LN3@Construct@4:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T556269[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ENDP ; std::_Construct<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
PUBLIC	?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z ; std::allocator<D3DXVECTOR3>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z PROC ; std::allocator<D3DXVECTOR3>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z ENDP ; std::allocator<D3DXVECTOR3>::destroy
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Destroy@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@@Z ; std::_Destroy<ioNephilimItem::AreaWeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@@Z PROC ; std::_Destroy<ioNephilimItem::AreaWeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@@Z ENDP ; std::_Destroy<ioNephilimItem::AreaWeaponInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
_TEXT	SEGMENT
$T556312 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T556312[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct@5
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@5:

; 203  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T556312[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ENDP ; std::allocator<ioHashString>::construct
PUBLIC	?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z ; std::allocator<D3DXVECTOR3>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z PROC ; std::allocator<D3DXVECTOR3>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct@6
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct@6:
  00013	5f		 pop	 edi

; 203  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@$$QAU3@@Z ENDP ; std::allocator<D3DXVECTOR3>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@7
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@7:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z$0
__ehfuncinfo$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z
_TEXT	SEGMENT
$T556368 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T556368[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@8
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z
$LN3@construct@8:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T556368[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@$$QAU34@@Z ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T556387 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T556387[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@5
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@5:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T556387[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ; std::allocator<ioHashString>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ; std::_Destroy<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z PROC ; std::_Destroy<ioHashString>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ENDP ; std::_Destroy<ioHashString>
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ; std::allocator<ioHashString>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ENDP ; std::allocator<ioHashString>::construct
_TEXT	ENDS
PUBLIC	?SetGravityAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetGravityAmt
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?SetGravityAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_value$556534 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetGravityAmt@ioBaseChar@@QAEXM@Z PROC			; ioBaseChar::SetGravityAmt, COMDAT
; _this$ = ecx

; 2631 : 	inline void SetGravityAmt( float fAmt ) { m_fGravityAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	8d 45 08	 lea	 eax, DWORD PTR _value$556534[ebp]
  0000b	50		 push	 eax
  0000c	81 c1 e8 0b 00
	00		 add	 ecx, 3048		; 00000be8H
  00012	f3 0f 11 45 08	 movss	 DWORD PTR _value$556534[ebp], xmm0
  00017	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetGravityAmt@ioBaseChar@@QAEXM@Z ENDP			; ioBaseChar::SetGravityAmt
_TEXT	ENDS
PUBLIC	?SetForcePowerAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetForcePowerAmt
; Function compile flags: /Ogsp
;	COMDAT ?SetForcePowerAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_value$556540 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetForcePowerAmt@ioBaseChar@@QAEXM@Z PROC		; ioBaseChar::SetForcePowerAmt, COMDAT
; _this$ = ecx

; 2641 : 	inline void SetForcePowerAmt( float fAmt ) { m_fForceAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	8d 45 08	 lea	 eax, DWORD PTR _value$556540[ebp]
  0000b	50		 push	 eax
  0000c	81 c1 88 0b 00
	00		 add	 ecx, 2952		; 00000b88H
  00012	f3 0f 11 45 08	 movss	 DWORD PTR _value$556540[ebp], xmm0
  00017	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetForcePowerAmt@ioBaseChar@@QAEXM@Z ENDP		; ioBaseChar::SetForcePowerAmt
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4f800000
PUBLIC	__real@42c80000
PUBLIC	?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z ; ioNephilimItem::SetNormalAttack
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
EXTRN	__imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
;	COMDAT __real@3ff0000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z$0
__ehfuncinfo$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z
_TEXT	SEGMENT
_szPreAni$ = -36					; size = 16
tv250 = -20						; size = 8
__$EHRec$ = -12						; size = 12
tv273 = 8						; size = 4
tv266 = 8						; size = 4
_value$556560 = 8					; size = 4
_fTimeRate$549438 = 8					; size = 4
_pOwner$ = 8						; size = 4
_pGrp$ = 12						; size = 4
_iCurCombo$ = 12					; size = 4
?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z PROC ; ioNephilimItem::SetNormalAttack, COMDAT
; _this$ = ecx

; 125  : {

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 126  : 	ClearCancelInfo();	

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 90 3c 02 00
	00		 call	 DWORD PTR [eax+572]

; 127  : 	
; 128  : 	m_ChargeState		= CS_CHARGING;

  00016	33 ff		 xor	 edi, edi
  00018	47		 inc	 edi
  00019	89 be 98 1a 00
	00		 mov	 DWORD PTR [esi+6808], edi

; 129  : 	m_dwAttackStartTime	= FRAMEGETTIME();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00025	8b c8		 mov	 ecx, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 130  : 	m_nCurCombo			= iCurCombo;

  0002d	8b 5d 0c	 mov	 ebx, DWORD PTR _iCurCombo$[ebp]

; 131  : 
; 132  : 	pOwner->SetState( CS_ATTACK );

  00030	57		 push	 edi
  00031	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00034	6a 05		 push	 5
  00036	8b cf		 mov	 ecx, edi
  00038	89 86 a0 1a 00
	00		 mov	 DWORD PTR [esi+6816], eax
  0003e	89 9e a4 1a 00
	00		 mov	 DWORD PTR [esi+6820], ebx
  00044	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 133  : 	pOwner->SetChargingState( true );
; 134  : 
; 135  : 	ioEntityGroup *pGrp = pOwner->GetGroup();
; 136  : 	pGrp->ClearAllActionAni( 100.0f, true );

  00049	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00051	c6 87 54 20 00
	00 01		 mov	 BYTE PTR [edi+8276], 1
  00058	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  0005b	6a 01		 push	 1
  0005d	51		 push	 ecx
  0005e	8b cf		 mov	 ecx, edi
  00060	89 7d 0c	 mov	 DWORD PTR _pGrp$[ebp], edi
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 137  : 	pGrp->ClearAllLoopAni( 100.0f, true );

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00076	6a 01		 push	 1
  00078	51		 push	 ecx
  00079	8b cf		 mov	 ecx, edi
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 138  : 
; 139  : 	int iPreGatherCnt = m_szPreGatherAniList.size();

  00086	8b be 58 19 00
	00		 mov	 edi, DWORD PTR [esi+6488]
  0008c	2b be 54 19 00
	00		 sub	 edi, DWORD PTR [esi+6484]

; 140  : 
; 141  : 	ioHashString szPreAni;

  00092	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00095	c1 ff 04	 sar	 edi, 4
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0009e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 142  : 	if( 0 < iPreGatherCnt && COMPARE( iCurCombo, 0, iPreGatherCnt ) )

  000a2	85 ff		 test	 edi, edi
  000a4	0f 8e b6 00 00
	00		 jle	 $LN1@SetNormalA
  000aa	85 db		 test	 ebx, ebx
  000ac	0f 88 ae 00 00
	00		 js	 $LN1@SetNormalA
  000b2	3b df		 cmp	 ebx, edi
  000b4	0f 8d a6 00 00
	00		 jge	 $LN1@SetNormalA

; 143  : 	{
; 144  : 		szPreAni = m_szPreGatherAniList[iCurCombo];

  000ba	c1 e3 04	 shl	 ebx, 4
  000bd	03 9e 54 19 00
	00		 add	 ebx, DWORD PTR [esi+6484]
  000c3	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  000c6	53		 push	 ebx
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 145  : 		
; 146  : 		int iAniID = pGrp->GetAnimationIdx( szPreAni );

  000cd	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000d0	8d 45 dc	 lea	 eax, DWORD PTR _szPreAni$[ebp]
  000d3	50		 push	 eax
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  000da	8b f8		 mov	 edi, eax

; 147  : 		float fTimeRate = (float)m_dwChargeTime / pGrp->GetAnimationFullTime( iAniID );

  000dc	8d 45 08	 lea	 eax, DWORD PTR _value$556560[ebp]
  000df	50		 push	 eax
  000e0	8d 8e b0 18 00
	00		 lea	 ecx, DWORD PTR [esi+6320]
  000e6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000eb	db 45 08	 fild	 DWORD PTR _value$556560[ebp]
  000ee	8b 45 08	 mov	 eax, DWORD PTR _value$556560[ebp]
  000f1	85 c0		 test	 eax, eax
  000f3	79 06		 jns	 SHORT $LN16@SetNormalA
  000f5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN16@SetNormalA:
  000fb	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000fe	dd 5d ec	 fstp	 QWORD PTR tv250[ebp]
  00101	57		 push	 edi
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  00108	dc 7d ec	 fdivr	 QWORD PTR tv250[ebp]

; 148  : 		pGrp->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate, 0.0f, 0.0f, true );

  0010b	0f 57 c0	 xorps	 xmm0, xmm0
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00111	6a 01		 push	 1
  00113	6a 01		 push	 1
  00115	83 ec 18	 sub	 esp, 24			; 00000018H
  00118	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0011e	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0012c	d9 5d 08	 fstp	 DWORD PTR _fTimeRate$549438[ebp]
  0012f	d9 45 08	 fld	 DWORD PTR _fTimeRate$549438[ebp]
  00132	d9 e8		 fld1
  00134	de f1		 fdivrp	 ST(1), ST(0)
  00136	d9 5d 08	 fstp	 DWORD PTR tv266[ebp]
  00139	d9 45 08	 fld	 DWORD PTR tv266[ebp]
  0013c	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00140	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0014e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	57		 push	 edi
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetNormalA:

; 149  : 	}
; 150  : }

  00160	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00164	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0016d	e8 00 00 00 00	 call	 __EH_epilog3
  00172	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z ENDP ; ioNephilimItem::SetNormalAttack
PUBLIC	_pOwner$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToChargeJump@ioNephilimItem@@IAE_NPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToChargeJump
EXTRN	?GetMapHeightNoneEntity@ioPlayStage@@QAEMMMM_N@Z:PROC ; ioPlayStage::GetMapHeightNoneEntity
; Function compile flags: /Ogsp
;	COMDAT ?ChangeToChargeJump@ioNephilimItem@@IAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pAreaWeapon$549817 = -32				; size = 4
_pOwner$GSCopy$ = -28					; size = 4
_i$549812 = -24						; size = 4
_fMapHeight$549821 = -20				; size = 4
_pStage$ = -20						; size = 4
_vAreaPos$549820 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?ChangeToChargeJump@ioNephilimItem@@IAE_NPAVioBaseChar@@@Z PROC ; ioNephilimItem::ChangeToChargeJump, COMDAT
; _this$ = ecx

; 561  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b d9		 mov	 ebx, ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]

; 562  : 	if( !pOwner )

  00017	33 f6		 xor	 esi, esi

; 582  : 		vAreaPos.y += m_fTeleportHeightOffset;

  00019	89 4d e4	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], ecx
  0001c	3b ce		 cmp	 ecx, esi
  0001e	75 04		 jne	 SHORT $LN8@ChangeToCh
$LN29@ChangeToCh:

; 563  : 		return false;

  00020	32 c0		 xor	 al, al
  00022	eb 77		 jmp	 SHORT $LN9@ChangeToCh
$LN8@ChangeToCh:

; 564  : 	
; 565  : 	ioPlayStage *pStage = pOwner->GetCreator();

  00024	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  0002a	89 45 ec	 mov	 DWORD PTR _pStage$[ebp], eax

; 566  : 	if ( !pStage )

  0002d	3b c6		 cmp	 eax, esi

; 567  : 		return false;

  0002f	74 ef		 je	 SHORT $LN29@ChangeToCh

; 568  : 
; 569  : 	for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  00031	8b 83 58 1a 00
	00		 mov	 eax, DWORD PTR [ebx+6744]
  00037	2b 83 54 1a 00
	00		 sub	 eax, DWORD PTR [ebx+6740]
  0003d	57		 push	 edi
  0003e	6a 18		 push	 24			; 00000018H
  00040	99		 cdq
  00041	5f		 pop	 edi
  00042	f7 ff		 idiv	 edi
  00044	89 75 e8	 mov	 DWORD PTR _i$549812[ebp], esi
  00047	85 c0		 test	 eax, eax
  00049	7e 4d		 jle	 SHORT $LN4@ChangeToCh
  0004b	8d b9 d4 02 00
	00		 lea	 edi, DWORD PTR [ecx+724]
$LL6@ChangeToCh:

; 570  : 	{
; 571  : 		ioAreaWeapon *pAreaWeapon = g_AreaWeaponMgr.FindAreaWeaponByName( m_AreaWeaponInfoList[i].m_szAreaWeapon, pOwner->GetCharName() );

  00051	8b 83 54 1a 00
	00		 mov	 eax, DWORD PTR [ebx+6740]
  00057	03 c6		 add	 eax, esi
  00059	57		 push	 edi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?FindAreaWeaponByName@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@0@Z ; ioAreaWeaponManager::FindAreaWeaponByName
  00067	89 45 e0	 mov	 DWORD PTR _pAreaWeapon$549817[ebp], eax

; 572  : 		if ( !pAreaWeapon )

  0006a	85 c0		 test	 eax, eax
  0006c	74 0d		 je	 SHORT $LN5@ChangeToCh

; 573  : 			continue;
; 574  : 
; 575  : 		if ( m_AreaWeaponInfoList[i].m_nTeleportWeaponNum == NO_WEAPON_ATTRIBUTE )

  0006e	8b 8b 54 1a 00
	00		 mov	 ecx, DWORD PTR [ebx+6740]
  00074	83 7c 0e 10 00	 cmp	 DWORD PTR [esi+ecx+16], 0
  00079	75 30		 jne	 SHORT $LN2@ChangeToCh
$LN5@ChangeToCh:

; 568  : 
; 569  : 	for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  0007b	8b 83 58 1a 00
	00		 mov	 eax, DWORD PTR [ebx+6744]
  00081	2b 83 54 1a 00
	00		 sub	 eax, DWORD PTR [ebx+6740]
  00087	6a 18		 push	 24			; 00000018H
  00089	99		 cdq
  0008a	59		 pop	 ecx
  0008b	f7 f9		 idiv	 ecx
  0008d	ff 45 e8	 inc	 DWORD PTR _i$549812[ebp]
  00090	83 c6 18	 add	 esi, 24			; 00000018H
  00093	39 45 e8	 cmp	 DWORD PTR _i$549812[ebp], eax
  00096	7c b9		 jl	 SHORT $LL6@ChangeToCh
$LN4@ChangeToCh:

; 591  : 	}
; 592  : 	
; 593  : 	return false;

  00098	32 c0		 xor	 al, al
$LN28@ChangeToCh:
  0009a	5f		 pop	 edi
$LN9@ChangeToCh:

; 594  : }

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	5e		 pop	 esi
  0009f	33 cd		 xor	 ecx, ebp
  000a1	5b		 pop	 ebx
  000a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a7	c9		 leave
  000a8	c2 04 00	 ret	 4
$LN2@ChangeToCh:

; 576  : 			continue;
; 577  : 
; 578  : 		D3DXVECTOR3 vAreaPos = pAreaWeapon->GetStartPos();
; 579  : 		float fMapHeight = pStage->GetMapHeightNoneEntity( vAreaPos.x, vAreaPos.z );

  000ab	0f 57 c0	 xorps	 xmm0, xmm0
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _pStage$[ebp]
  000b1	8d b0 4c 01 00
	00		 lea	 esi, DWORD PTR [eax+332]
  000b7	8d 7d f0	 lea	 edi, DWORD PTR _vAreaPos$549820[ebp]
  000ba	a5		 movsd
  000bb	a5		 movsd
  000bc	6a 00		 push	 0
  000be	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000c1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c7	a5		 movsd
  000c8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vAreaPos$549820[ebp+8]
  000cd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000d3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vAreaPos$549820[ebp]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	e8 00 00 00 00	 call	 ?GetMapHeightNoneEntity@ioPlayStage@@QAEMMMM_N@Z ; ioPlayStage::GetMapHeightNoneEntity
  000e2	d9 5d ec	 fstp	 DWORD PTR _fMapHeight$549821[ebp]

; 580  : 		if ( vAreaPos.y < fMapHeight )

  000e5	d9 45 f4	 fld	 DWORD PTR _vAreaPos$549820[ebp+4]
  000e8	d9 45 ec	 fld	 DWORD PTR _fMapHeight$549821[ebp]
  000eb	df f1		 fcomip	 ST(1)
  000ed	dd d8		 fstp	 ST(0)
  000ef	76 07		 jbe	 SHORT $LN27@ChangeToCh

; 581  : 			vAreaPos.y = fMapHeight;

  000f1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fMapHeight$549821[ebp]
  000f6	eb 05		 jmp	 SHORT $LN1@ChangeToCh
$LN27@ChangeToCh:
  000f8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vAreaPos$549820[ebp+4]
$LN1@ChangeToCh:

; 582  : 		vAreaPos.y += m_fTeleportHeightOffset;

  000fd	f3 0f 10 8b 64
	1a 00 00	 movss	 xmm1, DWORD PTR [ebx+6756]

; 583  : 
; 584  : 		pOwner->SetWorldPosition( vAreaPos );

  00105	8b 75 e4	 mov	 esi, DWORD PTR _pOwner$GSCopy$[ebp]
  00108	8b 06		 mov	 eax, DWORD PTR [esi]
  0010a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010d	8d 4d f0	 lea	 ecx, DWORD PTR _vAreaPos$549820[ebp]
  00110	0f 5a c9	 cvtps2pd xmm1, xmm1
  00113	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00117	51		 push	 ecx
  00118	8b ce		 mov	 ecx, esi
  0011a	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0011e	f3 0f 11 45 f4	 movss	 DWORD PTR _vAreaPos$549820[ebp+4], xmm0
  00123	ff 50 44	 call	 DWORD PTR [eax+68]

; 585  : 
; 586  : 		CreateAreaAttachWeapon( pOwner, pAreaWeapon, m_AreaWeaponInfoList[i].m_nTeleportWeaponNum );

  00126	8b 45 e8	 mov	 eax, DWORD PTR _i$549812[ebp]
  00129	8b 8b 54 1a 00
	00		 mov	 ecx, DWORD PTR [ebx+6740]
  0012f	6b c0 18	 imul	 eax, 24			; 00000018H
  00132	ff 74 08 10	 push	 DWORD PTR [eax+ecx+16]
  00136	8b cb		 mov	 ecx, ebx
  00138	ff 75 e0	 push	 DWORD PTR _pAreaWeapon$549817[ebp]
  0013b	56		 push	 esi
  0013c	e8 00 00 00 00	 call	 ?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z ; ioNephilimItem::CreateAreaAttachWeapon

; 587  : 
; 588  : 		ChangeToSpecialAttack( pOwner, CS_NEPHILIM_TELEPORT_STATE, CS_TELEPORT, false );

  00141	6a 00		 push	 0
  00143	6a 06		 push	 6
  00145	68 a0 00 00 00	 push	 160			; 000000a0H
  0014a	56		 push	 esi
  0014b	8b cb		 mov	 ecx, ebx
  0014d	e8 00 00 00 00	 call	 ?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z ; ioNephilimItem::ChangeToSpecialAttack

; 589  : 		m_SpecialState = SS_TELEPORT;

  00152	c7 83 9c 1a 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+6812], 3

; 590  : 		return true;

  0015c	b0 01		 mov	 al, 1
  0015e	e9 37 ff ff ff	 jmp	 $LN28@ChangeToCh
?ChangeToChargeJump@ioNephilimItem@@IAE_NPAVioBaseChar@@@Z ENDP ; ioNephilimItem::ChangeToChargeJump
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z ; ioNephilimItem::ChangeAniState
EXTRN	?RefreshFireTimeList@ioBaseChar@@QAEXHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z:PROC ; ioBaseChar::RefreshFireTimeList
EXTRN	?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z:PROC ; ioBaseChar::SetReservedSliding
EXTRN	?ClearReservedSliding@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::ClearReservedSliding
EXTRN	__ftol2:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z$0
__ehfuncinfo$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z
_TEXT	SEGMENT
$T556731 = -64						; size = 16
tv1060 = -48						; size = 4
tv1037 = -48						; size = 4
_fTimeRate$ = -44					; size = 4
_value$556755 = -40					; size = 4
$T556730 = -40						; size = 4
_this$GSCopy$ = -40					; size = 4
tv916 = -36						; size = 4
_dwPreDelay$ = -36					; size = 4
_value$556765 = -32					; size = 4
_iAniID$ = -32						; size = 4
_szEncEventType$556631 = -28				; size = 7
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_AttackInfo$ = 12					; size = 4
_bRefreshFire$ = 16					; size = 1
?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z PROC ; ioNephilimItem::ChangeAniState, COMDAT
; _this$ = ecx

; 638  : {

  00000	6a 34		 push	 52			; 00000034H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _AttackInfo$[ebp]
  00012	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 639  : 	if( !pOwner )

  00015	85 f6		 test	 esi, esi
  00017	0f 84 11 02 00
	00		 je	 $LN123@ChangeAniS

; 640  : 		return;
; 641  : 
; 642  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  0001d	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]

; 643  : 	int iAniID = pGrp->GetAnimationIdx( AttackInfo.m_AttackAnimation );

  00020	57		 push	 edi
  00021	8b cb		 mov	 ecx, ebx
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00029	89 45 e0	 mov	 DWORD PTR _iAniID$[ebp], eax

; 644  : 	if ( iAniID == -1 )

  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	0f 84 f9 01 00
	00		 je	 $LN123@ChangeAniS

; 645  : 		return;
; 646  : 
; 647  : 	float fTimeRate  = AttackInfo.m_fAttackAniRate;

  00035	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]

; 648  : 	DWORD dwPreDelay = AttackInfo.m_dwPreDelay;

  0003a	8b 47 48	 mov	 eax, DWORD PTR [edi+72]

; 649  : 
; 650  : 	pGrp->ClearAllLoopAni( 100.0f, true );

  0003d	6a 01		 push	 1
  0003f	51		 push	 ecx
  00040	f3 0f 11 45 d4	 movss	 DWORD PTR _fTimeRate$[ebp], xmm0
  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0004d	8b cb		 mov	 ecx, ebx
  0004f	89 45 dc	 mov	 DWORD PTR _dwPreDelay$[ebp], eax
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 651  : 	pGrp->ClearAllActionAni( 100.0f, true );

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00065	6a 01		 push	 1
  00067	51		 push	 ecx
  00068	8b cb		 mov	 ecx, ebx
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 652  : 	pGrp->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate, 0.0f, dwPreDelay );	

  00075	db 45 dc	 fild	 DWORD PTR _dwPreDelay$[ebp]
  00078	8b 45 dc	 mov	 eax, DWORD PTR _dwPreDelay$[ebp]
  0007b	6a 01		 push	 1
  0007d	6a 00		 push	 0
  0007f	85 c0		 test	 eax, eax
  00081	79 06		 jns	 SHORT $LN131@ChangeAniS
  00083	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN131@ChangeAniS:
  00089	0f 57 c0	 xorps	 xmm0, xmm0
  0008c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00094	83 ec 18	 sub	 esp, 24			; 00000018H
  00097	d9 5c 24 14	 fstp	 DWORD PTR [esp+20]
  0009b	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000a1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  000a6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000ad	8b cb		 mov	 ecx, ebx
  000af	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000b3	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000cf	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	ff 75 e0	 push	 DWORD PTR _iAniID$[ebp]
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z

; 653  : 
; 654  : 	pOwner->ClearReservedSliding();

  000e3	8b ce		 mov	 ecx, esi
  000e5	e8 00 00 00 00	 call	 ?ClearReservedSliding@ioBaseChar@@QAEXXZ ; ioBaseChar::ClearReservedSliding

; 655  : 	pOwner->SetReservedSliding( AttackInfo.m_vForceInfoList, iAniID, fTimeRate, dwPreDelay );

  000ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f2	6a 01		 push	 1
  000f4	51		 push	 ecx
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	ff 75 dc	 push	 DWORD PTR _dwPreDelay$[ebp]
  000fd	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  00102	51		 push	 ecx
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	ff 75 e0	 push	 DWORD PTR _iAniID$[ebp]
  0010b	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  0010e	50		 push	 eax
  0010f	8b ce		 mov	 ecx, esi
  00111	e8 00 00 00 00	 call	 ?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z ; ioBaseChar::SetReservedSliding

; 656  : 
; 657  : 	if ( bRefreshFire )

  00116	80 7d 10 00	 cmp	 BYTE PTR _bRefreshFire$[ebp], 0
  0011a	74 20		 je	 SHORT $LN1@ChangeAniS

; 658  : 		pOwner->RefreshFireTimeList( iAniID, AttackInfo.m_vWeaponInfoList, FTT_NORMAL_ATTACK, fTimeRate, dwPreDelay );

  0011c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  00121	6a 00		 push	 0
  00123	ff 75 dc	 push	 DWORD PTR _dwPreDelay$[ebp]
  00126	83 c7 28	 add	 edi, 40			; 00000028H
  00129	51		 push	 ecx
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	6a 00		 push	 0
  00131	57		 push	 edi
  00132	ff 75 e0	 push	 DWORD PTR _iAniID$[ebp]
  00135	8b ce		 mov	 ecx, esi
  00137	e8 00 00 00 00	 call	 ?RefreshFireTimeList@ioBaseChar@@QAEXHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z ; ioBaseChar::RefreshFireTimeList
$LN1@ChangeAniS:

; 659  : 
; 660  : 	DWORD dwCurTime = FRAMEGETTIME();

  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00142	8b c8		 mov	 ecx, eax
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 661  : 	m_dwMotionEndTime = dwCurTime + pGrp->GetAnimationFullTime( iAniID ) * fTimeRate;

  0014a	89 45 d0	 mov	 DWORD PTR tv1037[ebp], eax
  0014d	db 45 d0	 fild	 DWORD PTR tv1037[ebp]
  00150	85 c0		 test	 eax, eax
  00152	79 06		 jns	 SHORT $LN132@ChangeAniS
  00154	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN132@ChangeAniS:
  0015a	ff 75 e0	 push	 DWORD PTR _iAniID$[ebp]
  0015d	d9 5d dc	 fstp	 DWORD PTR tv916[ebp]
  00160	8b cb		 mov	 ecx, ebx
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  00168	d8 4d d4	 fmul	 DWORD PTR _fTimeRate$[ebp]
  0016b	d8 45 dc	 fadd	 DWORD PTR tv916[ebp]
  0016e	e8 00 00 00 00	 call	 __ftol2
  00173	8b 7d d8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]

; 662  : 	m_dwFireTime = dwCurTime + pGrp->GetAnimationEventTime_e( iAniID, "fire_s" ) * fTimeRate;

  00176	6a 04		 push	 4
  00178	89 87 a8 1a 00
	00		 mov	 DWORD PTR [edi+6824], eax
  0017e	c7 45 e4 8b 85
	99 8f		 mov	 DWORD PTR _szEncEventType$556631[ebp], -1885764213 ; 8f99858bH
  00185	81 75 e4 ed ec
	eb ea		 xor	 DWORD PTR _szEncEventType$556631[ebp], -353637139 ; eaebecedH
  0018c	66 c7 45 e8 b2
	9f		 mov	 WORD PTR _szEncEventType$556631[ebp+4], 40882 ; 00009fb2H
  00192	c6 45 ea 00	 mov	 BYTE PTR _szEncEventType$556631[ebp+6], 0
  00196	58		 pop	 eax
$LL109@ChangeAniS:
  00197	8b c8		 mov	 ecx, eax
  00199	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0019f	79 05		 jns	 SHORT $LN133@ChangeAniS
  001a1	49		 dec	 ecx
  001a2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001a5	41		 inc	 ecx
$LN133@ChangeAniS:
  001a6	b2 ed		 mov	 dl, -19			; ffffffedH
  001a8	2a d1		 sub	 dl, cl
  001aa	30 54 05 e4	 xor	 BYTE PTR _szEncEventType$556631[ebp+eax], dl
  001ae	40		 inc	 eax
  001af	83 f8 06	 cmp	 eax, 6
  001b2	7c e3		 jl	 SHORT $LL109@ChangeAniS
  001b4	8d 45 e4	 lea	 eax, DWORD PTR _szEncEventType$556631[ebp]
  001b7	50		 push	 eax
  001b8	8d 4d c0	 lea	 ecx, DWORD PTR $T556731[ebp]
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  001c1	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  001c5	8d 45 c0	 lea	 eax, DWORD PTR $T556731[ebp]
  001c8	50		 push	 eax
  001c9	ff 75 e0	 push	 DWORD PTR _iAniID$[ebp]
  001cc	8b cb		 mov	 ecx, ebx
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  001d4	d9 5d d8	 fstp	 DWORD PTR $T556730[ebp]
  001d7	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001db	8d 4d c0	 lea	 ecx, DWORD PTR $T556731[ebp]
  001de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001e4	d9 45 d8	 fld	 DWORD PTR $T556730[ebp]
  001e7	d8 4d d4	 fmul	 DWORD PTR _fTimeRate$[ebp]
  001ea	d8 45 dc	 fadd	 DWORD PTR tv916[ebp]
  001ed	e8 00 00 00 00	 call	 __ftol2

; 663  : 
; 664  : 	pOwner->SetCurJumpPowerAmt( 0.0f );

  001f2	0f 57 c0	 xorps	 xmm0, xmm0
  001f5	89 87 ac 1a 00
	00		 mov	 DWORD PTR [edi+6828], eax

; 665  : 	pOwner->SetForcePowerAmt( 0.0f );

  001fb	8d 45 d8	 lea	 eax, DWORD PTR _value$556755[ebp]
  001fe	50		 push	 eax
  001ff	8d 8e 88 0b 00
	00		 lea	 ecx, DWORD PTR [esi+2952]
  00205	f3 0f 11 86 90
	0e 00 00	 movss	 DWORD PTR [esi+3728], xmm0
  0020d	f3 0f 11 45 d8	 movss	 DWORD PTR _value$556755[ebp], xmm0
  00212	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 666  : 	pOwner->SetGravityAmt( 0.0f );	

  00217	0f 57 c0	 xorps	 xmm0, xmm0
  0021a	8d 45 e0	 lea	 eax, DWORD PTR _value$556765[ebp]
  0021d	50		 push	 eax
  0021e	8d 8e e8 0b 00
	00		 lea	 ecx, DWORD PTR [esi+3048]
  00224	f3 0f 11 45 e0	 movss	 DWORD PTR _value$556765[ebp], xmm0
  00229	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
$LN123@ChangeAniS:

; 667  : }

  0022e	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00233	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T556731[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z ENDP ; ioNephilimItem::ChangeAniState
PUBLIC	??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 375  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 377  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 378  : 		return (_Tmp);
; 379  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator!=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioBaseChar@@V?$allocator@PAVioBaseChar@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioBaseChar *,std::allocator<ioBaseChar *> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
$T556906 = -16						; size = 12
$T556884 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 493  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 494  : 		this->_Mysize = 0;

  00009	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

  0000d	6a 0c		 push	 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	74 10		 je	 SHORT $LN13@List_val
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0001b	89 00		 mov	 DWORD PTR [eax], eax

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 498  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c9		 leave
  00026	c2 04 00	 ret	 4

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN13@List_val:
  00029	83 65 fc 00	 and	 DWORD PTR $T556884[ebp], 0
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T556884[ebp]
  00030	50		 push	 eax
  00031	8d 4d f0	 lea	 ecx, DWORD PTR $T556906[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 45 f0	 lea	 eax, DWORD PTR $T556906[ebp]
  00042	50		 push	 eax
  00043	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T556906[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@List_val:
$LN28@List_val:
  0004f	cc		 int	 3
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAE_NI@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff aa aa aa
	0a		 cmp	 edi, 178956970		; 0aaaaaaaH
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@IPAU12@@Z ; std::_Allocate<ioNephilimItem::AreaWeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 18	 imul	 edi, 24			; 00000018H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  0000d	c1 f8 04	 sar	 eax, 4
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@3
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@3:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@2:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
_TEXT	SEGMENT
$T557055 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T557055[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@3
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z
$LN7@Cons_val@3:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T557055[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo &>
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@ABU34@@Z ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@ABU34@@Z PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ; std::_Construct<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@ABU34@@Z ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z ; std::_Dest_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z PROC ; std::_Dest_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@@Z ENDP ; std::_Dest_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@@Z ; std::allocator<ioNephilimItem::AreaWeaponInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@@Z PROC ; std::allocator<ioNephilimItem::AreaWeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@QAEXPAUAreaWeaponInfo@ioNephilimItem@@@Z ENDP ; std::allocator<ioNephilimItem::AreaWeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@4
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@4:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val@5
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val@5:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z
_TEXT	SEGMENT
$T557213 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T557213[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@6
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0AreaWeaponInfo@ioNephilimItem@@QAE@ABU01@@Z
$LN7@Cons_val@6:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T557213[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo>
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff ff ff ff
	0f		 cmp	 edi, 268435455		; 0fffffffH
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	c1 e7 04	 shl	 edi, 4
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@3

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@3
$LN4@Buy@3:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 66 66 66
	06		 cmp	 edi, 107374182		; 06666666H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@3

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@3:
$LN2@Buy@3:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 28	 imul	 edi, 40			; 00000028H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@3:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@3:
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@4

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@4
$LN4@Buy@4:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@4

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@4:
$LN2@Buy@4:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@4:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@4:
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ; std::allocator<ioHashString>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z PROC ; std::allocator<ioHashString>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ENDP ; std::allocator<ioHashString>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
_TEXT	ENDS
PUBLIC	?SetJumpping@ioNephilimItem@@UAEXPAVioBaseChar@@_N@Z ; ioNephilimItem::SetJumpping
EXTRN	?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioAttackableItem::SetJumpping
EXTRN	?HasBuff@ioBaseChar@@QBE_NABVioHashString@@0@Z:PROC ; ioBaseChar::HasBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
;	COMDAT ?SetJumpping@ioNephilimItem@@UAEXPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bFullTime$ = 12					; size = 1
?SetJumpping@ioNephilimItem@@UAEXPAVioBaseChar@@_N@Z PROC ; ioNephilimItem::SetJumpping, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 235  : 	if ( bFullTime )

  00003	80 7d 0c 00	 cmp	 BYTE PTR _bFullTime$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 2a		 je	 SHORT $LN2@SetJumppin

; 236  : 	{
; 237  : 		bool bCheckBuff = pOwner->HasBuff( pOwner->GetCharName(), m_szSpecialCheckBuff );

  00010	8d 86 74 1a 00
	00		 lea	 eax, DWORD PTR [esi+6772]
  00016	50		 push	 eax
  00017	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  0001d	50		 push	 eax
  0001e	8b cf		 mov	 ecx, edi
  00020	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@0@Z ; ioBaseChar::HasBuff

; 238  : 		if ( bCheckBuff )
; 239  : 			ChangeToSpecialAttack( pOwner, CS_NEPHILIM_BOMB_STATE, CS_BOMB_ATTACK, false );

  00025	8b ce		 mov	 ecx, esi
  00027	84 c0		 test	 al, al
  00029	74 20		 je	 SHORT $LN3@SetJumppin
  0002b	6a 00		 push	 0
  0002d	6a 05		 push	 5
  0002f	68 9f 00 00 00	 push	 159			; 0000009fH
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 ?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z ; ioNephilimItem::ChangeToSpecialAttack
$LN2@SetJumppin:

; 245  : 		}
; 246  : 	}
; 247  : 
; 248  : 	ioAttackableItem::SetJumpping( pOwner, bFullTime );

  0003a	ff 75 0c	 push	 DWORD PTR _bFullTime$[ebp]
$LN9@SetJumppin:
  0003d	57		 push	 edi
  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z ; ioAttackableItem::SetJumpping
$LN5@SetJumppin:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 249  : }

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN3@SetJumppin:

; 240  : 		else
; 241  : 		{
; 242  : 			if ( !ChangeToChargeJump( pOwner ) )

  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 ?ChangeToChargeJump@ioNephilimItem@@IAE_NPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToChargeJump
  00051	84 c0		 test	 al, al
  00053	75 f0		 jne	 SHORT $LN5@SetJumppin

; 243  : 				ioAttackableItem::SetJumpping( pOwner, false );

  00055	6a 00		 push	 0

; 244  : 			return;

  00057	eb e4		 jmp	 SHORT $LN9@SetJumppin
?SetJumpping@ioNephilimItem@@UAEXPAVioBaseChar@@_N@Z ENDP ; ioNephilimItem::SetJumpping
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToChargeAttack
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_kPacket$549804 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z PROC ; ioNephilimItem::ChangeToChargeAttack, COMDAT
; _this$ = ecx

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 1c 80 00 00	 mov	 eax, 32796		; 0000801cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00034	8b f9		 mov	 edi, ecx

; 542  : 	if( !pOwner ) 

  00036	85 f6		 test	 esi, esi
  00038	0f 84 9b 00 00
	00		 je	 $LN1@ChangeToCh@2

; 543  : 		return;
; 544  : 	
; 545  : 	ChangeAniState( pOwner, m_ChargeAttackAttribute, true );

  0003e	6a 01		 push	 1
  00040	8d 87 64 19 00
	00		 lea	 eax, DWORD PTR [edi+6500]
  00046	50		 push	 eax
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z ; ioNephilimItem::ChangeAniState

; 546  : 
; 547  : 	m_ChargeState = CS_CHARGE_ATTACK;

  0004d	c7 87 98 1a 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+6808], 3

; 548  : 	
; 549  : 	if( pOwner->IsNeedSendNetwork() )

  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	8b ce		 mov	 ecx, esi
  0005b	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00061	84 c0		 test	 al, al
  00063	74 74		 je	 SHORT $LN1@ChangeToCh@2

; 550  : 	{
; 551  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  00065	68 27 41 00 00	 push	 16679			; 00004127H
  0006a	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549804[ebp]
  00070	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  00075	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 552  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  00079	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549804[ebp]
  0007f	50		 push	 eax
  00080	56		 push	 esi
  00081	8b cf		 mov	 ecx, edi
  00083	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 553  : 		kPacket << CS_CHARGE_ATTACK;

  00088	6a 03		 push	 3
  0008a	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549804[ebp]
  00090	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 554  : 		kPacket << pOwner->GetWorldPosition();

  00095	8b 06		 mov	 eax, DWORD PTR [esi]
  00097	8b ce		 mov	 ecx, esi
  00099	ff 50 70	 call	 DWORD PTR [eax+112]
  0009c	50		 push	 eax
  0009d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549804[ebp]
  000a3	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 555  : 		kPacket << pOwner->GetTargetRot();

  000a8	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  000ae	56		 push	 esi
  000af	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549804[ebp]
  000b5	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 556  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  000ba	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549804[ebp]
  000c0	6a 00		 push	 0
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 557  : 	}

  000c8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	59		 pop	 ecx
  000cd	59		 pop	 ecx
  000ce	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549804[ebp]
  000d4	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToCh@2:

; 558  : }

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	c9		 leave
  000f1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549804[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d8 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32808]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioNephilimItem::ChangeToChargeAttack
PUBLIC	??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T557470 = -4						; size = 4
$T557465 = -4						; size = 4
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 607  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	89 65 fc	 mov	 DWORD PTR $T557465[ebp], esp
  00009	8b f1		 mov	 esi, ecx
  0000b	89 65 fc	 mov	 DWORD PTR $T557470[ebp], esp
  0000e	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >

; 608  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c9		 leave
  00017	c3		 ret	 0
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::clear, COMDAT
; _this$ = ecx

; 1096 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);
; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1105 : 		this->_Mysize = 0;

  0000e	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00012	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00014	74 11		 je	 SHORT $LN1@clear
  00016	57		 push	 edi
$LL3@clear:

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

  00017	8b 39		 mov	 edi, DWORD PTR [ecx]

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);
; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	8b cf		 mov	 ecx, edi
  00022	3b 3e		 cmp	 edi, DWORD PTR [esi]
  00024	75 f1		 jne	 SHORT $LL3@clear
  00026	5f		 pop	 edi
$LN1@clear:
  00027	5e		 pop	 esi

; 1113 : 			}
; 1114 : 		}

  00028	c3		 ret	 0
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::clear
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@ABU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@ABU23@@Z ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@ABU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@ABU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ; std::_Construct<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@ABU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 19		 jmp	 SHORT $LN35@Uninit_cop
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00005	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
  00013	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN35@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00024	75 df		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@U3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@$$QAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3>
  00015	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@@Z ; std::_Dest_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@@Z PROC ; std::_Dest_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@@Z ENDP ; std::_Dest_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z PROC ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ENDP ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioNephilimItem::OnItemGaugeOK
EXTRN	?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z:PROC ; ioBaseChar::SetTargetRotToRotate
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator>>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z$1
__ehfuncinfo$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_qtRot$549731 = -116					; size = 16
$T557786 = -100						; size = 16
$T557787 = -84						; size = 16
_qtRot$549727 = -68					; size = 16
_qtRot$549724 = -68					; size = 16
_qtRot$549721 = -68					; size = 16
_nState$ = -52						; size = 4
tv446 = -48						; size = 4
_i$549733 = -48						; size = 4
tv436 = -44						; size = 4
_i$549740 = -44						; size = 4
_vPos$549730 = -40					; size = 12
_vPos$549726 = -28					; size = 12
_vPos$549723 = -28					; size = 12
_vPos$549720 = -28					; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_rkPacket$ = 12						; size = 4
?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z PROC ; ioNephilimItem::OnItemGaugeOK, COMDAT
; _this$ = ecx

; 334  : {

  00000	6a 68		 push	 104			; 00000068H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000f	8b 5d 0c	 mov	 ebx, DWORD PTR _rkPacket$[ebp]
  00012	8b f1		 mov	 esi, ecx

; 335  : 	if( !pOwner ) 

  00014	85 ff		 test	 edi, edi
  00016	0f 84 47 02 00
	00		 je	 $LN15@OnItemGaug

; 336  : 		return;
; 337  : 
; 338  : 	int nState;
; 339  : 	rkPacket >> nState;

  0001c	8d 45 cc	 lea	 eax, DWORD PTR _nState$[ebp]
  0001f	50		 push	 eax
  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 340  : 
; 341  : 	switch( nState )

  00027	8b 45 cc	 mov	 eax, DWORD PTR _nState$[ebp]
  0002a	48		 dec	 eax
  0002b	48		 dec	 eax
  0002c	0f 84 eb 01 00
	00		 je	 $LN14@OnItemGaug
  00032	48		 dec	 eax
  00033	0f 84 aa 01 00
	00		 je	 $LN13@OnItemGaug
  00039	48		 dec	 eax
  0003a	0f 84 5d 01 00
	00		 je	 $LN12@OnItemGaug
  00040	83 e8 03	 sub	 eax, 3
  00043	0f 84 46 01 00
	00		 je	 $LN11@OnItemGaug
  00049	48		 dec	 eax
  0004a	0f 85 13 02 00
	00		 jne	 $LN15@OnItemGaug

; 387  : 	case CS_CREATE_AREA:
; 388  : 		{
; 389  : 			D3DXVECTOR3 vPos;
; 390  : 			rkPacket >> vPos;

  00050	8d 45 d8	 lea	 eax, DWORD PTR _vPos$549730[ebp]
  00053	50		 push	 eax
  00054	8b cb		 mov	 ecx, ebx
  00056	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 391  : 
; 392  : 			D3DXQUATERNION qtRot;
; 393  : 			rkPacket >> qtRot;

  0005b	8d 45 8c	 lea	 eax, DWORD PTR _qtRot$549731[ebp]
  0005e	50		 push	 eax
  0005f	8b cb		 mov	 ecx, ebx
  00061	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 394  : 
; 395  : 			if ( m_AreaWeaponInfoList.empty() )

  00066	8b 8e 54 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6740]
  0006c	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  00072	3b c8		 cmp	 ecx, eax
  00074	0f 84 e9 01 00
	00		 je	 $LN15@OnItemGaug

; 396  : 				return;
; 397  : 
; 398  : 			for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  0007a	2b c1		 sub	 eax, ecx
  0007c	6a 18		 push	 24			; 00000018H
  0007e	99		 cdq
  0007f	5b		 pop	 ebx
  00080	f7 fb		 idiv	 ebx
  00082	83 65 d0 00	 and	 DWORD PTR _i$549733[ebp], 0
  00086	85 c0		 test	 eax, eax
  00088	7e 4e		 jle	 SHORT $LN6@OnItemGaug
  0008a	83 65 d4 00	 and	 DWORD PTR tv436[ebp], 0
$LN8@OnItemGaug:

; 399  : 			{
; 400  : 				ioAreaWeapon *pAreaWeapon = g_AreaWeaponMgr.FindAreaWeaponByName( m_AreaWeaponInfoList[i].m_szAreaWeapon, pOwner->GetCharName() );

  0008e	03 4d d4	 add	 ecx, DWORD PTR tv436[ebp]
  00091	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  00097	50		 push	 eax
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  0009e	8b c8		 mov	 ecx, eax
  000a0	e8 00 00 00 00	 call	 ?FindAreaWeaponByName@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@0@Z ; ioAreaWeaponManager::FindAreaWeaponByName

; 401  : 				if ( !pAreaWeapon )

  000a5	85 c0		 test	 eax, eax
  000a7	74 0f		 je	 SHORT $LN7@OnItemGaug

; 402  : 					continue;
; 403  : 
; 404  : 				g_AreaWeaponMgr.DestroyAreaWeapon( pAreaWeapon->GetAreaWeaponIndex() );

  000a9	ff 70 14	 push	 DWORD PTR [eax+20]
  000ac	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  000b1	8b c8		 mov	 ecx, eax
  000b3	e8 00 00 00 00	 call	 ?DestroyAreaWeapon@ioAreaWeaponManager@@QAEXK@Z ; ioAreaWeaponManager::DestroyAreaWeapon
$LN7@OnItemGaug:

; 396  : 				return;
; 397  : 
; 398  : 			for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  000b8	8b 8e 54 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6740]
  000be	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  000c4	2b c1		 sub	 eax, ecx
  000c6	6a 18		 push	 24			; 00000018H
  000c8	99		 cdq
  000c9	5b		 pop	 ebx
  000ca	f7 fb		 idiv	 ebx
  000cc	ff 45 d0	 inc	 DWORD PTR _i$549733[ebp]
  000cf	83 45 d4 18	 add	 DWORD PTR tv436[ebp], 24 ; 00000018H
  000d3	39 45 d0	 cmp	 DWORD PTR _i$549733[ebp], eax
  000d6	7c b6		 jl	 SHORT $LN8@OnItemGaug
$LN6@OnItemGaug:

; 405  : 			}
; 406  : 
; 407  : 			for ( int i=0; i<m_nMaxCreateAreaIdx; i++ )

  000d8	33 c0		 xor	 eax, eax
  000da	89 45 d4	 mov	 DWORD PTR _i$549740[ebp], eax
  000dd	39 86 94 1a 00
	00		 cmp	 DWORD PTR [esi+6804], eax
  000e3	0f 8e 7a 01 00
	00		 jle	 $LN15@OnItemGaug
  000e9	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000ef	89 45 d0	 mov	 DWORD PTR tv446[ebp], eax
$LL4@OnItemGaug:

; 408  : 			{
; 409  : 				if ( COMPARE( i, 0, (int)m_AreaWeaponInfoList.size() ) )

  000f2	83 7d d4 00	 cmp	 DWORD PTR _i$549740[ebp], 0
  000f6	7c 7c		 jl	 SHORT $LN3@OnItemGaug
  000f8	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  000fe	2b 86 54 1a 00
	00		 sub	 eax, DWORD PTR [esi+6740]
  00104	6a 18		 push	 24			; 00000018H
  00106	99		 cdq
  00107	59		 pop	 ecx
  00108	f7 f9		 idiv	 ecx
  0010a	39 45 d4	 cmp	 DWORD PTR _i$549740[ebp], eax
  0010d	7d 65		 jge	 SHORT $LN3@OnItemGaug

; 410  : 					g_AreaWeaponMgr.CreateAreaWeapon( pOwner->GetCharName(), "", "", m_AreaWeaponInfoList[i].m_szAreaWeapon, vPos, qtRot, ioAreaWeapon::CT_NORMAL );

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00114	8d 4d 9c	 lea	 ecx, DWORD PTR $T557786[ebp]
  00117	ff d3		 call	 ebx
  00119	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00122	8d 4d ac	 lea	 ecx, DWORD PTR $T557787[ebp]
  00125	ff d3		 call	 ebx
  00127	8b 86 54 1a 00
	00		 mov	 eax, DWORD PTR [esi+6740]
  0012d	03 45 d0	 add	 eax, DWORD PTR tv446[ebp]
  00130	6a 00		 push	 0
  00132	8d 4d 8c	 lea	 ecx, DWORD PTR _qtRot$549731[ebp]
  00135	51		 push	 ecx
  00136	8d 4d d8	 lea	 ecx, DWORD PTR _vPos$549730[ebp]
  00139	51		 push	 ecx
  0013a	50		 push	 eax
  0013b	8d 45 9c	 lea	 eax, DWORD PTR $T557786[ebp]
  0013e	50		 push	 eax
  0013f	8d 45 ac	 lea	 eax, DWORD PTR $T557787[ebp]
  00142	50		 push	 eax
  00143	8d 87 d4 02 00
	00		 lea	 eax, DWORD PTR [edi+724]
  00149	50		 push	 eax
  0014a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0014e	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  00153	8b c8		 mov	 ecx, eax
  00155	e8 00 00 00 00	 call	 ?CreateAreaWeapon@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@000ABUD3DXVECTOR3@@ABUD3DXQUATERNION@@H@Z ; ioAreaWeaponManager::CreateAreaWeapon
  0015a	8d 4d ac	 lea	 ecx, DWORD PTR $T557787[ebp]
  0015d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00167	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0016b	8d 4d 9c	 lea	 ecx, DWORD PTR $T557786[ebp]
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN3@OnItemGaug:

; 405  : 			}
; 406  : 
; 407  : 			for ( int i=0; i<m_nMaxCreateAreaIdx; i++ )

  00174	ff 45 d4	 inc	 DWORD PTR _i$549740[ebp]
  00177	8b 45 d4	 mov	 eax, DWORD PTR _i$549740[ebp]
  0017a	83 45 d0 18	 add	 DWORD PTR tv446[ebp], 24 ; 00000018H
  0017e	3b 86 94 1a 00
	00		 cmp	 eax, DWORD PTR [esi+6804]
  00184	0f 8c 68 ff ff
	ff		 jl	 $LL4@OnItemGaug

; 411  : 			}
; 412  : 		}
; 413  : 		break;

  0018a	e9 d4 00 00 00	 jmp	 $LN15@OnItemGaug
$LN11@OnItemGaug:

; 384  : 	case CS_SPECIAL:
; 385  : 		OnSpecialRecv( pOwner, rkPacket );

  0018f	53		 push	 ebx
  00190	57		 push	 edi
  00191	8b ce		 mov	 ecx, esi
  00193	e8 00 00 00 00	 call	 ?OnSpecialRecv@ioNephilimItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioNephilimItem::OnSpecialRecv

; 386  : 		break;

  00198	e9 c6 00 00 00	 jmp	 $LN15@OnItemGaug
$LN12@OnItemGaug:

; 371  : 	case CS_PUSH_ATTACK:
; 372  : 		{
; 373  : 			D3DXVECTOR3 vPos;
; 374  : 			rkPacket >> vPos;

  0019d	8d 45 e4	 lea	 eax, DWORD PTR _vPos$549726[ebp]
  001a0	50		 push	 eax
  001a1	8b cb		 mov	 ecx, ebx
  001a3	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 375  : 			pOwner->SetWorldPosition( vPos );

  001a8	8b 07		 mov	 eax, DWORD PTR [edi]
  001aa	8d 4d e4	 lea	 ecx, DWORD PTR _vPos$549726[ebp]
  001ad	51		 push	 ecx
  001ae	8b cf		 mov	 ecx, edi
  001b0	ff 50 44	 call	 DWORD PTR [eax+68]

; 376  : 
; 377  : 			D3DXQUATERNION qtRot;
; 378  : 			rkPacket >> qtRot;

  001b3	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$549727[ebp]
  001b6	50		 push	 eax
  001b7	8b cb		 mov	 ecx, ebx
  001b9	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 379  : 			pOwner->SetTargetRotToRotate( qtRot, true );

  001be	6a 00		 push	 0
  001c0	6a 01		 push	 1
  001c2	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$549727[ebp]
  001c5	50		 push	 eax
  001c6	8b cf		 mov	 ecx, edi
  001c8	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 380  : 
; 381  : 			ChangeToSpecialAttack( pOwner, CS_NEPHILIM_PUSH_STATE, CS_PUSH_ATTACK, false );

  001cd	6a 00		 push	 0
  001cf	6a 04		 push	 4
  001d1	68 9e 00 00 00	 push	 158			; 0000009eH
  001d6	57		 push	 edi
  001d7	8b ce		 mov	 ecx, esi
  001d9	e8 00 00 00 00	 call	 ?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z ; ioNephilimItem::ChangeToSpecialAttack

; 382  : 		}
; 383  : 		break;

  001de	e9 80 00 00 00	 jmp	 $LN15@OnItemGaug
$LN13@OnItemGaug:

; 356  : 		}
; 357  : 		break;
; 358  : 	case CS_CHARGE_ATTACK:
; 359  : 		{
; 360  : 			D3DXVECTOR3 vPos;
; 361  : 			rkPacket >> vPos;

  001e3	8d 45 e4	 lea	 eax, DWORD PTR _vPos$549723[ebp]
  001e6	50		 push	 eax
  001e7	8b cb		 mov	 ecx, ebx
  001e9	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 362  : 			pOwner->SetWorldPosition( vPos );

  001ee	8b 07		 mov	 eax, DWORD PTR [edi]
  001f0	8d 4d e4	 lea	 ecx, DWORD PTR _vPos$549723[ebp]
  001f3	51		 push	 ecx
  001f4	8b cf		 mov	 ecx, edi
  001f6	ff 50 44	 call	 DWORD PTR [eax+68]

; 363  : 
; 364  : 			D3DXQUATERNION qtRot;
; 365  : 			rkPacket >> qtRot;

  001f9	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$549724[ebp]
  001fc	50		 push	 eax
  001fd	8b cb		 mov	 ecx, ebx
  001ff	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 366  : 			pOwner->SetTargetRotToRotate( qtRot, true );

  00204	6a 00		 push	 0
  00206	6a 01		 push	 1
  00208	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$549724[ebp]
  0020b	50		 push	 eax
  0020c	8b cf		 mov	 ecx, edi
  0020e	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 367  : 
; 368  : 			ChangeToChargeAttack( pOwner );

  00213	57		 push	 edi
  00214	8b ce		 mov	 ecx, esi
  00216	e8 00 00 00 00	 call	 ?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToChargeAttack

; 369  : 		}
; 370  : 		break;

  0021b	eb 46		 jmp	 SHORT $LN15@OnItemGaug
$LN14@OnItemGaug:

; 342  : 	{
; 343  : 	case CS_ATTACK_FIRE:
; 344  : 		{
; 345  : 			rkPacket >> m_nCurCombo;

  0021d	8d 86 a4 1a 00
	00		 lea	 eax, DWORD PTR [esi+6820]
  00223	50		 push	 eax
  00224	8b cb		 mov	 ecx, ebx
  00226	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 346  : 
; 347  : 			D3DXVECTOR3 vPos;
; 348  : 			rkPacket >> vPos;

  0022b	8d 45 e4	 lea	 eax, DWORD PTR _vPos$549720[ebp]
  0022e	50		 push	 eax
  0022f	8b cb		 mov	 ecx, ebx
  00231	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 349  : 			pOwner->SetWorldPosition( vPos );

  00236	8b 07		 mov	 eax, DWORD PTR [edi]
  00238	8d 4d e4	 lea	 ecx, DWORD PTR _vPos$549720[ebp]
  0023b	51		 push	 ecx
  0023c	8b cf		 mov	 ecx, edi
  0023e	ff 50 44	 call	 DWORD PTR [eax+68]

; 350  : 
; 351  : 			D3DXQUATERNION qtRot;
; 352  : 			rkPacket >> qtRot;

  00241	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$549721[ebp]
  00244	50		 push	 eax
  00245	8b cb		 mov	 ecx, ebx
  00247	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 353  : 			pOwner->SetTargetRotToRotate( qtRot, true );

  0024c	6a 00		 push	 0
  0024e	6a 01		 push	 1
  00250	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$549721[ebp]
  00253	50		 push	 eax
  00254	8b cf		 mov	 ecx, edi
  00256	e8 00 00 00 00	 call	 ?SetTargetRotToRotate@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N1@Z ; ioBaseChar::SetTargetRotToRotate

; 354  : 
; 355  : 			ChangeToAttackFire( pOwner );

  0025b	57		 push	 edi
  0025c	8b ce		 mov	 ecx, esi
  0025e	e8 00 00 00 00	 call	 ?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToAttackFire
$LN15@OnItemGaug:

; 414  : 	}	
; 415  : }

  00263	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00268	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T557786[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z$1:
  00009	8d 4d ac	 lea	 ecx, DWORD PTR $T557787[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ENDP ; ioNephilimItem::OnItemGaugeOK
PUBLIC	?OnCharging@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::OnCharging
EXTRN	?IsHasCrown@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsHasCrown
EXTRN	?IsAttackKeyDown@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsAttackKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?OnCharging@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$557866 = 8					; size = 4
_pOwner$ = 8						; size = 4
?OnCharging@ioNephilimItem@@IAEXPAVioBaseChar@@@Z PROC	; ioNephilimItem::OnCharging, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 483  : 	if( !pOwner || !pOwner->IsNeedProcess() )	

  00004	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 84 92 00 00
	00		 je	 $LN6@OnCharging
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	8b ce		 mov	 ecx, esi
  00016	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0001c	84 c0		 test	 al, al
  0001e	0f 84 80 00 00
	00		 je	 $LN6@OnCharging

; 484  : 		return;
; 485  : 
; 486  : 	bool bCheckBuff = pOwner->HasBuff( pOwner->GetCharName(), m_szSpecialCheckBuff );

  00024	53		 push	 ebx
  00025	8d 87 74 1a 00
	00		 lea	 eax, DWORD PTR [edi+6772]
  0002b	50		 push	 eax
  0002c	8d 86 d4 02 00
	00		 lea	 eax, DWORD PTR [esi+724]
  00032	50		 push	 eax
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@0@Z ; ioBaseChar::HasBuff

; 487  : 	if( pOwner->IsAttackKeyDown() && !pOwner->IsHasCrown() )

  0003a	8b ce		 mov	 ecx, esi
  0003c	8a d8		 mov	 bl, al
  0003e	e8 00 00 00 00	 call	 ?IsAttackKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKeyDown
  00043	84 c0		 test	 al, al
  00045	74 54		 je	 SHORT $LN5@OnCharging
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?IsHasCrown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsHasCrown
  0004e	84 c0		 test	 al, al
  00050	75 49		 jne	 SHORT $LN5@OnCharging

; 488  : 	{
; 489  : 		if( m_dwAttackStartTime + m_dwChargeTime <= FRAMEGETTIME() )

  00052	8d 45 08	 lea	 eax, DWORD PTR _value$557866[ebp]
  00055	50		 push	 eax
  00056	8d 8f b0 18 00
	00		 lea	 ecx, DWORD PTR [edi+6320]
  0005c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00067	8b c8		 mov	 ecx, eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0006f	8b 8f a0 1a 00
	00		 mov	 ecx, DWORD PTR [edi+6816]
  00075	03 4d 08	 add	 ecx, DWORD PTR _value$557866[ebp]
  00078	3b c8		 cmp	 ecx, eax
  0007a	77 27		 ja	 SHORT $LN14@OnCharging

; 490  : 		{
; 491  : 			if ( bCheckBuff )
; 492  : 				ChangeToSpecialAttack( pOwner, CS_NEPHILIM_PUSH_STATE, CS_PUSH_ATTACK, true );

  0007c	8b cf		 mov	 ecx, edi
  0007e	84 db		 test	 bl, bl
  00080	74 11		 je	 SHORT $LN3@OnCharging
  00082	6a 01		 push	 1
  00084	6a 04		 push	 4
  00086	68 9e 00 00 00	 push	 158			; 0000009eH
  0008b	56		 push	 esi
  0008c	e8 00 00 00 00	 call	 ?ChangeToSpecialAttack@ioNephilimItem@@IAEXPAVioBaseChar@@HW4ChargeState@1@_N@Z ; ioNephilimItem::ChangeToSpecialAttack

; 493  : 			else

  00091	eb 10		 jmp	 SHORT $LN14@OnCharging
$LN3@OnCharging:

; 494  : 				ChangeToChargeAttack( pOwner );

  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ?ChangeToChargeAttack@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToChargeAttack

; 495  : 		}
; 496  : 	}
; 497  : 	else

  00099	eb 08		 jmp	 SHORT $LN14@OnCharging
$LN5@OnCharging:

; 498  : 		ChangeToAttackFire( pOwner );

  0009b	56		 push	 esi
  0009c	8b cf		 mov	 ecx, edi
  0009e	e8 00 00 00 00	 call	 ?ChangeToAttackFire@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::ChangeToAttackFire
$LN14@OnCharging:
  000a3	5b		 pop	 ebx
$LN6@OnCharging:
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi

; 499  : }

  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
?OnCharging@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ENDP	; ioNephilimItem::OnCharging
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::_Tidy, COMDAT
; _this$ = ecx

; 1497 : 		clear();

  00000	e9 00 00 00 00	 jmp	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z PROC ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$557917 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$557917[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__Cat$557924 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z PROC ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$557924[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@U1@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3>,D3DXVECTOR3>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ENDP ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 18	 add	 esi, 24			; 00000018H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@2:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop@2

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  00027	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002b	83 45 08 28	 add	 DWORD PTR __First$[ebp], 40 ; 00000028H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@2
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN48@Uninit_cop@2
$LL3@Uninit_cop@2:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 28	 add	 esi, 40			; 00000028H
$LN48@Uninit_cop@2:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop@2

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@2:
$LN4@Uninit_cop@2:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN47@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@3:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ; std::_Construct<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
  00027	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  0002b	83 45 08 18	 add	 DWORD PTR __First$[ebp], 24 ; 00000018H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@3
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN48@Uninit_cop@3
$LL3@Uninit_cop@3:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 18	 add	 esi, 24			; 00000018H
$LN48@Uninit_cop@3:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_cop@3

; 380  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@3:
$LN4@Uninit_cop@3:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN47@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
PUBLIC	??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00025	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
  0002a	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002e	83 c6 10	 add	 esi, 16			; 00000010H
  00031	eb e6		 jmp	 SHORT $LL6@Uninit_mov@2
__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN33@Uninit_mov@2
$LL3@Uninit_mov@2:

; 434  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN33@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_mov@2

; 435  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN34@Uninit_mov@2:
$LN4@Uninit_mov@2:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN32@Uninit_mov@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
PUBLIC	??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov@3:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 36		 je	 SHORT $LN4@Uninit_mov@3

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@U34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo>
  0002a	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 18	 add	 esi, 24			; 00000018H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov@3
__catch$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0b		 jmp	 SHORT $LN32@Uninit_mov@3
$LL3@Uninit_mov@3:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00043	83 c6 18	 add	 esi, 24			; 00000018H
$LN32@Uninit_mov@3:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00046	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00049	75 f0		 jne	 SHORT $LL3@Uninit_mov@3

; 435  : 	_RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Uninit_mov@3:
$LN4@Uninit_mov@3:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00054	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00057	e8 00 00 00 00	 call	 __EH_epilog3
  0005c	c3		 ret	 0
$LN31@Uninit_mov@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo>
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN17@Destroy_ra@2
$LL3@Destroy_ra@2:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN17@Destroy_ra@2:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra@2
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra@3
$LL3@Destroy_ra@3:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra@3:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra@3
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@4:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_cop@4

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00027	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002b	83 45 08 10	 add	 DWORD PTR __First$[ebp], 16 ; 00000010H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@4
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN45@Uninit_cop@4
$LL3@Uninit_cop@4:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN45@Uninit_cop@4:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_cop@4

; 380  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Uninit_cop@4:
$LN4@Uninit_cop@4:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN44@Uninit_cop@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
PUBLIC	?CheckNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@@Z ; ioNephilimItem::CheckNormalAttack
EXTRN	?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckNormalAttack
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
;	COMDAT ?CheckNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@@Z PROC ; ioNephilimItem::CheckNormalAttack, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 154  : 	DWORD dwCurTime = FRAMEGETTIME();

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000d	8b c8		 mov	 ecx, eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 155  : 
; 156  : 	switch( m_ChargeState )

  00015	8b 8e 98 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6808]
  0001b	49		 dec	 ecx
  0001c	74 78		 je	 SHORT $LN8@CheckNorma
  0001e	49		 dec	 ecx
  0001f	74 40		 je	 SHORT $LN7@CheckNorma
  00021	49		 dec	 ecx
  00022	75 7c		 jne	 SHORT $LN9@CheckNorma

; 173  : 	case CS_CHARGE_ATTACK:
; 174  : 		{
; 175  : 			if( m_dwMotionEndTime < dwCurTime )

  00024	39 86 a8 1a 00
	00		 cmp	 DWORD PTR [esi+6824], eax
  0002a	73 0c		 jae	 SHORT $LN3@CheckNorma

; 176  : 			{
; 177  : 				pOwner->SetState( CS_DELAY, false );

  0002c	51		 push	 ecx
  0002d	51		 push	 ecx
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00031	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 178  : 				return;

  00036	eb 68		 jmp	 SHORT $LN9@CheckNorma
$LN3@CheckNorma:

; 179  : 			}
; 180  : 
; 181  : 			if( pOwner->IsNeedProcess() )

  00038	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0003b	8b 07		 mov	 eax, DWORD PTR [edi]
  0003d	8b cf		 mov	 ecx, edi
  0003f	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00045	84 c0		 test	 al, al
  00047	74 57		 je	 SHORT $LN9@CheckNorma

; 182  : 			{
; 183  : 				CheckCancelReserve( pOwner );

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 90 40 02 00
	00		 call	 DWORD PTR [eax+576]

; 184  : 				if( ProcessCancel(pOwner) )

  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	57		 push	 edi
  00057	8b ce		 mov	 ecx, esi
  00059	ff 90 48 02 00
	00		 call	 DWORD PTR [eax+584]

; 185  : 					return;				
; 186  : 			}
; 187  : 		}
; 188  : 		break;

  0005f	eb 3f		 jmp	 SHORT $LN9@CheckNorma
$LN7@CheckNorma:

; 160  : 		break;
; 161  : 	case CS_ATTACK_FIRE:
; 162  : 		{
; 163  : 			if( pOwner->IsNeedProcess() )

  00061	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00064	8b 07		 mov	 eax, DWORD PTR [edi]
  00066	8b cf		 mov	 ecx, edi
  00068	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0006e	84 c0		 test	 al, al
  00070	74 1a		 je	 SHORT $LN5@CheckNorma

; 164  : 			{
; 165  : 				CheckCancelReserve( pOwner );

  00072	8b 06		 mov	 eax, DWORD PTR [esi]
  00074	57		 push	 edi
  00075	8b ce		 mov	 ecx, esi
  00077	ff 90 40 02 00
	00		 call	 DWORD PTR [eax+576]

; 166  : 				if( ProcessCancel(pOwner) )

  0007d	8b 06		 mov	 eax, DWORD PTR [esi]
  0007f	57		 push	 edi
  00080	8b ce		 mov	 ecx, esi
  00082	ff 90 48 02 00
	00		 call	 DWORD PTR [eax+584]
  00088	84 c0		 test	 al, al
  0008a	75 14		 jne	 SHORT $LN9@CheckNorma
$LN5@CheckNorma:

; 167  : 					return;				
; 168  : 			}
; 169  : 
; 170  : 			ioWeaponItem::CheckNormalAttack( pOwner );

  0008c	57		 push	 edi
  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z ; ioAttackableItem::CheckNormalAttack

; 171  : 		}
; 172  : 		break;

  00094	eb 0a		 jmp	 SHORT $LN9@CheckNorma
$LN8@CheckNorma:

; 157  : 	{
; 158  : 	case CS_CHARGING:
; 159  : 		OnCharging( pOwner );

  00096	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?OnCharging@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::OnCharging
$LN9@CheckNorma:
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi

; 189  : 	}
; 190  : }

  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
?CheckNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@@Z ENDP ; ioNephilimItem::CheckNormalAttack
_TEXT	ENDS
PUBLIC	??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 769  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 770  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear

; 771  : 		}

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	59		 pop	 ecx
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXPAUD3DXVECTOR3@@0@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$558572 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$558572[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Umove<D3DXVECTOR3 *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Umove<D3DXVECTOR3 *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEPAUD3DXVECTOR3@@PAU2@00@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Umove<D3DXVECTOR3 *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ; std::_Destroy_range<std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN24@Destroy_ra@4
$LL7@Destroy_ra@4:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 18	 add	 esi, 24			; 00000018H
$LN24@Destroy_ra@4:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@4
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@0AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$558651 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$558651[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z
_TEXT	SEGMENT
__Cat$558658 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$558658[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$558664 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$558664[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ; std::_Uninitialized_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z
_TEXT	SEGMENT
__Cat$558674 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z PROC ; std::_Uninitialized_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$558674[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@U12@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ENDP ; std::_Uninitialized_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN21@Destroy_ra@5
$LL7@Destroy_ra@5:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN21@Destroy_ra@5:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@5
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@6
$LL7@Destroy_ra@6:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@6:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@6
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$558862 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$558862[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	_pOwner$GSCopy$
PUBLIC	?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z ; ioNephilimItem::ProcessCancel
EXTRN	?SetJumpState@ioBaseChar@@QAEX_N@Z:PROC		; ioBaseChar::SetJumpState
EXTRN	?IsBuffLimitJump@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsBuffLimitJump
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z$2
__ehfuncinfo$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T559007 = -80						; size = 16
tv1319 = -64						; size = 4
_vTimeList$ = -60					; size = 12
_pOwner$GSCopy$ = -48					; size = 4
_dwCurTime$ = -44					; size = 4
tv1187 = -40						; size = 4
$T558883 = -40						; size = 4
$T558886 = -40						; size = 4
_szEncEventType$558907 = -36				; size = 13
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioNephilimItem::ProcessCancel, COMDAT
; _this$ = ecx

; 284  : {

  00000	6a 44		 push	 68			; 00000044H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  0000f	8b f9		 mov	 edi, ecx

; 285  : 	if( m_szCurAni.IsEmpty() )

  00011	8d 9f 10 0f 00
	00		 lea	 ebx, DWORD PTR [edi+3856]
  00017	8b cb		 mov	 ecx, ebx

; 294  : 
; 295  : 	int iAniID = pGrp->GetAnimationIdx( m_szCurAni );

  00019	89 75 d0	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00022	84 c0		 test	 al, al
  00024	74 0a		 je	 SHORT $LN9@ProcessCan
$LN224@ProcessCan:

; 286  : 		return false;

  00026	32 c0		 xor	 al, al
$LN10@ProcessCan:

; 328  : 	}
; 329  : 
; 330  : 	return false;
; 331  : }

  00028	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0002d	c2 04 00	 ret	 4
$LN9@ProcessCan:

; 287  : 
; 288  : 	if( !pOwner ) 

  00030	85 f6		 test	 esi, esi

; 289  : 		return false;

  00032	74 f2		 je	 SHORT $LN224@ProcessCan

; 290  : 
; 291  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00034	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 292  : 	if( !pGrp ) 

  00037	85 f6		 test	 esi, esi

; 293  : 		return false;

  00039	74 eb		 je	 SHORT $LN224@ProcessCan

; 294  : 
; 295  : 	int iAniID = pGrp->GetAnimationIdx( m_szCurAni );

  0003b	53		 push	 ebx
  0003c	8b ce		 mov	 ecx, esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z

; 296  : 
; 297  : 	std::list<float> vTimeList;

  00044	51		 push	 ecx
  00045	89 65 d8	 mov	 DWORD PTR $T558886[ebp], esp
  00048	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  0004b	8b d8		 mov	 ebx, eax
  0004d	89 65 d8	 mov	 DWORD PTR $T558883[ebp], esp
  00050	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
  00055	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	6a 03		 push	 3

; 298  : 	pGrp->GetAnimationEventTimeList_e( iAniID, "input_jump_s", vTimeList );

  0005b	c7 45 dc 84 82
	9b 9f		 mov	 DWORD PTR _szEncEventType$558907[ebp], -1617198460 ; 9f9b8284H
  00062	c7 45 e0 99 b3
	81 9f		 mov	 DWORD PTR _szEncEventType$558907[ebp+4], -1618889831 ; 9f81b399H
  00069	c7 45 e4 80 9c
	b4 99		 mov	 DWORD PTR _szEncEventType$558907[ebp+8], -1716216704 ; 99b49c80H
  00070	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$558907[ebp]
  00073	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$558907[ebp+12], 0
  00077	59		 pop	 ecx
$LL124@ProcessCan:
  00078	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0007e	83 c0 04	 add	 eax, 4
  00081	49		 dec	 ecx
  00082	75 f4		 jne	 SHORT $LL124@ProcessCan
  00084	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$558907[ebp]
  00087	50		 push	 eax
  00088	8d 4d b0	 lea	 ecx, DWORD PTR $T559007[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00091	8d 45 c4	 lea	 eax, DWORD PTR _vTimeList$[ebp]
  00094	50		 push	 eax
  00095	8d 45 b0	 lea	 eax, DWORD PTR $T559007[ebp]
  00098	50		 push	 eax
  00099	53		 push	 ebx
  0009a	8b ce		 mov	 ecx, esi
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  000a6	8d 4d b0	 lea	 ecx, DWORD PTR $T559007[ebp]
  000a9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 299  : 
; 300  : 	if( vTimeList.empty() )

  000b3	83 7d c8 00	 cmp	 DWORD PTR _vTimeList$[ebp+4], 0
  000b7	75 1a		 jne	 SHORT $LN6@ProcessCan
$LN2@ProcessCan:
  000b9	32 db		 xor	 bl, bl
$LN217@ProcessCan:

; 301  : 		return false;

  000bb	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  000be	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
  000c3	ff 75 c4	 push	 DWORD PTR _vTimeList$[ebp]
  000c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cb	59		 pop	 ecx
  000cc	8a c3		 mov	 al, bl
  000ce	e9 55 ff ff ff	 jmp	 $LN10@ProcessCan
$LN6@ProcessCan:

; 302  : 
; 303  : 	DWORD dwCurTime = FRAMEGETTIME();

  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000d9	8b c8		 mov	 ecx, eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000e1	89 45 d4	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 304  : 	std::list< float >::iterator iter = vTimeList.begin();

  000e4	8b 45 c4	 mov	 eax, DWORD PTR _vTimeList$[ebp]
  000e7	8b 30		 mov	 esi, DWORD PTR [eax]

; 305  : 	while( iter != vTimeList.end() )

  000e9	3b f0		 cmp	 esi, eax
  000eb	74 cc		 je	 SHORT $LN2@ProcessCan
  000ed	f3 0f 10 87 20
	0f 00 00	 movss	 xmm0, DWORD PTR [edi+3872]
  000f5	8b 9f 08 0f 00
	00		 mov	 ebx, DWORD PTR [edi+3848]
  000fb	f3 0f 11 45 d8	 movss	 DWORD PTR tv1187[ebp], xmm0
$LL5@ProcessCan:

; 309  : 
; 310  : 		dwTime += m_dwInputCancelCheckTime;

  00100	d9 46 08	 fld	 DWORD PTR [esi+8]
  00103	e8 00 00 00 00	 call	 __ftol2
  00108	89 45 c0	 mov	 DWORD PTR tv1319[ebp], eax
  0010b	db 45 c0	 fild	 DWORD PTR tv1319[ebp]
  0010e	85 c0		 test	 eax, eax
  00110	79 06		 jns	 SHORT $LN223@ProcessCan
  00112	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN223@ProcessCan:

; 306  : 	{
; 307  : 		DWORD dwTime = (DWORD)*iter;
; 308  : 		dwTime *= m_fCurAniRate;

  00118	d8 4d d8	 fmul	 DWORD PTR tv1187[ebp]

; 309  : 
; 310  : 		dwTime += m_dwInputCancelCheckTime;

  0011b	e8 00 00 00 00	 call	 __ftol2
  00120	03 87 0c 0f 00
	00		 add	 eax, DWORD PTR [edi+3852]

; 311  : 		if( m_dwCancelCheckTime > 0 && COMPARE( dwTime, m_dwCancelCheckTime, dwCurTime ) )

  00126	85 db		 test	 ebx, ebx
  00128	74 09		 je	 SHORT $LN3@ProcessCan
  0012a	3b c3		 cmp	 eax, ebx
  0012c	72 05		 jb	 SHORT $LN3@ProcessCan
  0012e	3b 45 d4	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00131	72 11		 jb	 SHORT $LN212@ProcessCan
$LN3@ProcessCan:

; 318  : 				return true;
; 319  : 			}
; 320  : 
; 321  : 			return false;
; 322  : 		}
; 323  : 
; 324  : 		if( dwTime > dwCurTime )

  00133	3b 45 d4	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00136	77 81		 ja	 SHORT $LN2@ProcessCan

; 325  : 			return false;
; 326  : 
; 327  : 		iter++;

  00138	8b 36		 mov	 esi, DWORD PTR [esi]
  0013a	3b 75 c4	 cmp	 esi, DWORD PTR _vTimeList$[ebp]
  0013d	75 c1		 jne	 SHORT $LL5@ProcessCan

; 318  : 				return true;
; 319  : 			}
; 320  : 
; 321  : 			return false;
; 322  : 		}
; 323  : 
; 324  : 		if( dwTime > dwCurTime )

  0013f	e9 75 ff ff ff	 jmp	 $LN2@ProcessCan
$LN212@ProcessCan:

; 312  : 		{
; 313  : 			m_dwCancelCheckTime = dwTime + 1;

  00144	40		 inc	 eax

; 314  : 
; 315  : 			if( m_bEnableJumpState && !pOwner->IsBuffLimitJump() )

  00145	80 bf 02 0f 00
	00 00		 cmp	 BYTE PTR [edi+3842], 0
  0014c	89 87 08 0f 00
	00		 mov	 DWORD PTR [edi+3848], eax
  00152	0f 84 61 ff ff
	ff		 je	 $LN2@ProcessCan
  00158	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0015b	e8 00 00 00 00	 call	 ?IsBuffLimitJump@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsBuffLimitJump
  00160	84 c0		 test	 al, al
  00162	0f 85 51 ff ff
	ff		 jne	 $LN2@ProcessCan

; 316  : 			{
; 317  : 				pOwner->SetJumpState();

  00168	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0016b	6a 01		 push	 1
  0016d	e8 00 00 00 00	 call	 ?SetJumpState@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetJumpState
  00172	b3 01		 mov	 bl, 1
  00174	e9 42 ff ff ff	 jmp	 $LN217@ProcessCan
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
__unwindfunclet$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z$2:
  00008	8d 4d b0	 lea	 ecx, DWORD PTR $T559007[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioNephilimItem::ProcessCancel
PUBLIC	?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$550760 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 0c		 push	 12			; 0000000cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@IPAU1@@Z ; std::_Allocate<D3DXVECTOR3>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$550760[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$550760[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUD3DXVECTOR3@@PAU1@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@00AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 0c		 push	 12			; 0000000cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 0c	 add	 ecx, 12			; 0000000cH
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 0c	 imul	 ebx, 12			; 0000000cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 0c	 imul	 edi, 12			; 0000000cH
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$550760[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$550760[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve
PUBLIC	?_Destroy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN26@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 18	 add	 esi, 24			; 00000018H
$LN26@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXPAUAreaWeaponInfo@ioNephilimItem@@0@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$559593 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$559593[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@1@0PAU23@@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$559609 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@1@0PAU23@@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$559609[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@1@0PAU23@@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUAreaWeaponInfo@ioNephilimItem@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@PAU23@00@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Umove<ioNephilimItem::AreaWeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUAreaWeaponInfo@ioNephilimItem@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUAreaWeaponInfo@ioNephilimItem@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@PAU23@00@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Umove<ioNephilimItem::AreaWeaponInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ; std::_Uninitialized_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUAreaWeaponInfo@ioNephilimItem@@@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEPAUAreaWeaponInfo@ioNephilimItem@@PAU23@00@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Umove<ioNephilimItem::AreaWeaponInfo *>
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN23@Destroy@2
$LL9@Destroy@2:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN23@Destroy@2:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy@2
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$559786 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$559786[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
_TEXT	ENDS
PUBLIC	??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$559876 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 0c		 push	 12			; 0000000cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$559876[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
PUBLIC	?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 0c		 push	 12			; 0000000cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 0c		 push	 12			; 0000000cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IBEII@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXXZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN27@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN31@Tidy@3
$LL12@Tidy@3:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 18	 add	 edi, 24			; 00000018H
$LN31@Tidy@3:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@3

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN27@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv300 = -24						; size = 4
__Ptr$550742 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T560139 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb ff ff ff
	0f		 cmp	 ebx, 268435455		; 0fffffffH
  00017	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN59@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	c1 f8 04	 sar	 eax, 4
  0002c	3b c3		 cmp	 eax, ebx
  0002e	73 7a		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00030	6a 00		 push	 0
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00041	52		 push	 edx
  00042	89 45 ec	 mov	 DWORD PTR __Ptr$550742[ebp], eax
  00045	ff 75 ec	 push	 DWORD PTR __Ptr$550742[ebp]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00052	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005b	8b f9		 mov	 edi, ecx
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	2b f8		 sub	 edi, eax
  00062	89 4d e8	 mov	 DWORD PTR tv300[ebp], ecx
  00065	85 c0		 test	 eax, eax
  00067	74 24		 je	 SHORT $LN51@reserve@2

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00069	89 45 08	 mov	 DWORD PTR $T560139[ebp], eax
  0006c	3b c1		 cmp	 eax, ecx
  0006e	74 15		 je	 SHORT $LN37@reserve@2
$LN39@reserve@2:
  00070	8b 4d 08	 mov	 ecx, DWORD PTR $T560139[ebp]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00079	83 45 08 10	 add	 DWORD PTR $T560139[ebp], 16 ; 00000010H
  0007d	8b 45 08	 mov	 eax, DWORD PTR $T560139[ebp]
  00080	3b 45 e8	 cmp	 eax, DWORD PTR tv300[ebp]
  00083	75 eb		 jne	 SHORT $LN39@reserve@2
$LN37@reserve@2:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00085	ff 36		 push	 DWORD PTR [esi]
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	59		 pop	 ecx
$LN51@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0008d	8b ce		 mov	 ecx, esi
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$550742[ebp]
  00098	c1 e3 04	 shl	 ebx, 4
  0009b	03 d8		 add	 ebx, eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0009d	83 e7 f0	 and	 edi, -16		; fffffff0H
  000a0	03 f8		 add	 edi, eax
  000a2	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a5	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a8	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000aa	e8 00 00 00 00	 call	 __EH_epilog3
  000af	c2 04 00	 ret	 4
__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b2	ff 75 ec	 push	 DWORD PTR __Ptr$550742[ebp]
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ba	59		 pop	 ecx

; 757  : 			_RERAISE;

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@reserve@2:
$LN58@reserve@2:
  000c4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
PUBLIC	?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z$3
__ehfuncinfo$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$550830 = -24					; size = 4
$T560311 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 aa aa
	aa 0a		 cmp	 DWORD PTR __Count$[ebp], 178956970 ; 0aaaaaaaH
  00015	76 0b		 jbe	 SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN62@reserve@3:
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	6a 18		 push	 24			; 00000018H
  00029	99		 cdq
  0002a	59		 pop	 ecx
  0002b	f7 f9		 idiv	 ecx
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00030	0f 83 81 00 00
	00		 jae	 $LN3@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00036	6a 00		 push	 0
  00038	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$_Allocate@UAreaWeaponInfo@ioNephilimItem@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@IPAU12@@Z ; std::_Allocate<ioNephilimItem::AreaWeaponInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	89 45 e8	 mov	 DWORD PTR __Ptr$550830[ebp], eax
  0004d	ff 75 e8	 push	 DWORD PTR __Ptr$550830[ebp]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUAreaWeaponInfo@ioNephilimItem@@PAU12@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@PAU12@00AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@@Z ; std::_Uninitialized_move<ioNephilimItem::AreaWeaponInfo *,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	8b c3		 mov	 eax, ebx
  00064	2b c1		 sub	 eax, ecx
  00066	6a 18		 push	 24			; 00000018H
  00068	99		 cdq
  00069	5f		 pop	 edi
  0006a	f7 ff		 idiv	 edi
  0006c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	8b f8		 mov	 edi, eax
  00072	85 c9		 test	 ecx, ecx
  00074	74 21		 je	 SHORT $LN54@reserve@3

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00076	89 4d ec	 mov	 DWORD PTR $T560311[ebp], ecx
  00079	3b cb		 cmp	 ecx, ebx
  0007b	74 12		 je	 SHORT $LN37@reserve@3
$LN39@reserve@3:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T560311[ebp]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00086	83 45 ec 18	 add	 DWORD PTR $T560311[ebp], 24 ; 00000018H
  0008a	39 5d ec	 cmp	 DWORD PTR $T560311[ebp], ebx
  0008d	75 ee		 jne	 SHORT $LN39@reserve@3
$LN37@reserve@3:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0008f	ff 36		 push	 DWORD PTR [esi]
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	59		 pop	 ecx
$LN54@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00097	8b ce		 mov	 ecx, esi
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;
; 770  : 			this->_Mylast = _Ptr + _Size;

  0009f	6b ff 18	 imul	 edi, 24			; 00000018H
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a5	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$550830[ebp]
  000a8	6b c0 18	 imul	 eax, 24			; 00000018H
  000ab	03 c1		 add	 eax, ecx
  000ad	03 f9		 add	 edi, ecx
  000af	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b2	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b5	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve@3:

; 772  : 			}
; 773  : 		}

  000b7	e8 00 00 00 00	 call	 __EH_epilog3
  000bc	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000bf	ff 75 e8	 push	 DWORD PTR __Ptr$550830[ebp]
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	59		 pop	 ecx

; 757  : 			_RERAISE;

  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN63@reserve@3:
$LN61@reserve@3:
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::reserve
PUBLIC	??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN24@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN28@Tidy@4
$LL12@Tidy@4:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 10	 add	 edi, 16			; 00000010H
$LN28@Tidy@4:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@4

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN24@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@5

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@5:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 0c		 push	 12			; 0000000cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@AAU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@AAU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UD3DXVECTOR3@@@std@@UD3DXVECTOR3@@ABU3@@std@@YAXAAV?$allocator@UD3DXVECTOR3@@@0@PAUD3DXVECTOR3@@ABU2@@Z ; std::_Cons_val<std::allocator<D3DXVECTOR3>,D3DXVECTOR3,D3DXVECTOR3 const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$560609 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 28		 push	 40			; 00000028H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$560609[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
PUBLIC	??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$560704 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 18		 push	 24			; 00000018H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAE_NI@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@3

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$560704[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@std@@PAUAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@2@@std@@YAPAUAreaWeaponInfo@ioNephilimItem@@V?$_Vector_const_iterator@V?$_Vector_val@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> > >,ioNephilimItem::AreaWeaponInfo *,std::allocator<ioNephilimItem::AreaWeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@3:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@3:
$LN37@vector@3:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
PUBLIC	??1?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Tidy
??1?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 04	 sar	 eax, 4
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 04	 sar	 edx, 4
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
$LN1@Reserve@2:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXI@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 18		 push	 24			; 00000018H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@3:
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 18		 push	 24			; 00000018H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve@3

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IBEII@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXI@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::reserve
$LN1@Reserve@3:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve@3:
?_Reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$560864 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	c1 f8 04	 sar	 eax, 4
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN7@vector@4

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00030	ff 75 08	 push	 DWORD PTR __Cat$560864[ebp]
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003a	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	57		 push	 edi
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@4:

; 543  : 			_CATCH_END
; 544  : 		}

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy

; 542  : 			_RERAISE;

  00061	33 db		 xor	 ebx, ebx
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@4:
$LN37@vector@4:
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
PUBLIC	??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@ABU0@@Z			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2
__ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AttackAttribute@@QAE@ABU0@@Z PROC			; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	d9 47 10	 fld	 DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00036	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00039	50		 push	 eax
  0003a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
  00046	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00049	50		 push	 eax
  0004a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	e8 00 00 00 00	 call	 ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
  00056	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00059	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0005c	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0005f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??0AttackAttribute@@QAE@ABU0@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@ABU0@@Z ENDP			; AttackAttribute::AttackAttribute
PUBLIC	_pOwner$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::PushCreateWeapon
EXTRN	??6SP2Packet@@QAEAAV0@K@Z:PROC			; SP2Packet::operator<<
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$3
__ehfuncinfo$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_kFireTime$ = -32976					; size = 88
$T560912 = -32888					; size = 16
_dwWeaponBaseIdx$ = -32872				; size = 4
_iter$ = -32868						; size = 4
_this$GSCopy$ = -32864					; size = 4
_vFirePos$ = -32860					; size = 16
_dwCreateWeaponIdx$ = -32844				; size = 4
tv556 = -32840						; size = 4
tv552 = -32840						; size = 4
tv548 = -32840						; size = 4
_pOwner$GSCopy$ = -32836				; size = 4
_kPacket$550025 = -32832				; size = 32792
_vDir$550022 = -40					; size = 12
_vPos$550020 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z PROC ; ioNephilimItem::PushCreateWeapon, COMDAT
; _this$ = ecx

; 738  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 c4 80 00 00	 mov	 eax, 32964		; 000080c4H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 768  : 	const BaseCharList &rkCharList = pPlayStage->GetBaseCharList();
; 769  : 	BaseCharList::const_iterator iter;
; 770  : 	for( iter=rkCharList.begin() ; iter!=rkCharList.end() ; ++iter )

  00037	89 b5 a0 7f ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0003d	89 bd bc 7f ff
	ff		 mov	 DWORD PTR _pOwner$GSCopy$[ebp], edi
  00043	85 ff		 test	 edi, edi
  00045	0f 84 06 03 00
	00		 je	 $LN12@PushCreate

; 739  : 	if ( !pOwner || !pOwner->IsNeedProcess() )

  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
  0004d	8b cf		 mov	 ecx, edi
  0004f	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00055	84 c0		 test	 al, al
  00057	0f 84 f4 02 00
	00		 je	 $LN12@PushCreate

; 740  : 		return;
; 741  : 
; 742  : 	ioPlayStage *pPlayStage = pOwner->GetCreator();

  0005d	8b 9f 44 03 00
	00		 mov	 ebx, DWORD PTR [edi+836]

; 743  : 	if ( !pPlayStage )

  00063	85 db		 test	 ebx, ebx
  00065	0f 84 e6 02 00
	00		 je	 $LN12@PushCreate

; 744  : 		return;
; 745  : 	
; 746  : 	DWORD dwCurTime = FRAMEGETTIME();

  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00071	8b c8		 mov	 ecx, eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00079	8b f8		 mov	 edi, eax

; 747  : 	if ( m_dwFireTime == 0 || m_dwFireTime > dwCurTime )

  0007b	8b 86 ac 1a 00
	00		 mov	 eax, DWORD PTR [esi+6828]
  00081	85 c0		 test	 eax, eax
  00083	0f 84 c8 02 00
	00		 je	 $LN12@PushCreate
  00089	3b c7		 cmp	 eax, edi
  0008b	0f 87 c0 02 00
	00		 ja	 $LN12@PushCreate

; 748  : 		return;
; 749  : 
; 750  : 	if ( m_PushAttackAttribute.m_vWeaponInfoList.empty() )

  00091	8b 8e dc 19 00
	00		 mov	 ecx, DWORD PTR [esi+6620]
  00097	3b 8e e0 19 00
	00		 cmp	 ecx, DWORD PTR [esi+6624]
  0009d	0f 84 ae 02 00
	00		 je	 $LN12@PushCreate

; 751  : 		return;
; 752  : 
; 753  : 	const WeaponInfo &sPushWeaponInfo = m_PushAttackAttribute.m_vWeaponInfoList[0];

  000a3	8b f1		 mov	 esi, ecx

; 754  : 
; 755  : 	FireTime kFireTime;

  000a5	8d 8d 30 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  000ab	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  000b0	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 756  : 	kFireTime.dwStart = dwCurTime;

  000b4	89 bd 30 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp], edi

; 757  : 	kFireTime.iAttributeIdx = sPushWeaponInfo.m_iWeaponIdx;

  000ba	8b 06		 mov	 eax, DWORD PTR [esi]
  000bc	89 85 38 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+8], eax

; 758  : 	kFireTime.iResistanceIdx = sPushWeaponInfo.m_iResistanceIdx;

  000c2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c5	89 85 3c 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+12], eax

; 759  : 	kFireTime.szWoundedAni  = sPushWeaponInfo.m_WoundedAnimation;

  000cb	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000ce	50		 push	 eax
  000cf	8d 8d 44 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp+20]
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 760  : 	kFireTime.dwWoundedAniDuration = sPushWeaponInfo.m_dwWoundedDuration;

  000db	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 761  : 	kFireTime.bLoopWoundedAni = sPushWeaponInfo.m_bWoundedLoopAni;
; 762  : 	kFireTime.eFireTimeType = FTT_NORMAL_ATTACK;
; 763  : 
; 764  : 	DWORD dwWeaponBaseIdx = pOwner->IncreaseWeaponIndexBase();

  000de	8b 8d bc 7f ff
	ff		 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  000e4	89 85 54 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+36], eax
  000ea	8a 46 20	 mov	 al, BYTE PTR [esi+32]
  000ed	33 ff		 xor	 edi, edi
  000ef	88 85 40 7f ff
	ff		 mov	 BYTE PTR _kFireTime$[ebp+16], al
  000f5	89 bd 70 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+64], edi
  000fb	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  00100	89 85 98 7f ff
	ff		 mov	 DWORD PTR _dwWeaponBaseIdx$[ebp], eax

; 765  : 	DWORD dwCreateWeaponIdx = dwWeaponBaseIdx;

  00106	89 85 b4 7f ff
	ff		 mov	 DWORD PTR _dwCreateWeaponIdx$[ebp], eax

; 766  : 
; 767  : 	Vector3Vec vFirePos;

  0010c	89 bd a4 7f ff
	ff		 mov	 DWORD PTR _vFirePos$[ebp], edi
  00112	89 bd a8 7f ff
	ff		 mov	 DWORD PTR _vFirePos$[ebp+4], edi
  00118	89 bd ac 7f ff
	ff		 mov	 DWORD PTR _vFirePos$[ebp+8], edi

; 768  : 	const BaseCharList &rkCharList = pPlayStage->GetBaseCharList();
; 769  : 	BaseCharList::const_iterator iter;
; 770  : 	for( iter=rkCharList.begin() ; iter!=rkCharList.end() ; ++iter )

  0011e	8b 73 2c	 mov	 esi, DWORD PTR [ebx+44]
  00121	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00125	89 b5 9c 7f ff
	ff		 mov	 DWORD PTR _iter$[ebp], esi
  0012b	3b 73 30	 cmp	 esi, DWORD PTR [ebx+48]
  0012e	0f 84 1c 01 00
	00		 je	 $LN8@PushCreate
$LL47@PushCreate:

; 771  : 	{
; 772  : 		ioBaseChar *pTarget = *iter;

  00134	8b 3e		 mov	 edi, DWORD PTR [esi]

; 773  : 		if( !pTarget )	

  00136	85 ff		 test	 edi, edi
  00138	0f 84 fe 00 00
	00		 je	 $LN9@PushCreate

; 774  : 			continue;
; 775  : 
; 776  : 		if( pTarget == pOwner )

  0013e	8b 85 bc 7f ff
	ff		 mov	 eax, DWORD PTR _pOwner$GSCopy$[ebp]
  00144	3b f8		 cmp	 edi, eax
  00146	0f 84 f0 00 00
	00		 je	 $LN9@PushCreate

; 777  : 			continue;
; 778  : 
; 779  : 		if ( !pTarget->HasBuff( pOwner->GetCharName(), m_szTargetCheckBuff ) )

  0014c	8b 8d a0 7f ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00152	81 c1 84 1a 00
	00		 add	 ecx, 6788		; 00001a84H
  00158	51		 push	 ecx
  00159	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  0015e	50		 push	 eax
  0015f	8b cf		 mov	 ecx, edi
  00161	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@0@Z ; ioBaseChar::HasBuff
  00166	84 c0		 test	 al, al
  00168	0f 84 ce 00 00
	00		 je	 $LN9@PushCreate

; 780  : 			continue;
; 781  : 
; 782  : 		kFireTime.dwWeaponIdx = dwCreateWeaponIdx++;

  0016e	8b 85 b4 7f ff
	ff		 mov	 eax, DWORD PTR _dwCreateWeaponIdx$[ebp]
  00174	ff 85 b4 7f ff
	ff		 inc	 DWORD PTR _dwCreateWeaponIdx$[ebp]
  0017a	89 85 58 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+40], eax

; 783  : 
; 784  : 		D3DXVECTOR3 vPos = pTarget->GetMidPositionByRate();

  00180	b8 05 00 00 00	 mov	 eax, 5
  00185	8b c8		 mov	 ecx, eax
  00187	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0018c	89 8d b8 7f ff
	ff		 mov	 DWORD PTR tv556[ebp], ecx
  00192	db 85 b8 7f ff
	ff		 fild	 DWORD PTR tv556[ebp]
  00198	85 c9		 test	 ecx, ecx
  0019a	79 06		 jns	 SHORT $LN84@PushCreate
  0019c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN84@PushCreate:
  001a2	89 85 b8 7f ff
	ff		 mov	 DWORD PTR tv552[ebp], eax
  001a8	db 85 b8 7f ff
	ff		 fild	 DWORD PTR tv552[ebp]
  001ae	85 c0		 test	 eax, eax
  001b0	79 06		 jns	 SHORT $LN85@PushCreate
  001b2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN85@PushCreate:
  001b8	de f9		 fdivp	 ST(1), ST(0)
  001ba	51		 push	 ecx
  001bb	8d 45 e4	 lea	 eax, DWORD PTR _vPos$550020[ebp]
  001be	8b cf		 mov	 ecx, edi
  001c0	d9 9d b8 7f ff
	ff		 fstp	 DWORD PTR tv548[ebp]
  001c6	d9 85 b8 7f ff
	ff		 fld	 DWORD PTR tv548[ebp]
  001cc	d9 1c 24	 fstp	 DWORD PTR [esp]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 785  : 		D3DXVECTOR3 vDir = ioMath::VEC3_ZERO;

  001d5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  001db	8d 7d d8	 lea	 edi, DWORD PTR _vDir$550022[ebp]
  001de	a5		 movsd
  001df	a5		 movsd

; 786  : 
; 787  : 		pOwner->ExtendFireExplicit( kFireTime, vPos, vDir, "" );

  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001e5	8d 8d 88 7f ff
	ff		 lea	 ecx, DWORD PTR $T560912[ebp]
  001eb	a5		 movsd
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  001f2	8b 8d bc 7f ff
	ff		 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  001f8	8d 85 88 7f ff
	ff		 lea	 eax, DWORD PTR $T560912[ebp]
  001fe	50		 push	 eax
  001ff	8d 45 d8	 lea	 eax, DWORD PTR _vDir$550022[ebp]
  00202	50		 push	 eax
  00203	8d 45 e4	 lea	 eax, DWORD PTR _vPos$550020[ebp]
  00206	50		 push	 eax
  00207	8d 85 30 7f ff
	ff		 lea	 eax, DWORD PTR _kFireTime$[ebp]
  0020d	50		 push	 eax
  0020e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00212	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  00217	8d 8d 88 7f ff
	ff		 lea	 ecx, DWORD PTR $T560912[ebp]
  0021d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 788  : 		vFirePos.push_back( vPos );

  00227	8d 45 e4	 lea	 eax, DWORD PTR _vPos$550020[ebp]
  0022a	50		 push	 eax
  0022b	8d 8d a4 7f ff
	ff		 lea	 ecx, DWORD PTR _vFirePos$[ebp]
  00231	e8 00 00 00 00	 call	 ?push_back@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXABUD3DXVECTOR3@@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::push_back
  00236	8b b5 9c 7f ff
	ff		 mov	 esi, DWORD PTR _iter$[ebp]
$LN9@PushCreate:

; 768  : 	const BaseCharList &rkCharList = pPlayStage->GetBaseCharList();
; 769  : 	BaseCharList::const_iterator iter;
; 770  : 	for( iter=rkCharList.begin() ; iter!=rkCharList.end() ; ++iter )

  0023c	83 c6 04	 add	 esi, 4
  0023f	89 b5 9c 7f ff
	ff		 mov	 DWORD PTR _iter$[ebp], esi
  00245	3b 73 30	 cmp	 esi, DWORD PTR [ebx+48]
  00248	0f 85 e6 fe ff
	ff		 jne	 $LL47@PushCreate
  0024e	33 ff		 xor	 edi, edi
$LN8@PushCreate:

; 789  : 	}
; 790  : 
; 791  : 	m_dwFireTime = 0;
; 792  : 
; 793  : 	if( !vFirePos.empty() && pOwner->IsNeedSendNetwork() )

  00250	8b 85 a8 7f ff
	ff		 mov	 eax, DWORD PTR _vFirePos$[ebp+4]
  00256	8b b5 a0 7f ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0025c	89 be ac 1a 00
	00		 mov	 DWORD PTR [esi+6828], edi
  00262	39 85 a4 7f ff
	ff		 cmp	 DWORD PTR _vFirePos$[ebp], eax
  00268	0f 84 c5 00 00
	00		 je	 $LN4@PushCreate
  0026e	8b bd bc 7f ff
	ff		 mov	 edi, DWORD PTR _pOwner$GSCopy$[ebp]
  00274	8b 07		 mov	 eax, DWORD PTR [edi]
  00276	8b cf		 mov	 ecx, edi
  00278	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  0027e	84 c0		 test	 al, al
  00280	0f 84 ad 00 00
	00		 je	 $LN4@PushCreate

; 794  : 	{
; 795  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  00286	68 27 41 00 00	 push	 16679			; 00004127H
  0028b	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  00291	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 796  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  00296	8d 85 c0 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$550025[ebp]
  0029c	50		 push	 eax
  0029d	57		 push	 edi
  0029e	8b ce		 mov	 ecx, esi
  002a0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a4	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 797  : 		kPacket << CS_SPECIAL;

  002a9	6a 07		 push	 7
  002ab	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  002b1	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 798  : 		kPacket << SS_PUSH;

  002b6	6a 01		 push	 1
  002b8	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  002be	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 799  : 		kPacket << dwWeaponBaseIdx;

  002c3	ff b5 98 7f ff
	ff		 push	 DWORD PTR _dwWeaponBaseIdx$[ebp]
  002c9	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  002cf	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@K@Z ; SP2Packet::operator<<

; 800  : 		int nFireCnt = (int)vFirePos.size();

  002d4	8b 85 a8 7f ff
	ff		 mov	 eax, DWORD PTR _vFirePos$[ebp+4]
  002da	2b 85 a4 7f ff
	ff		 sub	 eax, DWORD PTR _vFirePos$[ebp]
  002e0	6a 0c		 push	 12			; 0000000cH
  002e2	59		 pop	 ecx
  002e3	99		 cdq
  002e4	f7 f9		 idiv	 ecx

; 801  : 		kPacket << nFireCnt;

  002e6	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  002ec	8b f0		 mov	 esi, eax
  002ee	56		 push	 esi
  002ef	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 802  : 		for ( int i=0; i<nFireCnt; i++ )

  002f4	85 f6		 test	 esi, esi
  002f6	7e 1c		 jle	 SHORT $LN1@PushCreate

; 794  : 	{
; 795  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  002f8	33 ff		 xor	 edi, edi
$LL3@PushCreate:

; 803  : 			kPacket << vFirePos[i];

  002fa	8b 85 a4 7f ff
	ff		 mov	 eax, DWORD PTR _vFirePos$[ebp]
  00300	03 c7		 add	 eax, edi
  00302	50		 push	 eax
  00303	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  00309	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<
  0030e	83 c7 0c	 add	 edi, 12			; 0000000cH
  00311	4e		 dec	 esi
  00312	75 e6		 jne	 SHORT $LL3@PushCreate
$LN1@PushCreate:

; 804  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  00314	8d 85 c0 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$550025[ebp]
  0031a	6a 00		 push	 0
  0031c	50		 push	 eax
  0031d	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser
  00322	59		 pop	 ecx
  00323	59		 pop	 ecx

; 805  : 	}

  00324	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  0032a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0032e	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN4@PushCreate:

; 806  : }

  00333	8d 8d a4 7f ff
	ff		 lea	 ecx, DWORD PTR _vFirePos$[ebp]
  00339	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0033d	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@IAEXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Tidy
  00342	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00346	8d 8d 30 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  0034c	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN12@PushCreate:
  00351	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00354	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035b	59		 pop	 ecx
  0035c	5f		 pop	 edi
  0035d	5e		 pop	 esi
  0035e	5b		 pop	 ebx
  0035f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00362	33 cd		 xor	 ecx, ebp
  00364	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00369	c9		 leave
  0036a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d 30 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$1:
  0000b	8d 8d a4 7f ff
	ff		 lea	 ecx, DWORD PTR _vFirePos$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$2:
  00016	8d 8d 88 7f ff
	ff		 lea	 ecx, DWORD PTR $T560912[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z$3:
  00022	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550025[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z:
  0002d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00031	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00034	8b 8a 2c 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32980]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z
  00050	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioNephilimItem::PushCreateWeapon
PUBLIC	?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 29		 jae	 SHORT $LN4@push_back@2
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 23		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	83 e7 f0	 and	 edi, -16		; fffffff0H
  0002a	03 3e		 add	 edi, DWORD PTR [esi]
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	57		 push	 edi
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00038	eb 19		 jmp	 SHORT $LN30@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003d	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  0003f	6a 01		 push	 1
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00048	57		 push	 edi
  00049	ff 76 04	 push	 DWORD PTR [esi+4]
  0004c	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00051	59		 pop	 ecx
  00052	59		 pop	 ecx
$LN30@push_back@2:

; 996  : 			++this->_Mylast;

  00053	83 46 04 10	 add	 DWORD PTR [esi+4], 16	; 00000010H
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXABUAreaWeaponInfo@ioNephilimItem@@@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXABUAreaWeaponInfo@ioNephilimItem@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXABUAreaWeaponInfo@ioNephilimItem@@@Z PROC ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back@3
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back@3

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 18		 push	 24			; 00000018H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back@3

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXI@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Reserve
$LN3@push_back@3:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 18	 imul	 edi, 24			; 00000018H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@UAreaWeaponInfo@ioNephilimItem@@AAU34@@std@@YAXAAV?$allocator@UAreaWeaponInfo@ioNephilimItem@@@0@PAUAreaWeaponInfo@ioNephilimItem@@AAU23@@Z ; std::_Cons_val<std::allocator<ioNephilimItem::AreaWeaponInfo>,ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back@3
$LN4@push_back@3:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back@3

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXI@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Reserve
$LN1@push_back@3:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@UAreaWeaponInfo@ioNephilimItem@@ABU12@@std@@YAXPAUAreaWeaponInfo@ioNephilimItem@@ABU12@@Z ; std::_Construct<ioNephilimItem::AreaWeaponInfo,ioNephilimItem::AreaWeaponInfo const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back@3:

; 996  : 			++this->_Mylast;

  00061	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXABUAreaWeaponInfo@ioNephilimItem@@@Z ENDP ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::push_back
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@XZ			; AttackAttribute::AttackAttribute
EXTRN	?Init@AttackAttribute@@QAEXXZ:PROC		; AttackAttribute::Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$3
__ehfuncinfo$??0AttackAttribute@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AttackAttribute@@QAE@XZ PROC				; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx

; 107  : 	AttackAttribute()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	33 db		 xor	 ebx, ebx
  0001b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	ff d7		 call	 edi
  00023	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00026	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00029	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0002c	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0002f	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00032	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 108  : 	{
; 109  : 		Init();

  00035	8b ce		 mov	 ecx, esi
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 110  : 	}

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__unwindfunclet$??0AttackAttribute@@QAE@XZ$3:
  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 38	 add	 ecx, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
__ehhandler$??0AttackAttribute@@QAE@XZ:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::AttackAttribute
PUBLIC	??1AttackAttribute@@QAE@XZ			; AttackAttribute::~AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$2
__ehfuncinfo$??1AttackAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AttackAttribute@@QAE@XZ PROC				; AttackAttribute::~AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00014	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
  00020	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00023	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00032	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	ff d7		 call	 edi
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d7		 call	 edi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??1AttackAttribute@@QAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AttackAttribute@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::~AttackAttribute
PUBLIC	??_7ioNephilimItem@@6B@				; ioNephilimItem::`vftable'
PUBLIC	??0ioNephilimItem@@QAE@XZ			; ioNephilimItem::ioNephilimItem
PUBLIC	??_R4ioNephilimItem@@6B@			; ioNephilimItem::`RTTI Complete Object Locator'
PUBLIC	??_R3ioNephilimItem@@8				; ioNephilimItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioNephilimItem@@8				; ioNephilimItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioNephilimItem@@8			; ioNephilimItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWeaponItem@@8			; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ioWeaponItem@@8				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeaponItem@@8				; ioWeaponItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAttackableItem@@8		; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioAttackableItem@@@8			; ioAttackableItem `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackableItem@@8			; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackableItem@@8			; ioAttackableItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioItem@@8				; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ioItem@@8					; ioItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioItem@@8					; ioItem::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z ; ioNephilimItem::LoadProperty
PUBLIC	?Clone@ioNephilimItem@@UAEPAVioItem@@XZ		; ioNephilimItem::Clone
PUBLIC	?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ; ioItem::IsEnableExtraGauge
PUBLIC	?GetExtraGauge@ioItem@@UAEMXZ			; ioItem::GetExtraGauge
PUBLIC	?CheckOnHand@ioAttackableItem@@UAE_NXZ		; ioAttackableItem::CheckOnHand
PUBLIC	?CheckAimState@ioAttackableItem@@UAE_N_N@Z	; ioAttackableItem::CheckAimState
PUBLIC	?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::SetAimState
PUBLIC	?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::CheckExtendDefenseEnable
PUBLIC	?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsMoveAttackState
PUBLIC	?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsNoGhostWalk
PUBLIC	?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableAttackDashCheck
PUBLIC	?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableItemDashCheck
PUBLIC	?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsEnableAttackRotateCheck
PUBLIC	?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsEnableChargeDefenseCheck
PUBLIC	?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
PUBLIC	?IsAutoTarget@ioAttackableItem@@UBE_NXZ		; ioAttackableItem::IsAutoTarget
PUBLIC	?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsWoundAfterUseExtendState
PUBLIC	?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ; ioAttackableItem::CheckWoundAfterUseExtendState
PUBLIC	?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ; ioAttackableItem::IsCharSkipState
EXTRN	??1ioWeaponItem@@UAE@XZ:PROC			; ioWeaponItem::~ioWeaponItem
EXTRN	??0ioWeaponItem@@QAE@XZ:PROC			; ioWeaponItem::ioWeaponItem
EXTRN	?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ:PROC ; ioItem::FindFieldEntityGrp
EXTRN	?GetType@ioWeaponItem@@UBE?AW4ItemType@ioItem@@XZ:PROC ; ioWeaponItem::GetType
EXTRN	?UseCreateIndexItem@ioItem@@UBE_NXZ:PROC	; ioItem::UseCreateIndexItem
EXTRN	?GetSetFocusColor@ioItem@@UBEKXZ:PROC		; ioItem::GetSetFocusColor
EXTRN	?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::Initialize
EXTRN	?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::InitializeBeforeEquip
EXTRN	?OnEquiped@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEquiped
EXTRN	?OnReleased@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::OnReleased
EXTRN	?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::SetExtendEquipEffect
EXTRN	?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::ReleaseExtendEquipEffect
EXTRN	?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::AddGlowLine
EXTRN	?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::RemoveGlowLine
EXTRN	?GetTargetName@ioItem@@UAE?AVioHashString@@XZ:PROC ; ioItem::GetTargetName
EXTRN	?ClearTarget@ioItem@@UAEXXZ:PROC		; ioItem::ClearTarget
EXTRN	?SetItemType@ioWeaponItem@@UAEXXZ:PROC		; ioWeaponItem::SetItemType
EXTRN	?UpdateExtraData@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::UpdateExtraData
EXTRN	?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWeaponDefenseState
EXTRN	?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWoundedState
EXTRN	?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioItem::SetVisible
EXTRN	?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z:PROC ; ioItem::UpdateSkillGauge
EXTRN	?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z:PROC ; ioItem::ReduceNeedGauge
EXTRN	?GetCurBullet@ioItem@@UAEHXZ:PROC		; ioItem::GetCurBullet
EXTRN	?GetMaxBullet@ioItem@@UAEHXZ:PROC		; ioItem::GetMaxBullet
EXTRN	?SetCurBullet@ioItem@@UAEXH@Z:PROC		; ioItem::SetCurBullet
EXTRN	?GetCurSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetCurSecoundBullet
EXTRN	?GetMaxSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetMaxSecoundBullet
EXTRN	?SetCurSecoundBullet@ioItem@@UAEXH@Z:PROC	; ioItem::SetCurSecoundBullet
EXTRN	?GetGrowthInfoNum@ioItem@@UBEHH@Z:PROC		; ioItem::GetGrowthInfoNum
EXTRN	?GetGrowthInfoNumByType@ioItem@@UBEHHAAH@Z:PROC	; ioItem::GetGrowthInfoNumByType
EXTRN	?ClearCurChargeRateForSkill@ioItem@@UAEXXZ:PROC	; ioItem::ClearCurChargeRateForSkill
EXTRN	?GetChargeDamageRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeDamageRateForSkill
EXTRN	?GetChargeForceRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeForceRateForSkill
EXTRN	?GetChargeBlowRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeBlowRateForSkill
EXTRN	?GetChargeRangeRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeRangeRateForSkill
EXTRN	?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeSpeedRateForSkill
EXTRN	?GetChargeFloatRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeFloatRateForSkill
EXTRN	?GetChargeScaleRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeScaleRateForSkill
EXTRN	?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeExplosionRateForSkill
EXTRN	?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeWoundedTimeRateForSkill
EXTRN	?SetCurEquipEffect@ioItem@@UAEX_N@Z:PROC	; ioItem::SetCurEquipEffect
EXTRN	?SetCostume@ioItem@@UAEXH_N@Z:PROC		; ioItem::SetCostume
EXTRN	??_EioNephilimItem@@UAEPAXI@Z:PROC		; ioNephilimItem::`vector deleting destructor'
EXTRN	?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z:PROC ; ioAttackableItem::IsCanFire
EXTRN	?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CallItemProcess
EXTRN	?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioAttackableItem::CheckChargeInfo
EXTRN	?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDefenseState
EXTRN	?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDefenseState
EXTRN	?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseMoveAniState
EXTRN	?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDodgeDefenseState
EXTRN	?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDodgeDefenseState
EXTRN	?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDodgeDefenseState
EXTRN	?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenseAttackState
EXTRN	?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseAttackState
EXTRN	?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDefenseAttackState
EXTRN	?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDashState
EXTRN	?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDashState
EXTRN	?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpAttack
EXTRN	?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReloadState
EXTRN	?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReload
EXTRN	?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadState
EXTRN	?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadReserve
EXTRN	?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessJumpReloadState
EXTRN	?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJumpReload
EXTRN	?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::OnItemGaugeCancel
EXTRN	?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendDefense
EXTRN	?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndNormalAttack
EXTRN	?OnEndExtendAttack@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioAttackableItem::OnEndExtendAttack
EXTRN	?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendJump
EXTRN	?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::FillNormalAttackExtraInfo
EXTRN	?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyNormalAttackExtraInfo
EXTRN	?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckLanding
EXTRN	?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z:PROC ; ioAttackableItem::SetNoneState
EXTRN	?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsCanUpdateGauge
EXTRN	?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAimJumpState
EXTRN	?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetJumppingAnimation
EXTRN	?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetExtendJumppingAnimation
EXTRN	?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckRetreatState
EXTRN	?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z:PROC ; ioAttackableItem::SetNextItemState
EXTRN	?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z:PROC ; ioWeaponItem::WeaponWounded
EXTRN	?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z:PROC ; ioAttackableItem::WeaponMapColDead
EXTRN	?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenceCounterState
EXTRN	?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsUseDefenceCounterAttack
EXTRN	?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessDefenceCounterAttack
EXTRN	?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessExtraJump
EXTRN	?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetEndGrappling
EXTRN	?ClearKeyReserve@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearKeyReserve
EXTRN	?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReserve
EXTRN	?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessReserveKeyInput
EXTRN	?SetJumpState@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::SetJumpState
EXTRN	?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumpping
EXTRN	?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumppingByNoNeedProcess
EXTRN	?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessLanding
EXTRN	?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessAimJump
EXTRN	?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJump
EXTRN	?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDash
EXTRN	?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyCounterAttack
EXTRN	?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckComboJumpAttack
EXTRN	?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetFlashJumpAttack
EXTRN	?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetComboFlashAttack
EXTRN	?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetCollectJumpAttack
EXTRN	?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetPowerChargeJumpAttack
EXTRN	?GetAttackSpeedRate@ioAttackableItem@@UBEMXZ:PROC ; ioAttackableItem::GetAttackSpeedRate
EXTRN	?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z:PROC ; ioAttackableItem::GetExtraJumpSpeedRate
EXTRN	?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableExtendJump
EXTRN	?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::RecevieExtendJumpUse
EXTRN	?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasAniFile
EXTRN	?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasEndAniFile
EXTRN	?GetAttackAttribute@ioAttackableItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAttribute
EXTRN	?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAniFile
EXTRN	?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAniRate
EXTRN	?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetEndAniFile
EXTRN	?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackEndAniRate
EXTRN	?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAttributeIdx
EXTRN	?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetForceInfoList
EXTRN	?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackPreDelay
EXTRN	?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAnimationDelay
EXTRN	?GetMaxCombo@ioAttackableItem@@UBEHXZ:PROC	; ioAttackableItem::GetMaxCombo
EXTRN	?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ:PROC ; ioAttackableItem::GetExtraDashAttackMax
EXTRN	?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::HasJumpEndAnimation
EXTRN	?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::GetJumpEndAnimation
EXTRN	?ClearCancelInfo@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearCancelInfo
EXTRN	?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserve
EXTRN	?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputJump
EXTRN	?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessCancelBySpeicalDash
EXTRN	?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputDashS
EXTRN	?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserveByConditionalSpecialDash
EXTRN	?IsConditionalSpecialDashReserve@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsConditionalSpecialDashReserve
EXTRN	?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z:PROC ; ioAttackableItem::SetChangeConditionalSpecialDash
EXTRN	?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckChangeWereWolfState
EXTRN	?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetChangeWereWolfState
EXTRN	?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReleaseWereWolfState
EXTRN	?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfState
EXTRN	?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfStateByOwner
EXTRN	?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z:PROC ; ioAttackableItem::IncreaseChangeDamage
EXTRN	?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::IncreaseChangeDamageByWeapon
EXTRN	?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckIncreaseChangeDamage
EXTRN	?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::DecreaseChangeDamage
EXTRN	?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableActionStopDelay
EXTRN	?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z:PROC ; ioAttackableItem::SetExtraGaugeTypeByWeapon
EXTRN	?SetUseExtraGauge@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::SetUseExtraGauge
EXTRN	?InitExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::InitExtraGauge
EXTRN	?MaxExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::MaxExtraGauge
EXTRN	?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetMaxExtraGauge
EXTRN	?GetCurExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetCurExtraGauge
EXTRN	?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::SetCurExtraGauge
EXTRN	?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z:PROC ; ioAttackableItem::GetAutoTargetValue
EXTRN	?ClearAirJump@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::ClearAirJump
EXTRN	?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z:PROC ; ioAttackableItem::SetAirJump
EXTRN	?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAirJump
EXTRN	?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::EquipObjectItemByAttakable
EXTRN	?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::ReleaseObjectItemByAttack
EXTRN	?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsBuffFlyChange
EXTRN	?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpLandingExtraState
EXTRN	?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z:PROC ; ioWeaponItem::ReleaseObjectState
EXTRN	?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ:PROC ; ioWeaponItem::IsCmdCheckEnableTime
EXTRN	?IsCmdSuccess@ioWeaponItem@@UAE_NXZ:PROC	; ioWeaponItem::IsCmdSuccess
EXTRN	?IsOneTimeWeaponItem@ioWeaponItem@@UBE_NXZ:PROC	; ioWeaponItem::IsOneTimeWeaponItem
EXTRN	?GetEquipMesh@ioWeaponItem@@UBEABVioHashString@@PAVioBaseChar@@@Z:PROC ; ioWeaponItem::GetEquipMesh
EXTRN	?IsCanSendControl@ioWeaponItem@@UBE_NXZ:PROC	; ioWeaponItem::IsCanSendControl
;	COMDAT ??_R2ioItem@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R2ioItem@@8 DD FLAT:??_R1A@?0A@EA@ioItem@@8		; ioItem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioItem@@8
rdata$r	SEGMENT
??_R3ioItem@@8 DD 00H					; ioItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioItem@@8 DD FLAT:??_R0?AVioItem@@@8	; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackableItem@@8
rdata$r	SEGMENT
??_R2ioAttackableItem@@8 DD FLAT:??_R1A@?0A@EA@ioAttackableItem@@8 ; ioAttackableItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackableItem@@8
rdata$r	SEGMENT
??_R3ioAttackableItem@@8 DD 00H				; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackableItem@@@8
_DATA	SEGMENT
??_R0?AVioAttackableItem@@@8 DD FLAT:??_7type_info@@6B@	; ioAttackableItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackableItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackableItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackableItem@@8 DD FLAT:??_R0?AVioAttackableItem@@@8 ; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWeaponItem@@8
rdata$r	SEGMENT
??_R2ioWeaponItem@@8 DD FLAT:??_R1A@?0A@EA@ioWeaponItem@@8 ; ioWeaponItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioWeaponItem@@8
rdata$r	SEGMENT
??_R3ioWeaponItem@@8 DD 00H				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeaponItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeaponItem@@8 DD FLAT:??_R0?AVioWeaponItem@@@8 ; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioNephilimItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioNephilimItem@@8 DD FLAT:??_R0?AVioNephilimItem@@@8 ; ioNephilimItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioNephilimItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioNephilimItem@@8
rdata$r	SEGMENT
??_R2ioNephilimItem@@8 DD FLAT:??_R1A@?0A@EA@ioNephilimItem@@8 ; ioNephilimItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeaponItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioNephilimItem@@8
rdata$r	SEGMENT
??_R3ioNephilimItem@@8 DD 00H				; ioNephilimItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ioNephilimItem@@8
rdata$r	ENDS
;	COMDAT ??_R4ioNephilimItem@@6B@
rdata$r	SEGMENT
??_R4ioNephilimItem@@6B@ DD 00H				; ioNephilimItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioNephilimItem@@@8
	DD	FLAT:??_R3ioNephilimItem@@8
rdata$r	ENDS
;	COMDAT ??_7ioNephilimItem@@6B@
CONST	SEGMENT
??_7ioNephilimItem@@6B@ DD FLAT:??_R4ioNephilimItem@@6B@ ; ioNephilimItem::`vftable'
	DD	FLAT:?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ
	DD	FLAT:?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetType@ioWeaponItem@@UBE?AW4ItemType@ioItem@@XZ
	DD	FLAT:?Clone@ioNephilimItem@@UAEPAVioItem@@XZ
	DD	FLAT:?UseCreateIndexItem@ioItem@@UBE_NXZ
	DD	FLAT:?GetSetFocusColor@ioItem@@UBEKXZ
	DD	FLAT:?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?OnEquiped@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnReleased@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetTargetName@ioItem@@UAE?AVioHashString@@XZ
	DD	FLAT:?ClearTarget@ioItem@@UAEXXZ
	DD	FLAT:?SetItemType@ioWeaponItem@@UAEXXZ
	DD	FLAT:?UpdateExtraData@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z
	DD	FLAT:?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetExtraGauge@ioItem@@UAEMXZ
	DD	FLAT:?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z
	DD	FLAT:?GetCurBullet@ioItem@@UAEHXZ
	DD	FLAT:?GetMaxBullet@ioItem@@UAEHXZ
	DD	FLAT:?SetCurBullet@ioItem@@UAEXH@Z
	DD	FLAT:?GetCurSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?GetMaxSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?SetCurSecoundBullet@ioItem@@UAEXH@Z
	DD	FLAT:?GetGrowthInfoNum@ioItem@@UBEHH@Z
	DD	FLAT:?GetGrowthInfoNumByType@ioItem@@UBEHHAAH@Z
	DD	FLAT:?ClearCurChargeRateForSkill@ioItem@@UAEXXZ
	DD	FLAT:?GetChargeDamageRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeForceRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeBlowRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeRangeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeFloatRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeScaleRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?SetCurEquipEffect@ioItem@@UAEX_N@Z
	DD	FLAT:?SetCostume@ioItem@@UAEXH_N@Z
	DD	FLAT:??_EioNephilimItem@@UAEPAXI@Z
	DD	FLAT:?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z
	DD	FLAT:?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtraInfoToWeapon@ioNephilimItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckNormalAttack@ioNephilimItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpAttack@ioNephilimItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z
	DD	FLAT:?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeOK@ioNephilimItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndExtendAttack@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?CheckOnHand@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimState@ioAttackableItem@@UAE_N_N@Z
	DD	FLAT:?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsChargeAttackState@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z
	DD	FLAT:?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z
	DD	FLAT:?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z
	DD	FLAT:?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearKeyReserve@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpState@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetJumpping@ioNephilimItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpAttack@ioNephilimItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z
	DD	FLAT:?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackSpeedRate@ioAttackableItem@@UBEMXZ
	DD	FLAT:?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
	DD	FLAT:?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttribute@ioAttackableItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z
	DD	FLAT:?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetMaxCombo@ioAttackableItem@@UBEHXZ
	DD	FLAT:?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ
	DD	FLAT:?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z
	DD	FLAT:?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z
	DD	FLAT:?ClearCancelInfo@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z
	DD	FLAT:?ProcessCancel@ioNephilimItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z
	DD	FLAT:?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsConditionalSpecialDashReserve@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z
	DD	FLAT:?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z
	DD	FLAT:?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z
	DD	FLAT:?SetUseExtraGauge@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?InitExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?MaxExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?GetCurExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z
	DD	FLAT:?ClearAirJump@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsAutoTarget@ioAttackableItem@@UBE_NXZ
	DD	FLAT:?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackStateText@ioNephilimItem@@UBEPBDXZ
	DD	FLAT:?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
	DD	FLAT:?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
	DD	FLAT:?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z
	DD	FLAT:?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsCmdSuccess@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsOneTimeWeaponItem@ioWeaponItem@@UBE_NXZ
	DD	FLAT:?GetEquipMesh@ioWeaponItem@@UBEABVioHashString@@PAVioBaseChar@@@Z
	DD	FLAT:?IsCanSendControl@ioWeaponItem@@UBE_NXZ
	DD	FLAT:?GetSubType@ioNephilimItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioNephilimItem@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioNephilimItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioNephilimItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@XZ$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ??0ioNephilimItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioNephilimItem@@QAE@XZ PROC				; ioNephilimItem::ioNephilimItem, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioNephilimItem@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioWeaponItem@@QAE@XZ	; ioWeaponItem::ioWeaponItem
  00016	33 ff		 xor	 edi, edi
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimItem@@6B@
  0001e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00021	89 be 54 19 00
	00		 mov	 DWORD PTR [esi+6484], edi
  00027	89 be 58 19 00
	00		 mov	 DWORD PTR [esi+6488], edi
  0002d	89 be 5c 19 00
	00		 mov	 DWORD PTR [esi+6492], edi
  00033	8d 8e 64 19 00
	00		 lea	 ecx, DWORD PTR [esi+6500]
  00039	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003d	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  00042	8d 8e b4 19 00
	00		 lea	 ecx, DWORD PTR [esi+6580]
  00048	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004c	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  00051	8d 8e 04 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6660]
  00057	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0005b	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  00060	89 be 54 1a 00
	00		 mov	 DWORD PTR [esi+6740], edi
  00066	89 be 58 1a 00
	00		 mov	 DWORD PTR [esi+6744], edi
  0006c	89 be 5c 1a 00
	00		 mov	 DWORD PTR [esi+6748], edi
  00072	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00078	8d 8e 74 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6772]
  0007e	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00082	ff d7		 call	 edi
  00084	8d 8e 84 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6788]
  0008a	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0008e	ff d7		 call	 edi

; 13   : 	Init();

  00090	8b ce		 mov	 ecx, esi
  00092	e8 00 00 00 00	 call	 ?Init@ioNephilimItem@@IAEXXZ ; ioNephilimItem::Init

; 14   : }

  00097	8b c6		 mov	 eax, esi
  00099	e8 00 00 00 00	 call	 __EH_epilog3
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioNephilimItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??0ioNephilimItem@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 54 19 00
	00		 add	 ecx, 6484		; 00001954H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??0ioNephilimItem@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 64 19 00
	00		 add	 ecx, 6500		; 00001964H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioNephilimItem@@QAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b4 19 00
	00		 add	 ecx, 6580		; 000019b4H
  0002d	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioNephilimItem@@QAE@XZ$4:
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 04 1a 00
	00		 add	 ecx, 6660		; 00001a04H
  0003b	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioNephilimItem@@QAE@XZ$5:
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 54 1a 00
	00		 add	 ecx, 6740		; 00001a54H
  00049	e9 00 00 00 00	 jmp	 ??1?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
__unwindfunclet$??0ioNephilimItem@@QAE@XZ$6:
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	81 c1 74 1a 00
	00		 add	 ecx, 6772		; 00001a74H
  00057	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioNephilimItem@@QAE@XZ:
  0005d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00061	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00064	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioNephilimItem@@QAE@XZ
  00073	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioNephilimItem@@QAE@XZ ENDP				; ioNephilimItem::ioNephilimItem
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitem.h
_TEXT	ENDS
;	COMDAT ?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z PROC	; ioItem::IsEnableExtraGauge, COMDAT
; _this$ = ecx

; 375  : 	virtual bool IsEnableExtraGauge( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ENDP	; ioItem::IsEnableExtraGauge
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetExtraGauge@ioItem@@UAEMXZ
_TEXT	SEGMENT
tv64 = -4						; size = 4
?GetExtraGauge@ioItem@@UAEMXZ PROC			; ioItem::GetExtraGauge, COMDAT
; _this$ = ecx

; 376  : 	virtual float GetExtraGauge() { return FLOAT1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv64[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN5@GetExtraGa
  00013	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN5@GetExtraGa:
  00019	c9		 leave
  0001a	c3		 ret	 0
?GetExtraGauge@ioItem@@UAEMXZ ENDP			; ioItem::GetExtraGauge
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackableitem.h
_TEXT	ENDS
;	COMDAT ?CheckOnHand@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?CheckOnHand@ioAttackableItem@@UAE_NXZ PROC		; ioAttackableItem::CheckOnHand, COMDAT
; _this$ = ecx

; 429  : 	virtual bool CheckOnHand() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CheckOnHand@ioAttackableItem@@UAE_NXZ ENDP		; ioAttackableItem::CheckOnHand
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckAimState@ioAttackableItem@@UAE_N_N@Z
_TEXT	SEGMENT
_bAimMove$ = 8						; size = 1
?CheckAimState@ioAttackableItem@@UAE_N_N@Z PROC		; ioAttackableItem::CheckAimState, COMDAT
; _this$ = ecx

; 430  : 	virtual bool CheckAimState( bool bAimMove = false ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?CheckAimState@ioAttackableItem@@UAE_N_N@Z ENDP		; ioAttackableItem::CheckAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::SetAimState, COMDAT
; _this$ = ecx

; 431  : 	virtual bool SetAimState( ioBaseChar *pChar ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::SetAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::CheckExtendDefenseEnable, COMDAT
; _this$ = ecx

; 434  : 	virtual bool CheckExtendDefenseEnable( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::CheckExtendDefenseEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsMoveAttackState, COMDAT
; _this$ = ecx

; 437  : 	virtual bool IsMoveAttackState( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsMoveAttackState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsNoGhostWalk, COMDAT
; _this$ = ecx

; 439  : 	virtual bool IsNoGhostWalk( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsNoGhostWalk
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableAttackDashCheck, COMDAT
; _this$ = ecx

; 441  : 	virtual bool IsEnableAttackDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableAttackDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableItemDashCheck, COMDAT
; _this$ = ecx

; 442  : 	virtual bool IsEnableItemDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableItemDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsEnableAttackRotateCheck, COMDAT
; _this$ = ecx

; 443  : 	virtual bool IsEnableAttackRotateCheck( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsEnableAttackRotateCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsEnableChargeDefenseCheck, COMDAT
; _this$ = ecx

; 444  : 	virtual bool IsEnableChargeDefenseCheck() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsEnableChargeDefenseCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsUseDefenceCounterAttackEndDash, COMDAT
; _this$ = ecx

; 464  : 	virtual bool IsUseDefenceCounterAttackEndDash() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsAutoTarget@ioAttackableItem@@UBE_NXZ
_TEXT	SEGMENT
?IsAutoTarget@ioAttackableItem@@UBE_NXZ PROC		; ioAttackableItem::IsAutoTarget, COMDAT
; _this$ = ecx

; 707  : 	virtual bool IsAutoTarget() const { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsAutoTarget@ioAttackableItem@@UBE_NXZ ENDP		; ioAttackableItem::IsAutoTarget
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 724  : 	virtual bool IsWoundAfterUseExtendState(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eType$ = 12						; size = 4
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z PROC ; ioAttackableItem::CheckWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 725  : 	virtual bool CheckWoundAfterUseExtendState( ioBaseChar* pOwner, BlowTargetType eType ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ENDP ; ioAttackableItem::CheckWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z PROC ; ioAttackableItem::IsCharSkipState, COMDAT
; _this$ = ecx

; 728  : 	virtual bool IsCharSkipState( const ioBaseChar* pOwner ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ENDP ; ioAttackableItem::IsCharSkipState
_TEXT	ENDS
PUBLIC	??0ioNephilimItem@@QAE@ABV0@@Z			; ioNephilimItem::ioNephilimItem
EXTRN	??0ioWeaponItem@@QAE@ABV0@@Z:PROC		; ioWeaponItem::ioWeaponItem
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	SEGMENT
__ehfuncinfo$??0ioNephilimItem@@QAE@ABV0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioNephilimItem@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioNephilimItem@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioNephilimItem@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioNephilimItem@@QAE@ABV0@@Z PROC			; ioNephilimItem::ioNephilimItem, COMDAT
; _this$ = ecx

; 30   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioNephilimItem@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioWeaponItem@@QAE@ABV0@@Z ; ioWeaponItem::ioWeaponItem
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 54 19 00
	00		 lea	 eax, DWORD PTR [edi+6484]
  00024	50		 push	 eax
  00025	8d 8e 54 19 00
	00		 lea	 ecx, DWORD PTR [esi+6484]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimItem@@6B@
  00031	e8 00 00 00 00	 call	 ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
  00036	8d 87 64 19 00
	00		 lea	 eax, DWORD PTR [edi+6500]
  0003c	50		 push	 eax
  0003d	8d 8e 64 19 00
	00		 lea	 ecx, DWORD PTR [esi+6500]
  00043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00047	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  0004c	8d 87 b4 19 00
	00		 lea	 eax, DWORD PTR [edi+6580]
  00052	50		 push	 eax
  00053	8d 8e b4 19 00
	00		 lea	 ecx, DWORD PTR [esi+6580]
  00059	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005d	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  00062	8d 87 04 1a 00
	00		 lea	 eax, DWORD PTR [edi+6660]
  00068	50		 push	 eax
  00069	8d 8e 04 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6660]
  0006f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00073	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  00078	8d 87 54 1a 00
	00		 lea	 eax, DWORD PTR [edi+6740]
  0007e	50		 push	 eax
  0007f	8d 8e 54 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6740]
  00085	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00089	e8 00 00 00 00	 call	 ??0?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
  0008e	d9 87 64 1a 00
	00		 fld	 DWORD PTR [edi+6756]
  00094	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0009a	d9 9e 64 1a 00
	00		 fstp	 DWORD PTR [esi+6756]
  000a0	d9 87 68 1a 00
	00		 fld	 DWORD PTR [edi+6760]
  000a6	8d 87 74 1a 00
	00		 lea	 eax, DWORD PTR [edi+6772]
  000ac	d9 9e 68 1a 00
	00		 fstp	 DWORD PTR [esi+6760]
  000b2	50		 push	 eax
  000b3	d9 87 6c 1a 00
	00		 fld	 DWORD PTR [edi+6764]
  000b9	8d 8e 74 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6772]
  000bf	d9 9e 6c 1a 00
	00		 fstp	 DWORD PTR [esi+6764]
  000c5	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000c9	d9 87 70 1a 00
	00		 fld	 DWORD PTR [edi+6768]
  000cf	d9 9e 70 1a 00
	00		 fstp	 DWORD PTR [esi+6768]
  000d5	ff d3		 call	 ebx
  000d7	8d 87 84 1a 00
	00		 lea	 eax, DWORD PTR [edi+6788]
  000dd	50		 push	 eax
  000de	8d 8e 84 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6788]
  000e4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000e8	ff d3		 call	 ebx
  000ea	8b 87 94 1a 00
	00		 mov	 eax, DWORD PTR [edi+6804]

; 31   : 	Init();

  000f0	8b ce		 mov	 ecx, esi
  000f2	89 86 94 1a 00
	00		 mov	 DWORD PTR [esi+6804], eax
  000f8	e8 00 00 00 00	 call	 ?Init@ioNephilimItem@@IAEXXZ ; ioNephilimItem::Init

; 32   : }

  000fd	8b c6		 mov	 eax, esi
  000ff	e8 00 00 00 00	 call	 __EH_epilog3
  00104	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 54 19 00
	00		 add	 ecx, 6484		; 00001954H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 64 19 00
	00		 add	 ecx, 6500		; 00001964H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b4 19 00
	00		 add	 ecx, 6580		; 000019b4H
  0002d	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$4:
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 04 1a 00
	00		 add	 ecx, 6660		; 00001a04H
  0003b	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$5:
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 54 1a 00
	00		 add	 ecx, 6740		; 00001a54H
  00049	e9 00 00 00 00	 jmp	 ??1?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
__unwindfunclet$??0ioNephilimItem@@QAE@ABV0@@Z$6:
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	81 c1 74 1a 00
	00		 add	 ecx, 6772		; 00001a74H
  00057	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioNephilimItem@@QAE@ABV0@@Z:
  0005d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00061	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00064	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioNephilimItem@@QAE@ABV0@@Z
  00073	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioNephilimItem@@QAE@ABV0@@Z ENDP			; ioNephilimItem::ioNephilimItem
PUBLIC	??1ioNephilimItem@@UAE@XZ			; ioNephilimItem::~ioNephilimItem
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__ehfuncinfo$??1ioNephilimItem@@UAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1ioNephilimItem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioNephilimItem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioNephilimItem@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioNephilimItem@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioNephilimItem@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioNephilimItem@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioNephilimItem@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioNephilimItem@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ioNephilimItem@@UAE@XZ$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ??1ioNephilimItem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioNephilimItem@@UAE@XZ PROC				; ioNephilimItem::~ioNephilimItem, COMDAT
; _this$ = ecx

; 35   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioNephilimItem@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNephilimItem@@6B@

; 36   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e 84 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6788]
  00023	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0002a	ff d7		 call	 edi
  0002c	8d 8e 74 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6772]
  00032	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00036	ff d7		 call	 edi
  00038	8d 8e 54 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6740]
  0003e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@IAEXXZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::_Tidy
  00047	8d 8e 04 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6660]
  0004d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00051	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00056	8d 8e b4 19 00
	00		 lea	 ecx, DWORD PTR [esi+6580]
  0005c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00060	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00065	8d 8e 64 19 00
	00		 lea	 ecx, DWORD PTR [esi+6500]
  0006b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006f	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00074	8d 8e 54 19 00
	00		 lea	 ecx, DWORD PTR [esi+6484]
  0007a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0007e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
  00083	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
  0008e	e8 00 00 00 00	 call	 __EH_epilog3
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioNephilimItem@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??1ioNephilimItem@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 54 19 00
	00		 add	 ecx, 6484		; 00001954H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??1ioNephilimItem@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 64 19 00
	00		 add	 ecx, 6500		; 00001964H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??1ioNephilimItem@@UAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b4 19 00
	00		 add	 ecx, 6580		; 000019b4H
  0002d	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??1ioNephilimItem@@UAE@XZ$4:
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 04 1a 00
	00		 add	 ecx, 6660		; 00001a04H
  0003b	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??1ioNephilimItem@@UAE@XZ$5:
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 54 1a 00
	00		 add	 ecx, 6740		; 00001a54H
  00049	e9 00 00 00 00	 jmp	 ??1?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAE@XZ ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::~vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >
__unwindfunclet$??1ioNephilimItem@@UAE@XZ$6:
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	81 c1 74 1a 00
	00		 add	 ecx, 6772		; 00001a74H
  00057	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioNephilimItem@@UAE@XZ:
  0005d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00061	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00064	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioNephilimItem@@UAE@XZ
  00073	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioNephilimItem@@UAE@XZ ENDP				; ioNephilimItem::~ioNephilimItem
PUBLIC	??_C@_0BH@KLMDJABH@push_target_check_buff?$AA@	; `string'
PUBLIC	??_C@_0BD@KIOMOHLI@special_check_buff?$AA@	; `string'
PUBLIC	??_C@_0M@KHMHHHIL@bomb_attack?$AA@		; `string'
PUBLIC	??_C@_0M@KHPEKDGC@push_attack?$AA@		; `string'
PUBLIC	??_C@_0O@MIFKMNNO@charge_attack?$AA@		; `string'
PUBLIC	_rkLoader$GSCopy$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:PROC ; LoadAttackAttribute
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LoadProperty@ioWeaponItem@@UAEXAAVioINILoader@@@Z:PROC ; ioWeaponItem::LoadProperty
;	COMDAT ??_C@_0BH@KLMDJABH@push_target_check_buff?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0BH@KLMDJABH@push_target_check_buff?$AA@ DB 'push_target_check_buff'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KIOMOHLI@special_check_buff?$AA@
CONST	SEGMENT
??_C@_0BD@KIOMOHLI@special_check_buff?$AA@ DB 'special_check_buff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KHMHHHIL@bomb_attack?$AA@
CONST	SEGMENT
??_C@_0M@KHMHHHIL@bomb_attack?$AA@ DB 'bomb_attack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KHPEKDGC@push_attack?$AA@
CONST	SEGMENT
??_C@_0M@KHPEKDGC@push_attack?$AA@ DB 'push_attack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MIFKMNNO@charge_attack?$AA@
CONST	SEGMENT
??_C@_0O@MIFKMNNO@charge_attack?$AA@ DB 'charge_attack', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z$1
__ehfuncinfo$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionephilimitem.cpp
xdata$x	ENDS
;	COMDAT ?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv7507 = -656						; size = 4
tv4090 = -656						; size = 4
tv9450 = -652						; size = 4
_nPreCount$ = -652					; size = 4
_rkLoader$GSCopy$ = -648				; size = 4
_szKey$ = -644						; size = 260
_szBuf$ = -384						; size = 260
___encStr$549067 = -124					; size = 34
__k$562248 = -112					; size = 20
___encStr$549219 = -84					; size = 30
__k$562100 = -76					; size = 20
__k$561556 = -72					; size = 16
___encStr$548915 = -68					; size = 14
$T561401 = -68						; size = 16
__k$561528 = -64					; size = 10
__k$561975 = -48					; size = 22
__k$561850 = -48					; size = 24
__k$561725 = -48					; size = 23
___encStr$548747 = -48					; size = 25
_sAreaWeaponInfo$548911 = -44				; size = 24
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z PROC ; ioNephilimItem::LoadProperty, COMDAT
; _this$ = ecx

; 41   : {

  00000	68 84 02 00 00	 push	 644			; 00000284H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 42   : 	ioWeaponItem::LoadProperty( rkLoader );

  00012	57		 push	 edi
  00013	8b f1		 mov	 esi, ecx

; 69   : 		wsprintf_e( szKey, "area_weapon%d_bomb_weapon_num", i+1 );

  00015	89 bd 78 fd ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  0001b	e8 00 00 00 00	 call	 ?LoadProperty@ioWeaponItem@@UAEXAAVioINILoader@@@Z ; ioWeaponItem::LoadProperty
  00020	6a 02		 push	 2
  00022	c7 45 c0 80 8d
	93 b5		 mov	 DWORD PTR __k$561528[ebp], -1248621184 ; b5938d80H
  00029	c7 45 c4 8e 83
	86 88		 mov	 DWORD PTR __k$561528[ebp+4], -2004450418 ; 8886838eH
  00030	8d 45 c0	 lea	 eax, DWORD PTR __k$561528[ebp]
  00033	33 db		 xor	 ebx, ebx
  00035	66 c7 45 c8 82
	00		 mov	 WORD PTR __k$561528[ebp+8], 130 ; 00000082H
  0003b	59		 pop	 ecx
$LL510@LoadProper:

; 43   : 
; 44   : 	char szBuf[MAX_PATH], szKey[MAX_PATH];
; 45   : 	
; 46   : 	int nPreCount = rkLoader.LoadInt_e( "max_combo", 0 );

  0003c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00042	83 c0 04	 add	 eax, 4
  00045	49		 dec	 ecx
  00046	75 f4		 jne	 SHORT $LL510@LoadProper
  00048	80 75 c8 ed	 xor	 BYTE PTR __k$561528[ebp+8], -19 ; ffffffedH
  0004c	53		 push	 ebx
  0004d	8d 45 c0	 lea	 eax, DWORD PTR __k$561528[ebp]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 47   : 	for( int i=0; i<nPreCount; ++i )

  00059	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__wsprintfA
  0005f	33 c9		 xor	 ecx, ecx
  00061	89 85 74 fd ff
	ff		 mov	 DWORD PTR _nPreCount$[ebp], eax
  00067	3b c3		 cmp	 eax, ebx
  00069	0f 8e b8 00 00
	00		 jle	 $LN400@LoadProper
$LL402@LoadProper:

; 43   : 
; 44   : 	char szBuf[MAX_PATH], szKey[MAX_PATH];
; 45   : 	
; 46   : 	int nPreCount = rkLoader.LoadInt_e( "max_combo", 0 );

  0006f	6a 06		 push	 6

; 48   : 	{
; 49   : 		wsprintf_e( szBuf, "attack_ready_animation%d", i+1 );

  00071	c7 45 d0 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$548747[ebp], -1952474996 ; 8b9f988cH
  00078	c7 45 d4 8e 87
	b4 98		 mov	 DWORD PTR ___encStr$548747[ebp+4], -1732999282 ; 98b4878eH
  0007f	c7 45 d8 88 8d
	8f 93		 mov	 DWORD PTR ___encStr$548747[ebp+8], -1819308664 ; 938f8d88H
  00086	c7 45 dc b2 8d
	85 83		 mov	 DWORD PTR ___encStr$548747[ebp+12], -2088399438 ; 83858db2H
  0008d	c7 45 e0 80 8d
	9f 83		 mov	 DWORD PTR ___encStr$548747[ebp+16], -2086695552 ; 839f8d80H
  00094	c7 45 e4 82 82
	ce 8e		 mov	 DWORD PTR ___encStr$548747[ebp+20], -1899068798 ; 8ece8282H
  0009b	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$548747[ebp]
  0009e	88 5d e8	 mov	 BYTE PTR ___encStr$548747[ebp+24], bl
  000a1	5a		 pop	 edx
$LL518@LoadProper:
  000a2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000a8	83 c0 04	 add	 eax, 4
  000ab	4a		 dec	 edx
  000ac	75 f4		 jne	 SHORT $LL518@LoadProper
  000ae	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000b1	50		 push	 eax
  000b2	89 85 70 fd ff
	ff		 mov	 DWORD PTR tv7507[ebp], eax
  000b8	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$548747[ebp]
  000bb	50		 push	 eax
  000bc	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000c2	50		 push	 eax
  000c3	ff d7		 call	 edi

; 50   : 		rkLoader.LoadString( szBuf, "", szBuf, MAX_PATH );

  000c5	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	68 04 01 00 00	 push	 260			; 00000104H
  000d3	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000d9	50		 push	 eax
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000df	50		 push	 eax
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 51   : 		m_szPreGatherAniList.push_back( szBuf );

  000e6	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000ec	50		 push	 eax
  000ed	8d 4d bc	 lea	 ecx, DWORD PTR $T561401[ebp]
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000f6	8d 45 bc	 lea	 eax, DWORD PTR $T561401[ebp]
  000f9	50		 push	 eax
  000fa	8d 8e 54 19 00
	00		 lea	 ecx, DWORD PTR [esi+6484]
  00100	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00103	e8 00 00 00 00	 call	 ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
  00108	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0010c	8d 4d bc	 lea	 ecx, DWORD PTR $T561401[ebp]
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00115	8b 8d 70 fd ff
	ff		 mov	 ecx, DWORD PTR tv7507[ebp]
  0011b	3b 8d 74 fd ff
	ff		 cmp	 ecx, DWORD PTR _nPreCount$[ebp]
  00121	0f 8c 48 ff ff
	ff		 jl	 $LL402@LoadProper
$LN400@LoadProper:

; 52   : 	}
; 53   : 	
; 54   : 	LoadAttackAttribute( "charge_attack", m_ChargeAttackAttribute, rkLoader );	

  00127	ff b5 78 fd ff
	ff		 push	 DWORD PTR _rkLoader$GSCopy$[ebp]
  0012d	8d 86 64 19 00
	00		 lea	 eax, DWORD PTR [esi+6500]
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MIFKMNNO@charge_attack?$AA@
  00139	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute

; 55   : 	LoadAttackAttribute( "push_attack", m_PushAttackAttribute, rkLoader );

  0013e	ff b5 78 fd ff
	ff		 push	 DWORD PTR _rkLoader$GSCopy$[ebp]
  00144	8d 86 b4 19 00
	00		 lea	 eax, DWORD PTR [esi+6580]
  0014a	50		 push	 eax
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KHPEKDGC@push_attack?$AA@
  00150	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute

; 56   : 	LoadAttackAttribute( "bomb_attack", m_BombAttackAttribute, rkLoader );

  00155	ff b5 78 fd ff
	ff		 push	 DWORD PTR _rkLoader$GSCopy$[ebp]
  0015b	8d 86 04 1a 00
	00		 lea	 eax, DWORD PTR [esi+6660]
  00161	50		 push	 eax
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KHMHHHIL@bomb_attack?$AA@
  00167	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  0016c	83 c4 24	 add	 esp, 36			; 00000024H
  0016f	6a 03		 push	 3

; 57   : 
; 58   : 	int nSize = rkLoader.LoadInt_e( "area_weapon_cnt", 0 );

  00171	c7 45 b8 8c 9e
	8e 8b		 mov	 DWORD PTR __k$561556[ebp], -1953587572 ; 8b8e9e8cH
  00178	c7 45 bc b2 9b
	8e 8b		 mov	 DWORD PTR __k$561556[ebp+4], -1953588302 ; 8b8e9bb2H
  0017f	c7 45 c0 9d 83
	85 b5		 mov	 DWORD PTR __k$561556[ebp+8], -1249541219 ; b585839dH
  00186	8d 45 b8	 lea	 eax, DWORD PTR __k$561556[ebp]
  00189	c7 45 c4 8e 82
	9f 00		 mov	 DWORD PTR __k$561556[ebp+12], 10453646 ; 009f828eH
  00190	59		 pop	 ecx
$LL624@LoadProper:
  00191	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00197	83 c0 04	 add	 eax, 4
  0019a	49		 dec	 ecx
  0019b	75 f4		 jne	 SHORT $LL624@LoadProper
  0019d	6a 0c		 push	 12			; 0000000cH
  0019f	58		 pop	 eax
$LL621@LoadProper:
  001a0	8b c8		 mov	 ecx, eax
  001a2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001a8	79 05		 jns	 SHORT $LN1237@LoadProper
  001aa	49		 dec	 ecx
  001ab	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001ae	41		 inc	 ecx
$LN1237@LoadProper:
  001af	b2 ed		 mov	 dl, -19			; ffffffedH
  001b1	2a d1		 sub	 dl, cl
  001b3	30 54 05 b8	 xor	 BYTE PTR __k$561556[ebp+eax], dl
  001b7	40		 inc	 eax
  001b8	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001bb	7c e3		 jl	 SHORT $LL621@LoadProper
  001bd	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001c3	53		 push	 ebx
  001c4	8d 45 b8	 lea	 eax, DWORD PTR __k$561556[ebp]
  001c7	50		 push	 eax
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 59   : 	for( int i=0; i<nSize; ++i )

  001ce	3b c3		 cmp	 eax, ebx
  001d0	0f 8e c4 01 00
	00		 jle	 $LN298@LoadProper

; 57   : 
; 58   : 	int nSize = rkLoader.LoadInt_e( "area_weapon_cnt", 0 );

  001d6	c7 85 74 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv9450[ebp], 1
  001e0	89 85 70 fd ff
	ff		 mov	 DWORD PTR tv4090[ebp], eax
$LL300@LoadProper:

; 60   : 	{
; 61   : 		AreaWeaponInfo sAreaWeaponInfo;

  001e6	8d 4d d4	 lea	 ecx, DWORD PTR _sAreaWeaponInfo$548911[ebp]
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  001ef	6a 03		 push	 3
  001f1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 62   : 
; 63   : 		wsprintf_e( szKey, "area_weapon%d", i+1 );

  001f8	c7 45 bc 8c 9e
	8e 8b		 mov	 DWORD PTR ___encStr$548915[ebp], -1953587572 ; 8b8e9e8cH
  001ff	c7 45 c0 b2 9b
	8e 8b		 mov	 DWORD PTR ___encStr$548915[ebp+4], -1953588302 ; 8b8e9bb2H
  00206	c7 45 c4 9d 83
	85 cf		 mov	 DWORD PTR ___encStr$548915[ebp+8], -813333603 ; cf85839dH
  0020d	8d 45 bc	 lea	 eax, DWORD PTR ___encStr$548915[ebp]
  00210	66 c7 45 c8 89
	00		 mov	 WORD PTR ___encStr$548915[ebp+12], 137 ; 00000089H
  00216	59		 pop	 ecx
$LL635@LoadProper:
  00217	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021d	83 c0 04	 add	 eax, 4
  00220	49		 dec	 ecx
  00221	75 f4		 jne	 SHORT $LL635@LoadProper
  00223	ff b5 74 fd ff
	ff		 push	 DWORD PTR tv9450[ebp]
  00229	80 75 c8 ed	 xor	 BYTE PTR ___encStr$548915[ebp+12], -19 ; ffffffedH
  0022d	8d 45 bc	 lea	 eax, DWORD PTR ___encStr$548915[ebp]
  00230	50		 push	 eax
  00231	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00237	50		 push	 eax
  00238	ff d7		 call	 edi

; 64   : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  0023a	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00240	83 c4 0c	 add	 esp, 12			; 0000000cH
  00243	68 04 01 00 00	 push	 260			; 00000104H
  00248	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0024e	50		 push	 eax
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00254	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0025a	50		 push	 eax
  0025b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 65   : 		sAreaWeaponInfo.m_szAreaWeapon = szBuf;

  00261	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00267	50		 push	 eax
  00268	8d 4d d4	 lea	 ecx, DWORD PTR _sAreaWeaponInfo$548911[ebp]
  0026b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00271	6a 08		 push	 8

; 66   : 
; 67   : 		wsprintf_e( szKey, "area_weapon%d_teleport_weapon_num", i+1 );

  00273	c7 45 84 8c 9e
	8e 8b		 mov	 DWORD PTR ___encStr$549067[ebp], -1953587572 ; 8b8e9e8cH
  0027a	c7 45 88 b2 9b
	8e 8b		 mov	 DWORD PTR ___encStr$549067[ebp+4], -1953588302 ; 8b8e9bb2H
  00281	c7 45 8c 9d 83
	85 cf		 mov	 DWORD PTR ___encStr$549067[ebp+8], -813333603 ; cf85839dH
  00288	c7 45 90 89 b3
	9f 8f		 mov	 DWORD PTR ___encStr$549067[ebp+12], -1885359223 ; 8f9fb389H
  0028f	c7 45 94 81 89
	9b 85		 mov	 DWORD PTR ___encStr$549067[ebp+16], -2053404287 ; 859b8981H
  00296	c7 45 98 9f 98
	b4 9d		 mov	 DWORD PTR ___encStr$549067[ebp+20], -1649108833 ; 9db4989fH
  0029d	c7 45 9c 88 8d
	9b 85		 mov	 DWORD PTR ___encStr$549067[ebp+24], -2053403256 ; 859b8d88H
  002a4	c7 45 a0 83 b3
	85 9f		 mov	 DWORD PTR ___encStr$549067[ebp+28], -1618627709 ; 9f85b383H
  002ab	8d 45 84	 lea	 eax, DWORD PTR ___encStr$549067[ebp]
  002ae	66 c7 45 a4 80
	00		 mov	 WORD PTR ___encStr$549067[ebp+32], 128 ; 00000080H
  002b4	59		 pop	 ecx
$LL643@LoadProper:
  002b5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002bb	83 c0 04	 add	 eax, 4
  002be	49		 dec	 ecx
  002bf	75 f4		 jne	 SHORT $LL643@LoadProper
  002c1	ff b5 74 fd ff
	ff		 push	 DWORD PTR tv9450[ebp]
  002c7	80 75 a4 ed	 xor	 BYTE PTR ___encStr$549067[ebp+32], -19 ; ffffffedH
  002cb	8d 45 84	 lea	 eax, DWORD PTR ___encStr$549067[ebp]
  002ce	50		 push	 eax
  002cf	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  002d5	50		 push	 eax
  002d6	ff d7		 call	 edi

; 68   : 		sAreaWeaponInfo.m_nTeleportWeaponNum = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  002d8	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002de	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e1	53		 push	 ebx
  002e2	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  002e8	50		 push	 eax
  002e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  002ef	6a 07		 push	 7
  002f1	89 45 e4	 mov	 DWORD PTR _sAreaWeaponInfo$548911[ebp+16], eax

; 69   : 		wsprintf_e( szKey, "area_weapon%d_bomb_weapon_num", i+1 );

  002f4	c7 45 ac 8c 9e
	8e 8b		 mov	 DWORD PTR ___encStr$549219[ebp], -1953587572 ; 8b8e9e8cH
  002fb	c7 45 b0 b2 9b
	8e 8b		 mov	 DWORD PTR ___encStr$549219[ebp+4], -1953588302 ; 8b8e9bb2H
  00302	c7 45 b4 9d 83
	85 cf		 mov	 DWORD PTR ___encStr$549219[ebp+8], -813333603 ; cf85839dH
  00309	c7 45 b8 89 b3
	89 85		 mov	 DWORD PTR ___encStr$549219[ebp+12], -2054573175 ; 8589b389H
  00310	c7 45 bc 80 8e
	b4 9d		 mov	 DWORD PTR ___encStr$549219[ebp+16], -1649111424 ; 9db48e80H
  00317	c7 45 c0 88 8d
	9b 85		 mov	 DWORD PTR ___encStr$549219[ebp+20], -2053403256 ; 859b8d88H
  0031e	c7 45 c4 83 b3
	85 9f		 mov	 DWORD PTR ___encStr$549219[ebp+24], -1618627709 ; 9f85b383H
  00325	8d 45 ac	 lea	 eax, DWORD PTR ___encStr$549219[ebp]
  00328	66 c7 45 c8 80
	00		 mov	 WORD PTR ___encStr$549219[ebp+28], 128 ; 00000080H
  0032e	59		 pop	 ecx
$LL651@LoadProper:
  0032f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00335	83 c0 04	 add	 eax, 4
  00338	49		 dec	 ecx
  00339	75 f4		 jne	 SHORT $LL651@LoadProper
  0033b	ff b5 74 fd ff
	ff		 push	 DWORD PTR tv9450[ebp]
  00341	80 75 c8 ed	 xor	 BYTE PTR ___encStr$549219[ebp+28], -19 ; ffffffedH
  00345	8d 45 ac	 lea	 eax, DWORD PTR ___encStr$549219[ebp]
  00348	50		 push	 eax
  00349	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0034f	50		 push	 eax
  00350	ff d7		 call	 edi

; 70   : 		sAreaWeaponInfo.m_nBombWeaponNum = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  00352	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00358	83 c4 0c	 add	 esp, 12			; 0000000cH
  0035b	53		 push	 ebx
  0035c	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00362	50		 push	 eax
  00363	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00369	89 45 e8	 mov	 DWORD PTR _sAreaWeaponInfo$548911[ebp+20], eax

; 71   : 
; 72   : 		m_AreaWeaponInfoList.push_back( sAreaWeaponInfo );

  0036c	8d 45 d4	 lea	 eax, DWORD PTR _sAreaWeaponInfo$548911[ebp]
  0036f	50		 push	 eax
  00370	8d 8e 54 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6740]
  00376	e8 00 00 00 00	 call	 ?push_back@?$vector@UAreaWeaponInfo@ioNephilimItem@@V?$allocator@UAreaWeaponInfo@ioNephilimItem@@@std@@@std@@QAEXABUAreaWeaponInfo@ioNephilimItem@@@Z ; std::vector<ioNephilimItem::AreaWeaponInfo,std::allocator<ioNephilimItem::AreaWeaponInfo> >::push_back

; 73   : 	}

  0037b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0037f	8d 4d d4	 lea	 ecx, DWORD PTR _sAreaWeaponInfo$548911[ebp]
  00382	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00388	ff 85 74 fd ff
	ff		 inc	 DWORD PTR tv9450[ebp]
  0038e	ff 8d 70 fd ff
	ff		 dec	 DWORD PTR tv4090[ebp]
  00394	0f 85 4c fe ff
	ff		 jne	 $LL300@LoadProper
$LN298@LoadProper:

; 74   : 
; 75   : 	m_fTeleportHeightOffset = rkLoader.LoadFloat_e( "teleport_height_offset", 0.0f );

  0039a	6a 05		 push	 5
  0039c	c7 45 d0 99 89
	87 8f		 mov	 DWORD PTR __k$561725[ebp], -1886942823 ; 8f878999H
  003a3	c7 45 d4 9d 83
	99 9e		 mov	 DWORD PTR __k$561725[ebp+4], -1634106467 ; 9e99839dH
  003aa	c7 45 d8 b2 84
	8e 83		 mov	 DWORD PTR __k$561725[ebp+8], -2087811918 ; 838e84b2H
  003b1	c7 45 dc 8a 84
	9f b5		 mov	 DWORD PTR __k$561725[ebp+12], -1247837046 ; b59f848aH
  003b8	c7 45 e0 82 8a
	8d 99		 mov	 DWORD PTR __k$561725[ebp+16], -1718777214 ; 998d8a82H
  003bf	66 c7 45 e4 88
	98		 mov	 WORD PTR __k$561725[ebp+20], 39048 ; 00009888H
  003c5	8d 45 d0	 lea	 eax, DWORD PTR __k$561725[ebp]
  003c8	88 5d e6	 mov	 BYTE PTR __k$561725[ebp+22], bl
  003cb	59		 pop	 ecx
$LL760@LoadProper:
  003cc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003d2	83 c0 04	 add	 eax, 4
  003d5	49		 dec	 ecx
  003d6	75 f4		 jne	 SHORT $LL760@LoadProper
  003d8	6a 14		 push	 20			; 00000014H
  003da	5f		 pop	 edi
$LL757@LoadProper:
  003db	8b c7		 mov	 eax, edi
  003dd	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  003e2	79 05		 jns	 SHORT $LN1238@LoadProper
  003e4	48		 dec	 eax
  003e5	83 c8 fc	 or	 eax, -4			; fffffffcH
  003e8	40		 inc	 eax
$LN1238@LoadProper:
  003e9	b1 ed		 mov	 cl, -19			; ffffffedH
  003eb	2a c8		 sub	 cl, al
  003ed	30 4c 3d d0	 xor	 BYTE PTR __k$561725[ebp+edi], cl
  003f1	47		 inc	 edi
  003f2	83 ff 16	 cmp	 edi, 22			; 00000016H
  003f5	7c e4		 jl	 SHORT $LL757@LoadProper
  003f7	0f 57 c0	 xorps	 xmm0, xmm0
  003fa	51		 push	 ecx
  003fb	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00401	8d 45 d0	 lea	 eax, DWORD PTR __k$561725[ebp]
  00404	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00409	50		 push	 eax
  0040a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00410	d9 9e 64 1a 00
	00		 fstp	 DWORD PTR [esi+6756]
  00416	6a 05		 push	 5

; 76   : 	m_fTeleportEndJumpPower = rkLoader.LoadFloat_e( "teleport_end_jump_power", 0.0f );

  00418	c7 45 d0 99 89
	87 8f		 mov	 DWORD PTR __k$561850[ebp], -1886942823 ; 8f878999H
  0041f	c7 45 d4 9d 83
	99 9e		 mov	 DWORD PTR __k$561850[ebp+4], -1634106467 ; 9e99839dH
  00426	c7 45 d8 b2 89
	85 8e		 mov	 DWORD PTR __k$561850[ebp+8], -1903851086 ; 8e8589b2H
  0042d	c7 45 dc b2 86
	9e 87		 mov	 DWORD PTR __k$561850[ebp+12], -2019653966 ; 879e86b2H
  00434	c7 45 e0 9d b3
	9b 85		 mov	 DWORD PTR __k$561850[ebp+16], -2053393507 ; 859bb39dH
  0043b	8d 45 d0	 lea	 eax, DWORD PTR __k$561850[ebp]
  0043e	c7 45 e4 9a 89
	99 00		 mov	 DWORD PTR __k$561850[ebp+20], 10062234 ; 0099899aH
  00445	59		 pop	 ecx
$LL866@LoadProper:
  00446	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0044c	83 c0 04	 add	 eax, 4
  0044f	49		 dec	 ecx
  00450	75 f4		 jne	 SHORT $LL866@LoadProper
  00452	6a 14		 push	 20			; 00000014H
  00454	5f		 pop	 edi
$LL863@LoadProper:
  00455	8b c7		 mov	 eax, edi
  00457	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0045c	79 05		 jns	 SHORT $LN1239@LoadProper
  0045e	48		 dec	 eax
  0045f	83 c8 fc	 or	 eax, -4			; fffffffcH
  00462	40		 inc	 eax
$LN1239@LoadProper:
  00463	b1 ed		 mov	 cl, -19			; ffffffedH
  00465	2a c8		 sub	 cl, al
  00467	30 4c 3d d0	 xor	 BYTE PTR __k$561850[ebp+edi], cl
  0046b	47		 inc	 edi
  0046c	83 ff 17	 cmp	 edi, 23			; 00000017H
  0046f	7c e4		 jl	 SHORT $LL863@LoadProper
  00471	0f 57 c0	 xorps	 xmm0, xmm0
  00474	51		 push	 ecx
  00475	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0047b	8d 45 d0	 lea	 eax, DWORD PTR __k$561850[ebp]
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	50		 push	 eax
  00484	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0048a	d9 9e 68 1a 00
	00		 fstp	 DWORD PTR [esi+6760]
  00490	6a 05		 push	 5

; 77   : 	m_fBombStartJumpPower = rkLoader.LoadFloat_e( "bomb_start_jump_power", 0.0f );

  00492	c7 45 d0 8f 83
	86 88		 mov	 DWORD PTR __k$561975[ebp], -2004450417 ; 8886838fH
  00499	c7 45 d4 b2 9f
	9f 8b		 mov	 DWORD PTR __k$561975[ebp+4], -1952473166 ; 8b9f9fb2H
  004a0	c7 45 d8 9f 98
	b4 80		 mov	 DWORD PTR __k$561975[ebp+8], -2135648097 ; 80b4989fH
  004a7	c7 45 dc 98 81
	9b b5		 mov	 DWORD PTR __k$561975[ebp+12], -1248099944 ; b59b8198H
  004ae	c7 45 e0 9d 83
	9c 8f		 mov	 DWORD PTR __k$561975[ebp+16], -1885568099 ; 8f9c839dH
  004b5	8d 45 d0	 lea	 eax, DWORD PTR __k$561975[ebp]
  004b8	66 c7 45 e4 9f
	00		 mov	 WORD PTR __k$561975[ebp+20], 159 ; 0000009fH
  004be	59		 pop	 ecx
$LL972@LoadProper:
  004bf	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004c5	83 c0 04	 add	 eax, 4
  004c8	49		 dec	 ecx
  004c9	75 f4		 jne	 SHORT $LL972@LoadProper
  004cb	0f 57 c0	 xorps	 xmm0, xmm0
  004ce	80 75 e4 ed	 xor	 BYTE PTR __k$561975[ebp+20], -19 ; ffffffedH
  004d2	51		 push	 ecx
  004d3	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004d9	8d 45 d0	 lea	 eax, DWORD PTR __k$561975[ebp]
  004dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e1	50		 push	 eax
  004e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004e8	d9 9e 6c 1a 00
	00		 fstp	 DWORD PTR [esi+6764]
  004ee	6a 04		 push	 4

; 78   : 	m_fBombEndJumpPower = rkLoader.LoadFloat_e( "bomb_end_jump_power", 0.0f );

  004f0	c7 45 b4 8f 83
	86 88		 mov	 DWORD PTR __k$562100[ebp], -2004450417 ; 8886838fH
  004f7	c7 45 b8 b2 89
	85 8e		 mov	 DWORD PTR __k$562100[ebp+4], -1903851086 ; 8e8589b2H
  004fe	c7 45 bc b2 86
	9e 87		 mov	 DWORD PTR __k$562100[ebp+8], -2019653966 ; 879e86b2H
  00505	c7 45 c0 9d b3
	9b 85		 mov	 DWORD PTR __k$562100[ebp+12], -2053393507 ; 859bb39dH
  0050c	8d 45 b4	 lea	 eax, DWORD PTR __k$562100[ebp]
  0050f	c7 45 c4 9a 89
	99 00		 mov	 DWORD PTR __k$562100[ebp+16], 10062234 ; 0099899aH
  00516	59		 pop	 ecx
$LL1078@LoadProper:
  00517	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0051d	83 c0 04	 add	 eax, 4
  00520	49		 dec	 ecx
  00521	75 f4		 jne	 SHORT $LL1078@LoadProper
  00523	6a 10		 push	 16			; 00000010H
  00525	5f		 pop	 edi
$LL1075@LoadProper:
  00526	8b c7		 mov	 eax, edi
  00528	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0052d	79 05		 jns	 SHORT $LN1240@LoadProper
  0052f	48		 dec	 eax
  00530	83 c8 fc	 or	 eax, -4			; fffffffcH
  00533	40		 inc	 eax
$LN1240@LoadProper:
  00534	b1 ed		 mov	 cl, -19			; ffffffedH
  00536	2a c8		 sub	 cl, al
  00538	30 4c 3d b4	 xor	 BYTE PTR __k$562100[ebp+edi], cl
  0053c	47		 inc	 edi
  0053d	83 ff 13	 cmp	 edi, 19			; 00000013H
  00540	7c e4		 jl	 SHORT $LL1075@LoadProper
  00542	0f 57 c0	 xorps	 xmm0, xmm0
  00545	51		 push	 ecx
  00546	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0054c	8d 45 b4	 lea	 eax, DWORD PTR __k$562100[ebp]
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	50		 push	 eax
  00555	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0055b	d9 9e 70 1a 00
	00		 fstp	 DWORD PTR [esi+6768]

; 79   : 
; 80   : 	rkLoader.LoadString( "special_check_buff", "", szBuf, MAX_PATH );

  00561	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00567	68 04 01 00 00	 push	 260			; 00000104H
  0056c	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00572	50		 push	 eax
  00573	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00578	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KIOMOHLI@special_check_buff?$AA@
  0057d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 81   : 	m_szSpecialCheckBuff = szBuf;

  00583	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00589	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0058f	50		 push	 eax
  00590	8d 8e 74 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6772]
  00596	ff d7		 call	 edi

; 82   : 
; 83   : 	rkLoader.LoadString( "push_target_check_buff", "", szBuf, MAX_PATH );

  00598	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0059e	68 04 01 00 00	 push	 260			; 00000104H
  005a3	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  005a9	50		 push	 eax
  005aa	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  005af	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KLMDJABH@push_target_check_buff?$AA@
  005b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 84   : 	m_szTargetCheckBuff = szBuf;

  005ba	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  005c0	50		 push	 eax
  005c1	8d 8e 84 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6788]
  005c7	ff d7		 call	 edi
  005c9	6a 04		 push	 4

; 85   : 
; 86   : 	m_nMaxCreateAreaIdx = rkLoader.LoadInt_e( "max_create_area_idx", 0 );

  005cb	c7 45 90 80 8d
	93 b5		 mov	 DWORD PTR __k$562248[ebp], -1248621184 ; b5938d80H
  005d2	c7 45 94 8e 9e
	8e 8b		 mov	 DWORD PTR __k$562248[ebp+4], -1953587570 ; 8b8e9e8eH
  005d9	c7 45 98 99 89
	b4 8b		 mov	 DWORD PTR __k$562248[ebp+8], -1951102567 ; 8bb48999H
  005e0	c7 45 9c 9f 89
	8a b5		 mov	 DWORD PTR __k$562248[ebp+12], -1249212001 ; b58a899fH
  005e7	8d 45 90	 lea	 eax, DWORD PTR __k$562248[ebp]
  005ea	c7 45 a0 84 88
	93 00		 mov	 DWORD PTR __k$562248[ebp+16], 9668740 ; 00938884H
  005f1	59		 pop	 ecx
$LL1184@LoadProper:
  005f2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  005f8	83 c0 04	 add	 eax, 4
  005fb	49		 dec	 ecx
  005fc	75 f4		 jne	 SHORT $LL1184@LoadProper
  005fe	6a 10		 push	 16			; 00000010H
  00600	5f		 pop	 edi
$LL1181@LoadProper:
  00601	8b c7		 mov	 eax, edi
  00603	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00608	79 05		 jns	 SHORT $LN1241@LoadProper
  0060a	48		 dec	 eax
  0060b	83 c8 fc	 or	 eax, -4			; fffffffcH
  0060e	40		 inc	 eax
$LN1241@LoadProper:
  0060f	b1 ed		 mov	 cl, -19			; ffffffedH
  00611	2a c8		 sub	 cl, al
  00613	30 4c 3d 90	 xor	 BYTE PTR __k$562248[ebp+edi], cl
  00617	47		 inc	 edi
  00618	83 ff 13	 cmp	 edi, 19			; 00000013H
  0061b	7c e4		 jl	 SHORT $LL1181@LoadProper
  0061d	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00623	53		 push	 ebx
  00624	8d 45 90	 lea	 eax, DWORD PTR __k$562248[ebp]
  00627	50		 push	 eax
  00628	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0062e	89 86 94 1a 00
	00		 mov	 DWORD PTR [esi+6804], eax

; 87   : }

  00634	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00639	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR $T561401[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z$1:
  00009	8d 4d d4	 lea	 ecx, DWORD PTR _sAreaWeaponInfo$548911[ebp]
  0000c	e9 00 00 00 00	 jmp	 ??1AreaWeaponInfo@ioNephilimItem@@QAE@XZ
__ehhandler$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 8a 6c fd ff
	ff		 mov	 ecx, DWORD PTR [edx-660]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadProperty@ioNephilimItem@@UAEXAAVioINILoader@@@Z ENDP ; ioNephilimItem::LoadProperty
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ$0
__ehfuncinfo$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioNephilimItem@@UAEPAVioItem@@XZ
_TEXT	SEGMENT
$T562400 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioNephilimItem@@UAEPAVioItem@@XZ PROC		; ioNephilimItem::Clone, COMDAT
; _this$ = ecx

; 90   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 91   : 	return new ioNephilimItem( *this );

  0000e	68 b0 1a 00 00	 push	 6832			; 00001ab0H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T562400[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioNephilimItem@@QAE@ABV0@@Z ; ioNephilimItem::ioNephilimItem
$LN3@Clone:

; 92   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T562400[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioNephilimItem@@UAEPAVioItem@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioNephilimItem@@UAEPAVioItem@@XZ ENDP		; ioNephilimItem::Clone
PUBLIC	?ProcessSpecialState@ioNephilimItem@@QAEXPAVioBaseChar@@@Z ; ioNephilimItem::ProcessSpecialState
EXTRN	?SetJumpPower@ioBaseChar@@QAEXM@Z:PROC		; ioBaseChar::SetJumpPower
EXTRN	?SetSKillEndJumpState@ioBaseChar@@QAEXM_N0000@Z:PROC ; ioBaseChar::SetSKillEndJumpState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessSpecialState@ioNephilimItem@@QAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pAreaWeapon$549890 = -4				; size = 4
_value$562454 = 8					; size = 4
_value$562444 = 8					; size = 4
_i$549885 = 8						; size = 4
_dwCurTime$ = 8						; size = 4
_pOwner$ = 8						; size = 4
?ProcessSpecialState@ioNephilimItem@@QAEXPAVioBaseChar@@@Z PROC ; ioNephilimItem::ProcessSpecialState, COMDAT
; _this$ = ecx

; 670  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 671  : 	if ( !pOwner )

  00006	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	85 ff		 test	 edi, edi
  0000d	0f 84 f8 01 00
	00		 je	 $LN12@ProcessSpe

; 672  : 		return;
; 673  : 	
; 674  : 	DWORD dwCurTime = FRAMEGETTIME();

  00013	53		 push	 ebx
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001a	ff d3		 call	 ebx
  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00024	89 45 08	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 675  : 
; 676  : 	switch( m_SpecialState )

  00027	8b 86 9c 1a 00
	00		 mov	 eax, DWORD PTR [esi+6812]
  0002d	33 c9		 xor	 ecx, ecx
  0002f	2b c1		 sub	 eax, ecx
  00031	0f 84 78 01 00
	00		 je	 $LN15@ProcessSpe
  00037	48		 dec	 eax
  00038	0f 84 4a 01 00
	00		 je	 $LN11@ProcessSpe
  0003e	48		 dec	 eax
  0003f	74 60		 je	 SHORT $LN9@ProcessSpe
  00041	48		 dec	 eax
  00042	0f 85 c2 01 00
	00		 jne	 $LN46@ProcessSpe

; 725  : 	case SS_TELEPORT:
; 726  : 		{
; 727  : 			pOwner->SetCurJumpPowerAmt( 0.0f );

  00048	0f 57 c0	 xorps	 xmm0, xmm0

; 728  : 			pOwner->SetForcePowerAmt( 0.0f );

  0004b	8d 45 08	 lea	 eax, DWORD PTR _value$562444[ebp]
  0004e	50		 push	 eax
  0004f	8d 8f 88 0b 00
	00		 lea	 ecx, DWORD PTR [edi+2952]
  00055	f3 0f 11 87 90
	0e 00 00	 movss	 DWORD PTR [edi+3728], xmm0
  0005d	f3 0f 11 45 08	 movss	 DWORD PTR _value$562444[ebp], xmm0
  00062	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 729  : 			pOwner->SetGravityAmt( 0.0f );

  00067	0f 57 c0	 xorps	 xmm0, xmm0
  0006a	8d 45 08	 lea	 eax, DWORD PTR _value$562454[ebp]
  0006d	50		 push	 eax
  0006e	8d 8f e8 0b 00
	00		 lea	 ecx, DWORD PTR [edi+3048]
  00074	f3 0f 11 45 08	 movss	 DWORD PTR _value$562454[ebp], xmm0
  00079	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 730  : 
; 731  : 			pOwner->SetSKillEndJumpState( m_fTeleportEndJumpPower, false, false, true, true );

  0007e	f3 0f 10 86 68
	1a 00 00	 movss	 xmm0, DWORD PTR [esi+6760]
  00086	33 c0		 xor	 eax, eax
  00088	50		 push	 eax
  00089	6a 01		 push	 1
  0008b	6a 01		 push	 1
  0008d	50		 push	 eax
  0008e	50		 push	 eax
  0008f	51		 push	 ecx
  00090	8b cf		 mov	 ecx, edi
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	e8 00 00 00 00	 call	 ?SetSKillEndJumpState@ioBaseChar@@QAEXM_N0000@Z ; ioBaseChar::SetSKillEndJumpState

; 732  : 		}
; 733  : 		break;

  0009c	e9 69 01 00 00	 jmp	 $LN46@ProcessSpe
$LN9@ProcessSpe:

; 701  : 	case SS_BOMB:
; 702  : 		{
; 703  : 			if ( m_dwMotionEndTime < FRAMEGETTIME() )

  000a1	ff d3		 call	 ebx
  000a3	8b c8		 mov	 ecx, eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000ab	39 86 a8 1a 00
	00		 cmp	 DWORD PTR [esi+6824], eax
  000b1	73 1e		 jae	 SHORT $LN45@ProcessSpe

; 704  : 				pOwner->SetSKillEndJumpState( m_fBombEndJumpPower, false, false, true, true );

  000b3	f3 0f 10 86 70
	1a 00 00	 movss	 xmm0, DWORD PTR [esi+6768]
  000bb	33 c0		 xor	 eax, eax
  000bd	50		 push	 eax
  000be	6a 01		 push	 1
  000c0	6a 01		 push	 1
  000c2	50		 push	 eax
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	8b cf		 mov	 ecx, edi
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	e8 00 00 00 00	 call	 ?SetSKillEndJumpState@ioBaseChar@@QAEXM_N0000@Z ; ioBaseChar::SetSKillEndJumpState
$LN45@ProcessSpe:

; 705  : 
; 706  : 			if ( m_dwFireTime > 0 && m_dwFireTime < dwCurTime )

  000d1	8b 86 ac 1a 00
	00		 mov	 eax, DWORD PTR [esi+6828]
  000d7	33 db		 xor	 ebx, ebx
  000d9	3b c3		 cmp	 eax, ebx
  000db	0f 86 29 01 00
	00		 jbe	 $LN46@ProcessSpe
  000e1	3b 45 08	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  000e4	0f 83 20 01 00
	00		 jae	 $LN46@ProcessSpe

; 707  : 			{
; 708  : 				for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  000ea	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  000f0	2b 86 54 1a 00
	00		 sub	 eax, DWORD PTR [esi+6740]
  000f6	6a 18		 push	 24			; 00000018H
  000f8	99		 cdq
  000f9	59		 pop	 ecx
  000fa	f7 f9		 idiv	 ecx
  000fc	89 5d 08	 mov	 DWORD PTR _i$549885[ebp], ebx
  000ff	85 c0		 test	 eax, eax
  00101	0f 8e 03 01 00
	00		 jle	 $LN46@ProcessSpe
$LL6@ProcessSpe:

; 709  : 				{
; 710  : 					ioAreaWeapon *pAreaWeapon = g_AreaWeaponMgr.FindAreaWeaponByName( m_AreaWeaponInfoList[i].m_szAreaWeapon, pOwner->GetCharName() );

  00107	8b 86 54 1a 00
	00		 mov	 eax, DWORD PTR [esi+6740]
  0010d	8d 8f d4 02 00
	00		 lea	 ecx, DWORD PTR [edi+724]
  00113	03 c3		 add	 eax, ebx
  00115	51		 push	 ecx
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  0011c	8b c8		 mov	 ecx, eax
  0011e	e8 00 00 00 00	 call	 ?FindAreaWeaponByName@ioAreaWeaponManager@@QAEPAVioAreaWeapon@@ABVioHashString@@0@Z ; ioAreaWeaponManager::FindAreaWeaponByName
  00123	89 45 fc	 mov	 DWORD PTR _pAreaWeapon$549890[ebp], eax

; 711  : 					if ( !pAreaWeapon )

  00126	85 c0		 test	 eax, eax
  00128	74 3c		 je	 SHORT $LN5@ProcessSpe

; 712  : 						continue;
; 713  : 					
; 714  : 					if ( m_dwFireTime > 0 && m_AreaWeaponInfoList[i].m_nBombWeaponNum != NO_WEAPON_ATTRIBUTE )

  0012a	83 be ac 1a 00
	00 00		 cmp	 DWORD PTR [esi+6828], 0
  00131	76 21		 jbe	 SHORT $LN2@ProcessSpe
  00133	8b 86 54 1a 00
	00		 mov	 eax, DWORD PTR [esi+6740]
  00139	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
  0013d	85 c0		 test	 eax, eax
  0013f	74 13		 je	 SHORT $LN2@ProcessSpe

; 715  : 					{
; 716  : 						CreateAreaAttachWeapon( pOwner, pAreaWeapon, m_AreaWeaponInfoList[i].m_nBombWeaponNum );

  00141	50		 push	 eax
  00142	ff 75 fc	 push	 DWORD PTR _pAreaWeapon$549890[ebp]
  00145	8b ce		 mov	 ecx, esi
  00147	57		 push	 edi
  00148	e8 00 00 00 00	 call	 ?CreateAreaAttachWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@PAVioAreaWeapon@@H@Z ; ioNephilimItem::CreateAreaAttachWeapon

; 717  : 						m_dwFireTime = 0;

  0014d	83 a6 ac 1a 00
	00 00		 and	 DWORD PTR [esi+6828], 0
$LN2@ProcessSpe:

; 718  : 					}
; 719  : 
; 720  : 					g_AreaWeaponMgr.DestroyAreaWeapon( pAreaWeapon->GetAreaWeaponIndex() );

  00154	8b 45 fc	 mov	 eax, DWORD PTR _pAreaWeapon$549890[ebp]
  00157	ff 70 14	 push	 DWORD PTR [eax+20]
  0015a	e8 00 00 00 00	 call	 ?GetSingleton@ioAreaWeaponManager@@SAAAV1@XZ ; ioAreaWeaponManager::GetSingleton
  0015f	8b c8		 mov	 ecx, eax
  00161	e8 00 00 00 00	 call	 ?DestroyAreaWeapon@ioAreaWeaponManager@@QAEXK@Z ; ioAreaWeaponManager::DestroyAreaWeapon
$LN5@ProcessSpe:

; 707  : 			{
; 708  : 				for ( int i=0; i<(int)m_AreaWeaponInfoList.size(); i++ )

  00166	8b 86 58 1a 00
	00		 mov	 eax, DWORD PTR [esi+6744]
  0016c	2b 86 54 1a 00
	00		 sub	 eax, DWORD PTR [esi+6740]
  00172	6a 18		 push	 24			; 00000018H
  00174	99		 cdq
  00175	59		 pop	 ecx
  00176	f7 f9		 idiv	 ecx
  00178	ff 45 08	 inc	 DWORD PTR _i$549885[ebp]
  0017b	83 c3 18	 add	 ebx, 24			; 00000018H
  0017e	39 45 08	 cmp	 DWORD PTR _i$549885[ebp], eax
  00181	7c 84		 jl	 SHORT $LL6@ProcessSpe

; 721  : 				}
; 722  : 			}
; 723  : 		}
; 724  : 		break;

  00183	e9 82 00 00 00	 jmp	 $LN46@ProcessSpe
$LN11@ProcessSpe:

; 690  : 			}
; 691  : 		}
; 692  : 		break;
; 693  : 	case SS_PUSH:
; 694  : 		{
; 695  : 			if ( m_dwMotionEndTime < FRAMEGETTIME() )

  00188	ff d3		 call	 ebx
  0018a	8b c8		 mov	 ecx, eax
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00192	39 86 a8 1a 00
	00		 cmp	 DWORD PTR [esi+6824], eax
  00198	73 0b		 jae	 SHORT $LN10@ProcessSpe

; 696  : 				pOwner->SetState( CS_DELAY );

  0019a	6a 01		 push	 1
  0019c	6a 00		 push	 0
  0019e	8b cf		 mov	 ecx, edi
  001a0	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN10@ProcessSpe:

; 697  : 
; 698  : 			PushCreateWeapon( pOwner );

  001a5	57		 push	 edi
  001a6	8b ce		 mov	 ecx, esi
  001a8	e8 00 00 00 00	 call	 ?PushCreateWeapon@ioNephilimItem@@IAEXPAVioBaseChar@@@Z ; ioNephilimItem::PushCreateWeapon

; 699  : 		}
; 700  : 		break;

  001ad	eb 5b		 jmp	 SHORT $LN46@ProcessSpe
$LN15@ProcessSpe:

; 677  : 	{
; 678  : 	case SS_NONE:
; 679  : 		{
; 680  : 			if ( m_ChargeState == CS_PUSH_ATTACK )

  001af	8b 86 98 1a 00
	00		 mov	 eax, DWORD PTR [esi+6808]
  001b5	83 f8 04	 cmp	 eax, 4
  001b8	75 1c		 jne	 SHORT $LN14@ProcessSpe

; 681  : 			{
; 682  : 				ChangeAniState( pOwner, m_PushAttackAttribute, false );

  001ba	51		 push	 ecx
  001bb	8d 86 b4 19 00
	00		 lea	 eax, DWORD PTR [esi+6580]
  001c1	50		 push	 eax
  001c2	57		 push	 edi
  001c3	8b ce		 mov	 ecx, esi
  001c5	e8 00 00 00 00	 call	 ?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z ; ioNephilimItem::ChangeAniState

; 683  : 				m_SpecialState = SS_PUSH;

  001ca	c7 86 9c 1a 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+6812], 1
  001d4	eb 34		 jmp	 SHORT $LN46@ProcessSpe
$LN14@ProcessSpe:

; 684  : 			}
; 685  : 			else if ( m_ChargeState == CS_BOMB_ATTACK )

  001d6	83 f8 05	 cmp	 eax, 5
  001d9	75 2f		 jne	 SHORT $LN46@ProcessSpe

; 686  : 			{
; 687  : 				ChangeAniState( pOwner, m_BombAttackAttribute, false );

  001db	51		 push	 ecx
  001dc	8d 86 04 1a 00
	00		 lea	 eax, DWORD PTR [esi+6660]
  001e2	50		 push	 eax
  001e3	57		 push	 edi
  001e4	8b ce		 mov	 ecx, esi
  001e6	e8 00 00 00 00	 call	 ?ChangeAniState@ioNephilimItem@@QAEXPAVioBaseChar@@ABUAttackAttribute@@_N@Z ; ioNephilimItem::ChangeAniState

; 688  : 				m_SpecialState = SS_BOMB;
; 689  : 				pOwner->SetJumpPower( m_fBombStartJumpPower );

  001eb	f3 0f 10 86 6c
	1a 00 00	 movss	 xmm0, DWORD PTR [esi+6764]
  001f3	51		 push	 ecx
  001f4	8b cf		 mov	 ecx, edi
  001f6	c7 86 9c 1a 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+6812], 2
  00200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00205	e8 00 00 00 00	 call	 ?SetJumpPower@ioBaseChar@@QAEXM@Z ; ioBaseChar::SetJumpPower
$LN46@ProcessSpe:
  0020a	5b		 pop	 ebx
$LN12@ProcessSpe:
  0020b	5f		 pop	 edi
  0020c	5e		 pop	 esi

; 734  : 	}
; 735  : }

  0020d	c9		 leave
  0020e	c2 04 00	 ret	 4
?ProcessSpecialState@ioNephilimItem@@QAEXPAVioBaseChar@@@Z ENDP ; ioNephilimItem::ProcessSpecialState
_TEXT	ENDS
EXTRN	?SetFallState@ioBaseChar@@QAEX_N@Z:PROC		; ioBaseChar::SetFallState
EXTRN	?GetWeapon@ioBaseChar@@QBEPAVioWeaponItem@@XZ:PROC ; ioBaseChar::GetWeapon
; Function compile flags: /Ogsp
;	COMDAT ?CheckSpecialState@ioNephilimPushState@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckSpecialState@ioNephilimPushState@@UAEXPAVioBaseChar@@@Z PROC ; ioNephilimPushState::CheckSpecialState, COMDAT
; _this$ = ecx

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 874  : 	ioNephilimItem *pNephilimItem = ToNephilimItem( pOwner->GetWeapon() );

  00004	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?GetWeapon@ioBaseChar@@QBEPAVioWeaponItem@@XZ ; ioBaseChar::GetWeapon
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?ToNephilimItem@@YAPAVioNephilimItem@@PAVioItem@@@Z ; ToNephilimItem
  00014	59		 pop	 ecx

; 875  : 	if( pNephilimItem )

  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN2@CheckSpeci

; 876  : 		pNephilimItem->ProcessSpecialState( pOwner );

  00019	56		 push	 esi
  0001a	8b c8		 mov	 ecx, eax
  0001c	e8 00 00 00 00	 call	 ?ProcessSpecialState@ioNephilimItem@@QAEXPAVioBaseChar@@@Z ; ioNephilimItem::ProcessSpecialState

; 877  : 	else

  00021	eb 14		 jmp	 SHORT $LN1@CheckSpeci
$LN2@CheckSpeci:

; 878  : 	{
; 879  : 		pOwner->SetState( CS_DELAY );

  00023	6a 01		 push	 1
  00025	6a 00		 push	 0
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 880  : 		pOwner->SetFallState( true );

  0002e	6a 01		 push	 1
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetFallState@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetFallState
$LN1@CheckSpeci:
  00037	5e		 pop	 esi

; 881  : 		return;
; 882  : 	}
; 883  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?CheckSpecialState@ioNephilimPushState@@UAEXPAVioBaseChar@@@Z ENDP ; ioNephilimPushState::CheckSpecialState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckSpecialState@ioNephilimBombState@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckSpecialState@ioNephilimBombState@@UAEXPAVioBaseChar@@@Z PROC ; ioNephilimBombState::CheckSpecialState, COMDAT
; _this$ = ecx

; 906  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 907  : 	ioNephilimItem *pNephilimItem = ToNephilimItem( pOwner->GetWeapon() );

  00004	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?GetWeapon@ioBaseChar@@QBEPAVioWeaponItem@@XZ ; ioBaseChar::GetWeapon
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?ToNephilimItem@@YAPAVioNephilimItem@@PAVioItem@@@Z ; ToNephilimItem
  00014	59		 pop	 ecx

; 908  : 	if( pNephilimItem )

  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN2@CheckSpeci@2

; 909  : 		pNephilimItem->ProcessSpecialState( pOwner );

  00019	56		 push	 esi
  0001a	8b c8		 mov	 ecx, eax
  0001c	e8 00 00 00 00	 call	 ?ProcessSpecialState@ioNephilimItem@@QAEXPAVioBaseChar@@@Z ; ioNephilimItem::ProcessSpecialState

; 910  : 	else

  00021	eb 14		 jmp	 SHORT $LN1@CheckSpeci@2
$LN2@CheckSpeci@2:

; 911  : 	{
; 912  : 		pOwner->SetState( CS_DELAY );

  00023	6a 01		 push	 1
  00025	6a 00		 push	 0
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 913  : 		pOwner->SetFallState( true );

  0002e	6a 01		 push	 1
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetFallState@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetFallState
$LN1@CheckSpeci@2:
  00037	5e		 pop	 esi

; 914  : 		return;
; 915  : 	}
; 916  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?CheckSpecialState@ioNephilimBombState@@UAEXPAVioBaseChar@@@Z ENDP ; ioNephilimBombState::CheckSpecialState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckSpecialState@ioNephilimTeleportState@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckSpecialState@ioNephilimTeleportState@@UAEXPAVioBaseChar@@@Z PROC ; ioNephilimTeleportState::CheckSpecialState, COMDAT
; _this$ = ecx

; 944  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 945  : 	ioNephilimItem *pNephilimItem = ToNephilimItem( pOwner->GetWeapon() );

  00004	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?GetWeapon@ioBaseChar@@QBEPAVioWeaponItem@@XZ ; ioBaseChar::GetWeapon
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?ToNephilimItem@@YAPAVioNephilimItem@@PAVioItem@@@Z ; ToNephilimItem
  00014	59		 pop	 ecx

; 946  : 	if( pNephilimItem )

  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN2@CheckSpeci@3

; 947  : 		pNephilimItem->ProcessSpecialState( pOwner );

  00019	56		 push	 esi
  0001a	8b c8		 mov	 ecx, eax
  0001c	e8 00 00 00 00	 call	 ?ProcessSpecialState@ioNephilimItem@@QAEXPAVioBaseChar@@@Z ; ioNephilimItem::ProcessSpecialState

; 948  : 	else

  00021	eb 14		 jmp	 SHORT $LN1@CheckSpeci@3
$LN2@CheckSpeci@3:

; 949  : 	{
; 950  : 		pOwner->SetState( CS_DELAY );

  00023	6a 01		 push	 1
  00025	6a 00		 push	 0
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 951  : 		pOwner->SetFallState( true );

  0002e	6a 01		 push	 1
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?SetFallState@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetFallState
$LN1@CheckSpeci@3:
  00037	5e		 pop	 esi

; 952  : 		return;
; 953  : 	}
; 954  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?CheckSpecialState@ioNephilimTeleportState@@UAEXPAVioBaseChar@@@Z ENDP ; ioNephilimTeleportState::CheckSpecialState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioNephilimItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioNephilimItem@@UAEPAXI@Z PROC			; ioNephilimItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioNephilimItem@@UAE@XZ ; ioNephilimItem::~ioNephilimItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@8
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@8:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioNephilimItem@@UAEPAXI@Z ENDP			; ioNephilimItem::`scalar deleting destructor'
_TEXT	ENDS
END
