; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioMapAttachWeapon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
PUBLIC	?m_ActionStopType@ioMapAttachWeapon@@2W4ActionStopType@@A ; ioMapAttachWeapon::m_ActionStopType
PUBLIC	?m_DieActionStopType@ioMapAttachWeapon@@2W4ActionStopType@@A ; ioMapAttachWeapon::m_DieActionStopType
_BSS	SEGMENT
?m_ActionStopType@ioMapAttachWeapon@@2W4ActionStopType@@A DD 01H DUP (?) ; ioMapAttachWeapon::m_ActionStopType
?m_DieActionStopType@ioMapAttachWeapon@@2W4ActionStopType@@A DD 01H DUP (?) ; ioMapAttachWeapon::m_DieActionStopType
_BSS	ENDS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return1000@@YAIXZ				; return1000
; Function compile flags: /Ogsp
;	COMDAT ?return1000@@YAIXZ
_TEXT	SEGMENT
?return1000@@YAIXZ PROC					; return1000, COMDAT

; 29   : 	__forceinline unsigned int return1000() { __asm mov eax, 1000 };

  00000	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00005	c3		 ret	 0
?return1000@@YAIXZ ENDP					; return1000
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	_fabsf
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	?fabs@@YAMM@Z					; fabs
; Function compile flags: /Ogsp
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 518  :         {return (fabsf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv131[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv131[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
PUBLIC	??_7ioMapAttachWeapon@@6B@			; ioMapAttachWeapon::`vftable'
PUBLIC	??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioMapAttachWeapon::ioMapAttachWeapon
PUBLIC	??_R4ioMapAttachWeapon@@6B@			; ioMapAttachWeapon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioMapAttachWeapon@@@8			; ioMapAttachWeapon `RTTI Type Descriptor'
PUBLIC	??_R3ioMapAttachWeapon@@8			; ioMapAttachWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioMapAttachWeapon@@8			; ioMapAttachWeapon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioMapAttachWeapon@@8		; ioMapAttachWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWeapon@@8			; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R3ioWeapon@@8				; ioWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeapon@@8				; ioWeapon::`RTTI Base Class Array'
PUBLIC	?GetCollisionEnableTime@ioMapAttachWeapon@@UBEKXZ ; ioMapAttachWeapon::GetCollisionEnableTime
PUBLIC	?InitResource@ioMapAttachWeapon@@UAE_NXZ	; ioMapAttachWeapon::InitResource
PUBLIC	?DestroyResource@ioMapAttachWeapon@@UAEXPAVioPlayStage@@@Z ; ioMapAttachWeapon::DestroyResource
PUBLIC	?LoadProperty@ioMapAttachWeapon@@UAEXAAVioINILoader@@@Z ; ioMapAttachWeapon::LoadProperty
PUBLIC	?SetStartPosition@ioMapAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ; ioMapAttachWeapon::SetStartPosition
PUBLIC	?Process@ioMapAttachWeapon@@UAEXMPAVioPlayStage@@@Z ; ioMapAttachWeapon::Process
PUBLIC	?IsCollision@ioMapAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z ; ioMapAttachWeapon::IsCollision
PUBLIC	?IsCanMineExplosion@ioMapAttachWeapon@@UAE_NXZ	; ioMapAttachWeapon::IsCanMineExplosion
PUBLIC	?GetLocalAttackBox@ioMapAttachWeapon@@UBEABVioOrientBox@@XZ ; ioMapAttachWeapon::GetLocalAttackBox
PUBLIC	?GetType@ioMapAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ ; ioMapAttachWeapon::GetType
PUBLIC	?GetActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ ; ioMapAttachWeapon::GetActionStopType
PUBLIC	?GetDieActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ ; ioMapAttachWeapon::GetDieActionStopType
PUBLIC	?UpdateWorldAttackBox@ioMapAttachWeapon@@MAEXM_N@Z ; ioMapAttachWeapon::UpdateWorldAttackBox
EXTRN	__imp_??1ioOrientBox@@QAE@XZ:PROC
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioWeapon@@UAE@XZ:PROC			; ioWeapon::~ioWeapon
EXTRN	?SetPeculiarity@ioWeapon@@QAEXK@Z:PROC		; ioWeapon::SetPeculiarity
EXTRN	__imp_??0ioOrientBox@@QAE@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:PROC ; ioWeapon::ioWeapon
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z:PROC ; ioWeapon::IsAlreadyCollisioned
EXTRN	?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::AddCollisionEntity
EXTRN	?SetOwnerDamageRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerDamageRate
EXTRN	?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeDamageRate
EXTRN	?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeForceRate
EXTRN	?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeRangeRate
EXTRN	?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeSpeedRate
EXTRN	?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeBlowRate
EXTRN	?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeFloatRate
EXTRN	?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeScaleRate
EXTRN	?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeExplosionRate
EXTRN	?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeWoundedTimeRate
EXTRN	?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeLiveTimeRate
EXTRN	?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeBuffLiveTimeRate
EXTRN	?SetWeaponIndex@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetWeaponIndex
EXTRN	?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetGrapplingTargetName
EXTRN	?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetCreateItem
EXTRN	?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z:PROC ; ioWeapon::SetTeam
EXTRN	?CallReserveAreaWeapon@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CallReserveAreaWeapon
EXTRN	?SetWeaponDead@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetWeaponDead
EXTRN	?PlayExplosionSound@ioWeapon@@UAEXXZ:PROC	; ioWeapon::PlayExplosionSound
EXTRN	?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayWoundedSound
EXTRN	?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayDefensedSound
EXTRN	?PlayLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::PlayLoopSound
EXTRN	?StopLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::StopLoopSound
EXTRN	?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetAirBuffList
EXTRN	?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetBuffList
EXTRN	?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetDownBuffList
EXTRN	?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetPosition
EXTRN	?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ:PROC ; ioWeapon::GetBlowType
EXTRN	?GetPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetPushPower
EXTRN	?GetBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetBlowPower
EXTRN	?GetAirPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirPushPower
EXTRN	?GetAirBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirBlowPower
EXTRN	?GetDefensePushPower@ioWeapon@@UBEMM@Z:PROC	; ioWeapon::GetDefensePushPower
EXTRN	?SetSylphid@ioWeapon@@UAEHXZ:PROC		; ioWeapon::SetSylphid
EXTRN	?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z:PROC ; ioWeapon::ApplyExtraReserveWeaponByWeaponInfo
EXTRN	?SetResistanceAttr@ioWeapon@@UAEXH@Z:PROC	; ioWeapon::SetResistanceAttr
EXTRN	?SetStartCollisionBox@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetStartCollisionBox
EXTRN	?SetLiveTime@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetLiveTime
EXTRN	?SetMoveDir@ioWeapon@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetMoveDir
EXTRN	?SetMoveSpeed@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetMoveSpeed
EXTRN	?SetFloatPower@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetFloatPower
EXTRN	?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioWeapon::TestMapCollision
EXTRN	?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckPreCollision
EXTRN	?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckStructAndDummy
EXTRN	?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetDamage
EXTRN	?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetBaseDamage
EXTRN	?GetPushAngle@ioWeapon@@UBEMXZ:PROC		; ioWeapon::GetPushAngle
EXTRN	?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceMagic
EXTRN	?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceBomb
EXTRN	?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ:PROC ; ioWeapon::CheckGrapplingState
EXTRN	?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z:PROC ; ioWeapon::CheckCurAttribute
EXTRN	?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z:PROC ; ioWeapon::CheckItemNotDrop
EXTRN	?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z:PROC ; ioWeapon::GetWorldAttackBoxList
EXTRN	?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z:PROC ; ioWeapon::GetAttackDir
EXTRN	?GetLiveTime@ioWeapon@@UAEKXZ:PROC		; ioWeapon::GetLiveTime
EXTRN	?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetMoveDir
EXTRN	?CheckWeaponCollision@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CheckWeaponCollision
EXTRN	?GetRefreshDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetRefreshDuration
EXTRN	?GetIgnoreDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreDuration
EXTRN	?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ:PROC ; ioWeapon::GetIgnoreTimeTypeDuration
EXTRN	?GetIgnoreTimeType@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreTimeType
EXTRN	?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z:PROC ; ioWeapon::ApplyWeaponSync
EXTRN	?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z:PROC ; ioWeapon::IsSkillDependency
EXTRN	?SetSkillDependencyAction@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetSkillDependencyAction
EXTRN	?GetAttribute@ioWeapon@@MBEPBUWeaponAttribute@@XZ:PROC ; ioWeapon::GetAttribute
EXTRN	?CalcFinalDamage@ioWeapon@@MAEMXZ:PROC		; ioWeapon::CalcFinalDamage
EXTRN	?CalcFinalBoundDamage@ioWeapon@@MAEMXZ:PROC	; ioWeapon::CalcFinalBoundDamage
EXTRN	?CheckPiercing@ioWeapon@@MAE_N_N@Z:PROC		; ioWeapon::CheckPiercing
EXTRN	?ClearCollisionList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::ClearCollisionList
EXTRN	?CheckCreateWeaponList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::CheckCreateWeaponList
EXTRN	?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ:PROC ; ioWeapon::CreateCollisionAreaWeapon
EXTRN	?SetMapCollision@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetMapCollision
EXTRN	?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ:PROC	; ioWeapon::IsIgnoreMapCollision
EXTRN	?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreTestMapCollision
EXTRN	?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreMapCollisionEffect
EXTRN	?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z:PROC ; ioWeapon::AddEffectEvent
EXTRN	??_EioMapAttachWeapon@@UAEPAXI@Z:PROC		; ioMapAttachWeapon::`vector deleting destructor'
;	COMDAT ??_R2ioWeapon@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
rdata$r	SEGMENT
??_R2ioWeapon@@8 DD FLAT:??_R1A@?0A@EA@ioWeapon@@8	; ioWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWeapon@@8
rdata$r	SEGMENT
??_R3ioWeapon@@8 DD 00H					; ioWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWeapon@@@8
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeapon@@8 DD FLAT:??_R0?AVioWeapon@@@8	; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioMapAttachWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioMapAttachWeapon@@8 DD FLAT:??_R0?AVioMapAttachWeapon@@@8 ; ioMapAttachWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioMapAttachWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R2ioMapAttachWeapon@@8
rdata$r	SEGMENT
??_R2ioMapAttachWeapon@@8 DD FLAT:??_R1A@?0A@EA@ioMapAttachWeapon@@8 ; ioMapAttachWeapon::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R3ioMapAttachWeapon@@8
rdata$r	SEGMENT
??_R3ioMapAttachWeapon@@8 DD 00H			; ioMapAttachWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioMapAttachWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioMapAttachWeapon@@@8
_DATA	SEGMENT
??_R0?AVioMapAttachWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioMapAttachWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioMapAttachWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioMapAttachWeapon@@6B@
rdata$r	SEGMENT
??_R4ioMapAttachWeapon@@6B@ DD 00H			; ioMapAttachWeapon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioMapAttachWeapon@@@8
	DD	FLAT:??_R3ioMapAttachWeapon@@8
rdata$r	ENDS
;	COMDAT ??_7ioMapAttachWeapon@@6B@
CONST	SEGMENT
??_7ioMapAttachWeapon@@6B@ DD FLAT:??_R4ioMapAttachWeapon@@6B@ ; ioMapAttachWeapon::`vftable'
	DD	FLAT:?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z
	DD	FLAT:?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?SetOwnerDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z
	DD	FLAT:?CallReserveAreaWeapon@ioWeapon@@UAEXXZ
	DD	FLAT:?SetWeaponDead@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayExplosionSound@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?StopLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ
	DD	FLAT:?GetPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetDefensePushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetCollisionEnableTime@ioMapAttachWeapon@@UBEKXZ
	DD	FLAT:?SetSylphid@ioWeapon@@UAEHXZ
	DD	FLAT:?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z
	DD	FLAT:?InitResource@ioMapAttachWeapon@@UAE_NXZ
	DD	FLAT:?DestroyResource@ioMapAttachWeapon@@UAEXPAVioPlayStage@@@Z
	DD	FLAT:?LoadProperty@ioMapAttachWeapon@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?SetResistanceAttr@ioWeapon@@UAEXH@Z
	DD	FLAT:?SetStartCollisionBox@ioWeapon@@UAEXXZ
	DD	FLAT:?SetLiveTime@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetMoveDir@ioWeapon@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetMoveSpeed@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetFloatPower@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetStartPosition@ioMapAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
	DD	FLAT:?Process@ioMapAttachWeapon@@UAEXMPAVioPlayStage@@@Z
	DD	FLAT:?IsCollision@ioMapAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z
	DD	FLAT:?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetPushAngle@ioWeapon@@UBEMXZ
	DD	FLAT:?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsCanMineExplosion@ioMapAttachWeapon@@UAE_NXZ
	DD	FLAT:?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ
	DD	FLAT:?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z
	DD	FLAT:?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z
	DD	FLAT:?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z
	DD	FLAT:?GetLocalAttackBox@ioMapAttachWeapon@@UBEABVioOrientBox@@XZ
	DD	FLAT:?GetLiveTime@ioWeapon@@UAEKXZ
	DD	FLAT:?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ
	DD	FLAT:?CheckWeaponCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?GetType@ioMapAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ
	DD	FLAT:?GetActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetDieActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetRefreshDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeType@ioWeapon@@UAEKXZ
	DD	FLAT:?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z
	DD	FLAT:?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z
	DD	FLAT:?SetSkillDependencyAction@ioWeapon@@UAEXXZ
	DD	FLAT:?UpdateWorldAttackBox@ioMapAttachWeapon@@MAEXM_N@Z
	DD	FLAT:?GetAttribute@ioWeapon@@MBEPBUWeaponAttribute@@XZ
	DD	FLAT:?CalcFinalDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CalcFinalBoundDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CheckPiercing@ioWeapon@@MAE_N_N@Z
	DD	FLAT:?ClearCollisionList@ioWeapon@@MAEXXZ
	DD	FLAT:?CheckCreateWeaponList@ioWeapon@@MAEXXZ
	DD	FLAT:?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ
	DD	FLAT:?SetMapCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ
	DD	FLAT:?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z
	DD	FLAT:??_EioMapAttachWeapon@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$2
__ehfuncinfo$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_pAttr$ = 12						; size = 4
??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z PROC ; ioMapAttachWeapon::ioMapAttachWeapon, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR _pAttr$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioWeapon::ioWeapon
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 8e 9c 08 00
	00		 lea	 ecx, DWORD PTR [esi+2204]
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioMapAttachWeapon@@6B@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00032	8d 8e ac 08 00
	00		 lea	 ecx, DWORD PTR [esi+2220]
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioOrientBox@@QAE@XZ

; 16   : 	SetPeculiarity( WP_ATTACK_OWNER |
; 17   : 					WP_MINE_EXPLOSION |
; 18   : 					WP_WOUND_NO_SOUND |
; 19   : 					WP_DEF_NO_SOUND );

  00042	68 d4 00 00 00	 push	 212			; 000000d4H
  00047	8b ce		 mov	 ecx, esi
  00049	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004d	e8 00 00 00 00	 call	 ?SetPeculiarity@ioWeapon@@QAEXK@Z ; ioWeapon::SetPeculiarity

; 20   : 
; 21   : 	m_pFireMesh = NULL;

  00052	83 a6 98 08 00
	00 00		 and	 DWORD PTR [esi+2200], 0

; 22   : 	m_State = TS_DELAY;
; 23   : 
; 24   : 	m_dwExplosionStart = 0;

  00059	83 a6 f4 08 00
	00 00		 and	 DWORD PTR [esi+2292], 0

; 25   : 
; 26   : 	m_bResistance = false;
; 27   : 
; 28   : 	m_iConveyerMoveFrameIdx = -1;

  00060	83 8e 08 09 00
	00 ff		 or	 DWORD PTR [esi+2312], -1
  00067	c7 86 94 08 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+2196], 1
  00071	c6 86 3c 06 00
	00 00		 mov	 BYTE PTR [esi+1596], 0

; 29   : }

  00078	8b c6		 mov	 eax, esi
  0007a	e8 00 00 00 00	 call	 __EH_epilog3
  0007f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__unwindfunclet$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 9c 08 00
	00		 add	 ecx, 2204		; 0000089cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 ac 08 00
	00		 add	 ecx, 2220		; 000008acH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioOrientBox@@QAE@XZ
__ehhandler$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioMapAttachWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ENDP ; ioMapAttachWeapon::ioMapAttachWeapon
PUBLIC	??_C@_0DM@KEMAMHHI@ioMapAttachWeapon?3?3?$HOioMapAttachW@ ; `string'
PUBLIC	??1ioMapAttachWeapon@@UAE@XZ			; ioMapAttachWeapon::~ioMapAttachWeapon
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
;	COMDAT ??_C@_0DM@KEMAMHHI@ioMapAttachWeapon?3?3?$HOioMapAttachW@
CONST	SEGMENT
??_C@_0DM@KEMAMHHI@ioMapAttachWeapon?3?3?$HOioMapAttachW@ DB 'ioMapAttach'
	DB	'Weapon::~ioMapAttachWeapon - UnReleased Resource', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioMapAttachWeapon@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioMapAttachWeapon@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioMapAttachWeapon@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioMapAttachWeapon@@UAE@XZ$2
__ehfuncinfo$??1ioMapAttachWeapon@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1ioMapAttachWeapon@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioMapAttachWeapon@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioMapAttachWeapon@@UAE@XZ PROC			; ioMapAttachWeapon::~ioMapAttachWeapon, COMDAT
; _this$ = ecx

; 32   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioMapAttachWeapon@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioMapAttachWeapon@@6B@

; 33   : 	if( m_pFireMesh )

  00017	83 be 98 08 00
	00 00		 cmp	 DWORD PTR [esi+2200], 0
  0001e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00025	74 16		 je	 SHORT $LN1@ioMapAttac

; 34   : 	{
; 35   : 		LOG.PrintTimeAndLog( 0, "ioMapAttachWeapon::~ioMapAttachWeapon - UnReleased Resource" );

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@KEMAMHHI@ioMapAttachWeapon?3?3?$HOioMapAttachW@
  0002c	6a 00		 push	 0
  0002e	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ioMapAttac:

; 36   : 	}
; 37   : }

  0003d	8d 8e ac 08 00
	00		 lea	 ecx, DWORD PTR [esi+2220]
  00043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioOrientBox@@QAE@XZ
  0004d	8d 8e 9c 08 00
	00		 lea	 ecx, DWORD PTR [esi+2204]
  00053	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0005d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
  00068	e8 00 00 00 00	 call	 __EH_epilog3
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioMapAttachWeapon@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__unwindfunclet$??1ioMapAttachWeapon@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 9c 08 00
	00		 add	 ecx, 2204		; 0000089cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioMapAttachWeapon@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 ac 08 00
	00		 add	 ecx, 2220		; 000008acH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioOrientBox@@QAE@XZ
__ehhandler$??1ioMapAttachWeapon@@UAE@XZ:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioMapAttachWeapon@@UAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioMapAttachWeapon@@UAE@XZ ENDP			; ioMapAttachWeapon::~ioMapAttachWeapon
PUBLIC	__real@4f800000
PUBLIC	?OnExplosionState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ; ioMapAttachWeapon::OnExplosionState
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
CONST	ENDS
;	COMDAT ?OnExplosionState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
tv183 = -4						; size = 4
tv179 = 8						; size = 4
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?OnExplosionState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z PROC ; ioMapAttachWeapon::OnExplosionState, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 222  : 	if( m_dwExplosionDuration == 0 )

  00007	83 be f8 08 00
	00 00		 cmp	 DWORD PTR [esi+2296], 0
  0000e	75 07		 jne	 SHORT $LN3@OnExplosio
$LN10@OnExplosio:

; 223  : 	{
; 224  : 		SetWeaponDead();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	ff 50 4c	 call	 DWORD PTR [eax+76]

; 225  : 		return;

  00015	eb 59		 jmp	 SHORT $LN1@OnExplosio
$LN3@OnExplosio:

; 226  : 	}
; 227  : 
; 228  : 	DWORD dwCurTime = FRAMEGETTIME();

  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001d	8b c8		 mov	 ecx, eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 229  : 	if( dwCurTime - m_dwExplosionStart > m_dwExplosionDuration )

  00025	2b 86 f4 08 00
	00		 sub	 eax, DWORD PTR [esi+2292]
  0002b	3b 86 f8 08 00
	00		 cmp	 eax, DWORD PTR [esi+2296]
  00031	76 04		 jbe	 SHORT $LN2@OnExplosio

; 230  : 	{
; 231  : 		SetWeaponDead();

  00033	8b ce		 mov	 ecx, esi

; 232  : 		return;

  00035	eb d9		 jmp	 SHORT $LN10@OnExplosio
$LN2@OnExplosio:

; 233  : 	}
; 234  : 
; 235  : 	if( m_pFireMesh )

  00037	83 be 98 08 00
	00 00		 cmp	 DWORD PTR [esi+2200], 0
  0003e	74 30		 je	 SHORT $LN1@OnExplosio

; 236  : 	{
; 237  : 		m_pFireMesh->Update( fTimePerSec * FLOAT1000 );

  00040	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00045	8b 8e 98 08 00
	00		 mov	 ecx, DWORD PTR [esi+2200]
  0004b	83 c1 14	 add	 ecx, 20			; 00000014H
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	89 45 fc	 mov	 DWORD PTR tv183[ebp], eax
  00053	db 45 fc	 fild	 DWORD PTR tv183[ebp]
  00056	85 c0		 test	 eax, eax
  00058	79 06		 jns	 SHORT $LN8@OnExplosio
  0005a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@OnExplosio:
  00060	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]
  00063	51		 push	 ecx
  00064	d9 5d 08	 fstp	 DWORD PTR tv179[ebp]
  00067	d9 45 08	 fld	 DWORD PTR tv179[ebp]
  0006a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0006d	ff 52 40	 call	 DWORD PTR [edx+64]
$LN1@OnExplosio:
  00070	5e		 pop	 esi

; 238  : 	}
; 239  : }

  00071	c9		 leave
  00072	c2 08 00	 ret	 8
?OnExplosionState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ENDP ; ioMapAttachWeapon::OnExplosionState
_TEXT	ENDS
EXTRN	__imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?DestroyResource@ioMapAttachWeapon@@UAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
?DestroyResource@ioMapAttachWeapon@@UAEXPAVioPlayStage@@@Z PROC ; ioMapAttachWeapon::DestroyResource, COMDAT
; _this$ = ecx

; 242  : {

  00000	56		 push	 esi

; 243  : 	if( m_pFireMesh )

  00001	8d b1 98 08 00
	00		 lea	 esi, DWORD PTR [ecx+2200]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 12		 je	 SHORT $LN1@DestroyRes

; 244  : 	{
; 245  : 		g_EffectFactory.DestroyEffect( m_pFireMesh );

  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00014	8b c8		 mov	 ecx, eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z

; 246  : 		m_pFireMesh = NULL;

  0001c	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@DestroyRes:
  0001f	5e		 pop	 esi

; 247  : 	}
; 248  : }

  00020	c2 04 00	 ret	 4
?DestroyResource@ioMapAttachWeapon@@UAEXPAVioPlayStage@@@Z ENDP ; ioMapAttachWeapon::DestroyResource
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetType@ioMapAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ
_TEXT	SEGMENT
?GetType@ioMapAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ PROC ; ioMapAttachWeapon::GetType, COMDAT
; _this$ = ecx

; 252  : 	return WT_MAP_ATTACH;

  00000	6a 1b		 push	 27			; 0000001bH
  00002	58		 pop	 eax

; 253  : }

  00003	c3		 ret	 0
?GetType@ioMapAttachWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ ENDP ; ioMapAttachWeapon::GetType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ PROC ; ioMapAttachWeapon::GetActionStopType, COMDAT
; _this$ = ecx

; 257  : 	return m_ActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_ActionStopType@ioMapAttachWeapon@@2W4ActionStopType@@A ; ioMapAttachWeapon::m_ActionStopType

; 258  : }

  00005	c3		 ret	 0
?GetActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ ENDP ; ioMapAttachWeapon::GetActionStopType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetDieActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetDieActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ PROC ; ioMapAttachWeapon::GetDieActionStopType, COMDAT
; _this$ = ecx

; 262  : 	return m_DieActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_DieActionStopType@ioMapAttachWeapon@@2W4ActionStopType@@A ; ioMapAttachWeapon::m_DieActionStopType

; 263  : }

  00005	c3		 ret	 0
?GetDieActionStopType@ioMapAttachWeapon@@UBE?AW4ActionStopType@@XZ ENDP ; ioMapAttachWeapon::GetDieActionStopType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetLocalAttackBox@ioMapAttachWeapon@@UBEABVioOrientBox@@XZ
_TEXT	SEGMENT
?GetLocalAttackBox@ioMapAttachWeapon@@UBEABVioOrientBox@@XZ PROC ; ioMapAttachWeapon::GetLocalAttackBox, COMDAT
; _this$ = ecx

; 267  : 	return m_LocalAttackBox;

  00000	8d 81 ac 08 00
	00		 lea	 eax, DWORD PTR [ecx+2220]

; 268  : }

  00006	c3		 ret	 0
?GetLocalAttackBox@ioMapAttachWeapon@@UBEABVioOrientBox@@XZ ENDP ; ioMapAttachWeapon::GetLocalAttackBox
_TEXT	ENDS
PUBLIC	__real@403e000000000000
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Explosion@ioMapAttachWeapon@@QAEXPAVioPlayStage@@@Z ; ioMapAttachWeapon::Explosion
EXTRN	?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z:PROC ; ioPlayStage::CreateMapEffect
EXTRN	?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ:PROC	; ioWeapon::GetScale
EXTRN	?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z:PROC ; ioPlayStage::GetMapHeight
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?SetExtents@ioOrientBox@@QAEXHM@Z:PROC
EXTRN	?DestroyAttachAreaWeapon@ioWeapon@@IAEXXZ:PROC	; ioWeapon::DestroyAttachAreaWeapon
EXTRN	___security_cookie:DWORD
;	COMDAT __real@403e000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
CONST	ENDS
;	COMDAT ?Explosion@ioMapAttachWeapon@@QAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$GSCopy$ = -24					; size = 4
tv94 = -20						; size = 4
_fMapHeight$530710 = -20				; size = 4
_fHalfRange$ = -20					; size = 4
_vPos$530709 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?Explosion@ioMapAttachWeapon@@QAEXPAVioPlayStage@@@Z PROC ; ioMapAttachWeapon::Explosion, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 301  : 	if( m_State == TS_EXPLOSION )

  00016	6a 03		 push	 3
  00018	8b d9		 mov	 ebx, ecx
  0001a	5f		 pop	 edi

; 323  : 		}
; 324  : 
; 325  : 		vPos.y += FLOAT1;

  0001b	89 45 e8	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  0001e	39 bb 94 08 00
	00		 cmp	 DWORD PTR [ebx+2196], edi
  00024	0f 84 38 01 00
	00		 je	 $LN2@Explosion

; 302  : 		return;
; 303  : 
; 304  : 	DestroyAttachAreaWeapon();
; 305  : 
; 306  : 	m_State = TS_EXPLOSION;

  0002a	e8 00 00 00 00	 call	 ?DestroyAttachAreaWeapon@ioWeapon@@IAEXXZ ; ioWeapon::DestroyAttachAreaWeapon
  0002f	89 bb 94 08 00
	00		 mov	 DWORD PTR [ebx+2196], edi

; 307  : 	m_dwExplosionStart = FRAMEGETTIME();

  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0003b	8b c8		 mov	 ecx, eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 308  : 
; 309  : 	float fHalfRange = m_fExplosionRange;

  00043	f3 0f 10 83 fc
	08 00 00	 movss	 xmm0, DWORD PTR [ebx+2300]

; 310  : 	m_LocalAttackBox.SetExtents( 0, fHalfRange );

  0004b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetExtents@ioOrientBox@@QAEXHM@Z
  00051	51		 push	 ecx
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	6a 00		 push	 0
  00059	8d 8b ac 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2220]
  0005f	89 83 f4 08 00
	00		 mov	 DWORD PTR [ebx+2292], eax
  00065	f3 0f 11 45 ec	 movss	 DWORD PTR _fHalfRange$[ebp], xmm0
  0006a	ff d6		 call	 esi

; 311  : 	m_LocalAttackBox.SetExtents( 1, fHalfRange );

  0006c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fHalfRange$[ebp]
  00071	51		 push	 ecx
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	6a 01		 push	 1
  00079	8d 8b ac 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2220]
  0007f	ff d6		 call	 esi

; 312  : 	m_LocalAttackBox.SetExtents( 2, fHalfRange );

  00081	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fHalfRange$[ebp]
  00086	51		 push	 ecx
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	6a 02		 push	 2
  0008e	8d 8b ac 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2220]
  00094	ff d6		 call	 esi

; 313  : 	UpdateWorldAttackBox( 0.0f, false );

  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009b	6a 00		 push	 0
  0009d	51		 push	 ecx
  0009e	8b cb		 mov	 ecx, ebx
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 314  : 
; 315  : 	if( !m_BoomEffect.IsEmpty() )

  000ab	8d 8b 9c 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2204]
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000b7	84 c0		 test	 al, al
  000b9	0f 85 a3 00 00
	00		 jne	 $LN2@Explosion

; 316  : 	{
; 317  : 		D3DXVECTOR3 vPos = GetPosition();

  000bf	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c1	8b cb		 mov	 ecx, ebx
  000c3	ff 50 70	 call	 DWORD PTR [eax+112]
  000c6	8b f0		 mov	 esi, eax
  000c8	8d 7d f0	 lea	 edi, DWORD PTR _vPos$530709[ebp]
  000cb	a5		 movsd
  000cc	a5		 movsd

; 318  : 
; 319  : 		float fMapHeight = pStage->GetMapHeight( vPos.x, vPos.z, NULL, false, vPos.y+30.0f );

  000cd	33 c0		 xor	 eax, eax
  000cf	50		 push	 eax
  000d0	a5		 movsd
  000d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$530709[ebp+4]
  000d6	51		 push	 ecx
  000d7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  000e2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000eb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$530709[ebp+8]
  000f0	50		 push	 eax
  000f1	50		 push	 eax
  000f2	51		 push	 ecx
  000f3	51		 push	 ecx
  000f4	8b 4d e8	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  000f7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000fd	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$530709[ebp]
  00102	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00107	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight
  0010c	d9 5d ec	 fstp	 DWORD PTR _fMapHeight$530710[ebp]

; 320  : 		if( vPos.y < fMapHeight )

  0010f	d9 45 f4	 fld	 DWORD PTR _vPos$530709[ebp+4]
  00112	d9 45 ec	 fld	 DWORD PTR _fMapHeight$530710[ebp]
  00115	df f1		 fcomip	 ST(1)
  00117	dd d8		 fstp	 ST(0)
  00119	76 0a		 jbe	 SHORT $LN1@Explosion

; 321  : 		{
; 322  : 			vPos.y = fMapHeight;

  0011b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fMapHeight$530710[ebp]
  00120	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$530709[ebp+4], xmm0
$LN1@Explosion:

; 323  : 		}
; 324  : 
; 325  : 		vPos.y += FLOAT1;

  00125	b8 01 00 00 00	 mov	 eax, 1
  0012a	89 45 ec	 mov	 DWORD PTR tv94[ebp], eax
  0012d	db 45 ec	 fild	 DWORD PTR tv94[ebp]
  00130	85 c0		 test	 eax, eax
  00132	79 06		 jns	 SHORT $LN8@Explosion
  00134	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@Explosion:
  0013a	d8 45 f4	 fadd	 DWORD PTR _vPos$530709[ebp+4]

; 326  : 
; 327  : 		pStage->CreateMapEffect( m_BoomEffect, vPos, GetScale() );

  0013d	8b cb		 mov	 ecx, ebx
  0013f	d9 5d f4	 fstp	 DWORD PTR _vPos$530709[ebp+4]
  00142	e8 00 00 00 00	 call	 ?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ ; ioWeapon::GetScale
  00147	8b 4d e8	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  0014a	50		 push	 eax
  0014b	8d 45 f0	 lea	 eax, DWORD PTR _vPos$530709[ebp]
  0014e	50		 push	 eax
  0014f	8d 83 9c 08 00
	00		 lea	 eax, DWORD PTR [ebx+2204]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z ; ioPlayStage::CreateMapEffect

; 328  : 		ioWeapon::PlayExplosionSound();

  0015b	8b cb		 mov	 ecx, ebx
  0015d	e8 00 00 00 00	 call	 ?PlayExplosionSound@ioWeapon@@UAEXXZ ; ioWeapon::PlayExplosionSound
$LN2@Explosion:

; 329  : 	}
; 330  : }

  00162	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	33 cd		 xor	 ecx, ebp
  00169	5b		 pop	 ebx
  0016a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016f	c9		 leave
  00170	c2 04 00	 ret	 4
?Explosion@ioMapAttachWeapon@@QAEXPAVioPlayStage@@@Z ENDP ; ioMapAttachWeapon::Explosion
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	_pEntity$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetCenter@ioOrientBox@@QBEABUD3DXVECTOR3@@XZ:PROC
EXTRN	?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z:PROC ; ioWeapon::GetWorldAttackBox
;	COMDAT __real@00000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
CONST	ENDS
;	COMDAT ?IsCollision@ioMapAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z
_TEXT	SEGMENT
_pEntity$GSCopy$ = -24					; size = 4
tv184 = -20						; size = 4
_fTargetDist$ = -20					; size = 4
_vCenter$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pEntity$ = 8						; size = 4
_bMapCollision$ = 12					; size = 1
?IsCollision@ioMapAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z PROC ; ioMapAttachWeapon::IsCollision, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pEntity$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 334  : 	if( m_State != TS_EXPLOSION ) 

  00016	83 bb 94 08 00
	00 03		 cmp	 DWORD PTR [ebx+2196], 3

; 344  : 
; 345  : 	if( COMPARE( fTargetDist, 0.0f, m_fExplosionRange ) )

  0001d	89 45 e8	 mov	 DWORD PTR _pEntity$GSCopy$[ebp], eax
  00020	0f 85 90 00 00
	00		 jne	 $LN1@IsCollisio

; 335  : 		return false;
; 336  : 
; 337  : 	if( m_fExplosionRange <= 0.0f )

  00026	0f 57 c0	 xorps	 xmm0, xmm0
  00029	0f 2f 83 fc 08
	00 00		 comiss	 xmm0, DWORD PTR [ebx+2300]

; 338  : 		return false;

  00030	0f 83 80 00 00
	00		 jae	 $LN1@IsCollisio

; 339  : 
; 340  : 	float fTargetDist = -FLOAT1;

  00036	56		 push	 esi
  00037	57		 push	 edi
  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	89 45 ec	 mov	 DWORD PTR tv184[ebp], eax
  00040	db 45 ec	 fild	 DWORD PTR tv184[ebp]
  00043	85 c0		 test	 eax, eax
  00045	79 06		 jns	 SHORT $LN9@IsCollisio
  00047	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN9@IsCollisio:
  0004d	d9 e0		 fchs

; 341  : 	D3DXVECTOR3 vCenter = GetWorldAttackBox().GetCenter();

  0004f	6a 00		 push	 0
  00051	d9 5d ec	 fstp	 DWORD PTR _fTargetDist$[ebp]
  00054	e8 00 00 00 00	 call	 ?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z ; ioWeapon::GetWorldAttackBox
  00059	8b c8		 mov	 ecx, eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCenter@ioOrientBox@@QBEABUD3DXVECTOR3@@XZ

; 342  : 	if( !pEntity->CheckSphereDistance( vCenter, m_fExplosionRange, fTargetDist ) )

  00061	8b 4d e8	 mov	 ecx, DWORD PTR _pEntity$GSCopy$[ebp]
  00064	f3 0f 10 83 fc
	08 00 00	 movss	 xmm0, DWORD PTR [ebx+2300]
  0006c	8b f0		 mov	 esi, eax
  0006e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00070	8d 7d f0	 lea	 edi, DWORD PTR _vCenter$[ebp]
  00073	a5		 movsd
  00074	8d 55 ec	 lea	 edx, DWORD PTR _fTargetDist$[ebp]
  00077	52		 push	 edx
  00078	a5		 movsd
  00079	51		 push	 ecx
  0007a	8d 55 f0	 lea	 edx, DWORD PTR _vCenter$[ebp]
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	52		 push	 edx
  00083	a5		 movsd
  00084	ff 90 98 00 00
	00		 call	 DWORD PTR [eax+152]
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	84 c0		 test	 al, al

; 343  : 		return false;

  0008e	74 26		 je	 SHORT $LN1@IsCollisio

; 344  : 
; 345  : 	if( COMPARE( fTargetDist, 0.0f, m_fExplosionRange ) )

  00090	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fTargetDist$[ebp]
  00095	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0009c	72 18		 jb	 SHORT $LN1@IsCollisio
  0009e	f3 0f 10 8b fc
	08 00 00	 movss	 xmm1, DWORD PTR [ebx+2300]
  000a6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a9	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ac	66 0f 2f c8	 comisd	 xmm1, xmm0
  000b0	76 04		 jbe	 SHORT $LN1@IsCollisio

; 346  : 		return true;

  000b2	b0 01		 mov	 al, 1
  000b4	eb 02		 jmp	 SHORT $LN5@IsCollisio
$LN1@IsCollisio:

; 347  : 
; 348  : 	return false;

  000b6	32 c0		 xor	 al, al
$LN5@IsCollisio:

; 349  : }

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	33 cd		 xor	 ecx, ebp
  000bd	5b		 pop	 ebx
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	c9		 leave
  000c4	c2 08 00	 ret	 8
?IsCollision@ioMapAttachWeapon@@UAE_NPAVioPlayEntity@@_N@Z ENDP ; ioMapAttachWeapon::IsCollision
_TEXT	ENDS
PUBLIC	?IsExplosion@ioMapAttachWeapon@@QBE_NXZ		; ioMapAttachWeapon::IsExplosion
; Function compile flags: /Ogsp
;	COMDAT ?IsExplosion@ioMapAttachWeapon@@QBE_NXZ
_TEXT	SEGMENT
?IsExplosion@ioMapAttachWeapon@@QBE_NXZ PROC		; ioMapAttachWeapon::IsExplosion, COMDAT
; _this$ = ecx

; 353  : 	if( m_State == TS_EXPLOSION )

  00000	83 b9 94 08 00
	00 03		 cmp	 DWORD PTR [ecx+2196], 3
  00007	0f 94 c0	 sete	 al

; 354  : 		return true;
; 355  : 
; 356  : 	return false;
; 357  : }

  0000a	c3		 ret	 0
?IsExplosion@ioMapAttachWeapon@@QBE_NXZ ENDP		; ioMapAttachWeapon::IsExplosion
_TEXT	ENDS
EXTRN	?IsCanMineExplosion@ioWeapon@@UAE_NXZ:PROC	; ioWeapon::IsCanMineExplosion
; Function compile flags: /Ogsp
;	COMDAT ?IsCanMineExplosion@ioMapAttachWeapon@@UAE_NXZ
_TEXT	SEGMENT
?IsCanMineExplosion@ioMapAttachWeapon@@UAE_NXZ PROC	; ioMapAttachWeapon::IsCanMineExplosion, COMDAT
; _this$ = ecx

; 360  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 361  : 	if( !ioWeapon::IsCanMineExplosion() )

  00003	e8 00 00 00 00	 call	 ?IsCanMineExplosion@ioWeapon@@UAE_NXZ ; ioWeapon::IsCanMineExplosion
  00008	84 c0		 test	 al, al
  0000a	75 02		 jne	 SHORT $LN2@IsCanMineE
  0000c	5e		 pop	 esi

; 365  : 		return false;
; 366  : 
; 367  : 	return true;
; 368  : }

  0000d	c3		 ret	 0
$LN2@IsCanMineE:

; 362  : 		return false;
; 363  : 
; 364  : 	if( !IsExplosion() )

  0000e	83 be 94 08 00
	00 03		 cmp	 DWORD PTR [esi+2196], 3
  00015	5e		 pop	 esi
  00016	0f 94 c0	 sete	 al

; 365  : 		return false;
; 366  : 
; 367  : 	return true;
; 368  : }

  00019	c3		 ret	 0
?IsCanMineExplosion@ioMapAttachWeapon@@UAE_NXZ ENDP	; ioMapAttachWeapon::IsCanMineExplosion
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetCollisionEnableTime@ioMapAttachWeapon@@UBEKXZ
_TEXT	SEGMENT
?GetCollisionEnableTime@ioMapAttachWeapon@@UBEKXZ PROC	; ioMapAttachWeapon::GetCollisionEnableTime, COMDAT
; _this$ = ecx

; 371  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 372  : 	if( m_State == TS_EXPLOSION )

  00003	83 be 94 08 00
	00 03		 cmp	 DWORD PTR [esi+2196], 3
  0000a	75 08		 jne	 SHORT $LN1@GetCollisi

; 373  : 		return m_dwCreatedTime;

  0000c	8b 86 d4 04 00
	00		 mov	 eax, DWORD PTR [esi+1236]
  00012	5e		 pop	 esi

; 376  : }

  00013	c3		 ret	 0
$LN1@GetCollisi:

; 374  : 
; 375  : 	return m_dwCreatedTime + GetAttribute()->m_dwCollisionDelay;

  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  0001c	8b 80 c4 01 00
	00		 mov	 eax, DWORD PTR [eax+452]
  00022	03 86 d4 04 00
	00		 add	 eax, DWORD PTR [esi+1236]
  00028	5e		 pop	 esi

; 376  : }

  00029	c3		 ret	 0
?GetCollisionEnableTime@ioMapAttachWeapon@@UBEKXZ ENDP	; ioMapAttachWeapon::GetCollisionEnableTime
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 328  :     x += v.x;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00010	0f 5a c0	 cvtps2pd xmm0, xmm0
  00013	0f 5a c9	 cvtps2pd xmm1, xmm1
  00016	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 329  :     y += v.y;

  0001a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0001f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00032	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 330  :     z += v.z;

  00036	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0003b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00044	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00049	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00053	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00057	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 331  :     return *this;
; 332  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??D@YA?AUD3DXVECTOR3@@MABU0@@Z			; operator*
; Function compile flags: /Ogsp
;	COMDAT ??D@YA?AUD3DXVECTOR3@@MABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AUD3DXVECTOR3@@MABU0@@Z PROC			; operator*, COMDAT

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0000b	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00012	0f 5a c0	 cvtps2pd xmm0, xmm0
  00015	0f 5a c9	 cvtps2pd xmm1, xmm1
  00018	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0001c	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00021	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00025	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00029	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00031	0f 5a c9	 cvtps2pd xmm1, xmm1
  00034	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00038	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00041	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00046	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00051	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00055	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00059	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 408  : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
??D@YA?AUD3DXVECTOR3@@MABU0@@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?IsLive@ioWeapon@@QBE_NXZ			; ioWeapon::IsLive
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
;	COMDAT ?IsLive@ioWeapon@@QBE_NXZ
_TEXT	SEGMENT
?IsLive@ioWeapon@@QBE_NXZ PROC				; ioWeapon::IsLive, COMDAT
; _this$ = ecx

; 533  : 	inline bool IsLive() const { return m_bLive; }

  00000	8a 81 82 05 00
	00		 mov	 al, BYTE PTR [ecx+1410]
  00006	c3		 ret	 0
?IsLive@ioWeapon@@QBE_NXZ ENDP				; ioWeapon::IsLive
_TEXT	ENDS
PUBLIC	?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ; ioWeapon::GetParentSceneNode
; Function compile flags: /Ogsp
;	COMDAT ?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ
_TEXT	SEGMENT
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ PROC ; ioWeapon::GetParentSceneNode, COMDAT
; _this$ = ecx

; 797  : 	ioSceneNode* GetParentSceneNode() const { return m_pSceneNode; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ENDP ; ioWeapon::GetParentSceneNode
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioMapAttachWeapon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioMapAttachWeapon@@UAEPAXI@Z PROC			; ioMapAttachWeapon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioMapAttachWeapon@@UAE@XZ ; ioMapAttachWeapon::~ioMapAttachWeapon
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioMapAttachWeapon@@UAEPAXI@Z ENDP			; ioMapAttachWeapon::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z ; ioMapAttachWeapon::SetFireMesh
EXTRN	__imp_?GetExtents@ioOrientBox@@QBEMH@Z:PROC
EXTRN	__imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ:PROC
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	__imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z:PROC
EXTRN	__imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z:PROC
EXTRN	__imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ:PROC
EXTRN	__imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z:PROC
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
xdata$x	SEGMENT
__unwindtable$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z$1
__ehfuncinfo$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
xdata$x	ENDS
;	COMDAT ?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z
_TEXT	SEGMENT
_qtLinkRotOffset$ = -100				; size = 16
_szLinkBiped$ = -84					; size = 16
_pOwner$ = -68						; size = 4
tv646 = -64						; size = 4
tv644 = -64						; size = 4
tv642 = -64						; size = 4
$T532057 = -64						; size = 4
$T532051 = -57						; size = 1
$T532052 = -56						; size = 16
$T530607 = -52						; size = 12
$T530608 = -40						; size = 12
$T530606 = -40						; size = 12
$T530605 = -40						; size = 12
$T530604 = -40						; size = 12
_vLinkPosOffset$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_szFileName$ = 8					; size = 4
?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z PROC ; ioMapAttachWeapon::SetFireMesh, COMDAT
; _this$ = ecx

; 71   : {

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR _szFileName$[ebp]
  0000f	83 65 c0 00	 and	 DWORD PTR $T532057[ebp], 0
  00013	8b d9		 mov	 ebx, ecx

; 72   : 	ioBaseChar *pOwner = GetOwner();

  00015	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  0001a	89 45 bc	 mov	 DWORD PTR _pOwner$[ebp], eax

; 73   : 	if( !pOwner )	return false;

  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN4@SetFireMes
$LN43@SetFireMes:
  00021	32 c0		 xor	 al, al
  00023	e9 96 02 00 00	 jmp	 $LN5@SetFireMes
$LN4@SetFireMes:

; 74   : 
; 75   : 	m_pFireMesh = g_EffectFactory.CreateEffect( szFileName );

  00028	56		 push	 esi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  0002f	8b c8		 mov	 ecx, eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z
  00037	89 83 98 08 00
	00		 mov	 DWORD PTR [ebx+2200], eax

; 76   : 	if( !m_pFireMesh )	return false;

  0003d	85 c0		 test	 eax, eax
  0003f	74 e0		 je	 SHORT $LN43@SetFireMes

; 77   : 
; 78   : 	GetParentSceneNode()->AttachObject( m_pFireMesh );

  00041	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00044	8b 11		 mov	 edx, DWORD PTR [ecx]
  00046	83 c0 14	 add	 eax, 20			; 00000014H
  00049	50		 push	 eax
  0004a	ff 92 ac 00 00
	00		 call	 DWORD PTR [edx+172]

; 79   : 	GetParentSceneNode()->SetScale( FLOAT1, FLOAT1, FLOAT1 );

  00050	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	8b d0		 mov	 edx, eax
  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	8b f8		 mov	 edi, eax
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	8b 31		 mov	 esi, DWORD PTR [ecx]
  00068	89 55 c0	 mov	 DWORD PTR tv646[ebp], edx
  0006b	db 45 c0	 fild	 DWORD PTR tv646[ebp]
  0006e	85 d2		 test	 edx, edx
  00070	79 06		 jns	 SHORT $LN40@SetFireMes
  00072	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN40@SetFireMes:
  00078	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0007b	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  0007f	89 7d c0	 mov	 DWORD PTR tv644[ebp], edi
  00082	db 45 c0	 fild	 DWORD PTR tv644[ebp]
  00085	85 ff		 test	 edi, edi
  00087	79 06		 jns	 SHORT $LN41@SetFireMes
  00089	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN41@SetFireMes:
  0008f	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00093	89 45 c0	 mov	 DWORD PTR tv642[ebp], eax
  00096	db 45 c0	 fild	 DWORD PTR tv642[ebp]
  00099	85 c0		 test	 eax, eax
  0009b	79 06		 jns	 SHORT $LN42@SetFireMes
  0009d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN42@SetFireMes:
  000a3	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a6	ff 56 1c	 call	 DWORD PTR [esi+28]

; 80   : 
; 81   : 	ioHashString szLinkBiped;

  000a9	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 82   : 	D3DXVECTOR3 vLinkPosOffset;
; 83   : 	D3DXQUATERNION qtLinkRotOffset;
; 84   : 
; 85   : 	if( m_pFireMesh->GetSkeletonName().IsEmpty() && m_pFireMesh->GetFirstLinkOffset(szLinkBiped, vLinkPosOffset, qtLinkRotOffset ) )

  000b2	8b 8b 98 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2200]
  000b8	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  000bc	8d 45 c8	 lea	 eax, DWORD PTR $T532052[ebp]
  000bf	50		 push	 eax
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ
  000c6	8b c8		 mov	 ecx, eax
  000c8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000cc	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR $T532057[ebp], 1
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000d9	84 c0		 test	 al, al
  000db	74 20		 je	 SHORT $LN9@SetFireMes
  000dd	8b 8b 98 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2200]
  000e3	8d 45 9c	 lea	 eax, DWORD PTR _qtLinkRotOffset$[ebp]
  000e6	50		 push	 eax
  000e7	8d 45 e4	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  000ea	50		 push	 eax
  000eb	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  000ee	50		 push	 eax
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z
  000f5	c6 45 c7 01	 mov	 BYTE PTR $T532051[ebp], 1
  000f9	84 c0		 test	 al, al
  000fb	75 04		 jne	 SHORT $LN10@SetFireMes
$LN9@SetFireMes:
  000fd	c6 45 c7 00	 mov	 BYTE PTR $T532051[ebp], 0
$LN10@SetFireMes:
  00101	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00105	8d 4d c8	 lea	 ecx, DWORD PTR $T532052[ebp]
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0010e	80 7d c7 00	 cmp	 BYTE PTR $T532051[ebp], 0
  00112	0f 84 4a 01 00
	00		 je	 $LN1@SetFireMes

; 86   : 	{
; 87   : 		ioBiped *pLinked = pOwner->GetGroup()->GetBiped( szLinkBiped );

  00118	8b 45 bc	 mov	 eax, DWORD PTR _pOwner$[ebp]
  0011b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011e	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  00121	50		 push	 eax
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z
  00128	8b f8		 mov	 edi, eax

; 88   : 		if( pLinked )

  0012a	85 ff		 test	 edi, edi
  0012c	0f 84 30 01 00
	00		 je	 $LN1@SetFireMes

; 89   : 		{
; 90   : 			vLinkPosOffset = pLinked->GetDerivedOrientation() * vLinkPosOffset + pLinked->GetDerivedPosition();

  00132	8b 07		 mov	 eax, DWORD PTR [edi]
  00134	8b cf		 mov	 ecx, edi
  00136	ff 50 7c	 call	 DWORD PTR [eax+124]
  00139	8b f0		 mov	 esi, eax
  0013b	8d 45 e4	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  0013e	50		 push	 eax
  0013f	8b 07		 mov	 eax, DWORD PTR [edi]
  00141	8b cf		 mov	 ecx, edi
  00143	ff 50 78	 call	 DWORD PTR [eax+120]
  00146	50		 push	 eax
  00147	8d 45 d8	 lea	 eax, DWORD PTR $T530604[ebp]
  0014a	50		 push	 eax
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00151	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00155	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00159	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0015e	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 91   : 			vLinkPosOffset = vLinkPosOffset * pOwner->GetWorldScale();

  00163	8b 4d bc	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00166	0f 5a c9	 cvtps2pd xmm1, xmm1
  00169	0f 5a c0	 cvtps2pd xmm0, xmm0
  0016c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00170	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00175	0f 5a d2	 cvtps2pd xmm2, xmm2
  00178	0f 5a c9	 cvtps2pd xmm1, xmm1
  0017b	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0017f	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00184	0f 5a d2	 cvtps2pd xmm2, xmm2
  00187	0f 5a db	 cvtps2pd xmm3, xmm3
  0018a	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0018e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00192	f3 0f 11 45 d8	 movss	 DWORD PTR $T530605[ebp], xmm0
  00197	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0019b	f3 0f 11 4d dc	 movss	 DWORD PTR $T530605[ebp+4], xmm1
  001a0	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001a4	f3 0f 11 55 e0	 movss	 DWORD PTR $T530605[ebp+8], xmm2
  001a9	8d 75 d8	 lea	 esi, DWORD PTR $T530605[ebp]
  001ac	8d 7d e4	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  001af	a5		 movsd
  001b0	a5		 movsd
  001b1	a5		 movsd
  001b2	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b7	ff 50 78	 call	 DWORD PTR [eax+120]
  001ba	50		 push	 eax
  001bb	8d 45 e4	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  001be	50		 push	 eax
  001bf	8d 45 d8	 lea	 eax, DWORD PTR $T530606[ebp]
  001c2	50		 push	 eax
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z
  001c9	8b f0		 mov	 esi, eax
  001cb	8d 7d e4	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  001ce	a5		 movsd
  001cf	a5		 movsd
  001d0	a5		 movsd

; 92   : 			vLinkPosOffset = pOwner->GetWorldOrientation() * vLinkPosOffset + pOwner->GetWorldPosition();

  001d1	8b 7d bc	 mov	 edi, DWORD PTR _pOwner$[ebp]
  001d4	8b 07		 mov	 eax, DWORD PTR [edi]
  001d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d9	8b cf		 mov	 ecx, edi
  001db	ff 50 70	 call	 DWORD PTR [eax+112]
  001de	8b f0		 mov	 esi, eax
  001e0	8d 45 e4	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  001e3	50		 push	 eax
  001e4	8b 07		 mov	 eax, DWORD PTR [edi]
  001e6	8b cf		 mov	 ecx, edi
  001e8	ff 50 74	 call	 DWORD PTR [eax+116]
  001eb	50		 push	 eax
  001ec	8d 45 cc	 lea	 eax, DWORD PTR $T530607[ebp]
  001ef	50		 push	 eax
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  001f6	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  001fa	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  001fe	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00203	0f 5a c9	 cvtps2pd xmm1, xmm1
  00206	0f 5a c0	 cvtps2pd xmm0, xmm0
  00209	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0020d	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00212	0f 5a c9	 cvtps2pd xmm1, xmm1
  00215	0f 5a d2	 cvtps2pd xmm2, xmm2
  00218	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0021f	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00223	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00228	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  0022d	0f 5a d2	 cvtps2pd xmm2, xmm2
  00230	0f 5a db	 cvtps2pd xmm3, xmm3
  00233	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00237	f3 0f 11 45 d8	 movss	 DWORD PTR $T530608[ebp], xmm0
  0023c	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00240	f3 0f 11 4d dc	 movss	 DWORD PTR $T530608[ebp+4], xmm1
  00245	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00249	f3 0f 11 55 e0	 movss	 DWORD PTR $T530608[ebp+8], xmm2
  0024e	8d 75 d8	 lea	 esi, DWORD PTR $T530608[ebp]
  00251	8d 7d e4	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  00254	a5		 movsd
  00255	a5		 movsd

; 93   : 			SetPosition( vLinkPosOffset );

  00256	8d 45 e4	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  00259	50		 push	 eax
  0025a	8b cb		 mov	 ecx, ebx
  0025c	a5		 movsd
  0025d	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
$LN1@SetFireMes:

; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	m_pFireMesh->UpdateBounds( true );

  00262	8b 8b 98 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2200]
  00268	83 c1 14	 add	 ecx, 20			; 00000014H
  0026b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0026d	6a 01		 push	 1
  0026f	ff 50 44	 call	 DWORD PTR [eax+68]

; 98   : 	m_LocalAttackBox = m_pFireMesh->GetCollisionBox();

  00272	8b 8b 98 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2200]
  00278	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ
  0027e	6a 11		 push	 17			; 00000011H
  00280	59		 pop	 ecx
  00281	8b f0		 mov	 esi, eax
  00283	8d bb ac 08 00
	00		 lea	 edi, DWORD PTR [ebx+2220]
  00289	f3 a5		 rep movsd

; 99   : 
; 100  : 	m_fExtentsOffSet = m_LocalAttackBox.GetExtents( 1 );

  0028b	6a 01		 push	 1
  0028d	8d 8b ac 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2220]
  00293	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z

; 101  : 
; 102  : 	AddEffectEvent( m_pFireMesh );

  00299	ff b3 98 08 00
	00		 push	 DWORD PTR [ebx+2200]
  0029f	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a1	d9 9b 00 09 00
	00		 fstp	 DWORD PTR [ebx+2304]
  002a7	8b cb		 mov	 ecx, ebx
  002a9	ff 90 68 01 00
	00		 call	 DWORD PTR [eax+360]

; 103  : 	return true;

  002af	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002b3	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  002b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  002bc	b0 01		 mov	 al, 1
$LN5@SetFireMes:

; 104  : }

  002be	e8 00 00 00 00	 call	 __EH_epilog3_GS
  002c3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z$1:
  00009	8b 45 c0	 mov	 eax, DWORD PTR $T532057[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $LN13@SetFireMes
  00015	83 65 c0 fe	 and	 DWORD PTR $T532057[ebp], -2 ; fffffffeH
  00019	8d 4d c8	 lea	 ecx, DWORD PTR $T532052[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN13@SetFireMes:
  00022	c3		 ret	 0
__ehhandler$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z ENDP ; ioMapAttachWeapon::SetFireMesh
PUBLIC	_pStage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioWeapon::SetOrientation
EXTRN	_D3DXVec3Normalize@8:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetStartPosition@ioMapAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
tv375 = -68						; size = 4
_qtRotate$530618 = -64					; size = 16
_pStage$GSCopy$ = -48					; size = 4
_this$GSCopy$ = -44					; size = 4
$T530621 = -40						; size = 12
_vDir$530619 = -28					; size = 12
_vNewPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_vPos$ = 8						; size = 4
_pStage$ = 12						; size = 4
?SetStartPosition@ioMapAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z PROC ; ioMapAttachWeapon::SetStartPosition, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _vPos$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi

; 108  : 	D3DXVECTOR3 vNewPos = vPos;

  00019	8b f3		 mov	 esi, ebx
  0001b	8d 7d f0	 lea	 edi, DWORD PTR _vNewPos$[ebp]
  0001e	a5		 movsd
  0001f	a5		 movsd

; 117  : 		{
; 118  : 			float fRayHeight = vPos.y+30.0f;

  00020	89 4d d4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00023	89 45 d0	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00026	a5		 movsd
  00027	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 40 01 00
	00		 je	 $LN18@SetStartPo

; 109  : 	ioBaseChar *pOwner = GetOwner();
; 110  : 	if( pOwner )
; 111  : 	{
; 112  : 		D3DXQUATERNION qtRotate = pOwner->GetTargetRot();

  00034	8d b0 a4 06 00
	00		 lea	 esi, DWORD PTR [eax+1700]
  0003a	8d 7d c0	 lea	 edi, DWORD PTR _qtRotate$530618[ebp]
  0003d	a5		 movsd
  0003e	a5		 movsd
  0003f	a5		 movsd
  00040	a5		 movsd

; 113  : 		D3DXVECTOR3 vDir = qtRotate * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	0f 57 c0	 xorps	 xmm0, xmm0
  00049	89 45 bc	 mov	 DWORD PTR tv375[ebp], eax
  0004c	db 45 bc	 fild	 DWORD PTR tv375[ebp]
  0004f	f3 0f 11 45 d8	 movss	 DWORD PTR $T530621[ebp], xmm0
  00054	f3 0f 11 45 dc	 movss	 DWORD PTR $T530621[ebp+4], xmm0
  00059	85 c0		 test	 eax, eax
  0005b	79 06		 jns	 SHORT $LN19@SetStartPo
  0005d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN19@SetStartPo:
  00063	8d 45 d8	 lea	 eax, DWORD PTR $T530621[ebp]
  00066	d9 e0		 fchs
  00068	50		 push	 eax
  00069	d9 5d e0	 fstp	 DWORD PTR $T530621[ebp+8]
  0006c	8d 45 c0	 lea	 eax, DWORD PTR _qtRotate$530618[ebp]
  0006f	50		 push	 eax
  00070	8d 45 e4	 lea	 eax, DWORD PTR _vDir$530619[ebp]
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 114  : 		D3DXVec3Normalize( &vDir, &vDir );

  0007d	8d 45 e4	 lea	 eax, DWORD PTR _vDir$530619[ebp]
  00080	50		 push	 eax
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 115  : 
; 116  : 		if( pStage && m_pFireMesh )

  00087	8b 4d d0	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  0008a	33 c0		 xor	 eax, eax
  0008c	3b c8		 cmp	 ecx, eax
  0008e	74 47		 je	 SHORT $LN17@SetStartPo
  00090	8b 55 d4	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00093	39 82 98 08 00
	00		 cmp	 DWORD PTR [edx+2200], eax
  00099	74 3c		 je	 SHORT $LN17@SetStartPo

; 117  : 		{
; 118  : 			float fRayHeight = vPos.y+30.0f;

  0009b	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]

; 119  : 			float fMapHeight = pStage->GetMapHeight( vNewPos.x, vNewPos.z, NULL, false, fRayHeight );

  000a0	50		 push	 eax
  000a1	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  000ac	51		 push	 ecx
  000ad	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vNewPos$[ebp+8]
  000bb	50		 push	 eax
  000bc	50		 push	 eax
  000bd	51		 push	 ecx
  000be	51		 push	 ecx
  000bf	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vNewPos$[ebp]
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight

; 120  : 
; 121  : 			vNewPos.y = fMapHeight;

  000d4	d9 5d f4	 fstp	 DWORD PTR _vNewPos$[ebp+4]
$LN17@SetStartPo:

; 122  : 		}
; 123  : 
; 124  : 		vNewPos += m_fDirOffset * vDir;

  000d7	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000da	f3 0f 10 81 04
	09 00 00	 movss	 xmm0, DWORD PTR [ecx+2308]
  000e2	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _vDir$530619[ebp]
  000e7	0f 5a c8	 cvtps2pd xmm1, xmm0
  000ea	0f 5a d8	 cvtps2pd xmm3, xmm0
  000ed	0f 5a d2	 cvtps2pd xmm2, xmm2
  000f0	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000f4	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vDir$530619[ebp+4]
  000f9	0f 5a d2	 cvtps2pd xmm2, xmm2
  000fc	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00100	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _vDir$530619[ebp+8]
  00105	0f 5a c0	 cvtps2pd xmm0, xmm0
  00108	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0010c	0f 5a db	 cvtps2pd xmm3, xmm3
  0010f	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  00113	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00117	0f 57 c0	 xorps	 xmm0, xmm0
  0011a	66 0f 5a c3	 cvtpd2ps xmm0, xmm3
  0011e	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _vNewPos$[ebp]
  00123	0f 5a db	 cvtps2pd xmm3, xmm3
  00126	f2 0f 58 cb	 addsd	 xmm1, xmm3
  0012a	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0012e	f3 0f 11 4d f0	 movss	 DWORD PTR _vNewPos$[ebp], xmm1
  00133	0f 57 c9	 xorps	 xmm1, xmm1
  00136	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0013a	f3 0f 5a ca	 cvtss2sd xmm1, xmm2
  0013e	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vNewPos$[ebp+4]
  00143	0f 5a d2	 cvtps2pd xmm2, xmm2
  00146	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0014a	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0014e	f3 0f 11 4d f4	 movss	 DWORD PTR _vNewPos$[ebp+4], xmm1
  00153	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vNewPos$[ebp+8]
  00158	0f 5a c0	 cvtps2pd xmm0, xmm0
  0015b	0f 5a c9	 cvtps2pd xmm1, xmm1

; 125  : 
; 126  : 		SetOrientation( qtRotate );

  0015e	8d 45 c0	 lea	 eax, DWORD PTR _qtRotate$530618[ebp]
  00161	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00165	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00169	50		 push	 eax
  0016a	f3 0f 11 45 f8	 movss	 DWORD PTR _vNewPos$[ebp+8], xmm0
  0016f	e8 00 00 00 00	 call	 ?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z ; ioWeapon::SetOrientation
$LN18@SetStartPo:

; 127  : 	}
; 128  : 
; 129  : 	SetPosition( vNewPos );

  00174	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00177	8d 45 f0	 lea	 eax, DWORD PTR _vNewPos$[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 130  : }

  00180	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	33 cd		 xor	 ecx, ebp
  00187	5b		 pop	 ebx
  00188	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018d	c9		 leave
  0018e	c2 08 00	 ret	 8
?SetStartPosition@ioMapAttachWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ENDP ; ioMapAttachWeapon::SetStartPosition
_TEXT	ENDS
PUBLIC	__real@40a00000
PUBLIC	?OnDelayState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ; ioMapAttachWeapon::OnDelayState
EXTRN	?UpdateAttachAreaWeapon@ioWeapon@@IAEXPAVioPlayStage@@@Z:PROC ; ioWeapon::UpdateAttachAreaWeapon
EXTRN	__imp_?GetFrameCounter@ioFrameTimer@@QBEKXZ:PROC
;	COMDAT __real@40a00000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
CONST	ENDS
;	COMDAT ?OnDelayState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
_vPos$ = -20						; size = 12
tv244 = -8						; size = 8
tv234 = -4						; size = 4
tv230 = -4						; size = 4
tv172 = -4						; size = 4
tv156 = 8						; size = 4
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?OnDelayState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z PROC ; ioMapAttachWeapon::OnDelayState, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 158  : 	if( m_dwCreatedTime + m_dwDelayDuration < FRAMEGETTIME() )

  00008	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b d9		 mov	 ebx, ecx
  00010	ff d7		 call	 edi
  00012	8b c8		 mov	 ecx, eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0001a	8b 8b f0 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2288]
  00020	03 8b d4 04 00
	00		 add	 ecx, DWORD PTR [ebx+1236]
  00026	3b c8		 cmp	 ecx, eax
  00028	73 0f		 jae	 SHORT $LN5@OnDelaySta

; 159  : 	{
; 160  : 		Explosion( pStage );

  0002a	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  0002d	8b cb		 mov	 ecx, ebx
  0002f	e8 00 00 00 00	 call	 ?Explosion@ioMapAttachWeapon@@QAEXPAVioPlayStage@@@Z ; ioMapAttachWeapon::Explosion

; 161  : 		return;

  00034	e9 ea 00 00 00	 jmp	 $LN6@OnDelaySta
$LN5@OnDelaySta:

; 162  : 	}
; 163  : 
; 164  : 	if( m_iConveyerMoveFrameIdx > 0 )

  00039	83 bb 08 09 00
	00 00		 cmp	 DWORD PTR [ebx+2312], 0
  00040	56		 push	 esi
  00041	7e 24		 jle	 SHORT $LN3@OnDelaySta

; 165  : 	{
; 166  : 		if( m_iConveyerMoveFrameIdx + 1 < (int)g_FrameTimer.GetFrameCounter() )

  00043	ff d7		 call	 edi
  00045	8b c8		 mov	 ecx, eax
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFrameCounter@ioFrameTimer@@QBEKXZ
  0004d	8b 8b 08 09 00
	00		 mov	 ecx, DWORD PTR [ebx+2312]
  00053	41		 inc	 ecx
  00054	3b c8		 cmp	 ecx, eax
  00056	7d 0f		 jge	 SHORT $LN3@OnDelaySta

; 167  : 		{
; 168  : 			Explosion( pStage );

  00058	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?Explosion@ioMapAttachWeapon@@QAEXPAVioPlayStage@@@Z ; ioMapAttachWeapon::Explosion

; 169  : 			return;

  00062	e9 bb 00 00 00	 jmp	 $LN14@OnDelaySta
$LN3@OnDelaySta:

; 170  : 		}
; 171  : 	}
; 172  : 
; 173  : 	// drop Check
; 174  : 	D3DXVECTOR3 vPos = GetPosition();

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]
  00069	8b cb		 mov	 ecx, ebx
  0006b	ff 50 70	 call	 DWORD PTR [eax+112]
  0006e	8b f0		 mov	 esi, eax
  00070	8d 7d ec	 lea	 edi, DWORD PTR _vPos$[ebp]
  00073	a5		 movsd
  00074	a5		 movsd
  00075	a5		 movsd

; 175  : 	float fMapHeight = pStage->GetMapHeight( vPos.x, vPos.z, NULL, false, vPos.y+30.0f );

  00076	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  0007b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0007e	33 f6		 xor	 esi, esi
  00080	56		 push	 esi
  00081	51		 push	 ecx
  00082	f2 0f 11 45 f8	 movsd	 QWORD PTR tv244[ebp], xmm0
  00087	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000

; 176  : 
; 177  : 	if( fabs(vPos.y - fMapHeight) > 5.0f )

  0008f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  0009d	56		 push	 esi
  0009e	56		 push	 esi
  0009f	51		 push	 ecx
  000a0	51		 push	 ecx
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _pStage$[ebp]
  000a4	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000aa	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight
  000b9	dc 6d f8	 fsubr	 QWORD PTR tv244[ebp]
  000bc	d9 5d fc	 fstp	 DWORD PTR tv234[ebp]
  000bf	d9 45 fc	 fld	 DWORD PTR tv234[ebp]
  000c2	d9 e1		 fabs
  000c4	d9 5d fc	 fstp	 DWORD PTR tv230[ebp]
  000c7	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40a00000
  000cd	d9 45 fc	 fld	 DWORD PTR tv230[ebp]
  000d0	df f1		 fcomip	 ST(1)
  000d2	dd d8		 fstp	 ST(0)
  000d4	76 0a		 jbe	 SHORT $LN2@OnDelaySta

; 178  : 	{
; 179  : 		m_State = TS_DROP;

  000d6	c7 83 94 08 00
	00 02 00 00 00	 mov	 DWORD PTR [ebx+2196], 2
$LN2@OnDelaySta:

; 180  : 	}
; 181  : 
; 182  : 	if( m_pFireMesh )

  000e0	39 b3 98 08 00
	00		 cmp	 DWORD PTR [ebx+2200], esi
  000e6	74 30		 je	 SHORT $LN1@OnDelaySta

; 183  : 	{
; 184  : 		m_pFireMesh->Update( fTimePerSec * FLOAT1000 );

  000e8	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  000ed	8b 8b 98 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2200]
  000f3	83 c1 14	 add	 ecx, 20			; 00000014H
  000f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f8	89 45 fc	 mov	 DWORD PTR tv172[ebp], eax
  000fb	db 45 fc	 fild	 DWORD PTR tv172[ebp]
  000fe	85 c0		 test	 eax, eax
  00100	79 06		 jns	 SHORT $LN15@OnDelaySta
  00102	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN15@OnDelaySta:
  00108	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]
  0010b	51		 push	 ecx
  0010c	d9 5d 08	 fstp	 DWORD PTR tv156[ebp]
  0010f	d9 45 08	 fld	 DWORD PTR tv156[ebp]
  00112	d9 1c 24	 fstp	 DWORD PTR [esp]
  00115	ff 52 40	 call	 DWORD PTR [edx+64]
$LN1@OnDelaySta:

; 185  : 	}
; 186  : 
; 187  : 	UpdateAttachAreaWeapon( pStage );

  00118	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  0011b	8b cb		 mov	 ecx, ebx
  0011d	e8 00 00 00 00	 call	 ?UpdateAttachAreaWeapon@ioWeapon@@IAEXPAVioPlayStage@@@Z ; ioWeapon::UpdateAttachAreaWeapon
$LN14@OnDelaySta:
  00122	5e		 pop	 esi
$LN6@OnDelaySta:
  00123	5f		 pop	 edi
  00124	5b		 pop	 ebx

; 188  : }

  00125	c9		 leave
  00126	c2 08 00	 ret	 8
?OnDelayState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ENDP ; ioMapAttachWeapon::OnDelayState
_TEXT	ENDS
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?OnDropState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ; ioMapAttachWeapon::OnDropState
EXTRN	?GetRoomGravity@ioPlayStage@@QAEMXZ:PROC	; ioPlayStage::GetRoomGravity
; Function compile flags: /Ogsp
;	COMDAT ?OnDropState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
_fCurGravity$ = -28					; size = 4
_pStage$GSCopy$ = -24					; size = 4
tv226 = -20						; size = 4
tv85 = -20						; size = 4
_fPreMapHeight$ = -20					; size = 4
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?OnDropState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z PROC ; ioMapAttachWeapon::OnDropState, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _pStage$[ebp]
  00015	8b d9		 mov	 ebx, ecx

; 215  : 	}
; 216  : 
; 217  : 	UpdateAttachAreaWeapon( pStage );

  00017	89 75 e8	 mov	 DWORD PTR _pStage$GSCopy$[ebp], esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00020	8b c8		 mov	 ecx, eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00028	8b 8b f0 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2288]
  0002e	03 8b d4 04 00
	00		 add	 ecx, DWORD PTR [ebx+1236]
  00034	3b c8		 cmp	 ecx, eax
  00036	8b cb		 mov	 ecx, ebx
  00038	73 0b		 jae	 SHORT $LN3@OnDropStat

; 192  : 	if( m_dwCreatedTime + m_dwDelayDuration < FRAMEGETTIME() )
; 193  : 	{
; 194  : 		Explosion( pStage );

  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ?Explosion@ioMapAttachWeapon@@QAEXPAVioPlayStage@@@Z ; ioMapAttachWeapon::Explosion

; 195  : 		return;

  00040	e9 ec 00 00 00	 jmp	 $LN4@OnDropStat
$LN3@OnDropStat:

; 196  : 	}
; 197  : 
; 198  : 	D3DXVECTOR3 vPos = GetPosition();

  00045	8b 03		 mov	 eax, DWORD PTR [ebx]
  00047	57		 push	 edi
  00048	ff 50 70	 call	 DWORD PTR [eax+112]
  0004b	8b f0		 mov	 esi, eax
  0004d	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00050	a5		 movsd
  00051	a5		 movsd
  00052	a5		 movsd

; 199  : 
; 200  : 	float fPreMapHeight = pStage->GetMapHeight( vPos.x, vPos.z, NULL, false, vPos.y+30.0f );

  00053	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  00058	33 f6		 xor	 esi, esi
  0005a	56		 push	 esi
  0005b	51		 push	 ecx
  0005c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0005f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  00067	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0006b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00070	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  00075	56		 push	 esi
  00076	56		 push	 esi
  00077	51		 push	 ecx
  00078	51		 push	 ecx
  00079	8b 4d e8	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  0007c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00082	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	e8 00 00 00 00	 call	 ?GetMapHeight@ioPlayStage@@QAEMMMPBVioGameEntity@@_NM1@Z ; ioPlayStage::GetMapHeight
  00091	d9 5d ec	 fstp	 DWORD PTR _fPreMapHeight$[ebp]

; 201  : 	float fCurGravity = pStage->GetRoomGravity() * fTimePerSec;

  00094	8b 4d e8	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  00097	e8 00 00 00 00	 call	 ?GetRoomGravity@ioPlayStage@@QAEMXZ ; ioPlayStage::GetRoomGravity
  0009c	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]

; 202  : 	vPos.y -= fCurGravity;

  0009f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  000a4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a7	d9 5d e4	 fstp	 DWORD PTR _fCurGravity$[ebp]
  000aa	5f		 pop	 edi
  000ab	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _fCurGravity$[ebp]
  000b0	0f 5a c9	 cvtps2pd xmm1, xmm1
  000b3	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000b7	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 203  : 
; 204  : 	if( vPos.y < fPreMapHeight )

  000bb	0f 57 c9	 xorps	 xmm1, xmm1
  000be	f3 0f 5a c8	 cvtss2sd xmm1, xmm0
  000c2	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$[ebp+4], xmm0
  000c7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fPreMapHeight$[ebp]
  000cc	0f 5a d0	 cvtps2pd xmm2, xmm0
  000cf	66 0f 2f d1	 comisd	 xmm2, xmm1
  000d3	76 0f		 jbe	 SHORT $LN2@OnDropStat

; 205  : 	{
; 206  : 		vPos.y = fPreMapHeight;

  000d5	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$[ebp+4], xmm0

; 207  : 		m_State = TS_DELAY;

  000da	c7 83 94 08 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+2196], 1
$LN2@OnDropStat:

; 208  : 	}
; 209  : 
; 210  : 	SetPosition( vPos );

  000e4	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  000e7	50		 push	 eax
  000e8	8b cb		 mov	 ecx, ebx
  000ea	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 211  : 
; 212  : 	if( m_pFireMesh )

  000ef	39 b3 98 08 00
	00		 cmp	 DWORD PTR [ebx+2200], esi
  000f5	74 30		 je	 SHORT $LN1@OnDropStat

; 213  : 	{
; 214  : 		m_pFireMesh->Update( fTimePerSec * FLOAT1000 );

  000f7	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  000fc	8b 8b 98 08 00
	00		 mov	 ecx, DWORD PTR [ebx+2200]
  00102	83 c1 14	 add	 ecx, 20			; 00000014H
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	89 45 ec	 mov	 DWORD PTR tv226[ebp], eax
  0010a	db 45 ec	 fild	 DWORD PTR tv226[ebp]
  0010d	85 c0		 test	 eax, eax
  0010f	79 06		 jns	 SHORT $LN8@OnDropStat
  00111	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@OnDropStat:
  00117	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]
  0011a	51		 push	 ecx
  0011b	d9 5d ec	 fstp	 DWORD PTR tv85[ebp]
  0011e	d9 45 ec	 fld	 DWORD PTR tv85[ebp]
  00121	d9 1c 24	 fstp	 DWORD PTR [esp]
  00124	ff 52 40	 call	 DWORD PTR [edx+64]
$LN1@OnDropStat:

; 215  : 	}
; 216  : 
; 217  : 	UpdateAttachAreaWeapon( pStage );

  00127	ff 75 e8	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  0012a	8b cb		 mov	 ecx, ebx
  0012c	e8 00 00 00 00	 call	 ?UpdateAttachAreaWeapon@ioWeapon@@IAEXPAVioPlayStage@@@Z ; ioWeapon::UpdateAttachAreaWeapon
$LN4@OnDropStat:

; 218  : }

  00131	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00134	5e		 pop	 esi
  00135	33 cd		 xor	 ecx, ebp
  00137	5b		 pop	 ebx
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	c9		 leave
  0013e	c2 08 00	 ret	 8
?OnDropState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ENDP ; ioMapAttachWeapon::OnDropState
_TEXT	ENDS
EXTRN	__imp_?SetNull@ioOrientBox@@QAEXXZ:PROC
EXTRN	__imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z:PROC
EXTRN	__imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?IsNull@ioOrientBox@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?UpdateWorldAttackBox@ioMapAttachWeapon@@MAEXM_N@Z
_TEXT	SEGMENT
tv360 = -8						; size = 4
tv366 = -4						; size = 4
tv335 = -4						; size = 4
_fTimePerSec$ = 8					; size = 4
tv352 = 12						; size = 4
_fMapCollisionRate$ = 12				; size = 4
_bSetNull$ = 12						; size = 1
?UpdateWorldAttackBox@ioMapAttachWeapon@@MAEXM_N@Z PROC	; ioMapAttachWeapon::UpdateWorldAttackBox, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	8b d9		 mov	 ebx, ecx

; 272  : 	if( !IsLive() || bSetNull )

  00008	80 bb 82 05 00
	00 00		 cmp	 BYTE PTR [ebx+1410], 0
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	0f 84 04 01 00
	00		 je	 $LN2@UpdateWorl
  00017	80 7d 0c 00	 cmp	 BYTE PTR _bSetNull$[ebp], 0
  0001b	0f 85 fa 00 00
	00		 jne	 $LN2@UpdateWorl

; 276  : 		return;
; 277  : 	}
; 278  : 
; 279  : 	m_WorldAttackBox = GetLocalAttackBox();

  00021	8b 03		 mov	 eax, DWORD PTR [ebx]
  00023	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00029	6a 11		 push	 17			; 00000011H
  0002b	59		 pop	 ecx
  0002c	8b f0		 mov	 esi, eax
  0002e	8d bb e8 04 00
	00		 lea	 edi, DWORD PTR [ebx+1256]
  00034	f3 a5		 rep movsd

; 280  : 	m_WorldAttackBoxForMap = m_WorldAttackBox;

  00036	6a 11		 push	 17			; 00000011H
  00038	8b f0		 mov	 esi, eax

; 281  : 
; 282  : 	float fMapCollisionRate = GetAttribute()->m_fMapCollisionBoxRate;

  0003a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0003c	59		 pop	 ecx
  0003d	8d bb 2c 05 00
	00		 lea	 edi, DWORD PTR [ebx+1324]
  00043	f3 a5		 rep movsd
  00045	8b cb		 mov	 ecx, ebx
  00047	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]

; 283  : 	m_WorldAttackBoxForMap.SetExtents( 0, m_WorldAttackBox.GetExtents(0)*fMapCollisionRate );

  0004d	6a 00		 push	 0
  0004f	d9 80 a8 01 00
	00		 fld	 DWORD PTR [eax+424]
  00055	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  0005b	d9 5d 0c	 fstp	 DWORD PTR _fMapCollisionRate$[ebp]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  00064	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  00067	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetExtents@ioOrientBox@@QAEXHM@Z
  0006d	51		 push	 ecx
  0006e	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  00074	d9 5d fc	 fstp	 DWORD PTR tv366[ebp]
  00077	d9 45 fc	 fld	 DWORD PTR tv366[ebp]
  0007a	89 4d fc	 mov	 DWORD PTR tv335[ebp], ecx
  0007d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00080	6a 00		 push	 0
  00082	ff d6		 call	 esi

; 284  : 	m_WorldAttackBoxForMap.SetExtents( 1, m_WorldAttackBox.GetExtents(1)*fMapCollisionRate );

  00084	6a 01		 push	 1
  00086	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  00092	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  00095	51		 push	 ecx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR tv335[ebp]
  00099	d9 5d f8	 fstp	 DWORD PTR tv360[ebp]
  0009c	d9 45 f8	 fld	 DWORD PTR tv360[ebp]
  0009f	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a2	6a 01		 push	 1
  000a4	ff d6		 call	 esi

; 285  : 	m_WorldAttackBoxForMap.SetExtents( 2, m_WorldAttackBox.GetExtents(2)*fMapCollisionRate );

  000a6	6a 02		 push	 2
  000a8	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  000b4	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  000b7	51		 push	 ecx
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR tv335[ebp]
  000bb	d9 5d 0c	 fstp	 DWORD PTR tv352[ebp]
  000be	d9 45 0c	 fld	 DWORD PTR tv352[ebp]
  000c1	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c4	6a 02		 push	 2
  000c6	ff d6		 call	 esi

; 286  : 
; 287  : 	if( !m_WorldAttackBox.IsNull() )

  000c8	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsNull@ioOrientBox@@QBE_NXZ
  000d4	84 c0		 test	 al, al
  000d6	75 59		 jne	 SHORT $LN1@UpdateWorl

; 288  : 	{
; 289  : 		m_WorldAttackBox.Transform( GetPosition(),
; 290  : 									ioMath::UNIT_ALL,
; 291  : 									GetParentSceneNode()->GetDerivedOrientation() );

  000d8	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000db	8b 01		 mov	 eax, DWORD PTR [ecx]
  000dd	ff 50 78	 call	 DWORD PTR [eax+120]
  000e0	50		 push	 eax
  000e1	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A
  000e7	8b 03		 mov	 eax, DWORD PTR [ebx]
  000e9	8b cb		 mov	 ecx, ebx
  000eb	ff 50 70	 call	 DWORD PTR [eax+112]
  000ee	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z
  000f4	50		 push	 eax
  000f5	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000fb	ff d6		 call	 esi

; 292  : 
; 293  : 		m_WorldAttackBoxForMap.Transform( GetPosition(),
; 294  : 										  ioMath::UNIT_ALL,
; 295  : 										  GetParentSceneNode()->GetDerivedOrientation() );

  000fd	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00100	8b 01		 mov	 eax, DWORD PTR [ecx]
  00102	ff 50 78	 call	 DWORD PTR [eax+120]
  00105	50		 push	 eax
  00106	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A
  0010c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010e	8b cb		 mov	 ecx, ebx
  00110	ff 50 70	 call	 DWORD PTR [eax+112]
  00113	8b 4d fc	 mov	 ecx, DWORD PTR tv335[ebp]
  00116	50		 push	 eax
  00117	ff d6		 call	 esi
  00119	eb 16		 jmp	 SHORT $LN1@UpdateWorl
$LN2@UpdateWorl:

; 273  : 	{
; 274  : 		m_WorldAttackBox.SetNull();

  0011b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetNull@ioOrientBox@@QAEXXZ
  00121	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00127	ff d6		 call	 esi

; 275  : 		m_WorldAttackBoxForMap.SetNull();

  00129	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  0012f	ff d6		 call	 esi
$LN1@UpdateWorl:
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx

; 296  : 	}
; 297  : }

  00134	c9		 leave
  00135	c2 08 00	 ret	 8
?UpdateWorldAttackBox@ioMapAttachWeapon@@MAEXM_N@Z ENDP	; ioMapAttachWeapon::UpdateWorldAttackBox
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?TranslateByConveyer@ioMapAttachWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioMapAttachWeapon::TranslateByConveyer
; Function compile flags: /Ogsp
;	COMDAT ?TranslateByConveyer@ioMapAttachWeapon@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
$T530743 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_vMoveAmt$ = 8						; size = 4
?TranslateByConveyer@ioMapAttachWeapon@@QAEXABUD3DXVECTOR3@@@Z PROC ; ioMapAttachWeapon::TranslateByConveyer, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 380  : 	if( m_State != TS_EXPLOSION )

  00013	83 be 94 08 00
	00 03		 cmp	 DWORD PTR [esi+2196], 3
  0001a	57		 push	 edi
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _vMoveAmt$[ebp]
  0001e	74 79		 je	 SHORT $LN1@TranslateB

; 381  : 	{
; 382  : 		SetPosition( GetPosition() + vMoveAmt );

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	ff 50 70	 call	 DWORD PTR [eax+112]
  00025	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0002a	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0002f	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00034	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00038	0f 5a c9	 cvtps2pd xmm1, xmm1
  0003b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0003e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00042	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  00047	0f 5a d2	 cvtps2pd xmm2, xmm2
  0004a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004d	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00051	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]
  00055	0f 5a d2	 cvtps2pd xmm2, xmm2
  00058	0f 5a db	 cvtps2pd xmm3, xmm3
  0005b	8d 45 f0	 lea	 eax, DWORD PTR $T530743[ebp]
  0005e	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00062	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00066	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0006a	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0006e	50		 push	 eax
  0006f	8b ce		 mov	 ecx, esi
  00071	f3 0f 11 55 f0	 movss	 DWORD PTR $T530743[ebp], xmm2
  00076	f3 0f 11 45 f4	 movss	 DWORD PTR $T530743[ebp+4], xmm0
  0007b	f3 0f 11 4d f8	 movss	 DWORD PTR $T530743[ebp+8], xmm1
  00080	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 383  : 		m_iConveyerMoveFrameIdx = g_FrameTimer.GetFrameCounter();

  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0008b	8b c8		 mov	 ecx, eax
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFrameCounter@ioFrameTimer@@QBEKXZ
  00093	89 86 08 09 00
	00		 mov	 DWORD PTR [esi+2312], eax
$LN1@TranslateB:

; 384  : 	}
; 385  : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	5f		 pop	 edi
  0009d	33 cd		 xor	 ecx, ebp
  0009f	5e		 pop	 esi
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	c9		 leave
  000a6	c2 04 00	 ret	 4
?TranslateByConveyer@ioMapAttachWeapon@@QAEXABUD3DXVECTOR3@@@Z ENDP ; ioMapAttachWeapon::TranslateByConveyer
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<12>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<12>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 32 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 1b 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 04 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 ec 00 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 d5 00 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 be 00 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 a8 00 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 92 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	74 7f		 je	 SHORT $LN88@LoadString
  000ac	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000af	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b2	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b5	84 d2		 test	 dl, dl
  000b7	74 6c		 je	 SHORT $LN87@LoadString
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	74 5a		 je	 SHORT $LN86@LoadString
  000c6	32 d1		 xor	 dl, cl
  000c8	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000cc	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	0f 84 89 00 00
	00		 je	 $LN111@LoadString
  000d5	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d8	84 d2		 test	 dl, dl
  000da	74 3e		 je	 SHORT $LN84@LoadString
  000dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000df	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 2b		 je	 SHORT $LN83@LoadString
  000e9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ec	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000ef	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f2	84 d2		 test	 dl, dl
  000f4	74 19		 je	 SHORT $LN82@LoadString
  000f6	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f9	32 d1		 xor	 dl, cl
  000fb	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000fe	84 c0		 test	 al, al
  00100	74 07		 je	 SHORT $LN81@LoadString
  00102	34 ea		 xor	 al, -22			; ffffffeaH
  00104	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  00107	eb 55		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00109	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0010d	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0010f	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  00112	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00114	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00118	eb 44		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0011a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0011e	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00120	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  00123	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00125	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00129	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0012b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0012f	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00131	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00135	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00137	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  0013a	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  0013c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00140	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00142	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00146	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  00148	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0014c	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  0014e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00152	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00154	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00158	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0015a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0015e	6a 02		 push	 2
  00160	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00163	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  00167	5a		 pop	 edx
$LL104@LoadString:
  00168	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0016e	83 c0 04	 add	 eax, 4
  00171	4a		 dec	 edx
  00172	75 f4		 jne	 SHORT $LL104@LoadString
  00174	6a 08		 push	 8
  00176	58		 pop	 eax
$LL101@LoadString:
  00177	8b c8		 mov	 ecx, eax
  00179	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017f	79 05		 jns	 SHORT $LN112@LoadString
  00181	49		 dec	 ecx
  00182	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00185	41		 inc	 ecx
$LN112@LoadString:
  00186	b2 ed		 mov	 dl, -19			; ffffffedH
  00188	2a d1		 sub	 dl, cl
  0018a	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  0018e	40		 inc	 eax
  0018f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00192	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00194	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00197	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0019a	57		 push	 edi
  0019b	56		 push	 esi
  0019c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0019f	50		 push	 eax
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5e		 pop	 esi
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	c9		 leave
  001b3	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ; ioINILoader::LoadInt_e<15>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<15>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadInt_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadInt_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadInt_e
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadInt_e
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadInt_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadInt_e
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadInt_e
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadInt_e
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadInt_e:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadInt_e
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadInt_e:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadInt_e
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadInt_e:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  001cf	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ; ioINILoader::LoadFloat_e<16>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<16>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadFloat_
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadFloat_
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadFloat_
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadFloat_
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadFloat_
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadFloat_
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadFloat_
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadFloat_
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadFloat_:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadFloat_:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadFloat_
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadFloat_:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001eb	51		 push	 ecx
  001ec	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	50		 push	 eax
  001f5	8b ce		 mov	 ecx, esi
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	5e		 pop	 esi
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	c9		 leave
  00209	c2 08 00	 ret	 8
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<19>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadInt_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadInt_e@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadInt_e@2
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadInt_e@2
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadInt_e@2
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e@2
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadInt_e@2
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadInt_e@2
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadInt_e@2
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadInt_e@2
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadInt_e@2
$LN75@LoadInt_e@2:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadInt_e@2:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadInt_e@2:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00229	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z ; ioINILoader::LoadFloat_e<9>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z PROC	; ioINILoader::LoadFloat_e<9>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@LoadFloat_@2
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@LoadFloat_@2
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@LoadFloat_@2
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@LoadFloat_@2
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@LoadFloat_@2
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@LoadFloat_@2
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@LoadFloat_@2
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@LoadFloat_@2
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@LoadFloat_@2
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@LoadFloat_@2
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@LoadFloat_@2
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@LoadFloat_@2
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@LoadFloat_@2
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00125	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0012a	51		 push	 ecx
  0012b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	50		 push	 eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0013a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013d	33 cd		 xor	 ecx, ebp
  0013f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00144	c9		 leave
  00145	c2 08 00	 ret	 8
??$LoadFloat_e@$08@ioINILoader@@QAEMAAY08$$CBDM@Z ENDP	; ioINILoader::LoadFloat_e<9>
_TEXT	ENDS
EXTRN	?InitResource@ioWeapon@@UAE_NXZ:PROC		; ioWeapon::InitResource
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
;	COMDAT ?InitResource@ioMapAttachWeapon@@UAE_NXZ
_TEXT	SEGMENT
?InitResource@ioMapAttachWeapon@@UAE_NXZ PROC		; ioMapAttachWeapon::InitResource, COMDAT
; _this$ = ecx

; 40   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 41   : 	if( ioWeapon::InitResource() )

  00003	e8 00 00 00 00	 call	 ?InitResource@ioWeapon@@UAE_NXZ ; ioWeapon::InitResource
  00008	84 c0		 test	 al, al
  0000a	74 25		 je	 SHORT $LN1@InitResour

; 42   : 	{
; 43   : 		DestroyResource();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	6a 00		 push	 0
  00010	8b ce		 mov	 ecx, esi
  00012	ff 90 9c 00 00
	00		 call	 DWORD PTR [eax+156]

; 44   : 
; 45   : 		return SetFireMesh( GetAttribute()->m_WeaponEffect );

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  00022	05 34 01 00 00	 add	 eax, 308		; 00000134H
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?SetFireMesh@ioMapAttachWeapon@@IAE_NABVioHashString@@@Z ; ioMapAttachWeapon::SetFireMesh
  0002f	5e		 pop	 esi

; 49   : }

  00030	c3		 ret	 0
$LN1@InitResour:

; 46   : 	}
; 47   : 
; 48   : 	return false;

  00031	32 c0		 xor	 al, al
  00033	5e		 pop	 esi

; 49   : }

  00034	c3		 ret	 0
?InitResource@ioMapAttachWeapon@@UAE_NXZ ENDP		; ioMapAttachWeapon::InitResource
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z:PROC ; ioWeapon::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapattachweapon.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioMapAttachWeapon@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -292				; size = 4
_szBuf$ = -288						; size = 260
__k$532747 = -28					; size = 19
__k$532621 = -28					; size = 16
__k$532485 = -24					; size = 15
__k$532358 = -24					; size = 12
__k$532858 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioMapAttachWeapon@@UAEXAAVioINILoader@@@Z PROC ; ioMapAttachWeapon::LoadProperty, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 53   : 	ioWeapon::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 65   : 	m_dwExplosionDuration = rkLoader.LoadInt_e( "explosion_duration", 0 );

  0001c	89 bd dc fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z ; ioWeapon::LoadProperty
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002d	8b c8		 mov	 ecx, eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00035	33 db		 xor	 ebx, ebx
  00037	68 03 01 00 00	 push	 259			; 00000103H
  0003c	8d 85 e1 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00042	53		 push	 ebx
  00043	50		 push	 eax
  00044	88 9d e0 fe ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  0004a	e8 00 00 00 00	 call	 _memset
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00052	6a 02		 push	 2
  00054	c7 45 e8 8f 83
	84 87		 mov	 DWORD PTR __k$532358[ebp], -2021358705 ; 8784838fH
  0005b	c7 45 ec b2 89
	8d 8c		 mov	 DWORD PTR __k$532358[ebp+4], -1936881230 ; 8c8d89b2H
  00062	8d 45 e8	 lea	 eax, DWORD PTR __k$532358[ebp]
  00065	c7 45 f0 88 8f
	9f 00		 mov	 DWORD PTR __k$532358[ebp+8], 10456968 ; 009f8f88H
  0006c	59		 pop	 ecx
$LL106@LoadProper:

; 54   : 
; 55   : 	DWORD dwCurTime = FRAMEGETTIME();
; 56   : 
; 57   : 	char szBuf[MAX_PATH] = "";
; 58   : 
; 59   : 	rkLoader.LoadString_e( "boom_effect", "", szBuf, MAX_PATH );

  0006d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00073	83 c0 04	 add	 eax, 4
  00076	49		 dec	 ecx
  00077	75 f4		 jne	 SHORT $LL106@LoadProper
  00079	6a 08		 push	 8
  0007b	58		 pop	 eax
$LL103@LoadProper:
  0007c	8b c8		 mov	 ecx, eax
  0007e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00084	79 05		 jns	 SHORT $LN553@LoadProper
  00086	49		 dec	 ecx
  00087	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0008a	41		 inc	 ecx
$LN553@LoadProper:
  0008b	b2 ed		 mov	 dl, -19			; ffffffedH
  0008d	2a d1		 sub	 dl, cl
  0008f	30 54 05 e8	 xor	 BYTE PTR __k$532358[ebp+eax], dl
  00093	40		 inc	 eax
  00094	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00097	7c e3		 jl	 SHORT $LL103@LoadProper
  00099	68 04 01 00 00	 push	 260			; 00000104H
  0009e	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000a4	50		 push	 eax
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000aa	8d 45 e8	 lea	 eax, DWORD PTR __k$532358[ebp]
  000ad	50		 push	 eax
  000ae	8b cf		 mov	 ecx, edi
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 60   : 	m_BoomEffect = szBuf;

  000b6	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000bc	50		 push	 eax
  000bd	8d 8e 9c 08 00
	00		 lea	 ecx, DWORD PTR [esi+2204]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000c9	6a 03		 push	 3

; 61   : 
; 62   : 	m_dwDelayDuration = rkLoader.LoadInt_e( "delay_duration", 0 );

  000cb	c7 45 e8 89 89
	87 8b		 mov	 DWORD PTR __k$532485[ebp], -1954051703 ; 8b878989H
  000d2	c7 45 ec 94 b3
	8f 9f		 mov	 DWORD PTR __k$532485[ebp+4], -1617972332 ; 9f8fb394H
  000d9	c7 45 f0 9f 8d
	9f 83		 mov	 DWORD PTR __k$532485[ebp+8], -2086695521 ; 839f8d9fH
  000e0	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$532485[ebp+12], 33410 ; 00008282H
  000e6	8d 45 e8	 lea	 eax, DWORD PTR __k$532485[ebp]
  000e9	88 5d f6	 mov	 BYTE PTR __k$532485[ebp+14], bl
  000ec	59		 pop	 ecx
$LL212@LoadProper:
  000ed	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f3	83 c0 04	 add	 eax, 4
  000f6	49		 dec	 ecx
  000f7	75 f4		 jne	 SHORT $LL212@LoadProper
  000f9	6a 0c		 push	 12			; 0000000cH
  000fb	58		 pop	 eax
$LL209@LoadProper:
  000fc	8b c8		 mov	 ecx, eax
  000fe	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00104	79 05		 jns	 SHORT $LN554@LoadProper
  00106	49		 dec	 ecx
  00107	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0010a	41		 inc	 ecx
$LN554@LoadProper:
  0010b	b2 ed		 mov	 dl, -19			; ffffffedH
  0010d	2a d1		 sub	 dl, cl
  0010f	30 54 05 e8	 xor	 BYTE PTR __k$532485[ebp+eax], dl
  00113	40		 inc	 eax
  00114	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00117	7c e3		 jl	 SHORT $LL209@LoadProper
  00119	53		 push	 ebx
  0011a	8d 45 e8	 lea	 eax, DWORD PTR __k$532485[ebp]
  0011d	8b cf		 mov	 ecx, edi
  0011f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00125	50		 push	 eax
  00126	ff d7		 call	 edi
  00128	6a 03		 push	 3
  0012a	89 86 f0 08 00
	00		 mov	 DWORD PTR [esi+2288], eax

; 63   : 
; 64   : 	m_fExplosionRange = rkLoader.LoadFloat_e( "explosion_range", 0.0f );

  00130	c7 45 e4 88 94
	9b 86		 mov	 DWORD PTR __k$532621[ebp], -2036624248 ; 869b9488H
  00137	c7 45 e8 82 9f
	82 85		 mov	 DWORD PTR __k$532621[ebp+4], -2055037054 ; 85829f82H
  0013e	c7 45 ec 83 b3
	99 8b		 mov	 DWORD PTR __k$532621[ebp+8], -1952861309 ; 8b99b383H
  00145	8d 45 e4	 lea	 eax, DWORD PTR __k$532621[ebp]
  00148	c7 45 f0 83 8b
	8e 00		 mov	 DWORD PTR __k$532621[ebp+12], 9341827 ; 008e8b83H
  0014f	59		 pop	 ecx
$LL318@LoadProper:
  00150	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00156	83 c0 04	 add	 eax, 4
  00159	49		 dec	 ecx
  0015a	75 f4		 jne	 SHORT $LL318@LoadProper
  0015c	6a 0c		 push	 12			; 0000000cH
  0015e	58		 pop	 eax
$LL315@LoadProper:
  0015f	8b c8		 mov	 ecx, eax
  00161	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00167	79 05		 jns	 SHORT $LN555@LoadProper
  00169	49		 dec	 ecx
  0016a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016d	41		 inc	 ecx
$LN555@LoadProper:
  0016e	b2 ed		 mov	 dl, -19			; ffffffedH
  00170	2a d1		 sub	 dl, cl
  00172	30 54 05 e4	 xor	 BYTE PTR __k$532621[ebp+eax], dl
  00176	40		 inc	 eax
  00177	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0017a	7c e3		 jl	 SHORT $LL315@LoadProper
  0017c	0f 57 c0	 xorps	 xmm0, xmm0
  0017f	51		 push	 ecx
  00180	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00186	8d 45 e4	 lea	 eax, DWORD PTR __k$532621[ebp]
  00189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018e	50		 push	 eax
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00195	d9 9e fc 08 00
	00		 fstp	 DWORD PTR [esi+2300]
  0019b	6a 04		 push	 4

; 65   : 	m_dwExplosionDuration = rkLoader.LoadInt_e( "explosion_duration", 0 );

  0019d	c7 45 e4 88 94
	9b 86		 mov	 DWORD PTR __k$532747[ebp], -2036624248 ; 869b9488H
  001a4	c7 45 e8 82 9f
	82 85		 mov	 DWORD PTR __k$532747[ebp+4], -2055037054 ; 85829f82H
  001ab	c7 45 ec 83 b3
	8f 9f		 mov	 DWORD PTR __k$532747[ebp+8], -1617972349 ; 9f8fb383H
  001b2	c7 45 f0 9f 8d
	9f 83		 mov	 DWORD PTR __k$532747[ebp+12], -2086695521 ; 839f8d9fH
  001b9	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$532747[ebp+16], 33410 ; 00008282H
  001bf	8d 45 e4	 lea	 eax, DWORD PTR __k$532747[ebp]
  001c2	88 5d f6	 mov	 BYTE PTR __k$532747[ebp+18], bl
  001c5	59		 pop	 ecx
$LL424@LoadProper:
  001c6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001cc	83 c0 04	 add	 eax, 4
  001cf	49		 dec	 ecx
  001d0	75 f4		 jne	 SHORT $LL424@LoadProper
  001d2	6a 10		 push	 16			; 00000010H
  001d4	58		 pop	 eax
$LL421@LoadProper:
  001d5	8b c8		 mov	 ecx, eax
  001d7	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001dd	79 05		 jns	 SHORT $LN556@LoadProper
  001df	49		 dec	 ecx
  001e0	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001e3	41		 inc	 ecx
$LN556@LoadProper:
  001e4	b2 ed		 mov	 dl, -19			; ffffffedH
  001e6	2a d1		 sub	 dl, cl
  001e8	30 54 05 e4	 xor	 BYTE PTR __k$532747[ebp+eax], dl
  001ec	40		 inc	 eax
  001ed	83 f8 12	 cmp	 eax, 18			; 00000012H
  001f0	7c e3		 jl	 SHORT $LL421@LoadProper
  001f2	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001f8	53		 push	 ebx
  001f9	8d 45 e4	 lea	 eax, DWORD PTR __k$532747[ebp]
  001fc	50		 push	 eax
  001fd	ff d7		 call	 edi
  001ff	6a 02		 push	 2
  00201	89 86 f8 08 00
	00		 mov	 DWORD PTR [esi+2296], eax

; 66   : 
; 67   : 	m_fDirOffset = rkLoader.LoadFloat_e( "x_offset", 0.0f );

  00207	c7 45 ec 95 b3
	84 8c		 mov	 DWORD PTR __k$532858[ebp], -1937460331 ; 8c84b395H
  0020e	c7 45 f0 8b 9f
	8e 9e		 mov	 DWORD PTR __k$532858[ebp+4], -1634820213 ; 9e8e9f8bH
  00215	8d 45 ec	 lea	 eax, DWORD PTR __k$532858[ebp]
  00218	88 5d f4	 mov	 BYTE PTR __k$532858[ebp+8], bl
  0021b	59		 pop	 ecx
$LL530@LoadProper:
  0021c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00222	83 c0 04	 add	 eax, 4
  00225	49		 dec	 ecx
  00226	75 f4		 jne	 SHORT $LL530@LoadProper
  00228	0f 57 c0	 xorps	 xmm0, xmm0
  0022b	51		 push	 ecx
  0022c	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00232	8d 45 ec	 lea	 eax, DWORD PTR __k$532858[ebp]
  00235	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023a	50		 push	 eax
  0023b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00241	d9 9e 04 09 00
	00		 fstp	 DWORD PTR [esi+2308]

; 68   : }

  00247	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024a	5f		 pop	 edi
  0024b	5e		 pop	 esi
  0024c	33 cd		 xor	 ecx, ebp
  0024e	5b		 pop	 ebx
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	c9		 leave
  00255	c2 04 00	 ret	 4
?LoadProperty@ioMapAttachWeapon@@UAEXAAVioINILoader@@@Z ENDP ; ioMapAttachWeapon::LoadProperty
_TEXT	ENDS
EXTRN	?CreateAttachAreaWeapon@ioWeapon@@IAEXXZ:PROC	; ioWeapon::CreateAttachAreaWeapon
; Function compile flags: /Ogsp
;	COMDAT ?Process@ioMapAttachWeapon@@UAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?Process@ioMapAttachWeapon@@UAEXMPAVioPlayStage@@@Z PROC ; ioMapAttachWeapon::Process, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 134  : 	if( !m_AreaWeaponName.IsEmpty() &&
; 135  : 		m_dwCreatedTime+m_dwAttachAreaWeaponTime < FRAMEGETTIME() )

  00006	8d 8e 3c 08 00
	00		 lea	 ecx, DWORD PTR [esi+2108]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	75 25		 jne	 SHORT $LN6@Process
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00024	8b 8e 4c 08 00
	00		 mov	 ecx, DWORD PTR [esi+2124]
  0002a	03 8e d4 04 00
	00		 add	 ecx, DWORD PTR [esi+1236]
  00030	3b c8		 cmp	 ecx, eax
  00032	73 07		 jae	 SHORT $LN6@Process

; 136  : 	{
; 137  : 		CreateAttachAreaWeapon();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?CreateAttachAreaWeapon@ioWeapon@@IAEXXZ ; ioWeapon::CreateAttachAreaWeapon
$LN6@Process:

; 138  : 	}
; 139  : 
; 140  : 	switch( m_State )

  0003b	8b 86 94 08 00
	00		 mov	 eax, DWORD PTR [esi+2196]
  00041	48		 dec	 eax
  00042	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00047	74 2a		 je	 SHORT $LN3@Process
  00049	48		 dec	 eax
  0004a	74 15		 je	 SHORT $LN2@Process
  0004c	48		 dec	 eax
  0004d	75 34		 jne	 SHORT $LN4@Process

; 148  : 	case TS_EXPLOSION:
; 149  : 		OnExplosionState( fTimePerSec, pStage );

  0004f	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  00052	51		 push	 ecx
  00053	8b ce		 mov	 ecx, esi
  00055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005a	e8 00 00 00 00	 call	 ?OnExplosionState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ; ioMapAttachWeapon::OnExplosionState

; 150  : 		break;

  0005f	eb 22		 jmp	 SHORT $LN4@Process
$LN2@Process:

; 144  : 		break;
; 145  : 	case TS_DROP:
; 146  : 		OnDropState( fTimePerSec, pStage );

  00061	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  00064	51		 push	 ecx
  00065	8b ce		 mov	 ecx, esi
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	e8 00 00 00 00	 call	 ?OnDropState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ; ioMapAttachWeapon::OnDropState

; 147  : 		break;

  00071	eb 10		 jmp	 SHORT $LN4@Process
$LN3@Process:

; 141  : 	{
; 142  : 	case TS_DELAY:
; 143  : 		OnDelayState( fTimePerSec, pStage );

  00073	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  00076	51		 push	 ecx
  00077	8b ce		 mov	 ecx, esi
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?OnDelayState@ioMapAttachWeapon@@IAEXMPAVioPlayStage@@@Z ; ioMapAttachWeapon::OnDelayState
$LN4@Process:

; 151  : 	}
; 152  : 
; 153  : 	UpdateWorldAttackBox( fTimePerSec, false );

  00083	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00088	8b 06		 mov	 eax, DWORD PTR [esi]
  0008a	6a 00		 push	 0
  0008c	51		 push	 ecx
  0008d	8b ce		 mov	 ecx, esi
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]
  0009a	5e		 pop	 esi

; 154  : }

  0009b	5d		 pop	 ebp
  0009c	c2 08 00	 ret	 8
?Process@ioMapAttachWeapon@@UAEXMPAVioPlayStage@@@Z ENDP ; ioMapAttachWeapon::Process
_TEXT	ENDS
END
